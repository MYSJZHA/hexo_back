<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>放码过来</title>
  <icon>https://www.gravatar.com/avatar/771a5b96a1b55228dbb1eeb23619ef45</icon>
  <subtitle>技术宅 huangyuan@huangyuanlove.com</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://blog.huangyuanlove.com/"/>
  <updated>2018-08-26T07:57:34.520Z</updated>
  <id>http://blog.huangyuanlove.com/</id>
  
  <author>
    <name>HuangYuan_xuan</name>
    <email>huangyuan@huangyuanlove.com</email>
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Coordinatorlayout</title>
    <link href="http://blog.huangyuanlove.com/2018/08/20/Coordinatorlayout/"/>
    <id>http://blog.huangyuanlove.com/2018/08/20/Coordinatorlayout/</id>
    <published>2018-08-20T15:16:18.000Z</published>
    <updated>2018-08-26T07:57:34.520Z</updated>
    
    <content type="html"><![CDATA[<p>上图的动画其实挺简单的，如果你知道的话，就不要继续往下看了，那是在浪费时间。<br><a id="more"></a><br>主要用的前几年推出的几个support包，可惜国内没有流行起来。</p><p>简单直接放代码：<br>gradle依赖：<br><figure class="highlight gradle"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">implementation <span class="string">'com.android.support:appcompat-v7:28.0.0-rc01'</span></div><div class="line">implementation <span class="string">'com.android.support.constraint:constraint-layout:1.1.2'</span></div><div class="line">implementation <span class="string">'com.android.support:design:28.0.0-rc01'</span></div></pre></td></tr></table></figure></p><p>布局文件：<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div></pre></td><td class="code"><pre><div class="line">&lt;?xml version="1.0" encoding="utf-8"?&gt;</div><div class="line"><span class="tag">&lt;<span class="name">android.support.design.widget.CoordinatorLayout</span> <span class="attr">xmlns:android</span>=<span class="string">"http://schemas.android.com/apk/res/android"</span></span></div><div class="line">    <span class="attr">xmlns:app</span>=<span class="string">"http://schemas.android.com/apk/res-auto"</span></div><div class="line">    <span class="attr">android:layout_width</span>=<span class="string">"match_parent"</span></div><div class="line">    <span class="attr">android:fitsSystemWindows</span>=<span class="string">"true"</span></div><div class="line">    <span class="attr">android:layout_height</span>=<span class="string">"match_parent"</span>&gt;</div><div class="line"></div><div class="line">    <span class="tag">&lt;<span class="name">android.support.design.widget.AppBarLayout</span></span></div><div class="line">        <span class="attr">android:layout_width</span>=<span class="string">"match_parent"</span></div><div class="line">        <span class="attr">android:layout_height</span>=<span class="string">"160dp"</span></div><div class="line">        <span class="attr">android:fitsSystemWindows</span>=<span class="string">"true"</span></div><div class="line">        <span class="attr">android:theme</span>=<span class="string">"@style/ThemeOverlay.AppCompat.ActionBar"</span>&gt;</div><div class="line"></div><div class="line">        <span class="tag">&lt;<span class="name">android.support.design.widget.CollapsingToolbarLayout</span></span></div><div class="line">            <span class="attr">android:id</span>=<span class="string">"@+id/collapsingToolbarLayout"</span></div><div class="line">            <span class="attr">android:layout_width</span>=<span class="string">"match_parent"</span></div><div class="line">            <span class="attr">android:layout_height</span>=<span class="string">"match_parent"</span></div><div class="line">            <span class="attr">android:fitsSystemWindows</span>=<span class="string">"true"</span></div><div class="line">            <span class="attr">app:collapsedTitleTextAppearance</span>=<span class="string">"@style/TextAppearance.AppCompat.Title"</span></div><div class="line">            <span class="attr">app:contentScrim</span>=<span class="string">"?attr/colorPrimaryDark"</span></div><div class="line">            <span class="attr">app:expandedTitleMarginStart</span>=<span class="string">"48dp"</span></div><div class="line">            <span class="attr">app:expandedTitleTextAppearance</span>=<span class="string">"@style/TextAppearance.AppCompat.Title"</span></div><div class="line">            <span class="attr">app:layout_scrollFlags</span>=<span class="string">"scroll|exitUntilCollapsed"</span>&gt;</div><div class="line"></div><div class="line">            <span class="tag">&lt;<span class="name">ImageView</span></span></div><div class="line">                <span class="attr">android:layout_width</span>=<span class="string">"match_parent"</span></div><div class="line">                <span class="attr">android:layout_height</span>=<span class="string">"wrap_content"</span></div><div class="line">                <span class="attr">android:fitsSystemWindows</span>=<span class="string">"true"</span></div><div class="line">                <span class="attr">android:scaleType</span>=<span class="string">"fitXY"</span></div><div class="line">                <span class="attr">android:src</span>=<span class="string">"@drawable/title_bg"</span></div><div class="line">                <span class="attr">app:layout_collapseMode</span>=<span class="string">"parallax"</span></div><div class="line">                <span class="attr">app:layout_collapseParallaxMultiplier</span>=<span class="string">"0.5"</span> /&gt;</div><div class="line"></div><div class="line">            <span class="tag">&lt;<span class="name">android.support.v7.widget.Toolbar</span></span></div><div class="line">                <span class="attr">android:id</span>=<span class="string">"@+id/toolbar"</span></div><div class="line">                <span class="attr">android:layout_width</span>=<span class="string">"match_parent"</span></div><div class="line">                <span class="attr">android:layout_height</span>=<span class="string">"?attr/actionBarSize"</span> /&gt;</div><div class="line">        <span class="tag">&lt;/<span class="name">android.support.design.widget.CollapsingToolbarLayout</span>&gt;</span></div><div class="line"></div><div class="line">    <span class="tag">&lt;/<span class="name">android.support.design.widget.AppBarLayout</span>&gt;</span></div><div class="line"></div><div class="line">    <span class="tag">&lt;<span class="name">android.support.v7.widget.RecyclerView</span></span></div><div class="line">        <span class="attr">android:id</span>=<span class="string">"@+id/recyclerview"</span></div><div class="line">        <span class="attr">android:layout_width</span>=<span class="string">"match_parent"</span></div><div class="line">        <span class="attr">android:layout_height</span>=<span class="string">"match_parent"</span></div><div class="line">        <span class="attr">app:layout_behavior</span>=<span class="string">"@string/appbar_scrolling_view_behavior"</span> /&gt;</div><div class="line"></div><div class="line"></div><div class="line"><span class="tag">&lt;/<span class="name">android.support.design.widget.CoordinatorLayout</span>&gt;</span></div></pre></td></tr></table></figure></p><p>activity代码：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MainActivity</span> <span class="keyword">extends</span> <span class="title">AppCompatActivity</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="keyword">private</span> List&lt;String&gt; data = <span class="keyword">new</span> ArrayList&lt;&gt;();</div><div class="line"></div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">(Bundle savedInstanceState)</span> </span>&#123;</div><div class="line">        <span class="keyword">super</span>.onCreate(savedInstanceState);</div><div class="line">        setContentView(R.layout.activity_main);</div><div class="line">        Toolbar toolbar = findViewById(R.id.toolbar);</div><div class="line">        setSupportActionBar(toolbar);</div><div class="line"></div><div class="line">        CollapsingToolbarLayout collapsingToolbarLayout = findViewById(R.id.collapsingToolbarLayout);</div><div class="line">        collapsingToolbarLayout.setTitle(<span class="string">"Test CoordinatorLayout"</span>);</div><div class="line">        collapsingToolbarLayout.setContentScrimColor(Color.GRAY);</div><div class="line">        collapsingToolbarLayout.setCollapsedTitleTextColor(ContextCompat.getColor(<span class="keyword">this</span>,R.color.colorAccent));</div><div class="line">        collapsingToolbarLayout.setExpandedTitleColor(Color.WHITE);</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span> ; i &lt; <span class="number">100</span> ;i ++)&#123;</div><div class="line">            data.add(<span class="string">"item -- &gt;"</span> + i);</div><div class="line">        &#125;</div><div class="line">        RecyclerView recyclerView = findViewById(R.id.recyclerview);</div><div class="line"></div><div class="line">        LinearLayoutManager linearLayoutManager = <span class="keyword">new</span> LinearLayoutManager(MainActivity.<span class="keyword">this</span>);</div><div class="line">        linearLayoutManager.setOrientation(LinearLayoutManager.VERTICAL);</div><div class="line">        recyclerView.setLayoutManager(linearLayoutManager);</div><div class="line">        RecyclerViewAdapter adapter = <span class="keyword">new</span> RecyclerViewAdapter();</div><div class="line">        recyclerView.setAdapter(adapter);</div><div class="line">    &#125;</div><div class="line"></div><div class="line"></div><div class="line">    <span class="class"><span class="keyword">class</span> <span class="title">RecyclerViewAdapter</span> <span class="keyword">extends</span> <span class="title">RecyclerView</span>.<span class="title">Adapter</span>&lt;<span class="title">RecyclerViewAdapter</span>.<span class="title">ViewHolder</span>&gt;</span>&#123;</div><div class="line"></div><div class="line"></div><div class="line">        <span class="meta">@NonNull</span></div><div class="line">        <span class="meta">@Override</span></div><div class="line">        <span class="function"><span class="keyword">public</span> ViewHolder <span class="title">onCreateViewHolder</span><span class="params">(@NonNull ViewGroup viewGroup, <span class="keyword">int</span> i)</span> </span>&#123;</div><div class="line">            View view = LayoutInflater.from(MainActivity.<span class="keyword">this</span>).inflate(android.R.layout.simple_list_item_1,viewGroup,<span class="keyword">false</span>);</div><div class="line"></div><div class="line">            <span class="keyword">return</span> <span class="keyword">new</span> ViewHolder(view);</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="meta">@Override</span></div><div class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onBindViewHolder</span><span class="params">(@NonNull ViewHolder viewHolder, <span class="keyword">int</span> i)</span> </span>&#123;</div><div class="line"></div><div class="line">            viewHolder.textView.setText(data.get(i));</div><div class="line">            viewHolder.textView.setTextColor(ContextCompat.getColor(MainActivity.<span class="keyword">this</span>,R.color.colorAccent));</div><div class="line"></div><div class="line"></div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="meta">@Override</span></div><div class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getItemCount</span><span class="params">()</span> </span>&#123;</div><div class="line">            <span class="keyword">return</span> data.size();</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="class"><span class="keyword">class</span> <span class="title">ViewHolder</span> <span class="keyword">extends</span> <span class="title">RecyclerView</span>.<span class="title">ViewHolder</span></span>&#123;</div><div class="line"></div><div class="line">            TextView textView;</div><div class="line"></div><div class="line">            <span class="function"><span class="keyword">public</span> <span class="title">ViewHolder</span><span class="params">(@NonNull View itemView)</span> </span>&#123;</div><div class="line">                <span class="keyword">super</span>(itemView);</div><div class="line">                textView = itemView.findViewById(android.R.id.text1);</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><p>不想多写什么了，可以自己去搜这些东西的用法。傲娇脸~_~</p><hr><p>以上</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;上图的动画其实挺简单的，如果你知道的话，就不要继续往下看了，那是在浪费时间。&lt;br&gt;
    
    </summary>
    
    
      <category term="Android" scheme="http://blog.huangyuanlove.com/tags/Android/"/>
    
  </entry>
  
  <entry>
    <title>ConstraintLayout</title>
    <link href="http://blog.huangyuanlove.com/2018/08/09/ConstraintLayout/"/>
    <id>http://blog.huangyuanlove.com/2018/08/09/ConstraintLayout/</id>
    <published>2018-08-09T02:40:53.000Z</published>
    <updated>2018-08-10T13:24:06.745Z</updated>
    
    <content type="html"><![CDATA[<p><a href="https://developer.android.google.cn/reference/android/support/constraint/ConstraintLayout" target="_blank" rel="external">https://developer.android.google.cn/reference/android/support/constraint/ConstraintLayout</a><br>A ConstraintLayout is a ViewGroup which allows you to position and size widgets in a flexible way.</p><a id="more"></a><h3 id="版本支持"><a href="#版本支持" class="headerlink" title="版本支持"></a>版本支持</h3><p>ConstraintLayout是一个支持库，向前兼容到Android9，以后还会添加更多的新特性。现在公司的产品的最低版本支持都在2.3之上，部分产品最低版本支持保持在4.4之上。这就意味着我们不需要关心最低版本支持的事情。</p><h3 id="新特性"><a href="#新特性" class="headerlink" title="新特性"></a>新特性</h3><p>在使用新特性的时候是不能有循环依赖的，比如相对定位，不能A依赖于B的位置，B依赖C的位置，而C又依赖A的位置</p><h4 id="Relative-positioning"><a href="#Relative-positioning" class="headerlink" title="Relative positioning"></a>Relative positioning</h4><p>相对定位是ConstraintLayout中最基本的构建方式，也就是一个空间相对于另外一个空间进行位置确定，可以在横向和竖向上进行约束：</p><blockquote><p>Horizontal Axis: left, right, start and end sides<br>  Vertical Axis: top, bottom sides and text baseline</p></blockquote><p>如果我们需要让ButtonB在ButtonA的右侧，如下图：<br><img src="/image/Android/ConstraintLayout/relative_positioning_example.png" alt="Relative Positioning Example"></p><p>在布局文件中只需要：<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">Button</span> <span class="attr">android:id</span>=<span class="string">"@+id/buttonA"</span> <span class="attr">...</span> /&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">Button</span> <span class="attr">android:id</span>=<span class="string">"@+id/buttonB"</span> <span class="attr">...</span></span></div><div class="line">        <span class="attr">app:layout_constraintLeft_toRightOf</span>=<span class="string">"@+id/buttonA"</span> /&gt;</div></pre></td></tr></table></figure></p><p>这就告诉系统 让buttonB的左边约束于buttonA的右边<br>下面列出了所有可用的约束方式：</p><ul><li>layout_constraintLeft_toLeftOf</li><li>layout_constraintLeft_toRightOf</li><li>layout_constraintRight_toLeftOf</li><li>layout_constraintRight_toRightOf</li><li>layout_constraintTop_toTopOf</li><li>layout_constraintTop_toBottomOf</li><li>layout_constraintBottom_toTopOf</li><li>layout_constraintBottom_toBottomOf</li><li>layout_constraintBaseline_toBaselineOf</li><li>layout_constraintStart_toEndOf</li><li>layout_constraintStart_toStartOf</li><li>layout_constraintEnd_toStartOf</li><li>layout_constraintEnd_toEndOf</li></ul><p>各约束位置如下：<br><img src="/image/Android/ConstraintLayout/relative_position_constraint.png" alt="relative_position_constraint"><br>上面这些约束关系全部都是本身相对于另外一个控件(使用@id方式引用另外控件)或者父布局(使用parent方式引用父控件)进行约束</p><h4 id="Margins"><a href="#Margins" class="headerlink" title="Margins"></a>Margins</h4><p><img src="/image/Android/ConstraintLayout/relative_positioning_margins.png" alt="Relative Positioning Margins"><br>这里的外边距和其他布局方式的外边距一样，不能是负数，属性如下：</p><ul><li>android:layout_marginStart</li><li>android:layout_marginEnd</li><li>android:layout_marginLeft</li><li>android:layout_marginTop</li><li>android:layout_marginRight</li><li>android:layout_marginBottom</li></ul><p>添加的一个新属性是 <code>maiginGone</code>,当一个约束目标的可见性为GONE的时候(View.GONE)，可以改变当前控件的外边距，比如B是相对于A进行约束，当A不可见的时候，可以改变B的外边距，也就是B的外边距可以根据Ade可见性设置不同的值，属性如下</p><ul><li>layout_goneMarginStart</li><li>layout_goneMarginEnd</li><li>layout_goneMarginLeft</li><li>layout_goneMarginTop</li><li>layout_goneMarginRight</li><li>layout_goneMarginBottom</li></ul><h4 id="Centering-positioning-and-bias"><a href="#Centering-positioning-and-bias" class="headerlink" title="Centering positioning and bias"></a>Centering positioning and bias</h4><p><strong> Centering Positioning </strong><br>如果对一个控件的左右(上下)都添加的约束，那么ConstraintLayout的表现就像有两个大小相等方向相反的力在拉这个控件一个样，比如<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">android.support.constraint.ConstraintLayout</span> <span class="attr">...</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">Button</span> <span class="attr">android:id</span>=<span class="string">"@+id/button"</span> <span class="attr">...</span></span></div><div class="line">        <span class="attr">app:layout_constraintLeft_toLeftOf</span>=<span class="string">"parent"</span></div><div class="line">        <span class="attr">app:layout_constraintRight_toRightOf</span>=<span class="string">"parent/&gt;</span></div><div class="line">&lt;/&gt;</div></pre></td></tr></table></figure></p><p>表现如下：<br><img src="/image/Android/ConstraintLayout/centering_positioning.png" alt="Centering Positioning"><br>这样就会产生居中效果，如果子控件和父控件的尺寸相同，这写属性就没有意义了</p><p><strong> bias </strong><br>当遇到上面这种约束的时候，我们可以使用<code>bias</code>属性让控件偏向于哪一个方向,属性如下：</p><ul><li>layout_constraintHorizontal_bias</li><li>layout_constraintVertical_bias<br>例如，如下代码：<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">android.support.constraint.ConstraintLayout</span> <span class="attr">...</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">Button</span> <span class="attr">android:id</span>=<span class="string">"@+id/button"</span> <span class="attr">...</span></span></div><div class="line">        <span class="attr">app:layout_constraintHorizontal_bias</span>=<span class="string">"0.3"</span></div><div class="line">        <span class="attr">app:layout_constraintLeft_toLeftOf</span>=<span class="string">"parent"</span></div><div class="line">        <span class="attr">app:layout_constraintRight_toRightOf</span>=<span class="string">"parent/&gt;</span></div><div class="line">&lt;/&gt;</div></pre></td></tr></table></figure></li></ul><p>表现如下：<br><img src="/image/Android/ConstraintLayout/centering_positioning_with_bias.png" alt="Centering Positioning with Bias"></p><h4 id="Circular-positioning-Added-in-1-1"><a href="#Circular-positioning-Added-in-1-1" class="headerlink" title="Circular positioning (Added in 1.1)"></a>Circular positioning (Added in 1.1)</h4><p>这个属性是1.1版本添加进去的，可以使用<code>angle</code>和<code>distance</code>来约束一个控件的中心点和另外一个空间的中心点的位置关系，这样就可以把空间定位在一个圆上，可用属性如下：</p><ul><li><strong>layout_constraintCircle </strong> : references another widget id</li><li><strong>layout_constraintCircleRadius </strong> : the distance to the other widget center</li><li><strong>layout_constraintCircleAngle </strong> : which angle the widget should be at (in degrees, from 0 to 360)</li></ul><p>示例如下：<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">Button</span> <span class="attr">android:id</span>=<span class="string">"@+id/buttonA"</span> <span class="attr">...</span> /&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">Button</span> <span class="attr">android:id</span>=<span class="string">"@+id/buttonB"</span> <span class="attr">...</span></span></div><div class="line">      <span class="attr">app:layout_constraintCircle</span>=<span class="string">"@+id/buttonA"</span></div><div class="line">      <span class="attr">app:layout_constraintCircleRadius</span>=<span class="string">"100dp"</span></div><div class="line">      <span class="attr">app:layout_constraintCircleAngle</span>=<span class="string">"45"</span> /&gt;</div></pre></td></tr></table></figure></p><p>表现如下：<br><img src="/image/Android/ConstraintLayout/circular_positioning.png" alt="Circular Positioning"></p><h4 id="Visibility-behavior"><a href="#Visibility-behavior" class="headerlink" title="Visibility behavior"></a>Visibility behavior</h4><p>ConstraintLayout对于被标记为GONE的控件有特殊的处理。一般布局中，GONE控件是不会展示在界面上并且不再属于布局的一部分，但是在布局计算上，ConstraintLayout和传统布局有很大的区别</p><ol><li>传统布局下，GONE控件会被认为大小是0，也就是一个点</li><li>在ConstraintLayout中其大小仍然按照可见大小计算，但是其外边距为0</li></ol><p><img src="/image/Android/ConstraintLayout/visibility_behavior.png" alt="Visibility Behavior"></p><h4 id="Dimension-constraints"><a href="#Dimension-constraints" class="headerlink" title="Dimension constraints"></a>Dimension constraints</h4><h5 id="Minimum-dimensions-on-ConstraintLayout"><a href="#Minimum-dimensions-on-ConstraintLayout" class="headerlink" title="Minimum dimensions on ConstraintLayout"></a>Minimum dimensions on ConstraintLayout</h5><p>可以像普通控件一样设置最小最大尺寸,属性如下：</p><ul><li><strong> android:minWidth </strong> set the minimum width for the layout</li><li><strong> android:minHeight </strong> set the minimum height for the layout</li><li><strong> android:maxWidth </strong> set the maximum width for the layout</li><li><strong> android:maxHeight </strong> set the maximum height for the layout</li></ul><p>这些属性当ConstraintLayout的宽高为<code>WRAP_CONTENT</code>时有效。</p><h5 id="Widgets-dimension-constraints"><a href="#Widgets-dimension-constraints" class="headerlink" title="Widgets dimension constraints"></a>Widgets dimension constraints</h5><p>可以通过<code>android:layout_width</code>和<code>android:layout_height</code>设置控件的尺寸，有三种方式：</p><ul><li>固定值</li><li>WRAP_CONTENT</li><li>0dp, 相当于<code>MATCH_CONSTRAINT</code></li></ul><p>前两种方式和普通布局表现出来的行为一样。最后一种会通过约束来重新设置控件尺寸，如果设置了margin，在布局计算的时候也会被考虑进去。<br> <img src="/image/Android/ConstraintLayout/dimension_constraints.png" alt="Dimension Constraints"><br>上图中的a是wrap_content,b是0dp，c是设置了margin的0dp。需要注意的是，在ConstraintLayout中，MATCH_PARENT是不推荐使用的。</p><h5 id="WRAP-CONTENT-enforcing-constraints-Added-in-1-1"><a href="#WRAP-CONTENT-enforcing-constraints-Added-in-1-1" class="headerlink" title="WRAP_CONTENT:enforcing constraints (Added in 1.1)"></a>WRAP_CONTENT:enforcing constraints (Added in 1.1)</h5><p>如果控件实际尺寸超过了约束的尺寸，那么约束就会失效，这时候可以添加如下属性来限制：</p><ul><li>app:layout_constrainedWidth=”true|false”</li><li>app:layout_constrainedHeight=”true|false”</li></ul><p>将B控件约束于A控件和父控件的中间，尺寸都为<code>wrap_content</code><br><img src="/image/Android/ConstraintLayout/wrap_content_enforcing_constraints1.png" alt="enforcing constraints"><br>这时候如果将B控件填充很长的文件，那么B控件的左侧则会突破约束，和A控件的中心对齐，如果我们不想要这种方式，还是要求B的左侧和Ade右侧对齐，则可以天剑<br><code>layout_constrainedWidth=&quot;true&quot;</code>属性进行约束，实例如下：<br><img src="/image/Android/ConstraintLayout/wrap_content_enforcing_constraints2.png" alt="约束失效"><br><img src="/image/Android/ConstraintLayout/wrap_content_enforcing_constraints3.png" alt="添加强制约束属性"></p><h5 id="MATCH-CONSTRAINT-dimensions-Added-in-1-1"><a href="#MATCH-CONSTRAINT-dimensions-Added-in-1-1" class="headerlink" title="MATCH_CONSTRAINT dimensions (Added in 1.1)"></a>MATCH_CONSTRAINT dimensions (Added in 1.1)</h5><p>当控件的尺寸被设置为<code>MATCH_CONSTRAINT</code>时，默认的行为是占据所有的剩余空间，可以使用如下属性来更改此行为：</p><ul><li><strong> layout_constraintWidth_min </strong> 和 <strong> layout_constraintHeight_min </strong> : will set the minimum size for this dimension</li><li><strong> layout_constraintWidth_max </strong> 和 <strong> layout_constraintHeight_max </strong> : will set the maximum size for this dimension</li><li><strong> layout_constraintWidth_percent </strong> 和 <strong> layout_constraintHeight_percent </strong> : will set the size of this dimension as a percentage of the parent</li></ul><h5 id="Percent-dimension"><a href="#Percent-dimension" class="headerlink" title="Percent dimension"></a>Percent dimension</h5><p>To use percent, you need to set the following:<br>想要使用百分比布局，需要设置如下属性：</p><ol><li>控件宽高设置为 <code>MATCH_CONSTRAINT</code> (0dp)</li><li><code>app:layout_constraintWidth_default</code>属性值设置为<code>percent</code> </li><li>设置 <code>layout_constraintWidth_percent</code>或者<code>layout_constraintHeight_percent</code>属性值(0-1之间)</li></ol><p>下面的TextView控件将占据剩余宽度的50%和剩余高度的50%,示例：<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">TextView</span></span></div><div class="line">        <span class="attr">android:id</span>=<span class="string">"@+id/textView6"</span></div><div class="line">        <span class="attr">android:layout_width</span>=<span class="string">"0dp"</span></div><div class="line">        <span class="attr">android:layout_height</span>=<span class="string">"0dp"</span></div><div class="line">        <span class="attr">android:background</span>=<span class="string">"@color/colorAccent"</span></div><div class="line">        <span class="attr">app:layout_constraintHeight_default</span>=<span class="string">"percent"</span></div><div class="line">        <span class="attr">app:layout_constraintHeight_percent</span>=<span class="string">"0.5"</span></div><div class="line">        <span class="attr">app:layout_constraintWidth_default</span>=<span class="string">"percent"</span></div><div class="line">        <span class="attr">app:layout_constraintWidth_percent</span>=<span class="string">"0.5"</span> /&gt;</div></pre></td></tr></table></figure></p><h5 id="Ratio"><a href="#Ratio" class="headerlink" title="Ratio"></a>Ratio</h5><p>可以设置控件的宽高比例，为了实现这种方式，需要让控件的宽或者高设置为0dp(MATCH_CONSTRAINT)，如下：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">Button</span> <span class="attr">android:layout_width</span>=<span class="string">"wrap_content"</span></span></div><div class="line">        <span class="attr">android:layout_height</span>=<span class="string">"0dp"</span></div><div class="line">        <span class="attr">app:layout_constraintDimensionRatio</span>=<span class="string">"1:1"</span> /&gt;</div></pre></td></tr></table></figure><p>这样的话，高度会随着宽度的改变而改变，并且大小和宽度一致。设置宽高比的方式有两种：</p><ol><li>一个浮点数，<code>受约束的一方的尺寸/另一方尺寸</code>得到的数字</li><li>宽度:高度</li></ol><p>如果宽高两个方向同时设置了0dp(MATCH_CONSTRAINT)，系统会设置满足比例的最大尺寸，这种情况下还要保持宽高比例，需要在比例前面添加W或者H以确定受约束的是高还是宽。</p><blockquote><p>You can also use ratio if both dimensions are set to MATCH_CONSTRAINT (0dp). In this case the system sets the largest dimensions the satisfies all constraints and maintains the    aspect ratio specified. To constrain one specific side based on the dimensions of another, you can pre append W,” or H, to constrain the width or height respectively. For          example, If one dimension is constrained by two targets (e.g. width is 0dp and centered on parent) you can indicate which side should be constrained, by adding the letter W (for   constraining the width) or H (for constraining the height) in front of the ratio, separated by a comma:<br>  <figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">Button</span> <span class="attr">android:layout_width</span>=<span class="string">"0dp"</span></span></div><div class="line">        <span class="attr">android:layout_height</span>=<span class="string">"0dp"</span></div><div class="line">        <span class="attr">app:layout_constraintDimensionRatio</span>=<span class="string">"H,16:9"</span></div><div class="line">        <span class="attr">app:layout_constraintBottom_toBottomOf</span>=<span class="string">"parent"</span></div><div class="line">        <span class="attr">app:layout_constraintTop_toTopOf</span>=<span class="string">"parent"</span>/&gt;</div></pre></td></tr></table></figure></p><p>will set the height of the button following a 16:9 ratio, while the width of the button will match the constraints to parent.</p></blockquote><h4 id="Chains"><a href="#Chains" class="headerlink" title="Chains"></a>Chains</h4><p>Chains 在单轴（水平或垂直）上提供类似组的行为。另一个轴可以独立地约束。</p><h5 id="Creating-a-chain"><a href="#Creating-a-chain" class="headerlink" title="Creating a chain"></a>Creating a chain</h5><p>如果一组小部件通过双向连接链接在一起，则它们被视为链（参见下图，显示最小链，具有两个小部件）。<br><img src="/image/Android/ConstraintLayout/chain.png" alt="chain"></p><h5 id="Chain-heads"><a href="#Chain-heads" class="headerlink" title="Chain heads"></a>Chain heads</h5><p>横向上，Chain头部是Chain最左边的控件；纵向上，Chain头部是Chain最顶部的控件。<br><img src="/image/Android/ConstraintLayout/chain_head.png" alt="chain head"></p><h5 id="Margins-in-chains"><a href="#Margins-in-chains" class="headerlink" title="Margins in chains"></a>Margins in chains</h5><p>如果连接时定义了外边距，Chain就会发生变化。在SPREAD CHAIN中，外边距会从已经分配好的空间中去掉。原文如下：</p><blockquote><p>If margins are specified on connections, they will be taken in account. In the case of spread chains, margins will be deducted from the allocated space.</p></blockquote><h5 id="Chain-Style"><a href="#Chain-Style" class="headerlink" title="Chain Style"></a>Chain Style</h5><p>当对Chain的第一个元素设置layout_constraintHorizontal_chainStyle或layout_constraintVertical_chainStyle属性，Chain就会根据特定的样式（默认样式为CHAIN_SPREAD）进行相应变化，样式类型如下：</p><ul><li>CHAIN_SPREAD – 元素呗分散开 (默认样式) </li><li>Weighted chain – 在 CHAIN_SPREAD mo样式中,如果某些控件设置了<code>MATCH_CONSTRAINT</code>属性, 他们将平分剩余空间 </li><li>CHAIN_SPREAD_INSIDE – Chain的头尾元素紧贴父容器</li><li>CHAIN_PACKED – Chain中的所有控件合并在一起后在剩余的空间中居中</li></ul><p>图示如下：<br><img src="/image/Android/ConstraintLayout/chain_styles.png" alt="chain styles"></p><h5 id="Weighted-chains"><a href="#Weighted-chains" class="headerlink" title="Weighted chains"></a>Weighted chains</h5><p>默认的Chain会在空间里平均散开。如果其中有一个或多个元素使用了MATCH_CONSTRAINT属性，那么他们会将剩余的空间平均填满。属性layout_constraintHorizontal_height和layout_constraintVertical_weight控制使用MATCH_CONSTRAINT的元素如何均分空间。 例如，一个Chain中包含两个使用MATCH_CONSTRAINT的元素，第一个元素使用的权重为2，第二个元素使用的权重为1，那么被第一个元素占用的空间是第二个元素的2倍。</p><h5 id="Margins-and-chains-in-1-1"><a href="#Margins-and-chains-in-1-1" class="headerlink" title="Margins and chains (in 1.1)"></a>Margins and chains (in 1.1)</h5><p>在chain中是可以使用margin属性的，例如，在一个水平的chain中，一个元素定义了right_magin=10dp,下一个元素定义了margin_left=5dp，那么两者之间的间距就是15dp.</p><h4 id="Virtual-Helpers-objects"><a href="#Virtual-Helpers-objects" class="headerlink" title="Virtual Helpers objects"></a>Virtual Helpers objects</h4><h5 id="Guideline"><a href="#Guideline" class="headerlink" title="Guideline"></a>Guideline</h5><p><code>Guideline</code>是只能用在<code>ConstraintLayout</code>布局里面的一个工具类，用于辅助布局，类似为辅助线，可以设置<code>android:orientation</code>属性来确定是横向的还是纵向的。 </p><ul><li>当设置为vertical的时候，Guideline的宽度为0，高度是parent也就是ConstraintLayout的高度 </li><li>同样设置为horizontal的时候，高度为0，宽度是parent的宽度</li></ul><p>定位Guideline有三种方式，这三种方式只能选择一个</p><ul><li>指定距离左侧或顶部的固定距离（layout_constraintGuide_begin） </li><li>指定距离右侧或底部的固定距离（layout_constraintGuide_end） </li><li>指定在父控件中的宽度或高度的百分比（layout_constraintGuide_percent）</li></ul><p>示例如下：<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">android.support.constraint.Guideline</span></span></div><div class="line">        <span class="attr">android:id</span>=<span class="string">"@+id/vertical_guideline"</span></div><div class="line">        <span class="attr">android:layout_width</span>=<span class="string">"wrap_content"</span></div><div class="line">        <span class="attr">android:layout_height</span>=<span class="string">"wrap_content"</span></div><div class="line">        <span class="attr">android:orientation</span>=<span class="string">"vertical"</span></div><div class="line">        <span class="attr">app:layout_constraintGuide_percent</span>=<span class="string">"0.5"</span> /&gt;</div><div class="line"></div><div class="line"></div><div class="line">    <span class="tag">&lt;<span class="name">android.support.constraint.Guideline</span></span></div><div class="line">        <span class="attr">android:id</span>=<span class="string">"@+id/horizontal_guideline"</span></div><div class="line">        <span class="attr">android:layout_width</span>=<span class="string">"wrap_content"</span></div><div class="line">        <span class="attr">android:layout_height</span>=<span class="string">"wrap_content"</span></div><div class="line">        <span class="attr">android:orientation</span>=<span class="string">"horizontal"</span></div><div class="line">        <span class="attr">app:layout_constraintGuide_percent</span>=<span class="string">"0.5"</span> /&gt;</div></pre></td></tr></table></figure></p><p>声明了一个垂直居中，一个水平居中的GuideLine，效果如下，这两个控件在View上是不可见的。<br><img src="/image/Android/ConstraintLayout/guideLine_declaration.png" alt="guideline declaration"></p><p>接着就可以根据这两条辅助线来定位其他控件了<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">Button</span></span></div><div class="line">    <span class="attr">android:text</span>=<span class="string">"top_left"</span></div><div class="line">    <span class="attr">android:id</span>=<span class="string">"@+id/top_left_button"</span></div><div class="line">    <span class="attr">android:layout_width</span>=<span class="string">"wrap_content"</span></div><div class="line">    <span class="attr">android:layout_height</span>=<span class="string">"wrap_content"</span></div><div class="line">    <span class="attr">app:layout_constraintBottom_toBottomOf</span>=<span class="string">"@id/horizontal_guideline"</span></div><div class="line">    <span class="attr">app:layout_constraintLeft_toLeftOf</span>=<span class="string">"parent"</span></div><div class="line">    <span class="attr">app:layout_constraintRight_toLeftOf</span>=<span class="string">"@id/vertical_guideline"</span></div><div class="line">    <span class="attr">app:layout_constraintTop_toTopOf</span>=<span class="string">"parent"</span> /&gt;</div><div class="line"></div><div class="line"><span class="tag">&lt;<span class="name">Button</span></span></div><div class="line">    <span class="attr">android:text</span>=<span class="string">"top_right"</span></div><div class="line">    <span class="attr">android:id</span>=<span class="string">"@+id/top_right_button"</span></div><div class="line">    <span class="attr">android:layout_width</span>=<span class="string">"wrap_content"</span></div><div class="line">    <span class="attr">android:layout_height</span>=<span class="string">"wrap_content"</span></div><div class="line">    <span class="attr">app:layout_constraintBottom_toBottomOf</span>=<span class="string">"@id/horizontal_guideline"</span></div><div class="line">    <span class="attr">app:layout_constraintLeft_toLeftOf</span>=<span class="string">"@id/vertical_guideline"</span></div><div class="line">    <span class="attr">app:layout_constraintRight_toRightOf</span>=<span class="string">"parent"</span></div><div class="line">    <span class="attr">app:layout_constraintTop_toTopOf</span>=<span class="string">"parent"</span> /&gt;</div><div class="line"></div><div class="line"><span class="tag">&lt;<span class="name">Button</span></span></div><div class="line">    <span class="attr">android:text</span>=<span class="string">"bottom_right"</span></div><div class="line">    <span class="attr">android:id</span>=<span class="string">"@+id/bottom_right_button"</span></div><div class="line">    <span class="attr">android:layout_width</span>=<span class="string">"wrap_content"</span></div><div class="line">    <span class="attr">android:layout_height</span>=<span class="string">"wrap_content"</span></div><div class="line">    <span class="attr">app:layout_constraintBottom_toBottomOf</span>=<span class="string">"parent"</span></div><div class="line">    <span class="attr">app:layout_constraintLeft_toLeftOf</span>=<span class="string">"@id/vertical_guideline"</span></div><div class="line">    <span class="attr">app:layout_constraintRight_toRightOf</span>=<span class="string">"parent"</span></div><div class="line">    <span class="attr">app:layout_constraintTop_toTopOf</span>=<span class="string">"@id/horizontal_guideline"</span> /&gt;</div><div class="line"></div><div class="line"><span class="tag">&lt;<span class="name">Button</span></span></div><div class="line">    <span class="attr">android:text</span>=<span class="string">"bottom_left"</span></div><div class="line">    <span class="attr">android:id</span>=<span class="string">"@+id/bottom_left_button"</span></div><div class="line">    <span class="attr">android:layout_width</span>=<span class="string">"wrap_content"</span></div><div class="line">    <span class="attr">android:layout_height</span>=<span class="string">"wrap_content"</span></div><div class="line">    <span class="attr">app:layout_constraintBottom_toBottomOf</span>=<span class="string">"parent"</span></div><div class="line">    <span class="attr">app:layout_constraintLeft_toLeftOf</span>=<span class="string">"parent"</span></div><div class="line">    <span class="attr">app:layout_constraintRight_toRightOf</span>=<span class="string">"@id/vertical_guideline"</span></div><div class="line">    <span class="attr">app:layout_constraintTop_toTopOf</span>=<span class="string">"@id/horizontal_guideline"</span> /&gt;</div></pre></td></tr></table></figure></p><p>效果如下：<br><img src="/image/Android/ConstraintLayout/guideline_relative.png" alt="guideline_relative"></p><h5 id="Barrier"><a href="#Barrier" class="headerlink" title="Barrier"></a>Barrier</h5><p>Barrier可以引用多个控件，根据他们之中最大的宽高来创建一个虚拟的guideline，<br>假设我们有两个按钮，<code>@id/button1</code>和<code>@id/button2</code>,让Barrier的constraint_referenced_ids属性引用这两个id，如下：<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">android.support.constraint.Barrier</span></span></div><div class="line">    <span class="attr">android:id</span>=<span class="string">"@+id/barrier"</span></div><div class="line">    <span class="attr">android:layout_width</span>=<span class="string">"wrap_content"</span></div><div class="line">    <span class="attr">android:layout_height</span>=<span class="string">"wrap_content"</span></div><div class="line">    <span class="attr">app:barrierDirection</span>=<span class="string">"end"</span></div><div class="line">    <span class="attr">app:constraint_referenced_ids</span>=<span class="string">"button1,button2"</span> /&gt;</div></pre></td></tr></table></figure></p><p>示例如下：<br><img src="/image/Android/ConstraintLayout/barrier1.png" alt="barrier"><br>图中蓝色的线就是<code>Barrier</code>，<code>Barrier</code>所在问的方位由<code>barrierDirection</code>确定，可以设置为<code>start</code>,<code>end</code>,<code>top</code>,<code>bottom</code>,<code>right</code>,<code>left</code><br>这时候我们改变一个两个按钮的宽度，让button2的宽度小于button1，则效果如下：<br><img src="/image/Android/ConstraintLayout/barrier2.png" alt="barrier"><br>这样我们就可以把其他控件约束于barrier的右侧，使得button1和button2不会覆盖(被覆盖)其他控件</p><h5 id="Group"><a href="#Group" class="headerlink" title="Group"></a>Group</h5><p>Group可以包含多个对其他控件的引用，这样我们操作这个group就相当于操作引用的控件<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">android.support.constraint.Group</span></span></div><div class="line">        <span class="attr">android:visibility</span>=<span class="string">"gone"</span></div><div class="line">        <span class="attr">android:id</span>=<span class="string">"@+id/button_group"</span></div><div class="line">        <span class="attr">app:constraint_referenced_ids</span>=<span class="string">"login,register,modify_password"</span></div><div class="line">        <span class="attr">android:layout_width</span>=<span class="string">"wrap_content"</span></div><div class="line">        <span class="attr">android:layout_height</span>=<span class="string">"wrap_content"</span> /&gt;</div></pre></td></tr></table></figure></p><p>像上面这样，只要操作Group的<code>visibility</code>属性，就相当于同时操作<code>@id/login</code>,<code>@id/register</code>,<code>@id/modify_password</code>这三个控件的<code>visibility</code>属性。</p><h5 id="Placeholders"><a href="#Placeholders" class="headerlink" title="Placeholders"></a>Placeholders</h5><p>顾名思义就是一个用来占位的东西，对于样式相同，功能不同的界面，可以把样式做成style或者使用PlaceHolders来做：<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div></pre></td><td class="code"><pre><div class="line">&lt;?xml version="1.0" encoding="utf-8"?&gt;</div><div class="line"><span class="tag">&lt;<span class="name">merge</span> <span class="attr">xmlns:android</span>=<span class="string">"http://schemas.android.com/apk/res/android"</span></span></div><div class="line">    <span class="attr">xmlns:app</span>=<span class="string">"http://schemas.android.com/apk/res-auto"</span></div><div class="line">    <span class="attr">xmlns:tools</span>=<span class="string">"http://schemas.android.com/tools"</span></div><div class="line">    <span class="attr">android:layout_width</span>=<span class="string">"match_parent"</span></div><div class="line">    <span class="attr">android:layout_height</span>=<span class="string">"match_parent"</span></div><div class="line">    <span class="attr">tools:layout_editor_absoluteX</span>=<span class="string">"0dp"</span></div><div class="line">    <span class="attr">tools:layout_editor_absoluteY</span>=<span class="string">"81dp"</span></div><div class="line">    <span class="attr">tools:parentTag</span>=<span class="string">"android.support.constraint.ConstraintLayout"</span>&gt;</div><div class="line"> </div><div class="line">    <span class="tag">&lt;<span class="name">android.support.constraint.Placeholder</span></span></div><div class="line">        <span class="attr">android:id</span>=<span class="string">"@+id/template_main_image"</span></div><div class="line">        <span class="attr">android:layout_width</span>=<span class="string">"0dp"</span></div><div class="line">        <span class="attr">android:layout_height</span>=<span class="string">"0dp"</span></div><div class="line">        <span class="attr">android:layout_marginTop</span>=<span class="string">"16dp"</span></div><div class="line">        <span class="attr">app:content</span>=<span class="string">"@+id/top_image"</span></div><div class="line">        <span class="attr">app:layout_constraintDimensionRatio</span>=<span class="string">"16:9"</span></div><div class="line">        <span class="attr">app:layout_constraintLeft_toLeftOf</span>=<span class="string">"parent"</span></div><div class="line">        <span class="attr">app:layout_constraintRight_toRightOf</span>=<span class="string">"parent"</span> /&gt;</div><div class="line"> </div><div class="line">    <span class="tag">&lt;<span class="name">android.support.constraint.Placeholder</span></span></div><div class="line">        <span class="attr">android:id</span>=<span class="string">"@+id/template_save"</span></div><div class="line">        <span class="attr">android:layout_width</span>=<span class="string">"48dp"</span></div><div class="line">        <span class="attr">android:layout_height</span>=<span class="string">"48dp"</span></div><div class="line">        <span class="attr">app:content</span>=<span class="string">"@+id/save"</span></div><div class="line">        <span class="attr">app:layout_constraintEnd_toStartOf</span>=<span class="string">"@+id/template_delete"</span></div><div class="line">        <span class="attr">app:layout_constraintHorizontal_bias</span>=<span class="string">"0.5"</span></div><div class="line">        <span class="attr">app:layout_constraintStart_toStartOf</span>=<span class="string">"parent"</span></div><div class="line">        <span class="attr">tools:layout_editor_absoluteY</span>=<span class="string">"460dp"</span> /&gt;</div><div class="line"> </div><div class="line">    <span class="tag">&lt;<span class="name">android.support.constraint.Placeholder</span></span></div><div class="line">        <span class="attr">android:id</span>=<span class="string">"@+id/template_delete"</span></div><div class="line">        <span class="attr">android:layout_width</span>=<span class="string">"48dp"</span></div><div class="line">        <span class="attr">android:layout_height</span>=<span class="string">"48dp"</span></div><div class="line">        <span class="attr">app:content</span>=<span class="string">"@+id/delete"</span></div><div class="line">        <span class="attr">app:layout_constraintEnd_toStartOf</span>=<span class="string">"@+id/template_cancel"</span></div><div class="line">        <span class="attr">app:layout_constraintHorizontal_bias</span>=<span class="string">"0.5"</span></div><div class="line">        <span class="attr">app:layout_constraintStart_toEndOf</span>=<span class="string">"@+id/template_save"</span></div><div class="line">        <span class="attr">tools:layout_editor_absoluteY</span>=<span class="string">"460dp"</span> /&gt;</div><div class="line"> </div><div class="line">    <span class="tag">&lt;<span class="name">android.support.constraint.Placeholder</span></span></div><div class="line">        <span class="attr">android:id</span>=<span class="string">"@+id/template_cancel"</span></div><div class="line">        <span class="attr">android:layout_width</span>=<span class="string">"48dp"</span></div><div class="line">        <span class="attr">android:layout_height</span>=<span class="string">"48dp"</span></div><div class="line">        <span class="attr">app:content</span>=<span class="string">"@+id/cancel"</span></div><div class="line">        <span class="attr">app:layout_constraintEnd_toStartOf</span>=<span class="string">"@+id/template_edit"</span></div><div class="line">        <span class="attr">app:layout_constraintHorizontal_bias</span>=<span class="string">"0.5"</span></div><div class="line">        <span class="attr">app:layout_constraintStart_toEndOf</span>=<span class="string">"@+id/template_delete"</span></div><div class="line">        <span class="attr">tools:layout_editor_absoluteY</span>=<span class="string">"460dp"</span> /&gt;</div><div class="line"> </div><div class="line">    <span class="tag">&lt;<span class="name">android.support.constraint.Placeholder</span></span></div><div class="line">        <span class="attr">android:id</span>=<span class="string">"@+id/template_edit"</span></div><div class="line">        <span class="attr">android:layout_width</span>=<span class="string">"48dp"</span></div><div class="line">        <span class="attr">android:layout_height</span>=<span class="string">"48dp"</span></div><div class="line">        <span class="attr">app:content</span>=<span class="string">"@+id/edit"</span></div><div class="line">        <span class="attr">app:layout_constraintEnd_toEndOf</span>=<span class="string">"parent"</span></div><div class="line">        <span class="attr">app:layout_constraintHorizontal_bias</span>=<span class="string">"0.5"</span></div><div class="line">        <span class="attr">app:layout_constraintStart_toEndOf</span>=<span class="string">"@+id/template_cancel"</span></div><div class="line">        <span class="attr">tools:layout_editor_absoluteY</span>=<span class="string">"460dp"</span> /&gt;</div><div class="line"> </div><div class="line"><span class="tag">&lt;/<span class="name">merge</span>&gt;</span></div></pre></td></tr></table></figure></p><p>如果想要在预览界面看起来像是在ConstraintLayout里面的话就加上<code>tools:parentTag=&quot;android.support.constraint.ConstraintLayout&quot;</code><br>预览如下：<br><img src="/image/Android/ConstraintLayout/constraint_layout_placeholder_preview.png" alt="constraintLayout placeholder preview"><br>在上面的布局文件中，每一个Placeholder都添加了<code>app:content</code>属性，表示要用这个属性指定的id对应的控件来替换<code>Placeholder</code>，<br>在其他布局文件中：<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">android.support.constraint.ConstraintLayout</span></span></div><div class="line">    <span class="attr">android:layout_width</span>=<span class="string">"match_parent"</span></div><div class="line">    <span class="attr">android:layout_height</span>=<span class="string">"match_parent"</span>&gt;</div><div class="line">    <span class="tag">&lt;<span class="name">include</span> <span class="attr">android:id</span>=<span class="string">"@+id/root"</span> <span class="attr">layout</span>=<span class="string">"@layout/constraint_layout_placeholder"</span>/&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">ImageButton</span></span></div><div class="line">        <span class="attr">android:id</span>=<span class="string">"@+id/main_title_image"</span></div><div class="line">        <span class="attr">android:src</span>=<span class="string">"@drawable/main_title_image"</span></div><div class="line">        <span class="attr">android:layout_width</span>=<span class="string">"wrap_content"</span></div><div class="line">        <span class="attr">android:layout_height</span>=<span class="string">"wrap_content"</span> /&gt;</div><div class="line"></div><div class="line"></div><div class="line">    <span class="tag">&lt;<span class="name">ImageButton</span></span></div><div class="line">        <span class="attr">android:id</span>=<span class="string">"@+id/save"</span></div><div class="line">        <span class="attr">android:layout_width</span>=<span class="string">"wrap_content"</span></div><div class="line">        <span class="attr">android:layout_height</span>=<span class="string">"wrap_content"</span></div><div class="line">        <span class="attr">android:layout_marginBottom</span>=<span class="string">"16dp"</span></div><div class="line">        <span class="attr">app:layout_constraintBottom_toBottomOf</span>=<span class="string">"parent"</span></div><div class="line">        <span class="attr">app:srcCompat</span>=<span class="string">"@drawable/ic_save_black_24dp"</span> /&gt;</div><div class="line"></div><div class="line">    <span class="tag">&lt;<span class="name">ImageButton</span></span></div><div class="line">        <span class="attr">android:id</span>=<span class="string">"@+id/edit"</span></div><div class="line">        <span class="attr">android:layout_width</span>=<span class="string">"wrap_content"</span></div><div class="line">        <span class="attr">android:layout_height</span>=<span class="string">"wrap_content"</span></div><div class="line">        <span class="attr">app:srcCompat</span>=<span class="string">"@drawable/ic_edit_black_24dp"</span> /&gt;</div><div class="line"></div><div class="line">    <span class="tag">&lt;<span class="name">ImageButton</span></span></div><div class="line">        <span class="attr">android:id</span>=<span class="string">"@+id/cancel"</span></div><div class="line">        <span class="attr">android:layout_width</span>=<span class="string">"wrap_content"</span></div><div class="line">        <span class="attr">android:layout_height</span>=<span class="string">"wrap_content"</span></div><div class="line">        <span class="attr">android:layout_marginBottom</span>=<span class="string">"16dp"</span></div><div class="line"></div><div class="line">        <span class="attr">app:srcCompat</span>=<span class="string">"@drawable/ic_cancel_black_24dp"</span> /&gt;</div><div class="line"></div><div class="line">    <span class="tag">&lt;<span class="name">ImageButton</span></span></div><div class="line">        <span class="attr">android:id</span>=<span class="string">"@+id/delete"</span></div><div class="line">        <span class="attr">android:layout_width</span>=<span class="string">"wrap_content"</span></div><div class="line">        <span class="attr">android:layout_height</span>=<span class="string">"wrap_content"</span></div><div class="line">        <span class="attr">android:layout_marginBottom</span>=<span class="string">"16dp"</span></div><div class="line"></div><div class="line">        <span class="attr">app:srcCompat</span>=<span class="string">"@drawable/ic_delete_black_24dp"</span> /&gt;</div><div class="line"><span class="tag">&lt;/<span class="name">android.support.constraint.ConstraintLayout</span>&gt;</span></div></pre></td></tr></table></figure></p><p>首先使用<code>include</code>标签将模板包含进来，然后创建其他需要替换的控件：<br><img src="/image/Android/ConstraintLayout/merge_constraint_layout_placeholder_preview.png" alt="merge constraintLayout placeholder preview"><br>当然也可以在代码中调用<code>Placeholder.setContent(id)</code>动态替换，配合<code>CoordinatorLayout</code>可以做出比较好玩的动画效果：<br><img src="/image/Android/ConstraintLayout/constraintLayout_placeholderand_CoordinatorLayout.gif" alt="constraintLayout placeholder + CoordinatorLayout"><br>代码在这里<br><a href="https://github.com/Thumar/Placeholder" target="_blank" rel="external">https://github.com/Thumar/Placeholder</a></p><p><code>ConstraintLayout</code> 1.1版本之后的东西常用的差不多就这些了</p><hr><p>以上</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;a href=&quot;https://developer.android.google.cn/reference/android/support/constraint/ConstraintLayout&quot;&gt;https://developer.android.google.cn/reference/android/support/constraint/ConstraintLayout&lt;/a&gt;&lt;br&gt;A ConstraintLayout is a ViewGroup which allows you to position and size widgets in a flexible way.&lt;/p&gt;
    
    </summary>
    
    
      <category term="Android" scheme="http://blog.huangyuanlove.com/tags/Android/"/>
    
  </entry>
  
  <entry>
    <title>Android hook--示例</title>
    <link href="http://blog.huangyuanlove.com/2018/08/06/Android-hook-%E7%A4%BA%E4%BE%8B/"/>
    <id>http://blog.huangyuanlove.com/2018/08/06/Android-hook-示例/</id>
    <published>2018-08-06T07:46:06.000Z</published>
    <updated>2018-08-06T15:26:37.283Z</updated>
    
    <content type="html"><![CDATA[<p>Hook过程：</p><ol><li>寻找 Hook 点，原则是静态变量或者单例对象，尽量 Hook public 的对象和方法。<br>Hook的选择点：静态变量和单例，因为一旦创建对象，它们不容易变化，非常容易定位。</li><li>选择合适的代理方式，如果是接口可以用动态代理。</li><li>偷梁换柱——用代理对象替换原始对象。<br>注意Android 的 API 版本比较多，方法和类可能不一样，所以要做好 API 的兼容工作。还有不要hook太底层的东西，各个厂商的rom代码不一样<a id="more"></a></li></ol><h4 id="hookView的点击事件"><a href="#hookView的点击事件" class="headerlink" title="hookView的点击事件"></a>hookView的点击事件</h4><p>先来个简单点的，View的点击事件。</p><h5 id="hookOnLongClick"><a href="#hookOnLongClick" class="headerlink" title="hookOnLongClick"></a>hookOnLongClick</h5><p>顺着View的<code>setOnClickListener</code>方法找到了<code>getListenerInfo</code>方法，进而找到了<code>ListenerInfo</code>类，而view的click，longClick，ScrollChange的监听事件都存放在这里面。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">hookOnLongCLickListener</span><span class="params">(View view)</span> </span>&#123;</div><div class="line">    <span class="keyword">try</span> &#123;</div><div class="line">        <span class="comment">//拿到mListenerInfo ，可以通过getListenerInfo方法</span></div><div class="line">        Class&lt;?&gt; clazzView = Class.forName(<span class="string">"android.view.View"</span>);</div><div class="line">        Method getListenerInfoMethod = clazzView.getDeclaredMethod(<span class="string">"getListenerInfo"</span>);</div><div class="line">        getListenerInfoMethod.setAccessible(<span class="keyword">true</span>);</div><div class="line">        Object listenerInfo = getListenerInfoMethod.invoke(view);</div><div class="line"></div><div class="line">        <span class="comment">//拿到 mOnLongClickListener字段，这里的ListenerInfo是View的内部类，需要用$符号链接。</span></div><div class="line">        Class&lt;?&gt; clazz = Class.forName(<span class="string">"android.view.View$ListenerInfo"</span>);</div><div class="line">        Field field = clazz.getDeclaredField(<span class="string">"mOnLongClickListener"</span>);</div><div class="line">        field.setAccessible(<span class="keyword">true</span>);</div><div class="line">        <span class="comment">//拿到原来的mOnLongClickListener字段的值</span></div><div class="line">        View.OnLongClickListener raw =(View.OnLongClickListener) field.get(listenerInfo);</div><div class="line">        <span class="comment">//替换成我们自己的</span></div><div class="line">        field.set(listenerInfo, <span class="keyword">new</span> HookOnLongClickListener(raw));</div><div class="line"></div><div class="line">    &#125; <span class="keyword">catch</span> (Exception e) &#123;</div><div class="line">        e.printStackTrace();</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">HookOnLongClickListener</span> <span class="keyword">implements</span> <span class="title">View</span>.<span class="title">OnLongClickListener</span></span>&#123;</div><div class="line">    <span class="keyword">private</span> View.OnLongClickListener raw;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">HookOnLongClickListener</span><span class="params">(View.OnLongClickListener raw)</span></span>&#123;</div><div class="line">        <span class="keyword">this</span>.raw = raw;</div><div class="line">    &#125;</div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">onLongClick</span><span class="params">(View v)</span> </span>&#123;</div><div class="line">        Log.e(<span class="string">"HookUtil"</span>,<span class="string">"HookOnLongClickListener"</span>);</div><div class="line">        Toast.makeText(MainActivity.<span class="keyword">this</span>,<span class="string">"替换之后"</span>,Toast.LENGTH_SHORT).show();</div><div class="line">        <span class="keyword">if</span>(raw!=<span class="keyword">null</span>)&#123;</div><div class="line">            <span class="comment">//调用原来的onLongClick，保持原有逻辑不变</span></div><div class="line">            raw.onLongClick(v);</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><p>这样调用<code>hookOnLongCLickListerner(view)</code>方法即可在原有逻辑不变的情况下添加我们自己的逻辑。</p><h5 id="hookOnLongClick-1"><a href="#hookOnLongClick-1" class="headerlink" title="hookOnLongClick"></a>hookOnLongClick</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">hookOnClickListener</span><span class="params">(View view)</span> </span>&#123;</div><div class="line">    <span class="keyword">try</span> &#123;</div><div class="line">        <span class="comment">//拿到mListenerInfo ，可以通过getListenerInfo方法</span></div><div class="line">        Method getListenerInfoMethod = view.getClass().getDeclaredMethod(<span class="string">"getListenerInfo"</span>);</div><div class="line">        getListenerInfoMethod.setAccessible(<span class="keyword">true</span>);</div><div class="line">        Object listenerInfo = getListenerInfoMethod.invoke(view);</div><div class="line"></div><div class="line">        <span class="comment">// 得到 原始的 OnClickListener 对象</span></div><div class="line">        Class&lt;?&gt; listenerInfoClz = Class.forName(<span class="string">"android.view.View$ListenerInfo"</span>);</div><div class="line">        Field mOnClickListener = listenerInfoClz.getDeclaredField(<span class="string">"mOnClickListener"</span>);</div><div class="line">        mOnClickListener.setAccessible(<span class="keyword">true</span>);</div><div class="line">        View.OnClickListener originOnClickListener = (View.OnClickListener) mOnClickListener.get(listenerInfo);</div><div class="line"></div><div class="line">        <span class="comment">// 用自定义的 OnClickListener 替换原始的 OnClickListener</span></div><div class="line">        View.OnClickListener hookedOnClickListener = <span class="keyword">new</span> HookedOnClickListener(originOnClickListener);</div><div class="line">        mOnClickListener.set(listenerInfo, hookedOnClickListener);</div><div class="line"></div><div class="line">    &#125; <span class="keyword">catch</span> (Exception e) &#123;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">HookedOnClickListener</span> <span class="keyword">implements</span> <span class="title">View</span>.<span class="title">OnClickListener</span> </span>&#123;</div><div class="line">    <span class="keyword">private</span> View.OnClickListener origin;</div><div class="line"></div><div class="line">    HookedOnClickListener(View.OnClickListener origin) &#123;</div><div class="line">        <span class="keyword">this</span>.origin = origin;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onClick</span><span class="params">(View v)</span> </span>&#123;</div><div class="line">        Toast.makeText(MainActivity.<span class="keyword">this</span>, <span class="string">"hook click"</span>, Toast.LENGTH_SHORT).show();</div><div class="line">        Log.i(<span class="string">"hook"</span>, <span class="string">"Before click, do what you want to to."</span>);</div><div class="line">        <span class="keyword">if</span> (origin != <span class="keyword">null</span>) &#123;</div><div class="line">            origin.onClick(v);</div><div class="line">        &#125;</div><div class="line">        Log.i(<span class="string">"hook"</span>, <span class="string">"After click, do what you want to to."</span>);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>这样调用<code>hookOnLongClickListerner(view)</code>方法即可在原有逻辑不变的情况下添加我们自己的逻辑。</p><h4 id="hookAlarmManager"><a href="#hookAlarmManager" class="headerlink" title="hookAlarmManager"></a>hookAlarmManager</h4><p>在设置Alarm的过程中，会调用AlarmManager.set方法，而AlarmManager对象又很方便得到：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div></pre></td><td class="code"><pre><div class="line">AlarmManager alarm = (AlarmManager) getSystemService(ALARM_SERVICE);</div><div class="line">Class&lt;?&gt; alarmManagerClass = alarm.getClass();</div><div class="line">Field mService = alarmManagerClass.getDeclaredField(<span class="string">"mService"</span>);</div><div class="line">mService.setAccessible(<span class="keyword">true</span>);</div><div class="line">Object mSerViceInstant = mService.get(alarm);</div><div class="line"></div><div class="line">AlarmManagerInvocationHandler handler = <span class="keyword">new</span> AlarmManagerInvocationHandler(mSerViceInstant);</div><div class="line">Class&lt;?&gt; IActivityManagerIntercept = Class.forName(<span class="string">"android.app.IAlarmManager"</span>);</div><div class="line">Object proxy = Proxy.newProxyInstance(Thread.currentThread().getContextClassLoader(),</div><div class="line">        <span class="keyword">new</span> Class&lt;?&gt;[]&#123;IActivityManagerIntercept&#125;, handler);</div><div class="line">mService.set(alarm, proxy);</div><div class="line"></div><div class="line"><span class="comment">//动态代理</span></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">AlarmManagerInvocationHandler</span> <span class="keyword">implements</span> <span class="title">InvocationHandler</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="keyword">private</span> Object iAlarmManagerObject;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">private</span> <span class="title">AlarmManagerInvocationHandler</span><span class="params">(Object iAlarmManagerObject)</span> </span>&#123;</div><div class="line">        <span class="keyword">this</span>.iAlarmManagerObject = iAlarmManagerObject;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">invoke</span><span class="params">(Object proxy, Method method, Object[] args)</span> <span class="keyword">throws</span> Throwable </span>&#123;</div><div class="line"></div><div class="line"></div><div class="line">        Log.i(<span class="string">"alarm_manager"</span>, method.getName());</div><div class="line">        </div><div class="line">        <span class="keyword">if</span> (<span class="string">"set"</span>.equals(method.getName())) &#123;</div><div class="line">            Log.e(<span class="string">"alarm_manager"</span>, <span class="string">"调用了mService.set()"</span>);</div><div class="line"></div><div class="line">            <span class="keyword">try</span> &#123;</div><div class="line">                <span class="keyword">long</span> interval = <span class="number">0</span>;</div><div class="line">                <span class="keyword">int</span> alarmManagerTimeType = Integer.valueOf(args[<span class="number">1</span>].toString());</div><div class="line">                <span class="keyword">long</span> alarmManagerAtTime = Long.valueOf(args[<span class="number">2</span>].toString());</div><div class="line">                Log.e(<span class="string">"alarm_manager_interval"</span>, <span class="string">"alarmManagerTimeType:"</span> +alarmManagerTimeType);</div><div class="line">                Log.e(<span class="string">"alarm_manager_interval"</span>, <span class="string">"alarmManagerAtTime:"</span> +alarmManagerAtTime);</div><div class="line">                <span class="keyword">switch</span> (alarmManagerTimeType) &#123;</div><div class="line">                    <span class="keyword">case</span> AlarmManager.RTC_WAKEUP:</div><div class="line">                    <span class="keyword">case</span> AlarmManager.RTC:</div><div class="line">                        Log.e(<span class="string">"alarm_manager_interval"</span>, <span class="string">"currentTimeMillis--RTC:"</span> +System.currentTimeMillis());</div><div class="line">                         interval = alarmManagerAtTime - System.currentTimeMillis();</div><div class="line"></div><div class="line">                        <span class="keyword">break</span>;</div><div class="line">                    <span class="keyword">case</span> AlarmManager.ELAPSED_REALTIME:</div><div class="line">                    <span class="keyword">case</span> AlarmManager.ELAPSED_REALTIME_WAKEUP:</div><div class="line">                        Log.e(<span class="string">"alarm_manager_interval"</span>, <span class="string">"currentTimeMillis--ELAPSED_REALTIME:"</span> +SystemClock.elapsedRealtime());</div><div class="line">                        interval = alarmManagerAtTime - SystemClock.elapsedRealtime();</div><div class="line">                        <span class="keyword">break</span>;</div><div class="line">                &#125;</div><div class="line">                Log.e(<span class="string">"alarm_manager_interval"</span>,interval+<span class="string">"--&gt;"</span> + interval/<span class="number">1000</span>/<span class="number">60</span> );</div><div class="line"></div><div class="line"></div><div class="line">            &#125; <span class="keyword">catch</span> (Exception e) &#123;</div><div class="line">                e.printStackTrace();</div><div class="line">            &#125;</div><div class="line"></div><div class="line"></div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> method.invoke(iAlarmManagerObject, args);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><h4 id="hookAMS"><a href="#hookAMS" class="headerlink" title="hookAMS"></a>hookAMS</h4><p>对于Activity的启动过程，我们可以hook它的startActivity方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div></pre></td><td class="code"><pre><div class="line"> <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">hookASM</span><span class="params">()</span></span>&#123;</div><div class="line">     <span class="keyword">try</span> &#123;</div><div class="line">         Class&lt;?&gt; activityManagerNativeClass = Class.forName(<span class="string">"android.app.ActivityManagerNative"</span>);</div><div class="line">         Field field = activityManagerNativeClass.getDeclaredField(<span class="string">"gDefault"</span>);</div><div class="line">         field.setAccessible(<span class="keyword">true</span>);</div><div class="line">         Object gDefault= field.get(<span class="keyword">null</span>);</div><div class="line"></div><div class="line">         Class&lt;?&gt; singletonClass = Class.forName(<span class="string">"android.util.Singleton"</span>);</div><div class="line">         Field mInstance = singletonClass.getDeclaredField(<span class="string">"mInstance"</span>);</div><div class="line">         mInstance.setAccessible(<span class="keyword">true</span>);</div><div class="line">         Object iActivityManagerObject = mInstance.get(gDefault);</div><div class="line"></div><div class="line"></div><div class="line">         <span class="comment">//开始动态代理，用代理对象替换掉真实的ActivityManager，</span></div><div class="line">         AmsInvocationHandler amsInvocationHandler = <span class="keyword">new</span> AmsInvocationHandler(iActivityManagerObject);</div><div class="line">         Object proxy = Proxy.newProxyInstance(Thread.currentThread().getContextClassLoader(), iActivityManagerObject.getClass().getInterfaces(), amsInvocationHandler);</div><div class="line"></div><div class="line">         <span class="comment">//现在替换掉这个对象</span></div><div class="line">         mInstance.set(gDefault, proxy);</div><div class="line"></div><div class="line">     &#125;<span class="keyword">catch</span> (Exception e)&#123;</div><div class="line">         e.printStackTrace();</div><div class="line">     &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"> <span class="keyword">private</span> <span class="class"><span class="keyword">class</span> <span class="title">AmsInvocationHandler</span> <span class="keyword">implements</span> <span class="title">InvocationHandler</span> </span>&#123;</div><div class="line"></div><div class="line">     <span class="keyword">private</span> Object iActivityManagerObject;</div><div class="line">     <span class="function"><span class="keyword">private</span> <span class="title">AmsInvocationHandler</span><span class="params">(Object iActivityManagerObject)</span> </span>&#123;</div><div class="line">         <span class="keyword">this</span>.iActivityManagerObject = iActivityManagerObject;</div><div class="line">     &#125;</div><div class="line"></div><div class="line">     <span class="meta">@Override</span></div><div class="line">     <span class="function"><span class="keyword">public</span> Object <span class="title">invoke</span><span class="params">(Object proxy, Method method, Object[] args)</span> <span class="keyword">throws</span> Throwable </span>&#123;</div><div class="line"></div><div class="line">         Log.i(<span class="string">"hookASM"</span>, method.getName());</div><div class="line">         <span class="comment">//我要在这里搞点事情</span></div><div class="line">         <span class="keyword">if</span> (<span class="string">"startActivity"</span>.contains(method.getName())) &#123;</div><div class="line">             Log.e(<span class="string">"hookASM"</span>,<span class="string">"Activity已经开始启动"</span>);</div><div class="line">         &#125;</div><div class="line">         <span class="keyword">return</span> method.invoke(iActivityManagerObject, args);</div><div class="line">     &#125;</div><div class="line"> &#125;</div></pre></td></tr></table></figure><h2 id="既然我们能够接管startActivity方法，我们就可以伪造一个Intent去启动一个没有在清单文件中注册的Activity。"><a href="#既然我们能够接管startActivity方法，我们就可以伪造一个Intent去启动一个没有在清单文件中注册的Activity。" class="headerlink" title="既然我们能够接管startActivity方法，我们就可以伪造一个Intent去启动一个没有在清单文件中注册的Activity。"></a>既然我们能够接管startActivity方法，我们就可以伪造一个Intent去启动一个没有在清单文件中注册的Activity。</h2><p>以上</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Hook过程：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;寻找 Hook 点，原则是静态变量或者单例对象，尽量 Hook public 的对象和方法。&lt;br&gt;Hook的选择点：静态变量和单例，因为一旦创建对象，它们不容易变化，非常容易定位。&lt;/li&gt;
&lt;li&gt;选择合适的代理方式，如果是接口可以用动态代理。&lt;/li&gt;
&lt;li&gt;偷梁换柱——用代理对象替换原始对象。&lt;br&gt;注意Android 的 API 版本比较多，方法和类可能不一样，所以要做好 API 的兼容工作。还有不要hook太底层的东西，各个厂商的rom代码不一样
    
    </summary>
    
    
      <category term="Android" scheme="http://blog.huangyuanlove.com/tags/Android/"/>
    
  </entry>
  
  <entry>
    <title>Android hook--反射基础</title>
    <link href="http://blog.huangyuanlove.com/2018/08/06/Android-hook--%E5%8F%8D%E5%B0%84%E5%9F%BA%E7%A1%80/"/>
    <id>http://blog.huangyuanlove.com/2018/08/06/Android-hook--反射基础/</id>
    <published>2018-08-06T07:18:09.000Z</published>
    <updated>2018-08-06T13:15:46.774Z</updated>
    
    <content type="html"><![CDATA[<p>假如你已经非常熟悉java中反射(reflect)和代理(Proxy)，那你还在这里看我这篇文章纯粹就是浪费时间了。<br><a id="more"></a></p><h4 id="反射是什么"><a href="#反射是什么" class="headerlink" title="反射是什么"></a>反射是什么</h4><p>官方介绍</p><blockquote><p>Reflection is commonly used by programs which require the ability to examine or modify the runtime behavior of applications running in the Java virtual machine. This is a relatively advanced feature and should be used only by developers who have a strong grasp of the fundamentals of the language. With that caveat in mind, reflection is a powerful technique and can enable applications to perform operations which would otherwise be impossible.</p></blockquote><p>概括来讲就是：<strong> 反射这个功能很XX </strong><br>大家常见的对反射机制的概念:<br>在Java中的反射机制是指在运行状态中，对于任意一个类都能够知道这个类所有的属性和方法；并且对于任意一个对象，都能够调用它的任意一个方法；这种动态获取信息以及动态调用对象方法的功能成为Java语言的反射机制。</p><h4 id="涉及到的类"><a href="#涉及到的类" class="headerlink" title="涉及到的类"></a>涉及到的类</h4><ul><li><code>Class</code>：反射的核心类，可以获取类的属性，方法等信息。 </li><li><code>Field</code>：Java.lang.reflec包中的类，表示类的成员变量，可以用来获取和设置类之中的属性值。 </li><li><code>Method</code>： Java.lang.reflec包中的类，表示类的方法，它可以用来获取类中的方法信息或者执行方法。 </li><li><code>Constructor</code>： Java.lang.reflec包中的类，表示类的构造方法。</li></ul><h4 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h4><p>先写一个简单的Person类当做目标类<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span> </span>&#123;</div><div class="line"><span class="keyword">public</span> String name;</div><div class="line"><span class="keyword">private</span> String nickName;</div><div class="line"><span class="keyword">int</span> age;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="title">Person</span><span class="params">()</span></span>&#123;&#125;</div><div class="line"><span class="function"><span class="keyword">protected</span>  <span class="title">Person</span><span class="params">(<span class="keyword">int</span> age)</span> </span>&#123;</div><div class="line"><span class="keyword">this</span>. age = age;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">private</span> <span class="title">Person</span><span class="params">(String name)</span> </span>&#123;</div><div class="line"><span class="keyword">this</span>.name = name;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="title">Person</span><span class="params">(String name,String nickName)</span> </span>&#123;</div><div class="line"><span class="keyword">this</span>.name = name;</div><div class="line"><span class="keyword">this</span>.nickName = nickName;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="title">Person</span><span class="params">(String name, String nickName, <span class="keyword">int</span> age)</span> </span>&#123;</div><div class="line"><span class="keyword">super</span>();</div><div class="line"><span class="keyword">this</span>.name = name;</div><div class="line"><span class="keyword">this</span>.nickName = nickName;</div><div class="line"><span class="keyword">this</span>.age = age;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="meta">@Override</span></div><div class="line"><span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</div><div class="line"><span class="keyword">return</span> <span class="string">"Person [name="</span> + name + <span class="string">", nickName="</span> + nickName + <span class="string">", age="</span> + age + <span class="string">"]"</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure></p><h5 id="获取想要操作的类的Class对象"><a href="#获取想要操作的类的Class对象" class="headerlink" title="获取想要操作的类的Class对象"></a>获取想要操作的类的Class对象</h5><ol><li><p>Object.getClass();</p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">  Person person = <span class="keyword">new</span> Person();</div><div class="line">Class personClass = person.getClass();</div></pre></td></tr></table></figure></li><li><p>任何数据类型（包括基本数据类型）都有一个“静态”的class属性</p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">Class personClass2 = Person.class;</div></pre></td></tr></table></figure></li><li><p>通过Class类的静态方法：forName（String  className）(常用)   </p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">Class personClass3 = Class.forName(<span class="string">"com.huangyuanlove.Person"</span>);</div></pre></td></tr></table></figure><p>需要注意的是，在运行期间，一个只有一个Class对象：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">System.out.println(personClass);</div><div class="line">System.out.println(personClass == personClass2);</div><div class="line">System.out.println(personClass == personClass3);</div></pre></td></tr></table></figure><p>输出：</p><blockquote><p>class com.huangyuanlove.Person<br> true<br> true</p></blockquote></li></ol><h5 id="调用Class类中的方法"><a href="#调用Class类中的方法" class="headerlink" title="调用Class类中的方法"></a>调用Class类中的方法</h5><h6 id="获取构造方法并创造对象："><a href="#获取构造方法并创造对象：" class="headerlink" title="获取构造方法并创造对象："></a>获取构造方法并创造对象：</h6>   <figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div></pre></td><td class="code"><pre><div class="line"> Person person = <span class="keyword">new</span> Person();</div><div class="line">Class personClass = person.getClass();</div><div class="line"></div><div class="line"><span class="comment">// 获取所有的公有构造方法</span></div><div class="line">Constructor[] publicConstructors = personClass.getConstructors();</div><div class="line">System.out.println(<span class="string">"获取所有的公有构造方法"</span>);</div><div class="line"><span class="keyword">for</span> (Constructor c : publicConstructors) &#123;</div><div class="line">System.out.println(c);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">// 获取所有的构造方法</span></div><div class="line">Constructor[] allConstructors = personClass.getDeclaredConstructors();</div><div class="line">System.out.println(<span class="string">"获取所有的构造方法"</span>);</div><div class="line"><span class="keyword">for</span> (Constructor c : allConstructors) &#123;</div><div class="line">System.out.println(c);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">// 获取公有，无参构造方法</span></div><div class="line">Constructor publicConstructorWithoutArgs = personClass.getConstructor();</div><div class="line">System.out.println(<span class="string">"获取公有，无参构造方法"</span>);</div><div class="line">System.out.println(publicConstructorWithoutArgs);</div><div class="line">System.out.println(publicConstructorWithoutArgs.newInstance());</div><div class="line"></div><div class="line"><span class="comment">// 获取私有，有一个String类型参数的构造方法</span></div><div class="line">Constructor publicConstructorWithOneStringArgs = personClass.getDeclaredConstructor(String.class);</div><div class="line">System.out.println(<span class="string">"获取私有，有一个String类型参数的构造方法"</span>);</div><div class="line">System.out.println(publicConstructorWithOneStringArgs);</div><div class="line">personClass.getDeclaredField(<span class="string">"nickName"</span>).setAccessible(<span class="keyword">true</span>);</div><div class="line">System.out.println(publicConstructorWithOneStringArgs.newInstance(<span class="string">"xuan"</span>));</div><div class="line"></div><div class="line"><span class="comment">// 获取公有，有两个个String类型参数的构造方法</span></div><div class="line">Constructor publicConstructorWithTwoStringArgs = personClass.getConstructor(String.class, String.class);</div><div class="line">System.out.println(<span class="string">"获取公有，有两个个String类型参数的构造方法"</span>);</div><div class="line">System.out.println(publicConstructorWithTwoStringArgs);</div><div class="line">publicConstructorWithTwoStringArgs.setAccessible(<span class="keyword">true</span>);</div><div class="line">System.out.println(publicConstructorWithTwoStringArgs.newInstance(<span class="string">"xuan"</span>, <span class="string">"huangyuan"</span>));</div></pre></td></tr></table></figure><p>  这里需要注意的是，在获取私有，有一个String类型参数的构造方法，并调用<code>newInstance</code>方法的时候会抛出异常，这是因为该构造方法中的<code>nickName</code>字段是私有的,将其注释掉可获得如下输出<br>  输出：</p><blockquote><p>获取所有的公有构造方法<br>    public com.huangyuanlove.Person(java.lang.String,java.lang.String,int)<br>    public com.huangyuanlove.Person(java.lang.String,java.lang.String)<br>    public com.huangyuanlove.Person()<br>    获取所有的构造方法<br>    public com.huangyuanlove.Person(java.lang.String,java.lang.String,int)<br>    public com.huangyuanlove.Person(java.lang.String,java.lang.String)<br>    private com.huangyuanlove.Person(java.lang.String)<br>    protected com.huangyuanlove.Person(int)<br>    public com.huangyuanlove.Person()<br>    获取公有，无参构造方法<br>    public com.huangyuanlove.Person()<br>    Person [name=null, nickName=null, age=0]<br>    获取私有，有一个String类型参数的构造方法<br>    private com.huangyuanlove.Person(java.lang.String)<br>    获取公有，有两个个String类型参数的构造方法<br>    public com.huangyuanlove.Person(java.lang.String,java.lang.String)<br>    Person [name=xuan, nickName=huangyuan, age=0]</p></blockquote><h6 id="获取成员变量并进行操作"><a href="#获取成员变量并进行操作" class="headerlink" title="获取成员变量并进行操作"></a>获取成员变量并进行操作</h6>  <figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div></pre></td><td class="code"><pre><div class="line">  Person person = <span class="keyword">new</span> Person();</div><div class="line">Class personClass = person.getClass();</div><div class="line"></div><div class="line"><span class="comment">// 获取所有的公共成员变量</span></div><div class="line">Field publicFields[] = personClass.getFields();</div><div class="line">System.out.println(<span class="string">"获取所有的公共成员变量"</span>);</div><div class="line"><span class="keyword">for</span> (Field f : publicFields) &#123;</div><div class="line">System.out.println(f);</div><div class="line">&#125;</div><div class="line"><span class="comment">// 获取所有的成员变量</span></div><div class="line">Field allFields[] = personClass.getDeclaredFields();</div><div class="line">System.out.println(<span class="string">"获取所有的成员变量"</span>);</div><div class="line"><span class="keyword">for</span> (Field f : allFields) &#123;</div><div class="line">System.out.println(f);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">// 获取某个公有成员变量并赋值</span></div><div class="line">Field nameField = personClass.getField(<span class="string">"name"</span>);</div><div class="line">nameField.set(person, <span class="string">"huangyuan"</span>);</div><div class="line">System.out.println(person);</div><div class="line"></div><div class="line"><span class="comment">// 获取某个私有成员变量并赋值</span></div><div class="line">Field nickNameField = personClass.getDeclaredField(<span class="string">"nickName"</span>);</div><div class="line">  <span class="comment">//因为nickName是私有的，所有需要先设置可访问</span></div><div class="line">nickNameField.setAccessible(<span class="keyword">true</span>);</div><div class="line">nickNameField.set(person, <span class="string">"xuan"</span>);</div><div class="line">System.out.println(person);</div></pre></td></tr></table></figure><p>  可以得到如下输出：</p><blockquote><p>获取所有的公共成员变量<br>    public java.lang.String com.huangyuanlove.Person.name<br>    获取所有的成员变量<br>    public java.lang.String com.huangyuanlove.Person.name<br>    private java.lang.String com.huangyuanlove.Person.nickName<br>    int com.huangyuanlove.Person.age<br>    Person [name=huangyuan, nickName=null, age=0]<br>    Person [name=huangyuan, nickName=xuan, age=0]</p></blockquote><p>  重要的事情来了，一定要记住，谁要是想上面那样反射获取类的公有成员变量然后进行赋值操作，肯定被骂的祸国殃民、民不聊生、生灵涂炭，都public了你还反射。<br>  获取私有变量的时候需要使用<code>getDeclaredField</code>方法，否则会抛出<code>noSuchFieldException</code></p><h6 id="获取方法并进行调用"><a href="#获取方法并进行调用" class="headerlink" title="获取方法并进行调用"></a>获取方法并进行调用</h6><p>   在类中添加两个方法<br>   <figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">sayHi</span><span class="params">()</span> </span>&#123;</div><div class="line">    System.out.println(<span class="string">"hi"</span>);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">saySomeThing</span><span class="params">(String someThing)</span> </span>&#123;</div><div class="line">    System.out.println(someThing);</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><p>  反射获取类方法并进行调用<br>  <figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div></pre></td><td class="code"><pre><div class="line">  Person person = <span class="keyword">new</span> Person();</div><div class="line">Class personClass = person.getClass();</div><div class="line"></div><div class="line"><span class="comment">// 获取所有公共方法</span></div><div class="line">System.out.println(<span class="string">"获取所有公共方法"</span>);</div><div class="line">Method publicMethods[] = personClass.getMethods();</div><div class="line"><span class="keyword">for</span> (Method m : publicMethods) &#123;</div><div class="line">System.out.println(m.getName());</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">// 获取所有方法</span></div><div class="line">System.out.println(<span class="string">"获取所有方法"</span>);</div><div class="line">Method allMethods[] = personClass.getDeclaredMethods();</div><div class="line"><span class="keyword">for</span> (Method m : allMethods) &#123;</div><div class="line">System.out.println(m.getName());</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">// 获取指定的公有方法</span></div><div class="line">System.out.println(<span class="string">"获取指定的公有方法"</span>);</div><div class="line">Method publicMethodWithoutArgs = personClass.getMethod(<span class="string">"sayHi"</span>);</div><div class="line">publicMethodWithoutArgs.invoke(person);</div><div class="line"></div><div class="line"><span class="comment">// 获取指定的私有方法</span></div><div class="line">System.out.println(<span class="string">"获取指定的私有方法"</span>);</div><div class="line">Method privateMethodWithStringArgs = personClass.getDeclaredMethod(<span class="string">"saySomeThing"</span>, String.class);</div><div class="line">privateMethodWithStringArgs.setAccessible(<span class="keyword">true</span>);</div><div class="line">privateMethodWithStringArgs.invoke(person, <span class="string">"someThing"</span>);</div></pre></td></tr></table></figure></p><p>  得到输出：</p><blockquote><p>获取所有公共方法<br>    toString<br>    sayHi<br>    wait<br>    wait<br>    wait<br>    equals<br>    hashCode<br>    getClass<br>    notify<br>    notifyAll<br>    获取所有方法<br>    toString<br>    sayHi<br>    saySomeThing<br>    获取指定的公有方法<br>    hi<br>    获取指定的私有方法<br>    someThing</p></blockquote><p>  获取到的方法中并不包含构造方法，但是包含从父类继承下来的公共方法。和上面的获取成员变量赋值一样，谁要是反射去获取公共方法再去调用，基本上就凉了。</p><h4 id="静态代理和动态代理"><a href="#静态代理和动态代理" class="headerlink" title="静态代理和动态代理"></a>静态代理和动态代理</h4><h5 id="静态代理"><a href="#静态代理" class="headerlink" title="静态代理"></a>静态代理</h5><p>简单来说，代理就是用一个代理类来封装一个委托类，这样做有两个好处：可以隐藏委托类的具体实现；可以在不改变委托类的情况下增加额外的操作。而静态代理，就是在程序运行之前，代理类就已经存在了。静态代理一般的实现方式为：委托类和代理类都实现同一个接口或者是继承自同一个父类，然后在代理类中保存一个委托类的对象引用（父类或者父类接口的对象引用），通过给构造器传入委托类的对象进行初始化，在同名方法中通过调用委托类的方法实现静态代理。除此之外，在代理类同名方法中还可以实现一些额外的功能。代码如下：<br>RealObject类为委托类，SimpleProxy类为代理类：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">interface</span> <span class="title">Interface</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">void</span> <span class="title">doSomething</span><span class="params">()</span></span>;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">void</span> <span class="title">somethingElse</span><span class="params">(String arg)</span></span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">RealObject</span> <span class="keyword">implements</span> <span class="title">Interface</span> </span>&#123;</div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">doSomething</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="comment">// TODO Auto-generated method stub</span></div><div class="line">        System.out.println(<span class="string">"doSomething"</span>);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">somethingElse</span><span class="params">(String arg)</span> </span>&#123;</div><div class="line">        <span class="comment">// TODO Auto-generated method stub</span></div><div class="line">        System.out.println(<span class="string">"somethingElse "</span> + arg);</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">SimpleProxy</span> <span class="keyword">implements</span> <span class="title">Interface</span> </span>&#123;</div><div class="line">    <span class="comment">// 保存委托类（父接口的引用）</span></div><div class="line">    <span class="keyword">private</span> Interface proxied;</div><div class="line"></div><div class="line">    <span class="comment">// 传入委托类的对象用于初始化</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">SimpleProxy</span><span class="params">(Interface proxied)</span> </span>&#123;</div><div class="line">        <span class="keyword">this</span>.proxied = proxied;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">// 两个同名方法中还实现了其他的功能</span></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">doSomething</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="comment">// TODO Auto-generated method stub</span></div><div class="line">        System.out.println(<span class="string">"SimpleProxy doSomething"</span>);</div><div class="line">        proxied.doSomething();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">somethingElse</span><span class="params">(String arg)</span> </span>&#123;</div><div class="line">        <span class="comment">// TODO Auto-generated method stub</span></div><div class="line">        System.out.println(<span class="string">"SimpleProxy somethingElse "</span> + arg);</div><div class="line">        proxied.somethingElse(arg);</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SimpleProxyDemo</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</div><div class="line">        consumer(<span class="keyword">new</span> RealObject());</div><div class="line">        consumer(<span class="keyword">new</span> SimpleProxy(<span class="keyword">new</span> RealObject()));</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">consumer</span><span class="params">(Interface iface)</span> </span>&#123;</div><div class="line">        iface.doSomething();</div><div class="line">        iface.somethingElse(<span class="string">"bonobo"</span>);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><h5 id="动态代理"><a href="#动态代理" class="headerlink" title="动态代理"></a>动态代理</h5><p>静态代理的局限性在于，代理类需要在程序运行之前就编写好，而动态代理则可以在程序运行的过程中动态创建并处理对所代理方法的调用。在动态代理中，需要定义一个中介类，这个类实现InvocationHandle接口（主要是里面的invoke方法）。这个中介类位于委托类和代理类之间，作为一个调用处理器而存在。它保存一个委托类的引用，通过传入委托类对象进行初始化；然后在invoke方法中，实现对委托类方法的调用，并增加需要的额外操作。在需要使用动态代理时，首先通过Proxy类中的newProxyInstance方法得到代理类对象（方法的三个参数分别是：（通常是委托类实现接口的）类加载器，希望代理类实现的接口列表（通常也是委托类实现的接口），以及一个调用处理器的对象），然后通过这个代理类对象直接调用代理类的方法。这种调用实际上会通过调用处理器调用invoke方法，进而实现对委托类相应方法的调用。</p><p>注意在动态代理中，只实现了一个调用处理器，而没有真正实现代理类。代理类对象是通过Proxy类中的newProxyInstance方法得到的。这样，不管你在调用委托类任何方法时需要加入的额外操作都可以仅仅在调用处理器中的invoke方法中实现就可以了。代码示例如下<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SimpleDynamiProxyDemo</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">consumer</span><span class="params">(Interface iface)</span> </span>&#123;</div><div class="line">        iface.doSomething();</div><div class="line">        iface.somethingElse(<span class="string">"bonobo"</span>);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</div><div class="line">        RealObject real = <span class="keyword">new</span> RealObject();</div><div class="line">        consumer(real);</div><div class="line">        <span class="comment">// 通过Proxy.newProxyInstance方法得到代理类对象</span></div><div class="line">        Interface proxy = (Interface) Proxy.newProxyInstance(Interface.class.getClassLoader(),</div><div class="line">                <span class="keyword">new</span> Class[] &#123; Interface.class &#125;, <span class="keyword">new</span> DynamicProxyHandler(real));</div><div class="line">        <span class="comment">// 通过代理类对象直接调用方法，会被重定向到调用处理器上的invoke方法</span></div><div class="line">        consumer(proxy);</div><div class="line"></div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">// 中介类（调用处理器）</span></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">DynamicProxyHandler</span> <span class="keyword">implements</span> <span class="title">InvocationHandler</span> </span>&#123;</div><div class="line">    <span class="comment">// 保存一个委托类的对象</span></div><div class="line">    <span class="keyword">private</span> Object proxied;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">DynamicProxyHandler</span><span class="params">(Object proxied)</span> </span>&#123;</div><div class="line">        <span class="keyword">this</span>.proxied = proxied;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">// 三个参数：代理类的引用，方法名和方法的参数列表</span></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">invoke</span><span class="params">(Object proxy, Method method, Object[] args)</span> <span class="keyword">throws</span> Throwable </span>&#123;</div><div class="line">        <span class="comment">// TODO Auto-generated method stub</span></div><div class="line">        System.out.println(<span class="string">"**** proxy: "</span> + proxy.getClass() + <span class="string">", method: "</span> + method + <span class="string">", args: "</span> + args);</div><div class="line">        <span class="keyword">if</span> (args != <span class="keyword">null</span>) &#123;</div><div class="line">            <span class="keyword">for</span> (Object arg : args) &#123;</div><div class="line">                System.out.println(<span class="string">" "</span> + arg);</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        <span class="comment">// 实现对委托类方法的调用，参数表示委托类对象和参数</span></div><div class="line">        <span class="keyword">return</span> method.invoke(proxied, args);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><hr><p>以上<br>以上静态代理和动态代理相关的文字代码出自于 <a href="https://www.cnblogs.com/hrcnblogs/p/8711418.html" target="_blank" rel="external">https://www.cnblogs.com/hrcnblogs/p/8711418.html</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;假如你已经非常熟悉java中反射(reflect)和代理(Proxy)，那你还在这里看我这篇文章纯粹就是浪费时间了。&lt;br&gt;
    
    </summary>
    
    
      <category term="Android" scheme="http://blog.huangyuanlove.com/tags/Android/"/>
    
      <category term="java" scheme="http://blog.huangyuanlove.com/tags/java/"/>
    
  </entry>
  
  <entry>
    <title>Toast显示过程</title>
    <link href="http://blog.huangyuanlove.com/2018/08/03/Toast%E6%98%BE%E7%A4%BA%E8%BF%87%E7%A8%8B/"/>
    <id>http://blog.huangyuanlove.com/2018/08/03/Toast显示过程/</id>
    <published>2018-08-03T03:35:14.000Z</published>
    <updated>2018-08-04T05:16:23.400Z</updated>
    
    <content type="html"><![CDATA[<p>抄书抄的有点烦，自己也学着分析一下源码，挑了个在我看来比较简单的Toast显示过程来玩一玩。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">Toast.makeText(context, text, duration).show();</div></pre></td></tr></table></figure></p><p>先了解一下makeText过程，该过程最终都会调用下面的方法：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line">     * Make a standard toast to display using the specified looper.</div><div class="line">     * If looper is null, Looper.myLooper() is used.</div><div class="line">     * <span class="doctag">@hide</span></div><div class="line">     */</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Toast <span class="title">makeText</span><span class="params">(@NonNull Context context, @Nullable Looper looper,</span></span></div><div class="line">            @NonNull CharSequence text, @Duration <span class="keyword">int</span> duration) &#123;</div><div class="line">        Toast result = <span class="keyword">new</span> Toast(context, looper);</div><div class="line"></div><div class="line">        LayoutInflater inflate = (LayoutInflater)</div><div class="line">                context.getSystemService(Context.LAYOUT_INFLATER_SERVICE);</div><div class="line">        View v = inflate.inflate(com.android.internal.R.layout.transient_notification, <span class="keyword">null</span>);</div><div class="line">        TextView tv = (TextView)v.findViewById(com.android.internal.R.id.message);</div><div class="line">        tv.setText(text);</div><div class="line"></div><div class="line">        result.mNextView = v;</div><div class="line">        result.mDuration = duration;</div><div class="line"></div><div class="line">        <span class="keyword">return</span> result;</div><div class="line">    &#125;</div></pre></td></tr></table></figure></p><p>创建一个新的Toast对象，在Toast的构造方法中有一个TN类型的mTN对象：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">mTN = <span class="keyword">new</span> TN(context.getPackageName(), looper);</div></pre></td></tr></table></figure></p><p><code>TN</code>是<code>ITransientNotification.Stub</code>的子类，注意一下这个对象，这对后面的过程很重要。<br><a id="more"></a><br>得到Toast对象后接着调用<code>show</code>方法：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line">     * Show the view for the specified duration.</div><div class="line">     */</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">show</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">if</span> (mNextView == <span class="keyword">null</span>) &#123;</div><div class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(<span class="string">"setView must have been called"</span>);</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        INotificationManager service = getService();</div><div class="line">        String pkg = mContext.getOpPackageName();</div><div class="line">        TN tn = mTN;</div><div class="line">        tn.mNextView = mNextView;</div><div class="line"></div><div class="line">        <span class="keyword">try</span> &#123;</div><div class="line">            service.enqueueToast(pkg, tn, mDuration);</div><div class="line">        &#125; <span class="keyword">catch</span> (RemoteException e) &#123;</div><div class="line">            <span class="comment">// Empty</span></div><div class="line">        &#125;</div><div class="line">    &#125;</div></pre></td></tr></table></figure></p><p>重点在<code>service</code>上，它是<code>INotificationManager</code>的实例对象，是个用于Binder机制IPC通信的接口，实际上getService返回了一个以”notification”为标记的远程服务对象的代理。这个远程服务对象就是NotificationManagerService，以下简称NMS。NMS中的enqueueToast方法：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Override</span></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">enqueueToast</span><span class="params">(String pkg, ITransientNotification callback, <span class="keyword">int</span> duration)</span></span></div><div class="line">&#123;</div><div class="line">    ......</div><div class="line">    <span class="keyword">synchronized</span> (mToastQueue) &#123;</div><div class="line">        <span class="keyword">int</span> callingPid = Binder.getCallingPid();</div><div class="line">        <span class="keyword">long</span> callingId = Binder.clearCallingIdentity();</div><div class="line">        <span class="keyword">try</span> &#123;</div><div class="line">            ToastRecord record;</div><div class="line">            <span class="keyword">int</span> index;</div><div class="line">            <span class="comment">// All packages aside from the android package can enqueue one toast at a time</span></div><div class="line">            <span class="keyword">if</span> (!isSystemToast) &#123;</div><div class="line">                index = indexOfToastPackageLocked(pkg);</div><div class="line">            &#125; <span class="keyword">else</span> &#123;</div><div class="line">                index = indexOfToastLocked(pkg, callback);</div><div class="line">            &#125;</div><div class="line"></div><div class="line">            <span class="comment">// If the package already has a toast, we update its toast</span></div><div class="line">            <span class="comment">// in the queue, we don't move it to the end of the queue.</span></div><div class="line">            <span class="keyword">if</span> (index &gt;= <span class="number">0</span>) &#123;</div><div class="line">                record = mToastQueue.get(index);</div><div class="line">                record.update(duration);</div><div class="line">                record.update(callback);</div><div class="line">            &#125; <span class="keyword">else</span> &#123;</div><div class="line">                Binder token = <span class="keyword">new</span> Binder();</div><div class="line">                mWindowManagerInternal.addWindowToken(token, TYPE_TOAST, DEFAULT_DISPLAY);</div><div class="line">                record = <span class="keyword">new</span> ToastRecord(callingPid, pkg, callback, duration, token);</div><div class="line">                mToastQueue.add(record);</div><div class="line">                index = mToastQueue.size() - <span class="number">1</span>;</div><div class="line">            &#125;</div><div class="line">            keepProcessAliveIfNeededLocked(callingPid);</div><div class="line">            <span class="comment">// If it's at index 0, it's the current toast.  It doesn't matter if it's</span></div><div class="line">            <span class="comment">// new or just been updated.  Call back and tell it to show itself.</span></div><div class="line">            <span class="comment">// If the callback fails, this will remove it from the list, so don't</span></div><div class="line">            <span class="comment">// assume that it's valid after this.</span></div><div class="line">            <span class="keyword">if</span> (index == <span class="number">0</span>) &#123;</div><div class="line">                showNextToastLocked();</div><div class="line">            &#125;</div><div class="line">        &#125; <span class="keyword">finally</span> &#123;</div><div class="line">            Binder.restoreCallingIdentity(callingId);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><p>方法中的第二个参数callBack就是上面的TN对象，关键在于下面的index的判断：<br>mToastQueue是个list，如果是非系统tost，并且该taost存在于list中(根据pkg判断)，就取出该ToastRecord并且更新，如果不存在，则新建一个ToastRecord存入list中。<br>如果ToastRecord是在list的第一个位置，接着调用<code>showNextToastLocaked</code>方法<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@GuardedBy</span>(<span class="string">"mToastQueue"</span>)</div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">showNextToastLocked</span><span class="params">()</span> </span>&#123;</div><div class="line">    ToastRecord record = mToastQueue.get(<span class="number">0</span>);</div><div class="line">    <span class="keyword">while</span> (record != <span class="keyword">null</span>) &#123;</div><div class="line">        <span class="keyword">if</span> (DBG) Slog.d(TAG, <span class="string">"Show pkg="</span> + record.pkg + <span class="string">" callback="</span> + record.callback);</div><div class="line">        <span class="keyword">try</span> &#123;</div><div class="line">            record.callback.show(record.token);</div><div class="line">            scheduleTimeoutLocked(record);</div><div class="line">            <span class="keyword">return</span>;</div><div class="line">        &#125; <span class="keyword">catch</span> (RemoteException e) &#123;</div><div class="line">            Slog.w(TAG, <span class="string">"Object died trying to show notification "</span> + record.callback</div><div class="line">                    + <span class="string">" in package "</span> + record.pkg);</div><div class="line">            <span class="comment">// remove it from the list and let the process die</span></div><div class="line">            <span class="keyword">int</span> index = mToastQueue.indexOf(record);</div><div class="line">            <span class="keyword">if</span> (index &gt;= <span class="number">0</span>) &#123;</div><div class="line">                mToastQueue.remove(index);</div><div class="line">            &#125;</div><div class="line">            keepProcessAliveIfNeededLocked(record.pid);</div><div class="line">            <span class="keyword">if</span> (mToastQueue.size() &gt; <span class="number">0</span>) &#123;</div><div class="line">                record = mToastQueue.get(<span class="number">0</span>);</div><div class="line">            &#125; <span class="keyword">else</span> &#123;</div><div class="line">                record = <span class="keyword">null</span>;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><p>关键的两行代码<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">record.callback.show(record.token);</div><div class="line">scheduleTimeoutLocked(record);</div></pre></td></tr></table></figure></p><p>第一行负责显示，第二行负责超时关闭并显示队列中的下一个Toast。<br>在第一行中，callBack就是我们上面提到的TN对象的实例mTN：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line">* schedule handleShow into the right thread</div><div class="line">*/</div><div class="line"><span class="meta">@Override</span></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">show</span><span class="params">(IBinder windowToken)</span> </span>&#123;</div><div class="line">    <span class="keyword">if</span> (localLOGV) Log.v(TAG, <span class="string">"SHOW: "</span> + <span class="keyword">this</span>);</div><div class="line">    mHandler.obtainMessage(SHOW, windowToken).sendToTarget();</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><p>在<code>mHandler</code>中调用了<code>handleShow</code>方法：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">handleShow</span><span class="params">(IBinder windowToken)</span> </span>&#123;</div><div class="line">            <span class="keyword">if</span> (localLOGV) Log.v(TAG, <span class="string">"HANDLE SHOW: "</span> + <span class="keyword">this</span> + <span class="string">" mView="</span> + mView</div><div class="line">                    + <span class="string">" mNextView="</span> + mNextView);</div><div class="line">            <span class="comment">// If a cancel/hide is pending - no need to show - at this point</span></div><div class="line">            <span class="comment">// the window token is already invalid and no need to do any work.</span></div><div class="line">            <span class="keyword">if</span> (mHandler.hasMessages(CANCEL) || mHandler.hasMessages(HIDE)) &#123;</div><div class="line">                <span class="keyword">return</span>;</div><div class="line">            &#125;</div><div class="line">            <span class="keyword">if</span> (mView != mNextView) &#123;</div><div class="line">                <span class="comment">// remove the old view if necessary</span></div><div class="line">                handleHide();</div><div class="line">                mView = mNextView;</div><div class="line">                Context context = mView.getContext().getApplicationContext();</div><div class="line">                String packageName = mView.getContext().getOpPackageName();</div><div class="line">                <span class="keyword">if</span> (context == <span class="keyword">null</span>) &#123;</div><div class="line">                    context = mView.getContext();</div><div class="line">                &#125;</div><div class="line">                mWM = (WindowManager)context.getSystemService(Context.WINDOW_SERVICE);</div><div class="line">                <span class="comment">// We can resolve the Gravity here by using the Locale for getting</span></div><div class="line">                <span class="comment">// the layout direction</span></div><div class="line">                <span class="keyword">final</span> Configuration config = mView.getContext().getResources().getConfiguration();</div><div class="line">                <span class="keyword">final</span> <span class="keyword">int</span> gravity = Gravity.getAbsoluteGravity(mGravity, config.getLayoutDirection());</div><div class="line">                mParams.gravity = gravity;</div><div class="line">                <span class="keyword">if</span> ((gravity &amp; Gravity.HORIZONTAL_GRAVITY_MASK) == Gravity.FILL_HORIZONTAL) &#123;</div><div class="line">                    mParams.horizontalWeight = <span class="number">1.0f</span>;</div><div class="line">                &#125;</div><div class="line">                <span class="keyword">if</span> ((gravity &amp; Gravity.VERTICAL_GRAVITY_MASK) == Gravity.FILL_VERTICAL) &#123;</div><div class="line">                    mParams.verticalWeight = <span class="number">1.0f</span>;</div><div class="line">                &#125;</div><div class="line">                mParams.x = mX;</div><div class="line">                mParams.y = mY;</div><div class="line">                mParams.verticalMargin = mVerticalMargin;</div><div class="line">                mParams.horizontalMargin = mHorizontalMargin;</div><div class="line">                mParams.packageName = packageName;</div><div class="line">                mParams.hideTimeoutMilliseconds = mDuration ==</div><div class="line">                    Toast.LENGTH_LONG ? LONG_DURATION_TIMEOUT : SHORT_DURATION_TIMEOUT;</div><div class="line">                mParams.token = windowToken;</div><div class="line">                <span class="keyword">if</span> (mView.getParent() != <span class="keyword">null</span>) &#123;</div><div class="line">                    <span class="keyword">if</span> (localLOGV) Log.v(TAG, <span class="string">"REMOVE! "</span> + mView + <span class="string">" in "</span> + <span class="keyword">this</span>);</div><div class="line">                    mWM.removeView(mView);</div><div class="line">                &#125;</div><div class="line">                <span class="keyword">if</span> (localLOGV) Log.v(TAG, <span class="string">"ADD! "</span> + mView + <span class="string">" in "</span> + <span class="keyword">this</span>);</div><div class="line">                <span class="comment">// Since the notification manager service cancels the token right</span></div><div class="line">                <span class="comment">// after it notifies us to cancel the toast there is an inherent</span></div><div class="line">                <span class="comment">// race and we may attempt to add a window after the token has been</span></div><div class="line">                <span class="comment">// invalidated. Let us hedge against that.</span></div><div class="line">                <span class="keyword">try</span> &#123;</div><div class="line">                    mWM.addView(mView, mParams);</div><div class="line">                    trySendAccessibilityEvent();</div><div class="line">                &#125; <span class="keyword">catch</span> (WindowManager.BadTokenException e) &#123;</div><div class="line">                    <span class="comment">/* ignore */</span></div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">        &#125;</div></pre></td></tr></table></figure></p><p>上面的一坨是获取到<code>WindowManager</code>然后通过<code>mWM.addView</code>将Toast显示到窗口上。<br>至于<code>WindowManager</code>如何添加view的，可以看这个：<a href="http://blog.huangyuanlove.com/2017/03/21/Window和CWindowManager/">http://blog.huangyuanlove.com/2017/03/21/Window和CWindowManager/</a><br>接下来看一下怎么取消Toast弹窗，上面提到了调用了<code>scheduleTimeoutLocked</code>方法。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@GuardedBy</span>(<span class="string">"mToastQueue"</span>)</div><div class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">scheduleTimeoutLocked</span><span class="params">(ToastRecord r)</span></span>&#123;</div><div class="line">    mHandler.removeCallbacksAndMessages(r);</div><div class="line">    Message m = Message.obtain(mHandler, MESSAGE_TIMEOUT, r);</div><div class="line">    <span class="keyword">long</span> delay = r.duration == Toast.LENGTH_LONG ? LONG_DELAY : SHORT_DELAY;</div><div class="line">    mHandler.sendMessageDelayed(m, delay);</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><p>调用mHandler发送了一个延时消息去调用<code>handleTimeout</code>方法，延迟时间就是根据duration来判断的。这里的<code>mHandler</code>是<code>WorkerHandler</code>继承自<code>Handler</code><br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">handleTimeout</span><span class="params">(ToastRecord record)</span></span></div><div class="line">    &#123;</div><div class="line">        <span class="keyword">if</span> (DBG) Slog.d(TAG, <span class="string">"Timeout pkg="</span> + record.pkg + <span class="string">" callback="</span> + record.callback);</div><div class="line">        <span class="keyword">synchronized</span> (mToastQueue) &#123;</div><div class="line">            <span class="keyword">int</span> index = indexOfToastLocked(record.pkg, record.callback);</div><div class="line">            <span class="keyword">if</span> (index &gt;= <span class="number">0</span>) &#123;</div><div class="line">                cancelToastLocked(index);</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;</div></pre></td></tr></table></figure></p><p>接着调用了<code>cancelToastLocked</code>方法<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@GuardedBy</span>(<span class="string">"mToastQueue"</span>)</div><div class="line">    <span class="function"><span class="keyword">void</span> <span class="title">cancelToastLocked</span><span class="params">(<span class="keyword">int</span> index)</span> </span>&#123;</div><div class="line">        ToastRecord record = mToastQueue.get(index);</div><div class="line">        <span class="keyword">try</span> &#123;</div><div class="line">            record.callback.hide();</div><div class="line">        &#125; <span class="keyword">catch</span> (RemoteException e) &#123;</div><div class="line">            Slog.w(TAG, <span class="string">"Object died trying to hide notification "</span> + record.callback</div><div class="line">                    + <span class="string">" in package "</span> + record.pkg);</div><div class="line">            <span class="comment">// don't worry about this, we're about to remove it from</span></div><div class="line">            <span class="comment">// the list anyway</span></div><div class="line">        &#125;</div><div class="line"></div><div class="line">        ToastRecord lastToast = mToastQueue.remove(index);</div><div class="line">        mWindowManagerInternal.removeWindowToken(lastToast.token, <span class="keyword">true</span>, DEFAULT_DISPLAY);</div><div class="line"></div><div class="line">        keepProcessAliveIfNeededLocked(record.pid);</div><div class="line">        <span class="keyword">if</span> (mToastQueue.size() &gt; <span class="number">0</span>) &#123;</div><div class="line">            <span class="comment">// Show the next one. If the callback fails, this will remove</span></div><div class="line">            <span class="comment">// it from the list, so don't assume that the list hasn't changed</span></div><div class="line">            <span class="comment">// after this point.</span></div><div class="line">            showNextToastLocked();</div><div class="line">        &#125;</div><div class="line">    &#125;</div></pre></td></tr></table></figure></p><p>在该方法中调用了<code>callback.hide()</code>方法移除toast的显示。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"> <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">handleHide</span><span class="params">()</span> </span>&#123;</div><div class="line">    <span class="keyword">if</span> (localLOGV) Log.v(TAG, <span class="string">"HANDLE HIDE: "</span> + <span class="keyword">this</span> + <span class="string">" mView="</span> + mView);</div><div class="line">    <span class="keyword">if</span> (mView != <span class="keyword">null</span>) &#123;</div><div class="line">        <span class="comment">// note: checking parent() just to make sure the view has</span></div><div class="line">        <span class="comment">// been added...  i have seen cases where we get here when</span></div><div class="line">        <span class="comment">// the view isn't yet added, so let's try not to crash.</span></div><div class="line">        <span class="keyword">if</span> (mView.getParent() != <span class="keyword">null</span>) &#123;</div><div class="line">            <span class="keyword">if</span> (localLOGV) Log.v(TAG, <span class="string">"REMOVE! "</span> + mView + <span class="string">" in "</span> + <span class="keyword">this</span>);</div><div class="line">            mWM.removeViewImmediate(mView);</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        mView = <span class="keyword">null</span>;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><p>如果这时候mToastQueue中还有ToastRecord，则调用<code>showNextToastLocked</code>方法显示下一个。</p><hr><p>以上</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;抄书抄的有点烦，自己也学着分析一下源码，挑了个在我看来比较简单的Toast显示过程来玩一玩。&lt;br&gt;&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;Toast.makeText(context, text, duration).show();&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;先了解一下makeText过程，该过程最终都会调用下面的方法：&lt;br&gt;&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;7&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;8&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;9&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;10&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;11&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;12&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;13&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;14&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;15&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;16&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;17&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;18&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;19&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;20&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;/**&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;     * Make a standard toast to display using the specified looper.&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;     * If looper is null, Looper.myLooper() is used.&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;     * &lt;span class=&quot;doctag&quot;&gt;@hide&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;     */&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;static&lt;/span&gt; Toast &lt;span class=&quot;title&quot;&gt;makeText&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(@NonNull Context context, @Nullable Looper looper,&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;            @NonNull CharSequence text, @Duration &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; duration)&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        Toast result = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; Toast(context, looper);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        LayoutInflater inflate = (LayoutInflater)&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;                context.getSystemService(Context.LAYOUT_INFLATER_SERVICE);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        View v = inflate.inflate(com.android.internal.R.layout.transient_notification, &lt;span class=&quot;keyword&quot;&gt;null&lt;/span&gt;);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        TextView tv = (TextView)v.findViewById(com.android.internal.R.id.message);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        tv.setText(text);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        result.mNextView = v;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        result.mDuration = duration;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; result;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &amp;#125;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;创建一个新的Toast对象，在Toast的构造方法中有一个TN类型的mTN对象：&lt;br&gt;&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;mTN = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; TN(context.getPackageName(), looper);&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;&lt;code&gt;TN&lt;/code&gt;是&lt;code&gt;ITransientNotification.Stub&lt;/code&gt;的子类，注意一下这个对象，这对后面的过程很重要。&lt;br&gt;
    
    </summary>
    
    
      <category term="Android" scheme="http://blog.huangyuanlove.com/tags/Android/"/>
    
  </entry>
  
  <entry>
    <title>Android ContentProvider</title>
    <link href="http://blog.huangyuanlove.com/2018/08/02/Android-ContentProvider/"/>
    <id>http://blog.huangyuanlove.com/2018/08/02/Android-ContentProvider/</id>
    <published>2018-08-02T14:06:07.000Z</published>
    <updated>2018-08-04T04:44:06.660Z</updated>
    
    <content type="html"><![CDATA[<p>《Android开发艺术探索》9.5章</p><p>系统预置了许多<code>ContentProvider</code>，比如通讯录信息、日程表信息等，要跨进程访问这些信息，只需要通过<code>ContentResolver</code>的query、update、insert和delete方法即可。虽然<code>ContentProvider</code>的底层<br>实现是<code>Binder</code>，但是它的使用过程要比<code>AIDL</code>简单许多，这是因为系统已经为我们做了封装，使得我们无须关心底层细节即可轻松实现IPC。系统预置了许多<code>ContentProvider</code>，比如通讯录信息、日程表信息等，要跨进程访问这些信息，只需要通过<code>ContentResolver</code>的query、update、insert和delete方法即可。<br><a id="more"></a></p><h4 id="使用ContentResolver读取联系人"><a href="#使用ContentResolver读取联系人" class="headerlink" title="使用ContentResolver读取联系人"></a>使用ContentResolver读取联系人</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">private</span> ArrayList&lt;HashMap&lt;String, String&gt;&gt; readContact() &#123;</div><div class="line"></div><div class="line">    String NUM = ContactsContract.CommonDataKinds.Phone.NUMBER;</div><div class="line">    String NAME = ContactsContract.CommonDataKinds.Phone.DISPLAY_NAME;</div><div class="line">    Uri uri = ContactsContract.CommonDataKinds.Phone.CONTENT_URI;</div><div class="line"></div><div class="line">    ArrayList&lt;HashMap&lt;String, String&gt;&gt; list = <span class="keyword">new</span> ArrayList&lt;HashMap&lt;String, String&gt;&gt;();</div><div class="line">    ContentResolver cr = getContentResolver();</div><div class="line">    Cursor cursor = cr.query(uri,<span class="keyword">new</span> String[]&#123;NUM,NAME&#125;,<span class="keyword">null</span>,<span class="keyword">null</span>,<span class="keyword">null</span>);</div><div class="line">    <span class="keyword">while</span> (cursor.moveToNext())&#123;</div><div class="line">        String name = cursor.getString(cursor.getColumnIndex(NAME));</div><div class="line">        String phone = cursor.getString(cursor.getColumnIndex(NUM));</div><div class="line">        HashMap&lt;String,String&gt; contact = <span class="keyword">new</span> HashMap&lt;&gt;();</div><div class="line">        contact.put(<span class="string">"name"</span>,name);</div><div class="line">        contact.put(<span class="string">"phone"</span>,phone);</div><div class="line">        list.add(contact);</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> list;</div></pre></td></tr></table></figure><h4 id="工作过程"><a href="#工作过程" class="headerlink" title="工作过程"></a>工作过程</h4><p><code>ContentProvider</code>是一种内容共享型组件，它通过<code>Binder</code>向其他组件乃至其他应用提供数据。当<code>ContentProvider</code>所在的进程启动时，<code>ContentProvider</code>会同时启动并被发布到AMS中。需要注意的是，这个时候<code>ContentProvider</code>的<code>onCreate</code>要先于<code>Application</code>的<code>onCreate</code>而执行。<br>当一个应用启动时，入口方法为<code>ActivityThread</code>的<code>main</code>方法，<code>main</code>方法是一个静态方法，在<code>main</code>方法中会创建<code>ActivityThread</code>的实例并创建主线程的消息队列，然后在<code>ActivityThread</code>的<code>attach</code>方法中会远程调用<code>AMS</code>的<code>attachApplication</code>方法并将<code>ApplicationThread</code>对象提供给<code>AMS</code>。<code>ApplicationThread</code>是一个<code>Binder</code>对象，它的<code>Binder</code>接口是<code>IApplicationThread</code>，它主要用于<code>ActivityThread</code>和<code>AMS</code>之间的通信，这一点在前面多次提到。在<code>AMS</code>的<code>attachApplication</code>方法中，会调用<code>ApplicationThread</code>的<code>bindApplication</code>方法，注意这个过程同样是跨进程完成的，<code>bindApplication</code>的逻辑会经过<code>ActivityThread</code>中的<code>mH  Handler</code>切换到<code>ActivityThread</code>中去执行，具体的方法是<code>handleBindApplication</code>。在<code>handleBindApplication</code>方法中，<code>ActivityThread</code>会创建<code>Application</code>对象并加载<code>ContentProvider</code>。需要注意的是，<code>ActivityThread</code>会先加载<code>ContentProvider</code>，然后再调用<code>Application</code>的<code>onCreate</code>方法。<br>这就是<code>ContentProvider</code>的启动过程，<code>ContentProvider</code>启动后，外界就可以通过它所提供的增删改查这四个接口来操作<code>ContentProvider</code>中的数据源，即insert、delete、update和query四个方法。这四个方法都是通过<code>Binder</code>来调用的，外界无法直接访问<code>ContentProvider</code>，它只能通过AMS根据Uri来获取对应的<code>ContentProvider</code>的<code>Binder</code>接口<code>IConentProvider</code>，然后再通过<code>IConentProvider</code>来访问<code>ContentProvider</code>中的数据源。<br>一般来说，<code>ContentProvide</code>r都应该是单实例的。<code>ContentProvider</code>到底是不是单实例，这是由它的<code>android:multiprocess</code>属性来决定的，当<code>android:multiprocess</code>为<code>false</code>时，<code>ContentProvider</code>是单实例，这也是默认值；当<code>android:multiprocess</code>为<code>true</code>时，<code>ContentProvider</code>为多实例，这个时候在每个调用者的进程中都存在一个<code>ContentProvider</code>对象。<br>访问<code>ContentProvide</code>r需要通过<code>ContentResolver</code>，<code>ContentResolver</code>是一个抽象类，通过<code>Context</code>的<code>getContentResolver</code>方法获取的实际上是<code>ApplicationContentResolver</code>对象，<code>ApplicationContentResolver</code>类继承了<code>ContentResolver</code>并实现了<code>ContentResolver</code>中的抽象方法。当<code>ContentProvider</code>所在的进程未启动时，第一次访问它时就会触发<code>ContentProvider</code>的创建，当然这也伴随着<code>ContentProvider</code>所在进程的启动。通过<code>ContentProvider</code>的四个方法的任何一个都可以触发<code>ContentProvider</code>的启动过程，这里选择<code>query</code>方法。<code>ContentProvider</code>的<code>query</code>方法中，首先会获取<code>IContentProvider</code>对象，不管是通过<code>acquireUnstableProvider</code>方法还是直接通过<code>acquireProvider</code>方法，它们的本质都是一样的，最终都是通过<code>acquireProvider</code>方法来获取<code>ContentProvider</code>。下面是<code>ApplicationContentResolver</code>的<code>acquireProvider</code>方法的具体实现:<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Override</span></div><div class="line">   <span class="function"><span class="keyword">protected</span> IContentProvider <span class="title">acquireProvider</span><span class="params">(Context context, String auth)</span> </span>&#123;</div><div class="line">       <span class="keyword">return</span> mMainThread.acquireProvider(context,</div><div class="line">               ContentProvider.getAuthorityWithoutUserId(auth),</div><div class="line">               resolveUserIdFromAuthority(auth), <span class="keyword">true</span>);</div><div class="line">   &#125;</div></pre></td></tr></table></figure></p><p><code>ApplicationContentResolver</code>的<code>acquireProvider</code>方法并没有处理任何逻辑，它直接调用了<code>ActivityThread</code>的<code>acquireProvider</code>方法，<code>ActivityThread</code>的<code>acquireProvider</code>方法的源码如下:<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">final</span> IContentProvider <span class="title">acquireProvider</span><span class="params">(</span></span></div><div class="line">            Context c, String auth, <span class="keyword">int</span> userId, <span class="keyword">boolean</span> stable) &#123;</div><div class="line">    <span class="keyword">final</span> IContentProvider provider = acquireExistingProvider(c, auth, userId, stable);</div><div class="line">    <span class="keyword">if</span> (provider != <span class="keyword">null</span>) &#123;</div><div class="line">        <span class="keyword">return</span> provider;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">// There is a possible race here.  Another thread may try to acquire</span></div><div class="line">    <span class="comment">// the same provider at the same time.  When this happens, we want to ensure</span></div><div class="line">    <span class="comment">// that the first one wins.</span></div><div class="line">    <span class="comment">// Note that we cannot hold the lock while acquiring and installing the</span></div><div class="line">    <span class="comment">// provider since it might take a long time to run and it could also potentially</span></div><div class="line">    <span class="comment">// be re-entrant in the case where the provider is in the same process.</span></div><div class="line">    ContentProviderHolder holder = <span class="keyword">null</span>;</div><div class="line">    <span class="keyword">try</span> &#123;</div><div class="line">        holder = ActivityManager.getService().getContentProvider(</div><div class="line">                getApplicationThread(), auth, userId, stable);</div><div class="line">    &#125; <span class="keyword">catch</span> (RemoteException ex) &#123;</div><div class="line">        <span class="keyword">throw</span> ex.rethrowFromSystemServer();</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">if</span> (holder == <span class="keyword">null</span>) &#123;</div><div class="line">        Slog.e(TAG, <span class="string">"Failed to find provider info for "</span> + auth);</div><div class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">// Install provider will increment the reference count for us, and break</span></div><div class="line">    <span class="comment">// any ties in the race.</span></div><div class="line">    holder = installProvider(c, holder, holder.info,</div><div class="line">            <span class="keyword">true</span> <span class="comment">/*noisy*/</span>, holder.noReleaseNeeded, stable);</div><div class="line">    <span class="keyword">return</span> holder.provider;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><p>上面的代码首先会从<code>ActivityThread</code>中查找是否已经存在目标<code>ContentProvider</code>了，如果存在就直接返回。<code>ActivityThread</code>中通过<code>mProviderMap</code>来存储已经启动的<code>ContentProvider</code>对象，<code>mProviderMap</code>的声明如下所示:<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">inal ArrayMap&lt;providerKey,ProviderClientRecord&gt; mProviderMap = <span class="keyword">new</span> ArrayMap&lt;providerKey,ProviderClientRecord&gt;();</div></pre></td></tr></table></figure></p><p>如果目前<code>ContentProvider</code>没有启动，那么就发送一个进程间请求给AMS让其启动目标<code>ContentProvider</code>，最后再通过<code>installProvider</code>方法来修改引用计数。<code>ContentProvider</code>被启动时会伴随着进程的启动，在AMS中，首先会启动<code>ContentProvider</code>所在的进程，然后再启动<code>ContentProvider</code>。启动进程是由AMS的<code>startProcessLocked</code>方法来完成的，其内部主要是通过<code>Process</code>的<code>start</code>方法来完成一个新进程的启动，新进程启动后其入口方法为<code>ActivityThread</code>的main方法，如下所示:<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</div><div class="line">    Trace.traceBegin(Trace.TRACE_TAG_ACTIVITY_MANAGER, <span class="string">"ActivityThreadMain"</span>);</div><div class="line"></div><div class="line">    <span class="comment">// CloseGuard defaults to true and can be quite spammy.  We</span></div><div class="line">    <span class="comment">// disable it here, but selectively enable it later (via</span></div><div class="line">    <span class="comment">// StrictMode) on debug builds, but using DropBox, not logs.</span></div><div class="line">    CloseGuard.setEnabled(<span class="keyword">false</span>);</div><div class="line"></div><div class="line">    Environment.initForCurrentUser();</div><div class="line"></div><div class="line">    <span class="comment">// Set the reporter for event logging in libcore</span></div><div class="line">    EventLogger.setReporter(<span class="keyword">new</span> EventLoggingReporter());</div><div class="line"></div><div class="line">    <span class="comment">// Make sure TrustedCertificateStore looks in the right place for CA certificates</span></div><div class="line">    <span class="keyword">final</span> File configDir = Environment.getUserConfigDirectory(UserHandle.myUserId());</div><div class="line">    TrustedCertificateStore.setDefaultUserDirectory(configDir);</div><div class="line"></div><div class="line">    Process.setArgV0(<span class="string">"&lt;pre-initialized&gt;"</span>);</div><div class="line"></div><div class="line">    Looper.prepareMainLooper();</div><div class="line"></div><div class="line">    ActivityThread thread = <span class="keyword">new</span> ActivityThread();</div><div class="line">    thread.attach(<span class="keyword">false</span>);</div><div class="line"></div><div class="line">    <span class="keyword">if</span> (sMainThreadHandler == <span class="keyword">null</span>) &#123;</div><div class="line">        sMainThreadHandler = thread.getHandler();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">if</span> (<span class="keyword">false</span>) &#123;</div><div class="line">        Looper.myLooper().setMessageLogging(<span class="keyword">new</span></div><div class="line">                LogPrinter(Log.DEBUG, <span class="string">"ActivityThread"</span>));</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">// End of event ActivityThreadMain.</span></div><div class="line">    Trace.traceEnd(Trace.TRACE_TAG_ACTIVITY_MANAGER);</div><div class="line">    Looper.loop();</div><div class="line"></div><div class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(<span class="string">"Main thread loop unexpectedly exited"</span>);</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><p>可以看到，<code>ActivityThread</code>的<code>main</code>方法是一个静态方法，在它内部首先会创建<code>ActivityThread</code>的实例并调用<code>attach</code>方法来进行一系列初始化，接着就开始进行消息循环了。<code>ActivityThread</code>的<code>attach</code>方法会将<code>ApplicationThread</code>对象通过<code>AMS</code>的<code>attachApplication</code>方法跨进程传递给AMS，最终AMS会完成<code>ContentProvider</code>的创建过程，AMS的<code>attachApplication</code>方法调用了<code>attachApplicationLocked</code>方法，<code>attachApplicationLocked</code>中又调用了<code>ApplicationThread</code>的<code>bindApplication</code>，注意这个过程也是进程间调用，<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">try</span> &#123;</div><div class="line">    mgr.attachApplication(mAppThread);</div><div class="line">&#125; <span class="keyword">catch</span> (RemoteException ex) &#123;</div><div class="line">    <span class="keyword">throw</span> ex.rethrowFromSystemServer();</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">void</span> <span class="title">attachApplication</span><span class="params">(IApplicationThread thread)</span> </span>&#123;</div><div class="line">        <span class="keyword">synchronized</span> (<span class="keyword">this</span>) &#123;</div><div class="line">            <span class="keyword">int</span> callingPid = Binder.getCallingPid();</div><div class="line">            <span class="keyword">final</span> <span class="keyword">long</span> origId = Binder.clearCallingIdentity();</div><div class="line">            attachApplicationLocked(thread, callingPid);</div><div class="line">            Binder.restoreCallingIdentity(origId);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">boolean</span> <span class="title">attachApplicationLocked</span><span class="params">(IApplicationThread thread,<span class="keyword">int</span> pid)</span> </span>&#123;</div><div class="line">    ......</div><div class="line"><span class="keyword">if</span> (app.instr != <span class="keyword">null</span>) &#123;</div><div class="line">                thread.bindApplication(processName, appInfo, providers,</div><div class="line">                        app.instr.mClass,</div><div class="line">                        profilerInfo, app.instr.mArguments,</div><div class="line">                        app.instr.mWatcher,</div><div class="line">                        app.instr.mUiAutomationConnection, testMode,</div><div class="line">                        mBinderTransactionTrackingEnabled, enableTrackAllocation,</div><div class="line">                        isRestrictedBackupMode || !normalMode, app.persistent,</div><div class="line">                        <span class="keyword">new</span> Configuration(getGlobalConfiguration()), app.compat,</div><div class="line">                        getCommonServicesLocked(app.isolated),</div><div class="line">                        mCoreSettingsObserver.getCoreSettingsLocked(),</div><div class="line">                        buildSerial);</div><div class="line">            &#125; <span class="keyword">else</span> &#123;</div><div class="line">                thread.bindApplication(processName, appInfo, providers, <span class="keyword">null</span>, profilerInfo,</div><div class="line">                        <span class="keyword">null</span>, <span class="keyword">null</span>, <span class="keyword">null</span>, testMode,</div><div class="line">                        mBinderTransactionTrackingEnabled, enableTrackAllocation,</div><div class="line">                        isRestrictedBackupMode || !normalMode, app.persistent,</div><div class="line">                        <span class="keyword">new</span> Configuration(getGlobalConfiguration()), app.compat,</div><div class="line">                        getCommonServicesLocked(app.isolated),</div><div class="line">                        mCoreSettingsObserver.getCoreSettingsLocked(),</div><div class="line">                        buildSerial);</div><div class="line">            &#125;</div><div class="line">            ......</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><p><code>ActivityThread</code>的<code>bindApplication</code>会发送一个<code>BIND_APPLICATION</code>类型的消息给<code>mH</code>，<code>mH</code>是一个<code>Handler</code>，它收到消息后会调用<code>ActivityThread</code>的<code>handleBindApplication</code>方法，<code>bindApplication</code>发送消息的过程如下所示:<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line">AppBindData data = <span class="keyword">new</span> AppBindData();</div><div class="line">            data.processName = processName;</div><div class="line">            data.appInfo = appInfo;</div><div class="line">            data.providers = providers;</div><div class="line">            data.instrumentationName = instrumentationName;</div><div class="line">            data.instrumentationArgs = instrumentationArgs;</div><div class="line">            data.instrumentationWatcher = instrumentationWatcher;</div><div class="line">            data.instrumentationUiAutomationConnection = instrumentationUiConnection;</div><div class="line">            data.debugMode = debugMode;</div><div class="line">            data.enableBinderTracking = enableBinderTracking;</div><div class="line">            data.trackAllocation = trackAllocation;</div><div class="line">            data.restrictedBackupMode = isRestrictedBackupMode;</div><div class="line">            data.persistent = persistent;</div><div class="line">            data.config = config;</div><div class="line">            data.compatInfo = compatInfo;</div><div class="line">            data.initProfilerInfo = profilerInfo;</div><div class="line">            data.buildSerial = buildSerial;</div><div class="line">            sendMessage(H.BIND_APPLICATION, data);</div></pre></td></tr></table></figure></p><p><code>ActivityThread</code>的<code>handleBindApplication</code>则完成了<code>Application</code>的创建以及<code>ContentProvider</code>的创建，可以分为如下四个步骤:</p><p><strong> 创建ContextImpl和Instrumentation </strong><br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">final</span> ContextImpl appContext = ContextImpl.createAppContext(<span class="keyword">this</span>, data.info);</div><div class="line">updateLocaleListFromAppContext(appContext, mResourcesManager.getConfiguration().getLocales());</div><div class="line"> <span class="keyword">try</span> &#123;</div><div class="line">    <span class="keyword">final</span> ClassLoader cl = instrContext.getClassLoader();</div><div class="line">    mInstrumentation = (Instrumentation)</div><div class="line">        cl.loadClass(data.instrumentationName.getClassName()).newInstance();</div><div class="line">&#125; <span class="keyword">catch</span> (Exception e) &#123;</div><div class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(</div><div class="line">        <span class="string">"Unable to instantiate instrumentation "</span></div><div class="line">        + data.instrumentationName + <span class="string">": "</span> + e.toString(), e);</div><div class="line">&#125;</div><div class="line"><span class="keyword">final</span> ComponentName component = <span class="keyword">new</span> ComponentName(ii.packageName, ii.name);</div><div class="line">mInstrumentation.init(<span class="keyword">this</span>, instrContext, appContext, component, data.instrumentationWatcher, data.instrumentationUiAutomationConnection);</div></pre></td></tr></table></figure></p><p><strong> 创建Application对象 </strong><br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// If the app is being launched for full backup or restore, bring it up in</span></div><div class="line"><span class="comment">// a restricted environment with the base application class.</span></div><div class="line">app = data.info.makeApplication(data.restrictedBackupMode, <span class="keyword">null</span>);</div><div class="line">mInitialApplication = app;</div></pre></td></tr></table></figure></p><p><strong> 启动当前进程的ContentProvider并调用其onCreate方法 </strong><br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// don't bring up providers in restricted mode; they may depend on the</span></div><div class="line"><span class="comment">// app's custom Application class</span></div><div class="line"><span class="keyword">if</span> (!data.restrictedBackupMode) &#123;</div><div class="line">    <span class="keyword">if</span> (!ArrayUtils.isEmpty(data.providers)) &#123;</div><div class="line">        installContentProviders(app, data.providers);</div><div class="line">        <span class="comment">// For process that contains content providers, we want to</span></div><div class="line">        <span class="comment">// ensure that the JIT is enabled "at some point".</span></div><div class="line">        mH.sendEmptyMessageDelayed(H.ENABLE_JIT, <span class="number">10</span>*<span class="number">1000</span>);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><p><code>installContentProviders</code>完成了<code>ContentProvider</code>的启动工作，它的实现如下所示。首先会遍历当前进程的<code>ProviderInfo</code>的列表并一一调用调用<code>installProvider</code>方法来启动它们，接着将已经启动的<code>ContentProvider</code>发布到AMS中，AMS会把它们存储在<code>ProviderMap</code>中，这样一来外部调用者就可以直接从AMS中获取<code>ContentProvider</code>了。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">installContentProviders</span><span class="params">(</span></span></div><div class="line">           Context context, List&lt;ProviderInfo&gt; providers) &#123;</div><div class="line">       <span class="keyword">final</span> ArrayList&lt;ContentProviderHolder&gt; results = <span class="keyword">new</span> ArrayList&lt;&gt;();</div><div class="line"></div><div class="line">       <span class="keyword">for</span> (ProviderInfo cpi : providers) &#123;</div><div class="line">           <span class="keyword">if</span> (DEBUG_PROVIDER) &#123;</div><div class="line">               StringBuilder buf = <span class="keyword">new</span> StringBuilder(<span class="number">128</span>);</div><div class="line">               buf.append(<span class="string">"Pub "</span>);</div><div class="line">               buf.append(cpi.authority);</div><div class="line">               buf.append(<span class="string">": "</span>);</div><div class="line">               buf.append(cpi.name);</div><div class="line">               Log.i(TAG, buf.toString());</div><div class="line">           &#125;</div><div class="line">           ContentProviderHolder cph = installProvider(context, <span class="keyword">null</span>, cpi,</div><div class="line">                   <span class="keyword">false</span> <span class="comment">/*noisy*/</span>, <span class="keyword">true</span> <span class="comment">/*noReleaseNeeded*/</span>, <span class="keyword">true</span> <span class="comment">/*stable*/</span>);</div><div class="line">           <span class="keyword">if</span> (cph != <span class="keyword">null</span>) &#123;</div><div class="line">               cph.noReleaseNeeded = <span class="keyword">true</span>;</div><div class="line">               results.add(cph);</div><div class="line">           &#125;</div><div class="line">       &#125;</div><div class="line"></div><div class="line">       <span class="keyword">try</span> &#123;</div><div class="line">           ActivityManager.getService().publishContentProviders(</div><div class="line">               getApplicationThread(), results);</div><div class="line">       &#125; <span class="keyword">catch</span> (RemoteException ex) &#123;</div><div class="line">           <span class="keyword">throw</span> ex.rethrowFromSystemServer();</div><div class="line">       &#125;</div><div class="line">   &#125;</div></pre></td></tr></table></figure></p><p>下面看一下<code>ContentProvider</code>对象的创建过程，在<code>installProvider</code>方法中有下面一段代码，其通过类加载器完成了<code>ContentProvider</code>对象的创建:<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">final</span> java.lang.ClassLoader cl = c.getClassLoader();</div><div class="line">localProvider = (ContentProvider)cl.loadClass(info.name).newInstance();</div><div class="line">provider = localProvider.getIContentProvider();</div><div class="line"><span class="comment">// XXX Need to create the correct context for this provider.</span></div><div class="line">localProvider.attachInfo(c, info);</div></pre></td></tr></table></figure></p><p>在上述代码中，除了完成<code>ContentProvider</code>对象的创建，还会通过<code>ContentProvider</code>的<code>attachInfo</code>方法来调用它的<code>onCreate</code>方法:<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">attachInfo</span><span class="params">(Context context, ProviderInfo info, <span class="keyword">boolean</span> testing)</span> </span>&#123;</div><div class="line">    mNoPerms = testing;</div><div class="line"></div><div class="line">    <span class="comment">/*</span></div><div class="line">        * Only allow it to be set once, so after the content service gives</div><div class="line">        * this to us clients can't change it.</div><div class="line">        */</div><div class="line">    <span class="keyword">if</span> (mContext == <span class="keyword">null</span>) &#123;</div><div class="line">        mContext = context;</div><div class="line">        <span class="keyword">if</span> (context != <span class="keyword">null</span>) &#123;</div><div class="line">            mTransport.mAppOpsManager = (AppOpsManager) context.getSystemService(</div><div class="line">                    Context.APP_OPS_SERVICE);</div><div class="line">        &#125;</div><div class="line">        mMyUid = Process.myUid();</div><div class="line">        <span class="keyword">if</span> (info != <span class="keyword">null</span>) &#123;</div><div class="line">            setReadPermission(info.readPermission);</div><div class="line">            setWritePermission(info.writePermission);</div><div class="line">            setPathPermissions(info.pathPermissions);</div><div class="line">            mExported = info.exported;</div><div class="line">            mSingleUser = (info.flags &amp; ProviderInfo.FLAG_SINGLE_USER) != <span class="number">0</span>;</div><div class="line">            setAuthorities(info.authority);</div><div class="line">        &#125;</div><div class="line">        ContentProvider.<span class="keyword">this</span>.onCreate();</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><p>到此为止，<code>ContentProvider</code>已经被创建并且其<code>onCreate</code>方法也已经被调用，这意味着<code>ContentProvider</code>已经启动完成了。</p><p><strong> 调用Application的onCreate方法 </strong><br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// Do this after providers, since instrumentation tests generally start their</span></div><div class="line"><span class="comment">// test thread at this point, and we don't want that racing.</span></div><div class="line"><span class="keyword">try</span> &#123;</div><div class="line">    mInstrumentation.onCreate(data.instrumentationArgs);</div><div class="line">&#125;</div><div class="line"><span class="keyword">catch</span> (Exception e) &#123;</div><div class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(</div><div class="line">        <span class="string">"Exception thrown in onCreate() of "</span></div><div class="line">        + data.instrumentationName + <span class="string">": "</span> + e.toString(), e);</div><div class="line">&#125;</div><div class="line"><span class="keyword">try</span> &#123;</div><div class="line">    mInstrumentation.callApplicationOnCreate(app);</div><div class="line">&#125; <span class="keyword">catch</span> (Exception e) &#123;</div><div class="line">    <span class="keyword">if</span> (!mInstrumentation.onException(app, e)) &#123;</div><div class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(</div><div class="line">            <span class="string">"Unable to create application "</span> + app.getClass().getName()</div><div class="line">            + <span class="string">": "</span> + e.toString(), e);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><p>经过上面的四个步骤，<code>ContentProvider</code>已经成功启动，并且其所在进程的<code>Application</code>也已经启动，这意味着<code>ContentProvider</code>所在的进程已经完成了整个的启动过程，然后其他应用就可以通过AMS来访问这个<code>ContentProvider</code>了。拿到了<code>ContentProvider</code>以后，就可以通过它所提供的接口方法来访问它了。需要注意的是，这里的<code>ContentProvider</code>并不是原始的<code>ContentProvider</code>，而是<code>ContentProvider</code>的<code>Binder</code>类型的对象<code>IContentProvider</code>，<code>IContentProvider</code>的具体实现是<code>ContentProviderNative</code>和<code>ContentProvider.Transport</code>，其中<code>ContentProvider.Transport</code>继承了<code>ContentProviderNative</code>。这里仍然选择<code>query</code>方法，首先其他应用会通过AMS获取到<code>ContentProvider</code>的<code>Binder</code>对象即<code>IContentProvider</code>，而<code>IContentProvider</code>的实现者实际上是<code>ContentProvider.Transport</code>。因此其他应用调用<code>IContentProvider</code>的query方法时最终会以进程间通信的方式调用到<code>ContentProvider.Transport</code>的query方法，它的实现如下所示:<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Override</span></div><div class="line"><span class="function"><span class="keyword">public</span> Cursor <span class="title">query</span><span class="params">(String callingPkg, Uri uri, @Nullable String[] projection,</span></span></div><div class="line">        @Nullable Bundle queryArgs, @Nullable ICancellationSignal cancellationSignal) &#123;</div><div class="line">    validateIncomingUri(uri);</div><div class="line">    uri = maybeGetUriWithoutUserId(uri);</div><div class="line">    <span class="keyword">if</span> (enforceReadPermission(callingPkg, uri, <span class="keyword">null</span>) != AppOpsManager.MODE_ALLOWED) &#123;</div><div class="line">        <span class="comment">// The caller has no access to the data, so return an empty cursor with</span></div><div class="line">        <span class="comment">// the columns in the requested order. The caller may ask for an invalid</span></div><div class="line">        <span class="comment">// column and we would not catch that but this is not a problem in practice.</span></div><div class="line">        <span class="comment">// We do not call ContentProvider#query with a modified where clause since</span></div><div class="line">        <span class="comment">// the implementation is not guaranteed to be backed by a SQL database, hence</span></div><div class="line">        <span class="comment">// it may not handle properly the tautology where clause we would have created.</span></div><div class="line">        <span class="keyword">if</span> (projection != <span class="keyword">null</span>) &#123;</div><div class="line">            <span class="keyword">return</span> <span class="keyword">new</span> MatrixCursor(projection, <span class="number">0</span>);</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="comment">// Null projection means all columns but we have no idea which they are.</span></div><div class="line">        <span class="comment">// However, the caller may be expecting to access them my index. Hence,</span></div><div class="line">        <span class="comment">// we have to execute the query as if allowed to get a cursor with the</span></div><div class="line">        <span class="comment">// columns. We then use the column names to return an empty cursor.</span></div><div class="line">        Cursor cursor = ContentProvider.<span class="keyword">this</span>.query(</div><div class="line">                uri, projection, queryArgs,</div><div class="line">                CancellationSignal.fromTransport(cancellationSignal));</div><div class="line">        <span class="keyword">if</span> (cursor == <span class="keyword">null</span>) &#123;</div><div class="line">            <span class="keyword">return</span> <span class="keyword">null</span>;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="comment">// Return an empty cursor for all columns.</span></div><div class="line">        <span class="keyword">return</span> <span class="keyword">new</span> MatrixCursor(cursor.getColumnNames(), <span class="number">0</span>);</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">final</span> String original = setCallingPackage(callingPkg);</div><div class="line">    <span class="keyword">try</span> &#123;</div><div class="line">        <span class="keyword">return</span> ContentProvider.<span class="keyword">this</span>.query(</div><div class="line">                uri, projection, queryArgs,</div><div class="line">                CancellationSignal.fromTransport(cancellationSignal));</div><div class="line">    &#125; <span class="keyword">finally</span> &#123;</div><div class="line">        setCallingPackage(original);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><p>很显然，<code>ContentProvider.Transport</code>的<code>query</code>方法调用了<code>ContentProvider</code>的<code>query</code>方法，<code>query</code>方法的执行结果再通过<code>Binder</code>返回给调用者，这样一来整个调用过程就完成了。除了query方法，insert、delete和update方法也是类似的。</p><hr><p>以上</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;《Android开发艺术探索》9.5章&lt;/p&gt;
&lt;p&gt;系统预置了许多&lt;code&gt;ContentProvider&lt;/code&gt;，比如通讯录信息、日程表信息等，要跨进程访问这些信息，只需要通过&lt;code&gt;ContentResolver&lt;/code&gt;的query、update、insert和delete方法即可。虽然&lt;code&gt;ContentProvider&lt;/code&gt;的底层&lt;br&gt;实现是&lt;code&gt;Binder&lt;/code&gt;，但是它的使用过程要比&lt;code&gt;AIDL&lt;/code&gt;简单许多，这是因为系统已经为我们做了封装，使得我们无须关心底层细节即可轻松实现IPC。系统预置了许多&lt;code&gt;ContentProvider&lt;/code&gt;，比如通讯录信息、日程表信息等，要跨进程访问这些信息，只需要通过&lt;code&gt;ContentResolver&lt;/code&gt;的query、update、insert和delete方法即可。&lt;br&gt;
    
    </summary>
    
    
      <category term="Android" scheme="http://blog.huangyuanlove.com/tags/Android/"/>
    
  </entry>
  
  <entry>
    <title>AndroidService</title>
    <link href="http://blog.huangyuanlove.com/2018/08/01/AndroidService/"/>
    <id>http://blog.huangyuanlove.com/2018/08/01/AndroidService/</id>
    <published>2018-08-01T02:01:16.000Z</published>
    <updated>2018-08-04T04:46:23.080Z</updated>
    
    <content type="html"><![CDATA[<p>《Android开发艺术探索》9.3章<br><code>Service</code>分为两种工作状态,一种是启动状态，主要用于执行后台计算;另一种是绑定态,主要用于其他组件和<code>Service</code>的交互。需要注意的是，<code>Service</code>的这两种状态是可以共存的，即<code>Service</code>既可以处于启动状态也可以同时处于绑定状态。<br>通过<code>Context</code>的<code>startService</code>方法即可启动一个<code>Service</code>:<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">Intent intent = <span class="keyword">new</span> Intent(content,Service.class);</div><div class="line">startService(intent);</div></pre></td></tr></table></figure></p><p>通过<code>Context</code>的<code>bindService</code>方法可以绑定一个<code>Service</code>：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">Intent intent = <span class="keyword">new</span> Intent(content,Service.class);</div><div class="line">bindService(intent,connection,BIND_AUTO_CREATE);</div></pre></td></tr></table></figure></p><a id="more"></a><h4 id="Service启动过程"><a href="#Service启动过程" class="headerlink" title="Service启动过程"></a>Service启动过程</h4><p><code>Service</code>的启动时从<code>ContextWrapper</code>的<code>startService</code>开始的：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> ComponentName <span class="title">startService</span><span class="params">(Intent service)</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> mBase.startService(service);</div><div class="line">    &#125;</div></pre></td></tr></table></figure></p><p><code>mBase</code>是<code>Context</code>的实现类<code>ContextImpl</code>，<code>在Activity</code>启动的时候会通过<code>attach</code>方法关联一个<code>ContextImpl</code>，这个<code>ContextImpl</code>就是上面的<code>mBase</code>，从<code>ContextWrapper</code>的实现来看，大部分的实现都是通过<code>mBase</code>来实现的，这是一种典型的桥接模式。在<code>ContextImpl</code>的<code>startService</code>方法中又调用了<code>startServiceCommon</code>。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line"> <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> ComponentName <span class="title">startService</span><span class="params">(Intent service)</span> </span>&#123;</div><div class="line">        warnIfCallingFromSystemProcess();</div><div class="line">        <span class="keyword">return</span> startServiceCommon(service, <span class="keyword">false</span>, mUser);</div><div class="line">    &#125;</div><div class="line"><span class="function"><span class="keyword">private</span> ComponentName <span class="title">startServiceCommon</span><span class="params">(Intent service, <span class="keyword">boolean</span> requireForeground,UserHandle user)</span> </span>&#123;</div><div class="line"></div><div class="line">    validateServiceIntent(service);</div><div class="line">    service.prepareToLeaveProcess(<span class="keyword">this</span>);</div><div class="line">    <span class="comment">//api 27</span></div><div class="line">    ComponentName cn = ActivityManager.getService().startService(</div><div class="line">        mMainThread.getApplicationThread(), service, service.resolveTypeIfNeeded(</div><div class="line">                    getContentResolver()), requireForeground,</div><div class="line">                    getOpPackageName(), user.getIdentifier());</div><div class="line">    <span class="comment">//api 25</span></div><div class="line">    <span class="comment">//ComponentName cn = ActivityManagerNative.getDefault().startService(</span></div><div class="line">     <span class="comment">//   mMainThread.getApplicationThread(), service, service.resolveTypeIfNeeded(</span></div><div class="line">      <span class="comment">//  getContentResolver()), getOpPackageName(), user.getIdentifier());</span></div><div class="line"></div><div class="line">    <span class="keyword">return</span> cn;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure></p><p>在<code>startServiceCommon</code>中通过<code>getService</code>这个对象来启动一个服务，这个对象就是AMS，需要注意的是，在上述代码中通过AMS来启动服务的过程是一个跨进程调用。AMS的<code>startService</code>如下：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> ComponentName <span class="title">startService</span><span class="params">(IApplicationThread caller, Intent service,</span></span></div><div class="line">            String resolvedType, String callingPackage, <span class="keyword">int</span> userId)</div><div class="line">            <span class="keyword">throws</span> TransactionTooLargeException &#123;</div><div class="line">        <span class="keyword">synchronized</span>(<span class="keyword">this</span>) &#123;</div><div class="line">            <span class="keyword">final</span> <span class="keyword">int</span> callingPid = Binder.getCallingPid();</div><div class="line">            <span class="keyword">final</span> <span class="keyword">int</span> callingUid = Binder.getCallingUid();</div><div class="line">            <span class="keyword">final</span> <span class="keyword">long</span> origId = Binder.clearCallingIdentity();</div><div class="line">            ComponentName res = mServices.startServiceLocked(caller, service,</div><div class="line">                    resolvedType, callingPid, callingUid, callingPackage, userId);</div><div class="line">            Binder.restoreCallingIdentity(origId);</div><div class="line">            <span class="keyword">return</span> res;</div><div class="line">        &#125;</div><div class="line">    &#125;</div></pre></td></tr></table></figure></p><p>AMS会通过<code>mServices</code>来完成<code>service</code>的启动过程，<code>mServices</code>的对象类型是<code>ActiveServices</code>，<code>ActiveServices</code>是一个辅助AMS进行<code>Service</code>管理的类，包括<code>Service</code>的启动、绑定和停止。在<code>startService</code>方法的尾部会调用<code>startServiceInnerLocked</code>方法<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="function">ComponentName <span class="title">startServiceInnerLocked</span><span class="params">(ServiceMap smap, Intent service, ServiceRecord r,</span></span></div><div class="line">            <span class="keyword">boolean</span> callerFg, <span class="keyword">boolean</span> addToStarting) <span class="keyword">throws</span> TransactionTooLargeException &#123;</div><div class="line">        ServiceState stracker = r.getTracker();</div><div class="line">        <span class="keyword">if</span> (stracker != <span class="keyword">null</span>) &#123;</div><div class="line">            stracker.setStarted(<span class="keyword">true</span>, mAm.mProcessStats.getMemFactorLocked(), r.lastActivity);</div><div class="line">        &#125;</div><div class="line">        r.callStart = <span class="keyword">false</span>;</div><div class="line">        <span class="keyword">synchronized</span> (r.stats.getBatteryStats()) &#123;</div><div class="line">            r.stats.startRunningLocked();</div><div class="line">        &#125;</div><div class="line">        String error = bringUpServiceLocked(r, service.getFlags(), callerFg, <span class="keyword">false</span>, <span class="keyword">false</span>);</div><div class="line">        <span class="keyword">return</span> r.name;</div><div class="line">    &#125;</div></pre></td></tr></table></figure></p><p>上述代码中<code>ServiceRecord</code>是描述一个Service记录，<code>ServiceRecord</code>一直贯穿整个Service流程，<code>startServiceInnerLocked</code>并没有完成启动Service的完整流程，而是将后续的过程交给了<code>bringUpServiceLocked</code>，在该方法中又调用了<code>realStartServiceLocked</code>方法:<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">void</span> <span class="title">realStartServiceLocked</span><span class="params">(ServiceRecord r,</span></span></div><div class="line">            ProcessRecord app, <span class="keyword">boolean</span> execInFg) <span class="keyword">throws</span> RemoteException &#123;</div><div class="line">       </div><div class="line">        r.app = app;</div><div class="line">        r.restartTime = r.lastActivity = SystemClock.uptimeMillis();</div><div class="line"></div><div class="line">        <span class="keyword">final</span> <span class="keyword">boolean</span> newService = app.services.add(r);</div><div class="line">        bumpServiceExecutingLocked(r, execInFg, <span class="string">"create"</span>);</div><div class="line">        mAm.updateLruProcessLocked(app, <span class="keyword">false</span>, <span class="keyword">null</span>);</div><div class="line">        mAm.updateOomAdjLocked();</div><div class="line"></div><div class="line">        <span class="keyword">boolean</span> created = <span class="keyword">false</span>;</div><div class="line">        <span class="keyword">try</span> &#123;</div><div class="line">            </div><div class="line">            <span class="keyword">synchronized</span> (r.stats.getBatteryStats()) &#123;</div><div class="line">                r.stats.startLaunchedLocked();</div><div class="line">            &#125;</div><div class="line">            mAm.notifyPackageUse(r.serviceInfo.packageName,</div><div class="line">                                 PackageManager.NOTIFY_PACKAGE_USE_SERVICE);</div><div class="line">            app.forceProcessStateUpTo(ActivityManager.PROCESS_STATE_SERVICE);</div><div class="line">            app.thread.scheduleCreateService(r, r.serviceInfo,</div><div class="line">                    mAm.compatibilityInfoForPackageLocked(r.serviceInfo.applicationInfo),</div><div class="line">                    app.repProcState);</div><div class="line">            r.postNotification();</div><div class="line">            created = <span class="keyword">true</span>;</div><div class="line">        &#125; <span class="keyword">catch</span> (DeadObjectException e) &#123;</div><div class="line">            Slog.w(TAG, <span class="string">"Application dead when creating service "</span> + r);</div><div class="line">            mAm.appDiedLocked(app);</div><div class="line">            <span class="keyword">throw</span> e;</div><div class="line">        &#125; <span class="keyword">finally</span> &#123;</div><div class="line">            <span class="keyword">if</span> (!created) &#123;</div><div class="line">                <span class="comment">// Keep the executeNesting count accurate.</span></div><div class="line">                <span class="keyword">final</span> <span class="keyword">boolean</span> inDestroying = mDestroyingServices.contains(r);</div><div class="line">                serviceDoneExecutingLocked(r, inDestroying, inDestroying);</div><div class="line"></div><div class="line">                <span class="comment">// Cleanup.</span></div><div class="line">                <span class="keyword">if</span> (newService) &#123;</div><div class="line">                    app.services.remove(r);</div><div class="line">                    r.app = <span class="keyword">null</span>;</div><div class="line">                &#125;</div><div class="line"></div><div class="line">                <span class="comment">// Retry.</span></div><div class="line">                <span class="keyword">if</span> (!inDestroying) &#123;</div><div class="line">                    scheduleServiceRestartLocked(r, <span class="keyword">false</span>);</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="keyword">if</span> (r.whitelistManager) &#123;</div><div class="line">            app.whitelistManager = <span class="keyword">true</span>;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        requestServiceBindingsLocked(r, execInFg);</div><div class="line"></div><div class="line">        updateServiceClientActivitiesLocked(app, <span class="keyword">null</span>, <span class="keyword">true</span>);</div><div class="line"></div><div class="line">        <span class="comment">// If the service is in the started state, and there are no</span></div><div class="line">        <span class="comment">// pending arguments, then fake up one so its onStartCommand() will</span></div><div class="line">        <span class="comment">// be called.</span></div><div class="line">        <span class="keyword">if</span> (r.startRequested &amp;&amp; r.callStart &amp;&amp; r.pendingStarts.size() == <span class="number">0</span>) &#123;</div><div class="line">            r.pendingStarts.add(<span class="keyword">new</span> ServiceRecord.StartItem(r, <span class="keyword">false</span>, r.makeNextStartId(),</div><div class="line">                    <span class="keyword">null</span>, <span class="keyword">null</span>));</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        sendServiceArgsLocked(r, execInFg, <span class="keyword">true</span>);</div><div class="line"></div><div class="line">        <span class="keyword">if</span> (r.delayed) &#123;</div><div class="line">            <span class="keyword">if</span> (DEBUG_DELAYED_STARTS) Slog.v(TAG_SERVICE, <span class="string">"REM FR DELAY LIST (new proc): "</span> + r);</div><div class="line">            getServiceMap(r.userId).mDelayedStartList.remove(r);</div><div class="line">            r.delayed = <span class="keyword">false</span>;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="keyword">if</span> (r.delayedStop) &#123;</div><div class="line">            <span class="comment">// Oh and hey we've already been asked to stop!</span></div><div class="line">            r.delayedStop = <span class="keyword">false</span>;</div><div class="line">            <span class="keyword">if</span> (r.startRequested) &#123;</div><div class="line">                <span class="keyword">if</span> (DEBUG_DELAYED_STARTS) Slog.v(TAG_SERVICE,</div><div class="line">                        <span class="string">"Applying delayed stop (from start): "</span> + r);</div><div class="line">                stopServiceLocked(r);</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;</div></pre></td></tr></table></figure></p><p>在<code>realStartServiceLocked</code>方法中，首先通过<code>app.thread</code>的<code>scheduleCreateService</code>方法来创建<code>Service</code>对象并调用其<code>onCreate</code>,接着再通过<code>sendServiceArgsLocked</code>方法来调用<code>Service</code>的其他方法，比如<code>onStartCommand</code>,这两个过程均是进程间通信。<code>app.thread</code>对象是<code>IApplicationThread</code>类型，它实际上是一个<code>Binder</code>,它的具体实现是<code>ApplicationThread</code>和<code>ApplicationThreadNative</code>。由于<code>ApplicationThread</code>继承了<code>ApplicationThreadNative</code>,因此只需要看<code>ApplicationThread</code>对<code>Service</code>启动过程的处理即可，这对应着它的<code>scheduleCreateService</code>方法，如下所示：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">void</span> <span class="title">scheduleCreateService</span><span class="params">(IBinder token,</span></span></div><div class="line">               ServiceInfo info, CompatibilityInfo compatInfo, <span class="keyword">int</span> processState) &#123;</div><div class="line">           updateProcessState(processState, <span class="keyword">false</span>);</div><div class="line">           CreateServiceData s = <span class="keyword">new</span> CreateServiceData();</div><div class="line">           s.token = token;</div><div class="line">           s.info = info;</div><div class="line">           s.compatInfo = compatInfo;</div><div class="line"></div><div class="line">           sendMessage(H.CREATE_SERVICE, s);</div><div class="line">       &#125;</div></pre></td></tr></table></figure></p><p>通过发送消息给<code>Handler H</code>来完成的。H会接收这个<code>CREATE_ SERVICE</code>消息并通过<code>ActivityThread</code>的<code>handleCreateService</code>方法来完成Service的最终启动，<code>handleCreateService</code>的源码如下所示：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">handleCreateService</span><span class="params">(CreateServiceData data)</span> </span>&#123;</div><div class="line">        <span class="comment">// If we are getting ready to gc after going to the background, well</span></div><div class="line">        <span class="comment">// we are back active so skip it.</span></div><div class="line">        unscheduleGcIdler();</div><div class="line">        LoadedApk packageInfo = getPackageInfoNoCheck(</div><div class="line">                data.info.applicationInfo, data.compatInfo);</div><div class="line">        Service service = <span class="keyword">null</span>;</div><div class="line"></div><div class="line">            java.lang.ClassLoader cl = packageInfo.getClassLoader();</div><div class="line">            service = (Service) cl.loadClass(data.info.name).newInstance();</div><div class="line"></div><div class="line">            ContextImpl context = ContextImpl.createAppContext(<span class="keyword">this</span>, packageInfo);</div><div class="line">            context.setOuterContext(service);</div><div class="line"></div><div class="line">            Application app = packageInfo.makeApplication(<span class="keyword">false</span>, mInstrumentation);</div><div class="line">            service.attach(context, <span class="keyword">this</span>, data.info.name, data.token, app,</div><div class="line">                    ActivityManagerNative.getDefault());</div><div class="line">            service.onCreate();</div><div class="line">            mServices.put(data.token, service);</div><div class="line">            ActivityManagerNative.getDefault().serviceDoneExecuting(</div><div class="line">                        data.token, SERVICE_DONE_EXECUTING_ANON, <span class="number">0</span>, <span class="number">0</span>);</div><div class="line">    &#125;</div></pre></td></tr></table></figure></p><p><code>handleCreateService</code>主要完成了以下几件事：<br>首先通过类加载器创建了Service实例，接着创建<code>ContextImpl</code>对象和<code>Application</code>对象  并通过service.attach方法建立联系，最后调用<code>service.onCreate</code>方法，并将<code>service</code>存储在<code>ActivityThread</code>中的一个列表<code>mServices</code>中<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">final</span> ArrayMap&lt;IBinder, Service&gt; mServices = <span class="keyword">new</span> ArrayMap&lt;&gt;();</div></pre></td></tr></table></figure></p><p>由于<code>service</code>的<code>onCreate</code>方法执行了，也就意味着<code>Service</code>已经启动了。除此之外，<code>ActivityThead</code>中还会通过<code>handleServiceArgs</code>方法调用<code>Service</code>的<code>onStartCommand</code>方法。</p><h4 id="Service绑定过程"><a href="#Service绑定过程" class="headerlink" title="Service绑定过程"></a>Service绑定过程</h4><p>和启动过程一样，也是从<code>ContextWrapper</code>开始的：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Override</span></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">bindService</span><span class="params">(Intent service, ServiceConnection conn,</span></span></div><div class="line">        <span class="keyword">int</span> flags) &#123;</div><div class="line">    <span class="keyword">return</span> mBase.bindService(service, conn, flags);</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><p>然后是<code>ContextImpl</code>的<code>bindService</code>方法调用<code>bindServiceCommon</code>方法，然后远程调用AMS的<code>bindService</code>:<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">boolean</span> <span class="title">bindServiceCommon</span><span class="params">(Intent service, ServiceConnection conn, <span class="keyword">int</span> flags, Handler handler, UserHandle user)</span> </span>&#123;</div><div class="line">    <span class="comment">// Keep this in sync with DevicePolicyManager.bindDeviceAdminServiceAsUser.</span></div><div class="line">    IServiceConnection sd;</div><div class="line">    <span class="keyword">if</span> (conn == <span class="keyword">null</span>) &#123;</div><div class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(<span class="string">"connection is null"</span>);</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">if</span> (mPackageInfo != <span class="keyword">null</span>) &#123;</div><div class="line">        sd = mPackageInfo.getServiceDispatcher(conn, getOuterContext(), handler, flags);</div><div class="line">    &#125; <span class="keyword">else</span> &#123;</div><div class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(<span class="string">"Not supported in system context"</span>);</div><div class="line">    &#125;</div><div class="line">    validateServiceIntent(service);</div><div class="line">    <span class="keyword">try</span> &#123;</div><div class="line">        IBinder token = getActivityToken();</div><div class="line">        <span class="keyword">if</span> (token == <span class="keyword">null</span> &amp;&amp; (flags&amp;BIND_AUTO_CREATE) == <span class="number">0</span> &amp;&amp; mPackageInfo != <span class="keyword">null</span></div><div class="line">                &amp;&amp; mPackageInfo.getApplicationInfo().targetSdkVersion</div><div class="line">                &lt; android.os.Build.VERSION_CODES.ICE_CREAM_SANDWICH) &#123;</div><div class="line">            flags |= BIND_WAIVE_PRIORITY;</div><div class="line">        &#125;</div><div class="line">        service.prepareToLeaveProcess(<span class="keyword">this</span>);</div><div class="line">        <span class="keyword">int</span> res = ActivityManager.getService().bindService(</div><div class="line">            mMainThread.getApplicationThread(), getActivityToken(), service,</div><div class="line">            service.resolveTypeIfNeeded(getContentResolver()),</div><div class="line">            sd, flags, getOpPackageName(), user.getIdentifier());</div><div class="line">        <span class="keyword">if</span> (res &lt; <span class="number">0</span>) &#123;</div><div class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> SecurityException(</div><div class="line">                    <span class="string">"Not allowed to bind to service "</span> + service);</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> res != <span class="number">0</span>;</div><div class="line">    &#125; <span class="keyword">catch</span> (RemoteException e) &#123;</div><div class="line">        <span class="keyword">throw</span> e.rethrowFromSystemServer();</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><p>在该方法中，首先将客户端的<code>ServiceConnection</code>转化为<code>ServiceDispatcher.InnerConnection</code>对象，因为服务绑定是跨进程的，所以<code>ServiceConnection</code>对象必须借助<code>Binder</code>对象才能让远程服务端调用自己的方法。<code>ServiceDispatcher</code>起着连接<code>ServiceConnection</code>和<code>InnerConnection</code>的作用。这个过程由<code>LoadedApk.getServiceDispatcher</code>方法完成：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">final</span> IServiceConnection <span class="title">getServiceDispatcher</span><span class="params">(ServiceConnection c,</span></span></div><div class="line">            Context context, Handler handler, <span class="keyword">int</span> flags) &#123;</div><div class="line">        <span class="keyword">synchronized</span> (mServices) &#123;</div><div class="line">            LoadedApk.ServiceDispatcher sd = <span class="keyword">null</span>;</div><div class="line">            ArrayMap&lt;ServiceConnection, LoadedApk.ServiceDispatcher&gt; map = mServices.get(context);</div><div class="line">            <span class="keyword">if</span> (map != <span class="keyword">null</span>) &#123;</div><div class="line">                <span class="keyword">if</span> (DEBUG) Slog.d(TAG, <span class="string">"Returning existing dispatcher "</span> + sd + <span class="string">" for conn "</span> + c);</div><div class="line">                sd = map.get(c);</div><div class="line">            &#125;</div><div class="line">            <span class="keyword">if</span> (sd == <span class="keyword">null</span>) &#123;</div><div class="line">                sd = <span class="keyword">new</span> ServiceDispatcher(c, context, handler, flags);</div><div class="line">                <span class="keyword">if</span> (DEBUG) Slog.d(TAG, <span class="string">"Creating new dispatcher "</span> + sd + <span class="string">" for conn "</span> + c);</div><div class="line">                <span class="keyword">if</span> (map == <span class="keyword">null</span>) &#123;</div><div class="line">                    map = <span class="keyword">new</span> ArrayMap&lt;&gt;();</div><div class="line">                    mServices.put(context, map);</div><div class="line">                &#125;</div><div class="line">                map.put(c, sd);</div><div class="line">            &#125; <span class="keyword">else</span> &#123;</div><div class="line">                sd.validate(context, handler);</div><div class="line">            &#125;</div><div class="line">            <span class="keyword">return</span> sd.getIServiceConnection();</div><div class="line">        &#125;</div><div class="line">    &#125;</div></pre></td></tr></table></figure></p><p>在上面的代码中，<code>mServices</code>是一个<code>ArrayMap</code>，它存储了一个应用当前活动的<code>ServiceConnection</code>和<code>ServiceDispatcher</code>的映射关系，其声明如下：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">private</span> <span class="keyword">final</span> ArrayMap&lt;Context, ArrayMap&lt;ServiceConnection, LoadedApk.ServiceDispatcher&gt;&gt; mServices</div><div class="line">        = <span class="keyword">new</span> ArrayMap&lt;&gt;();</div></pre></td></tr></table></figure></p><p>系统首先会查找是否存在相同的<code>ServiceConnection</code>,如果不存在就重新创建一个<code>ServiceDispatcher</code>对象，并将其存储在<code>mServices</code>中，其中映射关系的key是<code>ServiceConnection</code>,value是<code>ServiceDispatcher</code>,在<code>ServiceDispatcher</code>的内部又保存了<code>ServiceConnection</code>和<code>InnerConnection</code>对象。当<code>Service</code>和客户端建立连接后，系统会通过<code>InnerConnection</code>来调用<code>ServiceConnection</code>中的<code>onServiceConnected</code>方法，这个过程有可能是跨进程的。当<code>ServiceDispatcher</code>创建好了以后，<code>getServiceDispatcher</code>会 返回其保存的<code>InnerConnection</code>对象。<br>接着调用AMS的<code>bindService</code>  方法，该方法又调用了<code>bindServiceLocked</code>–&gt;<code>bringUpServiceLocked</code>–&gt;<code>realStartServiceLocked</code>，这个过程和上面的<code>StartService</code>过程逻辑类似，最终都是通过<code>ApplicationThread</code>来完成<code>Service</code>的实例创建并调用<code>onCreate</code>方法。和启动<code>Service</code>过程不同的是，绑定过程会调用<code>app.thread</code>的<code>scheduleBindService</code>方法，这个过程的实现在<code>ActivityService</code>的<code>requestServiceBindingsLocked</code>方法中：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">void</span> <span class="title">requestServiceBindingsLocked</span><span class="params">(ServiceRecord r, <span class="keyword">boolean</span> execInFg)</span></span></div><div class="line">           <span class="keyword">throws</span> TransactionTooLargeException &#123;</div><div class="line">       <span class="keyword">for</span> (<span class="keyword">int</span> i=r.bindings.size()-<span class="number">1</span>; i&gt;=<span class="number">0</span>; i--) &#123;</div><div class="line">           IntentBindRecord ibr = r.bindings.valueAt(i);</div><div class="line">           <span class="keyword">if</span> (!requestServiceBindingLocked(r, ibr, execInFg, <span class="keyword">false</span>)) &#123;</div><div class="line">               <span class="keyword">break</span>;</div><div class="line">           &#125;</div><div class="line">       &#125;</div><div class="line">   &#125;</div></pre></td></tr></table></figure></p><p>该方法用到了<code>r.bindings</code>。它是一个<code>ArrayMap</code>，保存了客户端的<code>bind</code>消息：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">final</span> ArrayMap&lt;Intent.FilterComparison, IntentBindRecord&gt; bindings = <span class="keyword">new</span> ArrayMap&lt;Intent.FilterComparison, IntentBindRecord&gt;();</div></pre></td></tr></table></figure></p><p>具体保存方法在AMS一开始的方法<code>bindServiceLocked</code>中：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">AppBindRecord b = s.retrieveAppBindingLocked(service, callerApp);</div></pre></td></tr></table></figure></p><p>在<code>requestServiceBindingsLocked</code>方法中调用了了<code>requestServiceBindingLocked</code>方法:<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">boolean</span> <span class="title">requestServiceBindingLocked</span><span class="params">(ServiceRecord r, IntentBindRecord i,</span></span></div><div class="line">            <span class="keyword">boolean</span> execInFg, <span class="keyword">boolean</span> rebind) <span class="keyword">throws</span> TransactionTooLargeException &#123;</div><div class="line">        <span class="keyword">if</span> (r.app == <span class="keyword">null</span> || r.app.thread == <span class="keyword">null</span>) &#123;</div><div class="line">            <span class="comment">// If service is not currently running, can't yet bind.</span></div><div class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">if</span> (DEBUG_SERVICE) Slog.d(TAG_SERVICE, <span class="string">"requestBind "</span> + i + <span class="string">": requested="</span> + i.requested</div><div class="line">                + <span class="string">" rebind="</span> + rebind);</div><div class="line">        <span class="keyword">if</span> ((!i.requested || rebind) &amp;&amp; i.apps.size() &gt; <span class="number">0</span>) &#123;</div><div class="line">            <span class="keyword">try</span> &#123;</div><div class="line">                bumpServiceExecutingLocked(r, execInFg, <span class="string">"bind"</span>);</div><div class="line">                r.app.forceProcessStateUpTo(ActivityManager.PROCESS_STATE_SERVICE);</div><div class="line">                r.app.thread.scheduleBindService(r, i.intent.getIntent(), rebind,</div><div class="line">                        r.app.repProcState);</div><div class="line">                <span class="keyword">if</span> (!rebind) &#123;</div><div class="line">                    i.requested = <span class="keyword">true</span>;</div><div class="line">                &#125;</div><div class="line">                i.hasBound = <span class="keyword">true</span>;</div><div class="line">                i.doRebind = <span class="keyword">false</span>;</div><div class="line">            &#125; <span class="keyword">catch</span> (TransactionTooLargeException e) &#123;</div><div class="line">                <span class="comment">// Keep the executeNesting count accurate.</span></div><div class="line">                <span class="keyword">if</span> (DEBUG_SERVICE) Slog.v(TAG_SERVICE, <span class="string">"Crashed while binding "</span> + r, e);</div><div class="line">                <span class="keyword">final</span> <span class="keyword">boolean</span> inDestroying = mDestroyingServices.contains(r);</div><div class="line">                serviceDoneExecutingLocked(r, inDestroying, inDestroying);</div><div class="line">                <span class="keyword">throw</span> e;</div><div class="line">            &#125; <span class="keyword">catch</span> (RemoteException e) &#123;</div><div class="line">                <span class="keyword">if</span> (DEBUG_SERVICE) Slog.v(TAG_SERVICE, <span class="string">"Crashed while binding "</span> + r);</div><div class="line">                <span class="comment">// Keep the executeNesting count accurate.</span></div><div class="line">                <span class="keyword">final</span> <span class="keyword">boolean</span> inDestroying = mDestroyingServices.contains(r);</div><div class="line">                serviceDoneExecutingLocked(r, inDestroying, inDestroying);</div><div class="line">                <span class="keyword">return</span> <span class="keyword">false</span>;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</div><div class="line">    &#125;</div></pre></td></tr></table></figure></p><p>在上述代码中，<code>app.thread</code>这个对象多次出现过，它实际上就是<code>ApplicationThread</code>。<code>ApplicationThread</code>的一系列以<code>schedule</code>开头的方法，其内部都是通过<code>Handler H</code>来中转的，对于<code>scheduleBindService</code>方法来说也是如此，它的实现如下所示：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">void</span> <span class="title">scheduleBindService</span><span class="params">(IBinder token, Intent intent,</span></span></div><div class="line">                <span class="keyword">boolean</span> rebind, <span class="keyword">int</span> processState) &#123;</div><div class="line">            updateProcessState(processState, <span class="keyword">false</span>);</div><div class="line">            BindServiceData s = <span class="keyword">new</span> BindServiceData();</div><div class="line">            s.token = token;</div><div class="line">            s.intent = intent;</div><div class="line">            s.rebind = rebind;</div><div class="line">            sendMessage(H.BIND_SERVICE, s);</div><div class="line">        &#125;</div></pre></td></tr></table></figure></p><p>在H内部，接收到<code>BIND_SERVICE</code>这类消息时，会交给<code>ActivityThread</code>的<code>handleBindService</code>方法来处理。在<code>handleBindService</code>中，首先根据<code>Service</code>的<code>token</code>取出<code>Service</code>对象，然后调用<code>Service</code>的<code>onBind</code>方法，<code>Service</code>的<code>onBind</code>方法会返回一个<code>Binder</code>对象给客户端使用，原则上来说，<code>Service</code>的<code>onBind</code>方法被调用以后，<code>Service</code>就处于绑定状态了，但是<code>onBind</code>方法是<code>Service</code>的方法，这个时候客户端并不知道已经成功连接<code>Service</code>了，所以还必须调用客户端的<code>ServiceConnection</code>中的<code>onServiceConnected</code>,这个过程是由<code>ActivityManager.getService()</code>的<code>publishService</code>方法来完成的，而前面多次提到，<code>ActivityManager.getService()</code>就是AMS。<code>handleBindService</code>的实现过程如下所示。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">handleBindService</span><span class="params">(BindServiceData data)</span> </span>&#123;</div><div class="line">        Service s = mServices.get(data.token);</div><div class="line">        <span class="keyword">if</span> (s != <span class="keyword">null</span>) &#123;</div><div class="line">            <span class="keyword">try</span> &#123;</div><div class="line">                data.intent.setExtrasClassLoader(s.getClassLoader());</div><div class="line">                data.intent.prepareToEnterProcess();</div><div class="line">                <span class="keyword">try</span> &#123;</div><div class="line">                    <span class="keyword">if</span> (!data.rebind) &#123;</div><div class="line">                        IBinder binder = s.onBind(data.intent);</div><div class="line">                        ActivityManager.getService().publishService(</div><div class="line">                                data.token, data.intent, binder);</div><div class="line">                    &#125; <span class="keyword">else</span> &#123;</div><div class="line">                        s.onRebind(data.intent);</div><div class="line">                        ActivityManager.getService().serviceDoneExecuting(</div><div class="line">                                data.token, SERVICE_DONE_EXECUTING_ANON, <span class="number">0</span>, <span class="number">0</span>);</div><div class="line">                    &#125;</div><div class="line">                    ensureJitEnabled();</div><div class="line">                &#125; <span class="keyword">catch</span> (RemoteException ex) &#123;</div><div class="line">                    <span class="keyword">throw</span> ex.rethrowFromSystemServer();</div><div class="line">                &#125;</div><div class="line">            &#125; <span class="keyword">catch</span> (Exception e) &#123;</div><div class="line">                <span class="keyword">if</span> (!mInstrumentation.onException(s, e)) &#123;</div><div class="line">                    <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(</div><div class="line">                            <span class="string">"Unable to bind to service "</span> + s</div><div class="line">                            + <span class="string">" with "</span> + data.intent + <span class="string">": "</span> + e.toString(), e);</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;</div></pre></td></tr></table></figure></p><p>Service有一个特性，当多次绑定同一个Service时，Service的<code>onBind</code>方法<strong>只会执行一次</strong>，除非Service被终止了。当Service的onBind执行以后，系统还需要告知客户端已经成功连接Service了。根据上面的分析，这个过程由AMS的<code>publishService</code>方法来实现:<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">publishService</span><span class="params">(IBinder token, Intent intent, IBinder service)</span> </span>&#123;</div><div class="line">        <span class="comment">// Refuse possible leaked file descriptors</span></div><div class="line">        <span class="keyword">if</span> (intent != <span class="keyword">null</span> &amp;&amp; intent.hasFileDescriptors() == <span class="keyword">true</span>) &#123;</div><div class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(<span class="string">"File descriptors passed in Intent"</span>);</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="keyword">synchronized</span>(<span class="keyword">this</span>) &#123;</div><div class="line">            <span class="keyword">if</span> (!(token <span class="keyword">instanceof</span> ServiceRecord)) &#123;</div><div class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(<span class="string">"Invalid service token"</span>);</div><div class="line">            &#125;</div><div class="line">            mServices.publishServiceLocked((ServiceRecord)token, intent, service);</div><div class="line">        &#125;</div><div class="line">    &#125;</div></pre></td></tr></table></figure></p><p>从_上面代码可以看出，AMS的<code>publishService</code>方法将具体的工作交给了<code>ActiveServices</code>类型的<code>mServices</code>对象来处理。<code>ActiveServices</code>的<code>publishServiceLocked</code>方法看起来很复杂，但其实核心代码就只有一- 句话: <code>c.conn.connected(r.name,service)</code>， 其中c的类型是<code>ConnectionRecord</code>，<code>c.comn</code>的类型是<code>ServiceDispatcher.InnerConnection</code>, service就是Service的onBind方法返回的Binder对象。为了分析具体的逻辑，下面看一下<code>ServiceDispatcher.InnerConnection</code>的定义：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">InnerConnection</span> <span class="keyword">extends</span> <span class="title">IServiceConnection</span>.<span class="title">Stub</span> </span>&#123;</div><div class="line">            <span class="keyword">final</span> WeakReference&lt;LoadedApk.ServiceDispatcher&gt; mDispatcher;</div><div class="line"></div><div class="line">            InnerConnection(LoadedApk.ServiceDispatcher sd) &#123;</div><div class="line">                mDispatcher = <span class="keyword">new</span> WeakReference&lt;LoadedApk.ServiceDispatcher&gt;(sd);</div><div class="line">            &#125;</div><div class="line"></div><div class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">connected</span><span class="params">(ComponentName name, IBinder service, <span class="keyword">boolean</span> dead)</span></span></div><div class="line">                    <span class="keyword">throws</span> RemoteException &#123;</div><div class="line">                LoadedApk.ServiceDispatcher sd = mDispatcher.get();</div><div class="line">                <span class="keyword">if</span> (sd != <span class="keyword">null</span>) &#123;</div><div class="line">                    sd.connected(name, service, dead);</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">        &#125;</div></pre></td></tr></table></figure></p><p>从<code>InnerConnection</code>的定义可以看出来，它的<code>connected</code>方法又调用了<code>ServiceDispatcher</code>的<code>connected</code>方法<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">connected</span><span class="params">(ComponentName name, IBinder service, <span class="keyword">boolean</span> dead)</span> </span>&#123;</div><div class="line">            <span class="keyword">if</span> (mActivityThread != <span class="keyword">null</span>) &#123;</div><div class="line">                mActivityThread.post(<span class="keyword">new</span> RunConnection(name, service, <span class="number">0</span>, dead));</div><div class="line">            &#125; <span class="keyword">else</span> &#123;</div><div class="line">                doConnected(name, service, dead);</div><div class="line">            &#125;</div><div class="line">        &#125;</div></pre></td></tr></table></figure></p><p>对于Service的绑定过程来讲，<code>ServiceDispatcher</code>中的<code>mActivityThread</code>就是一个<code>handler</code>，它就是<code>ActivityThread</code>中的<code>H</code>，从<code>Service</code>的创建过程来讲，<code>mActivityTHread</code>不会为<code>null</code>，这样一来，<code>RunConnection</code>就可以经由<code>H</code>的<code>post</code>方法从而运行在主线程中，因此，客户端的<code>ServiceConnection</code>中的方法回调是在主线程中执行的。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">private</span> <span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">RunConnection</span> <span class="keyword">implements</span> <span class="title">Runnable</span> </span>&#123;</div><div class="line">            RunConnection(ComponentName name, IBinder service, <span class="keyword">int</span> command, <span class="keyword">boolean</span> dead) &#123;</div><div class="line">                mName = name;</div><div class="line">                mService = service;</div><div class="line">                mCommand = command;</div><div class="line">                mDead = dead;</div><div class="line">            &#125;</div><div class="line"></div><div class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</div><div class="line">                <span class="keyword">if</span> (mCommand == <span class="number">0</span>) &#123;</div><div class="line">                    doConnected(mName, mService, mDead);</div><div class="line">                &#125; <span class="keyword">else</span> <span class="keyword">if</span> (mCommand == <span class="number">1</span>) &#123;</div><div class="line">                    doDeath(mName, mService);</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line"></div><div class="line">            <span class="keyword">final</span> ComponentName mName;</div><div class="line">            <span class="keyword">final</span> IBinder mService;</div><div class="line">            <span class="keyword">final</span> <span class="keyword">int</span> mCommand;</div><div class="line">            <span class="keyword">final</span> <span class="keyword">boolean</span> mDead;</div><div class="line">        &#125;</div></pre></td></tr></table></figure></p><p>很显然，<code>RunConnection</code>的<code>run</code>方法也是简单调用了<code>ServiceDispatcher</code>的<code>doConnected</code>方法，由于<code>ServiceDispatcher</code>内部保存了客户端的<code>ServiceConnection</code>对象，因此它可以很方便地调用<code>ServiceConnection</code>对象的<code>onServiceConnected</code>方法，如下所示。<br>至此，bindService的过程完成。</p><hr><p>以上</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;《Android开发艺术探索》9.3章&lt;br&gt;&lt;code&gt;Service&lt;/code&gt;分为两种工作状态,一种是启动状态，主要用于执行后台计算;另一种是绑定态,主要用于其他组件和&lt;code&gt;Service&lt;/code&gt;的交互。需要注意的是，&lt;code&gt;Service&lt;/code&gt;的这两种状态是可以共存的，即&lt;code&gt;Service&lt;/code&gt;既可以处于启动状态也可以同时处于绑定状态。&lt;br&gt;通过&lt;code&gt;Context&lt;/code&gt;的&lt;code&gt;startService&lt;/code&gt;方法即可启动一个&lt;code&gt;Service&lt;/code&gt;:&lt;br&gt;&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;Intent intent = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; Intent(content,Service.class);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;startService(intent);&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;通过&lt;code&gt;Context&lt;/code&gt;的&lt;code&gt;bindService&lt;/code&gt;方法可以绑定一个&lt;code&gt;Service&lt;/code&gt;：&lt;br&gt;&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;Intent intent = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; Intent(content,Service.class);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;bindService(intent,connection,BIND_AUTO_CREATE);&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
    
    </summary>
    
    
      <category term="Android" scheme="http://blog.huangyuanlove.com/tags/Android/"/>
    
  </entry>
  
  <entry>
    <title>Android广播</title>
    <link href="http://blog.huangyuanlove.com/2018/07/31/Android%E5%B9%BF%E6%92%AD/"/>
    <id>http://blog.huangyuanlove.com/2018/07/31/Android广播/</id>
    <published>2018-07-31T07:16:25.000Z</published>
    <updated>2018-08-04T04:49:08.149Z</updated>
    
    <content type="html"><![CDATA[<p>面试APUS的时候被问到广播：<br>面试官：聊一下广播吧。<br>我：广播啊，四大组件之一，自己创建个类继承自<code>BroadcastReceiver</code>，重写<code>onReceive()</code>方法，需要注意的是不要在这个方法中做耗时操作。注册的话可以在<code>AndroidManifest</code>文件中静态注册，也可以在代码中动态注册。都做完了之后就可以调用sendBroadCast()方法发送广播了。<br>面试官：了解广播注册过程么？<br>我：哈~！这个没怎么看过。<br>面试官：了解怎么接收到的广播么？<br>我：没有。。。。<br><a id="more"></a></p><h4 id="广播的注册过程"><a href="#广播的注册过程" class="headerlink" title="广播的注册过程"></a>广播的注册过程</h4><p>《Android开发艺术探索》9.4章<br>广播的注册分为静态注册和动态注册，其中静态注册的广播在应用安装时由系统自动完成注册，具体来说是由PMS ( PackageManagerService)来完成整个注册过程的，除了广播以外，其他三大组件也都是在应用安装时由PMS解析并注册的。这里只分析广播的动态注册的过程，动态注册的过程是从ContextWrapper的registerReceiver方法开始的，和Activity以及Service一样 。ContextWrapper并 没有做实际的工作，而是将注册过程直接交给了ContextImpl来完成，如下所示：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Override</span></div><div class="line"><span class="function"><span class="keyword">public</span> Intent <span class="title">registerReceiver</span><span class="params">(BroadcastReceiver receiver, IntentFilter filter)</span> </span>&#123;</div><div class="line">    <span class="keyword">return</span> mBase.registerReceiver(receiver, filter);</div><div class="line">&#125;</div><div class="line"><span class="meta">@Override</span></div><div class="line"><span class="function"><span class="keyword">public</span> Intent <span class="title">registerReceiver</span><span class="params">(BroadcastReceiver receiver, IntentFilter filter,String broadcastPermission, Handler scheduler)</span> </span>&#123;</div><div class="line">    <span class="keyword">return</span> registerReceiverInternal(receiver, getUserId(),</div><div class="line">            filter, broadcastPermission, scheduler, getOuterContext(), <span class="number">0</span>);</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><p>这里的<code>registerReceiver</code>方法是重载方法，最终调用了<code>registerReceiverInternal</code>方法：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">private</span> Intent <span class="title">registerReceiverInternal</span><span class="params">(BroadcastReceiver receiver, <span class="keyword">int</span> userId,</span></span></div><div class="line">            IntentFilter filter, String broadcastPermission,</div><div class="line">            Handler scheduler, Context context, <span class="keyword">int</span> flags) &#123;</div><div class="line">        IIntentReceiver rd = <span class="keyword">null</span>;</div><div class="line">        <span class="keyword">if</span> (receiver != <span class="keyword">null</span>) &#123;</div><div class="line">            <span class="keyword">if</span> (mPackageInfo != <span class="keyword">null</span> &amp;&amp; context != <span class="keyword">null</span>) &#123;</div><div class="line">                <span class="keyword">if</span> (scheduler == <span class="keyword">null</span>) &#123;</div><div class="line">                    scheduler = mMainThread.getHandler();</div><div class="line">                &#125;</div><div class="line">                rd = mPackageInfo.getReceiverDispatcher(</div><div class="line">                    receiver, context, scheduler,</div><div class="line">                    mMainThread.getInstrumentation(), <span class="keyword">true</span>);</div><div class="line">            &#125; <span class="keyword">else</span> &#123;</div><div class="line">                <span class="keyword">if</span> (scheduler == <span class="keyword">null</span>) &#123;</div><div class="line">                    scheduler = mMainThread.getHandler();</div><div class="line">                &#125;</div><div class="line">                rd = <span class="keyword">new</span> LoadedApk.ReceiverDispatcher(</div><div class="line">                        receiver, context, scheduler, <span class="keyword">null</span>, <span class="keyword">true</span>).getIIntentReceiver();</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">try</span> &#123;</div><div class="line">            <span class="keyword">final</span> Intent intent = ActivityManager.getService().registerReceiver(</div><div class="line">                    mMainThread.getApplicationThread(), mBasePackageName, rd, filter,</div><div class="line">                    broadcastPermission, userId, flags);</div><div class="line">            <span class="keyword">if</span> (intent != <span class="keyword">null</span>) &#123;</div><div class="line">                intent.setExtrasClassLoader(getClassLoader());</div><div class="line">                intent.prepareToEnterProcess();</div><div class="line">            &#125;</div><div class="line">            <span class="keyword">return</span> intent;</div><div class="line">        &#125; <span class="keyword">catch</span> (RemoteException e) &#123;</div><div class="line">            <span class="keyword">throw</span> e.rethrowFromSystemServer();</div><div class="line">        &#125;</div><div class="line">    &#125;</div></pre></td></tr></table></figure></p><p>在上面的代码中，系统首先从<code>mPackageInfo</code>获取<code>IIntentReceiver</code>对象，然后再采用跨进程的方式向AMS发送广播注册的请求。之所以采用<code>IIntentReceiver</code>而不是直接采用<code>BroadcastReceiver</code> ,这是因为上述注册过程是一个进程间通信的过程，而<code>BroadcastReceiver</code>作为Android的一个组件是不能直接跨进程传递的，所以需要通过<code>IIntentReceiver</code>来中转一下。毫无疑问，<code>IIntentReceiver</code>必须是一个Binder接口，它的具体实现是<code>LoadedApk.ReceiverDispatcher.InnerReceiver</code>, <code>ReceiverDispatcher</code>的内部同时保存了<code>BroadcastReceiver</code>和<code>InnerReceiver</code>,这样当接收到广播时，<code>ReceiverDispatcher</code>可以很方便地调用<code>BroadcastReceiver</code>的<code>onReceive</code>方法。<br>看一下<code>LoadedApk.getReceiverDispatcher</code>方法：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> IIntentReceiver <span class="title">getReceiverDispatcher</span><span class="params">(BroadcastReceiver r,</span></span></div><div class="line">            Context context, Handler handler,</div><div class="line">            Instrumentation instrumentation, <span class="keyword">boolean</span> registered) &#123;</div><div class="line">        <span class="keyword">synchronized</span> (mReceivers) &#123;</div><div class="line">            LoadedApk.ReceiverDispatcher rd = <span class="keyword">null</span>;</div><div class="line">            ArrayMap&lt;BroadcastReceiver, LoadedApk.ReceiverDispatcher&gt; map = <span class="keyword">null</span>;</div><div class="line">            <span class="keyword">if</span> (registered) &#123;</div><div class="line">                map = mReceivers.get(context);</div><div class="line">                <span class="keyword">if</span> (map != <span class="keyword">null</span>) &#123;</div><div class="line">                    rd = map.get(r);</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">            <span class="keyword">if</span> (rd == <span class="keyword">null</span>) &#123;</div><div class="line">                rd = <span class="keyword">new</span> ReceiverDispatcher(r, context, handler,</div><div class="line">                        instrumentation, registered);</div><div class="line">                <span class="keyword">if</span> (registered) &#123;</div><div class="line">                    <span class="keyword">if</span> (map == <span class="keyword">null</span>) &#123;</div><div class="line">                        map = <span class="keyword">new</span> ArrayMap&lt;BroadcastReceiver, LoadedApk.ReceiverDispatcher&gt;();</div><div class="line">                        mReceivers.put(context, map);</div><div class="line">                    &#125;</div><div class="line">                    map.put(r, rd);</div><div class="line">                &#125;</div><div class="line">            &#125; <span class="keyword">else</span> &#123;</div><div class="line">                rd.validate(context, handler);</div><div class="line">            &#125;</div><div class="line">            rd.mForgotten = <span class="keyword">false</span>;</div><div class="line">            <span class="keyword">return</span> rd.getIIntentReceiver();</div><div class="line">        &#125;</div><div class="line">    &#125;</div></pre></td></tr></table></figure></p><p>很显然，<code>getReceiverDispatcher</code>方法重新创建了一个<code>ReceiverDispatcher</code>对象并将其保存的<code>InnerReceiver</code>对象作为返回值返回，其中<code>InnerReceiver</code>对象和<code>BroadcastReceiver</code>都是在<code>ReceiverDispatcher</code>的构造方法中被保存起来的。<br>由于注册广播的真正实现过程是在AMS中，因此我们需要看一下AMS的具体实现。AMS的<code>registerReceiver</code>方法看起来很长，其实关键点就只有下面一部分，最终会把远程的<code>InnerReceiver</code>对象以及<code>IntentFilter</code>对象存储起来，这样整个广播的注册过程就完成了，代码如下所示。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> Intent <span class="title">registerReceiver</span><span class="params">(IApplicationThread caller, String callerPackage,IIntentReceiver receiver, IntentFilter filter, String permission, <span class="keyword">int</span> userId)</span> </span>&#123;</div><div class="line">    <span class="comment">// The first sticky in the list is returned directly back to the client.</span></div><div class="line">    Intent sticky = allSticky != <span class="keyword">null</span> ? allSticky.get(<span class="number">0</span>) : <span class="keyword">null</span>;</div><div class="line">    ReceiverList rl = mRegisteredReceivers.get(receiver.asBinder());</div><div class="line">    BroadcastFilter bf = <span class="keyword">new</span> BroadcastFilter(filter, rl, callerPackage,permission, callingUid, userId);</div><div class="line">    rl.add(bf);</div><div class="line">    mReceiverResolver.addFilter(bf);</div><div class="line">    <span class="keyword">return</span> sticky;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><h4 id="广播的发送过程"><a href="#广播的发送过程" class="headerlink" title="广播的发送过程"></a>广播的发送过程</h4><p>当通过send方法来发送广播时，AMS会查找出匹配的广播接收者并将广播发送给它们处理。广播的发送有几种类型:普通广播、有序广播和粘性广播，有序广播和粘性广播与普通广播相比具有不同的特性，但是它们的发送/接收过程的流程是类似的，因此这里只分析普通厂播的实现。广播的发送和接收，其本质是一个过程的两个阶段。这里从广播的发送可以说起，广播的发送仍然开始于<code>ContextWrapper</code>的<code>sendBroadcast</code>方法，之所以不是<code>Context</code>,那是因为<code>Context</code>的<code>sendBroadcast</code>是-一个抽象方法。和广播的注册过程一样，<code>ContextWrapper</code>的<code>sendBroadcast</code>方法仍然什么都不做，只是把事情交给<code>ContextImpl</code>去处理，<code>ContextImpl的sendBroadcast</code>方法的源码如下所示。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">sendBroadcast</span><span class="params">(Intent intent)</span> </span>&#123;</div><div class="line">        warnIfCallingFromSystemProcess();</div><div class="line">        String resolvedType = intent.resolveTypeIfNeeded(getContentResolver());</div><div class="line">        <span class="keyword">try</span> &#123;</div><div class="line">            intent.prepareToLeaveProcess(<span class="keyword">this</span>);</div><div class="line">            ActivityManager.getService().broadcastIntent(</div><div class="line">                    mMainThread.getApplicationThread(), intent, resolvedType, <span class="keyword">null</span>,</div><div class="line">                    Activity.RESULT_OK, <span class="keyword">null</span>, <span class="keyword">null</span>, <span class="keyword">null</span>, AppOpsManager.OP_NONE, <span class="keyword">null</span>, <span class="keyword">false</span>, <span class="keyword">false</span>,</div><div class="line">                    getUserId());</div><div class="line">        &#125; <span class="keyword">catch</span> (RemoteException e) &#123;</div><div class="line">            <span class="keyword">throw</span> e.rethrowFromSystemServer();</div><div class="line">        &#125;</div><div class="line">    &#125;</div></pre></td></tr></table></figure></p><p>从_上面的代码来看，<code>ContextImpl</code>也是几乎什么事都没干，它直接向AMS发起了一个异步请求用于发送广播。因此，下面直接看AMS对广播发送过程的处理，AMS的<code>broadcastIntent</code>方法又调用了<code>broadcastIntentLocked</code>,在这个方法的开始有这么一行：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// By default broadcasts do not go to stopped apps.</span></div><div class="line">intent.addFlags(Intent.FLAG_EXCLUDE_STOPPED_PACKAGES);</div></pre></td></tr></table></figure></p><p>从Android3.1开始广播默认情况下广播不会发送给已经停止的应用。这是因为系统在Android3.1中为Intent添加了两个标记位，分别是<code>FLAG_INCLUDE_STOPPED_PACKAGES</code>和<code>FLAG_EXCLUDE_STOPPED_PACKAGES</code>，用来控制广播是否要对处于停止状态的应用起作用，它们的含义如下所示。<br><strong> FLAG_INCLUDE_STOPPED_PACKAGES </strong><br>表示包含已经停止的应用，这个时候广播会发送给已经停止的应用。<br><strong> FLAG_EXCLUDE_STOPPED_PACKAGES </strong><br>表示不包含已经停止的应用，这个时候广播不会发送给已经停止的应用。</p><p>从Android3.1开始，系统为所有广播默认添加了<code>FLAG_EXCLUDE_STOPPED_PACKAGES</code>标志，这样做是为了防止广播无意间或者在不必要的时候调起已经停止运行的应用。如果的确需要调起未启动的应用，那么只需要为广播的Intent添加<code>FLAG_INCLUDE_STOPPED_PACKAGES</code>标记即可。当<code>FLAG_EXCLUDE_STOPPED_PACKAGES</code>和<code>FLAG_INCLUDE_STOPPED_PACKAGES</code>两种标记位共存时,以<code>FLAG_INCLUDE_STOPPED_PACKAGES</code>为准。这里需要补充一下，一个应用处于停止状态分为两种情形:<br>第一种是应用安装后未运行，<br>第二种是应用被手动或者其他应用强停了。<br>Android3.1中广播的这个特性同样会影响开机广播，从Android3.1开始，处于停止状态的应用同样无法接收到开机广播，而在Android 3.1之前，处于停止状态的应用是可以收到开机广播的。<br>在<code>broadcastIntentLocked</code>的内部，会根据<code>intent-filter</code>查找出匹配的广播接收者并经过一系列的条件过滤，最终会将满足条件的广播接收者添加到<code>BroadcastQueue</code>中，接着<code>BroadcastQueue</code>就会将广播发送给相应的广播接收者，这个过程的源码如下所示。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">if</span> ((receivers != <span class="keyword">null</span> &amp;&amp; receivers.size() &gt; <span class="number">0</span>)</div><div class="line">                || resultTo != <span class="keyword">null</span>) &#123;</div><div class="line">            BroadcastQueue queue = broadcastQueueForIntent(intent);</div><div class="line">            BroadcastRecord r = <span class="keyword">new</span> BroadcastRecord(queue, intent, callerApp,</div><div class="line">                    callerPackage, callingPid, callingUid, resolvedType,</div><div class="line">                    requiredPermissions, appOp, brOptions, receivers, resultTo, resultCode,</div><div class="line">                    resultData, resultExtras, ordered, sticky, <span class="keyword">false</span>, userId);</div><div class="line"></div><div class="line">            <span class="keyword">if</span> (DEBUG_BROADCAST) Slog.v(TAG_BROADCAST, <span class="string">"Enqueueing ordered broadcast "</span> + r</div><div class="line">                    + <span class="string">": prev had "</span> + queue.mOrderedBroadcasts.size());</div><div class="line">            <span class="keyword">if</span> (DEBUG_BROADCAST) Slog.i(TAG_BROADCAST,</div><div class="line">                    <span class="string">"Enqueueing broadcast "</span> + r.intent.getAction());</div><div class="line"></div><div class="line">            <span class="keyword">boolean</span> replaced = replacePending &amp;&amp; queue.replaceOrderedBroadcastLocked(r);</div><div class="line">            <span class="keyword">if</span> (!replaced) &#123;</div><div class="line">                queue.enqueueOrderedBroadcastLocked(r);</div><div class="line">                queue.scheduleBroadcastsLocked();</div><div class="line">            &#125;</div><div class="line">        &#125; <span class="keyword">else</span> &#123;</div><div class="line">            <span class="comment">// There was nobody interested in the broadcast, but we still want to record</span></div><div class="line">            <span class="comment">// that it happened.</span></div><div class="line">            <span class="keyword">if</span> (intent.getComponent() == <span class="keyword">null</span> &amp;&amp; intent.getPackage() == <span class="keyword">null</span></div><div class="line">                    &amp;&amp; (intent.getFlags()&amp;Intent.FLAG_RECEIVER_REGISTERED_ONLY) == <span class="number">0</span>) &#123;</div><div class="line">                <span class="comment">// This was an implicit broadcast... let's record it for posterity.</span></div><div class="line">                addBroadcastStatLocked(intent.getAction(), callerPackage, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>);</div><div class="line">            &#125;</div><div class="line">        &#125;</div></pre></td></tr></table></figure></p><p>将广播添加到<code>BroadCastQueue</code>之后，接着调用了<code>scheduleBroadcastsLocked</code>方法：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">scheduleBroadcastsLocked</span><span class="params">()</span> </span>&#123;</div><div class="line">       <span class="keyword">if</span> (DEBUG_BROADCAST) Slog.v(TAG_BROADCAST, <span class="string">"Schedule broadcasts ["</span></div><div class="line">               + mQueueName + <span class="string">"]: current="</span></div><div class="line">               + mBroadcastsScheduled);</div><div class="line"></div><div class="line">       <span class="keyword">if</span> (mBroadcastsScheduled) &#123;</div><div class="line">           <span class="keyword">return</span>;</div><div class="line">       &#125;</div><div class="line">       mHandler.sendMessage(mHandler.obtainMessage(BROADCAST_INTENT_MSG, <span class="keyword">this</span>));</div><div class="line">       mBroadcastsScheduled = <span class="keyword">true</span>;</div><div class="line">   &#125;</div></pre></td></tr></table></figure></p><p>方法内发送了一个<code>BROADCAST_INTENT_MSG</code>消息，handler接到消息后，调用了<code>processNextBroadcast</code>方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">private</span> <span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">BroadcastHandler</span> <span class="keyword">extends</span> <span class="title">Handler</span> </span>&#123;</div><div class="line">       <span class="function"><span class="keyword">public</span> <span class="title">BroadcastHandler</span><span class="params">(Looper looper)</span> </span>&#123;</div><div class="line">           <span class="keyword">super</span>(looper, <span class="keyword">null</span>, <span class="keyword">true</span>);</div><div class="line">       &#125;</div><div class="line"></div><div class="line">       <span class="meta">@Override</span></div><div class="line">       <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">handleMessage</span><span class="params">(Message msg)</span> </span>&#123;</div><div class="line">           <span class="keyword">switch</span> (msg.what) &#123;</div><div class="line">               <span class="keyword">case</span> BROADCAST_INTENT_MSG: &#123;</div><div class="line">                   <span class="keyword">if</span> (DEBUG_BROADCAST) Slog.v(TAG_BROADCAST, <span class="string">"Received BROADCAST_INTENT_MSG"</span>);</div><div class="line">                   processNextBroadcast(<span class="keyword">true</span>);</div><div class="line">               &#125; <span class="keyword">break</span>;</div><div class="line">               <span class="keyword">case</span> BROADCAST_TIMEOUT_MSG: &#123;</div><div class="line">                   <span class="keyword">synchronized</span> (mService) &#123;</div><div class="line">                       broadcastTimeoutLocked(<span class="keyword">true</span>);</div><div class="line">                   &#125;</div><div class="line">               &#125; <span class="keyword">break</span>;</div><div class="line">               <span class="keyword">case</span> SCHEDULE_TEMP_WHITELIST_MSG: &#123;</div><div class="line">                   DeviceIdleController.LocalService dic = mService.mLocalDeviceIdleController;</div><div class="line">                   <span class="keyword">if</span> (dic != <span class="keyword">null</span>) &#123;</div><div class="line">                       dic.addPowerSaveTempWhitelistAppDirect(UserHandle.getAppId(msg.arg1),msg.arg2, <span class="keyword">true</span>, (String)msg.obj);</div><div class="line">                   &#125;</div><div class="line">               &#125; <span class="keyword">break</span>;</div><div class="line">           &#125;</div><div class="line">       &#125;</div><div class="line">   &#125;</div></pre></td></tr></table></figure><p>收到消息后会调用<code>processNextBroadcast</code>方法，内容如下：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// First, deliver any non-serialized broadcasts right away.</span></div><div class="line">    <span class="keyword">while</span> (mParallelBroadcasts.size() &gt; <span class="number">0</span>) &#123;</div><div class="line">        r = mParallelBroadcasts.remove(<span class="number">0</span>);</div><div class="line">        r.dispatchTime = SystemClock.uptimeMillis();</div><div class="line">        r.dispatchClockTime = System.currentTimeMillis();</div><div class="line"></div><div class="line">        <span class="keyword">if</span> (Trace.isTagEnabled(Trace.TRACE_TAG_ACTIVITY_MANAGER)) &#123;</div><div class="line">            Trace.asyncTraceEnd(Trace.TRACE_TAG_ACTIVITY_MANAGER,</div><div class="line">                createBroadcastTraceTitle(r, BroadcastRecord.DELIVERY_PENDING),</div><div class="line">                System.identityHashCode(r));</div><div class="line">            Trace.asyncTraceBegin(Trace.TRACE_TAG_ACTIVITY_MANAGER,</div><div class="line">                createBroadcastTraceTitle(r, BroadcastRecord.DELIVERY_DELIVERED),</div><div class="line">                System.identityHashCode(r));</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="keyword">final</span> <span class="keyword">int</span> N = r.receivers.size();</div><div class="line">        </div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;N; i++) &#123;</div><div class="line">            Object target = r.receivers.get(i);</div><div class="line">            <span class="keyword">if</span> (DEBUG_BROADCAST)  Slog.v(TAG_BROADCAST,</div><div class="line">                    <span class="string">"Delivering non-ordered on ["</span> + mQueueName + <span class="string">"] to registered "</span></div><div class="line">                    + target + <span class="string">": "</span> + r);</div><div class="line">            deliverToRegisteredReceiverLocked(r, (BroadcastFilter)target, <span class="keyword">false</span>, i);</div><div class="line">        &#125;</div><div class="line">        addBroadcastToHistoryLocked(r);</div><div class="line">       </div><div class="line">    &#125;</div></pre></td></tr></table></figure></p><p>可以看到，无序广播存储在<code>mParallelBroadcasts</code>中，系统会遍历<code>mParallelBroadcasts</code>并将其中的广播发送给它们所有的接收者，具体的发送过程是通过<code>deliverToRegisteredReceiverLocked</code>方法来实现的。<code>deliverToRegisteredReceiverLocked</code>方法负责将一个广播发送给一个特定的接收者，它内部调用了<code>performReceiveLocked</code>方法来完成具体的发送过程:<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">performReceiveLocked(r.callerApp, r.resultTo,<span class="keyword">new</span> Intent(r.intent), r.resultCode,r.resultData, r.resultExtras, <span class="keyword">false</span>, <span class="keyword">false</span>, r.userId);</div></pre></td></tr></table></figure></p><p><code>performReceiveLocked</code>方法的实现如下所示。由于接收广播会调起应用程序，因此app.thread不为null，根据前面的分析我们知道这里的<code>app.thread</code>仍然指<code>ApplicationThread</code>。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">performReceiveLocked</span><span class="params">(ProcessRecord app, IIntentReceiver receiver,Intent intent, <span class="keyword">int</span> resultCode, String data, Bundle extras,<span class="keyword">boolean</span> ordered, <span class="keyword">boolean</span> sticky, <span class="keyword">int</span> sendingUser)</span> <span class="keyword">throws</span> RemoteException </span>&#123;</div><div class="line">            </div><div class="line">            <span class="comment">// Send the intent to the receiver asynchronously using one-way binder calls.</span></div><div class="line">    <span class="keyword">if</span> (app != <span class="keyword">null</span>) &#123;</div><div class="line">        <span class="keyword">if</span> (app.thread != <span class="keyword">null</span>) &#123;</div><div class="line">            <span class="comment">// If we have an app thread, do the call through that so it is</span></div><div class="line">            <span class="comment">// correctly ordered with other one-way calls.</span></div><div class="line">            <span class="keyword">try</span> &#123;</div><div class="line">                app.thread.scheduleRegisteredReceiver(receiver, intent, resultCode,</div><div class="line">                        data, extras, ordered, sticky, sendingUser, app.repProcState);</div><div class="line">            <span class="comment">// <span class="doctag">TODO:</span> Uncomment this when (b/28322359) is fixed and we aren't getting</span></div><div class="line">            <span class="comment">// DeadObjectException when the process isn't actually dead.</span></div><div class="line">            <span class="comment">//&#125; catch (DeadObjectException ex) &#123;</span></div><div class="line">            <span class="comment">// Failed to call into the process.  It's dying so just let it die and move on.</span></div><div class="line">            <span class="comment">//    throw ex;</span></div><div class="line">            &#125; <span class="keyword">catch</span> (RemoteException ex) &#123;</div><div class="line">                <span class="comment">// Failed to call into the process. It's either dying or wedged. Kill it gently.</span></div><div class="line">                <span class="keyword">synchronized</span> (mService) &#123;</div><div class="line">                    Slog.w(TAG, <span class="string">"Can't deliver broadcast to "</span> + app.processName</div><div class="line">                            + <span class="string">" (pid "</span> + app.pid + <span class="string">"). Crashing it."</span>);</div><div class="line">                    app.scheduleCrash(<span class="string">"can't deliver broadcast"</span>);</div><div class="line">                &#125;</div><div class="line">                <span class="keyword">throw</span> ex;</div><div class="line">            &#125;</div><div class="line">        &#125; <span class="keyword">else</span> &#123;</div><div class="line">            <span class="comment">// Application has died. Receiver doesn't exist.</span></div><div class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> RemoteException(<span class="string">"app.thread must not be null"</span>);</div><div class="line">        &#125;</div><div class="line">    &#125; <span class="keyword">else</span> &#123;</div><div class="line">        receiver.performReceive(intent, resultCode, data, extras, ordered,</div><div class="line">                sticky, sendingUser);</div><div class="line">    &#125;</div><div class="line">            </div><div class="line">&#125;</div></pre></td></tr></table></figure></p><p><code>ApplicationThread</code>的<code>scheduleRegisteredReceiver</code>的实现比较简单，它通过<code>InnerReceiver</code>来实现广播的接收:<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// This function exists to make sure all receiver dispatching is</span></div><div class="line"><span class="comment">// correctly ordered, since these are one-way calls and the binder driver</span></div><div class="line"><span class="comment">// applies transaction ordering per object for such calls.</span></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">scheduleRegisteredReceiver</span><span class="params">(IIntentReceiver receiver, Intent intent,</span></span></div><div class="line">        <span class="keyword">int</span> resultCode, String dataStr, Bundle extras, <span class="keyword">boolean</span> ordered,</div><div class="line">        <span class="keyword">boolean</span> sticky, <span class="keyword">int</span> sendingUser, <span class="keyword">int</span> processState) <span class="keyword">throws</span> RemoteException &#123;</div><div class="line">    updateProcessState(processState, <span class="keyword">false</span>);</div><div class="line">    receiver.performReceive(intent, resultCode, dataStr, extras, ordered,</div><div class="line">            sticky, sendingUser);</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><p><code>InnerReceiver</code>的<code>performReceive</code>方法会调用<code>LoadedApk.ReceiverDispatcher</code>的<code>performReceive</code>方法，<code>LoadedApk.ReceiverDispatcher</code>的<code>performReceive</code>方法的实现如下所示:<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">performReceive</span><span class="params">(Intent intent, <span class="keyword">int</span> resultCode, String data,Bundle extras, <span class="keyword">boolean</span> ordered, <span class="keyword">boolean</span> sticky, <span class="keyword">int</span> sendingUser)</span> </span>&#123;</div><div class="line">    <span class="keyword">final</span> Args args = <span class="keyword">new</span> Args(intent, resultCode, data, extras, ordered,</div><div class="line">            sticky, sendingUser);</div><div class="line">    <span class="keyword">if</span> (intent == <span class="keyword">null</span>) &#123;</div><div class="line">        Log.wtf(TAG, <span class="string">"Null intent received"</span>);</div><div class="line">    &#125; <span class="keyword">else</span> &#123;</div><div class="line">        <span class="keyword">if</span> (ActivityThread.DEBUG_BROADCAST) &#123;</div><div class="line">            <span class="keyword">int</span> seq = intent.getIntExtra(<span class="string">"seq"</span>, -<span class="number">1</span>);</div><div class="line">            Slog.i(ActivityThread.TAG, <span class="string">"Enqueueing broadcast "</span> + intent.getAction()</div><div class="line">                    + <span class="string">" seq="</span> + seq + <span class="string">" to "</span> + mReceiver);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">if</span> (intent == <span class="keyword">null</span> || !mActivityThread.post(args.getRunnable())) &#123;</div><div class="line">        <span class="keyword">if</span> (mRegistered &amp;&amp; ordered) &#123;</div><div class="line">            IActivityManager mgr = ActivityManager.getService();</div><div class="line">            <span class="keyword">if</span> (ActivityThread.DEBUG_BROADCAST) Slog.i(ActivityThread.TAG,</div><div class="line">                    <span class="string">"Finishing sync broadcast to "</span> + mReceiver);</div><div class="line">            args.sendFinished(mgr);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><p>在上面的代码中，会创建一个Args对象并通过mActivityThread的post方法来执行Args中的逻辑，而Args实现了Runnable接口。mActivityThread是一个Handler，它其实就是ActivityThread中的mH，mH的类型是ActivityThread的内部类H。在Args的run方法中有如下几行代码:<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">final</span> BroadcastReceiver receiver = mReceiver;</div><div class="line"><span class="keyword">final</span> <span class="keyword">boolean</span> ordered = mOrdered;</div><div class="line">receiver.setPendingResult(<span class="keyword">this</span>);</div><div class="line">receiver.onReceive(mContext, intent);</div></pre></td></tr></table></figure></p><p>这个时候BroadcastReceiver的onReceive方法被执行了，也就是说应用已经接收到广播了，同时onReceive方法是在广播接收者的主线程中被调用的。</p><hr><p>以上</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;面试APUS的时候被问到广播：&lt;br&gt;面试官：聊一下广播吧。&lt;br&gt;我：广播啊，四大组件之一，自己创建个类继承自&lt;code&gt;BroadcastReceiver&lt;/code&gt;，重写&lt;code&gt;onReceive()&lt;/code&gt;方法，需要注意的是不要在这个方法中做耗时操作。注册的话可以在&lt;code&gt;AndroidManifest&lt;/code&gt;文件中静态注册，也可以在代码中动态注册。都做完了之后就可以调用sendBroadCast()方法发送广播了。&lt;br&gt;面试官：了解广播注册过程么？&lt;br&gt;我：哈~！这个没怎么看过。&lt;br&gt;面试官：了解怎么接收到的广播么？&lt;br&gt;我：没有。。。。&lt;br&gt;
    
    </summary>
    
    
      <category term="Android" scheme="http://blog.huangyuanlove.com/tags/Android/"/>
    
  </entry>
  
  <entry>
    <title>View绘制过程</title>
    <link href="http://blog.huangyuanlove.com/2018/07/29/View%E7%BB%98%E5%88%B6%E8%BF%87%E7%A8%8B/"/>
    <id>http://blog.huangyuanlove.com/2018/07/29/View绘制过程/</id>
    <published>2018-07-29T14:35:46.000Z</published>
    <updated>2018-08-04T05:17:10.145Z</updated>
    
    <content type="html"><![CDATA[<p>抄的《Android开发艺术探索》第四章<br><code>ViewRoot</code>对应于<code>ViewRootImpl</code>类，它是连接<code>WindowManager</code>和<code>DecorView</code>的纽带，<code>View</code>的三大流程均是通过<code>ViewRoot</code>来完成的。在<code>ActivityThread</code>中，当<code>Activity</code>对象被创建完毕后，会将<code>DecorView</code>添加到<code>Window</code>中，同时会创建<code>ViewRootImpl</code>对象，并将<code>ViewRootImpl</code>对象和<code>DecorView</code>建立关联，<code>View</code>的绘制流程是从<code>ViewRoot</code>的<code>performTraversals</code>方法开始的，它经过<code>measure</code>、<code>layout</code>和<code>draw</code>三个过程才能最终将一个<code>View</code>绘制出来，其中<code>measure</code>用来测量View的宽和高，<code>layout</code>用来确定View在父容器中的放置位置，而<code>draw</code>则负责将View绘制在屏幕上。</p><a id="more"></a><p><code>performTraversals</code>会依次调用<code>performMeasure</code>、p<code>erformLayout</code>和<code>performDraw</code>三个方法，这三个方法分别完成顶级<code>View</code>的<code>measure</code>、<code>layout</code>和<code>draw</code>这三大流程，其中在<code>performMeasure</code>中会调用<code>measure</code>方法，在<code>measure</code>方法中又会调用<code>onMeasure</code>方法，在<code>onMeasure</code>方法中则会对所有的子元素进行<code>measure</code>过程，这个时候<code>measure</code>流程就从父容器传递到子元素中了，这样就完成了一次<code>measure</code>过程。接着子元素会重复父容器的<code>measure</code>过程，如此反复就完成了整个<code>View</code>树的遍历。同理，<code>performLayout</code>和<code>performDraw</code>的传递流程和<code>performMeasure</code>是类似的，唯一不同的是，<code>performDraw</code>的传递过程是在<code>draw</code>方法中通过<code>dispatchDraw</code>来实现的，不过这并没有本质区别。</p><p><code>measure</code>过程决定了<code>View</code>的宽/高，<code>Measure</code>完成以后，可以通过<code>getMeasuredWidth</code>和<code>getMeasuredHeight</code>方法来获取到<code>View</code>测量后的宽/高，在几乎所有的情况下它都等同于<code>View</code>最终的宽/高，但是特殊情况除外，这点在本章后面会进行说明。<code>Layout</code>过程决定了<code>View</code>的四个顶点的坐标和实际的View的宽/高，完成以后，可以通过<code>getTop</code>、<code>getBottom</code>、<code>getLeft</code>和<code>getRight</code>来拿到<code>View</code>的四个顶点的位置，并可以通过<code>getWidth</code>和<code>getHeight</code>方法来拿到<code>View</code>的最终宽/高。<code>Draw</code>过程则决定了<code>View</code>的显示，只有<code>draw</code>方法完成以后<code>View</code>的内容才能呈现在屏幕上。</p><p><code>DecorView</code>作为顶级<code>View</code>，一般情况下它内部会包含一个竖直方向的<code>LinearLayout</code>，在这个<code>LinearLayout</code>里面有上下两个部分（具体情况和Android版本及主题有关），上面是标题栏，下面是内容栏。在<code>Activity</code>中我们通过<code>setContentView</code>所设置的布局文件其实就是被加到内容栏之中的，而内容栏的id是<code>content</code>，因此可以理解为Activity指定布局的方法不叫setview而叫<code>setContentView</code>，因为我们的布局的确加到了<code>id</code>为<code>content</code>的<code>FrameLayout</code>中。如何得到<code>content</code>呢？可以这样：<code>ViewGroup  content=  findViewById(R.android.id.content)</code>。如何得到我们设置的<code>View</code>呢？可以这样：<code>content.getChildAt(0)</code>。同时，通过源码我们可以知道，<code>DecorView</code>其实是一个<code>FrameLayout</code>，<code>View</code>层的事件都先经过<code>DecorView</code>，然后才传递给我们的View。</p><h4 id="MeasureSpec"><a href="#MeasureSpec" class="headerlink" title="MeasureSpec"></a>MeasureSpec</h4><p><code>MeasureSpec</code>在很大程度上决定了一个View的尺寸规格，之所以说是很大程度上是因为这个过程还受父容器的影响，因为父容器影响View的<code>MeasureSpec</code>的创建过程。在测量过程中，系统会将View的<code>LayoutParams</code>根据父容器所施加的规则转换成对应的<code>MeasureSpec</code>，然后再根据这个<code>measureSpec</code>来测量出<code>View</code>的宽/高。这里的宽/高是测量宽/高，不一定等于<code>View</code>的最终宽/高。<br><code>MeasureSpec</code>代表一个32位int值，高2位代表<code>SpecMode</code>，低30位代表<code>SpecSize</code>，<code>SpecMode</code>是指测量模式，而<code>SpecSize</code>是指在某种测量模式下的规格大小。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> MODE_SHIFT = <span class="number">30</span>;</div><div class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> MODE_MASK = <span class="number">0x3</span> &lt;&lt; MODE_SHIFT;</div><div class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> UNSPECIFIED = <span class="number">0</span> &lt;&lt; MODE_SHIFT;</div><div class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> EXACTLY = <span class="number">1</span> &lt;&lt; MODE_SHIFT;</div><div class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> AT_MOST = <span class="number">2</span> &lt;&lt; MODE_SHIFT;</div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">makeMeasureSpec</span><span class="params">(<span class="keyword">int</span> size,<span class="keyword">int</span> mode)</span> </span>&#123;</div><div class="line">    <span class="keyword">if</span> (sUseBrokenMakeMeasureSpec) &#123;</div><div class="line">        <span class="keyword">return</span> size + mode;</div><div class="line">    &#125; <span class="keyword">else</span> &#123;</div><div class="line">        <span class="keyword">return</span> (size &amp; ~MODE_MASK) | (mode &amp; MODE_MASK);</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">getMode</span><span class="params">(<span class="keyword">int</span> measureSpec)</span> </span>&#123;</div><div class="line">    <span class="keyword">return</span> (measureSpec &amp; MODE_MASK);</div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">getSize</span><span class="params">(<span class="keyword">int</span> measureSpec)</span> </span>&#123;</div><div class="line">    <span class="keyword">return</span> (measureSpec &amp; ~MODE_MASK);</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><p><code>MeasureSpec</code>通过将<code>SpecMode</code>和<code>SpecSize</code>打包成一个int值来避免过多的对象内存分配，为了方便操作，其提供了打包和解包方法。<code>SpecMode</code>和<code>SpecSize</code>也是一个int值，一组<code>SpecMode</code>和<code>SpecSize</code>可以打包为一个<code>MeasureSpec</code>，而一个<code>MeasureSpec</code>可以通过解包的形式来得出其原始的<code>SpecMode</code>和<code>SpecSize</code>，需要注意的是这里提到的<code>MeasureSpec</code>是指<code>MeasureSpec</code>所代表的int值，而并非<code>MeasureSpec</code>本身。<br>SpecMode有三类，每一类都表示特殊的含义，如下所示。<br><strong> UNSPECIFIED </strong><br>父容器不对View有任何限制，要多大给多大，这种情况一般用于系统内部，表示一种测量的状态。<br><strong> EXACTLY </strong><br>父容器已经检测出View所需要的精确大小，这个时候View的最终大小就是SpecSize所指定的值。它对应于LayoutParams中的match_parent和具体的数值这两种模式。<br><strong> AT_MOST </strong><br>父容器指定了一个可用大小即SpecSize，View的大小不能大于这个值，具体是什么值要看不同View的具体实现。它对应于LayoutParams中的wrap_content。</p><h6 id="MeasureSpec和LayoutParams"><a href="#MeasureSpec和LayoutParams" class="headerlink" title="MeasureSpec和LayoutParams"></a>MeasureSpec和LayoutParams</h6><p>在View测量的时候，系统会将<code>LayoutParams</code>在父容器的约束下转换成对应的<code>MeasureSpec</code>，然后再根据这个<code>MeasureSpec</code>来确定View测量后的宽/高。需要注意的是，<code>MeasureSpec</code>不是唯一由<code>LayoutParams</code>决定的，<code>LayoutParams</code>需要和父容器一起才能决定<code>View</code>的<code>MeasureSpec</code>，从而进一步决定View的宽/高。另外，对于<code>顶级View</code>（即DecorView）和<code>普通View</code>来说，<code>MeasureSpec</code>的转换过程略有不同。对于<code>DecorView</code>，其<code>MeasureSpec</code>由窗口的尺寸和其自身的<code>LayoutParams</code>来共同确定；对于普通View，其<code>MeasureSpec</code>由父容器的<code>MeasureSpec</code>和自身的<code>LayoutParams</code>来共同决定，<code>MeasureSpec</code>一旦确定后，<code>onMeasure</code>中就可以确定<code>View</code>的测量宽/高。<br>对于<code>DecorView</code>来说，在<code>ViewRootImpl</code>中的<code>measureHierarchy</code>方法中有如下一段代码，它展示了<code>DecorView</code>的<code>MeasureSpec</code>的创建过程，其中<code>desiredWindowWidth</code>和<code>desiredWindowHeight</code>是屏幕的尺寸:<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line">childWidthMeasureSpec = getRootMeasureSpec(desiredWindowWidth,lp.width);</div><div class="line">childHeightMeasureSpec = getRootMeasureSpec(desiredWindowHeight,lp.height);</div><div class="line">performMeasure(childWidthMeasureSpec,childHeightMeasureSpec);</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">getRootMeasureSpec</span><span class="params">(<span class="keyword">int</span> windowSize,<span class="keyword">int</span> rootDimension)</span> </span>&#123;</div><div class="line">    <span class="keyword">int</span> measureSpec;</div><div class="line">    <span class="keyword">switch</span> (rootDimension) &#123;</div><div class="line">        <span class="keyword">case</span> ViewGroup.LayoutParams.MATCH_PARENT:</div><div class="line">            <span class="comment">// Window can't resize. Force root view to be windowSize.</span></div><div class="line">            measureSpec = MeasureSpec.makeMeasureSpec(windowSize,MeasureSpec.EXACTLY);</div><div class="line">            <span class="keyword">break</span>;</div><div class="line">        <span class="keyword">case</span> ViewGroup.LayoutParams.WRAP_CONTENT:</div><div class="line">            <span class="comment">// Window can resize. Set max size for root view.</span></div><div class="line">            measureSpec = MeasureSpec.makeMeasureSpec(windowSize,MeasureSpec.AT_MOST);</div><div class="line">            <span class="keyword">break</span>;</div><div class="line">        <span class="keyword">default</span>:</div><div class="line">            <span class="comment">// Window wants to be an exact size. Force root view to be that size.</span></div><div class="line">            measureSpec = MeasureSpec.makeMeasureSpec(rootDimension,Measure-Spec.EXACTLY);</div><div class="line">            <span class="keyword">break</span>;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> measureSpec;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><p>通过上述代码，<code>DecorView</code>的<code>MeasureSpec</code>的产生过程就很明确了，具体来说其遵守如下规则，根据它的<code>LayoutParams</code>中的宽/高的参数来划分。</p><ul><li>LayoutParams.MATCH_PARENT：精确模式，大小就是窗口的大小；</li><li>LayoutParams.WRAP_CONTENT：最大模式，大小不定，但是不能超过窗口的大小；</li><li>固定大小（比如100dp）：精确模式，大小为LayoutParams中指定的大小。<br>对于普通<code>View</code>来说，这里是指我们布局中的<code>View</code>，<code>View</code>的<code>measure</code>过程由<code>ViewGroup</code>传递而来，先看一下<code>ViewGroup</code>的<code>measureChildWithMargins</code>方法：<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">measureChildWithMargins</span><span class="params">(View child,<span class="keyword">int</span> parentWidthMeasureSpec,<span class="keyword">int</span> widthUsed,<span class="keyword">int</span> parentHeightMeasureSpec,<span class="keyword">int</span> heightUsed)</span> </span>&#123;</div><div class="line">    <span class="keyword">final</span> MarginLayoutParams lp = (MarginLayoutParams) child.getLayout-Params();</div><div class="line">    <span class="keyword">final</span> <span class="keyword">int</span> childWidthMeasureSpec = getChildMeasureSpec(parentWidthMeasureSpec,mPaddingLeft + mPaddingRight + lp.leftMargin + lp.rightMargin+ widthUsed,lp.width);</div><div class="line">    <span class="keyword">final</span> <span class="keyword">int</span> childHeightMeasureSpec = getChildMeasureSpec(parentHeight-MeasureSpec,mPaddingTop + mPaddingBottom + lp.topMargin + lp.bottomMargin+ heightUsed,lp.height);</div><div class="line">    child.measure(childWidthMeasureSpec,childHeightMeasureSpec);</div><div class="line">&#125;</div></pre></td></tr></table></figure></li></ul><p>上述方法会对子元素进行<code>measure</code>，在调用子元素的<code>measure</code>方法之前会先通过<code>getChildMeasureSpec</code>方法来得到子元素的<code>MeasureSpec</code>。从代码来看，很显然，子元素的<code>MeasureSpec</code>的创建与父容器的<code>MeasureSpec</code>和子元素本身的<code>LayoutParam</code>s有关，此外还和<code>View</code>的<code>margin</code>及<code>padding</code>有关，具体情况可以看一下<code>ViewGroup</code>的<code>getChildMeasureSpec</code>方法，如下所示:<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">getChildMeasureSpec</span><span class="params">(<span class="keyword">int</span> spec,<span class="keyword">int</span> padding,<span class="keyword">int</span> child-Dimension)</span> </span>&#123;</div><div class="line">    <span class="keyword">int</span> specMode = MeasureSpec.getMode(spec);</div><div class="line">    <span class="keyword">int</span> specSize = MeasureSpec.getSize(spec);</div><div class="line">    <span class="keyword">int</span> size = Math.max(<span class="number">0</span>,specSize -padding);</div><div class="line">    <span class="keyword">int</span> resultSize = <span class="number">0</span>;</div><div class="line">    <span class="keyword">int</span> resultMode = <span class="number">0</span>;</div><div class="line">    <span class="keyword">switch</span> (specMode) &#123;</div><div class="line">        <span class="comment">// Parent has imposed an exact size on us</span></div><div class="line">        <span class="keyword">case</span> MeasureSpec.EXACTLY:</div><div class="line">            <span class="keyword">if</span> (childDimension =&gt; <span class="number">0</span>) &#123;</div><div class="line">                resultSize = childDimension;</div><div class="line">                resultMode = MeasureSpec.EXACTLY;</div><div class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (childDimension == LayoutParams.MATCH_PARENT) &#123;</div><div class="line">                <span class="comment">// Child wants to be our size. So be it.</span></div><div class="line">                resultSize = size;</div><div class="line">                resultMode = MeasureSpec.EXACTLY;</div><div class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (childDimension == LayoutParams.WRAP_CONTENT) &#123;</div><div class="line">                <span class="comment">// Child wants to determine its own size. It can't be</span></div><div class="line">                <span class="comment">// bigger than us.</span></div><div class="line">                resultSize = size;</div><div class="line">                resultMode = MeasureSpec.AT_MOST;</div><div class="line">            &#125;</div><div class="line">            <span class="keyword">break</span>;</div><div class="line">        <span class="comment">// Parent has imposed a maximum size on us</span></div><div class="line">        <span class="keyword">case</span> MeasureSpec.AT_MOST:</div><div class="line">            <span class="keyword">if</span> (childDimension =&gt; <span class="number">0</span>) &#123;</div><div class="line">                <span class="comment">// Child wants a specific size... so be it</span></div><div class="line">                resultSize = childDimension;</div><div class="line">                resultMode = MeasureSpec.EXACTLY;</div><div class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (childDimension == LayoutParams.MATCH_PARENT) &#123;</div><div class="line">                <span class="comment">// Child wants to be our size,but our size is not fixed.</span></div><div class="line">                <span class="comment">// Constrain child to not be bigger than us.</span></div><div class="line">                resultSize = size;</div><div class="line">                resultMode = MeasureSpec.AT_MOST;</div><div class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (childDimension == LayoutParams.WRAP_CONTENT) &#123;</div><div class="line">                <span class="comment">// Child wants to determine its own size. It can't be</span></div><div class="line">                <span class="comment">// bigger than us.</span></div><div class="line">                resultSize = size;</div><div class="line">                resultMode = MeasureSpec.AT_MOST;</div><div class="line">            &#125;</div><div class="line">            <span class="keyword">break</span>;</div><div class="line">        <span class="comment">// Parent asked to see how big we want to be</span></div><div class="line">        <span class="keyword">case</span> MeasureSpec.UNSPECIFIED:</div><div class="line">            <span class="keyword">if</span> (childDimension =&gt; <span class="number">0</span>) &#123;</div><div class="line">                <span class="comment">// Child wants a specific size... let him have it</span></div><div class="line">                resultSize = childDimension;</div><div class="line">                resultMode = MeasureSpec.EXACTLY;</div><div class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (childDimension == LayoutParams.MATCH_PARENT) &#123;</div><div class="line">                <span class="comment">// Child wants to be our size... find out how big it should</span></div><div class="line">                <span class="comment">// be</span></div><div class="line">                resultSize = <span class="number">0</span>;</div><div class="line">                resultMode = MeasureSpec.UNSPECIFIED;</div><div class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (childDimension == LayoutParams.WRAP_CONTENT) &#123;</div><div class="line">                <span class="comment">// Child wants to determine its own size.... find out how</span></div><div class="line">                <span class="comment">// big it should be</span></div><div class="line">                resultSize = <span class="number">0</span>;</div><div class="line">                resultMode = MeasureSpec.UNSPECIFIED;</div><div class="line">            &#125;</div><div class="line">            <span class="keyword">break</span>;</div><div class="line">        &#125;</div><div class="line">    <span class="keyword">return</span> MeasureSpec.makeMeasureSpec(resultSize,resultMode);</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><p>它的主要作用是根据父容器的<code>MeasureSpec</code>同时结合View本身的<code>LayoutParams</code>来确定子元素的<code>MeasureSpec</code>，参数中的<code>padding</code>是指父容器中已占用的空间大小，因此子元素可用的大小为父容器的尺寸减去<code>padding</code>，具体代码如下所示:<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">int</span> specSize = MeasureSpec.getSize(spec);</div><div class="line"><span class="keyword">int</span> size = Math.max(<span class="number">0</span>,specSize -padding);</div></pre></td></tr></table></figure></p><p>这里简单说一下，当View采用固定宽/高的时候，不管父容器的<code>MeasureSpec</code>是什么，<code>View</code>的<code>MeasureSpec</code>都是精确模式并且其大小遵循<code>Layoutparams</code>中的大小。当<code>View</code>的宽/高是<code>match_parent</code>时，如果父容器的模式是精准模式，那么<code>View</code>也是精准模式并且其大小是父容器的剩余空间；如果父容器是最大模式，那么<code>View</code>也是最大模式并且其大小不会超过父容器的剩余空间。当<code>View</code>的宽/高是<code>wrap_content</code>时，不管父容器的模式是精准还是最大化，<code>View</code>的模式总是最大化并且大小不能超过父容器的剩余空间。在我们的分析中漏掉了<code>UNSPECIFIED</code>模式，那是因为这个模式主要用于系统内部多次Measure的情形，一般来说，我们不需要关注此模式。</p><h4 id="View的工作流程"><a href="#View的工作流程" class="headerlink" title="View的工作流程"></a>View的工作流程</h4><h5 id="measure过程"><a href="#measure过程" class="headerlink" title="measure过程"></a>measure过程</h5><p>measure过程要分情况来看，如果只是一个原始的<code>View</code>，那么通过<code>measure</code>方法就完成了其测量过程，如果是一个<code>ViewGroup</code>，除了完成自己的测量过程外，还会遍历去调用所有子元素的<code>measure</code>方法，各个子元素再递归去执行这个流程。<br><strong> View的measure过程 </strong><br><code>View</code>的<code>measure</code>过程由其<code>measure</code>方法来完成，<code>measure</code>方法是一个<code>final</code>类型的方法，这意味着子类不能重写此方法，在<code>View</code>的<code>measure</code>方法中会去调用<code>View</code>的<code>onMeasure</code>方法，因此只需要看<code>onMeasure</code>的实现即可：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onMeasure</span><span class="params">(<span class="keyword">int</span> widthMeasureSpec,<span class="keyword">int</span> heightMeasureSpec)</span> </span>&#123;</div><div class="line">    setMeasuredDimension(getDefaultSize(getSuggestedMinimumWidth(),widthMeasureSpec),getDefaultSize(getSuggestedMinimumHeight(),heightMeasureSpec));</div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">getDefaultSize</span><span class="params">(<span class="keyword">int</span> size,<span class="keyword">int</span> measureSpec)</span> </span>&#123;</div><div class="line">    <span class="keyword">int</span> result = size;</div><div class="line">    <span class="keyword">int</span> specMode = MeasureSpec.getMode(measureSpec);</div><div class="line">    <span class="keyword">int</span> specSize = MeasureSpec.getSize(measureSpec);</div><div class="line">    <span class="keyword">switch</span> (specMode) &#123;</div><div class="line">        <span class="keyword">case</span> MeasureSpec.UNSPECIFIED:</div><div class="line">            result = size;</div><div class="line">        <span class="keyword">break</span>;</div><div class="line">        <span class="keyword">case</span> MeasureSpec.AT_MOST:</div><div class="line">        <span class="keyword">case</span> MeasureSpec.EXACTLY:</div><div class="line">            result = specSize;</div><div class="line">        <span class="keyword">break</span>;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> result;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><p>可以看出，<code>getDefaultSize</code>这个方法的逻辑很简单，对于我们来说，我们只需要看<code>AT_MOST</code>和<code>EXACTLY</code>这两种情况。简单地理解，其实<code>getDefaultSize</code>返回的大小就是<code>measureSpec</code>中的<code>specSize</code>，而这个<code>specSize</code>就是<code>View</code>测量后的大小，这里多次提到测量后的大小，是因为<code>View</code>最终的大小是在<code>layout</code>阶段确定的，所以这里必须要加以区分，但是几乎所有情况下<code>View</code>的测量大小和最终大小是相等的。<br>至于<code>UNSPECIFIED</code>这种情况，一般用于系统内部的测量过程，在这种情况下，<code>View</code>的大小为<code>getDefaultSize</code>的第一个参数<code>size</code>，即宽/高分别为<code>getSuggestedMinimumWidth</code>和<code>getSuggestedMinimumHeight</code>这两个方法的返回值，看一下它们的源码:<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">int</span> <span class="title">getSuggestedMinimumWidth</span><span class="params">()</span> </span>&#123;</div><div class="line">    <span class="keyword">return</span> (mBackground == <span class="keyword">null</span>) ? mMinWidth : max(mMinWidth,mBackground.getMinimumWidth());</div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">int</span> <span class="title">getSuggestedMinimumHeight</span><span class="params">()</span> </span>&#123;</div><div class="line">    <span class="keyword">return</span> (mBackground == <span class="keyword">null</span>) ? mMinHeight : max(mMinHeight,mBackground.getMinimumHeight());</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><p>这里只分析<code>getSuggestedMinimumWidth</code>方法的实现，<code>getSuggestedMinimumHeight</code>和它的实现原理是一样的。从<code>getSuggestedMinimumWidth</code>的代码可以看出，如果<code>View</code>没有设置背景，那么<code>View</code>的宽度为<code>mMinWidth</code>，而<code>mMinWidth</code>对应于<code>android:minWidth</code>这个属性所指定的值，因此<code>View</code>的宽度即为<code>android:minWidth</code>属性所指定的值。这个属性如果不指定，那么<code>mMinWidth</code>则默认为0；如果<code>View</code>指定了背景，则<code>View</code>的宽度为<code>max(mMinWidth,mBackground.getMinimumWidth())</code>。<code>mMinWidth</code>的含义我们已经知道了，那么<code>mBackground.getMinimumWidth()</code>是什么呢？我们看一下<code>Drawable</code>的<code>getMinimumWidth</code>方法，如下所示:<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getMinimumWidth</span><span class="params">()</span> </span>&#123;</div><div class="line">    <span class="keyword">final</span> <span class="keyword">int</span> intrinsicWidth = getIntrinsicWidth();</div><div class="line">    <span class="keyword">return</span> intrinsicWidth &gt; <span class="number">0</span> ? intrinsicWidth : <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><p>可以看出，<code>getMinimumWidth</code>返回的就是<code>Drawable</code>的原始宽度，前提是这个<code>Drawable</code>有原始宽度，否则就返回0。<br>这里再总结一下<code>getSuggestedMinimumWidth</code>的逻辑：如果<code>View</code>没有设置背景，那么返回<code>android:minWidth</code>这个属性所指定的值，这个值可以为0；如果<code>View</code>设置了背景，则返回<code>android:minWidth</code>和背景的最小宽度这两者中的最大值，<code>getSuggestedMinimumWidth</code>和<code>getSuggestedMinimumHeight</code>的返回值就是<code>View</code>在<code>UNSPECIFIED</code>情况下的测量宽/高。<br>从<code>getDefaultSize</code>方法的实现来看，<code>View</code>的宽/高由<code>specSize</code>决定，所以我们可以得出如下结论：直接继承<code>View</code>的自定义控件需要重写<code>onMeasure</code>方法并设置<code>wrap_content</code>时的自身大小，否则在布局中使用<code>wrap_content</code>就相当于使用<code>match_parent</code>。<br>从上述代码中我们知道，如果<code>View</code>在布局中使用<code>wrap_content</code>，那么它的<code>specMode</code>是<code>AT_MOST</code>模式，在这种模式下，它的宽/高等于<code>specSize</code>；这种情况下<code>View</code>的<code>specSize</code>是p<code>arentSize</code>，而<code>parentSize</code>是父容器中目前可以使用的大小，也就是父容器当前剩余的空间大小。很显然，<code>View</code>的宽/高就等于父容器当前剩余的空间大小，这种效果和在布局中使用<code>match_parent</code>完全一致。如何解决这个问题呢？也很简单，代码如下所示：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onMeasure</span><span class="params">(<span class="keyword">int</span> widthMeasureSpec,<span class="keyword">int</span> heightMeasureSpec)</span> </span>&#123;</div><div class="line">    <span class="keyword">super</span>.onMeasure(widthMeasureSpec,heightMeasureSpec);</div><div class="line">    <span class="keyword">int</span> widthSpecMode = MeasureSpec.getMode(widthMeasureSpec);</div><div class="line">    <span class="keyword">int</span> widthSpecSize = MeasureSpec.getSize(widthMeasureSpec);</div><div class="line">    <span class="keyword">int</span> heightSpecMode = MeasureSpec.getMode(heightMeasureSpec);</div><div class="line">    <span class="keyword">int</span> heightSpecSize = MeasureSpec.getSize(heightMeasureSpec);</div><div class="line">    <span class="keyword">if</span> (widthSpecMode == MeasureSpec.AT_MOST &amp;&amp; heightSpecMode == MeasureSpec.AT_MOST) &#123;</div><div class="line">        setMeasuredDimension(mWidth,mHeight);</div><div class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (widthSpecMode == MeasureSpec.AT_MOST) &#123;</div><div class="line">        setMeasuredDimension(mWidth,heightSpecSize);</div><div class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (heightSpecMode == MeasureSpec.AT_MOST) &#123;</div><div class="line">        setMeasuredDimension(widthSpecSize,mHeight);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><p>在上面的代码中，我们只需要给<code>View</code>指定一个默认的内部宽/高（<code>mWidth</code>和<code>mHeight</code>），并在<code>wrap_content</code>时设置此宽/高即可。对于非<code>wrap_content</code>情形，我们沿用系统的测量值即可，至于这个默认的内部宽/高的大小如何指定，这个没有固定的依据，根据需要灵活指定即可。如果查看<code>TextView</code>、<code>ImageView</code>等的源码就可以知道，针对<code>wrap_content</code>情形，它们的<code>onMeasure</code>方法均做了特殊处理。</p><p><strong> ViewGroup的measure过程 </strong><br>对于<code>ViewGroup</code>来说，除了完成自己的<code>measure</code>过程以外，还会遍历去调用所有子元素的<code>measure</code>方法，各个子元素再递归去执行这个过程。和<code>View</code>不同的是，<code>ViewGroup</code>是一个抽象类，因此它没有重写<code>View</code>的<code>onMeasure</code>方法，但是它提供了一个叫<code>measureChildren</code>的方法，如下所示。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">measureChildren</span><span class="params">(<span class="keyword">int</span> widthMeasureSpec,<span class="keyword">int</span> heightMeasureSpec)</span> </span>&#123;</div><div class="line">    <span class="keyword">final</span> <span class="keyword">int</span> size = mChildrenCount;</div><div class="line">    <span class="keyword">final</span> View[] children = mChildren;</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; size; ++i) &#123;</div><div class="line">        <span class="keyword">final</span> View child = children[i];</div><div class="line">        <span class="keyword">if</span> ((child.mViewFlags &amp; VISIBILITY_MASK) != GONE) &#123;</div><div class="line">            measureChild(child,widthMeasureSpec,heightMeasureSpec);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><p>从上述代码来看，<code>ViewGroup</code>在<code>measure</code>时，会对每一个子元素进行<code>measure</code>，<code>measureChild</code>这个方法的实现也很好理解，如下所示<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">measureChild</span><span class="params">(View child,<span class="keyword">int</span> parentWidthMeasureSpec,<span class="keyword">int</span> parentHeightMeasureSpec)</span> </span>&#123;</div><div class="line">    <span class="keyword">final</span> LayoutParams lp = child.getLayoutParams();</div><div class="line">    <span class="keyword">final</span> <span class="keyword">int</span> childWidthMeasureSpec = getChildMeasureSpec(parentWidth-MeasureSpec,mPaddingLeft + mPaddingRight,lp.width);</div><div class="line">    <span class="keyword">final</span> <span class="keyword">int</span> childHeightMeasureSpec = getChildMeasureSpec(parentHeight-MeasureSpec,mPaddingTop + mPaddingBottom,lp.height);</div><div class="line">    child.measure(childWidthMeasureSpec,childHeightMeasureSpec);</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><p>很显然，<code>measureChild</code>的思想就是取出子元素的<code>LayoutParams</code>，然后再通过<code>getChildMeasureSpec</code>来创建子元素的<code>MeasureSpec</code>，接着将<code>MeasureSpec</code>直接传递给<code>View</code>的<code>measure</code>方法来进行测量。我们知道，<code>ViewGroup</code>并没有定义其测量的具体过程，这是因为<code>ViewGroup</code>是一个抽象类，其测量过程的<code>onMeasure</code>方法需要各个子类去具体实现，比如<code>LinearLayout</code>、<code>RelativeLayout</code>等。</p><h5 id="layout过程"><a href="#layout过程" class="headerlink" title="layout过程"></a>layout过程</h5><p><code>Layout</code>的作用是<code>ViewGroup</code>用来确定子元素的位置，当<code>ViewGroup</code>的位置被确定后，它在<code>onLayout</code>中会遍历所有的子元素并调用其<code>layout</code>方法，在<code>layout</code>方法中<code>onLayout</code>方法又会被调用。<code>Layout</code>过程和<code>measure</code>过程相比就简单多了，<code>layout</code>方法确定<code>View</code>本身的位置，而<code>onLayout</code>方法则会确定所有子元素的位置，先看<code>View</code>的<code>layout</code>方法，如下所示。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">layout</span><span class="params">(<span class="keyword">int</span> l,<span class="keyword">int</span> t,<span class="keyword">int</span> r,<span class="keyword">int</span> b)</span> </span>&#123;</div><div class="line">    <span class="keyword">if</span> ((mPrivateFlags3 &amp; PFLAG3_MEASURE_NEEDED_BEFORE_LAYOUT) != <span class="number">0</span>) &#123;</div><div class="line">        onMeasure(mOldWidthMeasureSpec,mOldHeightMeasureSpec);</div><div class="line">        mPrivateFlags3 &amp;= ~PFLAG3_MEASURE_NEEDED_BEFORE_LAYOUT;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">int</span> oldL = mLeft;</div><div class="line">    <span class="keyword">int</span> oldT = mTop;</div><div class="line">    <span class="keyword">int</span> oldB = mBottom;</div><div class="line">    <span class="keyword">int</span> oldR = mRight;</div><div class="line">    <span class="keyword">boolean</span> changed = isLayoutModeOptical(mParent) ?setOpticalFrame(l,t,r,b) : setFrame(l,t,r,b);</div><div class="line">    <span class="keyword">if</span> (changed || (mPrivateFlags &amp; PFLAG_LAYOUT_REQUIRED) == PFLAG_LAYOUT_REQUIRED) &#123;</div><div class="line">        onLayout(changed,l,t,r,b);</div><div class="line">        mPrivateFlags &amp;= ~PFLAG_LAYOUT_REQUIRED;</div><div class="line">        ListenerInfo li = mListenerInfo;</div><div class="line">        <span class="keyword">if</span> (li != <span class="keyword">null</span> &amp;&amp; li.mOnLayoutChangeListeners != <span class="keyword">null</span>) &#123;</div><div class="line">            ArrayList&lt;OnLayoutChangeListener&gt; listenersCopy =(ArrayList&lt;OnLayoutChangeListener&gt;)li.mOnLayout-ChangeListeners.clone();</div><div class="line">            <span class="keyword">int</span> numListeners = listenersCopy.size();</div><div class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; numListeners; ++i) &#123;</div><div class="line">                listenersCopy.get(i).onLayoutChange(<span class="keyword">this</span>,l,t,r,b,oldL,oldT,oldR,oldB);</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    mPrivateFlags &amp;= ~PFLAG_FORCE_LAYOUT;</div><div class="line">    mPrivateFlags3 |= PFLAG3_IS_LAID_OUT;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><p><code>layout</code>方法的大致流程如下：首先会通过<code>setFrame</code>方法来设定<code>View</code>的四个顶点的位置，即初始化<code>mLeft</code>、<code>mRight</code>、<code>mTop</code>和<code>mBottom</code>这四个值，<code>View</code>的四个顶点一旦确定，那么<code>View</code>在父容器中的位置也就确定了；接着会调用<code>onLayout</code>方法，这个方法的用途是父容器确定子元素的位置，和<code>onMeasure</code>方法类似，<code>onLayout</code>的具体实现同样和具体的布局有关，所以<code>View</code>和<code>ViewGroup</code>均没有真正实现<code>onLayout</code>方法。接下来，我们可以看一下<code>LinearLayout</code>的<code>onLayout</code>方法，如下所示。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onLayout</span><span class="params">(<span class="keyword">boolean</span> changed,<span class="keyword">int</span> l,<span class="keyword">int</span> t,<span class="keyword">int</span> r,<span class="keyword">int</span> b)</span> </span>&#123;</div><div class="line">    <span class="keyword">if</span> (mOrientation == VERTICAL) &#123;</div><div class="line">        layoutVertical(l,t,r,b);</div><div class="line">    &#125; <span class="keyword">else</span> &#123;</div><div class="line">        layoutHorizontal(l,t,r,b);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><p><code>LinearLayout</code>中<code>onLayout</code>的实现逻辑和<code>onMeasure</code>的实现逻辑类似，这里选择<code>layoutVertical</code>继续讲解，为了更好地理解其逻辑，这里只给出了主要的代码：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">layoutVertical</span><span class="params">(<span class="keyword">int</span> left,<span class="keyword">int</span> top,<span class="keyword">int</span> right,<span class="keyword">int</span> bottom)</span> </span>&#123;</div><div class="line">    ......</div><div class="line">    <span class="keyword">final</span> <span class="keyword">int</span> count = getVirtualChildCount();</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; count; i++) &#123;</div><div class="line">        <span class="keyword">final</span> View child = getVirtualChildAt(i);</div><div class="line">        <span class="keyword">if</span> (child == <span class="keyword">null</span>) &#123;</div><div class="line">            childTop += measureNullChild(i);</div><div class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (child.getVisibility() != GONE) &#123;</div><div class="line">            <span class="keyword">final</span> <span class="keyword">int</span> childWidth = child.getMeasuredWidth();</div><div class="line">            <span class="keyword">final</span> <span class="keyword">int</span> childHeight = child.getMeasuredHeight();</div><div class="line">            <span class="keyword">final</span> LinearLayout.LayoutParams lp =(LinearLayout.LayoutParams) child.getLayoutParams();</div><div class="line">            ......</div><div class="line">            <span class="keyword">if</span> (hasDividerBeforeChildAt(i)) &#123;</div><div class="line">                childTop += mDividerHeight;</div><div class="line">            &#125;</div><div class="line">            childTop += lp.topMargin;</div><div class="line">            setChildFrame(child,childLeft,childTop + getLocationOffset(child),childWidth,childHeight);</div><div class="line">            childTop += childHeight + lp.bottomMargin + getNextLocation-Offset(child);</div><div class="line">            i += getChildrenSkipCount(child,i);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><p>这里分析一下<code>layoutVertical</code>的代码逻辑，可以看到，此方法会遍历所有子元素并调用<code>setChildFrame</code>方法来为子元素指定对应的位置，其中<code>childTop</code>会逐渐增大，这就意味着后面的子元素会被放置在靠下的位置，这刚好符合竖直方向的<code>LinearLayout</code>的特性。至于<code>setChildFrame</code>，它仅仅是调用子元素的<code>layout</code>方法而已，这样父元素在<code>layout</code>方法中完成自己的定位以后，就通过<code>onLayout</code>方法去调用子元素的<code>layout</code>方法，子元素又会通过自己的<code>layout</code>方法来确定自己的位置，这样一层一层地传递下去就完成了整个<code>View</code>树的<code>layout</code>过程。<code>setChildFrame</code>方法的实现如下所示。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">setChildFrame</span><span class="params">(View child,<span class="keyword">int</span> left,<span class="keyword">int</span> top,<span class="keyword">int</span> width,<span class="keyword">int</span> height)</span> </span>&#123;</div><div class="line">    child.layout(left,top,left + width,top + height);</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><p>我们注意到，setChildFrame中的width和height实际上就是子元素的测量宽/高，从下面的代码可以看出这一点：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">final</span> <span class="keyword">int</span> childWidth = child.getMeasuredWidth();</div><div class="line"><span class="keyword">final</span> <span class="keyword">int</span> childHeight = child.getMeasuredHeight();</div><div class="line">setChildFrame(child,childLeft,childTop + getLocationOffset(child),childWidth,childHeight);</div></pre></td></tr></table></figure></p><p>而在<code>layout</code>方法中会通过<code>setFrame</code>去设置子元素的四个顶点的位置，在<code>setFrame</code>中有如下几句赋值语句，这样一来子元素的位置就确定了：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">mLeft = left;</div><div class="line">mTop = top;</div><div class="line">mRight = right;</div><div class="line">mBottom = bottom;</div></pre></td></tr></table></figure></p><p><code>View</code>的测量宽/高和最终/宽高有什么区别？这个问题可以具体为：<code>View</code>的<code>getMeasuredWidth</code>和<code>getWidth</code>这两个方法有什么区别，至于<code>getMeasuredHeight</code>和<code>getHeight</code>的区别和前两者完全一样。为了回答这个问题，首先，我们看一下getwidth和getHeight这两个方法的具体实现：<br><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div></pre></td><td class="code"><pre><div class="line">public final int getWidth() &#123;</div><div class="line">    return mRight -mLeft;</div><div class="line">&#125;</div><div class="line">public final int getHeight() &#123;</div><div class="line">    return mBottom -mTop;</div><div class="line">&#125;</div><div class="line">``` </div><div class="line"></div><div class="line">从`getWidth`和`getHeight`的源码再结合`mLeft`、`mRight`、`mTop`和`mBottom`这四个变量的赋值过程来看，`getWidth`方法的返回值刚好就是`View`的测量宽度，而`getHeight`方法的返回值也刚好就是`View`的测量高度。经过上述分析，现在我们可以回答这个问题了：在`View`的默认实现中，`View`的测量宽/高和最终宽/高是相等的，只不过测量宽/高形成于`View`的`measure`过程，而最终宽/高形成于`View`的`layout`过程，即两者的赋值时机不同，测量宽/高的赋值时机稍微早一些。因此，在日常开发中，我们可以认为`View`的`测量宽/高`就`等于``最终宽/高`，但是的确存在某些特殊情况会导致两者不一致.</div><div class="line"></div><div class="line">##### draw过程</div><div class="line">Draw过程就比较简单了，它的作用是将View绘制到屏幕上面。View的绘制过程遵循</div><div class="line">如下几步：</div><div class="line">* 绘制背景background.draw(canvas)。</div><div class="line">* 绘制自己（onDraw）。</div><div class="line">* 绘制children（dispatchDraw）。</div><div class="line">* 绘制装饰（onDrawScrollBars）。</div><div class="line">这一点通过draw方法的源码可以明显看出来，如下所示。</div><div class="line"></div><div class="line">``` java</div><div class="line">    public void draw(Canvas canvas) &#123;</div><div class="line">    final int privateFlags = mPrivateFlags;</div><div class="line">    final boolean dirtyOpaque = (privateFlags &amp; PFLAG_DIRTY_MASK) == PFLAG_DIRTY_OPAQUE &amp;&amp;(mAttachInfo == null || !mAttachInfo.mIgnoreDirtyState);</div><div class="line">    mPrivateFlags = (privateFlags &amp; ~PFLAG_DIRTY_MASK) | PFLAG_DRAWN;</div><div class="line">    /*</div><div class="line">    * Draw traversal performs several drawing steps which must be executed</div><div class="line">    * in the appropriate order:</div><div class="line">    *</div><div class="line">    * 1. Draw the background</div><div class="line">    * 2. If necessary,save the canvas' layers to prepare for fading</div><div class="line">    * 3. Draw view's content</div><div class="line">    * 4. Draw children</div><div class="line">    * 5. If necessary,draw the fading edges and restore layers</div><div class="line">    * 6. Draw decorations (scrollbars for instance)</div><div class="line">    */</div><div class="line">    // Step 1,draw the background,if needed</div><div class="line">    int saveCount;</div><div class="line">    if (!dirtyOpaque) &#123;</div><div class="line">        drawBackground(canvas);</div><div class="line">    &#125;</div><div class="line">    // skip step 2 &amp; 5 if possible (common case)</div><div class="line">    final int viewFlags = mViewFlags;</div><div class="line">    boolean horizontalEdges = (viewFlags &amp; FADING_EDGE_HORIZONTAL) != 0;</div><div class="line">    boolean verticalEdges = (viewFlags &amp; FADING_EDGE_VERTICAL) != 0;</div><div class="line">    if (!verticalEdges &amp;&amp; !horizontalEdges) &#123;</div><div class="line">        // Step 3,draw the content</div><div class="line">        if (!dirtyOpaque) onDraw(canvas);</div><div class="line">            // Step 4,draw the children</div><div class="line">        dispatchDraw(canvas);</div><div class="line">        // Step 6,draw decorations (scrollbars)</div><div class="line">        onDrawScrollBars(canvas);</div><div class="line">        if (mOverlay != null &amp;&amp; !mOverlay.isEmpty()) &#123;</div><div class="line">            mOverlay.getOverlayView().dispatchDraw(canvas);</div><div class="line">        &#125;</div><div class="line">        // we're done...</div><div class="line">        return;</div><div class="line">    &#125;</div><div class="line">    ...</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><p>View绘制过程的传递是通过dispatchDraw来实现的，dispatchDraw会遍历调用所有子元素的draw方法，如此draw事件就一层层地传递了下去。View有一个特殊的方法setWillNotDraw，先看一下它的源码，如下所示。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line">* If this view doesn't do any drawing on its own,set this flag to</div><div class="line">* allow further optimizations. By default,this flag is not set on</div><div class="line">* View,but could be set on some View subclasses such as ViewGroup.</div><div class="line">*</div><div class="line">* Typically,if you override &#123;<span class="doctag">@link</span> #onDraw(android.graphics.Canvas)&#125;</div><div class="line">* you should clear this flag.</div><div class="line">*</div><div class="line">* <span class="doctag">@param</span> willNotDraw whether or not this View draw on its own</div><div class="line">*/</div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setWillNotDraw</span><span class="params">(<span class="keyword">boolean</span> willNotDraw)</span> </span>&#123;</div><div class="line">    setFlags(willNotDraw ? WILL_NOT_DRAW : <span class="number">0</span>,DRAW_MASK);</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><p>从<code>setWillNotDraw</code>这个方法的注释中可以看出，如果一个<code>View</code>不需要绘制任何内容，那么设置这个标记位为<code>true</code>以后，系统会进行相应的优化。默认情况下，<code>View</code>没有启用这个优化标记位，但是<code>ViewGroup</code>会默认启用这个优化标记位。这个标记位对实际开发的意义是：当我们的自定义控件继承于<code>ViewGroup</code>并且本身不具备绘制功能时，就可以开启这个标记位从而便于系统进行后续的优化。当然，当明确知道一个<code>ViewGroup</code>需要通过<code>onDraw</code>来绘制内容时，我们需要显式地关闭<code>WILL_NOT_DRAW</code>这个标记位。</p><hr><p>以上</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;抄的《Android开发艺术探索》第四章&lt;br&gt;&lt;code&gt;ViewRoot&lt;/code&gt;对应于&lt;code&gt;ViewRootImpl&lt;/code&gt;类，它是连接&lt;code&gt;WindowManager&lt;/code&gt;和&lt;code&gt;DecorView&lt;/code&gt;的纽带，&lt;code&gt;View&lt;/code&gt;的三大流程均是通过&lt;code&gt;ViewRoot&lt;/code&gt;来完成的。在&lt;code&gt;ActivityThread&lt;/code&gt;中，当&lt;code&gt;Activity&lt;/code&gt;对象被创建完毕后，会将&lt;code&gt;DecorView&lt;/code&gt;添加到&lt;code&gt;Window&lt;/code&gt;中，同时会创建&lt;code&gt;ViewRootImpl&lt;/code&gt;对象，并将&lt;code&gt;ViewRootImpl&lt;/code&gt;对象和&lt;code&gt;DecorView&lt;/code&gt;建立关联，&lt;code&gt;View&lt;/code&gt;的绘制流程是从&lt;code&gt;ViewRoot&lt;/code&gt;的&lt;code&gt;performTraversals&lt;/code&gt;方法开始的，它经过&lt;code&gt;measure&lt;/code&gt;、&lt;code&gt;layout&lt;/code&gt;和&lt;code&gt;draw&lt;/code&gt;三个过程才能最终将一个&lt;code&gt;View&lt;/code&gt;绘制出来，其中&lt;code&gt;measure&lt;/code&gt;用来测量View的宽和高，&lt;code&gt;layout&lt;/code&gt;用来确定View在父容器中的放置位置，而&lt;code&gt;draw&lt;/code&gt;则负责将View绘制在屏幕上。&lt;/p&gt;
    
    </summary>
    
    
      <category term="Android" scheme="http://blog.huangyuanlove.com/tags/Android/"/>
    
  </entry>
  
  <entry>
    <title>View事件分发</title>
    <link href="http://blog.huangyuanlove.com/2018/07/29/View%E4%BA%8B%E4%BB%B6%E5%88%86%E5%8F%91/"/>
    <id>http://blog.huangyuanlove.com/2018/07/29/View事件分发/</id>
    <published>2018-07-29T03:28:20.000Z</published>
    <updated>2018-08-04T05:16:29.516Z</updated>
    
    <content type="html"><![CDATA[<p>抄的《Android开发艺术探索》3.4.1 和 3.4.2</p><h6 id="MotionEvent"><a href="#MotionEvent" class="headerlink" title="MotionEvent"></a>MotionEvent</h6><p>在手指接触屏幕后所产生的一系列事件中，典型的事件类型有如下几种：</p><ul><li>ACTION_DOWN——手指刚接触屏幕；</li><li>ACTION_MOVE——手指在屏幕上移动；</li><li>ACTION_UP——手机从屏幕上松开的一瞬间<br>还有其他的事件可以参考<code>MotionEvent.java</code>类</li></ul><h6 id="TouchSlop"><a href="#TouchSlop" class="headerlink" title="TouchSlop"></a>TouchSlop</h6><p>TouchSlop是系统所能识别出的被认为是滑动的最小距离，换句话说，当手指在屏幕上滑动时，如果两次滑动之间的距离小于这个常量，那么系统就不认为你是在进行滑动操作，这是一个常量，和设备有关，在不同设备上这个值可能是不同的，通过如下方式即可获取这个常量：<code>ViewConfiguration. get(getContext()).getScaledTouchSlop()</code>。当我们在处理滑动时，可以利用这个常量来做一些过滤，比如当两次滑动事件的滑动距离小于这个值，我们就可以认为未达到滑动距离的临界值，因此就可以认为它们不是滑动，这样做可以有更好的用户体验可以在源码中找到这个常量的定义，在<code>frameworks/base/core/res/res/values/config.xml</code>文件中。</p><a id="more"></a><p>所谓点击事件的事件分发，其实就是对MotionEvent事件的分发过程，即当一个MotionEvent产生了以后，系统需要把这个事件传递给一个具体的View，而这个传递的过程就是分发过程。点击事件的分发过程由三个很重要的方法来共同完成：dispatchTouchEvent、onInterceptTouchEvent和onTouchEvent，下面我们先介绍一下这几个方法</p><h6 id="public-boolean-dispatchTouchEvent-MotionEvent-ev"><a href="#public-boolean-dispatchTouchEvent-MotionEvent-ev" class="headerlink" title="public boolean dispatchTouchEvent(MotionEvent ev)"></a>public boolean dispatchTouchEvent(MotionEvent ev)</h6><p>用来进行事件的分发。如果事件能够传递给当前View，那么此方法一定会被调用，返回结果受当前View的onTouchEvent和下级View的dispatchTouchEvent方法的影响，表示是否消耗当前事件。</p><h6 id="public-boolean-onInterceptTouchEvent-MotionEvent-event"><a href="#public-boolean-onInterceptTouchEvent-MotionEvent-event" class="headerlink" title="public boolean onInterceptTouchEvent(MotionEvent event)"></a>public boolean onInterceptTouchEvent(MotionEvent event)</h6><p>在上述方法内部调用，用来判断是否拦截某个事件，如果当前View拦截了某个事件，那么在同一个事件序列当中，此方法不会被再次调用，返回结果表示是否拦截当前事件。</p><h6 id="public-boolean-onTouchEvent-MotionEvent-event"><a href="#public-boolean-onTouchEvent-MotionEvent-event" class="headerlink" title="public boolean onTouchEvent(MotionEvent event)"></a>public boolean onTouchEvent(MotionEvent event)</h6><p>在dispatchTouchEvent方法中调用，用来处理点击事件，返回结果表示是否消耗当前事件，如果不消耗，则在同一个事件序列中，当前View无法再次接收到事件.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">dispatchTouchEvent</span><span class="params">(MotionEvent ev)</span> </span>&#123;</div><div class="line">    <span class="keyword">boolean</span> consume = <span class="keyword">false</span>;</div><div class="line">    <span class="keyword">if</span> (onInterceptTouchEvent(ev)) &#123;</div><div class="line">        consume = onTouchEvent(ev);</div><div class="line">    &#125; <span class="keyword">else</span> &#123;</div><div class="line">        consume = child.dispatchTouchEvent(ev);</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> consume;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>对于一个根<code>ViewGroup</code>来说，点击事件产生后，首先会传递给它，这时它的<code>dispatchTouchEvent</code>就会被调用，如果这个<code>ViewGroup</code>的<code>onInterceptTouchEvent</code>方法返回<code>true</code>就表示它要拦截当前事件，接着事件就会交给这个<code>ViewGroup</code>处理，即它的<code>onTouchEvent</code>方法就会被调用；如果这个<code>ViewGroup</code>的<code>onInterceptTouchEvent</code>方法返回<code>false</code>就表示它不拦截当前事件，这时当前事件就会继续传递给它的子元素，接着子元素的<code>dispatchTouchEvent</code>方法就会被调用，如此反复直到事件被最终处理。<br>当一个<code>View</code>需要处理事件时，如果它设置了<code>OnTouchListener</code>，那么<code>OnTouchListener</code>中的<code>onTouch</code>方法会被回调。这时事件如何处理还要看<code>onTouch</code>的返回值，如果返回<code>false</code>，则当前<code>View</code>的<code>onTouchEvent</code>方法会被调用；如果返回<code>true</code>，那么<code>onTouchEvent</code>方法将不会被调用。由此可见，给<code>View</code>设置的<code>OnTouchListener</code>，其优先级比<code>onTouchEvent</code>要高。在<code>onTouchEvent</code>方法中，如果当前设置的有<code>OnClickListener</code>，那么它的<code>onClick</code>方法会被调用。可以看出，平时我们常用的<code>OnClickListener</code>，其优先级最低，即处于事件传递的尾端。<br>当一个点击事件产生后，它的传递过程遵循如下顺序：<code>Activity -&gt; Window -&gt; View</code>，即事件总是先传递给<code>Activity</code>，<code>Activity</code>再传递给<code>Window</code>，最后<code>Window</code>再传递给顶级<code>View</code>。顶级<code>View</code>接收到事件后，就会按照事件分发机制去分发事件。考虑一种情况，如果一个<code>View</code>的<code>onTouchEvent</code>返回<code>false</code>，那么它的父容器的<code>onTouchEvent</code>将会被调用，依此类推。如果所有的元素都不处理这个事件，那么这个事件将会最终传递给<code>Activity</code>处理，即<code>Activity</code>的<code>onTouchEvent</code>方法会被调用。</p><h6 id="事件传递机制"><a href="#事件传递机制" class="headerlink" title="事件传递机制"></a>事件传递机制</h6><ul><li>同一个事件序列是指从手指接触屏幕的那一刻起，到手指离开屏幕的那一刻结束，在这个过程中所产生的一系列事件，这个事件序列以down事件开始，中间含有数量不定的move事件，最终以up事件结束。</li><li>正常情况下，一个事件序列只能被一个View拦截且消耗。因为一旦一个元素拦截了某此事件，那么同一个事件序列内的所有事件都会直接交给它处理，因此同一个事件序列中的事件不能分别由两个View同时处理，但是通过特殊手段可以做到，比如一个View将本该自己处理的事件通过onTouchEvent强行传递给其他View处理。</li><li>某个View一旦决定拦截，那么这一个事件序列都只能由它来处理（如果事件序列能够传递给它的话），并且它的onInterceptTouchEvent不会再被调用。这条也很好理解，就是说当一个View决定拦截一个事件后，那么系统会把同一个事件序列内的其他方法都直接交给它来处理，因此就不用再调用这个View的onInterceptTouchEvent去询问它是否要拦截了。</li><li>某个View一旦开始处理事件，如果它不消耗ACTION_DOWN事件（onTouchEvent返回了false），那么同一事件序列中的其他事件都不会再交给它来处理，并且事件将重新交由它的父元素去处理，即父元素的onTouchEvent会被调用。意思就是事件一旦交给一个View处理，那么它就必须消耗掉，否则同一事件序列中剩下的事件就不再交给它来处理了。</li><li>如果View不消耗除ACTION_DOWN以外的其他事件，那么这个点击事件会消失，此时父元素的onTouchEvent并不会被调用，并且当前View可以持续收到后续的事件，最终这些消失的点击事件会传递给Activity处理。</li><li>ViewGroup默认不拦截任何事件。Android源码中ViewGroup的onInterceptTouch-Event方法默认返回false。</li><li>View没有onInterceptTouchEvent方法，一旦有点击事件传递给它，那么它的onTouchEvent方法就会被调用。</li><li>View的onTouchEvent默认都会消耗事件（返回true），除非它是不可点击的（clickable  和longClickable同时为false）。View的longClickable属性默认都为false，clickable属性要分情况，比如Button的clickable属性默认为true，而TextView的clickable属性默认为false。</li><li>View的enable属性不影响onTouchEvent的默认返回值。哪怕一个View是disable状态的，只要它的clickable或者longClickable有一个为true，那么它的onTouchEvent就返回true。</li><li>onClick会发生的前提是当前View是可点击的，并且它收到了down和up的事件。</li><li>事件传递过程是由外向内的，即事件总是先传递给父元素，然后再由父元素分发给子View，通过requestDisallowInterceptTouchEvent方法可以在子元素中干预父元素的事件分发过程，但是ACTION_DOWN事件除外。</li></ul><h6 id="事件分发源码"><a href="#事件分发源码" class="headerlink" title="事件分发源码"></a>事件分发源码</h6><p><strong> Activity对点击事件的分发过程 </strong><br>点击事件用<code>MotionEvent</code>来表示，当一个点击操作发生时，事件最先传递给当前<code>Activity</code>，由<code>Activity</code>的<code>dispatchTouchEvent</code>来进行事件派发，具体的工作是由<code>Activity</code>内部的<code>Window</code>来完成的。<code>Window</code>会将事件传递给<code>decor view</code>，<code>decor view</code>一般就是当前界面的底层容器（即<code>setContentView</code>所设置的<code>View</code>的父容器），通过<code>Activity.getWindow.getDecorView()</code>可以获得。我们先从<code>Activity</code>的<code>dispatchTouchEvent</code>开始分析。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line">    * Called to process touch screen events.  You can override this to</div><div class="line">    * intercept all touch screen events before they are dispatched to the</div><div class="line">    * window.  Be sure to call this implementation for touch screen events</div><div class="line">    * that should be handled normally.</div><div class="line">    *</div><div class="line">    * <span class="doctag">@param</span> ev The touch screen event.</div><div class="line">    *</div><div class="line">    * <span class="doctag">@return</span> boolean Return true if this event was consumed.</div><div class="line">    */</div><div class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">dispatchTouchEvent</span><span class="params">(MotionEvent ev)</span> </span>&#123;</div><div class="line">       <span class="keyword">if</span> (ev.getAction() == MotionEvent.ACTION_DOWN) &#123;</div><div class="line">           onUserInteraction();</div><div class="line">       &#125;</div><div class="line">       <span class="keyword">if</span> (getWindow().superDispatchTouchEvent(ev)) &#123;</div><div class="line">           <span class="keyword">return</span> <span class="keyword">true</span>;</div><div class="line">       &#125;</div><div class="line">       <span class="keyword">return</span> onTouchEvent(ev);</div><div class="line">   &#125;</div></pre></td></tr></table></figure></p><p>在window类的注释中</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">/**</div><div class="line"> * Abstract base class for a top-level window look and behavior policy.  An</div><div class="line"> * instance of this class should be used as the top-level view added to the</div><div class="line"> * window manager. It provides standard UI policies such as a background, title</div><div class="line"> * area, default key processing, etc.</div><div class="line"> *</div><div class="line"> * &lt;p&gt;The only existing implementation of this abstract class is</div><div class="line"> * android.view.PhoneWindow, which you should instantiate when needing a</div><div class="line"> * Window.</div><div class="line"> */</div></pre></td></tr></table></figure><p>首先事件开始交给<code>Activity</code>所附属的<code>Window</code>进行分发，如果返回<code>true</code>，整个事件循环就结束了，返回<code>false</code>意味着事件没人处理，所有<code>View</code>的<code>onTouchEvent</code>都返回了<code>false</code>，那么<code>Activity</code>的<code>onTouchEvent</code>就会被调用。<br>其中<code>Window</code>是个抽象类，而其中的<code>superDispatchTouchEvent</code>方法也是个抽象方法。在<code>PhoneWindows</code>中<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Override</span></div><div class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">superDispatchTouchEvent</span><span class="params">(MotionEvent event)</span> </span>&#123;</div><div class="line">       <span class="keyword">return</span> mDecor.superDispatchTouchEvent(event);</div><div class="line">   &#125;</div></pre></td></tr></table></figure></p><p>调用了DecorView的superDispatchTouchEvent方法，我们可以看一下DecorView：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DecorView</span> <span class="keyword">extends</span> <span class="title">FrameLayout</span> <span class="keyword">implements</span> <span class="title">RootViewSurfaceTaker</span>, <span class="title">WindowCallbacks</span> </span>&#123;</div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">superDispatchTouchEvent</span><span class="params">(MotionEvent event)</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">super</span>.dispatchTouchEvent(event);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><p>目前事件传递到了<code>DecorView</code>这里，由于<code>DecorView</code>继承自<code>FrameLayout</code>且是父<code>View</code>，所以最终事件会传递给<code>View</code>。从这里开始，事件已经传递到顶级<code>View</code>了，即在<code>Activity</code>中通过<code>setContentView</code>所设置的<code>View</code>，另外顶级<code>View</code>也叫根<code>View</code>，顶级View一般来说都是<code>ViewGroup</code>。</p><p><strong> 顶级View对点击事件的分发过程 </strong><br>点击事件达到顶级<code>View</code>（一般是一个ViewGroup）以后，会调用<code>ViewGroup的dispatchTouchEvent</code>方法，然后的逻辑是这样的：如果顶级<code>ViewGroup</code>拦截事件即<code>onInterceptTouchEvent</code>返回<code>true</code>，则事件由<code>ViewGroup</code>处理，这时如果<code>ViewGroup</code>的<code>mOnTouchListener</code>被设置，则<code>onTouch</code>会被调用，否则<code>onTouchEvent</code>会被调用。也就是说，如果都提供的话，<code>onTouch</code>会屏蔽掉<code>onTouchEven</code>t。在<code>onTouchEvent</code>中，如果设置了<code>mOnClickListener</code>，则<code>onClick</code>会被调用。如果顶级<code>ViewGroup</code>不拦截事件，则事件会传递给它所在的点击事件链上的子<code>View</code>，这时子<code>View</code>的<code>dispatchTouchEvent</code>会被调用。到此为止，事件已经从顶级View传递给了下一层<code>View</code>，接下来的传递过程和顶级<code>View</code>是一致的，如此循环，完成整个事件的分发。具体代码可以看一下<code>ViewGroup.dispatchTouchEvent()</code>方法。</p><p><strong> View对点击事件的处理 </strong><br>View对点击事件的处理过程稍微简单一些，这里的View不包含ViewGroup。<br>View对点击事件的处理过程就比较简单了，因为View（这里不包含ViewGroup）是一个单独的元素，它没有子元素因此无法向下传递事件，所以它只能自己处理事件。从上面的源码可以看出View对点击事件的处理过程，首先会判断有没有设置OnTouchListener，如果OnTouchListener中的onTouch方法返回true，那么onTouchEvent就不会被调用，可见OnTouchListener的优先级高于onTouchEvent，这样做的好处是方便在外界处理点击事件。接着再分析onTouchEvent的实现。先看当View处于不可用状态下点击事件的处理过程，如下所示。很显然，不可用状态下的View照样会消耗点击事件，尽管它看起来不可用。<br>接着再分析onTouchEvent的实现。先看当View处于不可用状态下点击事件的处理过程，如下所示。很显然，不可用状态下的View照样会消耗点击事件，尽管它看起来不可用。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">if</span> ((viewFlags &amp; ENABLED_MASK) == DISABLED) &#123;</div><div class="line">           <span class="keyword">if</span> (action == MotionEvent.ACTION_UP &amp;&amp; (mPrivateFlags &amp; PFLAG_PRESSED) != <span class="number">0</span>) &#123;</div><div class="line">               setPressed(<span class="keyword">false</span>);</div><div class="line">           &#125;</div><div class="line">           mPrivateFlags3 &amp;= ~PFLAG3_FINGER_DOWN;</div><div class="line">           <span class="comment">// A disabled view that is clickable still consumes the touch</span></div><div class="line">           <span class="comment">// events, it just doesn't respond to them.</span></div><div class="line">           <span class="keyword">return</span> clickable;</div><div class="line">       &#125;</div></pre></td></tr></table></figure></p><p>接下来如果View设置有代理，还会执行代理的onTouchEvent方法，<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">if</span> (mTouchDelegate != <span class="keyword">null</span>) &#123;</div><div class="line">            <span class="keyword">if</span> (mTouchDelegate.onTouchEvent(event)) &#123;</div><div class="line">                <span class="keyword">return</span> <span class="keyword">true</span>;</div><div class="line">            &#125;</div><div class="line">        &#125;</div></pre></td></tr></table></figure></p><p>接下来就是对事件序列的处理<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">if</span> (clickable || (viewFlags &amp; TOOLTIP) == TOOLTIP) &#123;</div><div class="line">            <span class="keyword">switch</span> (action) &#123;</div><div class="line">                <span class="keyword">case</span> MotionEvent.ACTION_UP:<span class="keyword">break</span>;</div><div class="line">                <span class="keyword">case</span> MotionEvent.ACTION_DOWN:<span class="keyword">break</span>;</div><div class="line">                <span class="keyword">case</span> MotionEvent.ACTION_CANCEL:<span class="keyword">break</span>;</div><div class="line">                <span class="keyword">case</span> MotionEvent.ACTION_MOVE:<span class="keyword">break</span>;</div><div class="line">            &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><p>从上面的代码来看，只要View的<code>CLICKABLE</code>和<code>LONG_CLICKABLE</code>有一个为true，那么它就会消耗这个事件，即<code>onTouchEvent</code>方法返回true，不管它是不是<code>DISABLE</code>状态，然后就是当<code>ACTION_UP</code>事件发生时，会触发<code>performClick</code>方法，如果View设置了<code>OnClickListener</code>，那么<code>performClick</code>方法内部会调用它的<code>onClick</code>方法。<code>View</code>的<code>LONG_CLICKABLE</code>属性默认为<code>false</code>，而<code>CLICKABLE</code>属性是否为<code>false</code>和具体的View有关，确切来说是可点击的View其<code>CLICKABLE为true</code>，不可点击的View其<code>CLICKABLE</code>为<code>false</code>，比如<code>Button</code>是可点击的，<code>TextView</code>是不可点击的。通过<code>setClickable</code>和<code>setLongClickable</code>可以分别改变<code>View</code>的<code>CLICKABLE</code>和<code>LONG_CLICKABLE</code>属性。另外，<code>setOnClickListener</code>会自动将<code>View</code>的<code>CLICKABLE</code>设为<code>true</code>，s<code>etOnLongClickListener</code>则会自动将<code>View</code>的<code>LONG_CLICKABLE</code>设为<code>true</code>。</p><h6 id="处理滑动冲突"><a href="#处理滑动冲突" class="headerlink" title="处理滑动冲突"></a>处理滑动冲突</h6><p>了解了点击事件的处理过程，就可以比较好的处理滑动冲突了</p><p><strong> 父容器拦截处理 </strong><br>击事情都先经过父容器的拦截处理，如果父容器需要此事件就拦截，如果不需要此事件就不拦截。外部拦截法需要重写父容器的onInterceptTouchEvent方法，在内部做相应的拦截即可。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">onInterceptTouchEvent</span><span class="params">(MotionEvent event)</span> </span>&#123;</div><div class="line">    <span class="keyword">boolean</span> intercepted = <span class="keyword">false</span>;</div><div class="line">    <span class="keyword">int</span> x = (<span class="keyword">int</span>) event.getX();</div><div class="line">    <span class="keyword">int</span> y = (<span class="keyword">int</span>) event.getY();</div><div class="line">    <span class="keyword">switch</span> (event.getAction()) &#123;</div><div class="line">        <span class="keyword">case</span> MotionEvent.ACTION_DOWN: &#123;</div><div class="line">            intercepted = <span class="keyword">false</span>;</div><div class="line">            <span class="keyword">break</span>;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">case</span> MotionEvent.ACTION_MOVE: &#123;</div><div class="line">            <span class="keyword">if</span> (父容器需要当前点击事件) &#123;</div><div class="line">                intercepted = <span class="keyword">true</span>;</div><div class="line">            &#125; <span class="keyword">else</span> &#123;</div><div class="line">                intercepted = <span class="keyword">false</span>;</div><div class="line">            &#125;</div><div class="line">            <span class="keyword">break</span>;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">case</span> MotionEvent.ACTION_UP: &#123;</div><div class="line">            intercepted = <span class="keyword">false</span>;</div><div class="line">            <span class="keyword">break</span>;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">default</span>:</div><div class="line">            <span class="keyword">break</span>;</div><div class="line">    &#125;</div><div class="line">    mLastXIntercept = x;</div><div class="line">    mLastYIntercept = y;</div><div class="line">    <span class="keyword">return</span> intercepted;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><p>针对不同的滑动冲突，只需要修改父容器需要当前点击事件这个条件即可，其他均不需做修改并且也不能修改。这里对上述代码再描述一下，在<code>onInterceptTouchEvent</code>方法中，首先是<code>ACTION_DOWN</code>这个事件，父容器必须返回<code>false</code>，即不拦截<code>ACTION_DOWN</code>事件，这是因为一旦父容器拦截了<code>ACTION_DOWN</code>，那么后续的<code>ACTION_MOVE</code>和<code>ACTION_UP</code>事件都会直接交由父容器处理，这个时候事件没法再传递给子元素了；其次是<code>ACTION_MOVE</code>事件，这个事件可以根据需要来决定是否拦截，如果父容器需要拦截就返回<code>true</code>，否则返回<code>false</code>；最后是<code>ACTION_UP</code>事件，这里必须要返回false，因为<code>ACTION_UP</code>事件本身没有太多意义。假设事件交由子元素处理，如果父容器在<code>ACTION_UP</code>时返回了<code>true</code>，就会导致子元素无法接收到<code>ACTION_UP</code>事件，这个时候子元素中的<code>onClick</code>事件就无法触发，但是父容器比较特殊，一旦它开始拦截任何一个事件，那么后续的事件都会交给它来处理，而<code>ACTION_UP</code>作为最后一个事件也必定可以传递给父容器，即便父容器的<code>onInterceptTouchEvent</code>方法在<code>ACTION_UP</code>时返回了<code>false</code>。</p><p><strong> 子元素拦截事件 </strong><br>父容器不拦截任何事件，所有的事件都传递给子元素，如果子元素需要此事件就直接消耗掉，否则就交由父容器进行处理，这种方法和Android中的事件分发机制不一致，需要配合<code>requestDisallowInterceptTouchEvent()</code>方法才能正常工作，使用起来较外部拦截法稍显复杂。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">dispatchTouchEvent</span><span class="params">(MotionEvent event)</span> </span>&#123;</div><div class="line">    <span class="keyword">int</span> x = (<span class="keyword">int</span>) event.getX();</div><div class="line">    <span class="keyword">int</span> y = (<span class="keyword">int</span>) event.getY();</div><div class="line">    <span class="keyword">switch</span> (event.getAction()) &#123;</div><div class="line">        <span class="keyword">case</span> MotionEvent.ACTION_DOWN: &#123;</div><div class="line">            parent.requestDisallowInterceptTouchEvent(<span class="keyword">true</span>);</div><div class="line">            <span class="keyword">break</span>;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">case</span> MotionEvent.ACTION_MOVE: &#123;</div><div class="line">            <span class="keyword">int</span> deltaX = x -mLastX;</div><div class="line">            <span class="keyword">int</span> deltaY = y -mLastY;</div><div class="line">            <span class="keyword">if</span> (父容器需要此类点击事件)) &#123;</div><div class="line">                parent.requestDisallowInterceptTouchEvent(<span class="keyword">false</span>);</div><div class="line">            &#125;</div><div class="line">            <span class="keyword">break</span>;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">case</span> MotionEvent.ACTION_UP: &#123;</div><div class="line">            <span class="keyword">break</span>;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">default</span>:</div><div class="line">            <span class="keyword">break</span>;</div><div class="line">        &#125;</div><div class="line">    mLastX = x;</div><div class="line">    mLastY = y;</div><div class="line">    <span class="keyword">return</span> <span class="keyword">super</span>.dispatchTouchEvent(event);</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><p>除了子元素需要做处理以外，父元素也要默认拦截除了<code>ACTION_DOWN</code>以外的其他事件，这样当子元素调用<code>parent.requestDisallowInterceptTouchEvent(false)</code>方法时，父元素才能继续拦截所需的事件。因为<code>ACTION_DOWN</code>事件并不受<code>FLAG_DISALLOW_INTERCEPT</code>这个标记位的控制，所以一旦父容器拦截<code>ACTION_DOWN</code>事件，那么所有的事件都无法传递到子元素中去，这样内部拦截就无法起作用了。</p><hr><p>以上</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;抄的《Android开发艺术探索》3.4.1 和 3.4.2&lt;/p&gt;
&lt;h6 id=&quot;MotionEvent&quot;&gt;&lt;a href=&quot;#MotionEvent&quot; class=&quot;headerlink&quot; title=&quot;MotionEvent&quot;&gt;&lt;/a&gt;MotionEvent&lt;/h6&gt;&lt;p&gt;在手指接触屏幕后所产生的一系列事件中，典型的事件类型有如下几种：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;ACTION_DOWN——手指刚接触屏幕；&lt;/li&gt;
&lt;li&gt;ACTION_MOVE——手指在屏幕上移动；&lt;/li&gt;
&lt;li&gt;ACTION_UP——手机从屏幕上松开的一瞬间&lt;br&gt;还有其他的事件可以参考&lt;code&gt;MotionEvent.java&lt;/code&gt;类&lt;/li&gt;
&lt;/ul&gt;
&lt;h6 id=&quot;TouchSlop&quot;&gt;&lt;a href=&quot;#TouchSlop&quot; class=&quot;headerlink&quot; title=&quot;TouchSlop&quot;&gt;&lt;/a&gt;TouchSlop&lt;/h6&gt;&lt;p&gt;TouchSlop是系统所能识别出的被认为是滑动的最小距离，换句话说，当手指在屏幕上滑动时，如果两次滑动之间的距离小于这个常量，那么系统就不认为你是在进行滑动操作，这是一个常量，和设备有关，在不同设备上这个值可能是不同的，通过如下方式即可获取这个常量：&lt;code&gt;ViewConfiguration. get(getContext()).getScaledTouchSlop()&lt;/code&gt;。当我们在处理滑动时，可以利用这个常量来做一些过滤，比如当两次滑动事件的滑动距离小于这个值，我们就可以认为未达到滑动距离的临界值，因此就可以认为它们不是滑动，这样做可以有更好的用户体验可以在源码中找到这个常量的定义，在&lt;code&gt;frameworks/base/core/res/res/values/config.xml&lt;/code&gt;文件中。&lt;/p&gt;
    
    </summary>
    
    
      <category term="Android" scheme="http://blog.huangyuanlove.com/tags/Android/"/>
    
  </entry>
  
  <entry>
    <title>Activity启动模式，启动过程</title>
    <link href="http://blog.huangyuanlove.com/2018/07/26/Activity%E5%90%AF%E5%8A%A8%E6%A8%A1%E5%BC%8F%EF%BC%8C%E5%90%AF%E5%8A%A8%E8%BF%87%E7%A8%8B/"/>
    <id>http://blog.huangyuanlove.com/2018/07/26/Activity启动模式，启动过程/</id>
    <published>2018-07-26T06:20:07.000Z</published>
    <updated>2018-08-04T04:43:47.170Z</updated>
    
    <content type="html"><![CDATA[<p>面试总结，关于Activity启动模式、启动过程，Intent匹配规则、App启动流程等<br><a id="more"></a></p><h5 id="启动模式："><a href="#启动模式：" class="headerlink" title="启动模式："></a>启动模式：</h5><ul><li>standard：标准模式，这也是系统的默认模式。每次启动一个Activity都会重新创建一个新的实例，不管这个实例是否已经存在。</li><li>singleTop：栈顶复用模式。在这种模式下，如果新Activity已经位于任务栈的栈顶，那么此Activity不会被重新创建，同时它的onNewIntent方法会被回调，通过此方法的参数我们可以取出当前请求的信息。需要注意的是，这个Activity的onCreate、onStart不会被系统调用，因为它并没有发生改变。如果新Activity的实例已存在但不是位于栈顶，那么新Activity仍然会重新重建。</li><li>singleTask：栈内复用模式。这是一种单实例模式，在这种模式下，只要Activity在一个栈中存在，那么多次启动此Activity都不会重新创建实例，和singleTop一样，系统也会回调其onNewIntent。</li><li>singleInstance：单实例模式。这是一种加强的singleTask模式，它除了具有singleTask模式的所有特性外，还加强了一点，那就是具有此种模式的Activity只能单独地位于一个任务栈中，</li></ul><p>还有一个参数 <code>TaskAffinity</code>,这个参数标识了一个Activity所需要的任务栈的名字，默认情况下，所有Activity所需的任务栈的名字为应用的包名。当然，我们可以为每个Activity都单独指定TaskAffinity属性，这个属性值必须不能和包名相同，否则就相当于没有指定。TaskAffinity属性主要和singleTask启动模式或者allowTaskReparenting属性配对使用，在其他情况下没有意义。<br>还有Activity中能够影响启动模式、运行状态的标记位：</p><p><strong> FLAG_ACTIVITY_NEW_TASK </strong><br>这个标记位的作用是为Activity指定“singleTask”启动模式，其效果和在XML中指定该启动模式相同。<br><strong> FLAG_ACTIVITY_SINGLE_TOP </strong><br>这个标记位的作用是为Activity指定“singleTop”启动模式，其效果和在XML中指定该启动模式相同。<br><strong> FLAG_ACTIVITY_CLEAR_TOP </strong><br>具有此标记位的Activity，当它启动时，在同一个任务栈中所有位于它上面的Activity都要出栈。这个模式一般需要和FLAG_ACTIVITY_NEW_TASK配合使用，在这种情况下，被启动Activity的实例如果已经存在，那么系统会调用它的onNewIntent。如果被启动的Activity采用standard模式启动，那么它连同它之上的Activity都要出栈，系统会创建新的Activity实例并放入栈顶。通过1.2.1节中的分析可以知道，singleTask启动模式默认就具有此标记位的效果。<br><strong> FLAG_ACTIVITY_EXCLUDE_FROM_RECENTS </strong><br>具有这个标记的Activity不会出现在历史Activity的列表中，当某些情况下我们不希望用户通过历史列表回到我们的Activity的时候这个标记比较有用。它等同于在XML中指定Activity的属性android:excludeFromRecents=”true”。</p><h5 id="Intent匹配规则"><a href="#Intent匹配规则" class="headerlink" title="Intent匹配规则"></a>Intent匹配规则</h5><p>启动Activity分为两种，显式调用和隐式调用。显式调用需要明确地指定被启动对象的组件信息，包括包名和类名，而隐式调用则不需要明确指定组件信息。原则上一个Intent不应该既是显式调用又是隐式调用，如果二者<br>共存的话以显式调用为主。显式调用很简单，这里主要介绍一下隐式调用。隐式调用需要Intent能够匹配目标组件的IntentFilter中所设置的过滤信息，如果不匹配将无法启动目标Activity。<br>为了匹配过滤列表，需要同时匹配过滤列表中的action、category、data信息，否则匹配失败。一个过滤列表中的action、category和data可以有多个，所有的action、category、data分别构成不同类别，同一类别的信息共同约束当前类别的匹配过程。只有一个Intent同时匹配action类别、category类别、data类别才算完全匹配，只有完全匹配才能成功启动目标Activity。另外一点，一个Activity中可以有多个intent-filter，一个Intent只要能匹配任何一组intent-filter即可成功启动对应的Activity。</p><ul><li>action的匹配规则<br>action是一个字符串，系统预定义了一些action，同时我们也可以在应用中定义自己的action。action的匹配规则是Intent中的action必须能够和过滤规则中的action匹配，这里说的匹配是指action的字符串值完全一样。一个过滤规则中可以有多个action，那么只要Intent中的action能够和过滤规则中的任何一个action相同即可匹配成功。需要注意的是，Intent中如果没有指定action，那么匹配失败。另外，action区分大小写，大小写不同字符串相同的action会匹配失败。</li><li>category的匹配规则<br>category是一个字符串，系统预定义了一些category，同时我们也可以在应用中定义自己的category。category的匹配规则和action不同，它要求Intent中如果含有category，那么所有的category都必须和过滤规则中的其中一个category相同。换句话说，Intent中如果出现了category，不管有几个category，对于每个category来说，它必须是过滤规则中已经定义了的category。当然，Intent中可以没有category，如果没有category的话，按照上面的描述，这个Intent仍然可以匹配成功。这里要注意下它和action匹配过程的不同，action是要求Intent中必须有一个action且必须能够和过滤规则中的某个action相同，而category要求<br>Intent可以没有category，但是如果你一旦有category，不管有几个，每个都要能够和过滤规则中的任何一个category相同。</li><li>data的匹配规则<br>data的匹配规则和action类似，如果过滤规则中定义了data，那么Intent中必须也要定义可匹配的data。在介绍data的匹配规则之前，我们需要先了解一下data的结构，因为data稍微有些复杂<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">data</span>   <span class="attr">android:scheme</span>=<span class="string">"string"</span></span></div><div class="line">        <span class="attr">android:host</span>=<span class="string">"string"</span></div><div class="line">        <span class="attr">android:port</span>=<span class="string">"string"</span></div><div class="line">        <span class="attr">android:path</span>=<span class="string">"string"</span></div><div class="line">        <span class="attr">android:pathPattern</span>=<span class="string">"string"</span></div><div class="line">        <span class="attr">android:pathPrefix</span>=<span class="string">"string"</span></div><div class="line">        <span class="attr">android:mimeType</span>=<span class="string">"string"</span> /&gt;</div></pre></td></tr></table></figure></li></ul><p>data由两部分组成，mimeType和URI。mimeType指媒体类型，比如image/jpeg、audio/mpeg4-generic和video/*等，可以表示图片、文本、视频等不同的媒体格式，而URI中包含的数据就比较多了，下面是URI的结构：<br><code>&lt;scheme&gt;://&lt;host&gt;:&lt;port&gt;/[&lt;path&gt;|&lt;pathPrefix&gt;|&lt;pathPattern&gt;]</code><br>有如下过滤规则</p><p><code>&lt;data android:mimeType=&quot;image/*&quot; /&gt;</code><br>这种规则指定了媒体类型为所有类型的图片，那么Intent中的mimeType属性必须为“image/*”才能匹配，这种情况下虽然过滤规则没有指定URI，但是却有默认值，URI的默认值为content和file。也就是说，虽然没有指定URI，但是Intent中的URI部分的schema必须为content或者file才能匹配，这点是需要尤其注意的。为了匹配上面中规则，我们可以写出如下示例<br><code>intent.setDataAndType(Uri.parse(&quot;file://abc&quot;),&quot;image/png&quot;)。</code><br>另外，如果要为Intent指定完整的data，必须要调用setDataAndType方法，不能先调用setData再调用setType，因为这两个方法彼此会清除对方的值。<br>最后，当我们通过隐式方式启动一个Activity的时候，可以做一下判断，看是否有Activity能够匹配我们的隐式Intent，如果不做判断就有可能出现上述的错误了。判断方法有两种：采用PackageManager的resolveActivity方法或者Intent的resolveActivity方法，如果它们找不到匹配的Activity就会返回null，我们通过判断返回值就可以规避上述错误了。另外，PackageManager还提供了queryIntentActivities方法，这个方法和resolveActivity方法不同的是：它不是返回最佳匹配的Activity信息而是返回所有成功匹配的Activity信息。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> List&lt;ResolveInfo&gt; <span class="title">queryIntentActivities</span><span class="params">(Intent intent,<span class="keyword">int</span> flags)</span></span>;</div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> ResolveInfo <span class="title">resolveActivity</span><span class="params">(Intent intent,<span class="keyword">int</span> flags)</span></span>;</div></pre></td></tr></table></figure></p><p>上述两个方法的第一个参数比较好理解，第二个参数需要注意，我们要使用MATCH_DEFAULT_ONLY这个标记位，这个标记位的含义是仅仅匹配那些在intent-filter中声明了<br><code>&lt;category  android:name=&quot;android.intent.category.DEFAULT&quot;/&gt;</code>这个category的Activity。使用这个标记位的意义在于，只要上述两个方法不返回null，那么startActivity一定可以成功。如果不用这个标记位，就可以把intent-filter中category不含DEFAULT的那些Activity给匹配出来，从而导致startActivity可能失败。因为不含有DEFAULT这个category的Activity是无法接收隐式Intent的。</p><h5 id="App启动过程"><a href="#App启动过程" class="headerlink" title="App启动过程"></a>App启动过程</h5><ol><li>点击桌面App图标，Launch进程采用Binder IPC向system_server进程发起startActivity请求</li><li>system_server收到请求后，向zygote进程发送创建进程请求。</li><li>Zygote进程fork出新的子进程，即App进程。</li><li>App进程通过Binder IPC向system_server进程发起attachApplication请求</li><li>system_server进程在收到请求后，进行一系列的准备工作，再通过Binder IPC向App进程发送scheduleLaunchActivity请求。</li><li>App进程的binder线程(ApplicationThread)在收到请求后，通过handler向主线程发送LAUNCH_ACTIVITY消息；</li><li>主线程在收到Message后，通过发射机制创建目标Activity，并回调Activity.onCreate()等方法；</li><li>到此，App便正式启动，开始进入Activity生命周期。</li></ol><p><strong> 涉及到的类 </strong></p><ul><li><code>Activity</code> startActivity方法的真正实现在Activity中。</li><li><code>Instrumentation</code> 每一个应用程序只有一个Instrumentation对象，每个Activity内都有一个对该对象的引用。Instrumentation可以理解为应用进程的管家，ActivityThread要创建或暂停某个Activity时，都需要通过Instrumentation来进行具体的操作,用来辅助Activity完成启动Activity的过程。</li><li><code>ActivityThread</code>（包含ApplicationThread + ApplicationThreadNative + IApplicationThread）：真正启动Activity的实现都在这里,应用的入口类，系统通过调用main函数，开启消息循环队列。ActivityThread所在线程被称为应用的主线程（UI线程）。与ActivityManagerServices配合，一起完成Activity的管理工作。</li><li><code>ActivityManagerService</code> 简称AMS，服务端对象。AMS是Android中最核心的服务之一，主要负责系统中四大组件的启动、切换、调度及应用进程的管理和调度等工作，其职责与操作系统中的进程管理和调度模块相类似，因此它在Android中非常重要，它本身也是一个Binder的实现类。</li><li><code>ActivityManagerProxy</code> AMS服务在当前进程的代理类，负责与AMS通信。</li><li><code>ApplicationThread</code> 用来实现ActivityManagerService与ActivityThread之间的交互。在ActivityManagerService需要管理相关Application中的Activity的生命周期时，通过ApplicationThread的代理对象与ActivityThread通讯。</li><li><code>ApplicationThreadProxy</code> 是ApplicationThread在服务器端的代理，负责和客户端的ApplicationThread通讯。AMS就是通过该代理与ActivityThread进行通信的。</li><li><code>ActivityStack</code> Activity在AMS的栈管理，用来记录已经启动的Activity的先后关系，状态信息等。通过ActivityStack决定是否需要启动新的进程。</li><li><code>ActivityRecord</code> ActivityStack的管理对象，每个Activity在AMS对应一个ActivityRecord，来记录Activity的状态以及其他的管理信息。其实就是服务器端的Activity对象的映像。</li><li><code>TaskRecord</code> AMS抽象出来的一个“任务”的概念，是记录ActivityRecord的栈，一个“Task”包含若干个ActivityRecord。AMS用TaskRecord确保Activity启动和退出的顺序。如果你清楚Activity的4种launchMode，那么对这个概念应该不陌生。</li></ul><p><strong> 基本概念 </strong></p><h6 id="zygote"><a href="#zygote" class="headerlink" title="zygote"></a>zygote</h6><p>Android是基于Linux系统的，而在Linux中，所有的进程都是由init进程直接或者是间接fork出来的，zygote进程也不例外。至于init进程怎么来的，可以搜一下Android系统启动过程。<br>在Android系统里面，zygote是一个进程的名字。Android是基于Linux System的，当你的手机开机的时候，Linux的内核加载完成之后就会启动一个叫“init“的进程。在Linux System里面，所有的进程都是由init进程fork出来的，我们的zygote进程也不例外。<br>我们都知道，每一个App其实都是</p><ul><li>一个单独的虚拟机</li><li>一个单独的进程<br>所以当系统里面的第一个zygote进程运行之后，在这之后再开启App，就相当于开启一个新的进程。而为了实现资源共用和更快的启动速度，Android系统开启新进程的方式，是通过fork第一个zygote进程实现的。所以说，除了第一个zygote进程，其他应用所在的进程都是zygote的子进程，</li></ul><h6 id="SystemServer"><a href="#SystemServer" class="headerlink" title="SystemServer"></a>SystemServer</h6><p>它也是个进程，而且是由zygote进程fork出来的。系统里面重要的服务都是在这个进程里面开启的，比如<code>ActivityManagerService</code>、<code>PackageManagerService</code>、<code>WindowManagerService</code> 等等。在zygote开启的时候，会调用ZygoteInit.main()进行初始化：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"> * Startup class for the zygote process.</div><div class="line"> *</div><div class="line"> * Pre-initializes some classes, and then waits for commands on a UNIX domain</div><div class="line"> * socket. Based on these commands, forks off child processes that inherit</div><div class="line"> * the initial state of the VM.</div><div class="line"> *</div><div class="line"> * Please see &#123;<span class="doctag">@link</span> ZygoteConnection.Arguments&#125; for documentation on the</div><div class="line"> * client protocol.</div><div class="line"> *</div><div class="line"> */</div></pre></td></tr></table></figure><p>从注释上也可以看出这个类主要是为了初始化某些参数。比如<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">preload</span><span class="params">(TimingsTraceLog bootTimingsTraceLog)</span> </span>&#123;</div><div class="line">        Log.d(TAG, <span class="string">"begin preload"</span>);</div><div class="line">        bootTimingsTraceLog.traceBegin(<span class="string">"BeginIcuCachePinning"</span>);</div><div class="line">        beginIcuCachePinning();</div><div class="line">        bootTimingsTraceLog.traceEnd(); <span class="comment">// BeginIcuCachePinning</span></div><div class="line">        bootTimingsTraceLog.traceBegin(<span class="string">"PreloadClasses"</span>);</div><div class="line">        preloadClasses();</div><div class="line">        bootTimingsTraceLog.traceEnd(); <span class="comment">// PreloadClasses</span></div><div class="line">        bootTimingsTraceLog.traceBegin(<span class="string">"PreloadResources"</span>);</div><div class="line">        preloadResources();</div><div class="line">        bootTimingsTraceLog.traceEnd(); <span class="comment">// PreloadResources</span></div><div class="line">        Trace.traceBegin(Trace.TRACE_TAG_DALVIK, <span class="string">"PreloadAppProcessHALs"</span>);</div><div class="line">        nativePreloadAppProcessHALs();</div><div class="line">        Trace.traceEnd(Trace.TRACE_TAG_DALVIK);</div><div class="line">        Trace.traceBegin(Trace.TRACE_TAG_DALVIK, <span class="string">"PreloadOpenGL"</span>);</div><div class="line">        preloadOpenGL();</div><div class="line">        Trace.traceEnd(Trace.TRACE_TAG_DALVIK);</div><div class="line">        preloadSharedLibraries();</div><div class="line">        preloadTextResources();</div><div class="line">        <span class="comment">// Ask the WebViewFactory to do any initialization that must run in the zygote process,</span></div><div class="line">        <span class="comment">// for memory sharing purposes.</span></div><div class="line">        WebViewFactory.prepareWebViewInZygote();</div><div class="line">        endIcuCachePinning();</div><div class="line">        warmUpJcaProviders();</div><div class="line">        Log.d(TAG, <span class="string">"end preload"</span>);</div><div class="line"></div><div class="line">        sPreloadComplete = <span class="keyword">true</span>;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">lazyPreload</span><span class="params">()</span> </span>&#123;</div><div class="line">        Preconditions.checkState(!sPreloadComplete);</div><div class="line">        Log.i(TAG, <span class="string">"Lazily preloading resources."</span>);</div><div class="line"></div><div class="line">        preload(<span class="keyword">new</span> TimingsTraceLog(<span class="string">"ZygoteInitTiming_lazy"</span>, Trace.TRACE_TAG_DALVIK));</div><div class="line">    &#125;</div></pre></td></tr></table></figure></p><p>还有一些关键的方法<code>preloadSharedLibraries()</code>、<code>preloadOpenGL()</code>、<code>preloadTextResources()</code>、<code>preloadClasses()</code>、<code>preloadResources()</code>、<code>preloadDrawables()</code>、<code>preloadColorStateLists()</code> 等.还有一个<code>startSystemServer()</code>方法。</p><h6 id="ActivityManagerService"><a href="#ActivityManagerService" class="headerlink" title="ActivityManagerService"></a>ActivityManagerService</h6><p>简称AMS,服务端对象，负责系统中所有Activity生命周期。它的初始化时机很明确，就是在SystemServer进程开启的时候，就会初始化ActivityManagerService。具体情况可以看一下<code>SystemServer.java</code>类。<br>经过上面这些步骤，我们的ActivityManagerService对象已经创建好了，并且完成了成员变量初始化。而且在这之前，调用createSystemContext()创建系统上下文的时候，也已经完成了mSystemContext和ActivityThread的创建。注意，这是系统进程开启时的流程，在这之后，会开启系统的Launcher程序，完成系统界面的加载与显示。</p><h6 id="为什么说AMS是服务端对象"><a href="#为什么说AMS是服务端对象" class="headerlink" title="为什么说AMS是服务端对象"></a>为什么说AMS是服务端对象</h6><p>其实服务器客户端的概念不仅仅存在于Web开发中，在Android的框架设计中，使用的也是这一种模式。服务器端指的就是所有App共用的系统服务，比如我们这里提到的ActivityManagerService，和前面提到的PackageManagerService、WindowManagerService等等，这些基础的系统服务是被所有的App公用的，当某个App想实现某个操作的时候，要告诉这些系统服务，比如你想打开一个App，那么我们知道了包名和MainActivity类名之后就可以打开</p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">Intent intent = <span class="keyword">new</span> Intent(Intent.ACTION_MAIN);  </div><div class="line">intent.addCategory(Intent.CATEGORY_LAUNCHER);</div><div class="line">ComponentName cn = <span class="keyword">new</span> ComponentName(packageName, className);</div><div class="line">intent.setComponent(cn);  </div><div class="line">startActivity(intent);</div></pre></td></tr></table></figure><p>但是，我们的App通过调用startActivity()并不能直接打开另外一个App，这个方法会通过一系列的调用，最后还是告诉AMS说：“我要打开这个App，我知道他的住址和名字，你帮我打开吧！”所以是AMS来通知zygote进程来fork一个新进程，来开启我们的目标App的。这就像是浏览器想要打开一个超链接一样，浏览器把网页地址发送给服务器，然后还是服务器把需要的资源文件发送给客户端的。</p><p>知道了Android Framework的客户端服务器架构之后，我们还需要了解一件事情，那就是我们的App和AMS(SystemServer进程)还有zygote进程分属于三个独立的进程，他们之间如何通信呢？<br>App与AMS通过Binder进行IPC通信，AMS(SystemServer进程)与zygote通过Socket进行IPC通信。<br>那么AMS有什么用呢？在前面我们知道了，如果想打开一个App的话，需要AMS去通知zygote进程，除此之外，其实所有的Activity的开启、暂停、关闭都需要AMS来控制，所以我们说，AMS负责系统中所有Activity的生命周期。<br>在Android系统中，任何一个Activity的启动都是由AMS和应用程序进程（主要是ActivityThread）相互配合来完成的。AMS服务统一调度系统中所有进程的Activity启动，而每个Activity的启动过程则由其所属的进程具体来完成。</p><h6 id="Launcher"><a href="#Launcher" class="headerlink" title="Launcher"></a>Launcher</h6><p>当我们点击手机桌面上的图标的时候，App就由Launcher开始启动了。Launcher本质上也是一个应用程序，和我们的App一样，也是继承自Activity，系统源码可以在这里看 <a href="http://androidxref.com/8.0.0_r4/xref/packages/apps/Launcher3/src/com/android/launcher3/Launcher.java" target="_blank" rel="external">http://androidxref.com/8.0.0_r4/xref/packages/apps/Launcher3/src/com/android/launcher3/Launcher.java</a><br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="function">View <span class="title">createShortcut</span><span class="params">(<span class="keyword">int</span> layoutResId, ViewGroup parent, ShortcutInfo info)</span> </span>&#123;</div><div class="line">        BubbleTextView favorite = (BubbleTextView) mInflater.inflate(layoutResId, parent, <span class="keyword">false</span>);</div><div class="line">        favorite.applyFromShortcutInfo(info, mIconCache);</div><div class="line">        favorite.setOnClickListener(<span class="keyword">this</span>);</div><div class="line">        <span class="keyword">return</span> favorite;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><p>创建图标并设置点击监听<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line">     *</div><div class="line">     * Launches the intent referred by the clicked shortcut.</div><div class="line">     * <span class="doctag">@param</span> v The view representing the clicked shortcut.</div><div class="line">     */</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onClick</span><span class="params">(View v)</span> </span>&#123;</div><div class="line">        <span class="comment">// Make sure that rogue clicks don't get through while allapps is launching, or after the</span></div><div class="line">        <span class="comment">// view has detached (it's possible for this to happen if the view is removed mid touch).</span></div><div class="line">        <span class="keyword">if</span> (v.getWindowToken() == <span class="keyword">null</span>) &#123;</div><div class="line">            <span class="keyword">return</span>;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="keyword">if</span> (!mWorkspace.isFinishedSwitchingState()) &#123;</div><div class="line">            <span class="keyword">return</span>;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        Object tag = v.getTag();</div><div class="line">        <span class="keyword">if</span> (tag <span class="keyword">instanceof</span> ShortcutInfo) &#123;</div><div class="line">            <span class="comment">// Open shortcut</span></div><div class="line">            <span class="keyword">final</span> Intent intent = ((ShortcutInfo) tag).intent;</div><div class="line">            <span class="keyword">int</span>[] pos = <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">2</span>];</div><div class="line">            v.getLocationOnScreen(pos);</div><div class="line">            intent.setSourceBounds(<span class="keyword">new</span> Rect(pos[<span class="number">0</span>], pos[<span class="number">1</span>],</div><div class="line">                    pos[<span class="number">0</span>] + v.getWidth(), pos[<span class="number">1</span>] + v.getHeight()));</div><div class="line"></div><div class="line">            <span class="keyword">boolean</span> success = startActivitySafely(v, intent, tag);</div><div class="line"></div><div class="line">            <span class="keyword">if</span> (success &amp;&amp; v <span class="keyword">instanceof</span> BubbleTextView) &#123;</div><div class="line">                mWaitingForResume = (BubbleTextView) v;</div><div class="line">                mWaitingForResume.setStayPressed(<span class="keyword">true</span>);</div><div class="line">            &#125;</div><div class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (tag <span class="keyword">instanceof</span> FolderInfo) &#123;</div><div class="line">            <span class="keyword">if</span> (v <span class="keyword">instanceof</span> FolderIcon) &#123;</div><div class="line">                FolderIcon fi = (FolderIcon) v;</div><div class="line">                handleFolderClick(fi);</div><div class="line">            &#125;</div><div class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (v == mAllAppsButton) &#123;</div><div class="line">            <span class="keyword">if</span> (isAllAppsVisible()) &#123;</div><div class="line">                showWorkspace(<span class="keyword">true</span>);</div><div class="line">            &#125; <span class="keyword">else</span> &#123;</div><div class="line">                onClickAllAppsButton(v);</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;</div></pre></td></tr></table></figure></p><p>从上面可以看到，在桌面上点击快捷图标的时候，会调用<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">startActivitySafely(v, intent, tag);</div></pre></td></tr></table></figure></p><p>具体代码就不抄了，看一下上面的链接中的源码就好，在该方法中调用了<code>startActivity(v, intent, tag)</code>，这里会调用Activity.startActivity(intent, opts.toBundle())，这个方法熟悉吗？这就是我们经常用到的Activity.startActivity(Intent)的重载函数。而且由于设置了<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">intent.addFlags(Intent.FLAG_ACTIVITY_NEW_TASK);</div></pre></td></tr></table></figure></p><p>所以这个Activity会添加到一个新的Task栈中，而且，startActivity()调用的其实是startActivityForResult()这个方法。<br>所以现在明确了，Launcher中开启一个App，其实和我们在Activity中直接startActivity()基本一样，都是调用了Activity.startActivityForResult()。</p><h6 id="Instrumentation"><a href="#Instrumentation" class="headerlink" title="Instrumentation"></a>Instrumentation</h6><p>每个Activity都持有Instrumentation对象的一个引用，但是整个进程只会存在一个Instrumentation对象。当startActivityForResult()调用之后，实际上还是调用了mInstrumentation.execStartActivity().<br>下面是mInstrumetation.execStartActivity()的实现<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> ActivityResult <span class="title">execStartActivity</span><span class="params">(</span></span></div><div class="line">            Context who, IBinder contextThread, IBinder token, Activity target,</div><div class="line">            Intent intent, <span class="keyword">int</span> requestCode, Bundle options) &#123;</div><div class="line">        IApplicationThread whoThread = (IApplicationThread) contextThread;</div><div class="line">        Uri referrer = target != <span class="keyword">null</span> ? target.onProvideReferrer() : <span class="keyword">null</span>;</div><div class="line">        <span class="keyword">if</span> (referrer != <span class="keyword">null</span>) &#123;</div><div class="line">            intent.putExtra(Intent.EXTRA_REFERRER, referrer);</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">if</span> (mActivityMonitors != <span class="keyword">null</span>) &#123;</div><div class="line">            <span class="keyword">synchronized</span> (mSync) &#123;</div><div class="line">                <span class="keyword">final</span> <span class="keyword">int</span> N = mActivityMonitors.size();</div><div class="line">                <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;N; i++) &#123;</div><div class="line">                    <span class="keyword">final</span> ActivityMonitor am = mActivityMonitors.get(i);</div><div class="line">                    <span class="keyword">if</span> (am.match(who, <span class="keyword">null</span>, intent)) &#123;</div><div class="line">                        am.mHits++;</div><div class="line">                        <span class="keyword">if</span> (am.isBlocking()) &#123;</div><div class="line">                            <span class="keyword">return</span> requestCode &gt;= <span class="number">0</span> ? am.getResult() : <span class="keyword">null</span>;</div><div class="line">                        &#125;</div><div class="line">                        <span class="keyword">break</span>;</div><div class="line">                    &#125;</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">try</span> &#123;</div><div class="line">            intent.migrateExtraStreamToClipData();</div><div class="line">            intent.prepareToLeaveProcess();</div><div class="line">            <span class="keyword">int</span> result = ActivityManagerNative.getDefault()</div><div class="line">                .startActivity(whoThread, who.getBasePackageName(), intent,</div><div class="line">                        intent.resolveTypeIfNeeded(who.getContentResolver()),</div><div class="line">                        token, target != <span class="keyword">null</span> ? target.mEmbeddedID : <span class="keyword">null</span>,</div><div class="line">                        requestCode, <span class="number">0</span>, <span class="keyword">null</span>, options);</div><div class="line">            checkStartActivityResult(result, intent);</div><div class="line">        &#125; <span class="keyword">catch</span> (RemoteException e) &#123;</div><div class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(<span class="string">"Failure from system"</span>, e);</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</div><div class="line">    &#125;</div></pre></td></tr></table></figure></p><p>这里的 ActivityManagerNative.getDefault 返回ActivityManagerService的远程接口，即 ActivityManagerProxy 接口，有人可能会问了为什么会是ActivityManagerProxy，这就涉及到Binder通信了，这里不再展开。通过Binder驱动程序， ActivityManagerProxy 与AMS服务通信，则实现了跨进程到System进程。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line">    * Retrieve the system's default/global activity manager.</div><div class="line">    */</div><div class="line">   <span class="function"><span class="keyword">static</span> <span class="keyword">public</span> IActivityManager <span class="title">getDefault</span><span class="params">()</span> </span>&#123;</div><div class="line">       <span class="keyword">return</span> gDefault.get();</div><div class="line">   &#125;</div><div class="line"></div><div class="line">   <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Singleton&lt;IActivityManager&gt; gDefault = <span class="keyword">new</span> Singleton&lt;IActivityManager&gt;() &#123;</div><div class="line">       <span class="function"><span class="keyword">protected</span> IActivityManager <span class="title">create</span><span class="params">()</span> </span>&#123;</div><div class="line">           IBinder b = ServiceManager.getService(<span class="string">"activity"</span>);</div><div class="line">           <span class="keyword">if</span> (<span class="keyword">false</span>) &#123;</div><div class="line">               Log.v(<span class="string">"ActivityManager"</span>, <span class="string">"default service binder = "</span> + b);</div><div class="line">           &#125;</div><div class="line">           IActivityManager am = asInterface(b);</div><div class="line">           <span class="keyword">if</span> (<span class="keyword">false</span>) &#123;</div><div class="line">               Log.v(<span class="string">"ActivityManager"</span>, <span class="string">"default service = "</span> + am);</div><div class="line">           &#125;</div><div class="line">           <span class="keyword">return</span> am;</div><div class="line">       &#125;</div><div class="line">   &#125;;</div><div class="line"></div><div class="line">   <span class="comment">/**</span></div><div class="line">    * Cast a Binder object into an activity manager interface, generating</div><div class="line">    * a proxy if needed.</div><div class="line">    */</div><div class="line">   <span class="function"><span class="keyword">static</span> <span class="keyword">public</span> IActivityManager <span class="title">asInterface</span><span class="params">(IBinder obj)</span> </span>&#123;</div><div class="line">       <span class="keyword">if</span> (obj == <span class="keyword">null</span>) &#123;</div><div class="line">           <span class="keyword">return</span> <span class="keyword">null</span>;</div><div class="line">       &#125;</div><div class="line">       IActivityManager in =</div><div class="line">           (IActivityManager)obj.queryLocalInterface(descriptor);</div><div class="line">       <span class="keyword">if</span> (in != <span class="keyword">null</span>) &#123;</div><div class="line">           <span class="keyword">return</span> in;</div><div class="line">       &#125;</div><div class="line"></div><div class="line">       <span class="keyword">return</span> <span class="keyword">new</span> ActivityManagerProxy(obj);</div><div class="line">   &#125;</div></pre></td></tr></table></figure><h6 id="AMS响应Launcher进程请求"><a href="#AMS响应Launcher进程请求" class="headerlink" title="AMS响应Launcher进程请求"></a>AMS响应Launcher进程请求</h6><p>至此，点击桌面图标调用startActivity()，终于把数据和要开启Activity的请求发送到了AMS了,AMS收到startActivity的请求之后，会按照如下的方法链进行调用：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">int</span> <span class="title">startActivity</span><span class="params">(IApplicationThread caller, String callingPackage,</span></span></div><div class="line">            Intent intent, String resolvedType, IBinder resultTo, String resultWho, <span class="keyword">int</span> requestCode,</div><div class="line">            <span class="keyword">int</span> startFlags, ProfilerInfo profilerInfo, Bundle options) &#123;</div><div class="line">        <span class="keyword">return</span> startActivityAsUser(caller, callingPackage, intent, resolvedType, resultTo,</div><div class="line">            resultWho, requestCode, startFlags, profilerInfo, options,</div><div class="line">            UserHandle.getCallingUserId());</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">int</span> <span class="title">startActivityAsUser</span><span class="params">(IApplicationThread caller, String callingPackage,</span></span></div><div class="line">            Intent intent, String resolvedType, IBinder resultTo, String resultWho, <span class="keyword">int</span> requestCode,</div><div class="line">            <span class="keyword">int</span> startFlags, ProfilerInfo profilerInfo, Bundle options, <span class="keyword">int</span> userId) &#123;</div><div class="line">        enforceNotIsolatedCaller(<span class="string">"startActivity"</span>);</div><div class="line">        userId = handleIncomingUser(Binder.getCallingPid(), Binder.getCallingUid(), userId,</div><div class="line">                <span class="keyword">false</span>, ALLOW_FULL_ONLY, <span class="string">"startActivity"</span>, <span class="keyword">null</span>);</div><div class="line">        <span class="comment">// <span class="doctag">TODO:</span> Switch to user app stacks here.</span></div><div class="line">        <span class="keyword">return</span> mStackSupervisor.startActivityMayWait(caller, -<span class="number">1</span>, callingPackage, intent,</div><div class="line">                resolvedType, <span class="keyword">null</span>, <span class="keyword">null</span>, resultTo, resultWho, requestCode, startFlags,</div><div class="line">                profilerInfo, <span class="keyword">null</span>, <span class="keyword">null</span>, options, <span class="keyword">false</span>, userId, <span class="keyword">null</span>, <span class="keyword">null</span>);</div><div class="line">    &#125;</div></pre></td></tr></table></figure></p><p>这里又出现了一个<code>mStackSupervisor</code>，定义是这么说的<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/** Run all ActivityStacks through this */</span></div><div class="line">    ActivityStackSupervisor mStackSupervisor;</div></pre></td></tr></table></figure></p><p>在<code>mStackSupervisor.startActivityMayWait()</code>方法中又调用了<code>startActivityLocked()</code>方法，接着调用了<code>startActivityUncheckedLocked()</code>方法，在这个方法中一大堆眼花缭乱的判断，最终调用了<code>targetStack.startActivityLocked(r, newTask, doResume, keepCurTransition, options)</code>方法，然后调用了<code>mStackSupervisor.resumeTopActivitiesLocked(this, r, options)</code>方法，然后调用<code>result = targetStack.resumeTopActivityLocked(target, targetOptions)</code>方法，调用<code>result = resumeTopActivityInnerLocked(prev, options)</code>方法，在这个方法里，prev.app为记录启动Lancher进程的ProcessRecord，prev.app.thread为Lancher进程的远程调用接口IApplicationThead，所以可以调用prev.app.thread.schedulePauseActivity，到Lancher进程暂停指定Activity。至此，AMS对Launcher的请求已经响应，这是我们发现又通过Binder通信回调至Launcher进程</p><h6 id="Launcher进程挂起Launcher，再次通知AMS"><a href="#Launcher进程挂起Launcher，再次通知AMS" class="headerlink" title="Launcher进程挂起Launcher，再次通知AMS"></a>Launcher进程挂起Launcher，再次通知AMS</h6><p>看一下怎么挂起Launcher的,在ActivityThread中：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">handlePauseActivity</span><span class="params">(IBinder token, <span class="keyword">boolean</span> finished,</span></span></div><div class="line">            <span class="keyword">boolean</span> userLeaving, <span class="keyword">int</span> configChanges, <span class="keyword">boolean</span> dontReport) &#123;</div><div class="line">        ActivityClientRecord r = mActivities.get(token);</div><div class="line">        <span class="keyword">if</span> (r != <span class="keyword">null</span>) &#123;</div><div class="line">            <span class="comment">//Slog.v(TAG, "userLeaving=" + userLeaving + " handling pause of " + r);</span></div><div class="line">            <span class="keyword">if</span> (userLeaving) &#123;</div><div class="line">                performUserLeavingActivity(r);</div><div class="line">            &#125;</div><div class="line"></div><div class="line">            r.activity.mConfigChangeFlags |= configChanges;</div><div class="line">            performPauseActivity(token, finished, r.isPreHoneycomb());</div><div class="line"></div><div class="line">            <span class="comment">// Make sure any pending writes are now committed.</span></div><div class="line">            <span class="keyword">if</span> (r.isPreHoneycomb()) &#123;</div><div class="line">                QueuedWork.waitToFinish();</div><div class="line">            &#125;</div><div class="line"></div><div class="line">            <span class="comment">// Tell the activity manager we have paused.</span></div><div class="line">            <span class="keyword">if</span> (!dontReport) &#123;</div><div class="line">                <span class="keyword">try</span> &#123;</div><div class="line">                    ActivityManagerNative.getDefault().activityPaused(token);</div><div class="line">                &#125; <span class="keyword">catch</span> (RemoteException ex) &#123;</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">            mSomeActivitiesChanged = <span class="keyword">true</span>;</div><div class="line">        &#125;</div><div class="line">    &#125;</div></pre></td></tr></table></figure></p><p>这部分Launcher的ActivityThread处理页面Paused并且再次通过ActivityManagerProxy通知AMS。</p><h6 id="AMS创建新的进程"><a href="#AMS创建新的进程" class="headerlink" title="AMS创建新的进程"></a>AMS创建新的进程</h6><p>创建新进程的时候，AMS会保存一个ProcessRecord信息，如果应用程序中的AndroidManifest.xml配置文件中，我们没有指定Application标签的process属性，系统就会默认使用package的名称。每一个应用程序都有自己的uid，因此，这里uid + process的组合就可以为每一个应用程序创建一个ProcessRecord。<br>在<code>ActivityManagerService</code>中，<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">void</span> <span class="title">startProcessLocked</span><span class="params">(ProcessRecord app, String hostingType,</span></span></div><div class="line">            String hostingNameStr, String abiOverride, String entryPoint, String[] entryPointArgs) &#123;</div><div class="line">        <span class="keyword">long</span> startTime = SystemClock.elapsedRealtime();</div><div class="line">        ......</div><div class="line">        <span class="comment">// Start the process.  It will either succeed and return a result containing</span></div><div class="line">            <span class="comment">// the PID of the new process, or else throw a RuntimeException.</span></div><div class="line">            <span class="keyword">boolean</span> isActivityProcess = (entryPoint == <span class="keyword">null</span>);</div><div class="line">            <span class="keyword">if</span> (entryPoint == <span class="keyword">null</span>) entryPoint = <span class="string">"android.app.ActivityThread"</span>;</div><div class="line">            Trace.traceBegin(Trace.TRACE_TAG_ACTIVITY_MANAGER, <span class="string">"Start proc: "</span> +</div><div class="line">                    app.processName);</div><div class="line">            checkTime(startTime, <span class="string">"startProcess: asking zygote to start proc"</span>);</div><div class="line">            Process.ProcessStartResult startResult = Process.start(entryPoint,</div><div class="line">                    app.processName, uid, uid, gids, debugFlags, mountExternal,</div><div class="line">                    app.info.targetSdkVersion, app.info.seinfo, requiredAbi, instructionSet,</div><div class="line">                    app.info.dataDir, entryPointArgs);</div><div class="line">            checkTime(startTime, <span class="string">"startProcess: returned from zygote!"</span>);</div><div class="line">            Trace.traceEnd(Trace.TRACE_TAG_ACTIVITY_MANAGER);</div><div class="line"></div><div class="line">            <span class="keyword">if</span> (app.isolated) &#123;</div><div class="line">                mBatteryStatsService.addIsolatedUid(app.uid, app.info.uid);</div><div class="line">            &#125;</div><div class="line">            mBatteryStatsService.noteProcessStart(app.processName, app.info.uid);</div><div class="line">            checkTime(startTime, <span class="string">"startProcess: done updating battery stats"</span>);</div></pre></td></tr></table></figure></p><p>这里主要是调用Process.start接口来创建一个新的进程，新的进程会导入android.app.ActivityThread类，并且执行它的main函数，这就是每一个应用程序都有一个ActivityThread实例来对应的原因。</p><h6 id="应用进程初始化"><a href="#应用进程初始化" class="headerlink" title="应用进程初始化"></a>应用进程初始化</h6><p>来看Activity的main函数，这里绑定了主线程的Looper，并进入消息循环，大家应该知道，整个Android系统是消息驱动的，这也是为什么主线程默认绑定Looper的原因：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</div><div class="line">        Trace.traceBegin(Trace.TRACE_TAG_ACTIVITY_MANAGER, <span class="string">"ActivityThreadMain"</span>);</div><div class="line">        SamplingProfilerIntegration.start();</div><div class="line"></div><div class="line">        <span class="comment">// CloseGuard defaults to true and can be quite spammy.  We</span></div><div class="line">        <span class="comment">// disable it here, but selectively enable it later (via</span></div><div class="line">        <span class="comment">// StrictMode) on debug builds, but using DropBox, not logs.</span></div><div class="line">        CloseGuard.setEnabled(<span class="keyword">false</span>);</div><div class="line"></div><div class="line">        Environment.initForCurrentUser();</div><div class="line"></div><div class="line">        <span class="comment">// Set the reporter for event logging in libcore</span></div><div class="line">        EventLogger.setReporter(<span class="keyword">new</span> EventLoggingReporter());</div><div class="line"></div><div class="line">        AndroidKeyStoreProvider.install();</div><div class="line"></div><div class="line">        <span class="comment">// Make sure TrustedCertificateStore looks in the right place for CA certificates</span></div><div class="line">        <span class="keyword">final</span> File configDir = Environment.getUserConfigDirectory(UserHandle.myUserId());</div><div class="line">        TrustedCertificateStore.setDefaultUserDirectory(configDir);</div><div class="line"></div><div class="line">        Process.setArgV0(<span class="string">"&lt;pre-initialized&gt;"</span>);</div><div class="line"></div><div class="line">        Looper.prepareMainLooper();</div><div class="line"></div><div class="line">        ActivityThread thread = <span class="keyword">new</span> ActivityThread();</div><div class="line">        thread.attach(<span class="keyword">false</span>);</div><div class="line"></div><div class="line">        <span class="keyword">if</span> (sMainThreadHandler == <span class="keyword">null</span>) &#123;</div><div class="line">            sMainThreadHandler = thread.getHandler();</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="keyword">if</span> (<span class="keyword">false</span>) &#123;</div><div class="line">            Looper.myLooper().setMessageLogging(<span class="keyword">new</span></div><div class="line">                    LogPrinter(Log.DEBUG, <span class="string">"ActivityThread"</span>));</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="comment">// End of event ActivityThreadMain.</span></div><div class="line">        Trace.traceEnd(Trace.TRACE_TAG_ACTIVITY_MANAGER);</div><div class="line">        Looper.loop();</div><div class="line"></div><div class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(<span class="string">"Main thread loop unexpectedly exited"</span>);</div><div class="line">    &#125;</div></pre></td></tr></table></figure></p><p>attach函数最终调用了ActivityManagerService的远程接口ActivityManagerProxy的attachApplication函数，传入的参数是mAppThread，这是一个ApplicationThread类型的Binder对象，它的作用是AMS与应用进程进行进程间通信的。<br>将进程和指定的Application绑定起来。这个是通过上节的ActivityThread对象中调用bindApplication()方法完成的。该方法发送一个BIND_APPLICATION的消息到消息队列中, 最终通过handleBindApplication()方法处理该消息. 然后调用makeApplication()方法来加载App的classes到内存中。</p><h6 id="在AMS中注册应用进程，启动栈顶页面"><a href="#在AMS中注册应用进程，启动栈顶页面" class="headerlink" title="在AMS中注册应用进程，启动栈顶页面"></a>在AMS中注册应用进程，启动栈顶页面</h6><p>mMainStack.topRunningActivityLocked(null)从堆栈顶端取出要启动的Activity，并在realStartActivityLockedhan函数中通过ApplicationThreadProxy调回App进程启动页面。<br>在<code>ActivityStackSupervisor</code>中<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">final</span> <span class="keyword">boolean</span> <span class="title">realStartActivityLocked</span><span class="params">(ActivityRecord r,</span></span></div><div class="line">            ProcessRecord app, <span class="keyword">boolean</span> andResume, <span class="keyword">boolean</span> checkConfig)</div><div class="line">            <span class="keyword">throws</span> RemoteException &#123;</div><div class="line">                    app.thread.scheduleLaunchActivity(<span class="keyword">new</span> Intent(r.intent), r.appToken,</div><div class="line">                    System.identityHashCode(r), r.info, <span class="keyword">new</span> Configuration(mService.mConfiguration),</div><div class="line">                    <span class="keyword">new</span> Configuration(stack.mOverrideConfig), r.compat, r.launchedFromPackage,</div><div class="line">                    task.voiceInteractor, app.repProcState, r.icicle, r.persistentState, results,</div><div class="line">                    newIntents, !andResume, mService.isNextTransitionForward(), profilerInfo);</div><div class="line">            &#125;</div></pre></td></tr></table></figure></p><p>它会调用application线程对象中的scheduleLaunchActivity()发送一个LAUNCH_ACTIVITY消息到消息队列中, 通过 handleLaunchActivity()来处理该消息。在 handleLaunchActivity()通过performLaunchActiivty()方法回调Activity的onCreate()方法和onStart()方法，然后通过handleResumeActivity()方法，回调Activity的onResume()方法，而后会通知AMS该MainActivity已经处于resume状态最终显示Activity界面。<br>至此，整个启动流程告一段落。</p><p>最后：</p><h6 id="一个App的程序入口到底是什么？"><a href="#一个App的程序入口到底是什么？" class="headerlink" title="一个App的程序入口到底是什么？"></a>一个App的程序入口到底是什么？</h6><p>是ActivityThread.main()。</p><h6 id="整个App的主线程的消息循环是在哪里创建的？"><a href="#整个App的主线程的消息循环是在哪里创建的？" class="headerlink" title="整个App的主线程的消息循环是在哪里创建的？"></a>整个App的主线程的消息循环是在哪里创建的？</h6><p>是在ActivityThread初始化的时候，就已经创建消息循环了，所以在主线程里面创建Handler不需要指定Looper，而如果在其他线程使用Handler，则需要单独使用Looper.prepare()和Looper.loop()创建消息循环。可以看ActivityThread的main方法</p><h6 id="Application是在什么时候创建的？onCreate-什么时候调用的？"><a href="#Application是在什么时候创建的？onCreate-什么时候调用的？" class="headerlink" title="Application是在什么时候创建的？onCreate()什么时候调用的？"></a>Application是在什么时候创建的？onCreate()什么时候调用的？</h6><p>也是在ActivityThread.main()的时候，就是在thread.attach(false)的时候。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">if</span> (!system) &#123;</div><div class="line">            ViewRootImpl.addFirstDrawHandler(<span class="keyword">new</span> Runnable() &#123;</div><div class="line">                <span class="meta">@Override</span></div><div class="line">                <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</div><div class="line">                    ensureJitEnabled();</div><div class="line">                &#125;</div><div class="line">            &#125;);</div><div class="line">            android.ddm.DdmHandleAppName.setAppName(<span class="string">"&lt;pre-initialized&gt;"</span>,</div><div class="line">                                                    UserHandle.myUserId());</div><div class="line">            RuntimeInit.setApplicationObject(mAppThread.asBinder());</div><div class="line">            <span class="keyword">final</span> IActivityManager mgr = ActivityManagerNative.getDefault();</div><div class="line">            <span class="keyword">try</span> &#123;</div><div class="line">                mgr.attachApplication(mAppThread);</div><div class="line">            &#125; <span class="keyword">catch</span> (RemoteException ex) &#123;</div><div class="line">                <span class="comment">// Ignore</span></div><div class="line">            &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>这里需要关注的就是mgr.attachApplication(mAppThread)，这个就会通过Binder调用到AMS里面对应的方法:<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Override</span></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">void</span> <span class="title">attachApplication</span><span class="params">(IApplicationThread thread)</span> </span>&#123;</div><div class="line">    <span class="keyword">synchronized</span> (<span class="keyword">this</span>) &#123;</div><div class="line">        <span class="keyword">int</span> callingPid = Binder.getCallingPid();</div><div class="line">        <span class="keyword">final</span> <span class="keyword">long</span> origId = Binder.clearCallingIdentity();</div><div class="line">        attachApplicationLocked(thread, callingPid);</div><div class="line">        Binder.restoreCallingIdentity(origId);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><p>然后调用的就是<code>private final boolean attachApplicationLocked(IApplicationThread thread,int pid)</code>方法，thread是IApplicationThread，实际上就是ApplicationThread在服务端的代理类ApplicationThreadProxy，然后又通过IPC就会调用到ApplicationThread的对应方法。这个方法里面又调用了<code>sendMessage()</code>，里面有函数的编号H.BIND_APPLICATION，然后这个Messge会被H这个Handler处理:<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">private</span> <span class="class"><span class="keyword">class</span> <span class="title">H</span> <span class="keyword">extends</span> <span class="title">Handler</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> BIND_APPLICATION        = <span class="number">110</span>;</div><div class="line">    <span class="keyword">case</span> BIND_APPLICATION:</div><div class="line">                    Trace.traceBegin(Trace.TRACE_TAG_ACTIVITY_MANAGER, <span class="string">"bindApplication"</span>);</div><div class="line">                    AppBindData data = (AppBindData)msg.obj;</div><div class="line">                    handleBindApplication(data);</div><div class="line">                    Trace.traceEnd(Trace.TRACE_TAG_ACTIVITY_MANAGER);</div><div class="line">                    <span class="keyword">break</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><p>然后在<code>handleBindApplication(data)</code>方法中<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div></pre></td><td class="code"><pre><div class="line"> <span class="keyword">try</span> &#123;</div><div class="line">      java.lang.ClassLoader cl = instrContext.getClassLoader();</div><div class="line">      mInstrumentation = (Instrumentation)cl.loadClass(data.instrumentationName.getClassName()).newInstance();</div><div class="line">&#125; <span class="keyword">catch</span> (Exception e) &#123;</div><div class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(<span class="string">"Unable to instantiate instrumentation "</span>+ data.instrumentationName + <span class="string">": "</span> + e.toString(), e);</div><div class="line"></div><div class="line">        ......</div><div class="line">         <span class="comment">// Do this after providers, since instrumentation tests generally start their</span></div><div class="line">            <span class="comment">// test thread at this point, and we don't want that racing.</span></div><div class="line">            <span class="keyword">try</span> &#123;</div><div class="line">                mInstrumentation.onCreate(data.instrumentationArgs);</div><div class="line">            &#125;</div><div class="line">            <span class="keyword">catch</span> (Exception e) &#123;</div><div class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(</div><div class="line">                    <span class="string">"Exception thrown in onCreate() of "</span></div><div class="line">                    + data.instrumentationName + <span class="string">": "</span> + e.toString(), e);</div><div class="line">            &#125;</div><div class="line"></div><div class="line">            <span class="keyword">try</span> &#123;</div><div class="line">                mInstrumentation.callApplicationOnCreate(app);</div><div class="line">            &#125; <span class="keyword">catch</span> (Exception e) &#123;</div><div class="line">                <span class="keyword">if</span> (!mInstrumentation.onException(app, e)) &#123;</div><div class="line">                    <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(</div><div class="line">                        <span class="string">"Unable to create application "</span> + app.getClass().getName()</div><div class="line">                        + <span class="string">": "</span> + e.toString(), e);</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">        &#125; <span class="keyword">finally</span> &#123;</div><div class="line">            StrictMode.setThreadPolicy(savedPolicy);</div><div class="line">        &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><p>不同的版本代码不尽相同，但是基本逻辑不会变。<br>参考、抄袭的链接如下：<br><a href="https://blog.csdn.net/bfboys/article/details/52564531" target="_blank" rel="external">https://blog.csdn.net/bfboys/article/details/52564531</a><br><a href="https://www.jianshu.com/p/a72c5ccbd150" target="_blank" rel="external">https://www.jianshu.com/p/a72c5ccbd150</a><br><a href="https://www.jianshu.com/p/6037f6fda285" target="_blank" rel="external">https://www.jianshu.com/p/6037f6fda285</a><br><a href="https://www.jianshu.com/p/a72c5ccbd150" target="_blank" rel="external">https://www.jianshu.com/p/a72c5ccbd150</a></p><hr><p>以上</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;面试总结，关于Activity启动模式、启动过程，Intent匹配规则、App启动流程等&lt;br&gt;
    
    </summary>
    
    
      <category term="Android" scheme="http://blog.huangyuanlove.com/tags/Android/"/>
    
      <category term="面试" scheme="http://blog.huangyuanlove.com/tags/%E9%9D%A2%E8%AF%95/"/>
    
  </entry>
  
  <entry>
    <title>Android多进程三</title>
    <link href="http://blog.huangyuanlove.com/2018/07/23/Android%E5%A4%9A%E8%BF%9B%E7%A8%8B%E4%B8%89/"/>
    <id>http://blog.huangyuanlove.com/2018/07/23/Android多进程三/</id>
    <published>2018-07-23T09:38:39.000Z</published>
    <updated>2018-08-04T04:47:53.768Z</updated>
    
    <content type="html"><![CDATA[<p>Android中中IPC方式有很多，比如使用Bundle，使用文件共享，使用Messenger，使用AIDL，使用ContentProvider，使用Socket等。前两种方式比较简单，自己玩。<br>下面主要是抄的《Android开发艺术探索》2.4.4章节，看过书的就不用看了。<br><a id="more"></a><br>上一篇主要抄了Messenger来进行进程间通信的方法，可以发现Messenger是以串行的方式处理客户端发来的消息，如果大量的消息同时发送到服务端，服务端仍然只能一个个处理，如果有大量的并发请求，那么用Messenger就不太合适了。同时，Messenger的作用主要是为了传递消息，很多时候我们可能需要跨进程调用服务端的方法，这种情形用Messenger就无法做到了，但是我们可以使用AIDL来实现跨进程的方法调用。AIDL也是Messenger的底层实现，因此Messenger本质上也是AIDL，只不过系统为我们做了封装从而方便上层的调用而已。在上一节中，我们介绍了Binder的概念，大家对Binder也有了一定的了解，在Binder的基础上我们可以更加容易地理解AIDL。这里先介绍使用AIDL来进行进程间通信的流程，分为服务端和客户端两个方面。</p><h5 id="服务端"><a href="#服务端" class="headerlink" title="服务端"></a>服务端</h5><p>服务端首先要创建一个Service用来监听客户端的连接请求，然后创建一个AIDL文件，将暴露给客户端的接口在这个AIDL文件中声明，最后在Service中实现这个AIDL接口即可。</p><h5 id="客户端"><a href="#客户端" class="headerlink" title="客户端"></a>客户端</h5><p>客户端所要做事情就稍微简单一些，首先需要绑定服务端的Service，绑定成功后，将服务端返回的Binder对象转成AIDL接口所属的类型，接着就可以调用AIDL中的方法了。</p><h5 id="具体实现方式"><a href="#具体实现方式" class="headerlink" title="具体实现方式"></a>具体实现方式</h5><h6 id="AIDL接口的创建"><a href="#AIDL接口的创建" class="headerlink" title="AIDL接口的创建"></a>AIDL接口的创建</h6><p>收看看AIDL接口的创建，如下所示创建了一个后缀为AIDL的文件，在里面声明了一个接口和两个方法。创建AIDL文件的方式可以看这个<a href="http://blog.huangyuanlove.com/2018/06/21/Android%E5%A4%9A%E8%BF%9B%E7%A8%8B-%E4%B8%80/#more">Android多进程(一)</a></p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// IBookManager.aidl</span></div><div class="line"><span class="keyword">package</span> com.huangyuanlove.testandroid;</div><div class="line"></div><div class="line"><span class="comment">// Declare any non-default types here with import statements</span></div><div class="line"><span class="keyword">import</span> com.huangyuanlove.testandroid.Book;</div><div class="line"><span class="class"><span class="keyword">interface</span> <span class="title">IBookManager</span> </span>&#123;</div><div class="line">    <span class="comment">/**</span></div><div class="line">     * Demonstrates some basic types that you can use as parameters</div><div class="line">     * and return values in AIDL.</div><div class="line">     */</div><div class="line">    <span class="function"><span class="keyword">void</span> <span class="title">basicTypes</span><span class="params">(<span class="keyword">int</span> anInt, <span class="keyword">long</span> aLong, <span class="keyword">boolean</span> aBoolean, <span class="keyword">float</span> aFloat,</span></span></div><div class="line">            <span class="keyword">double</span> aDouble, String aString);</div><div class="line">            <span class="function">List&lt;Book&gt; <span class="title">getBookList</span><span class="params">()</span></span>;</div><div class="line">            <span class="function"><span class="keyword">void</span> <span class="title">addBook</span><span class="params">(in Book book)</span></span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>在AIDL文件中，并不是所有的数据类型都是可以使用的，只支持如下几种类型：</p><ul><li>基本数据类型（int、long、char、boolean、double等）；</li><li>String和CharSequence；</li><li>List：只支持ArrayList，里面每个元素都必须能够被AIDL支持；</li><li>Map：只支持HashMap，里面的每个元素都必须被AIDL支持，包括key和value；</li><li>Parcelable：所有实现了Parcelable接口的对象；</li><li>AIDL：所有的AIDL接口本身也可以在AIDL文件中使用。</li></ul><p>以上6种数据类型就是AIDL所支持的所有类型，其中自定义的Parcelable对象和AIDL对象必须要显式import进来，不管它们是否和当前的AIDL文件位于同一个包内。比如IBookManager.aidl这个文件，里面用到了Book这个类，这个类实现了Parcelable接口并且和IBookManager.aidl位于同一个包中，但是遵守AIDL的规范，我们仍然需要显式地import进来：com.huangyuanlove.testandroid.Book。<br>另外一个需要注意的地方是，如果AIDL文件中用到了自定义的Parcelable对象，那么必须新建一个和它同名的AIDL文件，并在其中声明它为Parcelable类型。在上面的IBookManager.aidl中，我们用到了Book这个类，所以，我们必须要创建Book.aidl，然后在里面添加如下内容：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> com.huangyuanlove.testandroid;</div><div class="line">parcelable Book;</div></pre></td></tr></table></figure></p><h6 id="远程服务端Service的实现"><a href="#远程服务端Service的实现" class="headerlink" title="远程服务端Service的实现"></a>远程服务端Service的实现</h6><p>上面讲述了如何定义AIDL接口，接下来实现这个接口。先创建一个service，代码如下：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> com.huangyuanlove.testandroid;</div><div class="line"></div><div class="line"><span class="keyword">import</span> android.app.Service;</div><div class="line"><span class="keyword">import</span> android.content.Intent;</div><div class="line"><span class="keyword">import</span> android.os.Binder;</div><div class="line"><span class="keyword">import</span> android.os.IBinder;</div><div class="line"><span class="keyword">import</span> android.os.RemoteException;</div><div class="line"><span class="keyword">import</span> android.support.annotation.Nullable;</div><div class="line"></div><div class="line"><span class="keyword">import</span> java.util.List;</div><div class="line"><span class="keyword">import</span> java.util.concurrent.CopyOnWriteArrayList;</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BookManagerService</span> <span class="keyword">extends</span> <span class="title">Service</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="keyword">private</span> CopyOnWriteArrayList&lt;Book&gt; mBookList = <span class="keyword">new</span> CopyOnWriteArrayList&lt;&gt;();</div><div class="line"></div><div class="line">    <span class="keyword">private</span> Binder mBinder = <span class="keyword">new</span> IBookManager.Stub() &#123;</div><div class="line">        <span class="meta">@Override</span></div><div class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">basicTypes</span><span class="params">(<span class="keyword">int</span> anInt, <span class="keyword">long</span> aLong, <span class="keyword">boolean</span> aBoolean, <span class="keyword">float</span> aFloat, <span class="keyword">double</span> aDouble, String aString)</span> <span class="keyword">throws</span> RemoteException </span>&#123;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="meta">@Override</span></div><div class="line">        <span class="function"><span class="keyword">public</span> List&lt;Book&gt; <span class="title">getBookList</span><span class="params">()</span> <span class="keyword">throws</span> RemoteException </span>&#123;</div><div class="line">            <span class="keyword">return</span> mBookList;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="meta">@Override</span></div><div class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addBook</span><span class="params">(Book book)</span> <span class="keyword">throws</span> RemoteException </span>&#123;</div><div class="line">            mBookList.add(book);</div><div class="line">        &#125;</div><div class="line">    &#125;;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">super</span>.onCreate();</div><div class="line">        mBookList.add(<span class="keyword">new</span> Book(<span class="number">1</span>,<span class="string">"Android"</span>));</div><div class="line">        mBookList.add(<span class="keyword">new</span> Book(<span class="number">2</span>,<span class="string">"IOS"</span>));</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Nullable</span></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> IBinder <span class="title">onBind</span><span class="params">(Intent intent)</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> mBinder;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><p>上面是一个服务端Service的典型实现，首先在onCreate中初始化添加了两本图书的信息，然后创建了一个Binder对象并在onBind中返回它，这个对象继承<code>IBookManager.Stub</code>并实现了它内部的AIDL方法，注意这里采用了CopyOnWriteArrayList，这个CopyOnWriteArrayList支持并发读/写。在前面<br>我们提到，AIDL方法是在服务端的Binder线程池中执行的，因此当多个客户端同时连接的时候，会存在多个线程同时访问的情形，所以我们要在AIDL方法中处理线程同步，而我们这里直接使用CopyOnWriteArrayList来进行自动的线程同步。AIDL中所支持的是抽象的List，而List只是一个接口，因此虽然服务端返回的是CopyOnWriteArrayList，但是在Binder中会按照List的规范去访问数据并最终形成一个新的ArrayList传递给客户端。所以，我们在服务端采用CopyOnWriteArrayList是完全可以的。和此类似的还有ConcurrentHashMap，然后我们需要在XML中注册这个Service:<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">service</span> <span class="attr">android:name</span>=<span class="string">".BookManagerService"</span></span></div><div class="line">            <span class="attr">android:process</span>=<span class="string">":remote"</span>/&gt;</div></pre></td></tr></table></figure></p><h6 id="客户端的实现"><a href="#客户端的实现" class="headerlink" title="客户端的实现"></a>客户端的实现</h6><p>客户端的实现就比较简单了，首先要绑定远程服务，绑定成功后将服务端返回的Binder对象转换成AIDL接口，然后就可以通过这个接口去调用服务端的远程方法了，代码如下所示：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MainActivity</span> <span class="keyword">extends</span> <span class="title">AppCompatActivity</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="keyword">private</span> ServiceConnection mConnection = <span class="keyword">new</span> ServiceConnection() &#123;</div><div class="line">        <span class="meta">@Override</span></div><div class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onServiceConnected</span><span class="params">(ComponentName name, IBinder service)</span> </span>&#123;</div><div class="line">            IBookManager bookManager= IBookManager.Stub.asInterface(service);</div><div class="line">            <span class="keyword">try</span> &#123;</div><div class="line">                List&lt;Book&gt; list = bookManager.getBookList();</div><div class="line">                Log.d(<span class="string">"xuan"</span>,<span class="string">"bookManager.getBookList()--&gt;"</span> + list.size());</div><div class="line">                bookManager.addBook(<span class="keyword">new</span> Book(<span class="number">3</span>,<span class="string">"java"</span>));</div><div class="line">                List&lt;Book&gt; newList = bookManager.getBookList();</div><div class="line">                Log.d(<span class="string">"xuan"</span>,<span class="string">"bookManager.getBookList()--&gt;"</span> + newList.size());</div><div class="line">            &#125;<span class="keyword">catch</span> (RemoteException e)&#123;</div><div class="line">                e.printStackTrace();</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="meta">@Override</span></div><div class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onServiceDisconnected</span><span class="params">(ComponentName name)</span> </span>&#123;</div><div class="line"></div><div class="line">        &#125;</div><div class="line">    &#125;;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">(Bundle savedInstanceState)</span> </span>&#123;</div><div class="line">        <span class="keyword">super</span>.onCreate(savedInstanceState);</div><div class="line">        setContentView(R.layout.activity_main);</div><div class="line">        Intent intent = <span class="keyword">new</span> Intent(<span class="keyword">this</span>,BookManagerService.class);</div><div class="line">        bindService(intent,mConnection, Context.BIND_AUTO_CREATE);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onDestroy</span><span class="params">()</span> </span>&#123;</div><div class="line">        unbindService(mConnection);</div><div class="line">        <span class="keyword">super</span>.onDestroy();</div><div class="line"></div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><p>绑定成功以后，会通过bookManager去调用getBookList方法，然后打印出所获取的图书信息。需要注意的是，服务端的方法有可能需要很久才能执行完毕，这个时候下面的代码就会导致ANR，这一点是需要注意的，后面会再介绍这种情况，接着再调用一下另外一个接口addBook，我们在客户端给服务端添加一本书，然后再获取一次。<br>现在我们考虑一种情况，假设有一种需求：用户不想时不时地去查询图书列表了，太累了，于是，他去问图书馆，“当有新书时能不能把书的信息告诉我呢？”。这就是一种典型的观察者模式。<br>首先，我们需要提供一个AIDL接口，每个用户都需要实现这个接口并且向图书馆申请新书的提醒功能，当然用户也可以随时取消这种提醒。之所以选择AIDL<br>接口而不是普通接口，是因为AIDL中无法使用普通接口。这里我们创建一个IOnNewBookArrivedListener.aidl文件，我们所期望的情况是：当服务端有新书到来时，就会通知每一个已经申请提醒功能的用户。从程序上来说就是调用所有IOnNewBookArrivedListener对象中的onNewBookArrived方法，并把新书的对象通过参数传递给客户端，内容如下所示：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// IOnNewBookArrivedListener.aidl</span></div><div class="line"><span class="keyword">package</span> com.huangyuanlove.testandroid;</div><div class="line"></div><div class="line"><span class="comment">// Declare any non-default types here with import statements</span></div><div class="line"><span class="keyword">import</span> com.huangyuanlove.testandroid.Book;</div><div class="line"><span class="class"><span class="keyword">interface</span> <span class="title">IOnNewBookArrivedListener</span> </span>&#123;</div><div class="line">    <span class="comment">/**</span></div><div class="line">     * Demonstrates some basic types that you can use as parameters</div><div class="line">     * and return values in AIDL.</div><div class="line">     */</div><div class="line">    <span class="function"><span class="keyword">void</span> <span class="title">basicTypes</span><span class="params">(<span class="keyword">int</span> anInt, <span class="keyword">long</span> aLong, <span class="keyword">boolean</span> aBoolean, <span class="keyword">float</span> aFloat,</span></span></div><div class="line">            <span class="keyword">double</span> aDouble, String aString);</div><div class="line">    <span class="function"><span class="keyword">void</span> <span class="title">onNewBookArrived</span><span class="params">(in Book newBook)</span></span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><p>AIDL中除了基本数据类型，其他类型的参数必须标上方向：in、out或者inout，in表示输入型参数，out表示输出型参数，inout表示输入输出型参数，至于它们具体的区别，官网是这么说的：</p><blockquote><p>All non-primitive parameters require a directional tag indicating which way the data goes . Either in , out , or inout . Primitives are in by default , and connot be otherwise .</p><p>所有的非基本参数都需要一个定向tag来指出数据的流向，不管是 in , out , 还是 inout 。基本参数的定向tag默认是并且只能是 in 。</p></blockquote><p>我们要根据实际需要去指定参数类型，不能一概使用out或者inout，因为这在底层实现是有开销的。最后，AIDL接口中只支持方法，不支持声明静态常量，这一点区别于传统的接口。<br>除了要新增加一个AIDL接口，还需要在原有的接口中添加两个新方法，代码如下：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> com.huangyuanlove.testandroid;</div><div class="line"></div><div class="line"><span class="keyword">import</span> com.huangyuanlove.testandroid.Book;</div><div class="line"><span class="keyword">import</span> com.huangyuanlove.testandroid.IOnNewBookArrivedListener;</div><div class="line"><span class="class"><span class="keyword">interface</span> <span class="title">IBookManager</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">void</span> <span class="title">basicTypes</span><span class="params">(<span class="keyword">int</span> anInt, <span class="keyword">long</span> aLong, <span class="keyword">boolean</span> aBoolean, <span class="keyword">float</span> aFloat,</span></span></div><div class="line">            <span class="keyword">double</span> aDouble, String aString);</div><div class="line">    <span class="function">List&lt;Book&gt; <span class="title">getBookList</span><span class="params">()</span></span>;</div><div class="line">    <span class="function"><span class="keyword">void</span> <span class="title">addBook</span><span class="params">(in Book book)</span></span>;</div><div class="line">    <span class="function"><span class="keyword">void</span> <span class="title">registerListener</span><span class="params">(IOnNewBookArrivedListener listener)</span></span>;</div><div class="line">    <span class="function"><span class="keyword">void</span> <span class="title">unRegisterListener</span><span class="params">(IOnNewBookArrivedListener listener)</span></span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><p>接着，服务端中的Service的实现也需要修改一下，主要是Service中的IBookManager.Stub的实现，需要实现新增加的两个方法(IDE没有提示的话可以make一下)。同时，在BookManagerService中还开启了一个线程，每隔5s就向书库中增加一本新书并通知所有感兴趣的用户，整个代码如下所示：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BookManagerService</span> <span class="keyword">extends</span> <span class="title">Service</span> </span>&#123;</div><div class="line">    <span class="keyword">private</span> AtomicBoolean mIsServiceDestroyed = <span class="keyword">new</span> AtomicBoolean(<span class="keyword">false</span>);</div><div class="line">    <span class="keyword">private</span> CopyOnWriteArrayList&lt;Book&gt; mBookList = <span class="keyword">new</span> CopyOnWriteArrayList&lt;&gt;();</div><div class="line">    <span class="keyword">private</span> CopyOnWriteArrayList&lt;IOnNewBookArrivedListener&gt; mListenerList</div><div class="line">            = <span class="keyword">new</span> CopyOnWriteArrayList&lt;&gt;();</div><div class="line"></div><div class="line">    <span class="keyword">private</span> Binder mBinder = <span class="keyword">new</span> IBookManager.Stub() &#123;</div><div class="line">        <span class="meta">@Override</span></div><div class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">basicTypes</span><span class="params">(<span class="keyword">int</span> anInt, <span class="keyword">long</span> aLong, <span class="keyword">boolean</span> aBoolean, <span class="keyword">float</span> aFloat, <span class="keyword">double</span> aDouble, String aString)</span> <span class="keyword">throws</span> RemoteException </span>&#123;</div><div class="line"></div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="meta">@Override</span></div><div class="line">        <span class="function"><span class="keyword">public</span> List&lt;Book&gt; <span class="title">getBookList</span><span class="params">()</span> <span class="keyword">throws</span> RemoteException </span>&#123;</div><div class="line">            <span class="keyword">return</span> mBookList;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="meta">@Override</span></div><div class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addBook</span><span class="params">(Book book)</span> <span class="keyword">throws</span> RemoteException </span>&#123;</div><div class="line">            mBookList.add(book);</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="meta">@Override</span></div><div class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">registerListener</span><span class="params">(IOnNewBookArrivedListener listener)</span> <span class="keyword">throws</span> RemoteException </span>&#123;</div><div class="line">            <span class="keyword">if</span> (!mListenerList.contains(listener)) &#123;</div><div class="line">                mListenerList.add(listener);</div><div class="line">            &#125; <span class="keyword">else</span> &#123;</div><div class="line">                Log.d(<span class="string">"xuan"</span>, <span class="string">"already exists."</span>);</div><div class="line">            &#125;</div><div class="line">            Log.d(<span class="string">"xuan"</span>, <span class="string">"registerListener,size:"</span> + mListenerList.size());</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="meta">@Override</span></div><div class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">unRegisterListener</span><span class="params">(IOnNewBookArrivedListener listener)</span> <span class="keyword">throws</span> RemoteException </span>&#123;</div><div class="line">            <span class="keyword">if</span> (mListenerList.contains(listener)) &#123;</div><div class="line">                mListenerList.remove(listener);</div><div class="line">                Log.d(<span class="string">"xuan"</span>, <span class="string">"unregister listener succeed."</span>);</div><div class="line">            &#125; <span class="keyword">else</span> &#123;</div><div class="line">                Log.d(<span class="string">"xuan"</span>, <span class="string">"not found,can not unregister."</span>);</div><div class="line">            &#125;</div><div class="line">            Log.d(<span class="string">"xuan"</span>, <span class="string">"unregisterListener,current size:"</span> + mListenerList.size());</div><div class="line">        &#125;</div><div class="line">    &#125;;</div><div class="line"></div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">super</span>.onCreate();</div><div class="line"></div><div class="line">        mBookList.add(<span class="keyword">new</span> Book(<span class="number">1</span>, <span class="string">"Android"</span>));</div><div class="line">        mBookList.add(<span class="keyword">new</span> Book(<span class="number">2</span>, <span class="string">"IOS"</span>));</div><div class="line">        <span class="keyword">new</span> Thread(<span class="keyword">new</span> ServiceWorker()).start();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Nullable</span></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> IBinder <span class="title">onBind</span><span class="params">(Intent intent)</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> mBinder;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onDestroy</span><span class="params">()</span> </span>&#123;</div><div class="line">        mIsServiceDestroyed.set(<span class="keyword">true</span>);</div><div class="line">        <span class="keyword">super</span>.onDestroy();</div><div class="line">    &#125;</div><div class="line"></div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">onNewBookArrived</span><span class="params">(Book book)</span> <span class="keyword">throws</span> RemoteException </span>&#123;</div><div class="line">        mBookList.add(book);</div><div class="line">        Log.d(<span class="string">"xuan"</span>, <span class="string">"onNewBookArrived,notify listeners:"</span> + mListenerList.</div><div class="line">                size());</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; mListenerList.size(); i++) &#123;</div><div class="line">            IOnNewBookArrivedListener listener = mListenerList.get(i);</div><div class="line">            Log.d(<span class="string">"xuan"</span>, <span class="string">"onNewBookArrived,notify listener:"</span> + listener);</div><div class="line">            listener.onNewBookArrived(book);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">private</span> <span class="class"><span class="keyword">class</span> <span class="title">ServiceWorker</span> <span class="keyword">implements</span> <span class="title">Runnable</span> </span>&#123;</div><div class="line">        <span class="meta">@Override</span></div><div class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</div><div class="line">            <span class="keyword">while</span> (!mIsServiceDestroyed.get()) &#123;</div><div class="line">                <span class="keyword">try</span> &#123;</div><div class="line">                    Thread.sleep(<span class="number">5000</span>);</div><div class="line">                &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</div><div class="line">                    e.printStackTrace();</div><div class="line">                &#125;</div><div class="line">                <span class="keyword">int</span> bookId = mBookList.size() + <span class="number">1</span>;</div><div class="line">                Book newBook = <span class="keyword">new</span> Book(bookId, <span class="string">"new book#"</span> + bookId);</div><div class="line">                <span class="keyword">try</span> &#123;</div><div class="line">                    onNewBookArrived(newBook);</div><div class="line">                &#125; <span class="keyword">catch</span> (RemoteException e) &#123;</div><div class="line">                    e.printStackTrace();</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><p>最后还需要修改一下客户端的代码，主要有两方面：首先客户端要注册IOnNewBookArrivedListener到远程服务端，这样当有新书时服务端才能通知当前客户端，同时我们要在Activity退出时解除这个注册；另一方面，当有新书时，服务端会回调客户端的IOnNewBookArrivedListener对象中的onNewBookArrived方法，但是这个方法是在客户端的Binder线程池中执行的，因此，为了便于进行UI操作，我们需要有一个Handler可以将其切换到客户端的主线程中去执行，代码如下：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MainActivity</span> <span class="keyword">extends</span> <span class="title">AppCompatActivity</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> MESSAGE_NEW_BOOK_ARRIVED = <span class="number">1</span>;</div><div class="line">    <span class="keyword">private</span> IBookManager mRemoteBookManager;</div><div class="line"></div><div class="line">    <span class="keyword">private</span> Handler mHandler = <span class="keyword">new</span> Handler() &#123;</div><div class="line">        <span class="meta">@Override</span></div><div class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">handleMessage</span><span class="params">(Message msg)</span> </span>&#123;</div><div class="line">            <span class="keyword">switch</span> (msg.what) &#123;</div><div class="line">                <span class="keyword">case</span> MESSAGE_NEW_BOOK_ARRIVED:</div><div class="line">                    Log.d(<span class="string">"MainActivity"</span>,<span class="string">"receive new book :"</span> + msg.obj);</div><div class="line">                    <span class="keyword">break</span>;</div><div class="line">                <span class="keyword">default</span>:</div><div class="line">                    <span class="keyword">super</span>.handleMessage(msg);</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;;</div><div class="line"></div><div class="line">    <span class="keyword">private</span> ServiceConnection mConnection = <span class="keyword">new</span> ServiceConnection() &#123;</div><div class="line">        <span class="meta">@Override</span></div><div class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onServiceConnected</span><span class="params">(ComponentName name, IBinder service)</span> </span>&#123;</div><div class="line">            IBookManager bookManager= IBookManager.Stub.asInterface(service);</div><div class="line">            <span class="keyword">try</span> &#123;</div><div class="line">                mRemoteBookManager = bookManager;</div><div class="line">                List&lt;Book&gt; list = bookManager.getBookList();</div><div class="line">                Log.d(<span class="string">"MainActivity"</span>,<span class="string">"bookManager.getBookList()--&gt;"</span> + list.size() +<span class="string">"&gt;&gt; "</span> + list.toString());</div><div class="line">                bookManager.addBook(<span class="keyword">new</span> Book(<span class="number">3</span>,<span class="string">"java"</span>));</div><div class="line">                List&lt;Book&gt; newList = bookManager.getBookList();</div><div class="line">                Log.d(<span class="string">"MainActivity"</span>,<span class="string">"bookManager.getBookList()--&gt;"</span> + newList.size()+<span class="string">"&gt;&gt; "</span> + newList.toString());</div><div class="line">                bookManager.registerListener(mOnNewBookArrivedListener);</div><div class="line">            &#125;<span class="keyword">catch</span> (RemoteException e)&#123;</div><div class="line">                e.printStackTrace();</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="meta">@Override</span></div><div class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onServiceDisconnected</span><span class="params">(ComponentName name)</span> </span>&#123;</div><div class="line">            mRemoteBookManager = <span class="keyword">null</span>;</div><div class="line">            Log.e(<span class="string">"MainActivity"</span>,<span class="string">"binder died."</span>);</div><div class="line">        &#125;</div><div class="line">    &#125;;</div><div class="line"></div><div class="line"></div><div class="line">    <span class="keyword">private</span> IOnNewBookArrivedListener mOnNewBookArrivedListener = <span class="keyword">new</span> IOnNewBookArrivedListener.Stub() &#123;</div><div class="line">        <span class="meta">@Override</span></div><div class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">basicTypes</span><span class="params">(<span class="keyword">int</span> anInt, <span class="keyword">long</span> aLong, <span class="keyword">boolean</span> aBoolean, <span class="keyword">float</span> aFloat, <span class="keyword">double</span> aDouble, String aString)</span> <span class="keyword">throws</span> RemoteException </span>&#123;</div><div class="line"></div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="meta">@Override</span></div><div class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onNewBookArrived</span><span class="params">(Book newBook)</span> <span class="keyword">throws</span> RemoteException </span>&#123;</div><div class="line">            mHandler.obtainMessage(MESSAGE_NEW_BOOK_ARRIVED,newBook)</div><div class="line">                    .sendToTarget();</div><div class="line">        &#125;</div><div class="line">    &#125;;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">(Bundle savedInstanceState)</span> </span>&#123;</div><div class="line">        <span class="keyword">super</span>.onCreate(savedInstanceState);</div><div class="line">        setContentView(R.layout.activity_main);</div><div class="line">        Intent intent = <span class="keyword">new</span> Intent(<span class="keyword">this</span>,BookManagerService.class);</div><div class="line">        bindService(intent,mConnection, Context.BIND_AUTO_CREATE);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onDestroy</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">if</span> (mRemoteBookManager != <span class="keyword">null</span></div><div class="line">                &amp;&amp; mRemoteBookManager.asBinder().isBinderAlive()) &#123;</div><div class="line">            <span class="keyword">try</span> &#123;</div><div class="line">                Log.d(<span class="string">"MainActivity"</span>,<span class="string">"unregister listener:"</span> + mOnNewBookArrivedListener);</div><div class="line">                mRemoteBookManager.unRegisterListener(mOnNewBookArrivedListener);</div><div class="line">            &#125; <span class="keyword">catch</span> (RemoteException e) &#123;</div><div class="line">                e.printStackTrace();</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        unbindService(mConnection);</div><div class="line">        <span class="keyword">super</span>.onDestroy();</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><p>从上面的代码可以看出，当BookManagerActivity关闭时，我们会在onDestroy中去解除已经注册到服务端的listener，这就相当于我们不想再接收图书馆的新书提醒了，所以我<br>们可以随时取消这个提醒服务。按back键退出BookManagerActivity,下面是打印出的log<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">07-23 14:56:55.493 16905-16918/com.huangyuanlove.testandroid:remote D/BookManagerService: not found,can not unregister.</div><div class="line">07-23 14:56:57.185 16905-16918/com.huangyuanlove.testandroid:remote D/BookManagerService: unregisterListener,current size:1</div></pre></td></tr></table></figure></p><p>从上面的log可以看出，程序没有像我们所预期的那样执行。在解注册的过程中，服务端竟然无法找到我们之前注册的那个listener，其实，这是必然的，这种解注册的处理方式在日常开发过程中时常使用到，但是放到多进程中却无法奏效，因为Binder会把客户端传递过来的对象重新转化并生成一个新的对象。虽然我们在注册和解注册过程中使用的是同一个客户端对象，但是通过Binder传递到服务端后，却会产生两个全新的对象。别忘了对象是不能跨进程直接传输的，对象的跨进程传输本质上都是反序列化的过程，这就是为什么AIDL中的自定义对象都必须要实现Parcelable接口的原因。可以使用<code>RemoteCallbackList</code>。<br>RemoteCallbackList是系统专门提供的用于删除跨进程listener的接口。 RemoteCallbackList是一个泛型， 支持管理任意的AIDL接口， 这点从它的声明就可以看出，因为所有的AIDL接口都继承自IInterface接口</p><blockquote><p>public class RemoteCallbackList<e extends="" iinterface=""></e></p></blockquote><p>它的工作原理很简单， 在它的内部有一个Map结构专门用来保存所有的AIDL回调，这个Map的key是IBinder类型， value是Callback类型， 如下所示:</p><blockquote><p>ArrayMap<ibinder,callback> mCallbacks = new ArrayMap<ibinder,callback>();</ibinder,callback></ibinder,callback></p></blockquote><p>其中Callback中封装了真正的远程listener。 当客户端注册listener的时候，它会把这个listener的信息存入mCallbacks中， 其中key和value分别通过下面的方式获得：</p><blockquote><p>IBinder key= listener.asBinder()<br>Callback value = new Callback(listener,cookie)</p></blockquote><p>虽然说多次跨进程传输客户端的同一个对象会在服务端生成不同的对象，但是这些新生成的对象有一个共同点，那就是它们底层的Binder对象是同一个， 利用这个特性，就可以实现上面我们无法实现的功能。当客户端解注册的时候，我们只要遍历服务端所有的listener， 找出那个和解注册listener具有相同Binder对象的服务端listener并把它删掉即可，这就是RemoteCallbackList为我们做的事情。同时RemoteCallbackList还有一个很有用的功能， 那就是当客户端进程终止后，它能够自动移除客户端所注册的listener。另外，RemoteCallbackList内部自动实现了线程同步的功能，所以我们使用它来注册和解注册时，不需要做额外的线程同步工作。<br>RemoteCallbackList使用起来很简单，我们要对BookManagerService做一些修改，首先要创建一个RemoteCallbackList对象来替代之前的CopyOnWriteArrayList，如下所示:<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">private</span> RemoteCallbackList&lt;IOnNewBookArrivedListener&gt; mListenerList = <span class="keyword">new</span> RemoteCallbackList&lt;IOnNewBookArrivedListener&gt;();</div></pre></td></tr></table></figure></p><p>然后修改registerListener和unregisterListener这两个接口的实现， 如下所示:<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Override</span></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">registerListener</span><span class="params">(IOnNewBookArrivedIistener listener)</span> <span class="keyword">throws</span> RemoteException </span>&#123;</div><div class="line">    mListenerList.register(listener);</div><div class="line">&#125;</div><div class="line"><span class="meta">@Override</span></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">unRegisterListener</span><span class="params">(IOnNewBookArrivedIistener listener)</span> <span class="keyword">throws</span> RemoteException </span>&#123;</div><div class="line">    mListenerList.unregister(listener);</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><p>接着要修改onNewBookArrived方法，当有新书时，我们就要通知所有已注册的listener，如下所示:<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">onNewBookArrived</span><span class="params">(Book book)</span> <span class="keyword">throws</span> RemoteException </span>&#123;</div><div class="line">        books.add(book);</div><div class="line">       <span class="keyword">final</span> <span class="keyword">int</span> N  =mListenerList.beginBroadcast();</div><div class="line">       <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span> ; i &lt; N;i++)&#123;</div><div class="line">           IOnNewBookArrivedIistener iOnNewBookArrivedIistener = mListenerList.getBroadcastItem(i);</div><div class="line">           <span class="keyword">if</span>(iOnNewBookArrivedIistener!=<span class="keyword">null</span>)&#123;</div><div class="line">               iOnNewBookArrivedIistener.onNewBookArrived(book);</div><div class="line">           &#125;</div><div class="line">       &#125;</div><div class="line">       mListenerList.finishBroadcast();</div><div class="line">    &#125;</div></pre></td></tr></table></figure></p><p>使用RemoteCallbackList，有一点需要注意，我们无法像操作List一样去操作它，尽管它的名字中也带个List，但是它并不是一个List。遍历RemoteCallbackList，必须要按照下面的方式进行，其中beginBroadcast和beginBroadcast必须要配对使用，哪怕我们仅仅是想要获取RemoteCallbackList中的元素个数，这是必须要注意的地方。<br>另外还有几点需要说明一下：</p><ul><li>客户端调用远程服务的方法，被调用的方法运行在服务端的Binder线程池中，同时客户端线程会被挂起，这个时候如果服务端方法执行比较耗时，就会导致客户端线程长时间地阻塞在这里，而如果这个客户端线程是UI线程的话，就会导致客户端ANR。因此，如果我们明确知道某个远程方法是耗时的，那么就要避免在客户端的UI线程中去访问远程方法。由于客户端的<code>onServiceConnected</code>和<code>onServiceDisconnected</code>方法都运行在UI线程中，所以也不可以在它们里面直接调用服务端的耗时方法，这点要尤其注意。</li><li>由于服务端的方法本身就运行在服务端的Binder线程池中，所以服务端方法本身就可以执行大量耗时操作，这个时候切记不要在服务端方法中开线程去进行异步任务，除非你明确知道自己在干什么，否则不建议这么做。</li><li>同理，当远程服务端需要调用客户端的listener中的方法时，被调用的方法也运行在Binder线程池中，只不过是客户端的线程池。所以，我们同样不可以在服务端中调用客户端的耗时方法。比如针对BookManagerService的onNewBookArrived方法。在它内部调用了客户端的IOnNewBookArrivedListener中的onNewBookArrived方法，如果客户端的这个onNewBookArrived方法比较耗时的话，那么请确保BookManagerService中的onNewBookArrived运行在非UI线程中，否则将导致服务端无法响应。</li><li>权限验证，第一种方法，我们可以在onBind中进行验证，验证不通过就直接返回null，这样验证失败的客户端直接无法绑定服务，至于验证方式可以有多种， 比如使用permission验证。第二种方法，我们可以在服务端的onTransact方法中进行权限验证，如果验证失败就直接返回false，这样服务端就不会终止执行AIDL中的方法从而达到保护服务端的效果。</li></ul><hr><p>以上</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Android中中IPC方式有很多，比如使用Bundle，使用文件共享，使用Messenger，使用AIDL，使用ContentProvider，使用Socket等。前两种方式比较简单，自己玩。&lt;br&gt;下面主要是抄的《Android开发艺术探索》2.4.4章节，看过书的就不用看了。&lt;br&gt;
    
    </summary>
    
    
      <category term="Android" scheme="http://blog.huangyuanlove.com/tags/Android/"/>
    
  </entry>
  
  <entry>
    <title>Android多进程-二</title>
    <link href="http://blog.huangyuanlove.com/2018/06/22/Android%E5%A4%9A%E8%BF%9B%E7%A8%8B-%E4%BA%8C/"/>
    <id>http://blog.huangyuanlove.com/2018/06/22/Android多进程-二/</id>
    <published>2018-06-22T08:03:38.000Z</published>
    <updated>2018-08-04T04:47:10.417Z</updated>
    
    <content type="html"><![CDATA[<p>Android中中IPC方式有很多，比如使用Bundle，使用文件共享，使用Messenger，使用AIDL，使用ContentProvider，使用Socket等。前两种方式比较简单，自己玩。<br>下面主要是抄的《Android开发艺术探索》2.4.3章节，看过书的就不用看了。<br><a id="more"></a><br>Messenger可以翻译为信使，顾名思义，通过它可以在不同进程中传递Message对象,在Message中放入我们需要传递的数据，就可以轻松地实现数据的进程间传递了。Messenger是一种轻量级的IPC方案，它的底层实现是AIDL，为什么这么说呢，我们大致看一下Messenger这个类的构造方法就明白了。下面是Messenger的两个构造方法，从构造方法的实现上我们可以明显看出AIDL的痕迹，不管是IMessenger还是Stub.asInterface,这种使用方法都表明它的底层是AIDL。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="title">Messenger</span> <span class="params">(Handler target)</span> </span>&#123;</div><div class="line">    mTarget = target.getIMessenger();</div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">public</span> <span class="title">Messenger</span> <span class="params">( IBinder target)</span> </span>&#123;</div><div class="line">    mTarget = IMessenger.Stub.asInterface(target);</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><p>Messenger的使用方法很简单，它对AIDL做了封装，使得我们可以更简便地进行进程间通信。同时，由于它一次处理一个请求，因此在服务端我们不用考虑线程同步的问题，这是因为服务端中不存在并发执行的情形。实现一个Messenger有如下几个步骤，分为服务端和客户端。</p><ol><li>服务端进程<br>首先，我们需要在服务端创建–个Service来处理客户端的连接请求，同时创建一个Handler并通过它来创建一个Messenger对 象，然后在Service的onBind中返回这个Messenger对象底层的Binder即可。</li><li>客户端进程<br>客户端进程中，首先要绑定服务端的Service,绑定成功后用服务端返回的IBinder对象创建一个Messenger,通过这个Messenger就可以向服务端发送消息了，发消息类型为Message对象。如果需要服务端能够回应客户端，就和服务端一-样，我们还需要创建一个Handler并创建一个 新的Messenger,并把这个Messenger对象通过Message的replyTo参数传递给服务端，服务端通过这个replyTo参数就可以回应客户端。</li></ol><p>首先看服务端的代码，这是服务端的典型代码，可以看到MessengerHandler用来处理客户端发送的消息，并从消息中取出客户端发来的文本信息。而mMessenger是一个Messenger对象，它和MessengerHandler相关联，并在onBind方法中返回它里面的Binder对象，可以看出，这里Messenger的作用是将客户端发送的消息传递给MessengerHandler处理。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MessengerService</span> <span class="keyword">extends</span> <span class="title">Service</span> </span>&#123;</div><div class="line"></div><div class="line"></div><div class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">MessengerHandler</span> <span class="keyword">extends</span> <span class="title">Handler</span></span>&#123;</div><div class="line">        <span class="meta">@Override</span></div><div class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">handleMessage</span><span class="params">(Message msg)</span> </span>&#123;</div><div class="line">            <span class="keyword">switch</span> (msg.what)&#123;</div><div class="line">                <span class="keyword">case</span> <span class="number">10001</span>:</div><div class="line">                    Log.e(<span class="string">"xuan"</span>,<span class="string">"收到客户端"</span>+msg.getData().getString(<span class="string">"msg"</span>));</div><div class="line">                    <span class="keyword">break</span>;</div><div class="line">                    <span class="keyword">default</span>:</div><div class="line">                        <span class="keyword">super</span>.handleMessage(msg);</div><div class="line">            &#125;</div><div class="line"></div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">private</span> <span class="keyword">final</span> Messenger messenger = <span class="keyword">new</span> Messenger(<span class="keyword">new</span> MessengerHandler());</div><div class="line">    <span class="meta">@Nullable</span></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> IBinder <span class="title">onBind</span><span class="params">(Intent intent)</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> messenger.getBinder();</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>然后注册<code>service</code>,让其在单独的进程中运行<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">service</span></span></div><div class="line"><span class="attr">android:</span> <span class="attr">name</span>=<span class="string">".messenger.MessengerService"</span></div><div class="line"><span class="attr">android:</span> <span class="attr">process</span>=<span class="string">":remote"</span>&gt;</div></pre></td></tr></table></figure></p><p>在客户端,首先需要绑定远程进程的MessengerService,绑定成功后，根据服务端返回的binder对象创建Messenger对象并使用此对象向服务端发送消息。下面的代码在Bundle中向服务端发送了一句话，在，上面的服务端代码中会打印出这句话。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MessengerActivity</span> <span class="keyword">extends</span> <span class="title">AppCompatActivity</span> </span>&#123;</div><div class="line"></div><div class="line"></div><div class="line">    <span class="keyword">private</span> Messenger mService;</div><div class="line"></div><div class="line">    <span class="keyword">private</span> ServiceConnection connection = <span class="keyword">new</span> ServiceConnection() &#123;</div><div class="line">        <span class="meta">@Override</span></div><div class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onServiceConnected</span><span class="params">(ComponentName name, IBinder service)</span> </span>&#123;</div><div class="line">            mService = <span class="keyword">new</span> Messenger(service);</div><div class="line">            Message msg = Message.obtain(<span class="keyword">null</span>,<span class="number">10001</span>);</div><div class="line">            Bundle data = <span class="keyword">new</span> Bundle();</div><div class="line">            data.putString(<span class="string">"msg"</span>,<span class="string">"hi 来自客户端的问候"</span>);</div><div class="line">            msg.setData(data);</div><div class="line">            <span class="keyword">try</span> &#123;</div><div class="line">                mService.send(msg);</div><div class="line">            &#125; <span class="keyword">catch</span> (RemoteException e) &#123;</div><div class="line">                e.printStackTrace();</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="meta">@Override</span></div><div class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onServiceDisconnected</span><span class="params">(ComponentName name)</span> </span>&#123;</div><div class="line"></div><div class="line">        &#125;</div><div class="line">    &#125;;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">(Bundle savedInstanceState)</span> </span>&#123;</div><div class="line">        <span class="keyword">super</span>.onCreate(savedInstanceState);</div><div class="line">        setContentView(R.layout.activity_messenger2);</div><div class="line"></div><div class="line">        Intent intent = <span class="keyword">new</span> Intent(<span class="keyword">this</span>, MessengerService.class);</div><div class="line">        bindService(intent,connection, Context.BIND_AUTO_CREATE);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onDestroy</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">super</span>.onDestroy();</div><div class="line">        unbindService(connection);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>通过上面的例子可以看出，在Messenger中进行数据传递必须将数据放入Message中，而Messenger和Message都实现了Parcelable接口，因此可以跨进程传输。简单来说,Message中所支持的数据类型就是Messenger所支持的传输类型。实际上，通过Messenger来传输Message, Message中 能使用的载体只有what、arg1、 arg2、 Bundle 以及replyTo。Message中的另一个字段object在同一-个进程中是很实用的，但是在进程间通信的时候，在Android2.2以前object字段不支持跨进程传输，即便是2.2以后，也仅仅是系统提供的实现了Parcelable接口的对象才能通过它来传输。这就意味着我们自定义的Parcelable对象是无法通过object字段来传输的，读者可以试一下。非系统的Parcelable对象的确无法通过object字段来传输，这也导致了object字段的实用性大大降低，所幸我们还有Bundle,Bundle中可以支持大量的数据类型。<br>上面的例子演示了如何在服务端接收客户端中发送的消息，但是有时候我们还需要能回应客户端，下面就介绍如何实现这种效果。还是采用上面的例子，但是稍微做一下修改，每当客户端发来一条消息，服务端就会自动回复一条“嗯，你的消息我已经收到，稍后会回复你。”，这很类似邮箱的自动回复功能。</p><p>首先看服务端的修改，服务端只需要修改MessengerHandler,当收到消息后，会立即回复一条消息给客户端。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MessengerService</span> <span class="keyword">extends</span> <span class="title">Service</span> </span>&#123;</div><div class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">MessengerHandler</span> <span class="keyword">extends</span> <span class="title">Handler</span></span>&#123;</div><div class="line">        <span class="meta">@Override</span></div><div class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">handleMessage</span><span class="params">(Message msg)</span> </span>&#123;</div><div class="line">            <span class="keyword">switch</span> (msg.what)&#123;</div><div class="line">                <span class="keyword">case</span> <span class="number">10001</span>:</div><div class="line">                    Log.e(<span class="string">"huangyuan"</span>,<span class="string">"收到客户端"</span>+msg.getData().getString(<span class="string">"msg"</span>));</div><div class="line">                    Messenger clientMessenger = msg.replyTo;</div><div class="line">                    Message message = Message.obtain(<span class="keyword">null</span>,<span class="number">10001</span>);</div><div class="line">                    Bundle bundle = <span class="keyword">new</span> Bundle();</div><div class="line">                    bundle.putString(<span class="string">"msg"</span>,<span class="string">"服务端回应"</span>);</div><div class="line">                    message.setData(bundle);</div><div class="line">                    <span class="keyword">try</span> &#123;</div><div class="line">                        clientMessenger.send(message);</div><div class="line">                    &#125; <span class="keyword">catch</span> (RemoteException e) &#123;</div><div class="line"></div><div class="line">                        e.printStackTrace();</div><div class="line">                    &#125;</div><div class="line">                    <span class="keyword">break</span>;</div><div class="line">                    <span class="keyword">default</span>:</div><div class="line">                        <span class="keyword">super</span>.handleMessage(msg);</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">private</span> <span class="keyword">final</span> Messenger messenger = <span class="keyword">new</span> Messenger(<span class="keyword">new</span> MessengerHandler());</div><div class="line">    <span class="meta">@Nullable</span></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> IBinder <span class="title">onBind</span><span class="params">(Intent intent)</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> messenger.getBinder();</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>为了接收服务端的消息，客户端也需要准备一个接收消息的Messenger和Handler:<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MessengerActivity</span> <span class="keyword">extends</span> <span class="title">AppCompatActivity</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="keyword">private</span> Messenger mService;</div><div class="line">    <span class="keyword">private</span> Messenger getReplyMessenger = <span class="keyword">new</span> Messenger(<span class="keyword">new</span> MessengerHandler());</div><div class="line">    <span class="keyword">private</span> ServiceConnection connection = <span class="keyword">new</span> ServiceConnection() &#123;</div><div class="line">        <span class="meta">@Override</span></div><div class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onServiceConnected</span><span class="params">(ComponentName name, IBinder service)</span> </span>&#123;</div><div class="line">            mService = <span class="keyword">new</span> Messenger(service);</div><div class="line">            Message msg = Message.obtain(<span class="keyword">null</span>,<span class="number">10001</span>);</div><div class="line">            Bundle data = <span class="keyword">new</span> Bundle();</div><div class="line">            data.putString(<span class="string">"msg"</span>,<span class="string">"hi 来自客户端的问候"</span>);</div><div class="line">            msg.setData(data);</div><div class="line">            msg.replyTo = getReplyMessenger;</div><div class="line">            <span class="keyword">try</span> &#123;</div><div class="line">                mService.send(msg);</div><div class="line">            &#125; <span class="keyword">catch</span> (RemoteException e) &#123;</div><div class="line">                e.printStackTrace();</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="meta">@Override</span></div><div class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onServiceDisconnected</span><span class="params">(ComponentName name)</span> </span>&#123;</div><div class="line">        &#125;</div><div class="line">    &#125;;</div><div class="line"></div><div class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">MessengerHandler</span>  <span class="keyword">extends</span> <span class="title">Handler</span></span>&#123;</div><div class="line">        <span class="meta">@Override</span></div><div class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">handleMessage</span><span class="params">(Message msg)</span> </span>&#123;</div><div class="line">            <span class="keyword">switch</span> (msg.what)&#123;</div><div class="line">                <span class="keyword">case</span> <span class="number">10001</span>:</div><div class="line">                    Log.e(<span class="string">"huangyuan"</span>,<span class="string">"收到服务端的回复--&gt;"</span>+ msg.getData().get(<span class="string">"msg"</span>));</div><div class="line">                    <span class="keyword">break</span>;</div><div class="line">                    <span class="keyword">default</span>:</div><div class="line">                        <span class="keyword">super</span>.handleMessage(msg);</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">(Bundle savedInstanceState)</span> </span>&#123;</div><div class="line">        <span class="keyword">super</span>.onCreate(savedInstanceState);</div><div class="line">        setContentView(R.layout.activity_messenger2);</div><div class="line">        Intent intent = <span class="keyword">new</span> Intent(<span class="keyword">this</span>, MessengerService.class);</div><div class="line">        bindService(intent,connection, Context.BIND_AUTO_CREATE);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onDestroy</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">super</span>.onDestroy();</div><div class="line">        unbindService(connection);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><p>关键的一点在于当客户端发送消息的时候，需要把接收服务端回复的Messenger通过Message的replyTo参数传递给服务端：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">msg.replyTo = getReplyMessenger;</div></pre></td></tr></table></figure></p><hr><p>以上</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Android中中IPC方式有很多，比如使用Bundle，使用文件共享，使用Messenger，使用AIDL，使用ContentProvider，使用Socket等。前两种方式比较简单，自己玩。&lt;br&gt;下面主要是抄的《Android开发艺术探索》2.4.3章节，看过书的就不用看了。&lt;br&gt;
    
    </summary>
    
    
      <category term="Android" scheme="http://blog.huangyuanlove.com/tags/Android/"/>
    
  </entry>
  
  <entry>
    <title>Android多进程(一)</title>
    <link href="http://blog.huangyuanlove.com/2018/06/21/Android%E5%A4%9A%E8%BF%9B%E7%A8%8B-%E4%B8%80/"/>
    <id>http://blog.huangyuanlove.com/2018/06/21/Android多进程-一/</id>
    <published>2018-06-21T10:02:25.000Z</published>
    <updated>2018-08-04T04:47:00.126Z</updated>
    
    <content type="html"><![CDATA[<p>Reference：《Android开发艺术探索》，作者：任玉刚<br>多进程基础以及一些名词<br><a id="more"></a></p><h6 id="IPC"><a href="#IPC" class="headerlink" title="IPC"></a>IPC</h6><p>进程间通信或者跨进程通信，全称：Inter-Process Communication。<br>在操作系统中，线程是CPU调度的最小单元，同时线程是一种有限的系统资源。而进程一般指一个执行单元。一个进程可以包含做个线程。最简单的情况下，一个进程中可以只有一个线程，即主线程，在Android中，主线程也叫UI线程。<br>IPC不是Android中所独有的，任何一个操作系统都需要有相应的IPC机制，比如windows上可以通过剪贴板、管道和邮槽等来进行进程间通信；linux上可以通过命名管道、共享内容、信号量等来进行进程间通信。Android是基于Linux内核的移动操作系统，它的进程间通信方式没有完全继承自linux，在Android中可以通过Binder轻松实现进程间通信。除了Binder，Android还支持Socket。</p><h6 id="开启多进程"><a href="#开启多进程" class="headerlink" title="开启多进程"></a>开启多进程</h6><p><strong> 指定process属性 </strong></p><p>正常情况下，在Android中多进程是指一个应用中存在多个进程的情况，因此先忽略多个应用多进程的情况。首先在Android中使用多进程只有一种方式：在AndroidMenifest文件中指定<code>android:process</code>属性，除此之外还有一种非常规的方式，通过JNI在native层fork一个新的进程。也就是说我们无法给一个线程或者一个实体类指定其运行时所在的进程。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">activity</span></span></div><div class="line"><span class="attr">android:name</span>=<span class="string">".ui.ActivityOne"</span></div><div class="line"><span class="attr">android:process</span>=<span class="string">":remote"</span> /&gt;</div><div class="line"><span class="tag">&lt;<span class="name">activity</span></span></div><div class="line"><span class="attr">android:name</span>=<span class="string">".ui.ActivityTwo"</span></div><div class="line"><span class="attr">android:process</span>=<span class="string">"com.huangyuanlove.xuan"</span> /&gt;</div><div class="line"><span class="tag">&lt;<span class="name">activity</span></span></div><div class="line"><span class="attr">android:name</span>=<span class="string">".ui.ActivityThree"</span> /&gt;</div></pre></td></tr></table></figure><p>假如当前应用包名为<code>com.huangyuanlove.ipc</code>，当<code>ActivityOne</code>启动时，系统会为它创建一个单独的进程，进程名为<code>com.huangyuanlove.ipc:remote</code>，当<code>ActivityTwo</code>启动时，系统也会为它创建一个进程，进程名为：<code>com.huangyuanlove.xuan</code>，当然<code>ActivityThree</code>是运行在默认进程中，默认进程是包名。</p><p><strong> :name 和 全限定名的区别 </strong></p><ul><li>“:”的含义是在当前进程名的前面附加上包名(ActivityOne)，全限定名并不会附加包名。</li><li>以”:”开头的进程属于当前应用的私有进程，其他应用的组件不可以和它跑在同一个进程中，其他不以”:”开头的进程属于全局进程，其他应用通过ShareUID方式可以和它跑在同一个进程中。</li></ul><p>​     Android会为每一个应用分配一个UID，具有相同UID的应用才能共享数据，需要注意的是，两个应用通过ShareUID跑在同一个进程中是有要求的，需要这两个应用有相同的ShareUID并且签名相同才可以。这种情况下，他们可以互相访问对方的私有数据，还可以共享内存数据，或者说它们看起来就像是一个应用的两个部分。</p><h6 id="带来的问题"><a href="#带来的问题" class="headerlink" title="带来的问题"></a>带来的问题</h6><ul><li>静态成员和单例模式凉凉</li><li>线程同步锁机制凉凉</li><li>SharedPreferences可靠性凉凉</li><li>Application会创建多次</li></ul><p>因为开启多进程之后，就不再是同一个内存区域，所以带来第一个问题，第二个问题也是同样，不在同一个内存区域，无论是对象锁还是全局锁可靠性基本就凉了。第三个问题和多进程写sp一样，第四个问题也是显而易见的，系统在创建新进程的时候会同时分配独立的虚拟机，所以这个过程就是启动一个应用的过程。</p><h6 id="Parcelable-和-Serializable"><a href="#Parcelable-和-Serializable" class="headerlink" title="Parcelable 和 Serializable"></a>Parcelable 和 Serializable</h6><p>这个自己玩</p><h6 id="Binder"><a href="#Binder" class="headerlink" title="Binder"></a>Binder</h6><p>直观的讲，Binder是Android中的一个类，它继承了IBinder接口。从IPC角度来说，Binder是Android中的一种跨进程通信方式，从Android Framework角度来说，Binder是ServiceManager连接各种Manager(ActivityManager、WindowManager，等等)和相应ManagerService的桥梁；从Android应用层来说，Binder是客户端和服务端进行通信的媒介。</p><p><strong> 创建AIDL示例 </strong><br>创建一个Book类，实现Parcelable接口。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Book</span> <span class="keyword">implements</span> <span class="title">Parcelable</span> </span>&#123;</div><div class="line">    <span class="keyword">private</span> <span class="keyword">int</span> bookId;</div><div class="line">    <span class="keyword">private</span> String bookName;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Book</span><span class="params">(<span class="keyword">int</span> bookId, String bookName)</span> </span>&#123;</div><div class="line">        <span class="keyword">this</span>.bookId = bookId;</div><div class="line">        <span class="keyword">this</span>.bookName = bookName;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">describeContents</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">writeToParcel</span><span class="params">(Parcel dest, <span class="keyword">int</span> flags)</span> </span>&#123;</div><div class="line">        dest.writeInt(<span class="keyword">this</span>.bookId);</div><div class="line">        dest.writeString(<span class="keyword">this</span>.bookName);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">protected</span> <span class="title">Book</span><span class="params">(Parcel in)</span> </span>&#123;</div><div class="line">        <span class="keyword">this</span>.bookId = in.readInt();</div><div class="line">        <span class="keyword">this</span>.bookName = in.readString();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> Creator&lt;Book&gt; CREATOR = <span class="keyword">new</span> Creator&lt;Book&gt;() &#123;</div><div class="line">        <span class="meta">@Override</span></div><div class="line">        <span class="function"><span class="keyword">public</span> Book <span class="title">createFromParcel</span><span class="params">(Parcel source)</span> </span>&#123;</div><div class="line">            <span class="keyword">return</span> <span class="keyword">new</span> Book(source);</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="meta">@Override</span></div><div class="line">        <span class="keyword">public</span> Book[] newArray(<span class="keyword">int</span> size) &#123;</div><div class="line">            <span class="keyword">return</span> <span class="keyword">new</span> Book[size];</div><div class="line">        &#125;</div><div class="line">    &#125;;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>创建<code>IBookManager.aidl</code>文件，需要注意的是，在AndroidStudio中，右键创建aidl文件时候，IDE会自动创建一个和java平级的aidl文件夹，我们创建的aidl文件就在这里面。<br><img src="/image/Android/IPC/create_aidl.png" alt="create_aidl_file"><br><strong> Book.aidl </strong><br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> com.example.huangyuan.testandroid;</div><div class="line">parcelable Book;</div></pre></td></tr></table></figure></p><p><code>Book.aidl</code>是<code>Book.java</code>类在AIDL中的声明。</p><p><strong> IBookManager.aidl </strong><br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// IBookManager.aidl</span></div><div class="line"><span class="keyword">package</span> com.example.huangyuan.testandroid;</div><div class="line"><span class="keyword">import</span> com.example.huangyuan.testandroid.Book;</div><div class="line"><span class="comment">// Declare any non-default types here with import statements</span></div><div class="line"></div><div class="line"><span class="class"><span class="keyword">interface</span> <span class="title">IBookManager</span> </span>&#123;</div><div class="line">    <span class="comment">/**</span></div><div class="line">     * Demonstrates some basic types that you can use as parameters</div><div class="line">     * and return values in AIDL.</div><div class="line">     */</div><div class="line">    <span class="function"><span class="keyword">void</span> <span class="title">basicTypes</span><span class="params">(<span class="keyword">int</span> anInt, <span class="keyword">long</span> aLong, <span class="keyword">boolean</span> aBoolean, <span class="keyword">float</span> aFloat,</span></span></div><div class="line">            <span class="keyword">double</span> aDouble, String aString);</div><div class="line"></div><div class="line">     <span class="function">List&lt;Book&gt; <span class="title">getBookList</span><span class="params">()</span></span>;</div><div class="line">     <span class="function"><span class="keyword">void</span> <span class="title">addBook</span><span class="params">(in Book book)</span></span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><p>其中 <code>basicTypes</code>是IDE自动生成的，我们自己添加 <code>getBookList()</code> 和 <code>addBook</code> 两个方法<br>尽管Book类和IBookManager的包名相同，但是在IBookManager中仍要导入Book类。下面看一下IDE生成的<code>IBookManager.java</code>类，该类在<code>app/build/generated/source/aidl/debug/packageName</code>包下。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div><div class="line">126</div><div class="line">127</div><div class="line">128</div><div class="line">129</div><div class="line">130</div><div class="line">131</div><div class="line">132</div><div class="line">133</div><div class="line">134</div><div class="line">135</div><div class="line">136</div><div class="line">137</div><div class="line">138</div><div class="line">139</div><div class="line">140</div><div class="line">141</div><div class="line">142</div><div class="line">143</div><div class="line">144</div><div class="line">145</div><div class="line">146</div><div class="line">147</div><div class="line">148</div><div class="line">149</div><div class="line">150</div><div class="line">151</div><div class="line">152</div><div class="line">153</div><div class="line">154</div><div class="line">155</div><div class="line">156</div><div class="line">157</div><div class="line">158</div><div class="line">159</div><div class="line">160</div><div class="line">161</div><div class="line">162</div><div class="line">163</div><div class="line">164</div><div class="line">165</div><div class="line">166</div><div class="line">167</div><div class="line">168</div><div class="line">169</div><div class="line">170</div><div class="line">171</div><div class="line">172</div><div class="line">173</div><div class="line">174</div><div class="line">175</div><div class="line">176</div><div class="line">177</div><div class="line">178</div><div class="line">179</div><div class="line">180</div><div class="line">181</div><div class="line">182</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/*</span></div><div class="line"> * This file is auto-generated.  DO NOT MODIFY.</div><div class="line"> * Original file: /Users/huangyuan/AndroidStudioProjects/TestAndroid/app/src/main/aidl/com/example/huangyuan/testandroid/IBookManager.aidl</div><div class="line"> */</div><div class="line"><span class="keyword">package</span> com.example.huangyuan.testandroid;</div><div class="line"><span class="comment">// Declare any non-default types here with import statements</span></div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">IBookManager</span> <span class="keyword">extends</span> <span class="title">android</span>.<span class="title">os</span>.<span class="title">IInterface</span> </span>&#123;</div><div class="line">    <span class="comment">/**</span></div><div class="line">     * Local-side IPC implementation stub class.</div><div class="line">     */</div><div class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">Stub</span> <span class="keyword">extends</span> <span class="title">android</span>.<span class="title">os</span>.<span class="title">Binder</span> <span class="keyword">implements</span> <span class="title">com</span>.<span class="title">example</span>.<span class="title">huangyuan</span>.<span class="title">testandroid</span>.<span class="title">IBookManager</span> </span>&#123;</div><div class="line">        <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> java.lang.String DESCRIPTOR = <span class="string">"com.example.huangyuan.testandroid.IBookManager"</span>;</div><div class="line"></div><div class="line">        <span class="comment">/**</span></div><div class="line">         * Construct the stub at attach it to the interface.</div><div class="line">         */</div><div class="line">        <span class="function"><span class="keyword">public</span> <span class="title">Stub</span><span class="params">()</span> </span>&#123;</div><div class="line">            <span class="keyword">this</span>.attachInterface(<span class="keyword">this</span>, DESCRIPTOR);</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="comment">/**</span></div><div class="line">         * Cast an IBinder object into an com.example.huangyuan.testandroid.IBookManager interface,</div><div class="line">         * generating a proxy if needed.</div><div class="line">         */</div><div class="line">        <span class="keyword">public</span> <span class="keyword">static</span> com.example.huangyuan.testandroid.<span class="function">IBookManager <span class="title">asInterface</span><span class="params">(android.os.IBinder obj)</span> </span>&#123;</div><div class="line">            <span class="keyword">if</span> ((obj == <span class="keyword">null</span>)) &#123;</div><div class="line">                <span class="keyword">return</span> <span class="keyword">null</span>;</div><div class="line">            &#125;</div><div class="line">            android.os.IInterface iin = obj.queryLocalInterface(DESCRIPTOR);</div><div class="line">            <span class="keyword">if</span> (((iin != <span class="keyword">null</span>) &amp;&amp; (iin <span class="keyword">instanceof</span> com.example.huangyuan.testandroid.IBookManager))) &#123;</div><div class="line">                <span class="keyword">return</span> ((com.example.huangyuan.testandroid.IBookManager) iin);</div><div class="line">            &#125;</div><div class="line">            <span class="keyword">return</span> <span class="keyword">new</span> com.example.huangyuan.testandroid.IBookManager.Stub.Proxy(obj);</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="meta">@Override</span></div><div class="line">        <span class="keyword">public</span> android.os.<span class="function">IBinder <span class="title">asBinder</span><span class="params">()</span> </span>&#123;</div><div class="line">            <span class="keyword">return</span> <span class="keyword">this</span>;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="meta">@Override</span></div><div class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">onTransact</span><span class="params">(<span class="keyword">int</span> code, android.os.Parcel data, android.os.Parcel reply, <span class="keyword">int</span> flags)</span> <span class="keyword">throws</span> android.os.RemoteException </span>&#123;</div><div class="line">            <span class="keyword">switch</span> (code) &#123;</div><div class="line">                <span class="keyword">case</span> INTERFACE_TRANSACTION: &#123;</div><div class="line">                    reply.writeString(DESCRIPTOR);</div><div class="line">                    <span class="keyword">return</span> <span class="keyword">true</span>;</div><div class="line">                &#125;</div><div class="line">                <span class="keyword">case</span> TRANSACTION_basicTypes: &#123;</div><div class="line">                    data.enforceInterface(DESCRIPTOR);</div><div class="line">                    <span class="keyword">int</span> _arg0;</div><div class="line">                    _arg0 = data.readInt();</div><div class="line">                    <span class="keyword">long</span> _arg1;</div><div class="line">                    _arg1 = data.readLong();</div><div class="line">                    <span class="keyword">boolean</span> _arg2;</div><div class="line">                    _arg2 = (<span class="number">0</span> != data.readInt());</div><div class="line">                    <span class="keyword">float</span> _arg3;</div><div class="line">                    _arg3 = data.readFloat();</div><div class="line">                    <span class="keyword">double</span> _arg4;</div><div class="line">                    _arg4 = data.readDouble();</div><div class="line">                    java.lang.String _arg5;</div><div class="line">                    _arg5 = data.readString();</div><div class="line">                    <span class="keyword">this</span>.basicTypes(_arg0, _arg1, _arg2, _arg3, _arg4, _arg5);</div><div class="line">                    reply.writeNoException();</div><div class="line">                    <span class="keyword">return</span> <span class="keyword">true</span>;</div><div class="line">                &#125;</div><div class="line">                <span class="keyword">case</span> TRANSACTION_getBookList: &#123;</div><div class="line">                    data.enforceInterface(DESCRIPTOR);</div><div class="line">                    java.util.List&lt;com.example.huangyuan.testandroid.Book&gt; _result = <span class="keyword">this</span>.getBookList();</div><div class="line">                    reply.writeNoException();</div><div class="line">                    reply.writeTypedList(_result);</div><div class="line">                    <span class="keyword">return</span> <span class="keyword">true</span>;</div><div class="line">                &#125;</div><div class="line">                <span class="keyword">case</span> TRANSACTION_addBook: &#123;</div><div class="line">                    data.enforceInterface(DESCRIPTOR);</div><div class="line">                    com.example.huangyuan.testandroid.Book _arg0;</div><div class="line">                    <span class="keyword">if</span> ((<span class="number">0</span> != data.readInt())) &#123;</div><div class="line">                        _arg0 = com.example.huangyuan.testandroid.Book.CREATOR.createFromParcel(data);</div><div class="line">                    &#125; <span class="keyword">else</span> &#123;</div><div class="line">                        _arg0 = <span class="keyword">null</span>;</div><div class="line">                    &#125;</div><div class="line">                    <span class="keyword">this</span>.addBook(_arg0);</div><div class="line">                    reply.writeNoException();</div><div class="line">                    <span class="keyword">return</span> <span class="keyword">true</span>;</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">            <span class="keyword">return</span> <span class="keyword">super</span>.onTransact(code, data, reply, flags);</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="keyword">private</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">Proxy</span> <span class="keyword">implements</span> <span class="title">com</span>.<span class="title">example</span>.<span class="title">huangyuan</span>.<span class="title">testandroid</span>.<span class="title">IBookManager</span> </span>&#123;</div><div class="line">            <span class="keyword">private</span> android.os.IBinder mRemote;</div><div class="line"></div><div class="line">            Proxy(android.os.IBinder remote) &#123;</div><div class="line">                mRemote = remote;</div><div class="line">            &#125;</div><div class="line"></div><div class="line">            <span class="meta">@Override</span></div><div class="line">            <span class="keyword">public</span> android.os.<span class="function">IBinder <span class="title">asBinder</span><span class="params">()</span> </span>&#123;</div><div class="line">                <span class="keyword">return</span> mRemote;</div><div class="line">            &#125;</div><div class="line"></div><div class="line">            <span class="keyword">public</span> java.lang.<span class="function">String <span class="title">getInterfaceDescriptor</span><span class="params">()</span> </span>&#123;</div><div class="line">                <span class="keyword">return</span> DESCRIPTOR;</div><div class="line">            &#125;</div><div class="line"></div><div class="line">            <span class="comment">/**</span></div><div class="line">             * Demonstrates some basic types that you can use as parameters</div><div class="line">             * and return values in AIDL.</div><div class="line">             */</div><div class="line">            <span class="meta">@Override</span></div><div class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">basicTypes</span><span class="params">(<span class="keyword">int</span> anInt, <span class="keyword">long</span> aLong, <span class="keyword">boolean</span> aBoolean, <span class="keyword">float</span> aFloat, <span class="keyword">double</span> aDouble, java.lang.String aString)</span> <span class="keyword">throws</span> android.os.RemoteException </span>&#123;</div><div class="line">                android.os.Parcel _data = android.os.Parcel.obtain();</div><div class="line">                android.os.Parcel _reply = android.os.Parcel.obtain();</div><div class="line">                <span class="keyword">try</span> &#123;</div><div class="line">                    _data.writeInterfaceToken(DESCRIPTOR);</div><div class="line">                    _data.writeInt(anInt);</div><div class="line">                    _data.writeLong(aLong);</div><div class="line">                    _data.writeInt(((aBoolean) ? (<span class="number">1</span>) : (<span class="number">0</span>)));</div><div class="line">                    _data.writeFloat(aFloat);</div><div class="line">                    _data.writeDouble(aDouble);</div><div class="line">                    _data.writeString(aString);</div><div class="line">                    mRemote.transact(Stub.TRANSACTION_basicTypes, _data, _reply, <span class="number">0</span>);</div><div class="line">                    _reply.readException();</div><div class="line">                &#125; <span class="keyword">finally</span> &#123;</div><div class="line">                    _reply.recycle();</div><div class="line">                    _data.recycle();</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line"></div><div class="line">            <span class="meta">@Override</span></div><div class="line">            <span class="keyword">public</span> java.util.List&lt;com.example.huangyuan.testandroid.Book&gt; getBookList() <span class="keyword">throws</span> android.os.RemoteException &#123;</div><div class="line">                android.os.Parcel _data = android.os.Parcel.obtain();</div><div class="line">                android.os.Parcel _reply = android.os.Parcel.obtain();</div><div class="line">                java.util.List&lt;com.example.huangyuan.testandroid.Book&gt; _result;</div><div class="line">                <span class="keyword">try</span> &#123;</div><div class="line">                    _data.writeInterfaceToken(DESCRIPTOR);</div><div class="line">                    mRemote.transact(Stub.TRANSACTION_getBookList, _data, _reply, <span class="number">0</span>);</div><div class="line">                    _reply.readException();</div><div class="line">                    _result = _reply.createTypedArrayList(com.example.huangyuan.testandroid.Book.CREATOR);</div><div class="line">                &#125; <span class="keyword">finally</span> &#123;</div><div class="line">                    _reply.recycle();</div><div class="line">                    _data.recycle();</div><div class="line">                &#125;</div><div class="line">                <span class="keyword">return</span> _result;</div><div class="line">            &#125;</div><div class="line"></div><div class="line">            <span class="meta">@Override</span></div><div class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addBook</span><span class="params">(com.example.huangyuan.testandroid.Book book)</span> <span class="keyword">throws</span> android.os.RemoteException </span>&#123;</div><div class="line">                android.os.Parcel _data = android.os.Parcel.obtain();</div><div class="line">                android.os.Parcel _reply = android.os.Parcel.obtain();</div><div class="line">                <span class="keyword">try</span> &#123;</div><div class="line">                    _data.writeInterfaceToken(DESCRIPTOR);</div><div class="line">                    <span class="keyword">if</span> ((book != <span class="keyword">null</span>)) &#123;</div><div class="line">                        _data.writeInt(<span class="number">1</span>);</div><div class="line">                        book.writeToParcel(_data, <span class="number">0</span>);</div><div class="line">                    &#125; <span class="keyword">else</span> &#123;</div><div class="line">                        _data.writeInt(<span class="number">0</span>);</div><div class="line">                    &#125;</div><div class="line">                    mRemote.transact(Stub.TRANSACTION_addBook, _data, _reply, <span class="number">0</span>);</div><div class="line">                    _reply.readException();</div><div class="line">                &#125; <span class="keyword">finally</span> &#123;</div><div class="line">                    _reply.recycle();</div><div class="line">                    _data.recycle();</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> TRANSACTION_basicTypes = (android.os.IBinder.FIRST_CALL_TRANSACTION + <span class="number">0</span>);</div><div class="line">        <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> TRANSACTION_getBookList = (android.os.IBinder.FIRST_CALL_TRANSACTION + <span class="number">1</span>);</div><div class="line">        <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> TRANSACTION_addBook = (android.os.IBinder.FIRST_CALL_TRANSACTION + <span class="number">2</span>);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * Demonstrates some basic types that you can use as parameters</div><div class="line">     * and return values in AIDL.</div><div class="line">     */</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">basicTypes</span><span class="params">(<span class="keyword">int</span> anInt, <span class="keyword">long</span> aLong, <span class="keyword">boolean</span> aBoolean, <span class="keyword">float</span> aFloat, <span class="keyword">double</span> aDouble, java.lang.String aString)</span> <span class="keyword">throws</span> android.os.RemoteException</span>;</div><div class="line"></div><div class="line">    <span class="keyword">public</span> java.util.List&lt;com.example.huangyuan.testandroid.Book&gt; getBookList() <span class="keyword">throws</span> android.os.RemoteException;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addBook</span><span class="params">(com.example.huangyuan.testandroid.Book book)</span> <span class="keyword">throws</span> android.os.RemoteException</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><p>结构比较简单，最外面是IBookManager接口，<br>其中声明了一个抽象内部类Stub，在该类中，声明了一个Proxy代理类。还声明了三个静态变量来标志aidl文件中的三个方法。这个Stub就是一个Binder类，当客户端和服务端都位于同一个进程时，方法调用不会走跨进程的transact过程，而当两者位于不同进程时，方法调用需要走transact过程，这个逻辑由内部Proxy类来完成。<br>最后，声明了aidl文件中的三个方法。<br>下面详细介绍：<br><strong> DESCRIPTOR </strong><br>Binder的唯一标示，一般用当前Binder的类名标示</p><p><strong> asInterface(android.os.IBinder obj) </strong><br>用于将服务端的BInder对象转换成客户端所需的AIDL借口类型的对象，这种转换过程是区分进程的，如果客户端和服务端位于同一进程，那么此方法返回的就是服务端的Stub对象本身，否则返回的是系统封装后的Stub.proxy对象。</p><p><strong> asBinder </strong><br>用于返回当前Binder对象</p><p><strong> onTransact </strong><br>这个方法运行在服务端中的Binder线程池中，当客户端发起跨进程请求时，远程请求会通过系统底层封装后交由此方法来处理。该方法的原型为public Boolean onTransact(int code,android.os. Parcel data,android.os.Parcel reply,int flags)。服务端通过code可以确定客户端所请求的目标方法是什么，接着从data中取出目标方法所需的参数(如果目标方法有参数的话)，然后执行目标方法。当目标方法执行完毕后，就向reply中写入返回值(如果目标方法有返回值的话)，onTransact方 法的执行过程就是这样的。需要注意的是，如果此方法返回false,那么客户端的请求会失败，因此我们可以利用这个特性来做权限验证，毕竟我们也不希望随便-一个进程都能远程调用我们的服务。</p><p><strong> Proxy#getBookList </strong><br>这个方法运行在客户端，当客户端远程调用此方法时，它的内部实现是这样的:首先创建该方法所需要的输入型Parcel对象<em>data、 输出型Parcel对象</em> reply和返回值对象List;然后把该方法的参数信息写入_data中(如果有参数的话);接着调用transact方法来发起RPC (远程过程调用)请求，同时当前线程挂起;然后服务端的onTransact方法会被调用，直到RPC过程返回后，当前线程继续执行，并从_reply中 取出RPC过程的返回结果;最后返回_reply中的数据。</p><p><strong> Proxy#addBook </strong><br>这个方法运行在客户端，它的执行过程和getBookList是一样的，addBook没有返回值，所以它不需要从_replay中取出返回值。</p><p>接下来，我们介绍Binder的两个很重要的方法linkToDeath和unlinkToDeath。我们知道，Binder运行在服务端进程，如果服务端进程由于某种原因异常终止，这个时候我们到服务端的Binder连接断裂(称之为Binder死亡)，会导致我们的远程调用失败。更为关键的是，如果我们不知道Binder连接已经断裂，那么客户端的功能就会受到影响。为了解决这个问题，Binder中提供 了两个配对的方法linkToDeath和unlinkToDeath,通过linkToDeath我们可以给Binder设置- - 个死亡代理，当Binder死亡时， 我们就会收到通知，这个时候我们就可以重新发起连接请求从而恢复连接。那么到底如何给Binder设置死亡代理呢?也很简单。<br>首先，声明一个DeathRecipient对象。DeathRecipient是一个接口，其内部只有一个方法binderDied,我们需要实现这个方法，当Binder死亡的时 候，系统就会回调binderDied方法，然后我们就可以移出之前绑定的binder代理并重新绑定远程服务:<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">private</span> IBinder .DeathRecipient mDeathRecipient = <span class="keyword">new</span> IBinder.DeathRecipient() &#123;</div><div class="line"><span class="meta">@Override</span></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">binderDied</span><span class="params">()</span> </span>&#123;</div><div class="line"><span class="keyword">if</span> ( mBookManager ==<span class="keyword">null</span>)</div><div class="line"><span class="keyword">return</span>;</div><div class="line"></div><div class="line">mBookManager.asBinder().unlinkToDeath(mDeathRecipient <span class="number">0</span>);</div><div class="line">mBookManager = <span class="keyword">null</span>;</div><div class="line">&#125;</div><div class="line">);</div></pre></td></tr></table></figure></p><p>其次，在客户端绑定远程服务成功后，给binder设置死亡代理。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">mService = IMessageBoxManager.Stub.asInterface(binder);</div><div class="line">binder.linkToDeath(mDeathRecipient,<span class="number">0</span>);</div></pre></td></tr></table></figure></p><p>其中linkToDeath的第二个参数是个标记位，我们直接设为0即可。经过上面两个步骤，就给我们的Binder设置了死亡代理，当Binder死 亡的时候我们就可以收到通知了。另外，通过Binder的 方法isBinderAlive也可以判断Binder是否死亡。</p><h2 id="这一篇全部都是抄的《Android开发艺术探索》第2-3-3Binder-章节上的内容，毕竟一直带着书也不现实"><a href="#这一篇全部都是抄的《Android开发艺术探索》第2-3-3Binder-章节上的内容，毕竟一直带着书也不现实" class="headerlink" title=" 这一篇全部都是抄的《Android开发艺术探索》第2.3.3Binder 章节上的内容，毕竟一直带着书也不现实 "></a><strong> 这一篇全部都是抄的《Android开发艺术探索》第2.3.3Binder 章节上的内容，毕竟一直带着书也不现实 </strong></h2><p>以上</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Reference：《Android开发艺术探索》，作者：任玉刚&lt;br&gt;多进程基础以及一些名词&lt;br&gt;
    
    </summary>
    
    
      <category term="Android" scheme="http://blog.huangyuanlove.com/tags/Android/"/>
    
  </entry>
  
  <entry>
    <title>Android7.0 MultiWindow</title>
    <link href="http://blog.huangyuanlove.com/2018/06/11/Android7-0%E5%88%86%E5%B1%8F%E5%AE%9E%E7%8E%B0/"/>
    <id>http://blog.huangyuanlove.com/2018/06/11/Android7-0分屏实现/</id>
    <published>2018-06-11T07:17:54.000Z</published>
    <updated>2018-08-04T04:45:13.363Z</updated>
    
    <content type="html"><![CDATA[<p>Android7.0推出了多窗口(分屏)模式，允许一个屏幕下显示两个应用，可以一边追剧一边看电子书，不过在小一点的手机屏幕上看起来可能有点鸡肋。但是在TV端(这个屏幕就比较大了，一般都是40寸起步)中，画中画模式可以让我们同时进行多个任务了。<br><a id="more"></a></p><h4 id="开启分屏"><a href="#开启分屏" class="headerlink" title="开启分屏"></a>开启分屏</h4><p>只要你编译使用sdk版本大于等于7.0就可以支持分屏了：<code>compileSdkVersion 25</code>，如果想要禁用分屏，只需要在<code>AndroidManifest.xml</code>添加属性：android:resizeableActivity=”false”，这个属性使用于application和Activity标签。<br>7.0中默认是true。<br>除了分屏模式之外，还有自由模式(Freeform,常见于桌面设备，类似于windows的应用窗口，可以拖拽边缘改变大小)。</p><h4 id="生命周期"><a href="#生命周期" class="headerlink" title="生命周期"></a>生命周期</h4><p>开启多窗口模式不会更改Activity的生命周期，<br>在多窗口模式中，在指定时间只有最近与用户交互过的 Activity 为活动状态。 该 Activity 将被视为顶级 Activity。 所有其他 Activity 虽然可见，但均处于暂停状态。 但是，这些已暂停但可见的 Activity 在系统中享有比不可见 Activity 更高的优先级。 如果用户与其中一个暂停的 Activity 交互，该 Activity 将恢复，而之前的顶级 Activity 将暂停。</p><p>例如：<br><img src="/image/Android/MultiWindow/1.png" alt="MultiWindow"><br>在上图中，我先打开了上面的Activity，然后又打开了下面Gmail的Activity，这时下面的Activity处于可交互(顶级Activity)状态，上面的Activity虽然课件，但是处于暂停状态，这时按下back键是对下面Activity进行操作。当点击上面的Activity时，上面的Activity处于可交互状态，下面的Activity处于暂停状态。<br>PS：在多窗口模式中，用户仍可以看到处于暂停状态的应用。 应用在暂停状态下可能仍需要继续其操作。 例如，处于暂停模式但可见的视频播放应用应继续显示视频。 因此，我们建议播放视频的 Activity 不要暂停其 onPause() 处理程序中的视频。 应暂停 onStop() 中的视频，并恢复 onStart() 中的视频播放。</p><p>用户使用多窗口模式显示应用时，系统将通知 Activity 发生配置变更。 该变更与系统通知应用设备从纵向模式切换到横向模式时的 Activity 生命周期影响基本相同，但设备不仅仅是交换尺寸，而是会变更尺寸。您的 Activity 可以自行处理配置变更，或允许系统销毁 Activity，并以新的尺寸重新创建该 Activity。<br>给Activity加上如下配置可以保证切换成多屏模式或者画中画模式时Activity不会销毁重建。<br>android:configChanges=”screenSize|smallestScreenSize|screenLayout|orientation”</p><h4 id="针对多窗口模式配置应用"><a href="#针对多窗口模式配置应用" class="headerlink" title="针对多窗口模式配置应用"></a>针对多窗口模式配置应用</h4><p>如果应用支持 Android N，您可以对应用的 Activity 是否支持多窗口显示以及显示方式进行配置。 您可以在清单文件中设置属性，以控制大小和布局。 根 Activity 的属性设置适用于其任务栈中的所有 Activity。 例如，如果根 Activity 中 <code>android:resizeableActivity</code> 设定为 true，则任务栈中的所有 Activity 都将可以调整大小。<br>如果使用低于 Android N 版本的 SDK 构建多向应用，则用户在多窗口模式中使用应用时，系统将强制调整应用大小。 系统将显示对话框，提醒用户应用可能会发生异常。 系统不会调整定向应用的大小；如果用户尝试在多窗口模式下打开定向应用，应用将全屏显示。</p><p><strong> android:resizeableActivity </strong><br>在清单的 <code>&lt;activity&gt;</code> 或 <code>&lt;application&gt;</code> 节点中设置该属性，启用或禁用多窗口显示：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">android:resizeableActivity=["true" | "false"]</div></pre></td></tr></table></figure><p>如果该属性设置为 true，Activity 将能以分屏和自由形状模式启动。 如果此属性设置为 false，Activity 将不支持多窗口模式。 如果该值为 false，且用户尝试在多窗口模式下启动 Activity，该 Activity 将全屏显示。<br>如果应用面向 Android N，但未对该属性指定值，则该属性的值默认设为 true。</p><p><strong> android:supportsPictureInPicture </strong><br>在清单文件的 <code>&lt;activity&gt;</code> 节点中设置该属性，指明 Activity 是否支持画中画显示。 如果 <code>android:resizeableActivity</code> 为 false，将忽略该属性。<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">android:supportsPictureInPicture=["true" | "false"]</div></pre></td></tr></table></figure></p><h4 id="布局属性"><a href="#布局属性" class="headerlink" title="布局属性"></a>布局属性</h4><p>对于 Android N，<code>&lt;layout&gt;</code> 清单元素支持以下几种属性，这些属性影响 Activity 在多窗口模式中的行为：</p><p><code>android:defaultWidth</code><br>以自由形状模式启动时 Activity 的默认宽度。<br><code>android:defaultHeight</code><br>以自由形状模式启动时 Activity 的默认高度。<br><code>android:gravity</code><br>以自由形状模式启动时 Activity 的初始位置。请参阅 Gravity 参考资料，了解合适的值设置。<br><code>android:minimalHeight、android:minimalWidth</code><br>分屏和自由形状模式中 Activity 的最小高度和最小宽度。 如果用户在分屏模式中移动分界线，使 Activity 尺寸低于指定的最小值，系统会将 Activity 裁剪为用户请求的尺寸。<br>例如，以下节点显示了如何指定 Activity 在自由形状模式中显示时 Activity 的默认大小、位置和最小尺寸：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">activity</span> <span class="attr">android:name</span>=<span class="string">".MyActivity"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">layout</span> <span class="attr">android:defaultHeight</span>=<span class="string">"500dp"</span></span></div><div class="line">          <span class="attr">android:defaultWidth</span>=<span class="string">"600dp"</span></div><div class="line">          <span class="attr">android:gravity</span>=<span class="string">"top|end"</span></div><div class="line">          <span class="attr">android:minimalHeight</span>=<span class="string">"450dp"</span></div><div class="line">          <span class="attr">android:minimalWidth</span>=<span class="string">"300dp"</span> /&gt;</div><div class="line"><span class="tag">&lt;/<span class="name">activity</span>&gt;</span></div></pre></td></tr></table></figure><h4 id="在多窗口模式中运行应用"><a href="#在多窗口模式中运行应用" class="headerlink" title="在多窗口模式中运行应用"></a>在多窗口模式中运行应用</h4><p><strong> 多窗口模式中被禁用的功能 </strong><br>在设备处于多窗口模式中时，某些功能会被禁用或忽略，因为这些功能对与其他 Activity 或应用共享设备屏幕的 Activity 而言没有意义。 此类功能包括：</p><ol><li>某些系统 UI 自定义选项将被禁用；例如，在非全屏模式中，应用无法隐藏状态栏。</li><li>系统将忽略对 android:screenOrientation 属性所作的更改。</li></ol><p><strong> 多窗口变更通知和查询 </strong></p><ol><li>Activity.isInMultiWindowMode()<br>调用该方法以确认 Activity 是否处于多窗口模式。</li><li>Activity.isInPictureInPictureMode()<br>调用该方法以确认 Activity 是否处于画中画模式。<blockquote><p>画中画模式是多窗口模式的特例。 如果 myActivity.isInPictureInPictureMode() 返回 true，<br>myActivity.isInMultiWindowMode() 也返回 true。</p></blockquote></li><li>Activity.onMultiWindowModeChanged()<br>Activity 进入或退出多窗口模式时系统将调用此方法。 在 Activity 进入多窗口模式时，系统向该方法传递 true 值，在退出多窗口模式时，则传递 false 值。</li><li>Activity.onPictureInPictureModeChanged()<br>Activity 进入或退出画中画模式时系统将调用此方法。 在 Activity 进入画中画模式时，系统向该方法传递 true 值，在退出画中画模式时，则传递 false 值。</li></ol><p>每个方法还有 Fragment 版本，例如 Fragment.isInMultiWindowMode()。</p><h4 id="进入画中画模式"><a href="#进入画中画模式" class="headerlink" title="进入画中画模式"></a>进入画中画模式</h4><p>如需在画中画模式中启动 Activity，请调用新方法 Activity.enterPictureInPictureMode()。 如果设备不支持画中画模式，则此方法无效。 如需了解详细信息，请参阅<a href="https://developer.android.com/guide/topics/ui/picture-in-picture" target="_blank" rel="external">画中画</a>文档。<br><a href="https://developer.android.com/guide/topics/ui/picture-in-picture" target="_blank" rel="external">https://developer.android.com/guide/topics/ui/picture-in-picture</a></p><h4 id="在多窗口模式中启动新-Activity"><a href="#在多窗口模式中启动新-Activity" class="headerlink" title="在多窗口模式中启动新 Activity"></a>在多窗口模式中启动新 Activity</h4><p>如果只是简单的开启Activity，和在非多窗口模式下是一致的。如果想要在当前Activity的旁边启动Activity，可以添加<code>FLAG_ACTIVITY_LAUNCH_ADJACENT</code>标志位(官方文档说是<code>Intent.FLAG_ACTIVITY_LAUNCH_TO_ADJACENT</code>,但在实际操作中这个标志位不存在)，传递此标志将请求以下行为：</p><ol><li>如果设备处于分屏模式，系统会尝试在启动系统的 Activity 旁创建新 Activity，这样两个 Activity 将共享屏幕。 系统并不一定能实现此操作，但如果可以，系统将使两个 Activity 处于相邻的位置。</li><li>如果设备不处于分屏模式，则该标志无效。<br>如果设备处于自由形状模式，则在启动新 Activity 时，用户可通过调用 ActivityOptions.setLaunchBounds() 指定新 Activity 的尺寸和屏幕位置。 如果设备不处于多窗口模式，则该方法无效。<br>PS:如果在任务栈中启动 Activity，该 Activity 将替换屏幕上的 Activity，并继承其所有的多窗口属性。 如果要在多窗口模式中以单独的窗口启动新 Activity，则必须在新的任务栈中启动此 Activity。</li></ol><h4 id="支持拖放"><a href="#支持拖放" class="headerlink" title="支持拖放"></a>支持拖放</h4><p>用户可以在两个 Activity 共享屏幕的同时在这两个 Activity 之间拖放数据 （在此之前，用户只能在一个 Activity 内部拖放数据）。 </p><ol><li>android.view.DropPermissions<br>令牌对象，负责指定对接收拖放数据的应用授予的权限。</li><li>View.startDragAndDrop()<br>View.startDrag() 的新别名。要启用跨 Activity 拖放，请传递新标志 View.DRAG_FLAG_GLOBAL。 如需对接收拖放数据的 Activity 授予 URI 权限，可根据情况传递新标志 View.DRAG_FLAG_GLOBAL_URI_READ 或 View.DRAG_FLAG_GLOBAL_URI_WRITE。</li><li>View.cancelDragAndDrop()<br>取消当前正在进行的拖动操作。只能由发起拖动操作的应用调用。</li><li>View.updateDragShadow()<br>替换当前正在进行的拖动操作的拖动阴影。只能由发起拖动操作的应用调用。</li><li>Activity.requestDropPermissions()<br>请求使用 DragEvent 中包含的 ClipData 传递的内容 URI 的权限。</li></ol><h4 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h4><p><strong> 在当前Activity旁边开启新界面 </strong><br>如下图所示，上面的界面是MainActivity，下面的Activity是在MainActivity中点击<code>获取实时天气</code>开启的界面<br><img src="/image/Android/MultiWindow/2.png" alt="MultiWindow"><br>在MainActivity中</p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">findViewById(R.id.get_weather).setOnClickListener(<span class="keyword">new</span> View.OnClickListener() &#123;</div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onClick</span><span class="params">(View v)</span> </span>&#123;</div><div class="line">        Intent intent = <span class="keyword">new</span> Intent(MainActivity.<span class="keyword">this</span>,Main2Activity.class);</div><div class="line">        intent.addFlags(Intent.FLAG_ACTIVITY_LAUNCH_ADJACENT | Intent.FLAG_ACTIVITY_NEW_TASK);</div><div class="line">        startActivity(intent);</div><div class="line">    &#125;</div><div class="line">&#125;);</div></pre></td></tr></table></figure><p>为什么需要 <code>FLAG_ACTIVITY_NEW_TASK</code>:<br>官方解释</p><blockquote><p>在同一个Activity返回栈中，打开一个新的Activity时，这个Activity将会继承上一个Activity所有和分屏模式有关的属性。如果你想要在一个独立的窗口以分屏模式打开一个新的Activity，那么必须新建一个Activity返回栈。</p></blockquote><p><strong> 拖拽 </strong><br>首先在多窗口模式下打开新界面，如上面的代码所示。<br>在MainActivity中发起拖拽<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">final</span> Button dragedButton = findViewById(R.id.drag_to_another);<span class="comment">//拖拽按钮</span></div><div class="line">        dragedButton.setTag(<span class="string">"this is a test"</span>);</div><div class="line"></div><div class="line">        dragedButton.setOnTouchListener(<span class="keyword">new</span> View.OnTouchListener() &#123;</div><div class="line">            <span class="meta">@Override</span></div><div class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">onTouch</span><span class="params">(View v, MotionEvent event)</span> </span>&#123;</div><div class="line"></div><div class="line">                <span class="keyword">if</span>(event.getAction() == MotionEvent.ACTION_DOWN)&#123;</div><div class="line"></div><div class="line">                    ClipData.Item item = <span class="keyword">new</span> ClipData.Item((CharSequence) dragedButton.getTag());</div><div class="line">                    String[] mimeTypes = &#123;ClipDescription.MIMETYPE_TEXT_PLAIN&#125;;</div><div class="line">                    ClipData dragData = <span class="keyword">new</span> ClipData(v.getTag().toString(), mimeTypes, item);</div><div class="line">                    View.DragShadowBuilder shadow = <span class="keyword">new</span> View.DragShadowBuilder(dragedButton);</div><div class="line">                    <span class="comment">/** startDragAndDrop是Android N SDK中的新方法，替代了以前的startDrag，flag需要设置为DRAG_FLAG_GLOBAL */</span></div><div class="line">                    v.startDragAndDrop(dragData, shadow, <span class="keyword">null</span>, View.DRAG_FLAG_GLOBAL);</div><div class="line">                    <span class="keyword">return</span> <span class="keyword">true</span>;</div><div class="line">                &#125;</div><div class="line">                <span class="keyword">else</span> &#123;</div><div class="line">                    <span class="keyword">return</span> <span class="keyword">false</span>;</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">        &#125;);</div></pre></td></tr></table></figure></p><p>在第二个界面中接收拖拽结果<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">final</span> TextView textView = findViewById(R.id.show_drag_view_tag);</div><div class="line">        textView.setText(<span class="string">"拖拽到这里"</span>);</div><div class="line">        textView.setOnDragListener(<span class="keyword">new</span> View.OnDragListener() &#123;</div><div class="line">            <span class="meta">@Override</span></div><div class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">onDrag</span><span class="params">(View view, DragEvent dragEvent)</span> </span>&#123;</div><div class="line">                <span class="keyword">switch</span> (dragEvent.getAction()) &#123;</div><div class="line">                    <span class="keyword">case</span> DragEvent.ACTION_DRAG_STARTED:</div><div class="line">                        Log.d(TAG, <span class="string">"Action is DragEvent.ACTION_DRAG_STARTED"</span>);</div><div class="line">                        <span class="keyword">break</span>;</div><div class="line"></div><div class="line">                    <span class="keyword">case</span> DragEvent.ACTION_DRAG_ENTERED:</div><div class="line">                        Log.d(TAG, <span class="string">"Action is DragEvent.ACTION_DRAG_ENTERED"</span>);</div><div class="line">                        <span class="keyword">break</span>;</div><div class="line"></div><div class="line">                    <span class="keyword">case</span> DragEvent.ACTION_DRAG_EXITED:</div><div class="line">                        Log.d(TAG, <span class="string">"Action is DragEvent.ACTION_DRAG_EXITED"</span>);</div><div class="line">                        <span class="keyword">break</span>;</div><div class="line"></div><div class="line">                    <span class="keyword">case</span> DragEvent.ACTION_DRAG_LOCATION:</div><div class="line">                        <span class="keyword">break</span>;</div><div class="line"></div><div class="line">                    <span class="keyword">case</span> DragEvent.ACTION_DRAG_ENDED:</div><div class="line">                        Log.d(TAG, <span class="string">"Action is DragEvent.ACTION_DRAG_ENDED"</span>);</div><div class="line">                        <span class="keyword">break</span>;</div><div class="line"></div><div class="line">                    <span class="keyword">case</span> DragEvent.ACTION_DROP:</div><div class="line">                        Log.d(TAG, <span class="string">"ACTION_DROP event"</span>);</div><div class="line">                        <span class="comment">/** 3.在这里显示接收到的结果 */</span></div><div class="line">                        textView.setText(dragEvent.getClipData().getItemAt(<span class="number">0</span>).getText());</div><div class="line">                        <span class="keyword">break</span>;</div><div class="line"></div><div class="line">                    <span class="keyword">default</span>:</div><div class="line">                        <span class="keyword">break</span>;</div><div class="line">                &#125;</div><div class="line"></div><div class="line">                <span class="keyword">return</span> <span class="keyword">true</span>;</div><div class="line">            &#125;</div><div class="line">        &#125;);</div><div class="line">    &#125;</div></pre></td></tr></table></figure></p><p>将MainActivity中的拖拽按钮拖放的第二个界面中<code>拖拽到这里</code>view上之后<br><img src="/image/Android/MultiWindow/3.png" alt="MultiWindow"><br>关于startDragAndDrop，官方参考文档在这里<br><a href="https://developer.android.com/reference/android/view/View?hl=zh-cn#startDrag" target="_blank" rel="external">startDragAndDrop</a><br><a href="https://developer.android.com/reference/android/view/View?hl=zh-cn#startDrag" target="_blank" rel="external">https://developer.android.com/reference/android/view/View?hl=zh-cn#startDrag</a></p><hr><p>以上</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Android7.0推出了多窗口(分屏)模式，允许一个屏幕下显示两个应用，可以一边追剧一边看电子书，不过在小一点的手机屏幕上看起来可能有点鸡肋。但是在TV端(这个屏幕就比较大了，一般都是40寸起步)中，画中画模式可以让我们同时进行多个任务了。&lt;br&gt;
    
    </summary>
    
    
      <category term="Android" scheme="http://blog.huangyuanlove.com/tags/Android/"/>
    
  </entry>
  
  <entry>
    <title>面试总结</title>
    <link href="http://blog.huangyuanlove.com/2018/06/03/%E9%9D%A2%E8%AF%95%E6%80%BB%E7%BB%93/"/>
    <id>http://blog.huangyuanlove.com/2018/06/03/面试总结/</id>
    <published>2018-06-03T06:30:54.000Z</published>
    <updated>2018-08-05T03:41:50.307Z</updated>
    
    <content type="html"><![CDATA[<p>最近的面试过程中遇到的面试题，涉及的方面比较广泛，大致分成了一下几个方面：<br>操作系统、Java、Android、计算机网络、其他(kotlin、react、安全之类的)。<br><a id="more"></a></p><h3 id="操作系统相关："><a href="#操作系统相关：" class="headerlink" title="操作系统相关："></a>操作系统相关：</h3><h4 id="进程和线程的区别"><a href="#进程和线程的区别" class="headerlink" title="进程和线程的区别"></a>进程和线程的区别</h4><blockquote><ul><li>进程是资源的分配和调度的一个独立单元，而线程是CPU调度的基本单元 </li><li>同一个进程中可以包括多个线程，并且线程共享整个进程的资源（寄存器、堆栈、上下文），一个进行至少包括一个线程。</li><li>进程的创建调用fork或者vfork，而线程的创建调用pthread_create，进程结束后它拥有的所有线程都将销毁，而线程的结束不会影响同个进程中的其他线程的结束</li><li>线程是轻两级的进程，它的创建和销毁所需要的时间比进程小很多，所有操作系统中的执行功能都是创建线程去完成的</li><li>线程中执行时一般都要进行同步和互斥，因为他们共享同一进程的所有资源</li><li>线程有自己的私有属性TCB，线程id，寄存器、硬件上下文，而进程也有自己的私有属性进程控制块PCB，这些私有属性是不被共享的，用来标示一个进程或一个线程的标志</li></ul></blockquote><h4 id="线程调度算法"><a href="#线程调度算法" class="headerlink" title="线程调度算法"></a>线程调度算法</h4><blockquote><ul><li>SCHED_OTHER：普通任务调度策略。</li><li>SCHED_FIFO：实时任务调度策略，先到先服务。一旦占用cpu则一直运行，直到有更高优先级任务到达或自己放弃。</li><li>SCHED_RR：实时任务调度策略，时间片轮转。当任务的时间片用完，系统将重新分配时间片，并置于就绪队列尾。放在队列尾<br>具体涉及到N多内容，自行搜索</li></ul></blockquote><h4 id="内存页面置换算法"><a href="#内存页面置换算法" class="headerlink" title="内存页面置换算法"></a>内存页面置换算法</h4><p>为提高内存利用率，解决内存供不应求的问题，更加合理的使用内存，人们创造了分页式内存抽象。同时有一个虚拟内存的概念，是指将内存中暂时不需要的部分写入硬盘，看上去硬盘扩展了内存的容量，所以叫做“虚拟”内存。使用虚拟内存，应用程序可以使用比实际物理内存更大的内存空间。可以认为这个更大的内存空间就在硬盘上，只有将某一部分需要被用到时，才被写入真实内存；当它暂时不再被用到时，又被写回硬盘。分页式内存管理将物理内存分为等大的小块，每块大小通常为1K、2K、4K等，称为页帧；逻辑内存（使用虚拟内存技术扩大的内存，可认为其位于硬盘上）也被分为等大的小块，称为页；且页和页帧的大小一定是一样的，它是写入真实内存和写回硬盘最小单位。</p><blockquote><p><strong> Optimal算法（最优算法） </strong><br>　　从内存中移除永远都不再需要的页面或者说是未来最长时间内不再被访问的页面，如果这样的页面存在，则选择最长时间不需要访问的页面。采用最佳置换算法，可以保证较低的页面更新频率。从理论上讲，由于无法预知哪一个页面是未来最长时间内不再被访问的，因而该算法无法实现，但是可用来衡量其他算法。</p><p><strong> FIFO（First-In First-Out，先进先出）算法 </strong><br>    该算法总是淘汰最早进入内存的页面，即选择在内存中停留时间最久的页面予以淘汰。<br>　　这个算法的实现简单，只需要将进程已调入内存中的页面，按照先后顺序连接成一个队列，设置一个替换指针，总是指向最老的页面。<br>　　但是该算法与进程实际的规律并不相适应，因为在进程中，有些页面经常被访问，比如：含有全局变量、常用函数、例程等的页面，FIFO不能保证这些页面不会被淘汰。<br>　　正是由于没有考虑页面的重要性的问题，FIFO算法很容易将重要的页换出内存。</p><p><strong> Second Chance（第二次机会）算法 </strong><br>　　为了避免FIFO算法将重要的页换出内存，Second Chance算法提供了一些改进。Second Chance算法在将页面换出内存前检查其使用位，如果其使用位为1，证明此页最近有被使用，猜测它还可能被使用，于是不把它置换出内存，但是把其使用位置为0，随后检查下一个页面，直到发现某页的使用位为0，将此页置换出内存。</p><p><strong> LRU（Least Recent Used, 最近最少使用）算法 </strong><br>　　在之前的FIFO算法中，依据的是各个页面调入内存的时间，这并不能反映页面的真实使用情况。而LRU（Latest Recently Used）是根据页面调入内存之后的使用情况。由于无法预测页面未来的情况，所以只能利用“最近的过去”来作为预测未来的方法，LRU选择的是最近最久未使用的页面予以淘汰。<br>　　该算法赋予每个页面一个访问字段，用来记录一个页面从上次被访问以来所经历的时间t，当需要淘汰一个页面的时候，选择现有页面中t的值最大的页面进行淘汰。<br>　　LRU是一种优秀的页面置换算法，但是需要硬件的支持，为了了解一个进程在内存中各个页面各有多少时间未被进程访问，以及如何快速地知道哪一个页面是最近最久未使用的页面，需要 寄存器+栈 来支持。</p></blockquote><h3 id="java相关："><a href="#java相关：" class="headerlink" title="java相关："></a>java相关：</h3><h4 id="synchronized-和Lock的区别-以及实现原理"><a href="#synchronized-和Lock的区别-以及实现原理" class="headerlink" title="synchronized 和Lock的区别 以及实现原理"></a>synchronized 和Lock的区别 以及实现原理</h4><blockquote><p>  教科书式的应试回答：<br>    主要相同点：Lock能完成synchronized所实现的所有功能<br>    主要不同点：Lock有比synchronized更精确的线程语义和更好的性能。synchronized会自动释放锁，而Lock一定要求程序员手工释放，并且必须在finally从句中释放。</p></blockquote><table><thead><tr><th>类别</th><th style="text-align:center">synchronized</th><th>synchronized</th></tr></thead><tbody><tr><td>存在层次</td><td style="text-align:center">Java的关键字，在jvm层面上</td><td>是一个类</td></tr><tr><td>锁的释放</td><td style="text-align:center">1、以获取锁的线程执行完同步代码，释放锁 2、线程执行发生异常，jvm会让线程释放锁</td><td>在finally中必须释放锁，不然容易造成线程死锁</td></tr><tr><td>锁的获取</td><td style="text-align:center">假设A线程获得锁，B线程等待。如果A线程阻塞，B线程会一直等待</td><td>分情况而定，Lock有多个锁获取的方式，具体下面会说道，大致就是可以尝试获得锁，线程可以不用一直等待</td></tr><tr><td>锁状态</td><td style="text-align:center">无法判断</td><td>可以判断</td></tr><tr><td>锁类型</td><td style="text-align:center">可重入 不可中断 非公平</td><td>可重入 可判断 可公平（两者皆可）</td></tr><tr><td>性能</td><td style="text-align:center">少量同步</td><td>大量同步</td></tr></tbody></table><p>关于同步类(java.util.concurrent包下)的介绍可以看这个 <a href="http://blog.huangyuanlove.com/2018/03/20/Java%E5%B9%B6%E5%8F%91%E5%A4%9A%E7%BA%BF%E7%A8%8B%E5%90%8C%E6%AD%A5/#more">http://blog.huangyuanlove.com/2018/03/20/Java%E5%B9%B6%E5%8F%91%E5%A4%9A%E7%BA%BF%E7%A8%8B%E5%90%8C%E6%AD%A5/#more</a><br>关于Lock的底层实现可以看这篇：<a href="https://blog.csdn.net/Luxia_24/article/details/52403033" target="_blank" rel="external">https://blog.csdn.net/Luxia_24/article/details/52403033</a><br>关于synchronized可以看这篇 <a href="https://blog.csdn.net/u012403290/article/details/64910926?locationNum=11&amp;fps=1" target="_blank" rel="external">https://blog.csdn.net/u012403290/article/details/64910926?locationNum=11&amp;fps=1</a></p><h4 id="Map、Set、List区别"><a href="#Map、Set、List区别" class="headerlink" title="Map、Set、List区别"></a>Map、Set、List区别</h4><p>这个自己翻一下源码看一下就好<br>Map-&gt; HashMap(存入数据的过程，hash冲突了怎么办),TreeMap,LinkedHashMap<br>Set-&gt; 使用Map实现的，set中存放的数据对应map中的key，value是内部的一个object字段<br>list-&gt; ArrayList(数组),LinkedList(链表)区别，优缺点</p><h4 id="Java虚拟机"><a href="#Java虚拟机" class="headerlink" title="Java虚拟机"></a>Java虚拟机</h4><p>这个主要是问内存区域，垃圾回收算法，可以参考这里：<br>JVM-内存分配与回收策略 <a href="http://blog.huangyuanlove.com/2017/04/07/JVM-%E5%86%85%E5%AD%98%E5%88%86%E9%85%8D%E4%B8%8E%E5%9B%9E%E6%94%B6%E7%AD%96%E7%95%A5/">http://blog.huangyuanlove.com/2017/04/07/JVM-%E5%86%85%E5%AD%98%E5%88%86%E9%85%8D%E4%B8%8E%E5%9B%9E%E6%94%B6%E7%AD%96%E7%95%A5/</a><br>JVM-垃圾收集算法与实现  <a href="http://blog.huangyuanlove.com/2017/03/30/JVM-%E5%9E%83%E5%9C%BE%E6%94%B6%E9%9B%86%E7%AE%97%E6%B3%95/">http://blog.huangyuanlove.com/2017/03/30/JVM-%E5%9E%83%E5%9C%BE%E6%94%B6%E9%9B%86%E7%AE%97%E6%B3%95/</a><br>JVM垃圾回收-对象已死？ <a href="http://blog.huangyuanlove.com/2017/03/29/JVM%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6-%E5%AF%B9%E8%B1%A1%E5%B7%B2%E6%AD%BB%EF%BC%9F/">http://blog.huangyuanlove.com/2017/03/29/JVM%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6-%E5%AF%B9%E8%B1%A1%E5%B7%B2%E6%AD%BB%EF%BC%9F/</a><br>JVM内存区域 <a href="http://blog.huangyuanlove.com/2017/03/27/JVM%E5%86%85%E5%AD%98%E5%8C%BA%E5%9F%9F/">http://blog.huangyuanlove.com/2017/03/27/JVM%E5%86%85%E5%AD%98%E5%8C%BA%E5%9F%9F/</a></p><h4 id="捕获子线程异常"><a href="#捕获子线程异常" class="headerlink" title="捕获子线程异常"></a>捕获子线程异常</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">new</span> Thread().setUncaughtExceptionHandler(<span class="keyword">new</span> Thread.UncaughtExceptionHandler() &#123;</div><div class="line">           <span class="meta">@Override</span></div><div class="line">           <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">uncaughtException</span><span class="params">(Thread t, Throwable e)</span> </span>&#123;</div><div class="line">               </div><div class="line">           &#125;</div><div class="line">       &#125;);</div><div class="line">Thread.setDefaultUncaughtExceptionHandler(<span class="keyword">new</span> Thread.UncaughtExceptionHandler() &#123;</div><div class="line">           <span class="meta">@Override</span></div><div class="line">           <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">uncaughtException</span><span class="params">(Thread t, Throwable e)</span> </span>&#123;</div><div class="line"></div><div class="line">           &#125;</div><div class="line">       &#125;);</div></pre></td></tr></table></figure><p>如果一个线程没有显式的设置它的UncaughtExceptionHandler，JVM就会检查该线程所在的线程组是否设置了UncaughtExceptionHandler，如果已经设置，就是用该UncaughtExceptionHandler；否则查看是否在Thread层面通过静态方法setDefaultUncaughtExceptionHandler()设置了UncaughtExceptionHandler，如果已经设置就是用该UncaughtExceptionHandler；如果上述都没有找到，JVM会在对应的console中打印异常的堆栈信息。<br>具体情况可以看一下Java并发编程的艺术</p><h4 id="线程池"><a href="#线程池" class="headerlink" title="线程池"></a>线程池</h4><p>这是个大坑，看源码吧ThreadPoolExecutor.java，还有就是常见线程池的比较。</p><h4 id="单例模式-线程安全"><a href="#单例模式-线程安全" class="headerlink" title="单例模式 线程安全"></a>单例模式 线程安全</h4><p>单例的模式的N种写法，像什么double check、懒汉模式、静态内部类，还有就是枚举方式。这里会引出来<code>volatile</code>关键字，然后就是线程安全的问题。</p><h3 id="Android相关："><a href="#Android相关：" class="headerlink" title="Android相关："></a>Android相关：</h3><h4 id="多进程写sp的问题"><a href="#多进程写sp的问题" class="headerlink" title="多进程写sp的问题"></a>多进程写sp的问题</h4><p>还是线程安全的问题，因为SP不支持两个进程同事去执行写操作，否则会导致一定几率的数据丢失，这是因为SP底层通过读写xml文件来实现的，并发写显然是有问题的</p><h4 id="sp底层实现"><a href="#sp底层实现" class="headerlink" title="sp底层实现"></a>sp底层实现</h4><p>读写xml文件</p><h4 id="Activity和Fragment生命周期-生命周期函数是谁调用的"><a href="#Activity和Fragment生命周期-生命周期函数是谁调用的" class="headerlink" title="Activity和Fragment生命周期,生命周期函数是谁调用的"></a>Activity和Fragment生命周期,生命周期函数是谁调用的</h4><p>声明周期函数是由ActivityThread调度的，具体逻辑封装在Instrumentation类里面。具体读一下这两个类就好。</p><h4 id="Activity启动模式，启动过程"><a href="#Activity启动模式，启动过程" class="headerlink" title="Activity启动模式，启动过程"></a>Activity启动模式，启动过程</h4><p>单独开了一篇博客<a href="http://blog.huangyuanlove.com/2018/07/26/Activity%E5%90%AF%E5%8A%A8%E6%A8%A1%E5%BC%8F%EF%BC%8C%E5%90%AF%E5%8A%A8%E8%BF%87%E7%A8%8B/#more">http://blog.huangyuanlove.com/2018/07/26/Activity%E5%90%AF%E5%8A%A8%E6%A8%A1%E5%BC%8F%EF%BC%8C%E5%90%AF%E5%8A%A8%E8%BF%87%E7%A8%8B/#more</a></p><h4 id="View点击事件分发流程"><a href="#View点击事件分发流程" class="headerlink" title="View点击事件分发流程"></a>View点击事件分发流程</h4><p>View事件分发：<a href="http://blog.huangyuanlove.com/2018/07/29/View事件分发/#more">http://blog.huangyuanlove.com/2018/07/29/View事件分发/#more</a></p><h4 id="View绘制过程"><a href="#View绘制过程" class="headerlink" title="View绘制过程"></a>View绘制过程</h4><p>View绘制过程：<a href="http://blog.huangyuanlove.com//2018/07/29/View绘制过程/#more">http://blog.huangyuanlove.com//2018/07/29/View绘制过程/#more</a></p><h4 id="Handler"><a href="#Handler" class="headerlink" title="Handler"></a>Handler</h4><p>Android的消息机制:  <a href="http://blog.huangyuanlove.com/2017/03/23/Android%E7%9A%84%E6%B6%88%E6%81%AF%E6%9C%BA%E5%88%B6/#more">http://blog.huangyuanlove.com/2017/03/23/Android%E7%9A%84%E6%B6%88%E6%81%AF%E6%9C%BA%E5%88%B6/#more</a></p><h4 id="省电优化"><a href="#省电优化" class="headerlink" title="省电优化"></a>省电优化</h4><p>不打扰系统休眠（不监听电量变化等，三方的可以hook  oop  hook住oncreat）<br>不做不必要的动作（界面后台要停止动画）</p><h4 id="广播的底层实现（binder）"><a href="#广播的底层实现（binder）" class="headerlink" title="广播的底层实现（binder）"></a>广播的底层实现（binder）</h4><p>Android 广播 ：<a href="http://blog.huangyuanlove.com/2018/07/31/Android%E5%B9%BF%E6%92%AD/">http://blog.huangyuanlove.com/2018/07/31/Android%E5%B9%BF%E6%92%AD/</a></p><h3 id="计算机网络相关："><a href="#计算机网络相关：" class="headerlink" title="计算机网络相关："></a>计算机网络相关：</h3><h4 id="websocket为什么能保持长连接"><a href="#websocket为什么能保持长连接" class="headerlink" title="websocket为什么能保持长连接"></a>websocket为什么能保持长连接</h4><h4 id="http、tcp-udp、tcp怎么解决拥塞、滑动窗口、udp"><a href="#http、tcp-udp、tcp怎么解决拥塞、滑动窗口、udp" class="headerlink" title="http、tcp/udp、tcp怎么解决拥塞、滑动窗口、udp"></a>http、tcp/udp、tcp怎么解决拥塞、滑动窗口、udp</h4><p>这个可以看谢希仁的《计算机网络》第六版，tcp:<a href="http://blog.huangyuanlove.com/2017/07/03/TCP%E5%8D%8F%E8%AE%AE%E7%9A%84%E7%AE%80%E5%8D%95%E7%90%86%E8%A7%A3/#more">http://blog.huangyuanlove.com/2017/07/03/TCP%E5%8D%8F%E8%AE%AE%E7%9A%84%E7%AE%80%E5%8D%95%E7%90%86%E8%A7%A3/#more</a> 这里简单的记录了一下比较重要的东西。</p><h3 id="其他："><a href="#其他：" class="headerlink" title="其他："></a>其他：</h3><p>加固原理 加的什么壳<br>kt var  val区别  when中的 is  in</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;最近的面试过程中遇到的面试题，涉及的方面比较广泛，大致分成了一下几个方面：&lt;br&gt;操作系统、Java、Android、计算机网络、其他(kotlin、react、安全之类的)。&lt;br&gt;
    
    </summary>
    
    
      <category term="Android" scheme="http://blog.huangyuanlove.com/tags/Android/"/>
    
      <category term="面试" scheme="http://blog.huangyuanlove.com/tags/%E9%9D%A2%E8%AF%95/"/>
    
  </entry>
  
  <entry>
    <title>项目重构记录</title>
    <link href="http://blog.huangyuanlove.com/2018/05/24/%E9%A1%B9%E7%9B%AE%E9%87%8D%E6%9E%84%E8%AE%B0%E5%BD%95/"/>
    <id>http://blog.huangyuanlove.com/2018/05/24/项目重构记录/</id>
    <published>2018-05-24T04:11:00.000Z</published>
    <updated>2018-08-05T03:46:07.153Z</updated>
    
    <content type="html"><![CDATA[<p>总结一下在新公司一个月来学到的东西吧。公司的项目采用Native+RN进行开发，前两周简单的了解了一下项目结构，写了一些自动打包的脚本。后两周大致学习了一下RN，然后就是调整项目结构，做重构。</p><a id="more"></a><p>一些简单的记录，</p><h5 id="需要注意的地方"><a href="#需要注意的地方" class="headerlink" title="需要注意的地方"></a>需要注意的地方</h5><ol><li>主工程module下的插件是 <blockquote><p>apply plugin: ‘com.android.application’</p></blockquote></li></ol><p>library中的插件是</p><blockquote><p>apply plugin: ‘com.android.library’</p></blockquote><ol><li><p>在library module中，生成的R文件中的变量没有被final修饰，所以在<code>switch case</code>中需要改一下写法，比如改成<code>if else</code>。</p></li><li><p>ButterKnife中注解@bind中要求参数是final类型，所以在library中这个注解也不好用，作者给出了解决方案。</p></li><li><p>library module中不能有applicationId。</p><h5 id="改动记录"><a href="#改动记录" class="headerlink" title="改动记录"></a>改动记录</h5><p>涉及到源代码的部分没有公开。</p></li><li><p>将原项目中所有library依赖移动到<code>BaseApp</code>文件夹下,统一由一个git子模块引用。，所以需要在工程根目录下的<code>setting.gradle</code>中修改<code>include</code>路径</p><blockquote><p>include  ‘:base’</p></blockquote></li></ol><p>改为</p><blockquote><p>include  ‘:BaseApp:base’</p></blockquote><p>library中依赖的其他library也需要做修改(路径前添加<code>:BaseApp</code> )，如<code>RiskControlSdk</code>中<code>dependencies</code>中</p><blockquote><figure class="highlight groovy"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">releaseCompile project(<span class="string">path:</span> <span class="string">'BaseComponents'</span>, <span class="string">configuration:</span> <span class="string">'release'</span>)</div><div class="line">debugCompile project(<span class="string">path:</span> <span class="string">':BaseComponents'</span>, <span class="string">configuration:</span> <span class="string">'debug'</span>)</div></pre></td></tr></table></figure></blockquote><p>改为</p><blockquote><figure class="highlight groovy"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">releaseCompile project(<span class="string">path:</span> <span class="string">':BaseApp:BaseComponents'</span>, <span class="string">configuration:</span> <span class="string">'release'</span>)</div><div class="line">debugCompile project(<span class="string">path:</span> <span class="string">':BaseApp:BaseComponents'</span>, <span class="string">configuration:</span> <span class="string">'debug'</span>)</div></pre></td></tr></table></figure></blockquote><ol><li><p>原app module(现base)中用到<code>butterknife</code>，在@bind注解要求参数是final类型，但是在library项目中，生成的R文件中的id不是final。<br><code>butterknife</code>作者给出类解决办法:升级<code>butterknife</code>到8.8.1，在library中的<code>build.gradle</code>添加<code>apply plugin: &#39;com.jakewharton.butterknife&#39;</code>插件，用于生成<code>R2</code>文件，将原来的<code>R.id.xxx</code>改为<code>R2.id.xxx</code>。同理，在<code>switch case</code>中用R.id的地方也要做相应修改。参考 <a href="https://github.com/JakeWharton/butterknife" target="_blank" rel="external">https://github.com/JakeWharton/butterknife</a></p></li><li><p>将gradle依赖、某些appkey在根目录下的<code>config.gradle</code>中配置<br>在项目根目录下新建<code>config.gradle</code>文件，用来存放公共配置，如</p></li></ol><figure class="highlight groovy"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div></pre></td><td class="code"><pre><div class="line">ext &#123;</div><div class="line">url = <span class="string">"https://test.test.com"</span></div><div class="line">UMENG_APPKEY = <span class="string">"*****"</span></div><div class="line">UMENG_MESSAGE_SECRET = <span class="string">"*******"</span></div><div class="line">WEIXIN_APP_ID = <span class="string">"******"</span></div><div class="line">WEIXIN_APP_SECRET = <span class="string">"********"</span></div><div class="line">android = [</div><div class="line"><span class="symbol">compileSdkVersion:</span> <span class="number">25</span>,</div><div class="line"><span class="symbol">buildToolsVersion:</span> <span class="string">"25.0.2"</span>,</div><div class="line"><span class="string">applicationId    :</span> <span class="string">"xxxxx"</span>,</div><div class="line"><span class="string">minSdkVersion    :</span> <span class="number">16</span>,</div><div class="line"><span class="string">targetSdkVersion :</span> <span class="number">22</span>,</div><div class="line"><span class="string">versionCode      :</span> <span class="number">120</span>,</div><div class="line"><span class="string">versionName      :</span> <span class="string">"1.2.0"</span>,</div><div class="line">]</div><div class="line">dependencies = [</div><div class="line"><span class="string">"appcompat-v7"</span>                : <span class="string">"com.android.support:appcompat-v7:25.0.0"</span>,</div><div class="line"><span class="string">"support-v4"</span>                  : <span class="string">'com.android.support:support-v4:25.0.0'</span>,</div><div class="line"><span class="string">"support-v13"</span>                 : <span class="string">'com.android.support:support-v13:23.4.0'</span>,</div><div class="line"><span class="string">"support-annotations"</span>         : <span class="string">'com.android.support:support-annotations:23.4.0'</span>,</div><div class="line"><span class="string">"butterknife"</span>                 : <span class="string">"com.jakewharton:butterknife:8.8.1"</span>,</div><div class="line"><span class="string">"xutils"</span>                      : <span class="string">'org.xutils:xutils:3.5.0'</span>,</div><div class="line"><span class="string">"junit"</span>                       : <span class="string">'junit:junit:4.12'</span>,</div><div class="line"><span class="string">"react-native"</span>                : <span class="string">"com.facebook.react:react-native:0.49.5"</span>,</div><div class="line"><span class="string">"subsampling-scale-image-view"</span>: <span class="string">'com.davemorrissey.labs:subsampling-scale-image-view:3.5.0'</span>,</div><div class="line"><span class="string">"eventbus"</span>                    : <span class="string">'de.greenrobot:eventbus:2.4.0'</span>,</div><div class="line"><span class="string">"okio"</span>                        : <span class="string">'com.squareup.okio:okio:1.8.0'</span>,</div><div class="line"><span class="string">"universal-image-loader"</span>      : <span class="string">'com.nostra13.universalimageloader:universal-image-loader:1.9.5'</span>,</div><div class="line"><span class="string">"multidex"</span>                    : <span class="string">'com.android.support:multidex:1.0.1'</span>,</div><div class="line"><span class="string">"nohttp"</span>:<span class="string">'com.yanzhenjie.nohttp:nohttp:1.1.4'</span>,</div><div class="line">]</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>使用时注意事项：</p><ol><li>现在library中的所有appkey(三方)相关的，都由工程根目录下的配置文件<code>config.gradle</code>提供，然后添加到该module的<code>BuildConfig.java</code>文件中，代码中从<code>BuildConfig.java</code>文件中引用</li></ol><p>在<code>config.gradle</code>文件中添加一个三方key值<br><figure class="highlight groovy"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">ext&#123;</div><div class="line">UMENG_APPKEY = <span class="string">"************"</span></div><div class="line">&#125;</div></pre></td></tr></table></figure></p><p>在module中的<code>build.grale</code>引用<br><figure class="highlight groovy"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">def</span> UMENG_APPKEY = rootProject.ext.UMENG_APPKEY</div></pre></td></tr></table></figure></p><p>加入到该module的<code>BuildConfig.java</code>文件</p><figure class="highlight groovy"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">defaultConfig&#123;</div><div class="line">buildConfigField <span class="string">"String"</span>, <span class="string">"umeng_analytics_key"</span>, <span class="string">"\""</span> + UMENG_APPKEY + <span class="string">"\""</span></div><div class="line">&#125;</div></pre></td></tr></table></figure><p>代码中引用<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">BuildConfig.umeng_analytics_key</div></pre></td></tr></table></figure></p><p>这里需要注意的是，import该文件的时候，是从该module的<code>manifest.xml</code>中的跟标签的<code>package</code>属性所指向的包名导入的，如</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">manifest</span> <span class="attr">xmlns:android</span>=<span class="string">"http://schemas.android.com/apk/res/android"</span></span></div><div class="line"><span class="attr">package</span>=<span class="string">"com.huangyuanlove.test"</span>&gt;</div><div class="line"><span class="tag">&lt;/<span class="name">manifest</span>&gt;</span></div></pre></td></tr></table></figure><p>则<code>BuildConfig.java</code>文件的导入路径为 <code>import com.huangyuanlove.test;</code></p><ol><li>所有使用gradle依赖的三方全部放在根目录的<code>config.gradle</code>文件夹下，其他module引用时可参考下面的配置。如</li></ol><p>需要添加一个新的依赖，在根目录下的 <code>config.gradle</code>文件中</p><figure class="highlight groovy"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">ext&#123;</div><div class="line">dependencies=[</div><div class="line"><span class="string">"newDependency"</span>:<span class="string">"dependency"</span>,</div><div class="line">]</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>在其他module中引用</p><figure class="highlight groovy"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">def</span> dependency = rootProject.ext.dependencies</div><div class="line">dependencies &#123;</div><div class="line">compile dependency[<span class="string">"newDependency"</span>]</div><div class="line">&#125;</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;总结一下在新公司一个月来学到的东西吧。公司的项目采用Native+RN进行开发，前两周简单的了解了一下项目结构，写了一些自动打包的脚本。后两周大致学习了一下RN，然后就是调整项目结构，做重构。&lt;/p&gt;
    
    </summary>
    
    
      <category term="Android" scheme="http://blog.huangyuanlove.com/tags/Android/"/>
    
  </entry>
  
  <entry>
    <title>网站免费升级https</title>
    <link href="http://blog.huangyuanlove.com/2018/04/01/%E7%BD%91%E7%AB%99%E5%85%8D%E8%B4%B9%E5%8D%87%E7%BA%A7https/"/>
    <id>http://blog.huangyuanlove.com/2018/04/01/网站免费升级https/</id>
    <published>2018-04-01T04:36:16.000Z</published>
    <updated>2018-08-04T05:19:15.915Z</updated>
    
    <content type="html"><![CDATA[<p>昨天跟着酷壳网左耳朵耗子的文章把自己在亚马逊主机上的网站变成https的安全访问了，证书不是自签名的，也不是花钱购买的。据说https的网站在搜索引擎中的rank值会比http的更高一些。升级完成后的浏览器截图如下：<br><img src="/image/https/https1.png" alt="浏览器"><br>下面是这次升级的记录。<br><a id="more"></a><br>为网站开启https安装证书非常简单，我用的是 <a href="https://letsencrypt.org/" target="_blank" rel="external">Let’s Encrypt </a>这个免费的解决方案。</p><ol><li>打开<a href="https://certbot.eff.org/" target="_blank" rel="external">https://certbot.eff.org/</a>这个网页</li><li>在Software 和 System选项里面选择你所使用的软件、系统，我用的nginx+ubuntu16.04<br><img src="/image/https/https4.png" alt="网站截图"></li><li>然后会跳转到一个新的网页，照着做就是了。<br>就以nginx+ubuntu16.04为例：<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">$ sudo apt-get update</div><div class="line">$ sudo apt-get install software-properties-common</div><div class="line">$ sudo add-apt-repository ppa:certbot/certbot</div><div class="line">$ sudo apt-get update</div><div class="line">$ sudo apt-get install python-certbot-nginx</div></pre></td></tr></table></figure></li></ol><p>安装成功后执行 <code>$ sudo certbot --nginx</code><br>让你输入你的邮箱，然后是同意用户协议，然后是是否公开你的邮箱。<br> <img src="/image/https/https2.png" alt="邮箱、用户协议"><br>接着会列出来nginx下所有配置的服务名称，输入你想要开启https的服务名称所对应的编号，如果想为多个服务开启https，中间以空格分隔。然后nginx重新加载一个配置或者重启一下。<br><img src="/image/https/https3.png" alt="开启https的服务名称"><br>我个人服务器上的nginx配置的<code>server_name</code>是<code>tomcat.huangyuanlove.com</code>,域名是在万网买的，然后在万网控制台添加一个A解析，把<code>tomcat.huangyuanlove.com</code>指向服务器的ip即可。<br>但是 <strong>Let’s Encrypt 的证书90天就过期了</strong>。所以还需要加上自动更新，使用<code>crontab -e</code>命令假如如下的定时作业(每个月强制更新一下)<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">0 0 1 * * /usr/bin/certbot renew --force-renewal</div><div class="line">5 0 1 * * /usr/sbin/service nginx restart</div></pre></td></tr></table></figure></p><p>需要注意的是，如果网站中有使用http的地方都要改成https,要不然一些资源文件如图片、js、css等非https的请求连接都会被ban掉。</p><hr><p>关于ubuntu安装和配置nginx，我也是在官网找的教程，网址在这里<a href="https://www.nginx.com/resources/wiki/start/index.html" target="_blank" rel="external">https://www.nginx.com/resources/wiki/start/index.html</a>,就知道你们不想看，安装命令如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">sudo apt-get update</div><div class="line">sudo apt-get install nginx</div></pre></td></tr></table></figure></p><p>安装完成后，nginx配置文件在<code>/etc/nginx/nginx.conf</code>,在http标签中添加server：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line">server&#123;</div><div class="line">        listen    80;</div><div class="line">        server_name    localhost;</div><div class="line">        location / &#123;</div><div class="line">            root    html;</div><div class="line">            index index.html index.htm;</div><div class="line">        &#125;</div><div class="line">        error_page 500 502 503 504 /50x.html;</div><div class="line">        location = /50x.html&#123;</div><div class="line">            root    html;</div><div class="line">        &#125;</div><div class="line">&#125;</div><div class="line">server&#123;</div><div class="line">        server_name    tomcat.huangyuanlove.com;</div><div class="line">        location / &#123;</div><div class="line">            proxy_pass http://xxx.xxx.xxx/;</div><div class="line">        &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><p>给自己的添加https证书后，<code>Certbot</code>会修改你的nginx中的server配置，修改的内容如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">listen 443 ssl https2; # managed by Certbot</div><div class="line">   ssl_certificate /etc/letsencrypt/live/tomcat.huangyuanlove.com/fullchain.pem; # managed by Certbot</div><div class="line">   ssl_certificate_key /etc/letsencrypt/live/tomcat.huangyuanlove.com/privkey.pem; # managed by Certbot</div><div class="line">   include /etc/letsencrypt/options-ssl-nginx.conf; # managed by Certbot</div><div class="line">   ssl_dhparam /etc/letsencrypt/ssl-dhparams.pem; # managed by Certbot</div></pre></td></tr></table></figure></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">server&#123;</div><div class="line">    if ($host = tomcat.huangyuanlove.com) &#123;</div><div class="line">        return 301 https://$host$request_uri;</div><div class="line">    &#125; # managed by Certbot</div><div class="line">    listen    80;</div><div class="line">    server_name    tomcat.huangyuanlove.com;</div><div class="line">    return 404; # managed by Certbot</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>基本上就是这样了，没有别的了。</p><hr><p>以上，嗯，对了，12306你什么时候按照这个教程做一下你的证书？</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;昨天跟着酷壳网左耳朵耗子的文章把自己在亚马逊主机上的网站变成https的安全访问了，证书不是自签名的，也不是花钱购买的。据说https的网站在搜索引擎中的rank值会比http的更高一些。升级完成后的浏览器截图如下：&lt;br&gt;&lt;img src=&quot;/image/https/https1.png&quot; alt=&quot;浏览器&quot;&gt;&lt;br&gt;下面是这次升级的记录。&lt;br&gt;
    
    </summary>
    
    
      <category term="乱七八糟" scheme="http://blog.huangyuanlove.com/tags/%E4%B9%B1%E4%B8%83%E5%85%AB%E7%B3%9F/"/>
    
      <category term="网站https" scheme="http://blog.huangyuanlove.com/tags/%E7%BD%91%E7%AB%99https/"/>
    
  </entry>
  
  <entry>
    <title>Java并发多线程同步</title>
    <link href="http://blog.huangyuanlove.com/2018/03/20/Java%E5%B9%B6%E5%8F%91%E5%A4%9A%E7%BA%BF%E7%A8%8B%E5%90%8C%E6%AD%A5/"/>
    <id>http://blog.huangyuanlove.com/2018/03/20/Java并发多线程同步/</id>
    <published>2018-03-20T02:43:39.000Z</published>
    <updated>2018-08-04T04:54:44.541Z</updated>
    
    <content type="html"><![CDATA[<p>最近遇到了多线程并发同步问题，找到了<code>java.util.concurrent</code>包下的<code>CountDownLatch</code>、<code>CyclicBarrier</code>、<code>Semaphore</code>这三个类。<br><code>CountDownLatch</code>可以实现类似计数器的功能，例如线程A需要等待B、C、D三个线程执行完成之后才可以执行。<br><code>CyclicBarrier</code>可以实现让一组(多个)线程等待至某个状态之后再全部同时执行，当所有线程都被释放以后，CyclicBarrier可以被重用。<br><code>Semaphore</code>可以控制同时访问的线程个数，通过<code>acquire()</code>获取一个许可，如果没有就等待，而<code>release()</code>释放一个许可。<br><a id="more"></a></p><h4 id="CountDownLatch"><a href="#CountDownLatch" class="headerlink" title="CountDownLatch"></a>CountDownLatch</h4><p>CountDownLatch类只有一个构造方法：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="title">CountDownLatch</span><span class="params">(<span class="keyword">int</span> count)</span> </span>&#123;</div><div class="line">        <span class="keyword">if</span> (count &lt; <span class="number">0</span>) <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(<span class="string">"count &lt; 0"</span>);</div><div class="line">        <span class="keyword">this</span>.sync = <span class="keyword">new</span> Sync(count);</div><div class="line">    &#125;</div></pre></td></tr></table></figure></p><p>这里的count是一个计数值，表示要等待多少任务，每次调用该对象示例的<code>countDown()</code>方法，该值都会减1，当count为0时表示没有需要等待的任务。常用的方法如下：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">await</span><span class="params">()</span> <span class="keyword">throws</span> InterruptedException </span>&#123; &#125;;   <span class="comment">//调用await()方法的线程会被挂起，它会等待直到count值为0才继续执行</span></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">await</span><span class="params">(<span class="keyword">long</span> timeout, TimeUnit unit)</span> <span class="keyword">throws</span> InterruptedException </span>&#123; &#125;;  <span class="comment">//和await()类似，只不过等待一定的时间后count值还没变为0的话就会继续执行</span></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">countDown</span><span class="params">()</span> </span>&#123; &#125;;  <span class="comment">//将count值减1</span></div></pre></td></tr></table></figure></p><p>示例如下：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">testCountDownLatch</span><span class="params">()</span> </span>&#123;</div><div class="line"><span class="keyword">final</span> CountDownLatch latch = <span class="keyword">new</span> CountDownLatch(<span class="number">2</span>);</div><div class="line"><span class="keyword">new</span> Thread(<span class="string">"one"</span>) &#123;</div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</div><div class="line"><span class="keyword">try</span> &#123;</div><div class="line">System.out.println(<span class="string">"子线程"</span> + Thread.currentThread().getName() + <span class="string">"正在执行"</span>);</div><div class="line">Thread.sleep(<span class="number">3000</span>);</div><div class="line">System.out.println(<span class="string">"子线程"</span> + Thread.currentThread().getName() + <span class="string">"执行完毕"</span>);</div><div class="line">latch.countDown();</div><div class="line">&#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</div><div class="line">e.printStackTrace();</div><div class="line">&#125;</div><div class="line">&#125;;</div><div class="line">&#125;.start();</div><div class="line"><span class="keyword">new</span> Thread(<span class="string">"two"</span>) &#123;</div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</div><div class="line"><span class="keyword">try</span> &#123;</div><div class="line">System.out.println(<span class="string">"子线程"</span> + Thread.currentThread().getName() + <span class="string">"正在执行"</span>);</div><div class="line">Thread.sleep(<span class="number">3000</span>);</div><div class="line">System.out.println(<span class="string">"子线程"</span> + Thread.currentThread().getName() + <span class="string">"执行完毕"</span>);</div><div class="line">latch.countDown();</div><div class="line">&#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</div><div class="line">e.printStackTrace();</div><div class="line">&#125;</div><div class="line">&#125;;</div><div class="line">&#125;.start();</div><div class="line"></div><div class="line"><span class="keyword">try</span> &#123;</div><div class="line">System.out.println(<span class="string">"等待2个线程执行完成"</span>);</div><div class="line">latch.await();</div><div class="line">System.out.println(<span class="string">"子线程已经执行完毕"</span>);</div><div class="line">&#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</div><div class="line">e.printStackTrace();</div><div class="line">&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><h4 id="CyclicBarrier"><a href="#CyclicBarrier" class="headerlink" title="CyclicBarrier"></a>CyclicBarrier</h4><p>该类有两个构造方法<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="title">CyclicBarrier</span><span class="params">(<span class="keyword">int</span> parties, Runnable barrierAction)</span></span></div><div class="line"><span class="keyword">public</span> <span class="title">CyclicBarrier</span><span class="params">(<span class="keyword">int</span> parties)</span></div></pre></td></tr></table></figure></p><p>参数parties是指让多少个线程或者任务等待至barrier状态，参数barrierAction是当这些线程都到达barrier状态后会执行的内容。<br>该类里面有两个比较重要的方法：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">await</span><span class="params">()</span> <span class="keyword">throws</span> InterruptedException, BrokenBarrierException </span>&#123; &#125;;</div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">await</span><span class="params">(<span class="keyword">long</span> timeout, TimeUnit unit)</span><span class="keyword">throws</span> InterruptedException,BrokenBarrierException,TimeoutException </span>&#123; &#125;;</div></pre></td></tr></table></figure></p><p>无参的方法比较常用，用来挂起当前线程，直到所有线程都达到barrier状态再同时执行后续任务。<br>有参的方法是让线程等待一定时间，如果线程还没有达到barrier状态，就让到达barrier状态的线程执行后续任务。<br>示例如下：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">testCyclicBarrier</span><span class="params">()</span> </span>&#123;</div><div class="line"><span class="comment">//CyclicBarrier barrier = new CyclicBarrier(5);</span></div><div class="line">CyclicBarrier barrier = <span class="keyword">new</span> CyclicBarrier(<span class="number">5</span>,<span class="keyword">new</span> Runnable() &#123;</div><div class="line"></div><div class="line"><span class="meta">@Override</span></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</div><div class="line">System.out.println(<span class="string">"所有线程执行完毕，随机挑选一个线程来执行打印"</span>);</div><div class="line">System.out.println(<span class="string">"挑选的线程为"</span> + Thread.currentThread().getName());</div><div class="line"></div><div class="line">&#125;</div><div class="line">&#125;);</div><div class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">5</span>; i++) &#123;</div><div class="line"><span class="keyword">new</span> Writer(barrier, <span class="string">"thread:"</span> + i).start();</div><div class="line">&#125;</div><div class="line"></div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">Writer</span> <span class="keyword">extends</span> <span class="title">Thread</span> </span>&#123;</div><div class="line"><span class="keyword">private</span> CyclicBarrier cyclicBarrier;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="title">Writer</span><span class="params">(CyclicBarrier cyclicBarrier, String threadName)</span> </span>&#123;</div><div class="line"><span class="keyword">this</span>.cyclicBarrier = cyclicBarrier;</div><div class="line"><span class="keyword">if</span> (threadName != <span class="keyword">null</span>) &#123;</div><div class="line"><span class="keyword">this</span>.setName(threadName);</div><div class="line">&#125;</div><div class="line"></div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="meta">@Override</span></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</div><div class="line"></div><div class="line"><span class="keyword">try</span> &#123;</div><div class="line">System.out.println(<span class="string">"线程"</span> + Thread.currentThread().getName() + <span class="string">"正在作业中"</span>);</div><div class="line">Thread.sleep(<span class="number">5000</span>);</div><div class="line">System.out.println(<span class="string">"线程"</span> + Thread.currentThread().getName() + <span class="string">"作业完成"</span>);</div><div class="line">cyclicBarrier.await();</div><div class="line">System.out.println(<span class="string">"所有线程作业完毕，线程"</span> + Thread.currentThread().getName() + <span class="string">"继续理其他任务"</span>);</div><div class="line"></div><div class="line">&#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</div><div class="line">e.printStackTrace();</div><div class="line">&#125; <span class="keyword">catch</span> (BrokenBarrierException e) &#123;</div><div class="line"></div><div class="line">e.printStackTrace();</div><div class="line">&#125;</div><div class="line"></div><div class="line">&#125;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure></p><p>值得注意的是，CyclicBarrier是可以<strong>重用</strong>的。</p><h4 id="Semaphore"><a href="#Semaphore" class="headerlink" title="Semaphore"></a>Semaphore</h4><p>该类提供了两个构造器：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="title">Semaphore</span><span class="params">(<span class="keyword">int</span> permits)</span> </span>&#123;          <span class="comment">//参数permits表示许可数目，即同时可以允许多少线程进行访问</span></div><div class="line">    sync = <span class="keyword">new</span> NonfairSync(permits);</div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">public</span> <span class="title">Semaphore</span><span class="params">(<span class="keyword">int</span> permits, <span class="keyword">boolean</span> fair)</span> </span>&#123;    <span class="comment">//这个多了一个参数fair表示是否是公平的，即等待时间越久的越先获取许可</span></div><div class="line">    sync = (fair)? <span class="keyword">new</span> FairSync(permits) : <span class="keyword">new</span> NonfairSync(permits);</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><p>下面是该类中比较重要的几个方法，首先是acquire()、release()：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">acquire</span><span class="params">()</span> <span class="keyword">throws</span> InterruptedException </span>&#123;  &#125;     <span class="comment">//获取一个许可</span></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">acquire</span><span class="params">(<span class="keyword">int</span> permits)</span> <span class="keyword">throws</span> InterruptedException </span>&#123; &#125;    <span class="comment">//获取permits个许可</span></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">release</span><span class="params">()</span> </span>&#123; &#125;          <span class="comment">//释放一个许可</span></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">release</span><span class="params">(<span class="keyword">int</span> permits)</span> </span>&#123; &#125;    <span class="comment">//释放permits个许可</span></div></pre></td></tr></table></figure></p><p>acquire()用来获取一个许可，若无许可能够获得，则会一直等待，直到获得许可。<br>release()用来释放许可。注意，在释放许可之前，必须先获获得许可。<br>这4个方法都会被阻塞，如果想立即得到执行结果，可以使用下面几个方法：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">tryAcquire</span><span class="params">()</span> </span>&#123; &#125;;    <span class="comment">//尝试获取一个许可，若获取成功，则立即返回true，若获取失败，则立即返回false</span></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">tryAcquire</span><span class="params">(<span class="keyword">long</span> timeout, TimeUnit unit)</span> <span class="keyword">throws</span> InterruptedException </span>&#123; &#125;;  <span class="comment">//尝试获取一个许可，若在指定的时间内获取成功，则立即返回true，否则则立即返回false</span></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">tryAcquire</span><span class="params">(<span class="keyword">int</span> permits)</span> </span>&#123; &#125;; <span class="comment">//尝试获取permits个许可，若获取成功，则立即返回true，若获取失败，则立即返回false</span></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">tryAcquire</span><span class="params">(<span class="keyword">int</span> permits, <span class="keyword">long</span> timeout, TimeUnit unit)</span> <span class="keyword">throws</span> InterruptedException </span>&#123; &#125;; <span class="comment">//尝试获取permits个许可，若在指定的时间内获取成功，则立即返回true，否则则立即返回false</span></div></pre></td></tr></table></figure></p><p>另外还可以通过availablePermits()方法得到可用的许可数目。<br>假如5个线程要使用3个资源，示例如下：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">testSemaphore</span><span class="params">()</span> </span>&#123;</div><div class="line"><span class="keyword">int</span> N = <span class="number">5</span>;            <span class="comment">//线程数</span></div><div class="line">        Semaphore semaphore = <span class="keyword">new</span> Semaphore(<span class="number">3</span>); <span class="comment">//资源数目</span></div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;N;i++)</div><div class="line">            <span class="keyword">new</span> Worker(<span class="string">"线程"</span> +i,semaphore).start();</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">Worker</span> <span class="keyword">extends</span> <span class="title">Thread</span> </span>&#123;</div><div class="line"></div><div class="line"><span class="keyword">private</span> Semaphore semaphore;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="title">Worker</span><span class="params">(String name, Semaphore semaphore)</span> </span>&#123;</div><div class="line"><span class="keyword">super</span>();</div><div class="line"><span class="keyword">this</span>.setName(name);</div><div class="line"><span class="keyword">this</span>.semaphore = semaphore;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="meta">@Override</span></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</div><div class="line"><span class="keyword">try</span> &#123;</div><div class="line">semaphore.acquire();</div><div class="line">System.out.println(<span class="string">"线程："</span> + Thread.currentThread().getName() + <span class="string">"占用一个资源"</span>);</div><div class="line">Thread.sleep(<span class="number">3000</span>);</div><div class="line">System.out.println(<span class="string">"线程："</span> + Thread.currentThread().getName() + <span class="string">"释放一个资源"</span>);</div><div class="line">semaphore.release();</div><div class="line">&#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</div><div class="line">e.printStackTrace();</div><div class="line">&#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure></p><p>CountDownLatch和CyclicBarrier都能够实现线程之间的等待，只不过它们侧重点不同：<br>CountDownLatch一般用于某个线程等待若干个其他线程执行完任务之后，它才执行；而CyclicBarrier一般用于一组线程互相等待至某个状态，然后这一组线程再同时执行；另外，CountDownLatch是不能够重用的，而CyclicBarrier是可以重用的。Semaphore其实和锁有点类似，它一般用于控制对某组资源的访问权限。</p><hr><p>以上</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;最近遇到了多线程并发同步问题，找到了&lt;code&gt;java.util.concurrent&lt;/code&gt;包下的&lt;code&gt;CountDownLatch&lt;/code&gt;、&lt;code&gt;CyclicBarrier&lt;/code&gt;、&lt;code&gt;Semaphore&lt;/code&gt;这三个类。&lt;br&gt;&lt;code&gt;CountDownLatch&lt;/code&gt;可以实现类似计数器的功能，例如线程A需要等待B、C、D三个线程执行完成之后才可以执行。&lt;br&gt;&lt;code&gt;CyclicBarrier&lt;/code&gt;可以实现让一组(多个)线程等待至某个状态之后再全部同时执行，当所有线程都被释放以后，CyclicBarrier可以被重用。&lt;br&gt;&lt;code&gt;Semaphore&lt;/code&gt;可以控制同时访问的线程个数，通过&lt;code&gt;acquire()&lt;/code&gt;获取一个许可，如果没有就等待，而&lt;code&gt;release()&lt;/code&gt;释放一个许可。&lt;br&gt;
    
    </summary>
    
    
      <category term="java" scheme="http://blog.huangyuanlove.com/tags/java/"/>
    
  </entry>
  
  <entry>
    <title>Tinker初探</title>
    <link href="http://blog.huangyuanlove.com/2018/03/10/Tinker%E5%88%9D%E6%8E%A2/"/>
    <id>http://blog.huangyuanlove.com/2018/03/10/Tinker初探/</id>
    <published>2018-03-10T04:35:18.000Z</published>
    <updated>2018-08-04T05:16:13.461Z</updated>
    
    <content type="html"><![CDATA[<p>前两天想试一下热修复的功能，对比各大平台的热修复功能，看到tinker的<a href="http://www.tinkerpatch.com/Docs/intro" target="_blank" rel="external">文档介绍</a>，最终决定先拿Tinker试一下。</p><blockquote><table><thead><tr><th style="text-align:center"></th><th style="text-align:center"></th><th style="text-align:center"></th><th style="text-align:center"></th><th style="text-align:center"></th></tr></thead><tbody><tr><td style="text-align:center"></td><td style="text-align:center">Tinker</td><td style="text-align:center">QZone</td><td style="text-align:center">AndFix</td><td style="text-align:center">Robust</td></tr><tr><td style="text-align:center">类替换</td><td style="text-align:center">yes</td><td style="text-align:center">yes</td><td style="text-align:center">no</td><td style="text-align:center">no</td></tr><tr><td style="text-align:center">So替换</td><td style="text-align:center">yes</td><td style="text-align:center">no</td><td style="text-align:center">no</td><td style="text-align:center">no</td></tr><tr><td style="text-align:center">资源替换</td><td style="text-align:center">yes</td><td style="text-align:center">yes</td><td style="text-align:center">no</td><td style="text-align:center">no</td></tr><tr><td style="text-align:center">全平台支持</td><td style="text-align:center">yes</td><td style="text-align:center">yes</td><td style="text-align:center">no</td><td style="text-align:center">yes</td></tr><tr><td style="text-align:center">即时生效</td><td style="text-align:center">no</td><td style="text-align:center">no</td><td style="text-align:center">yes</td><td style="text-align:center">yes</td></tr><tr><td style="text-align:center">性能损耗</td><td style="text-align:center">较小</td><td style="text-align:center">较大</td><td style="text-align:center">较小</td><td style="text-align:center">较小</td></tr><tr><td style="text-align:center">补丁包大小</td><td style="text-align:center">较小</td><td style="text-align:center">较大</td><td style="text-align:center">一般</td><td style="text-align:center">一般</td></tr><tr><td style="text-align:center">开发透明</td><td style="text-align:center">yes</td><td style="text-align:center">yes</td><td style="text-align:center">no</td><td style="text-align:center">no</td></tr><tr><td style="text-align:center">复杂度</td><td style="text-align:center">较低</td><td style="text-align:center">较低</td><td style="text-align:center">复杂</td><td style="text-align:center">复杂</td></tr><tr><td style="text-align:center">Rom体积</td><td style="text-align:center">Dalvik较大</td><td style="text-align:center">较小</td><td style="text-align:center">较小</td><td style="text-align:center">较小</td></tr><tr><td style="text-align:center">成功率</td><td style="text-align:center">较高</td><td style="text-align:center">较高</td><td style="text-align:center">一般</td><td style="text-align:center">最高</td></tr></tbody></table><p>Tinker热补丁方案不仅支持类、So 以及资源的替换，它还是2.X－7.X的全平台支持。利用Tinker我们不仅可以用做 bugfix,甚至可以替代功能的发布。Tinker 已运行在微信的数亿 Android 设备上，那么为什么你不使用 Tinker 呢？</p></blockquote><p>不得不说，我真的低估了跟着腾讯文档走的难度。<br><a id="more"></a></p><h3 id="注册-TinkerPatch-平台"><a href="#注册-TinkerPatch-平台" class="headerlink" title="注册 TinkerPatch 平台"></a>注册 TinkerPatch 平台</h3><p>因为需要下发补丁，直接使用TinkerPatch平台就好，在这里注册<a href="http://www.tinkerpatch.com/Index/reg" target="_blank" rel="external">http://www.tinkerpatch.com/Index/reg</a>,注册完成后创建一个应用，拿到<code>appKey</code><br>然后添加一个APP版本</p><h3 id="SDK接入"><a href="#SDK接入" class="headerlink" title="SDK接入"></a>SDK接入</h3><p>测试成功的工程全部文件在这里<a href="https://github.com/huangyuanlove/TestTinker" target="_blank" rel="external">https://github.com/huangyuanlove/TestTinker</a>,包含构建成功之后的apk文件以及一些辅助文件。</p><h5 id="添加Gradle插件依赖"><a href="#添加Gradle插件依赖" class="headerlink" title="添加Gradle插件依赖"></a>添加Gradle插件依赖</h5><p>AndroidStudio创建一个工程，定义使用的SDK版本，我是放在了<code>gradle.properties</code> 这个文件中，</p><blockquote><p>TINKER_VERSION=1.9.2<br>TINKERPATCH_VERSION=1.2.2</p></blockquote><p>然后在工程的<code>build.gradle</code>文件中添加插件依赖</p><blockquote><p>classpath “com.tinkerpatch.sdk:tinkerpatch-gradle-plugin:${TINKERPATCH_VERSION}”</p></blockquote><p>然后添加一些其他配置，整个文件内容如下<br><figure class="highlight groovy"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div></pre></td><td class="code"><pre><div class="line">buildscript &#123;</div><div class="line">    repositories &#123;</div><div class="line">        google()</div><div class="line">        jcenter()</div><div class="line">    &#125;</div><div class="line">    dependencies &#123;</div><div class="line">        classpath <span class="string">'com.android.tools.build:gradle:3.0.1'</span></div><div class="line">        classpath <span class="string">"com.tinkerpatch.sdk:tinkerpatch-gradle-plugin:$&#123;TINKERPATCH_VERSION&#125;"</span></div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"><span class="keyword">if</span> (JavaVersion.current().isJava8Compatible()) &#123;</div><div class="line">    allprojects &#123;</div><div class="line">        tasks.withType(Javadoc) &#123;</div><div class="line">            options.addStringOption(<span class="string">'Xdoclint:none'</span>, <span class="string">'-quiet'</span>)</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line">subprojects &#123;</div><div class="line">    tasks.withType(JavaCompile) &#123;</div><div class="line">        sourceCompatibility = JavaVersion.VERSION_1_7</div><div class="line">        targetCompatibility = JavaVersion.VERSION_1_7</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line">allprojects &#123;</div><div class="line">    repositories &#123;</div><div class="line">        google()</div><div class="line">        jcenter()</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line">task clean(<span class="string">type:</span> Delete) &#123;</div><div class="line">    delete rootProject.buildDir</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><h5 id="集成-TinkerPatch-SDK"><a href="#集成-TinkerPatch-SDK" class="headerlink" title="集成 TinkerPatch SDK"></a>集成 TinkerPatch SDK</h5><p>在<code>app/build.gradle</code>里面添加依赖</p><blockquote><pre><code>annotationProcessor(&quot;com.tinkerpatch.tinker:tinker-android-anno:${TINKER_VERSION}&quot;) { changing = true }compileOnly(&quot;com.tinkerpatch.tinker:tinker-android-anno:${TINKER_VERSION}&quot;) { changing = true }implementation(&quot;com.tinkerpatch.sdk:tinkerpatch-android-sdk:${TINKERPATCH_VERSION}&quot;) { changing = true }</code></pre></blockquote><p>为了配置方便，我们把TinkerPatchSupport相关的配置放在一个单独的gradle文件中，在app下创建一个<code>tinkerpatch.gradle</code>，我们需要在<code>app/build.grale</code>文件中引用</p><blockquote><p>apply from: ‘tinkerpatch.gradle’</p></blockquote><h5 id="配置-tinkerpatchSupport-参数"><a href="#配置-tinkerpatchSupport-参数" class="headerlink" title="配置 tinkerpatchSupport 参数"></a>配置 tinkerpatchSupport 参数</h5><p>编辑 <code>app/tinkerpatch.gralde</code>文件<br><figure class="highlight groovy"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">apply <span class="string">plugin:</span> <span class="string">'tinkerpatch-support'</span></div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"> * <span class="doctag">TODO:</span> 请按自己的需求修改为适应自己工程的参数</div><div class="line"> */</div><div class="line"><span class="keyword">def</span> bakPath = file(<span class="string">"$&#123;buildDir&#125;/bakApk/"</span>)</div><div class="line"><span class="keyword">def</span> baseInfo = <span class="string">"app-1.0.0-0309-21-30-56"</span> <span class="comment">//构建差异文件时使用</span></div><div class="line"><span class="keyword">def</span> variantName = <span class="string">"debug"</span></div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"> * 对于插件各参数的详细解析请参考</div><div class="line"> * http://tinkerpatch.com/Docs/SDK</div><div class="line"> */</div><div class="line">tinkerpatchSupport &#123;</div><div class="line">    <span class="comment">/** 可以在debug的时候关闭 tinkerPatch **/</span></div><div class="line">    <span class="comment">/** 当disable tinker的时候需要添加multiDexKeepProguard和proguardFiles,</span></div><div class="line">        这些配置文件本身由tinkerPatch的插件自动添加，当你disable后需要手动添加</div><div class="line">        你可以copy本示例中的proguardRules.pro和tinkerMultidexKeep.pro,</div><div class="line">        需要你手动修改'tinker.sample.android.app'本示例的包名为你自己的包名, com.xxx前缀的包名不用修改</div><div class="line">     **/</div><div class="line">    tinkerEnable = <span class="literal">true</span></div><div class="line">    reflectApplication = <span class="literal">false</span></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * 是否开启加固模式，只能在APK将要进行加固时使用，否则会patch失败。</div><div class="line">     * 如果只在某个渠道使用了加固，可使用多flavors配置</div><div class="line">     **/</div><div class="line">    protectedApp = <span class="literal">false</span></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * 实验功能</div><div class="line">     * 补丁是否支持新增 Activity (新增Activity的exported属性必须为false)</div><div class="line">     **/</div><div class="line">    supportComponent = <span class="literal">true</span></div><div class="line"></div><div class="line">    autoBackupApkPath = <span class="string">"$&#123;bakPath&#125;"</span></div><div class="line"></div><div class="line">    appKey = <span class="string">"2b662623551153ee"</span></div><div class="line"></div><div class="line">    <span class="comment">/** 注意: 若发布新的全量包, appVersion一定要更新 **/</span></div><div class="line">    appVersion = <span class="string">"1.0.0"</span></div><div class="line"></div><div class="line">    <span class="keyword">def</span> pathPrefix = <span class="string">"$&#123;bakPath&#125;/$&#123;baseInfo&#125;/$&#123;variantName&#125;/"</span></div><div class="line">    <span class="keyword">def</span> name = <span class="string">"$&#123;project.name&#125;-$&#123;variantName&#125;"</span></div><div class="line"></div><div class="line">    baseApkFile = <span class="string">"$&#123;pathPrefix&#125;/$&#123;name&#125;.apk"</span></div><div class="line">    baseProguardMappingFile = <span class="string">"$&#123;pathPrefix&#125;/$&#123;name&#125;-mapping.txt"</span></div><div class="line">    baseResourceRFile = <span class="string">"$&#123;pathPrefix&#125;/$&#123;name&#125;-R.txt"</span></div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     *  若有编译多flavors需求, 可以参照： https://github.com/TinkerPatch/tinkerpatch-flavors-sample</div><div class="line">     *  注意: 除非你不同的flavor代码是不一样的,不然建议采用zip comment或者文件方式生成渠道信息（相关工具：walle 或者 packer-ng）</div><div class="line">     **/</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"> * 用于用户在代码中判断tinkerPatch是否被使能</div><div class="line"> */</div><div class="line">android &#123;</div><div class="line">    defaultConfig &#123;</div><div class="line">        buildConfigField <span class="string">"boolean"</span>, <span class="string">"TINKER_ENABLE"</span>, <span class="string">"$&#123;tinkerpatchSupport.tinkerEnable&#125;"</span></div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"> * 一般来说,我们无需对下面的参数做任何的修改</div><div class="line"> * 对于各参数的详细介绍请参考:</div><div class="line"> * https://github.com/Tencent/tinker/wiki/Tinker-%E6%8E%A5%E5%85%A5%E6%8C%87%E5%8D%97</div><div class="line"> */</div><div class="line">tinkerPatch &#123;</div><div class="line">    ignoreWarning = <span class="literal">false</span></div><div class="line">    useSign = <span class="literal">true</span></div><div class="line">    dex &#123;</div><div class="line">        dexMode = <span class="string">"jar"</span></div><div class="line">        pattern = [<span class="string">"classes*.dex"</span>]</div><div class="line">        loader = []</div><div class="line">    &#125;</div><div class="line">    lib &#123;</div><div class="line">        pattern = [<span class="string">"lib/*/*.so"</span>]</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    res &#123;</div><div class="line">        pattern = [<span class="string">"res/*"</span>, <span class="string">"r/*"</span>, <span class="string">"assets/*"</span>, <span class="string">"resources.arsc"</span>, <span class="string">"AndroidManifest.xml"</span>]</div><div class="line">        ignoreChange = []</div><div class="line">        largeModSize = <span class="number">100</span></div><div class="line">    &#125;</div><div class="line"></div><div class="line">    packageConfig &#123;</div><div class="line">    &#125;</div><div class="line">    sevenZip &#123;</div><div class="line">        zipArtifact = <span class="string">"com.tencent.mm:SevenZip:1.1.10"</span></div><div class="line">    &#125;</div><div class="line">    buildConfig &#123;</div><div class="line">        keepDexApply = <span class="literal">false</span></div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><p>每个参数的含义如下</p><table><thead><tr><th style="text-align:center">参数</th><th style="text-align:center">默认值</th><th style="text-align:center">描述</th></tr></thead><tbody><tr><td style="text-align:center">tinkerEnable</td><td style="text-align:center">true</td><td style="text-align:center">是否开启 tinkerpatchSupport 插件功能</td></tr><tr><td style="text-align:center">appKey</td><td style="text-align:center">“”</td><td style="text-align:center">在 TinkerPatch 平台 申请的 appkey</td></tr><tr><td style="text-align:center">appVersion</td><td style="text-align:center">“”</td><td style="text-align:center">在 TinkerPatch 平台 输入的版本号,注意，我们使用 appVersion 作为 TinkerId, 我们需要保证每个发布出去的基础安装包的 appVersion 都不一样。</td></tr><tr><td style="text-align:center">reflectApplication</td><td style="text-align:center">false</td><td style="text-align:center">是否反射 Application 实现一键接入；一般来说，接入 Tinker 我们需要改造我们</td><td>的 Application, 若这里为 true， 即我们无需对应用做任何改造即可接入。</td></tr><tr><td style="text-align:center">autoBackupApkPath</td><td style="text-align:center">“”</td><td style="text-align:center">将每次编译产生的 apk/mapping.txt/R.txt 归档存储的位置</td></tr><tr><td style="text-align:center">baseApkFile</td><td style="text-align:center">“”</td><td style="text-align:center">基准包的文件路径, 对应 tinker 插件中的 oldApk 参数;编译补丁包时，必需指定基准版本的 apk，默认值为空，则表示不是进行补丁包的编译。</td></tr><tr><td style="text-align:center">baseProguardMappingFile</td><td style="text-align:center">“”</td><td style="text-align:center">基准包的 Proguard mapping.txt 文件路径, 对应 tinker 插件 applyMapping 参数；在编译新的 apk 时候，我们希望通过保持基准 apk 的 proguard 混淆方式，从而减少补丁包的大小。这是强烈推荐的，编译补丁包时，我们推荐输入基准 apk 生成的 mapping.txt 文件。</td></tr><tr><td style="text-align:center">baseResourceRFile</td><td style="text-align:center">“”</td><td style="text-align:center">基准包的资源 R.txt 文件路径, 对应 tinker 插件 applyResourceMapping 参数；在编译新的apk时候，我们希望通基准 apk 的 R.txt 文件来保持 Resource Id 的分配，这样不仅可以减少补丁包的大小，同时也避免由于 Resource Id 改变导致 remote view 异常。</td></tr><tr><td style="text-align:center">protectedApp</td><td style="text-align:center">false</td><td style="text-align:center">是否开启支持加固，注意：只有在使用加固时才能开启此开关</td></tr><tr><td style="text-align:center">supportComponent</td><td style="text-align:center">false</td><td style="text-align:center">是否开启支持在补丁包中动态增加Activity 注意：新增Activity的Exported属性必须为false</td></tr><tr><td style="text-align:center">backupFileNameFormat</td><td style="text-align:center">‘\${appName}-\${variantName}’</td><td style="text-align:center">格式化命名备份文件 这里请使用单引号</td></tr></tbody></table><h5 id="初始化-TinkerPatch-SDK"><a href="#初始化-TinkerPatch-SDK" class="headerlink" title="初始化 TinkerPatch SDK"></a>初始化 TinkerPatch SDK</h5><p>这里推荐使用改造之后的ApplicationLike，对应<code>tinkerpatch.gradle</code>文件中的<code>reflectApplication = false</code>,这里给出了完整的ApplicationLike类，可以在这里查看<a href="https://github.com/huangyuanlove/TestTinker/blob/master/app/src/main/java/com/huangyuan/testtinker/SampleApplicationLike.java" target="_blank" rel="external">https://github.com/huangyuanlove/TestTinker/blob/master/app/src/main/java/com/huangyuan/testtinker/SampleApplicationLike.java</a><br>其中对于类的注解中的 <code>application</code> 的值，就是我们应用的Application类，需要在<code>AndroidManifest.xml</code>中的<code>application</code>标签中配置<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@DefaultLifeCycle</span>(application = <span class="string">"com.huangyuanlove.testtinker.SampleApplication"</span>,</div><div class="line">                  flags = ShareConstants.TINKER_ENABLE_ALL,</div><div class="line">                  loadVerifyFlag = <span class="keyword">false</span>)`</div></pre></td></tr></table></figure></p><p><strong>注意：初始化的代码建议紧跟 super.onCreate(),并且所有进程都需要初始化，已达到所有进程都可以被 patch 的目的<br>如果你确定只想在主进程中初始化 tinkerPatch，那也请至少在 :patch 进程中初始化，否则会有造成 :patch 进程crash，无法使补丁生效</strong><br>我们在实际应用过程中，可以在登陆等关键地方去调用<code>TinkerPatch.with().fetchPatchUpdate(true)</code>来检测有没有新的补丁包，若有，则去下载。下载完成补丁包后，sdk会自动去合成新的安装包，并且在息屏的时候自动重启主线程去加载新的文件，或者调用<code>ShareTinkerInternals.killAllOtherProcess(getApplicationContext());                android.os.Process.killProcess(android.os.Process.myPid());</code>来完成杀死主线程的目的。</p><h5 id="使用步骤"><a href="#使用步骤" class="headerlink" title="使用步骤"></a>使用步骤</h5><p>首先构建基础包，模拟用户当前使用的版本。<br>在gradle中找到下图所示的 <code>assembleRelease</code>或者<code>assembleDebug</code>task，需要注意的是，如果构建基础包使用的是<code>debug</code>,那么在构建patch包的时候也要选择<code>debug</code>，还有就是尽量把<code>app/tinkerpatch.gradle</code>中定义的<code>variantName</code>改成一致的。<br>基础包构建成功后，会在<code>app/build/bakApk</code>文件夹下生成对应的文件，找到和你构建时间一致的包。<br>现在修改代码或者布局文件(模拟修复bug),修改清单文件<code>AndroidManifest.xml</code>中的versionName和versionCode。<br>修改<code>app/tinkerpatch.gradle</code>文件，将其中定义的<code>baseInfo</code>修改为上面提到的路径。这时候<strong>不需要修改</strong>该文件中的<code>appVersion</code>。<br>在gradle中找到tinker任务包，找到<code>tinkerPatchDebug</code>或者<code>tinkerPatchRelease</code>，构建差异包(补丁文件)。构建成功后会在<code>app/build/outputs/apk/tinkerPatch</code>文件夹中<br><img src="/image/hotfix/tinker_task.png" alt="tinkerTaskResult"> <img src="/image/hotfix/tinker_task_result.png" alt="tinkerTaskResult"><br>现在我们已经成功构建的差异包<code>patch-signed-7zip.apk</code>,现在只需要将差异包上传到<code>tinker-patch</code>平台就可以了。</p><h5 id="在tinker-patch平台发布差异包"><a href="#在tinker-patch平台发布差异包" class="headerlink" title="在tinker-patch平台发布差异包"></a>在tinker-patch平台发布差异包</h5><p>我们登陆tinker-patch平台，找到在刚开始创建的项目，在该项目里面添加一个App版本，注意这里的App版本号要和<code>tinkerpatch.gradle</code>里面定义的<code>appVersion</code>一致，在官方文档中也提到过这一点：</p><blockquote><p>每一个 APP 版本对应一个已经发布的 base apk, 这里我们可以使用 APP 版本作为 TinkerID。我们需要保证每个发布的 APK 都采用不用的 APP 版本。</p></blockquote><p>创建好app版本之后，点击<code>发布新补丁</code>，选择补丁文件<code>patch-signed-7zip.apk</code>,填写一下备注就好了，这里有四种补丁的下发方式<a href="http://www.tinkerpatch.com/Docs/dev" target="_blank" rel="external">开发预览</a> 、<code>全量下发</code> 、<a href="http://www.tinkerpatch.com/Docs/rule" target="_blank" rel="external">条件下发</a> 、<a href="http://www.tinkerpatch.com/Docs/rule" target="_blank" rel="external">灰度下发</a>、具体差异可以点击去查看。<br>同时我们也可以在平台对应的软件版本中的实时监控里面看到补丁的下载以及合成应用次数。</p><hr><p>以上</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;前两天想试一下热修复的功能，对比各大平台的热修复功能，看到tinker的&lt;a href=&quot;http://www.tinkerpatch.com/Docs/intro&quot;&gt;文档介绍&lt;/a&gt;，最终决定先拿Tinker试一下。&lt;/p&gt;
&lt;blockquote&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th style=&quot;text-align:center&quot;&gt;&lt;/th&gt;
&lt;th style=&quot;text-align:center&quot;&gt;&lt;/th&gt;
&lt;th style=&quot;text-align:center&quot;&gt;&lt;/th&gt;
&lt;th style=&quot;text-align:center&quot;&gt;&lt;/th&gt;
&lt;th style=&quot;text-align:center&quot;&gt;&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:center&quot;&gt;&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;Tinker&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;QZone&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;AndFix&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;Robust&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:center&quot;&gt;类替换&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;yes&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;yes&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;no&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;no&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:center&quot;&gt;So替换&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;yes&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;no&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;no&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;no&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:center&quot;&gt;资源替换&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;yes&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;yes&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;no&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;no&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:center&quot;&gt;全平台支持&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;yes&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;yes&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;no&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;yes&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:center&quot;&gt;即时生效&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;no&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;no&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;yes&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;yes&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:center&quot;&gt;性能损耗&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;较小&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;较大&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;较小&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;较小&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:center&quot;&gt;补丁包大小&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;较小&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;较大&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;一般&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;一般&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:center&quot;&gt;开发透明&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;yes&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;yes&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;no&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;no&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:center&quot;&gt;复杂度&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;较低&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;较低&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;复杂&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;复杂&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:center&quot;&gt;Rom体积&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;Dalvik较大&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;较小&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;较小&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;较小&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:center&quot;&gt;成功率&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;较高&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;较高&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;一般&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;最高&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;Tinker热补丁方案不仅支持类、So 以及资源的替换，它还是2.X－7.X的全平台支持。利用Tinker我们不仅可以用做 bugfix,甚至可以替代功能的发布。Tinker 已运行在微信的数亿 Android 设备上，那么为什么你不使用 Tinker 呢？&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;不得不说，我真的低估了跟着腾讯文档走的难度。&lt;br&gt;
    
    </summary>
    
    
      <category term="Android" scheme="http://blog.huangyuanlove.com/tags/Android/"/>
    
      <category term="热修复" scheme="http://blog.huangyuanlove.com/tags/%E7%83%AD%E4%BF%AE%E5%A4%8D/"/>
    
      <category term="tinker" scheme="http://blog.huangyuanlove.com/tags/tinker/"/>
    
  </entry>
  
</feed>
