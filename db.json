{"meta":{"version":1,"warehouse":"2.2.0"},"models":{"Asset":[{"_id":"source/CNAME","path":"CNAME","modified":1,"renderable":0},{"_id":"source/alipay.png","path":"alipay.png","modified":1,"renderable":0},{"_id":"source/wechatpay.png","path":"wechatpay.png","modified":1,"renderable":0},{"_id":"source/favicon.ico","path":"favicon.ico","modified":1,"renderable":0},{"_id":"source/image/location.png","path":"image/location.png","modified":1,"renderable":0},{"_id":"source/image/new_widget.png","path":"image/new_widget.png","modified":1,"renderable":0},{"_id":"source/image/2018_01_01.png","path":"image/2018_01_01.png","modified":1,"renderable":0},{"_id":"source/image/JVM/JVM_RunTime_Area.png","path":"image/JVM/JVM_RunTime_Area.png","modified":1,"renderable":0},{"_id":"source/image/gaode/install_run.png","path":"image/gaode/install_run.png","modified":1,"renderable":0},{"_id":"source/image/git/git_diff_tool_codecompare.png","path":"image/git/git_diff_tool_codecompare.png","modified":1,"renderable":0},{"_id":"source/image/git/git_merge_tool_codecompare.png","path":"image/git/git_merge_tool_codecompare.png","modified":1,"renderable":0},{"_id":"source/image/hexo/Catalog.png","path":"image/hexo/Catalog.png","modified":1,"renderable":0},{"_id":"source/image/csdn_blog_title.png","path":"image/csdn_blog_title.png","modified":1,"renderable":0},{"_id":"source/image/hexo/hexo-v.png","path":"image/hexo/hexo-v.png","modified":1,"renderable":0},{"_id":"source/image/hexo/npm_install.png","path":"image/hexo/npm_install.png","modified":1,"renderable":0},{"_id":"source/image/hexo/nvm_install_6.6.0.png","path":"image/hexo/nvm_install_6.6.0.png","modified":1,"renderable":0},{"_id":"source/image/hexo/nvm_ls-remote.png","path":"image/hexo/nvm_ls-remote.png","modified":1,"renderable":0},{"_id":"source/image/hexo/nvm_install_down.png","path":"image/hexo/nvm_install_down.png","modified":1,"renderable":0},{"_id":"source/image/jenkins/jenkins_config_project.png","path":"image/jenkins/jenkins_config_project.png","modified":1,"renderable":0},{"_id":"source/image/jenkins/jenkins_build_history.png","path":"image/jenkins/jenkins_build_history.png","modified":1,"renderable":0},{"_id":"source/image/jenkins/jenkins_maven.png","path":"image/jenkins/jenkins_maven.png","modified":1,"renderable":0},{"_id":"source/image/jenkins/jenkins_jdk.png","path":"image/jenkins/jenkins_jdk.png","modified":1,"renderable":0},{"_id":"source/image/jenkins/jenkins_index.png","path":"image/jenkins/jenkins_index.png","modified":1,"renderable":0},{"_id":"source/image/jenkins/jenkins_project_build.png","path":"image/jenkins/jenkins_project_build.png","modified":1,"renderable":0},{"_id":"source/image/jenkins/jenkins_start_build_project.png","path":"image/jenkins/jenkins_start_build_project.png","modified":1,"renderable":0},{"_id":"source/image/latex/latex_note_one_1.png","path":"image/latex/latex_note_one_1.png","modified":1,"renderable":0},{"_id":"source/image/latex/latex_note_six_1.png","path":"image/latex/latex_note_six_1.png","modified":1,"renderable":0},{"_id":"source/image/latex/latex_note_six_2.png","path":"image/latex/latex_note_six_2.png","modified":1,"renderable":0},{"_id":"source/image/hotfix/tinker_task_result.png","path":"image/hotfix/tinker_task_result.png","modified":1,"renderable":0},{"_id":"source/image/hotfix/tinker_task.png","path":"image/hotfix/tinker_task.png","modified":1,"renderable":0},{"_id":"source/image/https/https1.png","path":"image/https/https1.png","modified":1,"renderable":0},{"_id":"source/image/https/https4.png","path":"image/https/https4.png","modified":1,"renderable":0},{"_id":"source/image/tcp/tcp1.png","path":"image/tcp/tcp1.png","modified":1,"renderable":0},{"_id":"source/image/tcp/tcp3.png","path":"image/tcp/tcp3.png","modified":1,"renderable":0},{"_id":"source/image/tcp/tcp4.png","path":"image/tcp/tcp4.png","modified":1,"renderable":0},{"_id":"themes/next/source/css/main.styl","path":"css/main.styl","modified":1,"renderable":1},{"_id":"themes/next/source/images/algolia_logo.svg","path":"images/algolia_logo.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/avatar.gif","path":"images/avatar.gif","modified":1,"renderable":1},{"_id":"themes/next/source/images/apple-touch-icon-next.png","path":"images/apple-touch-icon-next.png","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc-nd.svg","path":"images/cc-by-nc-nd.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc-sa.svg","path":"images/cc-by-nc-sa.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc.svg","path":"images/cc-by-nc.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-by-nd.svg","path":"images/cc-by-nd.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/favicon-16x16-next.png","path":"images/favicon-16x16-next.png","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-by-sa.svg","path":"images/cc-by-sa.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/loading.gif","path":"images/loading.gif","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-by.svg","path":"images/cc-by.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/favicon-32x32-next.png","path":"images/favicon-32x32-next.png","modified":1,"renderable":1},{"_id":"themes/next/source/images/placeholder.gif","path":"images/placeholder.gif","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-zero.svg","path":"images/cc-zero.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/logo.svg","path":"images/logo.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/quote-r.svg","path":"images/quote-r.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/quote-l.svg","path":"images/quote-l.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/searchicon.png","path":"images/searchicon.png","modified":1,"renderable":1},{"_id":"source/image/Library_Plant_specimen1.jpg","path":"image/Library_Plant_specimen1.jpg","modified":1,"renderable":0},{"_id":"source/image/Library_Plant_specimen4.jpg","path":"image/Library_Plant_specimen4.jpg","modified":1,"renderable":0},{"_id":"source/image/Library_Plant_specimen3.jpg","path":"image/Library_Plant_specimen3.jpg","modified":1,"renderable":0},{"_id":"source/image/Library_Plant_specimen2.jpg","path":"image/Library_Plant_specimen2.jpg","modified":1,"renderable":0},{"_id":"source/image/gaode/geocoderSearch_bug.png","path":"image/gaode/geocoderSearch_bug.png","modified":1,"renderable":0},{"_id":"source/image/Tsinghua.jpg","path":"image/Tsinghua.jpg","modified":1,"renderable":0},{"_id":"source/image/git/git_diff_tool_bc.png","path":"image/git/git_diff_tool_bc.png","modified":1,"renderable":0},{"_id":"source/image/git/git_merge_tool_bc.png","path":"image/git/git_merge_tool_bc.png","modified":1,"renderable":0},{"_id":"source/image/git/git_init_tree.png","path":"image/git/git_init_tree.png","modified":1,"renderable":0},{"_id":"source/image/hexo/duoshuo.png","path":"image/hexo/duoshuo.png","modified":1,"renderable":0},{"_id":"source/image/hexo/hexo_install_nvm.png","path":"image/hexo/hexo_install_nvm.png","modified":1,"renderable":0},{"_id":"source/image/hexo/hexo_init.png","path":"image/hexo/hexo_init.png","modified":1,"renderable":0},{"_id":"source/image/hexo/npm_install_hexo.png","path":"image/hexo/npm_install_hexo.png","modified":1,"renderable":0},{"_id":"source/image/hexo/yilia_them.png","path":"image/hexo/yilia_them.png","modified":1,"renderable":0},{"_id":"source/image/jenkins/jenkins_build_console_output.png","path":"image/jenkins/jenkins_build_console_output.png","modified":1,"renderable":0},{"_id":"source/image/csdn_home.png","path":"image/csdn_home.png","modified":1,"renderable":0},{"_id":"source/image/main_building.jpg","path":"image/main_building.jpg","modified":1,"renderable":0},{"_id":"source/image/tcp/tcp2.png","path":"image/tcp/tcp2.png","modified":1,"renderable":0},{"_id":"source/image/sign.jpg","path":"image/sign.jpg","modified":1,"renderable":0},{"_id":"source/image/tcp/tcp5.png","path":"image/tcp/tcp5.png","modified":1,"renderable":0},{"_id":"source/image/Android/ConstraintLayout/centering_positioning.png","path":"image/Android/ConstraintLayout/centering_positioning.png","modified":1,"renderable":0},{"_id":"source/image/Android/ConstraintLayout/barrier.png","path":"image/Android/ConstraintLayout/barrier.png","modified":1,"renderable":0},{"_id":"source/image/Android/ConstraintLayout/barrier1.png","path":"image/Android/ConstraintLayout/barrier1.png","modified":1,"renderable":0},{"_id":"source/image/Android/ConstraintLayout/barrier2.png","path":"image/Android/ConstraintLayout/barrier2.png","modified":1,"renderable":0},{"_id":"source/image/Android/ConstraintLayout/chain_head.png","path":"image/Android/ConstraintLayout/chain_head.png","modified":1,"renderable":0},{"_id":"source/image/Android/ConstraintLayout/centering_positioning_with_bias.png","path":"image/Android/ConstraintLayout/centering_positioning_with_bias.png","modified":1,"renderable":0},{"_id":"source/image/Android/ConstraintLayout/chain.png","path":"image/Android/ConstraintLayout/chain.png","modified":1,"renderable":0},{"_id":"source/image/Android/ConstraintLayout/chain_styles.png","path":"image/Android/ConstraintLayout/chain_styles.png","modified":1,"renderable":0},{"_id":"source/image/Android/ConstraintLayout/dimension_constraints.png","path":"image/Android/ConstraintLayout/dimension_constraints.png","modified":1,"renderable":0},{"_id":"source/image/Android/ConstraintLayout/relative_positioning_example.png","path":"image/Android/ConstraintLayout/relative_positioning_example.png","modified":1,"renderable":0},{"_id":"source/image/Android/ConstraintLayout/relative_position_constraint.png","path":"image/Android/ConstraintLayout/relative_position_constraint.png","modified":1,"renderable":0},{"_id":"source/image/Android/ConstraintLayout/relative_positioning_margins.png","path":"image/Android/ConstraintLayout/relative_positioning_margins.png","modified":1,"renderable":0},{"_id":"source/image/Android/ConstraintLayout/visibility_behavior.png","path":"image/Android/ConstraintLayout/visibility_behavior.png","modified":1,"renderable":0},{"_id":"source/image/Android/MultiWindow/2.png","path":"image/Android/MultiWindow/2.png","modified":1,"renderable":0},{"_id":"source/image/Android/MultiWindow/1.png","path":"image/Android/MultiWindow/1.png","modified":1,"renderable":0},{"_id":"source/image/Android/MultiWindow/3.png","path":"image/Android/MultiWindow/3.png","modified":1,"renderable":0},{"_id":"source/image/Library.jpg","path":"image/Library.jpg","modified":1,"renderable":0},{"_id":"source/image/PHBS1.jpg","path":"image/PHBS1.jpg","modified":1,"renderable":0},{"_id":"source/image/jenkins/jenkins_create_new_project.png","path":"image/jenkins/jenkins_create_new_project.png","modified":1,"renderable":0},{"_id":"source/image/jenkins/jenkins_start.png","path":"image/jenkins/jenkins_start.png","modified":1,"renderable":0},{"_id":"source/image/latex/latex_note_one_2.png","path":"image/latex/latex_note_one_2.png","modified":1,"renderable":0},{"_id":"source/image/tcp/tcp6.png","path":"image/tcp/tcp6.png","modified":1,"renderable":0},{"_id":"source/image/python/Flask/pycharm_project_setting2.png","path":"image/python/Flask/pycharm_project_setting2.png","modified":1,"renderable":0},{"_id":"source/image/python/Flask/pycharm_project_setting1.png","path":"image/python/Flask/pycharm_project_setting1.png","modified":1,"renderable":0},{"_id":"source/image/tcp/tcp7.png","path":"image/tcp/tcp7.png","modified":1,"renderable":0},{"_id":"themes/next/source/js/src/algolia-search.js","path":"js/src/algolia-search.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/bootstrap.js","path":"js/src/bootstrap.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/affix.js","path":"js/src/affix.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/exturl.js","path":"js/src/exturl.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/hook-duoshuo.js","path":"js/src/hook-duoshuo.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/post-details.js","path":"js/src/post-details.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/js.cookie.js","path":"js/src/js.cookie.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/scroll-cookie.js","path":"js/src/scroll-cookie.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/motion.js","path":"js/src/motion.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/utils.js","path":"js/src/utils.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/scrollspy.js","path":"js/src/scrollspy.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fastclick/bower.json","path":"lib/fastclick/bower.json","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fastclick/README.md","path":"lib/fastclick/README.md","modified":1,"renderable":1},{"_id":"themes/next/source/lib/canvas-ribbon/canvas-ribbon.js","path":"lib/canvas-ribbon/canvas-ribbon.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fastclick/LICENSE","path":"lib/fastclick/LICENSE","modified":1,"renderable":1},{"_id":"themes/next/source/lib/algolia-instant-search/instantsearch.min.css","path":"lib/algolia-instant-search/instantsearch.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/canvas-nest/canvas-nest.min.js","path":"lib/canvas-nest/canvas-nest.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/HELP-US-OUT.txt","path":"lib/font-awesome/HELP-US-OUT.txt","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/bower.json","path":"lib/font-awesome/bower.json","modified":1,"renderable":1},{"_id":"themes/next/source/lib/needsharebutton/font-embedded.css","path":"lib/needsharebutton/font-embedded.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/needsharebutton/needsharebutton.css","path":"lib/needsharebutton/needsharebutton.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/needsharebutton/needsharebutton.js","path":"lib/needsharebutton/needsharebutton.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/jquery_lazyload/CONTRIBUTING.md","path":"lib/jquery_lazyload/CONTRIBUTING.md","modified":1,"renderable":1},{"_id":"themes/next/source/lib/jquery_lazyload/bower.json","path":"lib/jquery_lazyload/bower.json","modified":1,"renderable":1},{"_id":"themes/next/source/lib/jquery_lazyload/README.md","path":"lib/jquery_lazyload/README.md","modified":1,"renderable":1},{"_id":"themes/next/source/lib/jquery_lazyload/jquery.scrollstop.js","path":"lib/jquery_lazyload/jquery.scrollstop.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/jquery_lazyload/jquery.lazyload.js","path":"lib/jquery_lazyload/jquery.lazyload.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-barber-shop.min.css","path":"lib/pace/pace-theme-barber-shop.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-big-counter.min.css","path":"lib/pace/pace-theme-big-counter.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-center-atom.min.css","path":"lib/pace/pace-theme-center-atom.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-bounce.min.css","path":"lib/pace/pace-theme-bounce.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-center-circle.min.css","path":"lib/pace/pace-theme-center-circle.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-center-radar.min.css","path":"lib/pace/pace-theme-center-radar.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-fill-left.min.css","path":"lib/pace/pace-theme-fill-left.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-center-simple.min.css","path":"lib/pace/pace-theme-center-simple.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-corner-indicator.min.css","path":"lib/pace/pace-theme-corner-indicator.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-flash.min.css","path":"lib/pace/pace-theme-flash.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-minimal.min.css","path":"lib/pace/pace-theme-minimal.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-loading-bar.min.css","path":"lib/pace/pace-theme-loading-bar.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-mac-osx.min.css","path":"lib/pace/pace-theme-mac-osx.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/pace/pace.min.js","path":"lib/pace/pace.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/velocity/bower.json","path":"lib/velocity/bower.json","modified":1,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.ui.js","path":"lib/velocity/velocity.ui.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.min.js","path":"lib/velocity/velocity.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.ui.min.js","path":"lib/velocity/velocity.ui.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/three/canvas_sphere.min.js","path":"lib/three/canvas_sphere.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/three/canvas_lines.min.js","path":"lib/three/canvas_lines.min.js","modified":1,"renderable":1},{"_id":"source/image/Android/ConstraintLayout/class_summary.png","path":"image/Android/ConstraintLayout/class_summary.png","modified":1,"renderable":0},{"_id":"source/image/Android/ConstraintLayout/circular_positioning.png","path":"image/Android/ConstraintLayout/circular_positioning.png","modified":1,"renderable":0},{"_id":"themes/next/source/lib/three/three-waves.min.js","path":"lib/three/three-waves.min.js","modified":1,"renderable":1},{"_id":"source/image/Beware_of_ snakes.jpg","path":"image/Beware_of_ snakes.jpg","modified":1,"renderable":0},{"_id":"source/image/PHBS.jpg","path":"image/PHBS.jpg","modified":1,"renderable":0},{"_id":"source/image/Restaurant.jpg","path":"image/Restaurant.jpg","modified":1,"renderable":0},{"_id":"source/image/Meal3.jpg","path":"image/Meal3.jpg","modified":1,"renderable":0},{"_id":"source/image/https/https2.png","path":"image/https/https2.png","modified":1,"renderable":0},{"_id":"themes/next/source/lib/jquery/index.js","path":"lib/jquery/index.js","modified":1,"renderable":1},{"_id":"source/image/Android/ConstraintLayout/constraint_layout_placeholder_preview.png","path":"image/Android/ConstraintLayout/constraint_layout_placeholder_preview.png","modified":1,"renderable":0},{"_id":"source/image/Android/ConstraintLayout/guideLine_declaration.png","path":"image/Android/ConstraintLayout/guideLine_declaration.png","modified":1,"renderable":0},{"_id":"source/image/Meal1.jpg","path":"image/Meal1.jpg","modified":1,"renderable":0},{"_id":"source/image/Meal2.jpg","path":"image/Meal2.jpg","modified":1,"renderable":0},{"_id":"source/image/South_Gate.jpg","path":"image/South_Gate.jpg","modified":1,"renderable":0},{"_id":"source/image/gaode/install_run_bug.png","path":"image/gaode/install_run_bug.png","modified":1,"renderable":0},{"_id":"themes/next/source/js/src/schemes/pisces.js","path":"js/src/schemes/pisces.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/han.css","path":"lib/Han/dist/han.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/blank.gif","path":"lib/fancybox/source/blank.gif","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/fancybox_loading@2x.gif","path":"lib/fancybox/source/fancybox_loading@2x.gif","modified":1,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/han.min.css","path":"lib/Han/dist/han.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/han.min.js","path":"lib/Han/dist/han.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/fancybox_loading.gif","path":"lib/fancybox/source/fancybox_loading.gif","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/fancybox_overlay.png","path":"lib/fancybox/source/fancybox_overlay.png","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/fancybox_sprite@2x.png","path":"lib/fancybox/source/fancybox_sprite@2x.png","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/fancybox_sprite.png","path":"lib/fancybox/source/fancybox_sprite.png","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.css","path":"lib/fancybox/source/jquery.fancybox.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.pack.js","path":"lib/fancybox/source/jquery.fancybox.pack.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fastclick/lib/fastclick.min.js","path":"lib/fastclick/lib/fastclick.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fastclick/lib/fastclick.js","path":"lib/fastclick/lib/fastclick.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.js","path":"lib/fancybox/source/jquery.fancybox.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.min.css","path":"lib/font-awesome/css/font-awesome.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css.map","path":"lib/font-awesome/css/font-awesome.css.map","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css","path":"lib/font-awesome/css/font-awesome.css","modified":1,"renderable":1},{"_id":"source/image/Android/ConstraintLayout/merge_constraint_layout_placeholder_preview.png","path":"image/Android/ConstraintLayout/merge_constraint_layout_placeholder_preview.png","modified":1,"renderable":0},{"_id":"themes/next/source/lib/ua-parser-js/dist/ua-parser.pack.js","path":"lib/ua-parser-js/dist/ua-parser.pack.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/ua-parser-js/dist/ua-parser.min.js","path":"lib/ua-parser-js/dist/ua-parser.min.js","modified":1,"renderable":1},{"_id":"source/image/Android/hook/guide.jpg","path":"image/Android/hook/guide.jpg","modified":1,"renderable":0},{"_id":"source/image/gaode/walk_route_bug.png","path":"image/gaode/walk_route_bug.png","modified":1,"renderable":0},{"_id":"themes/next/source/lib/Han/dist/han.js","path":"lib/Han/dist/han.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff","path":"lib/font-awesome/fonts/fontawesome-webfont.woff","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff2","path":"lib/font-awesome/fonts/fontawesome-webfont.woff2","modified":1,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.js","path":"lib/velocity/velocity.js","modified":1,"renderable":1},{"_id":"source/image/Android/ConstraintLayout/guideline_relative.png","path":"image/Android/ConstraintLayout/guideline_relative.png","modified":1,"renderable":0},{"_id":"source/image/hexo/hexo_hello.png","path":"image/hexo/hexo_hello.png","modified":1,"renderable":0},{"_id":"source/image/https/https3.png","path":"image/https/https3.png","modified":1,"renderable":0},{"_id":"themes/next/source/lib/Han/dist/font/han-space.woff","path":"lib/Han/dist/font/han-space.woff","modified":1,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/font/han-space.otf","path":"lib/Han/dist/font/han-space.otf","modified":1,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/font/han.woff","path":"lib/Han/dist/font/han.woff","modified":1,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/font/han.otf","path":"lib/Han/dist/font/han.otf","modified":1,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/font/han.woff2","path":"lib/Han/dist/font/han.woff2","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/fancybox_buttons.png","path":"lib/fancybox/source/helpers/fancybox_buttons.png","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-buttons.js","path":"lib/fancybox/source/helpers/jquery.fancybox-buttons.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-buttons.css","path":"lib/fancybox/source/helpers/jquery.fancybox-buttons.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-thumbs.css","path":"lib/fancybox/source/helpers/jquery.fancybox-thumbs.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-thumbs.js","path":"lib/fancybox/source/helpers/jquery.fancybox-thumbs.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-media.js","path":"lib/fancybox/source/helpers/jquery.fancybox-media.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/FontAwesome.otf","path":"lib/font-awesome/fonts/FontAwesome.otf","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.ttf","path":"lib/font-awesome/fonts/fontawesome-webfont.ttf","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.eot","path":"lib/font-awesome/fonts/fontawesome-webfont.eot","modified":1,"renderable":1},{"_id":"source/image/Android/ConstraintLayout/wrap_content_enforcing_constraints1.png","path":"image/Android/ConstraintLayout/wrap_content_enforcing_constraints1.png","modified":1,"renderable":0},{"_id":"source/image/Android/ConstraintLayout/wrap_content_enforcing_constraints2.png","path":"image/Android/ConstraintLayout/wrap_content_enforcing_constraints2.png","modified":1,"renderable":0},{"_id":"themes/next/source/lib/algolia-instant-search/instantsearch.min.js","path":"lib/algolia-instant-search/instantsearch.min.js","modified":1,"renderable":1},{"_id":"source/image/Android/ConstraintLayout/wrap_content_enforcing_constraints3.png","path":"image/Android/ConstraintLayout/wrap_content_enforcing_constraints3.png","modified":1,"renderable":0},{"_id":"themes/next/source/lib/three/three.min.js","path":"lib/three/three.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.svg","path":"lib/font-awesome/fonts/fontawesome-webfont.svg","modified":1,"renderable":1},{"_id":"source/image/Android/IPC/create_aidl.png","path":"image/Android/IPC/create_aidl.png","modified":1,"renderable":0},{"_id":"source/image/Android/Coordinatorlayout/Coordinatorlayout.gif","path":"image/Android/Coordinatorlayout/Coordinatorlayout.gif","modified":1,"renderable":0},{"_id":"source/image/Android/ConstraintLayout/constraintLayout_placeholderand_CoordinatorLayout.gif","path":"image/Android/ConstraintLayout/constraintLayout_placeholderand_CoordinatorLayout.gif","modified":1,"renderable":0}],"Cache":[{"_id":"source/404.html","hash":"9eb955271b03c72a4bb23a06b60e4ecb4070a880","modified":1533400618726},{"_id":"source/CNAME","hash":"15a5bd58f74218b29e6fb6685a7418ca26f90cf6","modified":1534256385564},{"_id":"themes/next/.editorconfig","hash":"211d2c92bfdddb3e81ea946f4ca7a539f150f4da","modified":1533300374168},{"_id":"themes/next/.bowerrc","hash":"334da94ca6f024d60d012cc26ea655681e724ad8","modified":1533300374168},{"_id":"source/alipay.png","hash":"815b49a7951c8e89e36be54db535e3d700f8f170","modified":1498985337279},{"_id":"source/wechatpay.png","hash":"efeb49a2c795383181697dc3ee84787e7136d5fc","modified":1533400341160},{"_id":"themes/next/.gitattributes","hash":"8454b9313cb1a97b63fb87e2d29daee497ce6249","modified":1533300374169},{"_id":"themes/next/.gitignore","hash":"ee0b13c268cc8695d3883a5da84930af02d4ed08","modified":1533300374171},{"_id":"themes/next/.jshintrc","hash":"b7d23f2ce8d99fa073f22f9960605f318acd7710","modified":1533300374172},{"_id":"themes/next/.hound.yml","hash":"289dcf5bfe92dbd680d54d6e0668f41c9c9c0c78","modified":1533300374171},{"_id":"themes/next/.javascript_ignore","hash":"cd250ad74ca22bd2c054476456a73d9687f05f87","modified":1533300374172},{"_id":"themes/next/LICENSE","hash":"ec44503d7e617144909e54533754f0147845f0c5","modified":1533300374173},{"_id":"themes/next/.travis.yml","hash":"6674fbdfe0d0c03b8a04527ffb8ab66a94253acd","modified":1533300374173},{"_id":"themes/next/_config.yml","hash":"405489930645a4e07ec054dbe8b53045a5154c69","modified":1534782226890},{"_id":"themes/next/README.cn.md","hash":"b764aae78ffa561a9a68fdee4c6f21c3ce260fbb","modified":1533300405476},{"_id":"themes/next/.stylintrc","hash":"3b7f9785e9ad0dab764e1c535b40df02f4ff5fd6","modified":1533300374172},{"_id":"themes/next/README.md","hash":"4e276fb9a3c31f1259df3ea9a4b92f4a8d72714d","modified":1533300405477},{"_id":"themes/next/bower.json","hash":"486ebd72068848c97def75f36b71cbec9bb359c5","modified":1533300374175},{"_id":"themes/next/gulpfile.coffee","hash":"412defab3d93d404b7c26aaa0279e2e586e97454","modified":1533300374175},{"_id":"themes/next/package.json","hash":"3963ad558a24c78a3fd4ef23cf5f73f421854627","modified":1533300374214},{"_id":"source/favicon.ico","hash":"f7947fb76cdbd69b54975dc8da017e31a68a61ac","modified":1498985337281},{"_id":"source/_posts/2016国庆.md","hash":"0799802c9af1810549b19f310b8a591f9639c71c","modified":1533437773336},{"_id":"source/_posts/Android-N-应用内更新.md","hash":"5fe7826523812ad4e4628c77e6e8f0cef98eba42","modified":1533357882010},{"_id":"source/_posts/Android-hook--反射基础.md","hash":"362e45f891f3b011c4c210b0238e90ba69b6a543","modified":1533561346774},{"_id":"source/_posts/Activity启动模式，启动过程.md","hash":"52f0a65577021359f78632bc496c8be1b376e3fe","modified":1533357827170},{"_id":"source/_posts/Android-ContentProvider.md","hash":"4ff4d3c9bad7e98f133e088c87e176a3e6f88f9c","modified":1533357846660},{"_id":"source/_posts/Android-hook-示例.md","hash":"25fe8abe1633bd131b7f91031dd264dcd356cea5","modified":1533569197283},{"_id":"source/_posts/Android7-0分屏实现.md","hash":"c3572b43f60da71945276d4df5ddbffdfb4e6989","modified":1533357913363},{"_id":"source/_posts/Android中使用WebSocket-2.md","hash":"4cb9eb9e272bbf2c62224b3d4957d7bd4140f5e8","modified":1533357998119},{"_id":"source/_posts/Android中使用WebSocket.md","hash":"c853e8075d374f51cc5e1d43868b3a31fdd3001d","modified":1533358007739},{"_id":"source/_posts/AndroidService.md","hash":"020b6ba74d5eaa50ce99f2a5ec158d7cd56671fa","modified":1533357983080},{"_id":"source/_posts/Android多进程-二.md","hash":"1eca163c8a586ea460263a1fe206dd7c35103c86","modified":1533358030417},{"_id":"source/_posts/Android多进程-一.md","hash":"1ae7e86667f4394af827994bfa83b8318444fbb9","modified":1533358020126},{"_id":"source/_posts/Android多进程三.md","hash":"83df0393c727d947a9f9d6e38086bcdfcd5a1dc5","modified":1533358073768},{"_id":"source/_posts/Android布局文件中的xmlns-tools.md","hash":"d5c8063bc74d52a52f439e88f508880fce4242c5","modified":1533358111962},{"_id":"source/_posts/ConstraintLayout.md","hash":"b8a3464051ec64f6e1fd3cdcd667ed00ae551869","modified":1533907446745},{"_id":"source/_posts/Coordinatorlayout.md","hash":"e043f88d480872d9a317a72e4cbc72be0e835fa0","modified":1534865551951},{"_id":"source/_posts/JVM-内存分配与回收策略.md","hash":"a7de18c6821116fdf1f4876fb10cb02ba53cf6ab","modified":1533359076981},{"_id":"source/_posts/JVM-垃圾收集算法.md","hash":"074e816f003f42d506b1750398c2256e46505323","modified":1533359089330},{"_id":"source/_posts/Android的消息机制.md","hash":"0edd2f7cac3f92160429bff7bc267e3b54375c57","modified":1533358206309},{"_id":"source/_posts/Android广播.md","hash":"061106253aa9d7ca86f022c3967c9ac09ca89908","modified":1533358148149},{"_id":"source/_posts/JVM垃圾回收-对象已死？.md","hash":"37d0c16174e5ec708e3830bfb2de63173320961c","modified":1533359681569},{"_id":"source/_posts/LaTeX笔记-一.md","hash":"0921376895d6308f89f2219cd929d389fa462af8","modified":1533359703958},{"_id":"source/_posts/Java并发多线程同步.md","hash":"670c14e57cf2baab6e50c05f8b2337b0574f0c58","modified":1533358484541},{"_id":"source/_posts/JVM内存区域.md","hash":"2591c47389dd1b34f13fec3d5e0bc4461dcab8c7","modified":1533359100772},{"_id":"source/_posts/Jenkins安装与使用.md","hash":"c22c54e80e73aab88367cc7bfc53412a1af697b3","modified":1533358589398},{"_id":"source/_posts/LaTeX笔记-二.md","hash":"f9666b76043b6e6288593f4e0a1b502662d145d5","modified":1533359715413},{"_id":"source/_posts/LaTeX笔记-三.md","hash":"b43e4180a8efe8bcc45d8fe19b4d85e1ba425bef","modified":1533359711870},{"_id":"source/_posts/LaTeX笔记-四.md","hash":"87f39f8d363d2aeb00e11cec35d46b6e7b7ee768","modified":1533359734295},{"_id":"source/_posts/LaTeX笔记-六.md","hash":"10c4e0ee5f74ac49666bbaf1938f9a14b6f58473","modified":1533359730541},{"_id":"source/_posts/LaTeX笔记-五.md","hash":"00ac54013ef7a7fb24362adbc90523ef7434aa48","modified":1533359719444},{"_id":"source/_posts/TCP协议的简单理解.md","hash":"fbb2d0d99a477be477e6d24c155a4155bfa714d3","modified":1533359749206},{"_id":"source/_posts/Tinker初探.md","hash":"6beed624f352834da41fca9ccd9c4869ec89a26d","modified":1533359773461},{"_id":"source/_posts/View的滑动.md","hash":"2848d118b31ccb278101c6afd244a70e51871470","modified":1533359802311},{"_id":"source/_posts/Toast显示过程.md","hash":"b753d329695966cdd86bc6a4218caf85c7fcceef","modified":1533359783400},{"_id":"source/_posts/View事件分发.md","hash":"d81c56c527230eef6548c4dcfee4bdabc725ab12","modified":1533359789516},{"_id":"source/_posts/View绘制过程.md","hash":"06e5d3bd0c161b2f9b729108de5dc4cc401e9b52","modified":1533359830145},{"_id":"source/_posts/elk简单环境搭建-for-linux.md","hash":"00ddb11166f4e5f0ca4736605d3949f4fafe9a60","modified":1533358385408},{"_id":"source/_posts/Window和WindowManager.md","hash":"dfb38806924e9809910e4672842cf17e8dd9ee9d","modified":1533359901339},{"_id":"source/_posts/flask笔记一(快速入门).md","hash":"2b57fd83057d2ff55b20e15e341ce9e7653c167b","modified":1533358400701},{"_id":"source/_posts/git工具.md","hash":"d50d13dab6bf4497d3221451fe67096aede65be8","modified":1533358426511},{"_id":"source/_posts/hexo-gitpage搭建自己的博客-一.md","hash":"6c2413bc88316655f3d096af78736434f9c9b575","modified":1533358437069},{"_id":"source/_posts/hexo-gitpage搭建自己的博客-二.md","hash":"8d6da3ed55bf7b0f30f5c90110ab827026a32f15","modified":1533358450433},{"_id":"source/_posts/hexo-gitpage搭建自己的博客-三.md","hash":"928a4e8a6ef664c74bc8186c9ab256a052e2e37b","modified":1533358446734},{"_id":"source/_posts/《我的安卓爬坑之旅》-融云IM遇到的坑.md","hash":"c21b77e4313b708471f8bfde93a5111109ed6510","modified":1533357744041},{"_id":"source/_posts/《我的安卓爬坑之旅》-高德地图遇到的坑-1.md","hash":"beeb362c1fb2035b6e9d2333df11bce4bbd5cd9d","modified":1533357757366},{"_id":"source/_posts/《我的安卓爬坑之旅》.md","hash":"827ab4ea6be54932df36d4e30be523fe3559d201","modified":1533357775001},{"_id":"source/_posts/《我的安卓爬坑之旅》-高德地图遇到的坑-2.md","hash":"67c9ae20de4140736f855fc81033a1799310456e","modified":1533357763557},{"_id":"source/_posts/《我的安卓爬坑之旅》-高德地图遇到的坑-3.md","hash":"0a40dc45003fe6d9188da6a8bf81ccae117ee3e8","modified":1533357768952},{"_id":"source/_posts/写在2016年末.md","hash":"101d5e9e0d07d2e7d8c393b6b1272e5094b6b16f","modified":1524548322853},{"_id":"source/_posts/写在2018元旦之前-2017的总结.md","hash":"56899f6166c756f18db278bf93b2023ca176ff7b","modified":1516285632062},{"_id":"source/_posts/搭建git服务.md","hash":"8b4869037239cc94fa181dad8f40df961b2dd298","modified":1533359917692},{"_id":"source/_posts/如何获取csdn中个人所有文章标题及链接.md","hash":"6dc21a2eb7da6d94709e1cb9cec6db8e879c8e5b","modified":1524547796103},{"_id":"source/_posts/原CSDN博客.md","hash":"398f955821f6f96eef290e74a300ce451b64a1d9","modified":1524547999509},{"_id":"source/_posts/简单的桌面小部件.md","hash":"ac36f4af10f1e8f6b649a6078575600f335adbf9","modified":1533359939174},{"_id":"source/_posts/网站免费升级https.md","hash":"e6e2398ce4f34d5d15035ac5b9953f5450a807fc","modified":1533359955915},{"_id":"source/_posts/项目重构记录.md","hash":"d161d2b8dd8fd7b73b7bf8d6413f99fd41d54398","modified":1533440767153},{"_id":"source/_posts/通过简单的自定义view来看View的工作流程.md","hash":"e6a0e61120c63fb560f91773e5b21340c05e1e81","modified":1533359976317},{"_id":"source/_posts/面试总结.md","hash":"b695d04db5a7b8be85273de0c6c7f2a00811e8d7","modified":1533440510307},{"_id":"source/image/location.png","hash":"83316f76819e9949bbc6c6d6672433fd15c8f17e","modified":1498985337408},{"_id":"source/categories/index.md","hash":"266610000f66e5d466d98b9284eda7f876e796ee","modified":1533311128859},{"_id":"source/tags/index.md","hash":"60009c31678ef6aba07ed86456ee54b038f10e71","modified":1533311141012},{"_id":"themes/next/.github/CONTRIBUTING.md","hash":"5adfad3ef1b870063e621bc0838268eb2c7c697a","modified":1533300374169},{"_id":"themes/next/.github/ISSUE_TEMPLATE.md","hash":"b1ec000babd42bb7ffd26f5ad8aac9b5bec79ae5","modified":1533300405476},{"_id":"themes/next/.github/PULL_REQUEST_TEMPLATE.md","hash":"1228506a940114288d61812bfe60c045a0abeac1","modified":1533300374170},{"_id":"themes/next/languages/de.yml","hash":"fd02d9c2035798d5dc7c1a96b4c3e24b05b31a47","modified":1533300374176},{"_id":"themes/next/.github/browserstack_logo.png","hash":"a6c43887f64a7f48a2814e3714eaa1215e542037","modified":1533300374170},{"_id":"themes/next/languages/id.yml","hash":"dccae33e2a5b3c9f11c0e05ec4a7201af1b25745","modified":1533300374177},{"_id":"themes/next/languages/default.yml","hash":"b3bcd8934327448a43d9bfada5dd11b1b8c1402e","modified":1533300374176},{"_id":"themes/next/languages/fr-FR.yml","hash":"efeeb55d5c4add54ad59a612fc0630ee1300388c","modified":1533300374177},{"_id":"themes/next/languages/en.yml","hash":"2f4b4776ca1a08cc266a19afb0d1350a3926f42c","modified":1533300374177},{"_id":"themes/next/languages/it.yml","hash":"a215d016146b1bd92cef046042081cbe0c7f976f","modified":1533300374178},{"_id":"themes/next/languages/ja.yml","hash":"37f954e47a3bc669620ca559e3edb3b0072a4be5","modified":1533300374178},{"_id":"themes/next/languages/ko.yml","hash":"dc8f3e8c64eb7c4bb2385025b3006b8efec8b31d","modified":1533300374179},{"_id":"themes/next/languages/nl-NL.yml","hash":"213e7a002b82fb265f69dabafbbc382cfd460030","modified":1533300374179},{"_id":"themes/next/languages/pt-BR.yml","hash":"568d494a1f37726a5375b11452a45c71c3e2852d","modified":1533300374179},{"_id":"themes/next/languages/pt.yml","hash":"2efcd240c66ab1a122f061505ca0fb1e8819877b","modified":1533300374180},{"_id":"themes/next/languages/zh-Hans.yml","hash":"26c49cfcb74bb9b2f61b1f82f732e732ff9e5833","modified":1533307984508},{"_id":"themes/next/languages/vi.yml","hash":"a9b89ebd3e5933033d1386c7c56b66c44aca299a","modified":1533300374180},{"_id":"themes/next/languages/ru.yml","hash":"e33ee44e80f82e329900fc41eb0bb6823397a4d6","modified":1533300374180},{"_id":"themes/next/languages/zh-tw.yml","hash":"432463b481e105073accda16c3e590e54c8e7b74","modified":1533300374182},{"_id":"themes/next/languages/zh-hk.yml","hash":"fe0d45807d015082049f05b54714988c244888da","modified":1533300374181},{"_id":"themes/next/layout/_layout.swig","hash":"8862cb8ea3b35fede278eaa3bd25a160b9373b2c","modified":1533353626441},{"_id":"themes/next/layout/archive.swig","hash":"9a2c14874a75c7085d2bada5e39201d3fc4fd2b4","modified":1533300374211},{"_id":"themes/next/layout/category.swig","hash":"3cbb3f72429647411f9e85f2544bdf0e3ad2e6b2","modified":1533300374212},{"_id":"themes/next/layout/index.swig","hash":"555a357ecf17128db4e29346c92bb6298e66547a","modified":1533300374212},{"_id":"themes/next/layout/page.swig","hash":"e8fcaa641d46930237675d2ad4b56964d9e262e9","modified":1533300374212},{"_id":"themes/next/scripts/merge-configs.js","hash":"38d86aab4fc12fb741ae52099be475196b9db972","modified":1533300374214},{"_id":"themes/next/scripts/merge.js","hash":"39b84b937b2a9608b94e5872349a47200e1800ff","modified":1533300374215},{"_id":"themes/next/layout/schedule.swig","hash":"87ad6055df01fa2e63e51887d34a2d8f0fbd2f5a","modified":1533300374213},{"_id":"themes/next/layout/post.swig","hash":"7a6ce102ca82c3a80f776e555dddae1a9981e1ed","modified":1533300374213},{"_id":"themes/next/layout/tag.swig","hash":"34e1c016cbdf94a31f9c5d494854ff46b2a182e9","modified":1533300374213},{"_id":"themes/next/test/.jshintrc","hash":"c9fca43ae0d99718e45a6f5ce736a18ba5fc8fb6","modified":1533300374336},{"_id":"themes/next/test/helpers.js","hash":"f25e7f3265eb5a6e1ccbb5e5012fa9bebf134105","modified":1533300374336},{"_id":"themes/next/test/intern.js","hash":"db90b1063356727d72be0d77054fdc32fa882a66","modified":1533300374337},{"_id":"source/image/new_widget.png","hash":"c39ced27f848ef2a69f7e6e28b2b17d5af82dd91","modified":1498985337411},{"_id":"themes/next/source/fonts/.gitkeep","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1533300374265},{"_id":"source/image/2018_01_01.png","hash":"0396b5d5f4c87a1cfdc2ec70d0685baa4485e343","modified":1514795021207},{"_id":"source/image/JVM/JVM_RunTime_Area.png","hash":"9000bdd0c0cadd3eaf40bdecf081e1baa15e370f","modified":1498985337285},{"_id":"source/image/gaode/install_run.png","hash":"60e54f63cd184e47523a505e7a52336c2280202a","modified":1498985337317},{"_id":"source/image/git/git_diff_tool_codecompare.png","hash":"df3f29280b14000e0f7e1b0744e9f5b816b30d6d","modified":1498985337376},{"_id":"source/image/git/git_merge_tool_codecompare.png","hash":"c90c690c56b47ea6c0da763f14c106fba47e6836","modified":1498985337382},{"_id":"source/image/hexo/Catalog.png","hash":"c1fb4830a844538a1f3c33645a1d2beb4ef23b85","modified":1498985337383},{"_id":"source/image/csdn_blog_title.png","hash":"40a2c69aa442cc5c95dc2ff5491207380af9de69","modified":1498985337314},{"_id":"source/image/hexo/hexo-v.png","hash":"d04daee47710412415a4b1de2718f36e79586f48","modified":1498985337385},{"_id":"source/image/hexo/npm_install.png","hash":"c1586b55472528a70b7e7a9cc1487a2d57ee3f0b","modified":1498985337391},{"_id":"source/image/hexo/nvm_install_6.6.0.png","hash":"d7f18ccf8a4a9ea798752fc9a0ae464da06831f3","modified":1498985337393},{"_id":"source/image/hexo/nvm_ls-remote.png","hash":"9ba963bf4bd2a95349919d66c7b7a56b876a5377","modified":1498985337395},{"_id":"source/image/hexo/nvm_install_down.png","hash":"a2a0e01341881c3d3e9e21e7ffe9ad2ee12680fd","modified":1498985337394},{"_id":"source/image/jenkins/jenkins_config_project.png","hash":"efb96ad7daa2301f2999799fa43565520451ee97","modified":1498985337400},{"_id":"source/image/jenkins/jenkins_build_history.png","hash":"c8f6cfcd97256588c2c3f4100c4ef496ac8fbbb8","modified":1498985337399},{"_id":"source/image/jenkins/jenkins_maven.png","hash":"c0cfca773937c55a6219576c4795c89aaf1e88ef","modified":1498985337404},{"_id":"source/image/jenkins/jenkins_jdk.png","hash":"ec847c34b6f0127fb30d1798b433d446aaf7f01f","modified":1498985337403},{"_id":"source/image/jenkins/jenkins_index.png","hash":"9a56f2aa69c9717a0bdd959b26949e90ff970bf7","modified":1498985337403},{"_id":"source/image/jenkins/jenkins_project_build.png","hash":"411f3fe3974160ed4d520b89267f2f26bcdb13bc","modified":1498985337405},{"_id":"source/image/jenkins/jenkins_start_build_project.png","hash":"19b4973e82263f805470a6b1bd89c055bbd7b4ae","modified":1498985337407},{"_id":"source/image/latex/latex_note_one_1.png","hash":"53774f21f28e4fb3f4bf58de83ce68700b1a4e78","modified":1516284195845},{"_id":"source/image/latex/latex_note_six_1.png","hash":"73160622d52768a1406bd215b110f77dd77778e4","modified":1519828242609},{"_id":"source/image/latex/latex_note_six_2.png","hash":"1eb074fb1a51f6348e24c8f631b0ad81add2a679","modified":1519828242610},{"_id":"source/image/hotfix/tinker_task_result.png","hash":"5dabb12003f86d3134ef77e8e6b2eed654b8fa09","modified":1520667052913},{"_id":"source/image/hotfix/tinker_task.png","hash":"9ab60dfd155c4c656f2954b4b89fdda13655cdb1","modified":1520667021207},{"_id":"source/image/https/https1.png","hash":"79bbd2175de47fb0baff778323984d5f84e8e790","modified":1522557636483},{"_id":"source/image/https/https4.png","hash":"1f49448b2234221bb1e7cfbf44817549d54d32f9","modified":1522559061360},{"_id":"source/image/tcp/tcp1.png","hash":"cd47cb2ecdb3d93bdc0c1abf7b22b01beca2992d","modified":1514639587238},{"_id":"source/image/tcp/tcp3.png","hash":"91ebf7918373ad75930758135a5323fa3a991663","modified":1514639587239},{"_id":"source/image/tcp/tcp4.png","hash":"9bfd72e1cf0c1614397da9ae4baf11298eeb08f3","modified":1514639587240},{"_id":"themes/next/layout/_macro/post-copyright.swig","hash":"f83befdc740beb8dc88805efd7fbb0fef9ed19be","modified":1533300374184},{"_id":"themes/next/layout/_macro/post-collapse.swig","hash":"8c56dd26157cbc580ae41d97ac34b90ab48ced3f","modified":1533300374184},{"_id":"themes/next/layout/_macro/reward.swig","hash":"357d86ec9586705bfbb2c40a8c7d247a407db21a","modified":1533300374185},{"_id":"themes/next/layout/_macro/post.swig","hash":"9ffeeb457651836274a238787b2255df7798b899","modified":1533561346779},{"_id":"themes/next/layout/_macro/wechat-subscriber.swig","hash":"e2e4eae391476da994045ed4c7faf5e05aca2cd7","modified":1533300374186},{"_id":"themes/next/layout/_macro/sidebar.swig","hash":"9c7343fd470e0943ebd75f227a083a980816290b","modified":1533300374185},{"_id":"themes/next/layout/_partials/comments.swig","hash":"4adc65a602d1276615da3b887dcbf2ac68e7382b","modified":1533300374186},{"_id":"themes/next/layout/_partials/header.swig","hash":"c54b32263bc8d75918688fb21f795103b3f57f03","modified":1533300374189},{"_id":"themes/next/layout/_partials/head.swig","hash":"f14a39dad1ddd98e6d3ceb25dda092ba80d391b5","modified":1533300374187},{"_id":"themes/next/layout/_partials/footer.swig","hash":"6f2b1a7fc9f5d8fcf6199bf84040dc29abcefb66","modified":1533307822406},{"_id":"themes/next/layout/_partials/pagination.swig","hash":"1634fb887842698e01ff6e632597fe03c75d2d01","modified":1533300374189},{"_id":"themes/next/layout/_partials/search.swig","hash":"b4ebe4a52a3b51efe549dd1cdee846103664f5eb","modified":1533300374190},{"_id":"themes/next/layout/_partials/page-header.swig","hash":"77c61e0baea3544df361b7338c3cd13dc84dde22","modified":1533300374189},{"_id":"themes/next/layout/_third-party/duoshuo-hot-articles.swig","hash":"ba75672183d94f1de7c8bd0eeee497a58c70e889","modified":1533300374206},{"_id":"themes/next/layout/_third-party/exturl.swig","hash":"8301c9600bb3e47f7fb98b0e0332ef3c51bb1688","modified":1533300374206},{"_id":"themes/next/layout/_third-party/mathjax.swig","hash":"a0bd3388587fd943baae0d84ca779a707fbcad89","modified":1533300374206},{"_id":"themes/next/layout/_third-party/needsharebutton.swig","hash":"fa882641da3bd83d9a58a8a97f9d4c62a9ee7b5c","modified":1533300374207},{"_id":"themes/next/layout/_third-party/rating.swig","hash":"554ec568e9d2c71e4a624a8de3cb5929050811d6","modified":1533300374207},{"_id":"themes/next/layout/_third-party/scroll-cookie.swig","hash":"9a188938d46931d5f3882a140aa1c48b3a893f0c","modified":1533300374208},{"_id":"themes/next/layout/_third-party/schedule.swig","hash":"db15d7e1552aa2d2386a6b8a33b3b3a40bf9e43d","modified":1533300374208},{"_id":"themes/next/layout/_scripts/commons.swig","hash":"931808ad9b8d8390c0dcf9bdeb0954eeb9185d68","modified":1533300374194},{"_id":"themes/next/layout/_scripts/boostrap.swig","hash":"c0f5a0955f69ca4ed9ee64a2d5f8aa75064935ad","modified":1533300374194},{"_id":"themes/next/layout/_custom/sidebar.swig","hash":"ba8ab5a0280b953aa97435ff8946cbcbb2755a27","modified":1533300374183},{"_id":"themes/next/layout/_custom/header.swig","hash":"ba8ab5a0280b953aa97435ff8946cbcbb2755a27","modified":1533300374182},{"_id":"themes/next/scripts/tags/center-quote.js","hash":"99b66949f18398689b904907af23c013be1b978f","modified":1533300374216},{"_id":"themes/next/scripts/tags/button.js","hash":"eddbb612c15ac27faf11c59c019ce188f33dec2c","modified":1533300374216},{"_id":"themes/next/scripts/tags/exturl.js","hash":"5022c0ba9f1d13192677cf1fd66005c57c3d0f53","modified":1533300374216},{"_id":"themes/next/layout/_scripts/vendors.swig","hash":"9be624634703be496a5d2535228bc568a8373af9","modified":1533300374197},{"_id":"themes/next/scripts/tags/group-pictures.js","hash":"ac681b0d0d8d39ba3817336c0270c6787c2b6b70","modified":1533300374217},{"_id":"themes/next/scripts/tags/label.js","hash":"6f00952d70aadece844ce7fd27adc52816cc7374","modified":1533300374218},{"_id":"themes/next/scripts/tags/full-image.js","hash":"c9f833158c66bd72f627a0559cf96550e867aa72","modified":1533300374217},{"_id":"themes/next/scripts/tags/note.js","hash":"f7eae135f35cdab23728e9d0d88b76e00715faa0","modified":1533300374218},{"_id":"themes/next/scripts/tags/lazy-image.js","hash":"bcba2ff25cd7850ce6da322d8bd85a8dd00b5ceb","modified":1533300374218},{"_id":"themes/next/scripts/tags/tabs.js","hash":"aa7fc94a5ec27737458d9fe1a75c0db7593352fd","modified":1533300374219},{"_id":"themes/next/source/css/main.styl","hash":"a91dbb7ef799f0a171b5e726c801139efe545176","modified":1533300374265},{"_id":"themes/next/source/images/algolia_logo.svg","hash":"45eeea0b5fba833e21e38ea10ed5ab385ceb4f01","modified":1533300374266},{"_id":"themes/next/source/images/avatar.gif","hash":"264082bb3a1af70d5499c7d22b0902cb454b6d12","modified":1533300374267},{"_id":"themes/next/source/images/apple-touch-icon-next.png","hash":"2959dbc97f31c80283e67104fe0854e2369e40aa","modified":1533300374267},{"_id":"themes/next/source/images/cc-by-nc-nd.svg","hash":"bc3588c9b2d7c68830524783120ff6cf957cf668","modified":1533300374267},{"_id":"themes/next/source/images/cc-by-nc-sa.svg","hash":"6f55543d1fb9cbc436c101d24f802dec7b41efc3","modified":1533300374268},{"_id":"themes/next/source/images/cc-by-nc.svg","hash":"6f076713fb9bf934aa2c1046bdf2cf2e37bc1eab","modified":1533300374268},{"_id":"themes/next/source/images/cc-by-nd.svg","hash":"42cd73da328077ccc92f859bb8f3cf621b3484f8","modified":1533300374269},{"_id":"themes/next/source/images/favicon-16x16-next.png","hash":"943a0d67a9cdf8c198109b28f9dbd42f761d11c3","modified":1533300374270},{"_id":"themes/next/source/images/cc-by-sa.svg","hash":"70c1535f43e54e5ff35ca81419e77e4c0c301398","modified":1533300374269},{"_id":"themes/next/source/images/loading.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1533300374271},{"_id":"themes/next/source/images/cc-by.svg","hash":"e92a33c32d1dac8ed94849b2b4e6456e887efe70","modified":1533300374269},{"_id":"themes/next/source/images/favicon-32x32-next.png","hash":"0749d7b24b0d2fae1c8eb7f671ad4646ee1894b1","modified":1533300374271},{"_id":"themes/next/source/images/placeholder.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1533300374272},{"_id":"themes/next/source/images/cc-zero.svg","hash":"9bfb52b2f63527a7049247bf00d44e6dc1170e7d","modified":1533300374270},{"_id":"themes/next/source/images/logo.svg","hash":"169f56fd82941591dad3abd734a50ec7259be950","modified":1533300374271},{"_id":"themes/next/source/images/quote-r.svg","hash":"2a2a250b32a87c69dcc1b1976c74b747bedbfb41","modified":1533300374272},{"_id":"themes/next/source/images/quote-l.svg","hash":"cd108d6f44351cadf8e6742565217f88818a0458","modified":1533300374272},{"_id":"themes/next/source/images/searchicon.png","hash":"67727a6a969be0b2659b908518fa6706eed307b8","modified":1533300374273},{"_id":"source/image/Library_Plant_specimen1.jpg","hash":"9c7d30409dfa60ef2a7544c2a47918a7b4677226","modified":1498985337289},{"_id":"source/image/Library_Plant_specimen4.jpg","hash":"a353768228d659bc4be4e3a10239449104a81496","modified":1498985337295},{"_id":"source/image/Library_Plant_specimen3.jpg","hash":"c42357f1809801d54076def102b17443da553749","modified":1498985337293},{"_id":"source/image/Library_Plant_specimen2.jpg","hash":"208aeeefab42ea76fcce53fd8e728ae89c1dec8e","modified":1498985337291},{"_id":"source/image/gaode/geocoderSearch_bug.png","hash":"52c6b1fe11a9f6d4f9543ab1cbdbfa28e7e0beb7","modified":1514639587234},{"_id":"source/image/Tsinghua.jpg","hash":"a6d99a0e0ef2074a08c8ad50aea538c2d7bf9259","modified":1498985337313},{"_id":"source/image/git/git_diff_tool_bc.png","hash":"e26b45a8bbbba5d71ba39ac9e6fd2f36ddd5423d","modified":1498985337374},{"_id":"source/image/git/git_merge_tool_bc.png","hash":"1cdc2137b52d7a8a4219125013288793174f5826","modified":1498985337381},{"_id":"source/image/git/git_init_tree.png","hash":"fb2743b889e407f0e0ed3ed1bf0e1aeec4806870","modified":1498985337379},{"_id":"source/image/hexo/duoshuo.png","hash":"4b62f587c27bd0ef13aac14c686131f929653c6a","modified":1498985337384},{"_id":"source/image/hexo/hexo_install_nvm.png","hash":"ecb0052c629af11483663a4cf84e288267afa026","modified":1498985337390},{"_id":"source/image/hexo/hexo_init.png","hash":"9cd71f4f1c58debe8f2c95de8b78474469c71d6f","modified":1498985337389},{"_id":"source/image/hexo/npm_install_hexo.png","hash":"13e62cc42f6e2dd02d99467e5254f95124c15b59","modified":1498985337393},{"_id":"source/image/hexo/yilia_them.png","hash":"76c8942f03eb255fe82350f3124d8c4a9d06c703","modified":1498985337396},{"_id":"source/image/jenkins/jenkins_build_console_output.png","hash":"9be0df977f276b563022b1364d70f46e5b65e760","modified":1498985337398},{"_id":"source/image/csdn_home.png","hash":"292c008656a76ae9fc32f15869dda084c7cf05c5","modified":1498985337316},{"_id":"source/image/main_building.jpg","hash":"8ea5677c82ec30aaeca1457a205d17628f36ae0b","modified":1498985337410},{"_id":"source/image/tcp/tcp2.png","hash":"18f69b2162d08f290d7701eb0dfbf69f84c7a3d3","modified":1514639587239},{"_id":"source/image/sign.jpg","hash":"aeabf18eef5ec58e28eec9b40f470e96294fab1c","modified":1498985337413},{"_id":"source/image/tcp/tcp5.png","hash":"26d24fc87b029c39e6fbbdbb894d77775dd5557b","modified":1514639587241},{"_id":"themes/next/layout/_scripts/schemes/muse.swig","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1533300374196},{"_id":"themes/next/layout/_scripts/schemes/mist.swig","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1533300374195},{"_id":"themes/next/source/css/_mixins/Muse.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1533300374251},{"_id":"themes/next/source/css/_mixins/Mist.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1533300374250},{"_id":"themes/next/source/css/_mixins/custom.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1533300374252},{"_id":"themes/next/source/css/_variables/Muse.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1533300374263},{"_id":"themes/next/source/css/_variables/custom.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1533300374264},{"_id":"source/image/Android/ConstraintLayout/centering_positioning.png","hash":"0aa85309c58b37406e99f2519cde20fe1e41571c","modified":1533822507987},{"_id":"source/image/Android/ConstraintLayout/barrier.png","hash":"07d5796f5febd36744e178c6f16ca1e0b2ab8dd8","modified":1533907446746},{"_id":"source/image/Android/ConstraintLayout/barrier1.png","hash":"582d7fc833300a086145b43d1bc186d41807859a","modified":1533907446746},{"_id":"source/image/Android/ConstraintLayout/barrier2.png","hash":"697da1f86e5cd65fe12449b8778435a1641fb618","modified":1533907446747},{"_id":"source/image/Android/ConstraintLayout/chain_head.png","hash":"98413d2e41397ad03a115f416cdec73d534026d8","modified":1533830172981},{"_id":"source/image/Android/ConstraintLayout/centering_positioning_with_bias.png","hash":"02606adb6d24acc2d3b55bae0cd9bec8d53db783","modified":1533822507988},{"_id":"source/image/Android/ConstraintLayout/chain.png","hash":"6fb2b4acb698d6224c1d92fcea3f1a55191336bb","modified":1533830092516},{"_id":"source/image/Android/ConstraintLayout/chain_styles.png","hash":"1657ac9f09646b2e9284e2b972682907b965a199","modified":1533830550320},{"_id":"source/image/Android/ConstraintLayout/dimension_constraints.png","hash":"2fd0e2c2da35a362d8627f1fdea9b713dec5c763","modified":1533822507991},{"_id":"source/image/Android/ConstraintLayout/relative_positioning_example.png","hash":"5bd1cc8331315599673db09811e7baa70ca576e1","modified":1533822507992},{"_id":"source/image/Android/ConstraintLayout/relative_position_constraint.png","hash":"b0b6736e512cc9233f79c878097f815df0b3cf43","modified":1533822507992},{"_id":"source/image/Android/ConstraintLayout/relative_positioning_margins.png","hash":"e3c54a0e1033af0638af0022bd29082c57b220cb","modified":1533822507993},{"_id":"source/image/Android/ConstraintLayout/visibility_behavior.png","hash":"d9623348bc93f9364c7f5801c85ca414deb18060","modified":1533822507994},{"_id":"source/image/Android/MultiWindow/2.png","hash":"f6fc822bb0bc4632bbeb34f5b6ad51b4aaffd14d","modified":1528706978000},{"_id":"source/image/Android/MultiWindow/1.png","hash":"320b37affa3032b60da3c1a8689a729a10283f0d","modified":1528703278000},{"_id":"source/image/Android/MultiWindow/3.png","hash":"c49302b8176c3875e8365d72ba81f2e36db8505b","modified":1528707998000},{"_id":"source/image/Library.jpg","hash":"8e7bd8fae6ca8c39f1957802125319aadd634a33","modified":1498985337287},{"_id":"source/image/PHBS1.jpg","hash":"06bbf9c907e1a4241917c9c3bcc1f824d51b70d1","modified":1498985337305},{"_id":"source/image/jenkins/jenkins_create_new_project.png","hash":"f0fb7931e5b4b507e5c8ab995b94d9214e8dbe94","modified":1498985337402},{"_id":"source/image/jenkins/jenkins_start.png","hash":"cb99e8a69b30cd80e1e9f62f6fb11cdd6e2676f0","modified":1498985337406},{"_id":"source/image/latex/latex_note_one_2.png","hash":"bbd882fab8f02e891992f810ffe2094cec960065","modified":1516285338896},{"_id":"source/image/tcp/tcp6.png","hash":"f221da3156e00b0a2b03eff66d573475148995fd","modified":1514639587242},{"_id":"source/image/python/Flask/pycharm_project_setting2.png","hash":"ba90ef64d5999f7980236422b8d075f8883caade","modified":1514639587237},{"_id":"source/image/python/Flask/pycharm_project_setting1.png","hash":"b87ec9607c452dfb12f166cb85e1900e0c567f47","modified":1514639587236},{"_id":"source/image/tcp/tcp7.png","hash":"5765003f3456656af972553c3181ca5b98e14dad","modified":1514639587243},{"_id":"themes/next/layout/_partials/head/custom-head.swig","hash":"a223919d2e1bf17ca4d6abb2c86f2efca9883dc1","modified":1533300374188},{"_id":"themes/next/layout/_partials/search/localsearch.swig","hash":"b2f0d247b213e4cf8de47af6a304d98070cc7256","modified":1533300374190},{"_id":"themes/next/layout/_partials/head/external-fonts.swig","hash":"f5e487b0d213ca0bd94aa30bc23b240d65081627","modified":1533300374188},{"_id":"themes/next/layout/_partials/search/swiftype.swig","hash":"a8c7f9ca7c605d039a1f3bf4e4d3183700a3dd62","modified":1533300374191},{"_id":"themes/next/layout/_partials/search/tinysou.swig","hash":"b25002a83cbd2ca0c4a5df87ad5bff26477c0457","modified":1533300374191},{"_id":"themes/next/layout/_third-party/analytics/analytics-with-widget.swig","hash":"ff947f3561b229bc528cb1837d4ca19612219411","modified":1533300374197},{"_id":"themes/next/layout/_third-party/analytics/baidu-analytics.swig","hash":"753d262911c27baf663fcaf199267133528656af","modified":1533300374198},{"_id":"themes/next/layout/_third-party/analytics/facebook-sdk.swig","hash":"7d94845f96197d9d84a405fa5d4ede75fb81b225","modified":1533300374199},{"_id":"themes/next/layout/_third-party/analytics/google-analytics.swig","hash":"b1e13df83fb2b1d5d513b30b7aa6158b0837daab","modified":1533300374200},{"_id":"themes/next/layout/_third-party/analytics/index.swig","hash":"45f3f629c2aacc381095750e1c8649041a71a84b","modified":1533300374200},{"_id":"themes/next/layout/_third-party/analytics/cnzz-analytics.swig","hash":"a10b7f19d7b5725527514622899df413a34a89db","modified":1533300374199},{"_id":"themes/next/layout/_third-party/analytics/application-insights.swig","hash":"71397a5823e8ec8aad3b68aace13150623b3e19d","modified":1533300374198},{"_id":"themes/next/layout/_third-party/analytics/tencent-analytics.swig","hash":"8a399df90dadba5ad4e781445b58f4765aeb701e","modified":1533300374201},{"_id":"themes/next/layout/_third-party/analytics/busuanzi-counter.swig","hash":"7b11eac3a0685fa1ab2ab6ecff60afc4f15f0d16","modified":1533300374198},{"_id":"themes/next/layout/_partials/share/add-this.swig","hash":"9e3d133ac5bcc6cb51702c83b2611a49811abad1","modified":1533300374192},{"_id":"themes/next/layout/_third-party/analytics/firestore.swig","hash":"ccc443b22bd4f8c7ac4145664686c756395b90e0","modified":1533300374199},{"_id":"themes/next/layout/_third-party/analytics/tencent-mta.swig","hash":"5a8027328f060f965b3014060bebec1d7cf149c1","modified":1533300374201},{"_id":"themes/next/layout/_third-party/analytics/lean-analytics.swig","hash":"e6d10ee4fb70b3ae1cd37e9e36e000306734aa2e","modified":1533300374201},{"_id":"themes/next/layout/_third-party/analytics/vkontakte-api.swig","hash":"f9a1647a8f1866deeb94052d1f87a5df99cb1e70","modified":1533300374202},{"_id":"themes/next/layout/_partials/share/jiathis.swig","hash":"0a9cdd6958395fcdffc80ab60f0c6301b63664a5","modified":1533300374193},{"_id":"themes/next/layout/_partials/share/baidushare.swig","hash":"d9e2d9282f9be6e04eae105964abb81e512bffed","modified":1533300374192},{"_id":"themes/next/layout/_partials/share/duoshuo_share.swig","hash":"d4fbffd7fa8f2090eb32a871872665d90a885fac","modified":1533300374192},{"_id":"themes/next/layout/_third-party/comments/changyan.swig","hash":"4c501ea0b9c494181eb3c607c5526a5754e7fbd8","modified":1533300374202},{"_id":"themes/next/layout/_third-party/comments/index.swig","hash":"493bd5999a1061b981922be92d8277a0f9152447","modified":1533300374204},{"_id":"themes/next/layout/_third-party/comments/disqus.swig","hash":"b83a51bbe0f1e2ded9819070840b0ea145f003a6","modified":1533300374203},{"_id":"themes/next/layout/_third-party/comments/hypercomments.swig","hash":"af7f3e43cbdc4f88c13f101f0f341af96ace3383","modified":1533300374204},{"_id":"themes/next/layout/_third-party/comments/youyan.swig","hash":"7e65ff8fe586cd655b0e9d1ad2912663ff9bd36c","modified":1533300374205},{"_id":"themes/next/layout/_third-party/comments/gitment.swig","hash":"4dcc3213c033994d342d02b800b6229295433d30","modified":1533300374203},{"_id":"themes/next/layout/_third-party/comments/valine.swig","hash":"4050553d44ba1396174161c9a6bb0f89fa779eca","modified":1533300374205},{"_id":"themes/next/layout/_third-party/comments/livere.swig","hash":"9246162d4bc7e949ce1d12d135cbbaf5dc3024ec","modified":1533300374204},{"_id":"themes/next/layout/_third-party/comments/duoshuo.swig","hash":"1600f340e0225361580c44890568dc07dbcf2c89","modified":1533300374203},{"_id":"themes/next/layout/_third-party/search/index.swig","hash":"34599633658f3b0ffb487728b7766e1c7b551f5a","modified":1533300374209},{"_id":"themes/next/layout/_third-party/search/tinysou.swig","hash":"fe95dd3d166634c466e19aa756e65ad6e8254d3e","modified":1533300374210},{"_id":"themes/next/layout/_third-party/search/localsearch.swig","hash":"93479642fd076a1257fecc25fcf5d20ccdefe509","modified":1533300374210},{"_id":"themes/next/layout/_third-party/seo/baidu-push.swig","hash":"d8c98938719284fa06492c114d99a1904652a555","modified":1533300374211},{"_id":"themes/next/layout/_scripts/schemes/gemini.swig","hash":"a9a3995b9615adfb8d6b127c78c6771627bee19a","modified":1533300374195},{"_id":"themes/next/layout/_scripts/schemes/pisces.swig","hash":"a9a3995b9615adfb8d6b127c78c6771627bee19a","modified":1533300374196},{"_id":"themes/next/layout/_scripts/pages/post-details.swig","hash":"9b84ab576982b2c3bb0291da49143bc77fba3cc6","modified":1533300374195},{"_id":"themes/next/source/css/_mixins/Gemini.styl","hash":"07f7da320689f828f6e36a6123807964a45157a0","modified":1533300374250},{"_id":"themes/next/source/css/_mixins/Pisces.styl","hash":"7896c3ee107e1a8b9108b6019f1c070600a1e8cc","modified":1533300374251},{"_id":"themes/next/source/css/_variables/Mist.styl","hash":"a25408534f8fe6e321db4bbf9dd03335d648fe17","modified":1533300374263},{"_id":"themes/next/source/css/_mixins/base.styl","hash":"0e55cbd93852dc3f8ccb44df74d35d9918f847e0","modified":1533300374252},{"_id":"themes/next/source/css/_variables/Gemini.styl","hash":"58e7dd5947817d9fc30770712fc39b2f52230d1e","modified":1533300374263},{"_id":"themes/next/source/css/_variables/Pisces.styl","hash":"4069f918ccc312da86db6c51205fc6c6eaabb116","modified":1533300374264},{"_id":"themes/next/source/css/_variables/base.styl","hash":"0fb1d4e39aa962b9a5a6db0404094f31dfa91007","modified":1533303072590},{"_id":"themes/next/source/css/_custom/custom.styl","hash":"82bdf484f6aa0ec32c5842f4f73b2cca7140b8b5","modified":1533301538755},{"_id":"themes/next/source/js/src/algolia-search.js","hash":"cb431b54ba9c692165a1f5a12e4c564a560f8058","modified":1533300374274},{"_id":"themes/next/source/js/src/bootstrap.js","hash":"0289031200c3d4c2bdd801ee10fff13bb2c353e4","modified":1533300374274},{"_id":"themes/next/source/js/src/affix.js","hash":"1b509c3b5b290a6f4607f0f06461a0c33acb69b1","modified":1533300374273},{"_id":"themes/next/source/js/src/exturl.js","hash":"a2a0f0de07e46211f74942a468f42ee270aa555c","modified":1533300374275},{"_id":"themes/next/source/js/src/hook-duoshuo.js","hash":"b35a7dc47b634197b93487cea8671a40a9fdffce","modified":1533300374275},{"_id":"themes/next/source/js/src/post-details.js","hash":"93a18271b4123dd8f94f09d1439b47c3c19a8712","modified":1533300374276},{"_id":"themes/next/source/js/src/js.cookie.js","hash":"1512c751d219577d338ac0780fb2bbd9075d5298","modified":1533300374275},{"_id":"themes/next/source/js/src/scroll-cookie.js","hash":"02cf91514e41200bc9df5d8bdbeb58575ec06074","modified":1533300374277},{"_id":"themes/next/source/js/src/motion.js","hash":"885176ed51d468f662fbf0fc09611f45c7e5a3b1","modified":1533300374276},{"_id":"themes/next/source/js/src/utils.js","hash":"b3e9eca64aba59403334f3fa821f100d98d40337","modified":1533300374278},{"_id":"themes/next/source/js/src/scrollspy.js","hash":"b7657be25fc52ec67c75ab5481bdcb483573338b","modified":1533300374278},{"_id":"themes/next/source/lib/fancybox/.bower.json","hash":"9be892a4e14e0da18ff9cb962c9ef71f163b1b22","modified":1533300374289},{"_id":"themes/next/source/lib/fancybox/.gitattributes","hash":"672d3b5767e0eacd83bb41b188c913f2cf754793","modified":1533300374289},{"_id":"themes/next/source/lib/fastclick/.bower.json","hash":"bf3eef9d647cd7c9b62feda3bc708c6cdd7c0877","modified":1533300374297},{"_id":"themes/next/source/lib/fastclick/bower.json","hash":"a9b3ee1e4db71a0e4ea6d5bed292d176dd68b261","modified":1533300374298},{"_id":"themes/next/source/lib/fastclick/README.md","hash":"68a9b9d53126405b0fa5f3324f1fb96dbcc547aa","modified":1533300374298},{"_id":"themes/next/source/lib/canvas-ribbon/canvas-ribbon.js","hash":"b02737510e9b89aeed6b54f89f602a9c24b06ff2","modified":1533300374288},{"_id":"themes/next/source/lib/fastclick/LICENSE","hash":"6f474ea75c42442da7bbcf2e9143ce98258efd8d","modified":1533300374297},{"_id":"themes/next/source/lib/font-awesome/.bower.json","hash":"b4aefc910578d76b267e86dfffdd5121c8db9aec","modified":1533300374300},{"_id":"themes/next/source/lib/algolia-instant-search/instantsearch.min.css","hash":"90ef19edc982645b118b095615838d9c5eaba0de","modified":1533300374284},{"_id":"themes/next/source/lib/canvas-nest/canvas-nest.min.js","hash":"0387e75e23b1db108a755073fe52a0d03eb391a7","modified":1533300374287},{"_id":"themes/next/source/lib/font-awesome/.gitignore","hash":"03ddbf76c1dd1afb93eed0b670d2eee747472ef1","modified":1533300374300},{"_id":"themes/next/source/lib/font-awesome/HELP-US-OUT.txt","hash":"ee33b2798b1e714b904d663436c6b3521011d1fa","modified":1533300374301},{"_id":"themes/next/source/lib/font-awesome/bower.json","hash":"71e7183634dc1b9449f590f15ebd7201add22ca7","modified":1533300374301},{"_id":"themes/next/source/lib/font-awesome/.npmignore","hash":"c31ff06a740955e44edd4403902e653ccabfd4db","modified":1533300374301},{"_id":"themes/next/source/lib/needsharebutton/font-embedded.css","hash":"14264a210bf94232d58d7599ea2ba93bfa4fb458","modified":1533300374318},{"_id":"themes/next/source/lib/jquery_lazyload/.bower.json","hash":"90fa628f156d8045357ff11eaf32e61abacf10e8","modified":1533300374315},{"_id":"themes/next/source/lib/needsharebutton/needsharebutton.css","hash":"e33aa8fa48b6639d8d8b937d13261597dd473b3a","modified":1533300374318},{"_id":"themes/next/source/lib/needsharebutton/needsharebutton.js","hash":"2ce5f3bf15c523b9bfc97720d8884bb22602a454","modified":1533300374319},{"_id":"themes/next/source/lib/jquery_lazyload/CONTRIBUTING.md","hash":"4ded6fee668544778e97e38c2b211fc56c848e77","modified":1533300374315},{"_id":"themes/next/source/lib/jquery_lazyload/bower.json","hash":"e0acf1db27b0cc16128a59c46db1db406b5c4c58","modified":1533300374316},{"_id":"themes/next/source/lib/jquery_lazyload/README.md","hash":"b930297cb98b8e1dbd5abe9bc1ed9d5935d18ce8","modified":1533300374316},{"_id":"themes/next/source/lib/jquery_lazyload/jquery.scrollstop.js","hash":"bf773ad48a0b9aa77681a89d7569eefc0f7b7b18","modified":1533300374317},{"_id":"themes/next/source/lib/jquery_lazyload/jquery.lazyload.js","hash":"f4a570908f6c89c6edfb1c74959e733eaadea4f2","modified":1533300374316},{"_id":"themes/next/source/lib/pace/pace-theme-barber-shop.min.css","hash":"ee0d51446cb4ffe1bb96bd7bc8c8e046dddfcf46","modified":1533300374319},{"_id":"themes/next/source/lib/pace/pace-theme-big-counter.min.css","hash":"5b561dc328af4c4d512e20a76fe964d113a32ba8","modified":1533300374320},{"_id":"themes/next/source/lib/pace/pace-theme-center-atom.min.css","hash":"dcf79c24fe5350fb73d8038573a104e73639e9d3","modified":1533300374321},{"_id":"themes/next/source/lib/pace/pace-theme-bounce.min.css","hash":"f6bdb9a785b7979dd8ec5c60e278af955ef1e585","modified":1533300374320},{"_id":"themes/next/source/lib/pace/pace-theme-center-circle.min.css","hash":"a4066769c78affbfbc5e30a600e2c7862cd532e0","modified":1533300374321},{"_id":"themes/next/source/lib/pace/pace-theme-center-radar.min.css","hash":"ab7cba998bf4c03b13df342bf43647fa4f419783","modified":1533300374321},{"_id":"themes/next/source/lib/pace/pace-theme-fill-left.min.css","hash":"0bec1e235a4a2cccda3f993b205424e1441a44ae","modified":1533300374323},{"_id":"themes/next/source/lib/pace/pace-theme-center-simple.min.css","hash":"67f44c947548bd4d77e7590d3f59e236cbf9e98a","modified":1533300374322},{"_id":"themes/next/source/lib/pace/pace-theme-corner-indicator.min.css","hash":"b3c64c973f31884e3d8145989476707333406b9a","modified":1533300374322},{"_id":"themes/next/source/lib/pace/pace-theme-flash.min.css","hash":"13ace22c40312d7bbd8d9c1e50eff897a7a497d8","modified":1533300374323},{"_id":"themes/next/source/lib/pace/pace-theme-minimal.min.css","hash":"9cd783cceb8a191f3c8b5d81f7a430ecc3e489d3","modified":1533300374324},{"_id":"themes/next/source/lib/pace/pace-theme-loading-bar.min.css","hash":"7ee28875dfc1230d76c537f6605766e8d4011e9f","modified":1533300374323},{"_id":"themes/next/source/lib/pace/pace-theme-mac-osx.min.css","hash":"9f2e7b51b084da407863826b25265b31150b3821","modified":1533300374324},{"_id":"themes/next/source/lib/velocity/.bower.json","hash":"63da5e80ebb61bb66a2794d5936315ca44231f0c","modified":1533300374331},{"_id":"themes/next/source/lib/pace/pace.min.js","hash":"8aaa675f577d5501f5f22d5ccb07c2b76310b690","modified":1533300374325},{"_id":"themes/next/source/lib/velocity/bower.json","hash":"92d92860418c4216aa59eb4cb4a556290a7ad9c3","modified":1533300374332},{"_id":"themes/next/source/lib/velocity/velocity.ui.js","hash":"dbbfb50f6502f6b81dcc9fee7b31f1e812da3464","modified":1533300374335},{"_id":"themes/next/source/lib/jquery/.bower.json","hash":"865d6c1328ab209a4376b9d2b7a7824369565f28","modified":1533300374313},{"_id":"themes/next/source/lib/velocity/velocity.min.js","hash":"bf172816a9c57f9040e3d19c24e181a142daf92b","modified":1533300374334},{"_id":"themes/next/source/lib/velocity/velocity.ui.min.js","hash":"dde584994ac13dc601836e86f4cf490e418d9723","modified":1533300374335},{"_id":"themes/next/source/lib/three/canvas_sphere.min.js","hash":"46a50b91c98b639c9a2b9265c5a1e66a5c656881","modified":1533300374326},{"_id":"themes/next/source/lib/three/canvas_lines.min.js","hash":"2d9a9f38c493fdf7c0b833bb9184b6a1645c11b2","modified":1533300374325},{"_id":"source/image/Android/ConstraintLayout/class_summary.png","hash":"bacc251f6d6362b778ecb42ca46f90d7d2f1cb4d","modified":1533822507990},{"_id":"source/image/Android/ConstraintLayout/circular_positioning.png","hash":"0efa876d1e835634780c27a29372019b7607fe92","modified":1533822507989},{"_id":"themes/next/source/lib/three/three-waves.min.js","hash":"8148492dd49aa876d32bb7d5b728d3f5bf6f5074","modified":1533300374326},{"_id":"source/image/Beware_of_ snakes.jpg","hash":"6471f822ad10cd2b645437afcc5ef9543dfefdb7","modified":1498985337283},{"_id":"source/image/PHBS.jpg","hash":"fd6af187cc0c19dc4ca27eb6d54715caae02ee2c","modified":1498985337303},{"_id":"source/image/Restaurant.jpg","hash":"f47251131db6455760f60fabadb37c4d8992dea3","modified":1498985337308},{"_id":"source/image/Meal3.jpg","hash":"3baff3b15acb200de20f59b8853c3fc43b13d625","modified":1498985337301},{"_id":"source/image/https/https2.png","hash":"c9a150ace685bdec56d6d7d41d367f07a350f888","modified":1522558632971},{"_id":"themes/next/source/lib/jquery/index.js","hash":"17a740d68a1c330876c198b6a4d9319f379f3af2","modified":1533300374314},{"_id":"source/image/Android/ConstraintLayout/constraint_layout_placeholder_preview.png","hash":"f17ac66629c06a4a6d1c3f074c1c8b5e9b736e62","modified":1533907446765},{"_id":"source/image/Android/ConstraintLayout/guideLine_declaration.png","hash":"dbd4e2973a3f19d2db85dee006655866697f3bec","modified":1533907446766},{"_id":"source/image/Meal1.jpg","hash":"f5f734d0074ca071cafa382cd7bf9a5c1f76a748","modified":1498985337297},{"_id":"source/image/Meal2.jpg","hash":"766f4c7d3440f9fa6a891560d02f68d6a709aa7e","modified":1498985337299},{"_id":"source/image/South_Gate.jpg","hash":"0b5a877b30bd09f77bdb872ec98cee524ba1dc1a","modified":1498985337311},{"_id":"source/image/gaode/install_run_bug.png","hash":"ee21105d192d216289fc6f11717b262cc60f4064","modified":1498985337359},{"_id":"themes/next/layout/_third-party/search/algolia-search/assets.swig","hash":"218cc936ba3518a3591b2c9eda46bc701edf7710","modified":1533300374209},{"_id":"themes/next/source/css/_common/components/comments.styl","hash":"ff4489cd582f518bba6909a301ac1292a38b4e96","modified":1533300374221},{"_id":"themes/next/source/css/_common/components/back-to-top.styl","hash":"237d185ac62ec9877e300947fa0109c44fb8db19","modified":1533300374220},{"_id":"themes/next/source/css/_common/components/components.styl","hash":"7ad4081466b397e2a6204141bb7768b7c01bd93c","modified":1533300374221},{"_id":"themes/next/layout/_third-party/search/algolia-search/dom.swig","hash":"2530de0f3125a912756f6c0e9090cd012134a4c5","modified":1533300374209},{"_id":"themes/next/source/css/_common/components/back-to-top-sidebar.styl","hash":"8f86f694c0749a18ab3ad6f6df75466ca137a4bc","modified":1533300374220},{"_id":"themes/next/source/css/_common/components/buttons.styl","hash":"8b32928686c327151e13d3ab100157f9a03cd59f","modified":1533300374221},{"_id":"themes/next/source/css/_common/components/tag-cloud.styl","hash":"6eb4bcc3056bd279d000607e8b4dad50d368ca69","modified":1533300374238},{"_id":"themes/next/source/css/_common/components/pagination.styl","hash":"4f2801fc4cf3f31bf2069f41db8c6ce0e3da9e39","modified":1533300374228},{"_id":"themes/next/source/css/_common/outline/outline.styl","hash":"12662536c7a07fff548abe94171f34b768dd610f","modified":1533300374246},{"_id":"themes/next/source/css/_common/scaffolding/base.styl","hash":"24ee4b356ff55fc6e58f26a929fa07750002cf29","modified":1533300374247},{"_id":"themes/next/source/css/_common/scaffolding/scaffolding.styl","hash":"a17e2b871a335f290afb392a08f94fd35f59c715","modified":1533300374249},{"_id":"themes/next/source/css/_common/scaffolding/mobile.styl","hash":"91ca75492cd51f2553f4d294ed2f48239fcd55eb","modified":1533300374248},{"_id":"themes/next/source/css/_common/scaffolding/helpers.styl","hash":"1da5c800d025345f212a3bf1be035060f4e5e6ed","modified":1533300374247},{"_id":"themes/next/source/css/_schemes/Mist/_base.styl","hash":"25d5e45a355ee2093f3b8b8eeac125ebf3905026","modified":1533300374254},{"_id":"themes/next/source/css/_schemes/Mist/_logo.styl","hash":"b1025c421406d2c24cc92a02ae28c1915b01e240","modified":1533300374254},{"_id":"themes/next/source/css/_common/scaffolding/tables.styl","hash":"ea9069645696f86c5df64208490876fe150c8cae","modified":1533300374249},{"_id":"themes/next/source/css/_schemes/Mist/_header.styl","hash":"d0bfd1bef988c76f7d7dd72d88af6f0908a8b0db","modified":1533300374254},{"_id":"themes/next/source/css/_common/scaffolding/normalize.styl","hash":"3f40e8a9fe8e7bd5cfc4cf4cbbbcb9539462e973","modified":1533300374248},{"_id":"themes/next/source/css/_schemes/Mist/_search.styl","hash":"09c965022c13b84ed8a661fee8ac2a6d550495ae","modified":1533300374255},{"_id":"themes/next/source/css/_schemes/Mist/_posts-expanded.styl","hash":"9c99034f8e00d47e978b3959f51eb4a9ded0fcc8","modified":1533300374255},{"_id":"themes/next/source/css/_schemes/Mist/_menu.styl","hash":"26666c1f472bf5f3fb9bc62081cca22b4de15ccb","modified":1533300374255},{"_id":"themes/next/source/css/_schemes/Pisces/_brand.styl","hash":"bce344d3a665b4c55230d2a91eac2ad16d6f32fd","modified":1533300374260},{"_id":"themes/next/source/css/_schemes/Pisces/_menu.styl","hash":"4642e30010af8b2b037f5b43146b10a934941958","modified":1533300374261},{"_id":"themes/next/source/css/_schemes/Gemini/index.styl","hash":"60fa84aa7731760f05f52dd7d8f79b5f74ac478d","modified":1533300374253},{"_id":"themes/next/source/css/_schemes/Mist/index.styl","hash":"9b913b73d31d21f057f97115ffab93cfa578b884","modified":1533300374256},{"_id":"themes/next/source/css/_schemes/Pisces/_layout.styl","hash":"416988dca389e6e2fdfa51fa7f4ee07eb53f82fb","modified":1533300374261},{"_id":"themes/next/source/css/_schemes/Pisces/_posts.styl","hash":"1f6e2ce674735269599acc6d77b3ea18d31967fc","modified":1533300374261},{"_id":"themes/next/source/css/_schemes/Pisces/_sidebar.styl","hash":"ad2dcedf393ed1f3f5afd2508d24969c916d02fc","modified":1533300374262},{"_id":"themes/next/source/css/_schemes/Muse/_layout.styl","hash":"31127dcbf4c7b4ada53ffbf1638b5fe325b7cbc0","modified":1533300374258},{"_id":"themes/next/source/css/_schemes/Pisces/index.styl","hash":"86197902dfd3bededba10ba62b8f9f22e0420bde","modified":1533300374262},{"_id":"themes/next/source/css/_schemes/Muse/_logo.styl","hash":"748dbfbf9c08e719ddc775958003c64b00d39dab","modified":1533300374258},{"_id":"themes/next/source/css/_schemes/Muse/_menu.styl","hash":"a98ad885ee4f48d85b2578a0b9c2bbf166e96733","modified":1533300405478},{"_id":"themes/next/source/css/_schemes/Muse/index.styl","hash":"5dbc0d0c897e46760e5dbee416530d485c747bba","modified":1533300374259},{"_id":"themes/next/source/css/_schemes/Muse/_search.styl","hash":"09c965022c13b84ed8a661fee8ac2a6d550495ae","modified":1533300374259},{"_id":"themes/next/source/js/src/schemes/pisces.js","hash":"f1d0b5d7af32c423eaa8bb93ab6a0b45655645dc","modified":1533300374277},{"_id":"themes/next/source/lib/Han/dist/han.css","hash":"6c26cdb36687d4f0a11dabf5290a909c3506be5c","modified":1533300374282},{"_id":"themes/next/source/lib/fancybox/source/blank.gif","hash":"2daeaa8b5f19f0bc209d976c02bd6acb51b00b0a","modified":1533300374290},{"_id":"themes/next/source/lib/fancybox/source/fancybox_loading@2x.gif","hash":"273b123496a42ba45c3416adb027cd99745058b0","modified":1533300374291},{"_id":"themes/next/source/lib/Han/dist/han.min.css","hash":"6d586bfcfb7ae48f1b12f76eec82d3ad31947501","modified":1533300374283},{"_id":"themes/next/source/lib/Han/dist/han.min.js","hash":"16b03db23a52623348f37c04544f2792032c1fb6","modified":1533300374284},{"_id":"themes/next/source/lib/fancybox/source/fancybox_loading.gif","hash":"1a755fb2599f3a313cc6cfdb14df043f8c14a99c","modified":1533300374290},{"_id":"themes/next/source/lib/fancybox/source/fancybox_overlay.png","hash":"b3a4ee645ba494f52840ef8412015ba0f465dbe0","modified":1533300374291},{"_id":"themes/next/source/lib/fancybox/source/fancybox_sprite@2x.png","hash":"30c58913f327e28f466a00f4c1ac8001b560aed8","modified":1533300374292},{"_id":"themes/next/source/lib/fancybox/source/fancybox_sprite.png","hash":"17df19f97628e77be09c352bf27425faea248251","modified":1533300374291},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.css","hash":"82f33ad0842aa9c154d029e0dada2497d4eb1d57","modified":1533300374295},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.pack.js","hash":"ae6318aeb62ad4ce7a7e9a4cdacd93ffb004f0fb","modified":1533300374296},{"_id":"themes/next/source/lib/fastclick/lib/fastclick.min.js","hash":"2cae0f5a6c5d6f3cb993015e6863f9483fc4de18","modified":1533300374299},{"_id":"themes/next/source/lib/fastclick/lib/fastclick.js","hash":"1d6aeda0480d0e4cb6198edf7719d601d4ae2ccc","modified":1533300374299},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.js","hash":"d71602cbca33b9ecdb7ab291b7f86a49530f3601","modified":1533300374296},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.min.css","hash":"88af80502c44cd52ca81ffe7dc7276b7eccb06cf","modified":1533300374303},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css.map","hash":"1573904b82807abbb32c97a3632c6c6808eaac50","modified":1533300374303},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css","hash":"3655f1fdf1e584c4d8e8d39026093ca306a5a341","modified":1533300374302},{"_id":"source/image/Android/ConstraintLayout/merge_constraint_layout_placeholder_preview.png","hash":"9508b126ccbd40d09b070e0fd1222ad09a7f81d2","modified":1533907446770},{"_id":"themes/next/source/lib/ua-parser-js/dist/ua-parser.pack.js","hash":"a817b6c158cbc5bab3582713de9fe18a18a80552","modified":1533300374331},{"_id":"themes/next/source/lib/ua-parser-js/dist/ua-parser.min.js","hash":"41ea797c68dbcff2f6fb3aba1d1043a22e7cc0f6","modified":1533300374330},{"_id":"source/image/Android/hook/guide.jpg","hash":"c797ba70666ef0e0a006d6021663e61ca7530fb8","modified":1533561346777},{"_id":"source/image/gaode/walk_route_bug.png","hash":"22720160257e40bed07585da07f4b4df71291087","modified":1498985337369},{"_id":"themes/next/source/lib/Han/dist/han.js","hash":"4ac683b2bc8531c84d98f51b86957be0e6f830f3","modified":1533300374283},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff","hash":"28b782240b3e76db824e12c02754a9731a167527","modified":1533300374312},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff2","hash":"d6f48cba7d076fb6f2fd6ba993a75b9dc1ecbf0c","modified":1533300374313},{"_id":"themes/next/source/lib/velocity/velocity.js","hash":"4237c6e9d59da349639de20e559e87c2c0218cfd","modified":1533300374333},{"_id":"source/image/Android/ConstraintLayout/guideline_relative.png","hash":"f9a3caa63632e62fef3e294bff545121217d1ff7","modified":1533907446768},{"_id":"source/image/hexo/hexo_hello.png","hash":"c8b8b02d796afa5fdfa21d2aaf2f180bc9995863","modified":1498985337388},{"_id":"source/image/https/https3.png","hash":"ed1877c7deb36ab52f9df1e7224fbe8cf1670817","modified":1522558752030},{"_id":"themes/next/source/css/_common/components/highlight/diff.styl","hash":"167986d0f649516671ddf7193eebba7b421cd115","modified":1533300374225},{"_id":"themes/next/source/css/_common/components/header/header.styl","hash":"53cde051e0337f4bf42fb8d6d7a79fa3fa6d4ef2","modified":1533300374223},{"_id":"themes/next/source/css/_common/components/highlight/highlight.styl","hash":"50450d9fdc8a2b2be8cfca51e3e1a01ffd636c0b","modified":1533300374225},{"_id":"themes/next/source/css/_common/components/header/headerband.styl","hash":"d63e0cacc53dd375fcc113465a4328c59ff5f2c1","modified":1533300374223},{"_id":"themes/next/source/css/_common/components/header/site-nav.styl","hash":"1727702eac5d326b5c81a667944a245016668231","modified":1533300374224},{"_id":"themes/next/source/css/_common/components/highlight/theme.styl","hash":"7fe4d4d656e86276c17cb4e48a560cb6a4def703","modified":1533300374225},{"_id":"themes/next/source/css/_common/components/post/post-copyright.styl","hash":"caf263d1928496688c0e1419801eafd7e6919ce5","modified":1533300374229},{"_id":"themes/next/source/css/_common/components/header/menu.styl","hash":"1a0d059799a298fe17c49a44298d32cebde93785","modified":1533300374223},{"_id":"themes/next/source/css/_common/components/post/post-eof.styl","hash":"a200c0a1c5a895ac9dc41e0641a5dfcd766be99b","modified":1533300374230},{"_id":"themes/next/source/css/_common/components/header/site-meta.styl","hash":"0656e753f182c9f47fef7304c847b7587a85ef0d","modified":1533300374224},{"_id":"themes/next/source/css/_common/components/post/post-gallery.styl","hash":"cd9e214e502697f2f2db84eb721bac57a49b0fce","modified":1533300374230},{"_id":"themes/next/source/css/_common/components/post/post-collapse.styl","hash":"875cbe88d5c7f6248990e2beb97c9828920e7e24","modified":1533300374229},{"_id":"themes/next/source/css/_common/components/post/post-expand.styl","hash":"a6c6eb8adba0a090ad1f4b9124e866887f20d10d","modified":1533300374230},{"_id":"themes/next/source/css/_common/components/post/post-button.styl","hash":"62fbbd32cf5a99ae550c45c763a2c4813a138d01","modified":1533300374229},{"_id":"themes/next/source/css/_common/components/post/post-meta.styl","hash":"d0d7a5c90d62b685520d2b47fea8ba6019ff5402","modified":1533300374231},{"_id":"themes/next/source/css/_common/components/post/post-rtl.styl","hash":"b2495ae5e04dcca610aacadc47881d9e716cd440","modified":1533300374232},{"_id":"themes/next/source/css/_common/components/post/post-reward.styl","hash":"ca88ea6999a61fb905eb6e72eba5f92d4ee31e6e","modified":1533300374232},{"_id":"themes/next/source/css/_common/components/post/post-tags.styl","hash":"5a982d8ef3b3623ea5f59e63728990f5623c1b57","modified":1533300374232},{"_id":"themes/next/source/css/_common/components/post/post-nav.styl","hash":"27deb3d3a243d30022055dac7dad851024099a8b","modified":1533300374231},{"_id":"themes/next/source/css/_common/components/post/post-type.styl","hash":"01567edaea6978628aa5521a122a85434c418bfd","modified":1533300374233},{"_id":"themes/next/source/css/_common/components/pages/categories.styl","hash":"7fb593f90d74a99c21840679933b9ef6fdc16a61","modified":1533300374226},{"_id":"themes/next/source/css/_common/components/post/post-widgets.styl","hash":"7968343e41f8b94b318c36289dff1196c3eb1791","modified":1533300374233},{"_id":"themes/next/source/css/_common/components/pages/pages.styl","hash":"f9760ecf186954cee3ba4a149be334e9ba296b89","modified":1533300374227},{"_id":"themes/next/source/css/_common/components/pages/post-detail.styl","hash":"4e3838d7ac81d9ad133960f0f7ed58a44a015285","modified":1533300374227},{"_id":"themes/next/source/css/_common/components/post/post-title.styl","hash":"ccb34c52be8adba5996c6b94f9e723bd07d34c16","modified":1533300374233},{"_id":"themes/next/source/css/_common/components/pages/schedule.styl","hash":"8cf318644acc8b4978537c263290363e21c7f5af","modified":1533300374228},{"_id":"themes/next/source/css/_common/components/post/post.styl","hash":"89d6c3b697efc63de42afd2e89194b1be14152af","modified":1533300374234},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-author.styl","hash":"761eba9811b050b25d548cc0854de4824b41eb08","modified":1533300374235},{"_id":"themes/next/source/css/_common/components/pages/archive.styl","hash":"b6f3a06a94a6ee5470c956663164d58eda818a64","modified":1533300374226},{"_id":"themes/next/source/css/_common/components/footer/footer.styl","hash":"9f73c4696f0907aa451a855444f88fc0698fa472","modified":1533300374222},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-author-links.styl","hash":"39f04c4c7237a4e10acd3002331992b79945d241","modified":1533300374234},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-feed-link.styl","hash":"61f8cea3c01acd600e90e1bc2a07def405503748","modified":1533300374236},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-dimmer.styl","hash":"11c22f0fb3f6beb13e5a425ec064a4ff974c13b7","modified":1533300374236},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-blogroll.styl","hash":"8dd9a1c6f4f6baa00c2cf01837e7617120cf9660","modified":1533300374235},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-toc.styl","hash":"c8fe49a4bc014c24dead05b782a7082411a4abc5","modified":1533300374237},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-nav.styl","hash":"1153bb71edf253765145559674390e16dd67c633","modified":1533300374236},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar.styl","hash":"5ef6343835f484a2c0770bd1eb9cc443609e4c39","modified":1533300374237},{"_id":"themes/next/source/css/_common/components/tags/blockquote-center.styl","hash":"2fe76476432b31993338cb45cdb3b29a518b6379","modified":1533300374239},{"_id":"themes/next/source/css/_common/components/tags/full-image.styl","hash":"f825da191816eef69ea8efb498a7f756d5ebb498","modified":1533300374239},{"_id":"themes/next/source/css/_common/components/tags/exturl.styl","hash":"a3bdd71237afc112b2aa255f278cab6baeb25351","modified":1533300374239},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-toggle.styl","hash":"a1521d48bb06d8d703753f52a198baa197af7da2","modified":1533300374237},{"_id":"themes/next/source/css/_common/components/sidebar/site-state.styl","hash":"e71652d3216e289c8548b1ea2357822c1476a425","modified":1533300374238},{"_id":"themes/next/source/css/_common/components/tags/label.styl","hash":"2ab1322fe52ab5aafd49e68f5bd890e8380ee927","modified":1533300374240},{"_id":"themes/next/source/css/_common/components/tags/group-pictures.styl","hash":"2ad1a2a9bbf6742d1b0762c4c623b68113d1e0fe","modified":1533300374240},{"_id":"themes/next/source/css/_common/components/tags/note-modern.styl","hash":"b7076e58d647265ee0ad2b461fe8ce72c9373bc5","modified":1533300374241},{"_id":"themes/next/source/css/_common/components/tags/tabs.styl","hash":"154a87a32d2fead480d5e909c37f6c476671c5e6","modified":1533300374241},{"_id":"themes/next/source/css/_common/components/tags/tags.styl","hash":"b80604868e4f5cf20fccafd7ee415c20c804f700","modified":1533300374242},{"_id":"themes/next/source/css/_common/components/third-party/baidushare.styl","hash":"5dbeed535d63a50265d96b396a5440f9bb31e4ba","modified":1533300374243},{"_id":"themes/next/source/css/_common/components/tags/note.styl","hash":"9a409b798decdefdaf7a23f0b11004a8c27e82f3","modified":1533300374241},{"_id":"themes/next/source/css/_common/components/third-party/busuanzi-counter.styl","hash":"a6e7d698702c2e383dde3fde2abde27951679084","modified":1533300374243},{"_id":"themes/next/source/css/_common/components/third-party/han.styl","hash":"10599e16414a8b7a76c4e79e6617b5fe3d4d1adf","modified":1533300374244},{"_id":"themes/next/source/css/_common/components/third-party/gitment.styl","hash":"874278147115601d2abf15987f5f7a84ada1ac6b","modified":1533300374244},{"_id":"themes/next/source/css/_common/components/third-party/algolia-search.styl","hash":"bba4f3bdb7517cd85376df3e1209b570c0548c69","modified":1533300374242},{"_id":"themes/next/source/css/_common/components/third-party/jiathis.styl","hash":"15975ba7456b96916b1dbac448a1a0d2c38b8f3d","modified":1533300374245},{"_id":"themes/next/source/css/_common/components/third-party/duoshuo.styl","hash":"717cc7f82be9cc151e23a7678601ff2fd3a7fa1d","modified":1533300374243},{"_id":"themes/next/source/css/_common/components/third-party/needsharebutton.styl","hash":"28825ae15fa20ae3942cdaa7bcc1f3523ce59acc","modified":1533300374245},{"_id":"themes/next/source/css/_common/components/third-party/third-party.styl","hash":"9c8196394a89dfa40b87bf0019e80144365a9c93","modified":1533300374246},{"_id":"themes/next/source/css/_common/components/third-party/localsearch.styl","hash":"16087276945fa038f199692e3eabb1c52b8ea633","modified":1533300374245},{"_id":"themes/next/source/css/_schemes/Mist/outline/outline.styl","hash":"a07aa12cc36ac5c819670c2a3c17d07ed7a08986","modified":1533300374256},{"_id":"themes/next/source/css/_schemes/Mist/sidebar/sidebar-blogroll.styl","hash":"1f09be9bb38411f0629b58c3b23873589a6dbcaa","modified":1533300374257},{"_id":"themes/next/source/css/_schemes/Muse/sidebar/sidebar-blogroll.styl","hash":"1f09be9bb38411f0629b58c3b23873589a6dbcaa","modified":1533300374260},{"_id":"themes/next/source/lib/Han/dist/font/han-space.woff","hash":"7a635062b10bf5662ae1d218ba0980171005d060","modified":1533300374280},{"_id":"themes/next/source/lib/Han/dist/font/han-space.otf","hash":"07436f011b44051f61b8329c99de4bec64e86f4b","modified":1533300374279},{"_id":"themes/next/source/lib/Han/dist/font/han.woff","hash":"f38ff9b2eecaa17b50b66aa2dae87e9e7436d195","modified":1533300374281},{"_id":"themes/next/source/lib/Han/dist/font/han.otf","hash":"f1f6bb8f461f5672e000380195d3d2358a28494c","modified":1533300374280},{"_id":"themes/next/source/lib/Han/dist/font/han.woff2","hash":"623af3ed5423371ac136a4fe0e8cc7bb7396037a","modified":1533300374281},{"_id":"themes/next/source/lib/fancybox/source/helpers/fancybox_buttons.png","hash":"e385b139516c6813dcd64b8fc431c364ceafe5f3","modified":1533300374293},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-buttons.js","hash":"ee948b4489aedeb548a77c9e45d8c7c5732fd62d","modified":1533300374293},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-buttons.css","hash":"6394c48092085788a8c0ef72670b0652006231a1","modified":1533300374293},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-thumbs.css","hash":"b88b589f5f1aa1b3d87cc7eef34c281ff749b1ae","modified":1533300374294},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-thumbs.js","hash":"d22b1629cb23a6181bebb70d0cf653ffe4b835c8","modified":1533300374295},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-media.js","hash":"51139a4c79573d372a347ef01a493222a1eaf10a","modified":1533300374294},{"_id":"themes/next/source/lib/font-awesome/fonts/FontAwesome.otf","hash":"048707bc52ac4b6563aaa383bfe8660a0ddc908c","modified":1533300374305},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.ttf","hash":"13b1eab65a983c7a73bc7997c479d66943f7c6cb","modified":1533300374311},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.eot","hash":"d980c2ce873dc43af460d4d572d441304499f400","modified":1533300374307},{"_id":"source/image/Android/ConstraintLayout/wrap_content_enforcing_constraints1.png","hash":"461168f9cd41156034ef79b3fbf490a5eaf34340","modified":1533822507997},{"_id":"source/image/Android/ConstraintLayout/wrap_content_enforcing_constraints2.png","hash":"9eb1546f65c55b38ca0cda052d202570a7e49f9d","modified":1533822508000},{"_id":"themes/next/source/lib/algolia-instant-search/instantsearch.min.js","hash":"90a1b22129efc172e2dfcceeeb76bff58bc3192f","modified":1533300374287},{"_id":"source/image/Android/ConstraintLayout/wrap_content_enforcing_constraints3.png","hash":"35b3024591afba93d705e76f009c7163b6ea6a03","modified":1533822508004},{"_id":"themes/next/source/lib/three/three.min.js","hash":"26273b1cb4914850a89529b48091dc584f2c57b8","modified":1533300374329},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.svg","hash":"b5483b11f8ba213e733b5b8af9927a04fec996f6","modified":1533300374309},{"_id":"source/image/Android/IPC/create_aidl.png","hash":"c0d4389f033fcfca58d254de33aa4db77075bfe8","modified":1531552345878},{"_id":"source/image/Android/Coordinatorlayout/Coordinatorlayout.gif","hash":"a1d4f4e30f6c8266686671cabbf3cae390b97f8c","modified":1534865295048},{"_id":"source/image/Android/ConstraintLayout/constraintLayout_placeholderand_CoordinatorLayout.gif","hash":"5e8b09bbde456a46b90cb7afed87cce3c81d8734","modified":1533907446763}],"Category":[],"Data":[],"Page":[{"_content":"<!DOCTYPE HTML>\n<html>\n<head>\n  <meta http-equiv=\"content-type\" content=\"text/html;charset=utf-8;\"/>\n  <meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge,chrome=1\" />\n  <meta name=\"robots\" content=\"all\" />\n  <meta name=\"robots\" content=\"index,follow\"/>\n  <link rel=\"stylesheet\" type=\"text/css\" href=\"https://qzone.qq.com/gy/404/style/404style.css\">\n</head>\n<body>\n  <script type=\"text/plain\" src=\"http://www.qq.com/404/search_children.js\"\n          charset=\"utf-8\" homePageUrl=\"/\"\n          homePageName=\"回到我的主页\">\n  </script>\n  <script src=\"https://qzone.qq.com/gy/404/data.js\" charset=\"utf-8\"></script>\n  <script src=\"https://qzone.qq.com/gy/404/page.js\" charset=\"utf-8\"></script>\n</body>\n</html>","source":"404.html","raw":"<!DOCTYPE HTML>\n<html>\n<head>\n  <meta http-equiv=\"content-type\" content=\"text/html;charset=utf-8;\"/>\n  <meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge,chrome=1\" />\n  <meta name=\"robots\" content=\"all\" />\n  <meta name=\"robots\" content=\"index,follow\"/>\n  <link rel=\"stylesheet\" type=\"text/css\" href=\"https://qzone.qq.com/gy/404/style/404style.css\">\n</head>\n<body>\n  <script type=\"text/plain\" src=\"http://www.qq.com/404/search_children.js\"\n          charset=\"utf-8\" homePageUrl=\"/\"\n          homePageName=\"回到我的主页\">\n  </script>\n  <script src=\"https://qzone.qq.com/gy/404/data.js\" charset=\"utf-8\"></script>\n  <script src=\"https://qzone.qq.com/gy/404/page.js\" charset=\"utf-8\"></script>\n</body>\n</html>","date":"2018-08-04T16:36:58.726Z","updated":"2018-08-04T16:36:58.726Z","path":"404.html","title":"","comments":1,"layout":"page","_id":"cjl3vbtnt0000isdg8h41d89y","content":"<!DOCTYPE HTML>\n<html>\n<head>\n  <meta http-equiv=\"content-type\" content=\"text/html;charset=utf-8;\">\n  <meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge,chrome=1\">\n  <meta name=\"robots\" content=\"all\">\n  <meta name=\"robots\" content=\"index,follow\">\n  <link rel=\"stylesheet\" type=\"text/css\" href=\"https://qzone.qq.com/gy/404/style/404style.css\">\n</head>\n<body>\n  <script type=\"text/plain\" src=\"http://www.qq.com/404/search_children.js\" charset=\"utf-8\" homepageurl=\"/\" homepagename=\"回到我的主页\">\n  </script>\n  <script src=\"https://qzone.qq.com/gy/404/data.js\" charset=\"utf-8\"></script>\n  <script src=\"https://qzone.qq.com/gy/404/page.js\" charset=\"utf-8\"></script>\n</body>\n</html>","excerpt":"","more":"<!DOCTYPE HTML>\n<html>\n<head>\n  <meta http-equiv=\"content-type\" content=\"text/html;charset=utf-8;\"/>\n  <meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge,chrome=1\" />\n  <meta name=\"robots\" content=\"all\" />\n  <meta name=\"robots\" content=\"index,follow\"/>\n  <link rel=\"stylesheet\" type=\"text/css\" href=\"https://qzone.qq.com/gy/404/style/404style.css\">\n</head>\n<body>\n  <script type=\"text/plain\" src=\"http://www.qq.com/404/search_children.js\"\n          charset=\"utf-8\" homePageUrl=\"/\"\n          homePageName=\"回到我的主页\">\n  </script>\n  <script src=\"https://qzone.qq.com/gy/404/data.js\" charset=\"utf-8\"></script>\n  <script src=\"https://qzone.qq.com/gy/404/page.js\" charset=\"utf-8\"></script>\n</body>\n</html>"},{"title":"categories","date":"2018-08-03T15:44:26.000Z","type":"categories","_content":"","source":"categories/index.md","raw":"---\ntitle: categories\ndate: 2018-08-03 23:44:26\ntype: \"categories\"\n---\n","updated":"2018-08-03T15:45:28.859Z","path":"categories/index.html","comments":1,"layout":"page","_id":"cjl3vbtpm0002isdgzf6lm7xf","content":"","excerpt":"","more":""},{"title":"tags","date":"2018-08-03T15:44:36.000Z","type":"tags","_content":"","source":"tags/index.md","raw":"---\ntitle: tags\ndate: 2018-08-03 23:44:36\ntype: \"tags\"\n---\n","updated":"2018-08-03T15:45:41.012Z","path":"tags/index.html","comments":1,"layout":"page","_id":"cjl3vbtpp0004isdggqmfdn9c","content":"","excerpt":"","more":""}],"Post":[{"title":"2016年国庆-在深圳","date":"2016-10-08T04:42:33.000Z","_content":"国庆之前,辞了工作,跑到深圳找妹子玩了几天.妹子在哈工大深圳校区读研究生,去了之后也没有出去逛,吃饭,图书馆,写作业,折腾hexo写博客.\n也就在校园里逛了一下,拍了几张照片.\n在深圳市南山区的大学城里面,好像是有清华北大哈工大三所研究生院校组成的,据说哈工大深研院开始招本科生了.\n<br/>\n<!-- more -->\n**南门** ,没去其他的门,就从这边进去的,别问为啥,近.\n ![南门](/image/South_Gate.jpg)\n<br/>\n **哈工大深研院的标志?**不知道是不是标志性建筑\n ![标志](/image/main_building.jpg)\n ![标志](/image/sign.jpg)\n<br/>\n **图书馆**,吐槽一下,图书馆的书好少.电梯的海报上面说是有电影放映,但是我们沉迷于学习无法自拔,理所当然的错过了.\n ![图书馆](/image/Library.jpg)\n<br/>\n **图书馆门口的植物标本**,我也不知道是啥,装作看懂的样子\n ![植物标本](/image/Library_Plant_specimen1.jpg)\n ![植物标本](/image/Library_Plant_specimen2.jpg)\n ![植物标本](/image/Library_Plant_specimen3.jpg)\n ![植物标本](/image/Library_Plant_specimen4.jpg)\n<br/>\n **食堂**,食堂的饭菜还是不错的,听说非学校人员也能在里面办卡,只是比学生买饭要贵40%.表示理解.\n![荔园餐厅](/image/Restaurant.jpg)\n![食堂饭](/image/Meal1.jpg)\n![食堂饭](/image/Meal2.jpg)\n![食堂饭](/image/Meal3.jpg)\n<br/>\n  **北大汇丰商学院**,就在图书馆旁边\n![北大汇丰商学院](/image/PHBS.jpg)\n![北大汇丰商学院](/image/PHBS1.jpg)\n<br/>\n**小树林里面有蛇**,晚上去吃饭的时候路过的小树林,里面真的有蛇,亲眼所见,大概有食指粗细,一尺来长,黑灰色.可惜没拍到.\n![小心有蛇](/image/Beware_of_ snakes.jpg)\n<br/>\n**清华大学深研院**,不知道是不是这么叫的,吃完晚饭去瞻仰了一下\n![清华大学深研院](/image/Tsinghua.jpg)\n<br/>\n 本打算去蹭课来着,但是看着妹子的作业就不想去了,我觉得我应该听不大懂.\n<hr/>\n 就这些,待了貌似有四五天的样子,然后就滚回北京找工作了.\n 以上.\n \n","source":"_posts/2016国庆.md","raw":"---\ntitle: 2016年国庆-在深圳\ndate: 2016-10-08 12:42:33\ntags: [乱七八糟]\n\n---\n国庆之前,辞了工作,跑到深圳找妹子玩了几天.妹子在哈工大深圳校区读研究生,去了之后也没有出去逛,吃饭,图书馆,写作业,折腾hexo写博客.\n也就在校园里逛了一下,拍了几张照片.\n在深圳市南山区的大学城里面,好像是有清华北大哈工大三所研究生院校组成的,据说哈工大深研院开始招本科生了.\n<br/>\n<!-- more -->\n**南门** ,没去其他的门,就从这边进去的,别问为啥,近.\n ![南门](/image/South_Gate.jpg)\n<br/>\n **哈工大深研院的标志?**不知道是不是标志性建筑\n ![标志](/image/main_building.jpg)\n ![标志](/image/sign.jpg)\n<br/>\n **图书馆**,吐槽一下,图书馆的书好少.电梯的海报上面说是有电影放映,但是我们沉迷于学习无法自拔,理所当然的错过了.\n ![图书馆](/image/Library.jpg)\n<br/>\n **图书馆门口的植物标本**,我也不知道是啥,装作看懂的样子\n ![植物标本](/image/Library_Plant_specimen1.jpg)\n ![植物标本](/image/Library_Plant_specimen2.jpg)\n ![植物标本](/image/Library_Plant_specimen3.jpg)\n ![植物标本](/image/Library_Plant_specimen4.jpg)\n<br/>\n **食堂**,食堂的饭菜还是不错的,听说非学校人员也能在里面办卡,只是比学生买饭要贵40%.表示理解.\n![荔园餐厅](/image/Restaurant.jpg)\n![食堂饭](/image/Meal1.jpg)\n![食堂饭](/image/Meal2.jpg)\n![食堂饭](/image/Meal3.jpg)\n<br/>\n  **北大汇丰商学院**,就在图书馆旁边\n![北大汇丰商学院](/image/PHBS.jpg)\n![北大汇丰商学院](/image/PHBS1.jpg)\n<br/>\n**小树林里面有蛇**,晚上去吃饭的时候路过的小树林,里面真的有蛇,亲眼所见,大概有食指粗细,一尺来长,黑灰色.可惜没拍到.\n![小心有蛇](/image/Beware_of_ snakes.jpg)\n<br/>\n**清华大学深研院**,不知道是不是这么叫的,吃完晚饭去瞻仰了一下\n![清华大学深研院](/image/Tsinghua.jpg)\n<br/>\n 本打算去蹭课来着,但是看着妹子的作业就不想去了,我觉得我应该听不大懂.\n<hr/>\n 就这些,待了貌似有四五天的样子,然后就滚回北京找工作了.\n 以上.\n \n","slug":"2016国庆","published":1,"updated":"2018-08-05T02:56:13.336Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjl3vbtpi0001isdgdc5x4sxa","content":"<p>国庆之前,辞了工作,跑到深圳找妹子玩了几天.妹子在哈工大深圳校区读研究生,去了之后也没有出去逛,吃饭,图书馆,写作业,折腾hexo写博客.<br>也就在校园里逛了一下,拍了几张照片.<br>在深圳市南山区的大学城里面,好像是有清华北大哈工大三所研究生院校组成的,据说哈工大深研院开始招本科生了.<br><br><br><a id=\"more\"></a><br><strong>南门</strong> ,没去其他的门,就从这边进去的,别问为啥,近.<br> <img src=\"/image/South_Gate.jpg\" alt=\"南门\"><br><br><br> <strong>哈工大深研院的标志?</strong>不知道是不是标志性建筑<br> <img src=\"/image/main_building.jpg\" alt=\"标志\"><br> <img src=\"/image/sign.jpg\" alt=\"标志\"><br><br><br> <strong>图书馆</strong>,吐槽一下,图书馆的书好少.电梯的海报上面说是有电影放映,但是我们沉迷于学习无法自拔,理所当然的错过了.<br> <img src=\"/image/Library.jpg\" alt=\"图书馆\"><br><br><br> <strong>图书馆门口的植物标本</strong>,我也不知道是啥,装作看懂的样子<br> <img src=\"/image/Library_Plant_specimen1.jpg\" alt=\"植物标本\"><br> <img src=\"/image/Library_Plant_specimen2.jpg\" alt=\"植物标本\"><br> <img src=\"/image/Library_Plant_specimen3.jpg\" alt=\"植物标本\"><br> <img src=\"/image/Library_Plant_specimen4.jpg\" alt=\"植物标本\"><br><br><br> <strong>食堂</strong>,食堂的饭菜还是不错的,听说非学校人员也能在里面办卡,只是比学生买饭要贵40%.表示理解.<br><img src=\"/image/Restaurant.jpg\" alt=\"荔园餐厅\"><br><img src=\"/image/Meal1.jpg\" alt=\"食堂饭\"><br><img src=\"/image/Meal2.jpg\" alt=\"食堂饭\"><br><img src=\"/image/Meal3.jpg\" alt=\"食堂饭\"><br><br><br>  <strong>北大汇丰商学院</strong>,就在图书馆旁边<br><img src=\"/image/PHBS.jpg\" alt=\"北大汇丰商学院\"><br><img src=\"/image/PHBS1.jpg\" alt=\"北大汇丰商学院\"><br><br><br><strong>小树林里面有蛇</strong>,晚上去吃饭的时候路过的小树林,里面真的有蛇,亲眼所见,大概有食指粗细,一尺来长,黑灰色.可惜没拍到.<br><img src=\"/image/Beware_of_ snakes.jpg\" alt=\"小心有蛇\"><br><br><br><strong>清华大学深研院</strong>,不知道是不是这么叫的,吃完晚饭去瞻仰了一下<br><img src=\"/image/Tsinghua.jpg\" alt=\"清华大学深研院\"><br><br><br> 本打算去蹭课来着,但是看着妹子的作业就不想去了,我觉得我应该听不大懂.</p>\n<p><hr><br> 就这些,待了貌似有四五天的样子,然后就滚回北京找工作了.<br> 以上.</p>\n","excerpt":"<p>国庆之前,辞了工作,跑到深圳找妹子玩了几天.妹子在哈工大深圳校区读研究生,去了之后也没有出去逛,吃饭,图书馆,写作业,折腾hexo写博客.<br>也就在校园里逛了一下,拍了几张照片.<br>在深圳市南山区的大学城里面,好像是有清华北大哈工大三所研究生院校组成的,据说哈工大深研院开始招本科生了.<br><br/><br>","more":"<br><strong>南门</strong> ,没去其他的门,就从这边进去的,别问为啥,近.<br> <img src=\"/image/South_Gate.jpg\" alt=\"南门\"><br><br/><br> <strong>哈工大深研院的标志?</strong>不知道是不是标志性建筑<br> <img src=\"/image/main_building.jpg\" alt=\"标志\"><br> <img src=\"/image/sign.jpg\" alt=\"标志\"><br><br/><br> <strong>图书馆</strong>,吐槽一下,图书馆的书好少.电梯的海报上面说是有电影放映,但是我们沉迷于学习无法自拔,理所当然的错过了.<br> <img src=\"/image/Library.jpg\" alt=\"图书馆\"><br><br/><br> <strong>图书馆门口的植物标本</strong>,我也不知道是啥,装作看懂的样子<br> <img src=\"/image/Library_Plant_specimen1.jpg\" alt=\"植物标本\"><br> <img src=\"/image/Library_Plant_specimen2.jpg\" alt=\"植物标本\"><br> <img src=\"/image/Library_Plant_specimen3.jpg\" alt=\"植物标本\"><br> <img src=\"/image/Library_Plant_specimen4.jpg\" alt=\"植物标本\"><br><br/><br> <strong>食堂</strong>,食堂的饭菜还是不错的,听说非学校人员也能在里面办卡,只是比学生买饭要贵40%.表示理解.<br><img src=\"/image/Restaurant.jpg\" alt=\"荔园餐厅\"><br><img src=\"/image/Meal1.jpg\" alt=\"食堂饭\"><br><img src=\"/image/Meal2.jpg\" alt=\"食堂饭\"><br><img src=\"/image/Meal3.jpg\" alt=\"食堂饭\"><br><br/><br>  <strong>北大汇丰商学院</strong>,就在图书馆旁边<br><img src=\"/image/PHBS.jpg\" alt=\"北大汇丰商学院\"><br><img src=\"/image/PHBS1.jpg\" alt=\"北大汇丰商学院\"><br><br/><br><strong>小树林里面有蛇</strong>,晚上去吃饭的时候路过的小树林,里面真的有蛇,亲眼所见,大概有食指粗细,一尺来长,黑灰色.可惜没拍到.<br><img src=\"/image/Beware_of_ snakes.jpg\" alt=\"小心有蛇\"><br><br/><br><strong>清华大学深研院</strong>,不知道是不是这么叫的,吃完晚饭去瞻仰了一下<br><img src=\"/image/Tsinghua.jpg\" alt=\"清华大学深研院\"><br><br/><br> 本打算去蹭课来着,但是看着妹子的作业就不想去了,我觉得我应该听不大懂.</p>\n<p><hr/><br> 就这些,待了貌似有四五天的样子,然后就滚回北京找工作了.<br> 以上.</p>"},{"title":"Android N 应用内更新","date":"2017-03-28T02:30:31.000Z","keywords":"应用内更新","_content":"继之前跪在Android M的动态权限之后，最近又跪在了Android N的`StrictMode`上了。所以啊，要对技术持有敬畏的态度。\n场景如下：\n我司内部员工使用的APP需要有应用内更新的功能，意思就是在应用内下载最新版本的应用并且调起安装界面。\n方案：由于每次从新打开app都需要重新登录，那就在登录界面加上检查更新的接口请求，后台对比当前版本App的VersionCode 和 数据库存储的VersionCode对比，如果需要更新，则返回最新版本软件的下载地址，前端进行下载安装。\n当前端解析出下载地址后，弹出提示框，下载或者取消。点击下载则开启线程下载，同时在界面上显示下载进度，下载完成后，调起安装界面进行安装。\n代码很简单，这里放出不涉及我司业务的代码：\n<!--more-->\n``` java\nprivate void downLoadAPK() {\n        downLoadThread = new Thread(new Runnable() {\n            @Override\n            public void run() {\n                try {\n                    URL url = new URL(downLoadUrl);\n\n                    HttpURLConnection conn = (HttpURLConnection) url\n                            .openConnection();\n                    conn.connect();\n                    int length = conn.getContentLength();\n                    InputStream is = conn.getInputStream();\n\n                    File file = new File(\"\");\n                    if (!file.exists()) {\n                        file.mkdir();\n                    }\n                    File apkFile = new File(saveFilePath);\n                    if (apkFile.exists()) {\n                        apkFile.delete();\n                    }\n                    FileOutputStream fos = new FileOutputStream(apkFile);\n\n                    int count = 0;\n                    byte buf[] = new byte[1024];\n\n                    // 点击取消就停止下载.\n                    while (!interceptFlag) {\n                        int numread = is.read(buf);\n                        count += numread;\n                        progress = (int) (((float) count / length) * 100);\n                        // 更新进度\n                        getHandler().sendEmptyMessage(DOWN_UPDATE);\n                        if (numread <= 0) {\n                            // 下载完成通知安装\n                            getHandler().sendEmptyMessage(DOWN_OVER);\n                            interceptFlag = false;\n                        }\n                        fos.write(buf, 0, numread);\n                    }\n                    fos.close();\n                    is.close();\n                } catch (Exception e) {\n                    e.printStackTrace();\n                }\n\n            }\n        });\n        downLoadThread.start();\n    }\n```\n以上为下载文件的代码，逻辑很简单，起一个新线程，使用HttpURLConnection进行文件下载。\n``` java\n    private void installAPK(String filePath) {\n        File apkFile = new File(filePath);\n        Intent intent = new Intent(Intent.ACTION_VIEW);\n        if (!apkFile.exists()) {\n            return;\n        }\n        intent.setDataAndType(Uri.fromFile(apkFile), \"application/vnd.android.package-archive\");\n        context.startActivity(intent);\n    }\n```\n以上代码是刚开始写的安装软件的代码，在Android N 以下运行正常，但是在Android N上却爆出了如下错误，\n``` java\nandroid.os.FileUriExposedException: file: exposed beyond app through Intent.getData()\n\tat android.os.StrictMode.onFileUriExposed(StrictMode.java:1799)\n\tat android.net.Uri.checkFileUriExposed(Uri.java:2346)\n\tat android.content.Intent.prepareToLeaveProcess(Intent.java:8949)\n\tat android.content.Intent.prepareToLeaveProcess(Intent.java:8908)\n\tat android.app.Instrumentation.execStartActivity(Instrumentation.java:1519)\n\tat android.app.ContextImpl.startActivity(ContextImpl.java:829)\n\tat android.app.ContextImpl.startActivity(ContextImpl.java:806)\n\tat android.content.ContextWrapper.startActivity(ContextWrapper.java:366)\n\tat com.mmuu.travel.service.ui.LoginFrg.installAPK(LoginFrg.java:349)\n\tat com.mmuu.travel.service.ui.LoginFrg.access$200(LoginFrg.java:66)\n\tat com.mmuu.travel.service.ui.LoginFrg$1.onFinish(LoginFrg.java:134)\n\tat android.os.CountDownTimer$1.handleMessage(CountDownTimer.java:127)\n\tat android.os.Handler.dispatchMessage(Handler.java:102)\n\tat android.os.Looper.loop(Looper.java:154)\n\tat android.app.ActivityThread.main(ActivityThread.java:6114)\n\tat java.lang.reflect.Method.invoke(Native Method)\n\tat com.android.internal.os.ZygoteInit$MethodAndArgsCaller.run(ZygoteInit.java:874)\n\tat com.android.internal.os.ZygoteInit.main(ZygoteInit.java:764)\n```\n网上搜了一下，是Android N在权限上做了一些修改：[参考链接](https://developer.android.google.cn/about/versions/nougat/android-7.0-changes.html) https://developer.android.google.cn/about/versions/nougat/android-7.0-changes.html\n>系统权限更改\n为了提高私有文件的安全性，面向 Android 7.0 或更高版本的应用私有目录被限制访问　(0700)。此设置可防止私有文件的元数据泄漏，如它们的大小或存在性。此权限更改有多重副作用：\n私有文件的文件权限不应再由所有者放宽，为使用 MODE_WORLD_READABLE 和/或 MODE_WORLD_WRITEABLE 而进行的此类尝试将触发 SecurityException。\n>>注：迄今为止，这种限制尚不能完全执行。应用仍可能使用原生 API 或 File API 来修改它们的私有目录权限。但是，我们强烈反对放宽私有目录的权限。\n\n>传递软件包网域外的 file:// URI 可能给接收器留下无法访问的路径。因此，尝试传递 file:// URI 会触发 FileUriExposedException。分享私有文件内容的推荐方法是使用 FileProvider。\nDownloadManager 不再按文件名分享私人存储的文件。旧版应用在访问 COLUMN_LOCAL_FILENAME 时可能出现无法访问的路径。面向 Android 7.0 或更高版本的应用在尝试访问 COLUMN_LOCAL_FILENAME 时会触发 SecurityException。通过使用 DownloadManager.Request.setDestinationInExternalFilesDir() 或 DownloadManager.Request.setDestinationInExternalPublicDir() 将下载位置设置为公共位置的旧版应用仍可以访问 COLUMN_LOCAL_FILENAME 中的路径，但是我们强烈反对使用这种方法。对于由 DownloadManager 公开的文件，首选的访问方式是使用ContentResolver.openFileDescriptor()。\n\n解决方案：\n1. FileProvider\n1.1 在mainfest中加入FileProvider注册\n``` xml\n<application>\n     <provider\n         android:authorities=\"你的应用名.fileprovider\"\n         android:name=\"android.support.v4.content.FileProvider\"\n         android:grantUriPermissions=\"true\"\n         android:exported=\"false\">\n         <meta-data\n           android:name=\"android.support.FILE_PROVIDER_PATHS\"\n           android:resource=\"@xml/filepaths\"/>\n    </provider>\n\n</application>\n```\n1.2 在`res`文件夹下新建`xml`文件夹，在`xml`文件夹中新建`filepaths`文件，这个文件名字和上面的 Android:resource后面的名字要一致\n编辑该文件：\n``` xml\n<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<paths>\n    <external-path\n        name=\"external_storage_root\"\n        path=\"\" />\n</paths>\n```\n1.3 修改安装代码\n``` java\nprivate void installAPK(String filePath) {\n        File apkFile = new File(filePath);\n        Intent intent = new Intent(Intent.ACTION_VIEW);\n        if (!apkFile.exists()) {\n            return;\n        }\n\n        if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.N) {\n            intent.setFlags(Intent.FLAG_GRANT_READ_URI_PERMISSION);\n            Uri contentUri = FileProvider.getUriForFile(context, BuildConfig.APPLICATION_ID + \".fileProvider\", apkFile);\n            intent.setDataAndType(contentUri, \"application/vnd.android.package-archive\");\n        } else {\n            intent.setDataAndType(Uri.fromFile(apkFile), \"application/vnd.android.package-archive\");\n        }\n        getActivity().getApplicationContext().startActivity(intent);\n        context.finish();\n    }\n```\n首先判断设备的Android版本，N或者N以上使用`FileProvider`进行安装，N一下还是原来的方式。注意调用startActivity要使用ApplicationContext，使用Activity.this会报错。\n2. 使用DownloadManager\n``` java\npublic class ApkDownLoad {\n\n    public static final String DOWNLOAD_FOLDER_NAME = getLocalForderPath();\n    public static final String DOWNLOAD_FILE_NAME = \"XXX.apk\";\n    public static final String APK_DOWNLOAD_ID = \"apkDownloadId\";\n    private Context context;\n    private String url;\n    private String notificationTitle;\n    private String notificationDescription;\n\n    private DownloadManager downloadManager;\n    private CompleteReceiver completeReceiver;\n\n    /**\n     * @param context\n     * @param url                     下载apk的url\n     * @param notificationTitle       通知栏标题\n     * @param notificationDescription 通知栏描述\n     */\n    public ApkDownLoad(Context context, String url, String notificationTitle,\n                       String notificationDescription) {\n        super();\n        this.context = context;\n        this.url = url;\n        this.notificationTitle = notificationTitle;\n        this.notificationDescription = notificationDescription;\n        downloadManager = (DownloadManager) context\n                .getSystemService(Context.DOWNLOAD_SERVICE);\n        completeReceiver = new CompleteReceiver();\n\n        /** register download success broadcast **/\n        context.registerReceiver(completeReceiver, new IntentFilter(\n                DownloadManager.ACTION_DOWNLOAD_COMPLETE));\n    }\n\n    public void execute() {\n\n        // 清除已下载的内容重新下载\n        long downloadId = UpdateUtils.getLong(context, APK_DOWNLOAD_ID);\n        if (downloadId != -1) {\n            downloadManager.remove(downloadId);\n            UpdateUtils.removeSharedPreferenceByKey(context, APK_DOWNLOAD_ID);\n        }\n        Request request = new Request(Uri.parse(url));\n        // 设置Notification中显示的文字\n        request.setTitle(notificationTitle);\n        request.setDescription(notificationDescription);\n        // 设置可用的网络类型\n        request.setAllowedNetworkTypes(Request.NETWORK_MOBILE\n                | Request.NETWORK_WIFI);\n        // 设置状态栏中显示Notification\n        request.setNotificationVisibility(DownloadManager.Request.VISIBILITY_VISIBLE_NOTIFY_COMPLETED);\n        // 不显示下载界面\n        request.setVisibleInDownloadsUi(false);\n        // 设置下载后文件存放的位置\n        File folder = Environment\n                .getExternalStoragePublicDirectory(DOWNLOAD_FOLDER_NAME);\n        if (!folder.exists() || !folder.isDirectory()) {\n            folder.mkdirs();\n        }\n        // 设置下载文件的保存路径\n        request.setDestinationInExternalPublicDir(DOWNLOAD_FOLDER_NAME,\n                DOWNLOAD_FILE_NAME);\n        // 设置文件类型\n        MimeTypeMap mimeTypeMap = MimeTypeMap.getSingleton();\n        String mimeString = mimeTypeMap.getMimeTypeFromExtension(MimeTypeMap\n                .getFileExtensionFromUrl(url));\n        request.setMimeType(mimeString);\n        // 保存返回唯一的downloadId\n        UpdateUtils.putLong(context, APK_DOWNLOAD_ID,\n                downloadManager.enqueue(request));\n    }\n\n    class CompleteReceiver extends BroadcastReceiver {\n\n        @Override\n        public void onReceive(Context context, Intent intent) {\n            /**\n             * get the id of download which have download success, if the id is\n             * my id and it's status is successful, then install it\n             **/\n            long completeDownloadId = intent.getLongExtra(\n                    DownloadManager.EXTRA_DOWNLOAD_ID, 0);\n            long downloadId = UpdateUtils.getLong(context, APK_DOWNLOAD_ID);\n\n            if (completeDownloadId == downloadId) {\n\n                // if download successful\n                if (queryDownloadStatus(downloadManager, downloadId) == DownloadManager.STATUS_SUCCESSFUL) {\n\n                    // clear downloadId\n                    UpdateUtils.removeSharedPreferenceByKey(context,\n                            APK_DOWNLOAD_ID);\n\n                    // unregisterReceiver\n                    context.unregisterReceiver(completeReceiver);\n\n                    // install apk\n                    String apkFilePath = new StringBuilder(Environment\n                            .getExternalStorageDirectory().getAbsolutePath())\n                            .append(File.separator)\n                            .append(DOWNLOAD_FOLDER_NAME)\n                            .append(File.separator).append(DOWNLOAD_FILE_NAME)\n                            .toString();\n                    install(context, apkFilePath);\n                }\n            }\n        }\n    }\n\n    /**\n     * 查询下载状态\n     */\n    public static int queryDownloadStatus(DownloadManager downloadManager,\n                                          long downloadId) {\n        int result = -1;\n        DownloadManager.Query query = new DownloadManager.Query()\n                .setFilterById(downloadId);\n        Cursor c = null;\n        try {\n            c = downloadManager.query(query);\n            if (c != null && c.moveToFirst()) {\n                result = c.getInt(c\n                        .getColumnIndex(DownloadManager.COLUMN_STATUS));\n            }\n        } finally {\n            if (c != null) {\n                c.close();\n            }\n        }\n        return result;\n    }\n\n    /**\n     * install app\n     *\n     * @param context\n     * @param filePath\n     * @return whether apk exist\n     */\n    public static boolean install(Context context, String filePath) {\n        Intent i = new Intent(Intent.ACTION_VIEW);\n        File file = new File(filePath);\n        if (file != null && file.length() > 0 && file.exists() && file.isFile()) {\n            i.setDataAndType(Uri.parse(\"file://\" + filePath),\n                    \"application/vnd.android.package-archive\");\n            i.addFlags(Intent.FLAG_ACTIVITY_NEW_TASK);\n            context.startActivity(i);\n            return true;\n        }\n        return false;\n    }\n\n}\n```\n检测到需要升级时  `new ApkDownLoad().execute()`就可以了，其中`UpdateUtils.getLong()`是一个`SharedPreferences`封装。\n----\n以上两种方式在小米5Android N 上实测有效\n----\n以上","source":"_posts/Android-N-应用内更新.md","raw":"---\ntitle: Android N 应用内更新\ndate: 2017-03-28 10:30:31\ntags: [Android爬坑之旅,Android]\nkeywords: 应用内更新\n---\n继之前跪在Android M的动态权限之后，最近又跪在了Android N的`StrictMode`上了。所以啊，要对技术持有敬畏的态度。\n场景如下：\n我司内部员工使用的APP需要有应用内更新的功能，意思就是在应用内下载最新版本的应用并且调起安装界面。\n方案：由于每次从新打开app都需要重新登录，那就在登录界面加上检查更新的接口请求，后台对比当前版本App的VersionCode 和 数据库存储的VersionCode对比，如果需要更新，则返回最新版本软件的下载地址，前端进行下载安装。\n当前端解析出下载地址后，弹出提示框，下载或者取消。点击下载则开启线程下载，同时在界面上显示下载进度，下载完成后，调起安装界面进行安装。\n代码很简单，这里放出不涉及我司业务的代码：\n<!--more-->\n``` java\nprivate void downLoadAPK() {\n        downLoadThread = new Thread(new Runnable() {\n            @Override\n            public void run() {\n                try {\n                    URL url = new URL(downLoadUrl);\n\n                    HttpURLConnection conn = (HttpURLConnection) url\n                            .openConnection();\n                    conn.connect();\n                    int length = conn.getContentLength();\n                    InputStream is = conn.getInputStream();\n\n                    File file = new File(\"\");\n                    if (!file.exists()) {\n                        file.mkdir();\n                    }\n                    File apkFile = new File(saveFilePath);\n                    if (apkFile.exists()) {\n                        apkFile.delete();\n                    }\n                    FileOutputStream fos = new FileOutputStream(apkFile);\n\n                    int count = 0;\n                    byte buf[] = new byte[1024];\n\n                    // 点击取消就停止下载.\n                    while (!interceptFlag) {\n                        int numread = is.read(buf);\n                        count += numread;\n                        progress = (int) (((float) count / length) * 100);\n                        // 更新进度\n                        getHandler().sendEmptyMessage(DOWN_UPDATE);\n                        if (numread <= 0) {\n                            // 下载完成通知安装\n                            getHandler().sendEmptyMessage(DOWN_OVER);\n                            interceptFlag = false;\n                        }\n                        fos.write(buf, 0, numread);\n                    }\n                    fos.close();\n                    is.close();\n                } catch (Exception e) {\n                    e.printStackTrace();\n                }\n\n            }\n        });\n        downLoadThread.start();\n    }\n```\n以上为下载文件的代码，逻辑很简单，起一个新线程，使用HttpURLConnection进行文件下载。\n``` java\n    private void installAPK(String filePath) {\n        File apkFile = new File(filePath);\n        Intent intent = new Intent(Intent.ACTION_VIEW);\n        if (!apkFile.exists()) {\n            return;\n        }\n        intent.setDataAndType(Uri.fromFile(apkFile), \"application/vnd.android.package-archive\");\n        context.startActivity(intent);\n    }\n```\n以上代码是刚开始写的安装软件的代码，在Android N 以下运行正常，但是在Android N上却爆出了如下错误，\n``` java\nandroid.os.FileUriExposedException: file: exposed beyond app through Intent.getData()\n\tat android.os.StrictMode.onFileUriExposed(StrictMode.java:1799)\n\tat android.net.Uri.checkFileUriExposed(Uri.java:2346)\n\tat android.content.Intent.prepareToLeaveProcess(Intent.java:8949)\n\tat android.content.Intent.prepareToLeaveProcess(Intent.java:8908)\n\tat android.app.Instrumentation.execStartActivity(Instrumentation.java:1519)\n\tat android.app.ContextImpl.startActivity(ContextImpl.java:829)\n\tat android.app.ContextImpl.startActivity(ContextImpl.java:806)\n\tat android.content.ContextWrapper.startActivity(ContextWrapper.java:366)\n\tat com.mmuu.travel.service.ui.LoginFrg.installAPK(LoginFrg.java:349)\n\tat com.mmuu.travel.service.ui.LoginFrg.access$200(LoginFrg.java:66)\n\tat com.mmuu.travel.service.ui.LoginFrg$1.onFinish(LoginFrg.java:134)\n\tat android.os.CountDownTimer$1.handleMessage(CountDownTimer.java:127)\n\tat android.os.Handler.dispatchMessage(Handler.java:102)\n\tat android.os.Looper.loop(Looper.java:154)\n\tat android.app.ActivityThread.main(ActivityThread.java:6114)\n\tat java.lang.reflect.Method.invoke(Native Method)\n\tat com.android.internal.os.ZygoteInit$MethodAndArgsCaller.run(ZygoteInit.java:874)\n\tat com.android.internal.os.ZygoteInit.main(ZygoteInit.java:764)\n```\n网上搜了一下，是Android N在权限上做了一些修改：[参考链接](https://developer.android.google.cn/about/versions/nougat/android-7.0-changes.html) https://developer.android.google.cn/about/versions/nougat/android-7.0-changes.html\n>系统权限更改\n为了提高私有文件的安全性，面向 Android 7.0 或更高版本的应用私有目录被限制访问　(0700)。此设置可防止私有文件的元数据泄漏，如它们的大小或存在性。此权限更改有多重副作用：\n私有文件的文件权限不应再由所有者放宽，为使用 MODE_WORLD_READABLE 和/或 MODE_WORLD_WRITEABLE 而进行的此类尝试将触发 SecurityException。\n>>注：迄今为止，这种限制尚不能完全执行。应用仍可能使用原生 API 或 File API 来修改它们的私有目录权限。但是，我们强烈反对放宽私有目录的权限。\n\n>传递软件包网域外的 file:// URI 可能给接收器留下无法访问的路径。因此，尝试传递 file:// URI 会触发 FileUriExposedException。分享私有文件内容的推荐方法是使用 FileProvider。\nDownloadManager 不再按文件名分享私人存储的文件。旧版应用在访问 COLUMN_LOCAL_FILENAME 时可能出现无法访问的路径。面向 Android 7.0 或更高版本的应用在尝试访问 COLUMN_LOCAL_FILENAME 时会触发 SecurityException。通过使用 DownloadManager.Request.setDestinationInExternalFilesDir() 或 DownloadManager.Request.setDestinationInExternalPublicDir() 将下载位置设置为公共位置的旧版应用仍可以访问 COLUMN_LOCAL_FILENAME 中的路径，但是我们强烈反对使用这种方法。对于由 DownloadManager 公开的文件，首选的访问方式是使用ContentResolver.openFileDescriptor()。\n\n解决方案：\n1. FileProvider\n1.1 在mainfest中加入FileProvider注册\n``` xml\n<application>\n     <provider\n         android:authorities=\"你的应用名.fileprovider\"\n         android:name=\"android.support.v4.content.FileProvider\"\n         android:grantUriPermissions=\"true\"\n         android:exported=\"false\">\n         <meta-data\n           android:name=\"android.support.FILE_PROVIDER_PATHS\"\n           android:resource=\"@xml/filepaths\"/>\n    </provider>\n\n</application>\n```\n1.2 在`res`文件夹下新建`xml`文件夹，在`xml`文件夹中新建`filepaths`文件，这个文件名字和上面的 Android:resource后面的名字要一致\n编辑该文件：\n``` xml\n<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<paths>\n    <external-path\n        name=\"external_storage_root\"\n        path=\"\" />\n</paths>\n```\n1.3 修改安装代码\n``` java\nprivate void installAPK(String filePath) {\n        File apkFile = new File(filePath);\n        Intent intent = new Intent(Intent.ACTION_VIEW);\n        if (!apkFile.exists()) {\n            return;\n        }\n\n        if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.N) {\n            intent.setFlags(Intent.FLAG_GRANT_READ_URI_PERMISSION);\n            Uri contentUri = FileProvider.getUriForFile(context, BuildConfig.APPLICATION_ID + \".fileProvider\", apkFile);\n            intent.setDataAndType(contentUri, \"application/vnd.android.package-archive\");\n        } else {\n            intent.setDataAndType(Uri.fromFile(apkFile), \"application/vnd.android.package-archive\");\n        }\n        getActivity().getApplicationContext().startActivity(intent);\n        context.finish();\n    }\n```\n首先判断设备的Android版本，N或者N以上使用`FileProvider`进行安装，N一下还是原来的方式。注意调用startActivity要使用ApplicationContext，使用Activity.this会报错。\n2. 使用DownloadManager\n``` java\npublic class ApkDownLoad {\n\n    public static final String DOWNLOAD_FOLDER_NAME = getLocalForderPath();\n    public static final String DOWNLOAD_FILE_NAME = \"XXX.apk\";\n    public static final String APK_DOWNLOAD_ID = \"apkDownloadId\";\n    private Context context;\n    private String url;\n    private String notificationTitle;\n    private String notificationDescription;\n\n    private DownloadManager downloadManager;\n    private CompleteReceiver completeReceiver;\n\n    /**\n     * @param context\n     * @param url                     下载apk的url\n     * @param notificationTitle       通知栏标题\n     * @param notificationDescription 通知栏描述\n     */\n    public ApkDownLoad(Context context, String url, String notificationTitle,\n                       String notificationDescription) {\n        super();\n        this.context = context;\n        this.url = url;\n        this.notificationTitle = notificationTitle;\n        this.notificationDescription = notificationDescription;\n        downloadManager = (DownloadManager) context\n                .getSystemService(Context.DOWNLOAD_SERVICE);\n        completeReceiver = new CompleteReceiver();\n\n        /** register download success broadcast **/\n        context.registerReceiver(completeReceiver, new IntentFilter(\n                DownloadManager.ACTION_DOWNLOAD_COMPLETE));\n    }\n\n    public void execute() {\n\n        // 清除已下载的内容重新下载\n        long downloadId = UpdateUtils.getLong(context, APK_DOWNLOAD_ID);\n        if (downloadId != -1) {\n            downloadManager.remove(downloadId);\n            UpdateUtils.removeSharedPreferenceByKey(context, APK_DOWNLOAD_ID);\n        }\n        Request request = new Request(Uri.parse(url));\n        // 设置Notification中显示的文字\n        request.setTitle(notificationTitle);\n        request.setDescription(notificationDescription);\n        // 设置可用的网络类型\n        request.setAllowedNetworkTypes(Request.NETWORK_MOBILE\n                | Request.NETWORK_WIFI);\n        // 设置状态栏中显示Notification\n        request.setNotificationVisibility(DownloadManager.Request.VISIBILITY_VISIBLE_NOTIFY_COMPLETED);\n        // 不显示下载界面\n        request.setVisibleInDownloadsUi(false);\n        // 设置下载后文件存放的位置\n        File folder = Environment\n                .getExternalStoragePublicDirectory(DOWNLOAD_FOLDER_NAME);\n        if (!folder.exists() || !folder.isDirectory()) {\n            folder.mkdirs();\n        }\n        // 设置下载文件的保存路径\n        request.setDestinationInExternalPublicDir(DOWNLOAD_FOLDER_NAME,\n                DOWNLOAD_FILE_NAME);\n        // 设置文件类型\n        MimeTypeMap mimeTypeMap = MimeTypeMap.getSingleton();\n        String mimeString = mimeTypeMap.getMimeTypeFromExtension(MimeTypeMap\n                .getFileExtensionFromUrl(url));\n        request.setMimeType(mimeString);\n        // 保存返回唯一的downloadId\n        UpdateUtils.putLong(context, APK_DOWNLOAD_ID,\n                downloadManager.enqueue(request));\n    }\n\n    class CompleteReceiver extends BroadcastReceiver {\n\n        @Override\n        public void onReceive(Context context, Intent intent) {\n            /**\n             * get the id of download which have download success, if the id is\n             * my id and it's status is successful, then install it\n             **/\n            long completeDownloadId = intent.getLongExtra(\n                    DownloadManager.EXTRA_DOWNLOAD_ID, 0);\n            long downloadId = UpdateUtils.getLong(context, APK_DOWNLOAD_ID);\n\n            if (completeDownloadId == downloadId) {\n\n                // if download successful\n                if (queryDownloadStatus(downloadManager, downloadId) == DownloadManager.STATUS_SUCCESSFUL) {\n\n                    // clear downloadId\n                    UpdateUtils.removeSharedPreferenceByKey(context,\n                            APK_DOWNLOAD_ID);\n\n                    // unregisterReceiver\n                    context.unregisterReceiver(completeReceiver);\n\n                    // install apk\n                    String apkFilePath = new StringBuilder(Environment\n                            .getExternalStorageDirectory().getAbsolutePath())\n                            .append(File.separator)\n                            .append(DOWNLOAD_FOLDER_NAME)\n                            .append(File.separator).append(DOWNLOAD_FILE_NAME)\n                            .toString();\n                    install(context, apkFilePath);\n                }\n            }\n        }\n    }\n\n    /**\n     * 查询下载状态\n     */\n    public static int queryDownloadStatus(DownloadManager downloadManager,\n                                          long downloadId) {\n        int result = -1;\n        DownloadManager.Query query = new DownloadManager.Query()\n                .setFilterById(downloadId);\n        Cursor c = null;\n        try {\n            c = downloadManager.query(query);\n            if (c != null && c.moveToFirst()) {\n                result = c.getInt(c\n                        .getColumnIndex(DownloadManager.COLUMN_STATUS));\n            }\n        } finally {\n            if (c != null) {\n                c.close();\n            }\n        }\n        return result;\n    }\n\n    /**\n     * install app\n     *\n     * @param context\n     * @param filePath\n     * @return whether apk exist\n     */\n    public static boolean install(Context context, String filePath) {\n        Intent i = new Intent(Intent.ACTION_VIEW);\n        File file = new File(filePath);\n        if (file != null && file.length() > 0 && file.exists() && file.isFile()) {\n            i.setDataAndType(Uri.parse(\"file://\" + filePath),\n                    \"application/vnd.android.package-archive\");\n            i.addFlags(Intent.FLAG_ACTIVITY_NEW_TASK);\n            context.startActivity(i);\n            return true;\n        }\n        return false;\n    }\n\n}\n```\n检测到需要升级时  `new ApkDownLoad().execute()`就可以了，其中`UpdateUtils.getLong()`是一个`SharedPreferences`封装。\n----\n以上两种方式在小米5Android N 上实测有效\n----\n以上","slug":"Android-N-应用内更新","published":1,"updated":"2018-08-04T04:44:42.010Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjl3vbtpn0003isdg7cxn1c7e","content":"<p>继之前跪在Android M的动态权限之后，最近又跪在了Android N的<code>StrictMode</code>上了。所以啊，要对技术持有敬畏的态度。<br>场景如下：<br>我司内部员工使用的APP需要有应用内更新的功能，意思就是在应用内下载最新版本的应用并且调起安装界面。<br>方案：由于每次从新打开app都需要重新登录，那就在登录界面加上检查更新的接口请求，后台对比当前版本App的VersionCode 和 数据库存储的VersionCode对比，如果需要更新，则返回最新版本软件的下载地址，前端进行下载安装。<br>当前端解析出下载地址后，弹出提示框，下载或者取消。点击下载则开启线程下载，同时在界面上显示下载进度，下载完成后，调起安装界面进行安装。<br>代码很简单，这里放出不涉及我司业务的代码：<br><a id=\"more\"></a><br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">downLoadAPK</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">        downLoadThread = <span class=\"keyword\">new</span> Thread(<span class=\"keyword\">new</span> Runnable() &#123;</div><div class=\"line\">            <span class=\"meta\">@Override</span></div><div class=\"line\">            <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">run</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">                <span class=\"keyword\">try</span> &#123;</div><div class=\"line\">                    URL url = <span class=\"keyword\">new</span> URL(downLoadUrl);</div><div class=\"line\"></div><div class=\"line\">                    HttpURLConnection conn = (HttpURLConnection) url</div><div class=\"line\">                            .openConnection();</div><div class=\"line\">                    conn.connect();</div><div class=\"line\">                    <span class=\"keyword\">int</span> length = conn.getContentLength();</div><div class=\"line\">                    InputStream is = conn.getInputStream();</div><div class=\"line\"></div><div class=\"line\">                    File file = <span class=\"keyword\">new</span> File(<span class=\"string\">\"\"</span>);</div><div class=\"line\">                    <span class=\"keyword\">if</span> (!file.exists()) &#123;</div><div class=\"line\">                        file.mkdir();</div><div class=\"line\">                    &#125;</div><div class=\"line\">                    File apkFile = <span class=\"keyword\">new</span> File(saveFilePath);</div><div class=\"line\">                    <span class=\"keyword\">if</span> (apkFile.exists()) &#123;</div><div class=\"line\">                        apkFile.delete();</div><div class=\"line\">                    &#125;</div><div class=\"line\">                    FileOutputStream fos = <span class=\"keyword\">new</span> FileOutputStream(apkFile);</div><div class=\"line\"></div><div class=\"line\">                    <span class=\"keyword\">int</span> count = <span class=\"number\">0</span>;</div><div class=\"line\">                    <span class=\"keyword\">byte</span> buf[] = <span class=\"keyword\">new</span> <span class=\"keyword\">byte</span>[<span class=\"number\">1024</span>];</div><div class=\"line\"></div><div class=\"line\">                    <span class=\"comment\">// 点击取消就停止下载.</span></div><div class=\"line\">                    <span class=\"keyword\">while</span> (!interceptFlag) &#123;</div><div class=\"line\">                        <span class=\"keyword\">int</span> numread = is.read(buf);</div><div class=\"line\">                        count += numread;</div><div class=\"line\">                        progress = (<span class=\"keyword\">int</span>) (((<span class=\"keyword\">float</span>) count / length) * <span class=\"number\">100</span>);</div><div class=\"line\">                        <span class=\"comment\">// 更新进度</span></div><div class=\"line\">                        getHandler().sendEmptyMessage(DOWN_UPDATE);</div><div class=\"line\">                        <span class=\"keyword\">if</span> (numread &lt;= <span class=\"number\">0</span>) &#123;</div><div class=\"line\">                            <span class=\"comment\">// 下载完成通知安装</span></div><div class=\"line\">                            getHandler().sendEmptyMessage(DOWN_OVER);</div><div class=\"line\">                            interceptFlag = <span class=\"keyword\">false</span>;</div><div class=\"line\">                        &#125;</div><div class=\"line\">                        fos.write(buf, <span class=\"number\">0</span>, numread);</div><div class=\"line\">                    &#125;</div><div class=\"line\">                    fos.close();</div><div class=\"line\">                    is.close();</div><div class=\"line\">                &#125; <span class=\"keyword\">catch</span> (Exception e) &#123;</div><div class=\"line\">                    e.printStackTrace();</div><div class=\"line\">                &#125;</div><div class=\"line\"></div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;);</div><div class=\"line\">        downLoadThread.start();</div><div class=\"line\">    &#125;</div></pre></td></tr></table></figure></p>\n<p>以上为下载文件的代码，逻辑很简单，起一个新线程，使用HttpURLConnection进行文件下载。<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">installAPK</span><span class=\"params\">(String filePath)</span> </span>&#123;</div><div class=\"line\">    File apkFile = <span class=\"keyword\">new</span> File(filePath);</div><div class=\"line\">    Intent intent = <span class=\"keyword\">new</span> Intent(Intent.ACTION_VIEW);</div><div class=\"line\">    <span class=\"keyword\">if</span> (!apkFile.exists()) &#123;</div><div class=\"line\">        <span class=\"keyword\">return</span>;</div><div class=\"line\">    &#125;</div><div class=\"line\">    intent.setDataAndType(Uri.fromFile(apkFile), <span class=\"string\">\"application/vnd.android.package-archive\"</span>);</div><div class=\"line\">    context.startActivity(intent);</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>以上代码是刚开始写的安装软件的代码，在Android N 以下运行正常，但是在Android N上却爆出了如下错误，<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div></pre></td><td class=\"code\"><pre><div class=\"line\">android.os.FileUriExposedException: file: exposed beyond app through Intent.getData()</div><div class=\"line\">\tat android.os.StrictMode.onFileUriExposed(StrictMode.java:<span class=\"number\">1799</span>)</div><div class=\"line\">\tat android.net.Uri.checkFileUriExposed(Uri.java:<span class=\"number\">2346</span>)</div><div class=\"line\">\tat android.content.Intent.prepareToLeaveProcess(Intent.java:<span class=\"number\">8949</span>)</div><div class=\"line\">\tat android.content.Intent.prepareToLeaveProcess(Intent.java:<span class=\"number\">8908</span>)</div><div class=\"line\">\tat android.app.Instrumentation.execStartActivity(Instrumentation.java:<span class=\"number\">1519</span>)</div><div class=\"line\">\tat android.app.ContextImpl.startActivity(ContextImpl.java:<span class=\"number\">829</span>)</div><div class=\"line\">\tat android.app.ContextImpl.startActivity(ContextImpl.java:<span class=\"number\">806</span>)</div><div class=\"line\">\tat android.content.ContextWrapper.startActivity(ContextWrapper.java:<span class=\"number\">366</span>)</div><div class=\"line\">\tat com.mmuu.travel.service.ui.LoginFrg.installAPK(LoginFrg.java:<span class=\"number\">349</span>)</div><div class=\"line\">\tat com.mmuu.travel.service.ui.LoginFrg.access$<span class=\"number\">200</span>(LoginFrg.java:<span class=\"number\">66</span>)</div><div class=\"line\">\tat com.mmuu.travel.service.ui.LoginFrg$<span class=\"number\">1</span>.onFinish(LoginFrg.java:<span class=\"number\">134</span>)</div><div class=\"line\">\tat android.os.CountDownTimer$<span class=\"number\">1</span>.handleMessage(CountDownTimer.java:<span class=\"number\">127</span>)</div><div class=\"line\">\tat android.os.Handler.dispatchMessage(Handler.java:<span class=\"number\">102</span>)</div><div class=\"line\">\tat android.os.Looper.loop(Looper.java:<span class=\"number\">154</span>)</div><div class=\"line\">\tat android.app.ActivityThread.main(ActivityThread.java:<span class=\"number\">6114</span>)</div><div class=\"line\">\tat java.lang.reflect.Method.invoke(Native Method)</div><div class=\"line\">\tat com.android.internal.os.ZygoteInit$MethodAndArgsCaller.run(ZygoteInit.java:<span class=\"number\">874</span>)</div><div class=\"line\">\tat com.android.internal.os.ZygoteInit.main(ZygoteInit.java:<span class=\"number\">764</span>)</div></pre></td></tr></table></figure></p>\n<p>网上搜了一下，是Android N在权限上做了一些修改：<a href=\"https://developer.android.google.cn/about/versions/nougat/android-7.0-changes.html\" target=\"_blank\" rel=\"external\">参考链接</a> <a href=\"https://developer.android.google.cn/about/versions/nougat/android-7.0-changes.html\" target=\"_blank\" rel=\"external\">https://developer.android.google.cn/about/versions/nougat/android-7.0-changes.html</a></p>\n<blockquote>\n<p>系统权限更改<br>为了提高私有文件的安全性，面向 Android 7.0 或更高版本的应用私有目录被限制访问　(0700)。此设置可防止私有文件的元数据泄漏，如它们的大小或存在性。此权限更改有多重副作用：<br>私有文件的文件权限不应再由所有者放宽，为使用 MODE_WORLD_READABLE 和/或 MODE_WORLD_WRITEABLE 而进行的此类尝试将触发 SecurityException。</p>\n<blockquote>\n<p>注：迄今为止，这种限制尚不能完全执行。应用仍可能使用原生 API 或 File API 来修改它们的私有目录权限。但是，我们强烈反对放宽私有目录的权限。</p>\n</blockquote>\n<p>传递软件包网域外的 file:// URI 可能给接收器留下无法访问的路径。因此，尝试传递 file:// URI 会触发 FileUriExposedException。分享私有文件内容的推荐方法是使用 FileProvider。<br>DownloadManager 不再按文件名分享私人存储的文件。旧版应用在访问 COLUMN_LOCAL_FILENAME 时可能出现无法访问的路径。面向 Android 7.0 或更高版本的应用在尝试访问 COLUMN_LOCAL_FILENAME 时会触发 SecurityException。通过使用 DownloadManager.Request.setDestinationInExternalFilesDir() 或 DownloadManager.Request.setDestinationInExternalPublicDir() 将下载位置设置为公共位置的旧版应用仍可以访问 COLUMN_LOCAL_FILENAME 中的路径，但是我们强烈反对使用这种方法。对于由 DownloadManager 公开的文件，首选的访问方式是使用ContentResolver.openFileDescriptor()。</p>\n</blockquote>\n<p>解决方案：</p>\n<ol>\n<li>FileProvider<br>1.1 在mainfest中加入FileProvider注册<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">application</span>&gt;</span></div><div class=\"line\">     <span class=\"tag\">&lt;<span class=\"name\">provider</span></span></div><div class=\"line\">         <span class=\"attr\">android:authorities</span>=<span class=\"string\">\"你的应用名.fileprovider\"</span></div><div class=\"line\">         <span class=\"attr\">android:name</span>=<span class=\"string\">\"android.support.v4.content.FileProvider\"</span></div><div class=\"line\">         <span class=\"attr\">android:grantUriPermissions</span>=<span class=\"string\">\"true\"</span></div><div class=\"line\">         <span class=\"attr\">android:exported</span>=<span class=\"string\">\"false\"</span>&gt;</div><div class=\"line\">         <span class=\"tag\">&lt;<span class=\"name\">meta-data</span></span></div><div class=\"line\">           <span class=\"attr\">android:name</span>=<span class=\"string\">\"android.support.FILE_PROVIDER_PATHS\"</span></div><div class=\"line\">           <span class=\"attr\">android:resource</span>=<span class=\"string\">\"@xml/filepaths\"</span>/&gt;</div><div class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">provider</span>&gt;</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">application</span>&gt;</span></div></pre></td></tr></table></figure>\n</li>\n</ol>\n<p>1.2 在<code>res</code>文件夹下新建<code>xml</code>文件夹，在<code>xml</code>文件夹中新建<code>filepaths</code>文件，这个文件名字和上面的 Android:resource后面的名字要一致<br>编辑该文件：<br><figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;?xml version=\"1.0\" encoding=\"utf-8\"?&gt;</div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">paths</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">external-path</span></span></div><div class=\"line\">        <span class=\"attr\">name</span>=<span class=\"string\">\"external_storage_root\"</span></div><div class=\"line\">        <span class=\"attr\">path</span>=<span class=\"string\">\"\"</span> /&gt;</div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">paths</span>&gt;</span></div></pre></td></tr></table></figure></p>\n<p>1.3 修改安装代码<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">installAPK</span><span class=\"params\">(String filePath)</span> </span>&#123;</div><div class=\"line\">        File apkFile = <span class=\"keyword\">new</span> File(filePath);</div><div class=\"line\">        Intent intent = <span class=\"keyword\">new</span> Intent(Intent.ACTION_VIEW);</div><div class=\"line\">        <span class=\"keyword\">if</span> (!apkFile.exists()) &#123;</div><div class=\"line\">            <span class=\"keyword\">return</span>;</div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\">        <span class=\"keyword\">if</span> (Build.VERSION.SDK_INT &gt;= Build.VERSION_CODES.N) &#123;</div><div class=\"line\">            intent.setFlags(Intent.FLAG_GRANT_READ_URI_PERMISSION);</div><div class=\"line\">            Uri contentUri = FileProvider.getUriForFile(context, BuildConfig.APPLICATION_ID + <span class=\"string\">\".fileProvider\"</span>, apkFile);</div><div class=\"line\">            intent.setDataAndType(contentUri, <span class=\"string\">\"application/vnd.android.package-archive\"</span>);</div><div class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">            intent.setDataAndType(Uri.fromFile(apkFile), <span class=\"string\">\"application/vnd.android.package-archive\"</span>);</div><div class=\"line\">        &#125;</div><div class=\"line\">        getActivity().getApplicationContext().startActivity(intent);</div><div class=\"line\">        context.finish();</div><div class=\"line\">    &#125;</div></pre></td></tr></table></figure></p>\n<p>首先判断设备的Android版本，N或者N以上使用<code>FileProvider</code>进行安装，N一下还是原来的方式。注意调用startActivity要使用ApplicationContext，使用Activity.this会报错。</p>\n<ol>\n<li>使用DownloadManager<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div><div class=\"line\">71</div><div class=\"line\">72</div><div class=\"line\">73</div><div class=\"line\">74</div><div class=\"line\">75</div><div class=\"line\">76</div><div class=\"line\">77</div><div class=\"line\">78</div><div class=\"line\">79</div><div class=\"line\">80</div><div class=\"line\">81</div><div class=\"line\">82</div><div class=\"line\">83</div><div class=\"line\">84</div><div class=\"line\">85</div><div class=\"line\">86</div><div class=\"line\">87</div><div class=\"line\">88</div><div class=\"line\">89</div><div class=\"line\">90</div><div class=\"line\">91</div><div class=\"line\">92</div><div class=\"line\">93</div><div class=\"line\">94</div><div class=\"line\">95</div><div class=\"line\">96</div><div class=\"line\">97</div><div class=\"line\">98</div><div class=\"line\">99</div><div class=\"line\">100</div><div class=\"line\">101</div><div class=\"line\">102</div><div class=\"line\">103</div><div class=\"line\">104</div><div class=\"line\">105</div><div class=\"line\">106</div><div class=\"line\">107</div><div class=\"line\">108</div><div class=\"line\">109</div><div class=\"line\">110</div><div class=\"line\">111</div><div class=\"line\">112</div><div class=\"line\">113</div><div class=\"line\">114</div><div class=\"line\">115</div><div class=\"line\">116</div><div class=\"line\">117</div><div class=\"line\">118</div><div class=\"line\">119</div><div class=\"line\">120</div><div class=\"line\">121</div><div class=\"line\">122</div><div class=\"line\">123</div><div class=\"line\">124</div><div class=\"line\">125</div><div class=\"line\">126</div><div class=\"line\">127</div><div class=\"line\">128</div><div class=\"line\">129</div><div class=\"line\">130</div><div class=\"line\">131</div><div class=\"line\">132</div><div class=\"line\">133</div><div class=\"line\">134</div><div class=\"line\">135</div><div class=\"line\">136</div><div class=\"line\">137</div><div class=\"line\">138</div><div class=\"line\">139</div><div class=\"line\">140</div><div class=\"line\">141</div><div class=\"line\">142</div><div class=\"line\">143</div><div class=\"line\">144</div><div class=\"line\">145</div><div class=\"line\">146</div><div class=\"line\">147</div><div class=\"line\">148</div><div class=\"line\">149</div><div class=\"line\">150</div><div class=\"line\">151</div><div class=\"line\">152</div><div class=\"line\">153</div><div class=\"line\">154</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ApkDownLoad</span> </span>&#123;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> String DOWNLOAD_FOLDER_NAME = getLocalForderPath();</div><div class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> String DOWNLOAD_FILE_NAME = <span class=\"string\">\"XXX.apk\"</span>;</div><div class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> String APK_DOWNLOAD_ID = <span class=\"string\">\"apkDownloadId\"</span>;</div><div class=\"line\">    <span class=\"keyword\">private</span> Context context;</div><div class=\"line\">    <span class=\"keyword\">private</span> String url;</div><div class=\"line\">    <span class=\"keyword\">private</span> String notificationTitle;</div><div class=\"line\">    <span class=\"keyword\">private</span> String notificationDescription;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">private</span> DownloadManager downloadManager;</div><div class=\"line\">    <span class=\"keyword\">private</span> CompleteReceiver completeReceiver;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">/**</span></div><div class=\"line\">     * <span class=\"doctag\">@param</span> context</div><div class=\"line\">     * <span class=\"doctag\">@param</span> url                     下载apk的url</div><div class=\"line\">     * <span class=\"doctag\">@param</span> notificationTitle       通知栏标题</div><div class=\"line\">     * <span class=\"doctag\">@param</span> notificationDescription 通知栏描述</div><div class=\"line\">     */</div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">ApkDownLoad</span><span class=\"params\">(Context context, String url, String notificationTitle,</span></span></div><div class=\"line\">                       String notificationDescription) &#123;</div><div class=\"line\">        <span class=\"keyword\">super</span>();</div><div class=\"line\">        <span class=\"keyword\">this</span>.context = context;</div><div class=\"line\">        <span class=\"keyword\">this</span>.url = url;</div><div class=\"line\">        <span class=\"keyword\">this</span>.notificationTitle = notificationTitle;</div><div class=\"line\">        <span class=\"keyword\">this</span>.notificationDescription = notificationDescription;</div><div class=\"line\">        downloadManager = (DownloadManager) context</div><div class=\"line\">                .getSystemService(Context.DOWNLOAD_SERVICE);</div><div class=\"line\">        completeReceiver = <span class=\"keyword\">new</span> CompleteReceiver();</div><div class=\"line\"></div><div class=\"line\">        <span class=\"comment\">/** register download success broadcast **/</span></div><div class=\"line\">        context.registerReceiver(completeReceiver, <span class=\"keyword\">new</span> IntentFilter(</div><div class=\"line\">                DownloadManager.ACTION_DOWNLOAD_COMPLETE));</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">execute</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\"></div><div class=\"line\">        <span class=\"comment\">// 清除已下载的内容重新下载</span></div><div class=\"line\">        <span class=\"keyword\">long</span> downloadId = UpdateUtils.getLong(context, APK_DOWNLOAD_ID);</div><div class=\"line\">        <span class=\"keyword\">if</span> (downloadId != -<span class=\"number\">1</span>) &#123;</div><div class=\"line\">            downloadManager.remove(downloadId);</div><div class=\"line\">            UpdateUtils.removeSharedPreferenceByKey(context, APK_DOWNLOAD_ID);</div><div class=\"line\">        &#125;</div><div class=\"line\">        Request request = <span class=\"keyword\">new</span> Request(Uri.parse(url));</div><div class=\"line\">        <span class=\"comment\">// 设置Notification中显示的文字</span></div><div class=\"line\">        request.setTitle(notificationTitle);</div><div class=\"line\">        request.setDescription(notificationDescription);</div><div class=\"line\">        <span class=\"comment\">// 设置可用的网络类型</span></div><div class=\"line\">        request.setAllowedNetworkTypes(Request.NETWORK_MOBILE</div><div class=\"line\">                | Request.NETWORK_WIFI);</div><div class=\"line\">        <span class=\"comment\">// 设置状态栏中显示Notification</span></div><div class=\"line\">        request.setNotificationVisibility(DownloadManager.Request.VISIBILITY_VISIBLE_NOTIFY_COMPLETED);</div><div class=\"line\">        <span class=\"comment\">// 不显示下载界面</span></div><div class=\"line\">        request.setVisibleInDownloadsUi(<span class=\"keyword\">false</span>);</div><div class=\"line\">        <span class=\"comment\">// 设置下载后文件存放的位置</span></div><div class=\"line\">        File folder = Environment</div><div class=\"line\">                .getExternalStoragePublicDirectory(DOWNLOAD_FOLDER_NAME);</div><div class=\"line\">        <span class=\"keyword\">if</span> (!folder.exists() || !folder.isDirectory()) &#123;</div><div class=\"line\">            folder.mkdirs();</div><div class=\"line\">        &#125;</div><div class=\"line\">        <span class=\"comment\">// 设置下载文件的保存路径</span></div><div class=\"line\">        request.setDestinationInExternalPublicDir(DOWNLOAD_FOLDER_NAME,</div><div class=\"line\">                DOWNLOAD_FILE_NAME);</div><div class=\"line\">        <span class=\"comment\">// 设置文件类型</span></div><div class=\"line\">        MimeTypeMap mimeTypeMap = MimeTypeMap.getSingleton();</div><div class=\"line\">        String mimeString = mimeTypeMap.getMimeTypeFromExtension(MimeTypeMap</div><div class=\"line\">                .getFileExtensionFromUrl(url));</div><div class=\"line\">        request.setMimeType(mimeString);</div><div class=\"line\">        <span class=\"comment\">// 保存返回唯一的downloadId</span></div><div class=\"line\">        UpdateUtils.putLong(context, APK_DOWNLOAD_ID,</div><div class=\"line\">                downloadManager.enqueue(request));</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">CompleteReceiver</span> <span class=\"keyword\">extends</span> <span class=\"title\">BroadcastReceiver</span> </span>&#123;</div><div class=\"line\"></div><div class=\"line\">        <span class=\"meta\">@Override</span></div><div class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onReceive</span><span class=\"params\">(Context context, Intent intent)</span> </span>&#123;</div><div class=\"line\">            <span class=\"comment\">/**</span></div><div class=\"line\">             * get the id of download which have download success, if the id is</div><div class=\"line\">             * my id and it's status is successful, then install it</div><div class=\"line\">             **/</div><div class=\"line\">            <span class=\"keyword\">long</span> completeDownloadId = intent.getLongExtra(</div><div class=\"line\">                    DownloadManager.EXTRA_DOWNLOAD_ID, <span class=\"number\">0</span>);</div><div class=\"line\">            <span class=\"keyword\">long</span> downloadId = UpdateUtils.getLong(context, APK_DOWNLOAD_ID);</div><div class=\"line\"></div><div class=\"line\">            <span class=\"keyword\">if</span> (completeDownloadId == downloadId) &#123;</div><div class=\"line\"></div><div class=\"line\">                <span class=\"comment\">// if download successful</span></div><div class=\"line\">                <span class=\"keyword\">if</span> (queryDownloadStatus(downloadManager, downloadId) == DownloadManager.STATUS_SUCCESSFUL) &#123;</div><div class=\"line\"></div><div class=\"line\">                    <span class=\"comment\">// clear downloadId</span></div><div class=\"line\">                    UpdateUtils.removeSharedPreferenceByKey(context,</div><div class=\"line\">                            APK_DOWNLOAD_ID);</div><div class=\"line\"></div><div class=\"line\">                    <span class=\"comment\">// unregisterReceiver</span></div><div class=\"line\">                    context.unregisterReceiver(completeReceiver);</div><div class=\"line\"></div><div class=\"line\">                    <span class=\"comment\">// install apk</span></div><div class=\"line\">                    String apkFilePath = <span class=\"keyword\">new</span> StringBuilder(Environment</div><div class=\"line\">                            .getExternalStorageDirectory().getAbsolutePath())</div><div class=\"line\">                            .append(File.separator)</div><div class=\"line\">                            .append(DOWNLOAD_FOLDER_NAME)</div><div class=\"line\">                            .append(File.separator).append(DOWNLOAD_FILE_NAME)</div><div class=\"line\">                            .toString();</div><div class=\"line\">                    install(context, apkFilePath);</div><div class=\"line\">                &#125;</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">/**</span></div><div class=\"line\">     * 查询下载状态</div><div class=\"line\">     */</div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">int</span> <span class=\"title\">queryDownloadStatus</span><span class=\"params\">(DownloadManager downloadManager,</span></span></div><div class=\"line\">                                          <span class=\"keyword\">long</span> downloadId) &#123;</div><div class=\"line\">        <span class=\"keyword\">int</span> result = -<span class=\"number\">1</span>;</div><div class=\"line\">        DownloadManager.Query query = <span class=\"keyword\">new</span> DownloadManager.Query()</div><div class=\"line\">                .setFilterById(downloadId);</div><div class=\"line\">        Cursor c = <span class=\"keyword\">null</span>;</div><div class=\"line\">        <span class=\"keyword\">try</span> &#123;</div><div class=\"line\">            c = downloadManager.query(query);</div><div class=\"line\">            <span class=\"keyword\">if</span> (c != <span class=\"keyword\">null</span> &amp;&amp; c.moveToFirst()) &#123;</div><div class=\"line\">                result = c.getInt(c</div><div class=\"line\">                        .getColumnIndex(DownloadManager.COLUMN_STATUS));</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125; <span class=\"keyword\">finally</span> &#123;</div><div class=\"line\">            <span class=\"keyword\">if</span> (c != <span class=\"keyword\">null</span>) &#123;</div><div class=\"line\">                c.close();</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;</div><div class=\"line\">        <span class=\"keyword\">return</span> result;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">/**</span></div><div class=\"line\">     * install app</div><div class=\"line\">     *</div><div class=\"line\">     * <span class=\"doctag\">@param</span> context</div><div class=\"line\">     * <span class=\"doctag\">@param</span> filePath</div><div class=\"line\">     * <span class=\"doctag\">@return</span> whether apk exist</div><div class=\"line\">     */</div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">boolean</span> <span class=\"title\">install</span><span class=\"params\">(Context context, String filePath)</span> </span>&#123;</div><div class=\"line\">        Intent i = <span class=\"keyword\">new</span> Intent(Intent.ACTION_VIEW);</div><div class=\"line\">        File file = <span class=\"keyword\">new</span> File(filePath);</div><div class=\"line\">        <span class=\"keyword\">if</span> (file != <span class=\"keyword\">null</span> &amp;&amp; file.length() &gt; <span class=\"number\">0</span> &amp;&amp; file.exists() &amp;&amp; file.isFile()) &#123;</div><div class=\"line\">            i.setDataAndType(Uri.parse(<span class=\"string\">\"file://\"</span> + filePath),</div><div class=\"line\">                    <span class=\"string\">\"application/vnd.android.package-archive\"</span>);</div><div class=\"line\">            i.addFlags(Intent.FLAG_ACTIVITY_NEW_TASK);</div><div class=\"line\">            context.startActivity(i);</div><div class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">true</span>;</div><div class=\"line\">        &#125;</div><div class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">false</span>;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n</li>\n</ol>\n<h2 id=\"检测到需要升级时-new-ApkDownLoad-execute-就可以了，其中UpdateUtils-getLong-是一个SharedPreferences封装。\"><a href=\"#检测到需要升级时-new-ApkDownLoad-execute-就可以了，其中UpdateUtils-getLong-是一个SharedPreferences封装。\" class=\"headerlink\" title=\"检测到需要升级时  new ApkDownLoad().execute()就可以了，其中UpdateUtils.getLong()是一个SharedPreferences封装。\"></a>检测到需要升级时  <code>new ApkDownLoad().execute()</code>就可以了，其中<code>UpdateUtils.getLong()</code>是一个<code>SharedPreferences</code>封装。</h2><h2 id=\"以上两种方式在小米5Android-N-上实测有效\"><a href=\"#以上两种方式在小米5Android-N-上实测有效\" class=\"headerlink\" title=\"以上两种方式在小米5Android N 上实测有效\"></a>以上两种方式在小米5Android N 上实测有效</h2><p>以上</p>\n","excerpt":"<p>继之前跪在Android M的动态权限之后，最近又跪在了Android N的<code>StrictMode</code>上了。所以啊，要对技术持有敬畏的态度。<br>场景如下：<br>我司内部员工使用的APP需要有应用内更新的功能，意思就是在应用内下载最新版本的应用并且调起安装界面。<br>方案：由于每次从新打开app都需要重新登录，那就在登录界面加上检查更新的接口请求，后台对比当前版本App的VersionCode 和 数据库存储的VersionCode对比，如果需要更新，则返回最新版本软件的下载地址，前端进行下载安装。<br>当前端解析出下载地址后，弹出提示框，下载或者取消。点击下载则开启线程下载，同时在界面上显示下载进度，下载完成后，调起安装界面进行安装。<br>代码很简单，这里放出不涉及我司业务的代码：<br>","more":"<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">downLoadAPK</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">        downLoadThread = <span class=\"keyword\">new</span> Thread(<span class=\"keyword\">new</span> Runnable() &#123;</div><div class=\"line\">            <span class=\"meta\">@Override</span></div><div class=\"line\">            <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">run</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">                <span class=\"keyword\">try</span> &#123;</div><div class=\"line\">                    URL url = <span class=\"keyword\">new</span> URL(downLoadUrl);</div><div class=\"line\"></div><div class=\"line\">                    HttpURLConnection conn = (HttpURLConnection) url</div><div class=\"line\">                            .openConnection();</div><div class=\"line\">                    conn.connect();</div><div class=\"line\">                    <span class=\"keyword\">int</span> length = conn.getContentLength();</div><div class=\"line\">                    InputStream is = conn.getInputStream();</div><div class=\"line\"></div><div class=\"line\">                    File file = <span class=\"keyword\">new</span> File(<span class=\"string\">\"\"</span>);</div><div class=\"line\">                    <span class=\"keyword\">if</span> (!file.exists()) &#123;</div><div class=\"line\">                        file.mkdir();</div><div class=\"line\">                    &#125;</div><div class=\"line\">                    File apkFile = <span class=\"keyword\">new</span> File(saveFilePath);</div><div class=\"line\">                    <span class=\"keyword\">if</span> (apkFile.exists()) &#123;</div><div class=\"line\">                        apkFile.delete();</div><div class=\"line\">                    &#125;</div><div class=\"line\">                    FileOutputStream fos = <span class=\"keyword\">new</span> FileOutputStream(apkFile);</div><div class=\"line\"></div><div class=\"line\">                    <span class=\"keyword\">int</span> count = <span class=\"number\">0</span>;</div><div class=\"line\">                    <span class=\"keyword\">byte</span> buf[] = <span class=\"keyword\">new</span> <span class=\"keyword\">byte</span>[<span class=\"number\">1024</span>];</div><div class=\"line\"></div><div class=\"line\">                    <span class=\"comment\">// 点击取消就停止下载.</span></div><div class=\"line\">                    <span class=\"keyword\">while</span> (!interceptFlag) &#123;</div><div class=\"line\">                        <span class=\"keyword\">int</span> numread = is.read(buf);</div><div class=\"line\">                        count += numread;</div><div class=\"line\">                        progress = (<span class=\"keyword\">int</span>) (((<span class=\"keyword\">float</span>) count / length) * <span class=\"number\">100</span>);</div><div class=\"line\">                        <span class=\"comment\">// 更新进度</span></div><div class=\"line\">                        getHandler().sendEmptyMessage(DOWN_UPDATE);</div><div class=\"line\">                        <span class=\"keyword\">if</span> (numread &lt;= <span class=\"number\">0</span>) &#123;</div><div class=\"line\">                            <span class=\"comment\">// 下载完成通知安装</span></div><div class=\"line\">                            getHandler().sendEmptyMessage(DOWN_OVER);</div><div class=\"line\">                            interceptFlag = <span class=\"keyword\">false</span>;</div><div class=\"line\">                        &#125;</div><div class=\"line\">                        fos.write(buf, <span class=\"number\">0</span>, numread);</div><div class=\"line\">                    &#125;</div><div class=\"line\">                    fos.close();</div><div class=\"line\">                    is.close();</div><div class=\"line\">                &#125; <span class=\"keyword\">catch</span> (Exception e) &#123;</div><div class=\"line\">                    e.printStackTrace();</div><div class=\"line\">                &#125;</div><div class=\"line\"></div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;);</div><div class=\"line\">        downLoadThread.start();</div><div class=\"line\">    &#125;</div></pre></td></tr></table></figure></p>\n<p>以上为下载文件的代码，逻辑很简单，起一个新线程，使用HttpURLConnection进行文件下载。<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">installAPK</span><span class=\"params\">(String filePath)</span> </span>&#123;</div><div class=\"line\">    File apkFile = <span class=\"keyword\">new</span> File(filePath);</div><div class=\"line\">    Intent intent = <span class=\"keyword\">new</span> Intent(Intent.ACTION_VIEW);</div><div class=\"line\">    <span class=\"keyword\">if</span> (!apkFile.exists()) &#123;</div><div class=\"line\">        <span class=\"keyword\">return</span>;</div><div class=\"line\">    &#125;</div><div class=\"line\">    intent.setDataAndType(Uri.fromFile(apkFile), <span class=\"string\">\"application/vnd.android.package-archive\"</span>);</div><div class=\"line\">    context.startActivity(intent);</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>以上代码是刚开始写的安装软件的代码，在Android N 以下运行正常，但是在Android N上却爆出了如下错误，<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div></pre></td><td class=\"code\"><pre><div class=\"line\">android.os.FileUriExposedException: file: exposed beyond app through Intent.getData()</div><div class=\"line\">\tat android.os.StrictMode.onFileUriExposed(StrictMode.java:<span class=\"number\">1799</span>)</div><div class=\"line\">\tat android.net.Uri.checkFileUriExposed(Uri.java:<span class=\"number\">2346</span>)</div><div class=\"line\">\tat android.content.Intent.prepareToLeaveProcess(Intent.java:<span class=\"number\">8949</span>)</div><div class=\"line\">\tat android.content.Intent.prepareToLeaveProcess(Intent.java:<span class=\"number\">8908</span>)</div><div class=\"line\">\tat android.app.Instrumentation.execStartActivity(Instrumentation.java:<span class=\"number\">1519</span>)</div><div class=\"line\">\tat android.app.ContextImpl.startActivity(ContextImpl.java:<span class=\"number\">829</span>)</div><div class=\"line\">\tat android.app.ContextImpl.startActivity(ContextImpl.java:<span class=\"number\">806</span>)</div><div class=\"line\">\tat android.content.ContextWrapper.startActivity(ContextWrapper.java:<span class=\"number\">366</span>)</div><div class=\"line\">\tat com.mmuu.travel.service.ui.LoginFrg.installAPK(LoginFrg.java:<span class=\"number\">349</span>)</div><div class=\"line\">\tat com.mmuu.travel.service.ui.LoginFrg.access$<span class=\"number\">200</span>(LoginFrg.java:<span class=\"number\">66</span>)</div><div class=\"line\">\tat com.mmuu.travel.service.ui.LoginFrg$<span class=\"number\">1</span>.onFinish(LoginFrg.java:<span class=\"number\">134</span>)</div><div class=\"line\">\tat android.os.CountDownTimer$<span class=\"number\">1</span>.handleMessage(CountDownTimer.java:<span class=\"number\">127</span>)</div><div class=\"line\">\tat android.os.Handler.dispatchMessage(Handler.java:<span class=\"number\">102</span>)</div><div class=\"line\">\tat android.os.Looper.loop(Looper.java:<span class=\"number\">154</span>)</div><div class=\"line\">\tat android.app.ActivityThread.main(ActivityThread.java:<span class=\"number\">6114</span>)</div><div class=\"line\">\tat java.lang.reflect.Method.invoke(Native Method)</div><div class=\"line\">\tat com.android.internal.os.ZygoteInit$MethodAndArgsCaller.run(ZygoteInit.java:<span class=\"number\">874</span>)</div><div class=\"line\">\tat com.android.internal.os.ZygoteInit.main(ZygoteInit.java:<span class=\"number\">764</span>)</div></pre></td></tr></table></figure></p>\n<p>网上搜了一下，是Android N在权限上做了一些修改：<a href=\"https://developer.android.google.cn/about/versions/nougat/android-7.0-changes.html\">参考链接</a> <a href=\"https://developer.android.google.cn/about/versions/nougat/android-7.0-changes.html\">https://developer.android.google.cn/about/versions/nougat/android-7.0-changes.html</a></p>\n<blockquote>\n<p>系统权限更改<br>为了提高私有文件的安全性，面向 Android 7.0 或更高版本的应用私有目录被限制访问　(0700)。此设置可防止私有文件的元数据泄漏，如它们的大小或存在性。此权限更改有多重副作用：<br>私有文件的文件权限不应再由所有者放宽，为使用 MODE_WORLD_READABLE 和/或 MODE_WORLD_WRITEABLE 而进行的此类尝试将触发 SecurityException。</p>\n<blockquote>\n<p>注：迄今为止，这种限制尚不能完全执行。应用仍可能使用原生 API 或 File API 来修改它们的私有目录权限。但是，我们强烈反对放宽私有目录的权限。</p>\n</blockquote>\n<p>传递软件包网域外的 file:// URI 可能给接收器留下无法访问的路径。因此，尝试传递 file:// URI 会触发 FileUriExposedException。分享私有文件内容的推荐方法是使用 FileProvider。<br>DownloadManager 不再按文件名分享私人存储的文件。旧版应用在访问 COLUMN_LOCAL_FILENAME 时可能出现无法访问的路径。面向 Android 7.0 或更高版本的应用在尝试访问 COLUMN_LOCAL_FILENAME 时会触发 SecurityException。通过使用 DownloadManager.Request.setDestinationInExternalFilesDir() 或 DownloadManager.Request.setDestinationInExternalPublicDir() 将下载位置设置为公共位置的旧版应用仍可以访问 COLUMN_LOCAL_FILENAME 中的路径，但是我们强烈反对使用这种方法。对于由 DownloadManager 公开的文件，首选的访问方式是使用ContentResolver.openFileDescriptor()。</p>\n</blockquote>\n<p>解决方案：</p>\n<ol>\n<li>FileProvider<br>1.1 在mainfest中加入FileProvider注册<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">application</span>&gt;</span></div><div class=\"line\">     <span class=\"tag\">&lt;<span class=\"name\">provider</span></div><div class=\"line\">         <span class=\"attr\">android:authorities</span>=<span class=\"string\">\"你的应用名.fileprovider\"</span></div><div class=\"line\">         <span class=\"attr\">android:name</span>=<span class=\"string\">\"android.support.v4.content.FileProvider\"</span></div><div class=\"line\">         <span class=\"attr\">android:grantUriPermissions</span>=<span class=\"string\">\"true\"</span></div><div class=\"line\">         <span class=\"attr\">android:exported</span>=<span class=\"string\">\"false\"</span>&gt;</span></div><div class=\"line\">         <span class=\"tag\">&lt;<span class=\"name\">meta-data</span></div><div class=\"line\">           <span class=\"attr\">android:name</span>=<span class=\"string\">\"android.support.FILE_PROVIDER_PATHS\"</span></div><div class=\"line\">           <span class=\"attr\">android:resource</span>=<span class=\"string\">\"@xml/filepaths\"</span>/&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">provider</span>&gt;</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">application</span>&gt;</span></div></pre></td></tr></table></figure>\n</li>\n</ol>\n<p>1.2 在<code>res</code>文件夹下新建<code>xml</code>文件夹，在<code>xml</code>文件夹中新建<code>filepaths</code>文件，这个文件名字和上面的 Android:resource后面的名字要一致<br>编辑该文件：<br><figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;?xml version=\"1.0\" encoding=\"utf-8\"?&gt;</div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">paths</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">external-path</span></div><div class=\"line\">        <span class=\"attr\">name</span>=<span class=\"string\">\"external_storage_root\"</span></div><div class=\"line\">        <span class=\"attr\">path</span>=<span class=\"string\">\"\"</span> /&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">paths</span>&gt;</span></div></pre></td></tr></table></figure></p>\n<p>1.3 修改安装代码<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">installAPK</span><span class=\"params\">(String filePath)</span> </span>&#123;</div><div class=\"line\">        File apkFile = <span class=\"keyword\">new</span> File(filePath);</div><div class=\"line\">        Intent intent = <span class=\"keyword\">new</span> Intent(Intent.ACTION_VIEW);</div><div class=\"line\">        <span class=\"keyword\">if</span> (!apkFile.exists()) &#123;</div><div class=\"line\">            <span class=\"keyword\">return</span>;</div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\">        <span class=\"keyword\">if</span> (Build.VERSION.SDK_INT &gt;= Build.VERSION_CODES.N) &#123;</div><div class=\"line\">            intent.setFlags(Intent.FLAG_GRANT_READ_URI_PERMISSION);</div><div class=\"line\">            Uri contentUri = FileProvider.getUriForFile(context, BuildConfig.APPLICATION_ID + <span class=\"string\">\".fileProvider\"</span>, apkFile);</div><div class=\"line\">            intent.setDataAndType(contentUri, <span class=\"string\">\"application/vnd.android.package-archive\"</span>);</div><div class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">            intent.setDataAndType(Uri.fromFile(apkFile), <span class=\"string\">\"application/vnd.android.package-archive\"</span>);</div><div class=\"line\">        &#125;</div><div class=\"line\">        getActivity().getApplicationContext().startActivity(intent);</div><div class=\"line\">        context.finish();</div><div class=\"line\">    &#125;</div></pre></td></tr></table></figure></p>\n<p>首先判断设备的Android版本，N或者N以上使用<code>FileProvider</code>进行安装，N一下还是原来的方式。注意调用startActivity要使用ApplicationContext，使用Activity.this会报错。</p>\n<ol>\n<li>使用DownloadManager<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div><div class=\"line\">71</div><div class=\"line\">72</div><div class=\"line\">73</div><div class=\"line\">74</div><div class=\"line\">75</div><div class=\"line\">76</div><div class=\"line\">77</div><div class=\"line\">78</div><div class=\"line\">79</div><div class=\"line\">80</div><div class=\"line\">81</div><div class=\"line\">82</div><div class=\"line\">83</div><div class=\"line\">84</div><div class=\"line\">85</div><div class=\"line\">86</div><div class=\"line\">87</div><div class=\"line\">88</div><div class=\"line\">89</div><div class=\"line\">90</div><div class=\"line\">91</div><div class=\"line\">92</div><div class=\"line\">93</div><div class=\"line\">94</div><div class=\"line\">95</div><div class=\"line\">96</div><div class=\"line\">97</div><div class=\"line\">98</div><div class=\"line\">99</div><div class=\"line\">100</div><div class=\"line\">101</div><div class=\"line\">102</div><div class=\"line\">103</div><div class=\"line\">104</div><div class=\"line\">105</div><div class=\"line\">106</div><div class=\"line\">107</div><div class=\"line\">108</div><div class=\"line\">109</div><div class=\"line\">110</div><div class=\"line\">111</div><div class=\"line\">112</div><div class=\"line\">113</div><div class=\"line\">114</div><div class=\"line\">115</div><div class=\"line\">116</div><div class=\"line\">117</div><div class=\"line\">118</div><div class=\"line\">119</div><div class=\"line\">120</div><div class=\"line\">121</div><div class=\"line\">122</div><div class=\"line\">123</div><div class=\"line\">124</div><div class=\"line\">125</div><div class=\"line\">126</div><div class=\"line\">127</div><div class=\"line\">128</div><div class=\"line\">129</div><div class=\"line\">130</div><div class=\"line\">131</div><div class=\"line\">132</div><div class=\"line\">133</div><div class=\"line\">134</div><div class=\"line\">135</div><div class=\"line\">136</div><div class=\"line\">137</div><div class=\"line\">138</div><div class=\"line\">139</div><div class=\"line\">140</div><div class=\"line\">141</div><div class=\"line\">142</div><div class=\"line\">143</div><div class=\"line\">144</div><div class=\"line\">145</div><div class=\"line\">146</div><div class=\"line\">147</div><div class=\"line\">148</div><div class=\"line\">149</div><div class=\"line\">150</div><div class=\"line\">151</div><div class=\"line\">152</div><div class=\"line\">153</div><div class=\"line\">154</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ApkDownLoad</span> </span>&#123;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> String DOWNLOAD_FOLDER_NAME = getLocalForderPath();</div><div class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> String DOWNLOAD_FILE_NAME = <span class=\"string\">\"XXX.apk\"</span>;</div><div class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> String APK_DOWNLOAD_ID = <span class=\"string\">\"apkDownloadId\"</span>;</div><div class=\"line\">    <span class=\"keyword\">private</span> Context context;</div><div class=\"line\">    <span class=\"keyword\">private</span> String url;</div><div class=\"line\">    <span class=\"keyword\">private</span> String notificationTitle;</div><div class=\"line\">    <span class=\"keyword\">private</span> String notificationDescription;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">private</span> DownloadManager downloadManager;</div><div class=\"line\">    <span class=\"keyword\">private</span> CompleteReceiver completeReceiver;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">/**</div><div class=\"line\">     * <span class=\"doctag\">@param</span> context</div><div class=\"line\">     * <span class=\"doctag\">@param</span> url                     下载apk的url</div><div class=\"line\">     * <span class=\"doctag\">@param</span> notificationTitle       通知栏标题</div><div class=\"line\">     * <span class=\"doctag\">@param</span> notificationDescription 通知栏描述</div><div class=\"line\">     */</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">ApkDownLoad</span><span class=\"params\">(Context context, String url, String notificationTitle,</div><div class=\"line\">                       String notificationDescription)</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">super</span>();</div><div class=\"line\">        <span class=\"keyword\">this</span>.context = context;</div><div class=\"line\">        <span class=\"keyword\">this</span>.url = url;</div><div class=\"line\">        <span class=\"keyword\">this</span>.notificationTitle = notificationTitle;</div><div class=\"line\">        <span class=\"keyword\">this</span>.notificationDescription = notificationDescription;</div><div class=\"line\">        downloadManager = (DownloadManager) context</div><div class=\"line\">                .getSystemService(Context.DOWNLOAD_SERVICE);</div><div class=\"line\">        completeReceiver = <span class=\"keyword\">new</span> CompleteReceiver();</div><div class=\"line\"></div><div class=\"line\">        <span class=\"comment\">/** register download success broadcast **/</span></div><div class=\"line\">        context.registerReceiver(completeReceiver, <span class=\"keyword\">new</span> IntentFilter(</div><div class=\"line\">                DownloadManager.ACTION_DOWNLOAD_COMPLETE));</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">execute</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\"></div><div class=\"line\">        <span class=\"comment\">// 清除已下载的内容重新下载</span></div><div class=\"line\">        <span class=\"keyword\">long</span> downloadId = UpdateUtils.getLong(context, APK_DOWNLOAD_ID);</div><div class=\"line\">        <span class=\"keyword\">if</span> (downloadId != -<span class=\"number\">1</span>) &#123;</div><div class=\"line\">            downloadManager.remove(downloadId);</div><div class=\"line\">            UpdateUtils.removeSharedPreferenceByKey(context, APK_DOWNLOAD_ID);</div><div class=\"line\">        &#125;</div><div class=\"line\">        Request request = <span class=\"keyword\">new</span> Request(Uri.parse(url));</div><div class=\"line\">        <span class=\"comment\">// 设置Notification中显示的文字</span></div><div class=\"line\">        request.setTitle(notificationTitle);</div><div class=\"line\">        request.setDescription(notificationDescription);</div><div class=\"line\">        <span class=\"comment\">// 设置可用的网络类型</span></div><div class=\"line\">        request.setAllowedNetworkTypes(Request.NETWORK_MOBILE</div><div class=\"line\">                | Request.NETWORK_WIFI);</div><div class=\"line\">        <span class=\"comment\">// 设置状态栏中显示Notification</span></div><div class=\"line\">        request.setNotificationVisibility(DownloadManager.Request.VISIBILITY_VISIBLE_NOTIFY_COMPLETED);</div><div class=\"line\">        <span class=\"comment\">// 不显示下载界面</span></div><div class=\"line\">        request.setVisibleInDownloadsUi(<span class=\"keyword\">false</span>);</div><div class=\"line\">        <span class=\"comment\">// 设置下载后文件存放的位置</span></div><div class=\"line\">        File folder = Environment</div><div class=\"line\">                .getExternalStoragePublicDirectory(DOWNLOAD_FOLDER_NAME);</div><div class=\"line\">        <span class=\"keyword\">if</span> (!folder.exists() || !folder.isDirectory()) &#123;</div><div class=\"line\">            folder.mkdirs();</div><div class=\"line\">        &#125;</div><div class=\"line\">        <span class=\"comment\">// 设置下载文件的保存路径</span></div><div class=\"line\">        request.setDestinationInExternalPublicDir(DOWNLOAD_FOLDER_NAME,</div><div class=\"line\">                DOWNLOAD_FILE_NAME);</div><div class=\"line\">        <span class=\"comment\">// 设置文件类型</span></div><div class=\"line\">        MimeTypeMap mimeTypeMap = MimeTypeMap.getSingleton();</div><div class=\"line\">        String mimeString = mimeTypeMap.getMimeTypeFromExtension(MimeTypeMap</div><div class=\"line\">                .getFileExtensionFromUrl(url));</div><div class=\"line\">        request.setMimeType(mimeString);</div><div class=\"line\">        <span class=\"comment\">// 保存返回唯一的downloadId</span></div><div class=\"line\">        UpdateUtils.putLong(context, APK_DOWNLOAD_ID,</div><div class=\"line\">                downloadManager.enqueue(request));</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">CompleteReceiver</span> <span class=\"keyword\">extends</span> <span class=\"title\">BroadcastReceiver</span> </span>&#123;</div><div class=\"line\"></div><div class=\"line\">        <span class=\"meta\">@Override</span></div><div class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onReceive</span><span class=\"params\">(Context context, Intent intent)</span> </span>&#123;</div><div class=\"line\">            <span class=\"comment\">/**</div><div class=\"line\">             * get the id of download which have download success, if the id is</div><div class=\"line\">             * my id and it's status is successful, then install it</div><div class=\"line\">             **/</span></div><div class=\"line\">            <span class=\"keyword\">long</span> completeDownloadId = intent.getLongExtra(</div><div class=\"line\">                    DownloadManager.EXTRA_DOWNLOAD_ID, <span class=\"number\">0</span>);</div><div class=\"line\">            <span class=\"keyword\">long</span> downloadId = UpdateUtils.getLong(context, APK_DOWNLOAD_ID);</div><div class=\"line\"></div><div class=\"line\">            <span class=\"keyword\">if</span> (completeDownloadId == downloadId) &#123;</div><div class=\"line\"></div><div class=\"line\">                <span class=\"comment\">// if download successful</span></div><div class=\"line\">                <span class=\"keyword\">if</span> (queryDownloadStatus(downloadManager, downloadId) == DownloadManager.STATUS_SUCCESSFUL) &#123;</div><div class=\"line\"></div><div class=\"line\">                    <span class=\"comment\">// clear downloadId</span></div><div class=\"line\">                    UpdateUtils.removeSharedPreferenceByKey(context,</div><div class=\"line\">                            APK_DOWNLOAD_ID);</div><div class=\"line\"></div><div class=\"line\">                    <span class=\"comment\">// unregisterReceiver</span></div><div class=\"line\">                    context.unregisterReceiver(completeReceiver);</div><div class=\"line\"></div><div class=\"line\">                    <span class=\"comment\">// install apk</span></div><div class=\"line\">                    String apkFilePath = <span class=\"keyword\">new</span> StringBuilder(Environment</div><div class=\"line\">                            .getExternalStorageDirectory().getAbsolutePath())</div><div class=\"line\">                            .append(File.separator)</div><div class=\"line\">                            .append(DOWNLOAD_FOLDER_NAME)</div><div class=\"line\">                            .append(File.separator).append(DOWNLOAD_FILE_NAME)</div><div class=\"line\">                            .toString();</div><div class=\"line\">                    install(context, apkFilePath);</div><div class=\"line\">                &#125;</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">/**</div><div class=\"line\">     * 查询下载状态</div><div class=\"line\">     */</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">int</span> <span class=\"title\">queryDownloadStatus</span><span class=\"params\">(DownloadManager downloadManager,</div><div class=\"line\">                                          <span class=\"keyword\">long</span> downloadId)</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">int</span> result = -<span class=\"number\">1</span>;</div><div class=\"line\">        DownloadManager.Query query = <span class=\"keyword\">new</span> DownloadManager.Query()</div><div class=\"line\">                .setFilterById(downloadId);</div><div class=\"line\">        Cursor c = <span class=\"keyword\">null</span>;</div><div class=\"line\">        <span class=\"keyword\">try</span> &#123;</div><div class=\"line\">            c = downloadManager.query(query);</div><div class=\"line\">            <span class=\"keyword\">if</span> (c != <span class=\"keyword\">null</span> &amp;&amp; c.moveToFirst()) &#123;</div><div class=\"line\">                result = c.getInt(c</div><div class=\"line\">                        .getColumnIndex(DownloadManager.COLUMN_STATUS));</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125; <span class=\"keyword\">finally</span> &#123;</div><div class=\"line\">            <span class=\"keyword\">if</span> (c != <span class=\"keyword\">null</span>) &#123;</div><div class=\"line\">                c.close();</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;</div><div class=\"line\">        <span class=\"keyword\">return</span> result;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">/**</div><div class=\"line\">     * install app</div><div class=\"line\">     *</div><div class=\"line\">     * <span class=\"doctag\">@param</span> context</div><div class=\"line\">     * <span class=\"doctag\">@param</span> filePath</div><div class=\"line\">     * <span class=\"doctag\">@return</span> whether apk exist</div><div class=\"line\">     */</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">boolean</span> <span class=\"title\">install</span><span class=\"params\">(Context context, String filePath)</span> </span>&#123;</div><div class=\"line\">        Intent i = <span class=\"keyword\">new</span> Intent(Intent.ACTION_VIEW);</div><div class=\"line\">        File file = <span class=\"keyword\">new</span> File(filePath);</div><div class=\"line\">        <span class=\"keyword\">if</span> (file != <span class=\"keyword\">null</span> &amp;&amp; file.length() &gt; <span class=\"number\">0</span> &amp;&amp; file.exists() &amp;&amp; file.isFile()) &#123;</div><div class=\"line\">            i.setDataAndType(Uri.parse(<span class=\"string\">\"file://\"</span> + filePath),</div><div class=\"line\">                    <span class=\"string\">\"application/vnd.android.package-archive\"</span>);</div><div class=\"line\">            i.addFlags(Intent.FLAG_ACTIVITY_NEW_TASK);</div><div class=\"line\">            context.startActivity(i);</div><div class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">true</span>;</div><div class=\"line\">        &#125;</div><div class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">false</span>;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n</li>\n</ol>\n<h2 id=\"检测到需要升级时-new-ApkDownLoad-execute-就可以了，其中UpdateUtils-getLong-是一个SharedPreferences封装。\"><a href=\"#检测到需要升级时-new-ApkDownLoad-execute-就可以了，其中UpdateUtils-getLong-是一个SharedPreferences封装。\" class=\"headerlink\" title=\"检测到需要升级时  new ApkDownLoad().execute()就可以了，其中UpdateUtils.getLong()是一个SharedPreferences封装。\"></a>检测到需要升级时  <code>new ApkDownLoad().execute()</code>就可以了，其中<code>UpdateUtils.getLong()</code>是一个<code>SharedPreferences</code>封装。</h2><h2 id=\"以上两种方式在小米5Android-N-上实测有效\"><a href=\"#以上两种方式在小米5Android-N-上实测有效\" class=\"headerlink\" title=\"以上两种方式在小米5Android N 上实测有效\"></a>以上两种方式在小米5Android N 上实测有效</h2><p>以上</p>"},{"title":"Android hook--反射基础","date":"2018-08-06T07:18:09.000Z","keywords":"AndroidHook,反射,动态代理","_content":"假如你已经非常熟悉java中反射(reflect)和代理(Proxy)，那你还在这里看我这篇文章纯粹就是浪费时间了。\n<!--more-->\n#### 反射是什么\n官方介绍\n> Reflection is commonly used by programs which require the ability to examine or modify the runtime behavior of applications running in the Java virtual machine. This is a relatively advanced feature and should be used only by developers who have a strong grasp of the fundamentals of the language. With that caveat in mind, reflection is a powerful technique and can enable applications to perform operations which would otherwise be impossible.\n\n概括来讲就是：** 反射这个功能很XX **\n大家常见的对反射机制的概念:\n在Java中的反射机制是指在运行状态中，对于任意一个类都能够知道这个类所有的属性和方法；并且对于任意一个对象，都能够调用它的任意一个方法；这种动态获取信息以及动态调用对象方法的功能成为Java语言的反射机制。\n\n#### 涉及到的类\n\n* `Class`：反射的核心类，可以获取类的属性，方法等信息。 \n* `Field`：Java.lang.reflec包中的类，表示类的成员变量，可以用来获取和设置类之中的属性值。 \n* `Method`： Java.lang.reflec包中的类，表示类的方法，它可以用来获取类中的方法信息或者执行方法。 \n* `Constructor`： Java.lang.reflec包中的类，表示类的构造方法。\n  \n#### 简介\n\n先写一个简单的Person类当做目标类\n``` java\nclass Person {\n\tpublic String name;\n\tprivate String nickName;\n\tint age;\n\n\tpublic Person(){}\n\tprotected  Person(int age) {\n\t\tthis. age = age;\n\t}\n\t\n\tprivate Person(String name) {\n\t\tthis.name = name;\n\t}\n\t\n\tpublic Person(String name,String nickName) {\n\t\tthis.name = name;\n\t\tthis.nickName = nickName;\n\t}\n\t\n\tpublic Person(String name, String nickName, int age) {\n\t\tsuper();\n\t\tthis.name = name;\n\t\tthis.nickName = nickName;\n\t\tthis.age = age;\n\t}\n\n\t@Override\n\tpublic String toString() {\n\t\treturn \"Person [name=\" + name + \", nickName=\" + nickName + \", age=\" + age + \"]\";\n\t}\n\n}\n```\n\n##### 获取想要操作的类的Class对象\n1. Object.getClass();\n  ``` java\n    Person person = new Person();\n\t\tClass personClass = person.getClass();\n  ```\n2. 任何数据类型（包括基本数据类型）都有一个“静态”的class属性\n  ``` java\n    Class personClass2 = Person.class;\n  ```\n3. 通过Class类的静态方法：forName（String  className）(常用)   \n  ``` java\n    Class personClass3 = Class.forName(\"com.huangyuanlove.Person\");\n  ```\n  需要注意的是，在运行期间，一个只有一个Class对象：\n  ``` java\n\t\tSystem.out.println(personClass);\n\t\tSystem.out.println(personClass == personClass2);\n\t\tSystem.out.println(personClass == personClass3);\n  ```\n  输出：\n  > class com.huangyuanlove.Person\n    true\n    true\n\n##### 调用Class类中的方法\n###### 获取构造方法并创造对象：\n   ``` java\n   \tPerson person = new Person();\n\t\tClass personClass = person.getClass();\n\n\t\t// 获取所有的公有构造方法\n\t\tConstructor[] publicConstructors = personClass.getConstructors();\n\t\tSystem.out.println(\"获取所有的公有构造方法\");\n\t\tfor (Constructor c : publicConstructors) {\n\t\t\tSystem.out.println(c);\n\t\t}\n\n\t\t// 获取所有的构造方法\n\t\tConstructor[] allConstructors = personClass.getDeclaredConstructors();\n\t\tSystem.out.println(\"获取所有的构造方法\");\n\t\tfor (Constructor c : allConstructors) {\n\t\t\tSystem.out.println(c);\n\t\t}\n\n\t\t// 获取公有，无参构造方法\n\t\tConstructor publicConstructorWithoutArgs = personClass.getConstructor();\n\t\tSystem.out.println(\"获取公有，无参构造方法\");\n\t\tSystem.out.println(publicConstructorWithoutArgs);\n\t\tSystem.out.println(publicConstructorWithoutArgs.newInstance());\n\n\t\t// 获取私有，有一个String类型参数的构造方法\n\t\tConstructor publicConstructorWithOneStringArgs = personClass.getDeclaredConstructor(String.class);\n\t\tSystem.out.println(\"获取私有，有一个String类型参数的构造方法\");\n\t\tSystem.out.println(publicConstructorWithOneStringArgs);\n\t\tpersonClass.getDeclaredField(\"nickName\").setAccessible(true);\n\t\tSystem.out.println(publicConstructorWithOneStringArgs.newInstance(\"xuan\"));\n\n\t\t// 获取公有，有两个个String类型参数的构造方法\n\t\tConstructor publicConstructorWithTwoStringArgs = personClass.getConstructor(String.class, String.class);\n\t\tSystem.out.println(\"获取公有，有两个个String类型参数的构造方法\");\n\t\tSystem.out.println(publicConstructorWithTwoStringArgs);\n\t\tpublicConstructorWithTwoStringArgs.setAccessible(true);\n\t\tSystem.out.println(publicConstructorWithTwoStringArgs.newInstance(\"xuan\", \"huangyuan\"));\n   ```\n  这里需要注意的是，在获取私有，有一个String类型参数的构造方法，并调用`newInstance`方法的时候会抛出异常，这是因为该构造方法中的`nickName`字段是私有的,将其注释掉可获得如下输出\n  输出：\n  > 获取所有的公有构造方法\n    public com.huangyuanlove.Person(java.lang.String,java.lang.String,int)\n    public com.huangyuanlove.Person(java.lang.String,java.lang.String)\n    public com.huangyuanlove.Person()\n    获取所有的构造方法\n    public com.huangyuanlove.Person(java.lang.String,java.lang.String,int)\n    public com.huangyuanlove.Person(java.lang.String,java.lang.String)\n    private com.huangyuanlove.Person(java.lang.String)\n    protected com.huangyuanlove.Person(int)\n    public com.huangyuanlove.Person()\n    获取公有，无参构造方法\n    public com.huangyuanlove.Person()\n    Person [name=null, nickName=null, age=0]\n    获取私有，有一个String类型参数的构造方法\n    private com.huangyuanlove.Person(java.lang.String)\n    获取公有，有两个个String类型参数的构造方法\n    public com.huangyuanlove.Person(java.lang.String,java.lang.String)\n    Person [name=xuan, nickName=huangyuan, age=0]\n\n###### 获取成员变量并进行操作\n  ``` java\n    Person person = new Person();\n\t\tClass personClass = person.getClass();\n\n\t\t// 获取所有的公共成员变量\n\t\tField publicFields[] = personClass.getFields();\n\t\tSystem.out.println(\"获取所有的公共成员变量\");\n\t\tfor (Field f : publicFields) {\n\t\t\tSystem.out.println(f);\n\t\t}\n\t\t// 获取所有的成员变量\n\t\tField allFields[] = personClass.getDeclaredFields();\n\t\tSystem.out.println(\"获取所有的成员变量\");\n\t\tfor (Field f : allFields) {\n\t\t\tSystem.out.println(f);\n\t\t}\n\n\t\t// 获取某个公有成员变量并赋值\n\t\tField nameField = personClass.getField(\"name\");\n\t\tnameField.set(person, \"huangyuan\");\n\t\tSystem.out.println(person);\n\n\t\t// 获取某个私有成员变量并赋值\n\t\tField nickNameField = personClass.getDeclaredField(\"nickName\");\n    //因为nickName是私有的，所有需要先设置可访问\n\t\tnickNameField.setAccessible(true);\n\t\tnickNameField.set(person, \"xuan\");\n\t\tSystem.out.println(person);\n  ```\n  可以得到如下输出：\n  > 获取所有的公共成员变量\n    public java.lang.String com.huangyuanlove.Person.name\n    获取所有的成员变量\n    public java.lang.String com.huangyuanlove.Person.name\n    private java.lang.String com.huangyuanlove.Person.nickName\n    int com.huangyuanlove.Person.age\n    Person [name=huangyuan, nickName=null, age=0]\n    Person [name=huangyuan, nickName=xuan, age=0]\n\n  重要的事情来了，一定要记住，谁要是想上面那样反射获取类的公有成员变量然后进行赋值操作，肯定被骂的祸国殃民、民不聊生、生灵涂炭，都public了你还反射。\n  获取私有变量的时候需要使用`getDeclaredField`方法，否则会抛出`noSuchFieldException`\n\n###### 获取方法并进行调用\n   在类中添加两个方法\n   ``` java\n    public void sayHi() {\n        System.out.println(\"hi\");\n    }\n    \n    private void saySomeThing(String someThing) {\n        System.out.println(someThing);\n    }\n   ```\n  反射获取类方法并进行调用\n  ``` java\n    Person person = new Person();\n\t\tClass personClass = person.getClass();\n\n\t\t// 获取所有公共方法\n\t\tSystem.out.println(\"获取所有公共方法\");\n\t\tMethod publicMethods[] = personClass.getMethods();\n\t\tfor (Method m : publicMethods) {\n\t\t\tSystem.out.println(m.getName());\n\t\t}\n\n\t\t// 获取所有方法\n\t\tSystem.out.println(\"获取所有方法\");\n\t\tMethod allMethods[] = personClass.getDeclaredMethods();\n\t\tfor (Method m : allMethods) {\n\t\t\tSystem.out.println(m.getName());\n\t\t}\n\n\t\t// 获取指定的公有方法\n\t\tSystem.out.println(\"获取指定的公有方法\");\n\t\tMethod publicMethodWithoutArgs = personClass.getMethod(\"sayHi\");\n\t\tpublicMethodWithoutArgs.invoke(person);\n\n\t\t// 获取指定的私有方法\n\t\tSystem.out.println(\"获取指定的私有方法\");\n\t\tMethod privateMethodWithStringArgs = personClass.getDeclaredMethod(\"saySomeThing\", String.class);\n\t\tprivateMethodWithStringArgs.setAccessible(true);\n\t\tprivateMethodWithStringArgs.invoke(person, \"someThing\");\n  ```\n  得到输出：\n  > 获取所有公共方法\n    toString\n    sayHi\n    wait\n    wait\n    wait\n    equals\n    hashCode\n    getClass\n    notify\n    notifyAll\n    获取所有方法\n    toString\n    sayHi\n    saySomeThing\n    获取指定的公有方法\n    hi\n    获取指定的私有方法\n    someThing\n\n  获取到的方法中并不包含构造方法，但是包含从父类继承下来的公共方法。和上面的获取成员变量赋值一样，谁要是反射去获取公共方法再去调用，基本上就凉了。\n\n#### 静态代理和动态代理\n##### 静态代理\n简单来说，代理就是用一个代理类来封装一个委托类，这样做有两个好处：可以隐藏委托类的具体实现；可以在不改变委托类的情况下增加额外的操作。而静态代理，就是在程序运行之前，代理类就已经存在了。静态代理一般的实现方式为：委托类和代理类都实现同一个接口或者是继承自同一个父类，然后在代理类中保存一个委托类的对象引用（父类或者父类接口的对象引用），通过给构造器传入委托类的对象进行初始化，在同名方法中通过调用委托类的方法实现静态代理。除此之外，在代理类同名方法中还可以实现一些额外的功能。代码如下：\nRealObject类为委托类，SimpleProxy类为代理类：\n``` java\ninterface Interface {\n    void doSomething();\n\n    void somethingElse(String arg);\n}\n\nclass RealObject implements Interface {\n    @Override\n    public void doSomething() {\n        // TODO Auto-generated method stub\n        System.out.println(\"doSomething\");\n    }\n\n    @Override\n    public void somethingElse(String arg) {\n        // TODO Auto-generated method stub\n        System.out.println(\"somethingElse \" + arg);\n    }\n}\n\nclass SimpleProxy implements Interface {\n    // 保存委托类（父接口的引用）\n    private Interface proxied;\n\n    // 传入委托类的对象用于初始化\n    public SimpleProxy(Interface proxied) {\n        this.proxied = proxied;\n    }\n\n    // 两个同名方法中还实现了其他的功能\n    @Override\n    public void doSomething() {\n        // TODO Auto-generated method stub\n        System.out.println(\"SimpleProxy doSomething\");\n        proxied.doSomething();\n    }\n\n    @Override\n    public void somethingElse(String arg) {\n        // TODO Auto-generated method stub\n        System.out.println(\"SimpleProxy somethingElse \" + arg);\n        proxied.somethingElse(arg);\n    }\n}\n\npublic class SimpleProxyDemo {\n    public static void main(String[] args) {\n        consumer(new RealObject());\n        consumer(new SimpleProxy(new RealObject()));\n    }\n\n    public static void consumer(Interface iface) {\n        iface.doSomething();\n        iface.somethingElse(\"bonobo\");\n    }\n}\n```\n##### 动态代理\n静态代理的局限性在于，代理类需要在程序运行之前就编写好，而动态代理则可以在程序运行的过程中动态创建并处理对所代理方法的调用。在动态代理中，需要定义一个中介类，这个类实现InvocationHandle接口（主要是里面的invoke方法）。这个中介类位于委托类和代理类之间，作为一个调用处理器而存在。它保存一个委托类的引用，通过传入委托类对象进行初始化；然后在invoke方法中，实现对委托类方法的调用，并增加需要的额外操作。在需要使用动态代理时，首先通过Proxy类中的newProxyInstance方法得到代理类对象（方法的三个参数分别是：（通常是委托类实现接口的）类加载器，希望代理类实现的接口列表（通常也是委托类实现的接口），以及一个调用处理器的对象），然后通过这个代理类对象直接调用代理类的方法。这种调用实际上会通过调用处理器调用invoke方法，进而实现对委托类相应方法的调用。\n\n注意在动态代理中，只实现了一个调用处理器，而没有真正实现代理类。代理类对象是通过Proxy类中的newProxyInstance方法得到的。这样，不管你在调用委托类任何方法时需要加入的额外操作都可以仅仅在调用处理器中的invoke方法中实现就可以了。代码示例如下\n``` java\npublic class SimpleDynamiProxyDemo {\n    public static void consumer(Interface iface) {\n        iface.doSomething();\n        iface.somethingElse(\"bonobo\");\n    }\n\n    public static void main(String[] args) {\n        RealObject real = new RealObject();\n        consumer(real);\n        // 通过Proxy.newProxyInstance方法得到代理类对象\n        Interface proxy = (Interface) Proxy.newProxyInstance(Interface.class.getClassLoader(),\n                new Class[] { Interface.class }, new DynamicProxyHandler(real));\n        // 通过代理类对象直接调用方法，会被重定向到调用处理器上的invoke方法\n        consumer(proxy);\n\n    }\n}\n\n// 中介类（调用处理器）\nclass DynamicProxyHandler implements InvocationHandler {\n    // 保存一个委托类的对象\n    private Object proxied;\n\n    public DynamicProxyHandler(Object proxied) {\n        this.proxied = proxied;\n    }\n\n    // 三个参数：代理类的引用，方法名和方法的参数列表\n    @Override\n    public Object invoke(Object proxy, Method method, Object[] args) throws Throwable {\n        // TODO Auto-generated method stub\n        System.out.println(\"**** proxy: \" + proxy.getClass() + \", method: \" + method + \", args: \" + args);\n        if (args != null) {\n            for (Object arg : args) {\n                System.out.println(\" \" + arg);\n            }\n        }\n        // 实现对委托类方法的调用，参数表示委托类对象和参数\n        return method.invoke(proxied, args);\n    }\n}\n```\n----\n以上\n以上静态代理和动态代理相关的文字代码出自于 https://www.cnblogs.com/hrcnblogs/p/8711418.html\n","source":"_posts/Android-hook--反射基础.md","raw":"---\ntitle: Android hook--反射基础\ndate: 2018-08-06 15:18:09\ntags: [Android,java]\nkeywords: AndroidHook,反射,动态代理\n\n---\n假如你已经非常熟悉java中反射(reflect)和代理(Proxy)，那你还在这里看我这篇文章纯粹就是浪费时间了。\n<!--more-->\n#### 反射是什么\n官方介绍\n> Reflection is commonly used by programs which require the ability to examine or modify the runtime behavior of applications running in the Java virtual machine. This is a relatively advanced feature and should be used only by developers who have a strong grasp of the fundamentals of the language. With that caveat in mind, reflection is a powerful technique and can enable applications to perform operations which would otherwise be impossible.\n\n概括来讲就是：** 反射这个功能很XX **\n大家常见的对反射机制的概念:\n在Java中的反射机制是指在运行状态中，对于任意一个类都能够知道这个类所有的属性和方法；并且对于任意一个对象，都能够调用它的任意一个方法；这种动态获取信息以及动态调用对象方法的功能成为Java语言的反射机制。\n\n#### 涉及到的类\n\n* `Class`：反射的核心类，可以获取类的属性，方法等信息。 \n* `Field`：Java.lang.reflec包中的类，表示类的成员变量，可以用来获取和设置类之中的属性值。 \n* `Method`： Java.lang.reflec包中的类，表示类的方法，它可以用来获取类中的方法信息或者执行方法。 \n* `Constructor`： Java.lang.reflec包中的类，表示类的构造方法。\n  \n#### 简介\n\n先写一个简单的Person类当做目标类\n``` java\nclass Person {\n\tpublic String name;\n\tprivate String nickName;\n\tint age;\n\n\tpublic Person(){}\n\tprotected  Person(int age) {\n\t\tthis. age = age;\n\t}\n\t\n\tprivate Person(String name) {\n\t\tthis.name = name;\n\t}\n\t\n\tpublic Person(String name,String nickName) {\n\t\tthis.name = name;\n\t\tthis.nickName = nickName;\n\t}\n\t\n\tpublic Person(String name, String nickName, int age) {\n\t\tsuper();\n\t\tthis.name = name;\n\t\tthis.nickName = nickName;\n\t\tthis.age = age;\n\t}\n\n\t@Override\n\tpublic String toString() {\n\t\treturn \"Person [name=\" + name + \", nickName=\" + nickName + \", age=\" + age + \"]\";\n\t}\n\n}\n```\n\n##### 获取想要操作的类的Class对象\n1. Object.getClass();\n  ``` java\n    Person person = new Person();\n\t\tClass personClass = person.getClass();\n  ```\n2. 任何数据类型（包括基本数据类型）都有一个“静态”的class属性\n  ``` java\n    Class personClass2 = Person.class;\n  ```\n3. 通过Class类的静态方法：forName（String  className）(常用)   \n  ``` java\n    Class personClass3 = Class.forName(\"com.huangyuanlove.Person\");\n  ```\n  需要注意的是，在运行期间，一个只有一个Class对象：\n  ``` java\n\t\tSystem.out.println(personClass);\n\t\tSystem.out.println(personClass == personClass2);\n\t\tSystem.out.println(personClass == personClass3);\n  ```\n  输出：\n  > class com.huangyuanlove.Person\n    true\n    true\n\n##### 调用Class类中的方法\n###### 获取构造方法并创造对象：\n   ``` java\n   \tPerson person = new Person();\n\t\tClass personClass = person.getClass();\n\n\t\t// 获取所有的公有构造方法\n\t\tConstructor[] publicConstructors = personClass.getConstructors();\n\t\tSystem.out.println(\"获取所有的公有构造方法\");\n\t\tfor (Constructor c : publicConstructors) {\n\t\t\tSystem.out.println(c);\n\t\t}\n\n\t\t// 获取所有的构造方法\n\t\tConstructor[] allConstructors = personClass.getDeclaredConstructors();\n\t\tSystem.out.println(\"获取所有的构造方法\");\n\t\tfor (Constructor c : allConstructors) {\n\t\t\tSystem.out.println(c);\n\t\t}\n\n\t\t// 获取公有，无参构造方法\n\t\tConstructor publicConstructorWithoutArgs = personClass.getConstructor();\n\t\tSystem.out.println(\"获取公有，无参构造方法\");\n\t\tSystem.out.println(publicConstructorWithoutArgs);\n\t\tSystem.out.println(publicConstructorWithoutArgs.newInstance());\n\n\t\t// 获取私有，有一个String类型参数的构造方法\n\t\tConstructor publicConstructorWithOneStringArgs = personClass.getDeclaredConstructor(String.class);\n\t\tSystem.out.println(\"获取私有，有一个String类型参数的构造方法\");\n\t\tSystem.out.println(publicConstructorWithOneStringArgs);\n\t\tpersonClass.getDeclaredField(\"nickName\").setAccessible(true);\n\t\tSystem.out.println(publicConstructorWithOneStringArgs.newInstance(\"xuan\"));\n\n\t\t// 获取公有，有两个个String类型参数的构造方法\n\t\tConstructor publicConstructorWithTwoStringArgs = personClass.getConstructor(String.class, String.class);\n\t\tSystem.out.println(\"获取公有，有两个个String类型参数的构造方法\");\n\t\tSystem.out.println(publicConstructorWithTwoStringArgs);\n\t\tpublicConstructorWithTwoStringArgs.setAccessible(true);\n\t\tSystem.out.println(publicConstructorWithTwoStringArgs.newInstance(\"xuan\", \"huangyuan\"));\n   ```\n  这里需要注意的是，在获取私有，有一个String类型参数的构造方法，并调用`newInstance`方法的时候会抛出异常，这是因为该构造方法中的`nickName`字段是私有的,将其注释掉可获得如下输出\n  输出：\n  > 获取所有的公有构造方法\n    public com.huangyuanlove.Person(java.lang.String,java.lang.String,int)\n    public com.huangyuanlove.Person(java.lang.String,java.lang.String)\n    public com.huangyuanlove.Person()\n    获取所有的构造方法\n    public com.huangyuanlove.Person(java.lang.String,java.lang.String,int)\n    public com.huangyuanlove.Person(java.lang.String,java.lang.String)\n    private com.huangyuanlove.Person(java.lang.String)\n    protected com.huangyuanlove.Person(int)\n    public com.huangyuanlove.Person()\n    获取公有，无参构造方法\n    public com.huangyuanlove.Person()\n    Person [name=null, nickName=null, age=0]\n    获取私有，有一个String类型参数的构造方法\n    private com.huangyuanlove.Person(java.lang.String)\n    获取公有，有两个个String类型参数的构造方法\n    public com.huangyuanlove.Person(java.lang.String,java.lang.String)\n    Person [name=xuan, nickName=huangyuan, age=0]\n\n###### 获取成员变量并进行操作\n  ``` java\n    Person person = new Person();\n\t\tClass personClass = person.getClass();\n\n\t\t// 获取所有的公共成员变量\n\t\tField publicFields[] = personClass.getFields();\n\t\tSystem.out.println(\"获取所有的公共成员变量\");\n\t\tfor (Field f : publicFields) {\n\t\t\tSystem.out.println(f);\n\t\t}\n\t\t// 获取所有的成员变量\n\t\tField allFields[] = personClass.getDeclaredFields();\n\t\tSystem.out.println(\"获取所有的成员变量\");\n\t\tfor (Field f : allFields) {\n\t\t\tSystem.out.println(f);\n\t\t}\n\n\t\t// 获取某个公有成员变量并赋值\n\t\tField nameField = personClass.getField(\"name\");\n\t\tnameField.set(person, \"huangyuan\");\n\t\tSystem.out.println(person);\n\n\t\t// 获取某个私有成员变量并赋值\n\t\tField nickNameField = personClass.getDeclaredField(\"nickName\");\n    //因为nickName是私有的，所有需要先设置可访问\n\t\tnickNameField.setAccessible(true);\n\t\tnickNameField.set(person, \"xuan\");\n\t\tSystem.out.println(person);\n  ```\n  可以得到如下输出：\n  > 获取所有的公共成员变量\n    public java.lang.String com.huangyuanlove.Person.name\n    获取所有的成员变量\n    public java.lang.String com.huangyuanlove.Person.name\n    private java.lang.String com.huangyuanlove.Person.nickName\n    int com.huangyuanlove.Person.age\n    Person [name=huangyuan, nickName=null, age=0]\n    Person [name=huangyuan, nickName=xuan, age=0]\n\n  重要的事情来了，一定要记住，谁要是想上面那样反射获取类的公有成员变量然后进行赋值操作，肯定被骂的祸国殃民、民不聊生、生灵涂炭，都public了你还反射。\n  获取私有变量的时候需要使用`getDeclaredField`方法，否则会抛出`noSuchFieldException`\n\n###### 获取方法并进行调用\n   在类中添加两个方法\n   ``` java\n    public void sayHi() {\n        System.out.println(\"hi\");\n    }\n    \n    private void saySomeThing(String someThing) {\n        System.out.println(someThing);\n    }\n   ```\n  反射获取类方法并进行调用\n  ``` java\n    Person person = new Person();\n\t\tClass personClass = person.getClass();\n\n\t\t// 获取所有公共方法\n\t\tSystem.out.println(\"获取所有公共方法\");\n\t\tMethod publicMethods[] = personClass.getMethods();\n\t\tfor (Method m : publicMethods) {\n\t\t\tSystem.out.println(m.getName());\n\t\t}\n\n\t\t// 获取所有方法\n\t\tSystem.out.println(\"获取所有方法\");\n\t\tMethod allMethods[] = personClass.getDeclaredMethods();\n\t\tfor (Method m : allMethods) {\n\t\t\tSystem.out.println(m.getName());\n\t\t}\n\n\t\t// 获取指定的公有方法\n\t\tSystem.out.println(\"获取指定的公有方法\");\n\t\tMethod publicMethodWithoutArgs = personClass.getMethod(\"sayHi\");\n\t\tpublicMethodWithoutArgs.invoke(person);\n\n\t\t// 获取指定的私有方法\n\t\tSystem.out.println(\"获取指定的私有方法\");\n\t\tMethod privateMethodWithStringArgs = personClass.getDeclaredMethod(\"saySomeThing\", String.class);\n\t\tprivateMethodWithStringArgs.setAccessible(true);\n\t\tprivateMethodWithStringArgs.invoke(person, \"someThing\");\n  ```\n  得到输出：\n  > 获取所有公共方法\n    toString\n    sayHi\n    wait\n    wait\n    wait\n    equals\n    hashCode\n    getClass\n    notify\n    notifyAll\n    获取所有方法\n    toString\n    sayHi\n    saySomeThing\n    获取指定的公有方法\n    hi\n    获取指定的私有方法\n    someThing\n\n  获取到的方法中并不包含构造方法，但是包含从父类继承下来的公共方法。和上面的获取成员变量赋值一样，谁要是反射去获取公共方法再去调用，基本上就凉了。\n\n#### 静态代理和动态代理\n##### 静态代理\n简单来说，代理就是用一个代理类来封装一个委托类，这样做有两个好处：可以隐藏委托类的具体实现；可以在不改变委托类的情况下增加额外的操作。而静态代理，就是在程序运行之前，代理类就已经存在了。静态代理一般的实现方式为：委托类和代理类都实现同一个接口或者是继承自同一个父类，然后在代理类中保存一个委托类的对象引用（父类或者父类接口的对象引用），通过给构造器传入委托类的对象进行初始化，在同名方法中通过调用委托类的方法实现静态代理。除此之外，在代理类同名方法中还可以实现一些额外的功能。代码如下：\nRealObject类为委托类，SimpleProxy类为代理类：\n``` java\ninterface Interface {\n    void doSomething();\n\n    void somethingElse(String arg);\n}\n\nclass RealObject implements Interface {\n    @Override\n    public void doSomething() {\n        // TODO Auto-generated method stub\n        System.out.println(\"doSomething\");\n    }\n\n    @Override\n    public void somethingElse(String arg) {\n        // TODO Auto-generated method stub\n        System.out.println(\"somethingElse \" + arg);\n    }\n}\n\nclass SimpleProxy implements Interface {\n    // 保存委托类（父接口的引用）\n    private Interface proxied;\n\n    // 传入委托类的对象用于初始化\n    public SimpleProxy(Interface proxied) {\n        this.proxied = proxied;\n    }\n\n    // 两个同名方法中还实现了其他的功能\n    @Override\n    public void doSomething() {\n        // TODO Auto-generated method stub\n        System.out.println(\"SimpleProxy doSomething\");\n        proxied.doSomething();\n    }\n\n    @Override\n    public void somethingElse(String arg) {\n        // TODO Auto-generated method stub\n        System.out.println(\"SimpleProxy somethingElse \" + arg);\n        proxied.somethingElse(arg);\n    }\n}\n\npublic class SimpleProxyDemo {\n    public static void main(String[] args) {\n        consumer(new RealObject());\n        consumer(new SimpleProxy(new RealObject()));\n    }\n\n    public static void consumer(Interface iface) {\n        iface.doSomething();\n        iface.somethingElse(\"bonobo\");\n    }\n}\n```\n##### 动态代理\n静态代理的局限性在于，代理类需要在程序运行之前就编写好，而动态代理则可以在程序运行的过程中动态创建并处理对所代理方法的调用。在动态代理中，需要定义一个中介类，这个类实现InvocationHandle接口（主要是里面的invoke方法）。这个中介类位于委托类和代理类之间，作为一个调用处理器而存在。它保存一个委托类的引用，通过传入委托类对象进行初始化；然后在invoke方法中，实现对委托类方法的调用，并增加需要的额外操作。在需要使用动态代理时，首先通过Proxy类中的newProxyInstance方法得到代理类对象（方法的三个参数分别是：（通常是委托类实现接口的）类加载器，希望代理类实现的接口列表（通常也是委托类实现的接口），以及一个调用处理器的对象），然后通过这个代理类对象直接调用代理类的方法。这种调用实际上会通过调用处理器调用invoke方法，进而实现对委托类相应方法的调用。\n\n注意在动态代理中，只实现了一个调用处理器，而没有真正实现代理类。代理类对象是通过Proxy类中的newProxyInstance方法得到的。这样，不管你在调用委托类任何方法时需要加入的额外操作都可以仅仅在调用处理器中的invoke方法中实现就可以了。代码示例如下\n``` java\npublic class SimpleDynamiProxyDemo {\n    public static void consumer(Interface iface) {\n        iface.doSomething();\n        iface.somethingElse(\"bonobo\");\n    }\n\n    public static void main(String[] args) {\n        RealObject real = new RealObject();\n        consumer(real);\n        // 通过Proxy.newProxyInstance方法得到代理类对象\n        Interface proxy = (Interface) Proxy.newProxyInstance(Interface.class.getClassLoader(),\n                new Class[] { Interface.class }, new DynamicProxyHandler(real));\n        // 通过代理类对象直接调用方法，会被重定向到调用处理器上的invoke方法\n        consumer(proxy);\n\n    }\n}\n\n// 中介类（调用处理器）\nclass DynamicProxyHandler implements InvocationHandler {\n    // 保存一个委托类的对象\n    private Object proxied;\n\n    public DynamicProxyHandler(Object proxied) {\n        this.proxied = proxied;\n    }\n\n    // 三个参数：代理类的引用，方法名和方法的参数列表\n    @Override\n    public Object invoke(Object proxy, Method method, Object[] args) throws Throwable {\n        // TODO Auto-generated method stub\n        System.out.println(\"**** proxy: \" + proxy.getClass() + \", method: \" + method + \", args: \" + args);\n        if (args != null) {\n            for (Object arg : args) {\n                System.out.println(\" \" + arg);\n            }\n        }\n        // 实现对委托类方法的调用，参数表示委托类对象和参数\n        return method.invoke(proxied, args);\n    }\n}\n```\n----\n以上\n以上静态代理和动态代理相关的文字代码出自于 https://www.cnblogs.com/hrcnblogs/p/8711418.html\n","slug":"Android-hook--反射基础","published":1,"updated":"2018-08-06T13:15:46.774Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjl3vbtpt0006isdg193wzfpg","content":"<p>假如你已经非常熟悉java中反射(reflect)和代理(Proxy)，那你还在这里看我这篇文章纯粹就是浪费时间了。<br><a id=\"more\"></a></p>\n<h4 id=\"反射是什么\"><a href=\"#反射是什么\" class=\"headerlink\" title=\"反射是什么\"></a>反射是什么</h4><p>官方介绍</p>\n<blockquote>\n<p>Reflection is commonly used by programs which require the ability to examine or modify the runtime behavior of applications running in the Java virtual machine. This is a relatively advanced feature and should be used only by developers who have a strong grasp of the fundamentals of the language. With that caveat in mind, reflection is a powerful technique and can enable applications to perform operations which would otherwise be impossible.</p>\n</blockquote>\n<p>概括来讲就是：<strong> 反射这个功能很XX </strong><br>大家常见的对反射机制的概念:<br>在Java中的反射机制是指在运行状态中，对于任意一个类都能够知道这个类所有的属性和方法；并且对于任意一个对象，都能够调用它的任意一个方法；这种动态获取信息以及动态调用对象方法的功能成为Java语言的反射机制。</p>\n<h4 id=\"涉及到的类\"><a href=\"#涉及到的类\" class=\"headerlink\" title=\"涉及到的类\"></a>涉及到的类</h4><ul>\n<li><code>Class</code>：反射的核心类，可以获取类的属性，方法等信息。 </li>\n<li><code>Field</code>：Java.lang.reflec包中的类，表示类的成员变量，可以用来获取和设置类之中的属性值。 </li>\n<li><code>Method</code>： Java.lang.reflec包中的类，表示类的方法，它可以用来获取类中的方法信息或者执行方法。 </li>\n<li><code>Constructor</code>： Java.lang.reflec包中的类，表示类的构造方法。</li>\n</ul>\n<h4 id=\"简介\"><a href=\"#简介\" class=\"headerlink\" title=\"简介\"></a>简介</h4><p>先写一个简单的Person类当做目标类<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Person</span> </span>&#123;</div><div class=\"line\">\t<span class=\"keyword\">public</span> String name;</div><div class=\"line\">\t<span class=\"keyword\">private</span> String nickName;</div><div class=\"line\">\t<span class=\"keyword\">int</span> age;</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">Person</span><span class=\"params\">()</span></span>&#123;&#125;</div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">protected</span>  <span class=\"title\">Person</span><span class=\"params\">(<span class=\"keyword\">int</span> age)</span> </span>&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">this</span>. age = age;</div><div class=\"line\">\t&#125;</div><div class=\"line\">\t</div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">private</span> <span class=\"title\">Person</span><span class=\"params\">(String name)</span> </span>&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">this</span>.name = name;</div><div class=\"line\">\t&#125;</div><div class=\"line\">\t</div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">Person</span><span class=\"params\">(String name,String nickName)</span> </span>&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">this</span>.name = name;</div><div class=\"line\">\t\t<span class=\"keyword\">this</span>.nickName = nickName;</div><div class=\"line\">\t&#125;</div><div class=\"line\">\t</div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">Person</span><span class=\"params\">(String name, String nickName, <span class=\"keyword\">int</span> age)</span> </span>&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">super</span>();</div><div class=\"line\">\t\t<span class=\"keyword\">this</span>.name = name;</div><div class=\"line\">\t\t<span class=\"keyword\">this</span>.nickName = nickName;</div><div class=\"line\">\t\t<span class=\"keyword\">this</span>.age = age;</div><div class=\"line\">\t&#125;</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"meta\">@Override</span></div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">toString</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"string\">\"Person [name=\"</span> + name + <span class=\"string\">\", nickName=\"</span> + nickName + <span class=\"string\">\", age=\"</span> + age + <span class=\"string\">\"]\"</span>;</div><div class=\"line\">\t&#125;</div><div class=\"line\"></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<h5 id=\"获取想要操作的类的Class对象\"><a href=\"#获取想要操作的类的Class对象\" class=\"headerlink\" title=\"获取想要操作的类的Class对象\"></a>获取想要操作的类的Class对象</h5><ol>\n<li><p>Object.getClass();</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">  Person person = <span class=\"keyword\">new</span> Person();</div><div class=\"line\">Class personClass = person.getClass();</div></pre></td></tr></table></figure>\n</li>\n<li><p>任何数据类型（包括基本数据类型）都有一个“静态”的class属性</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">Class personClass2 = Person.class;</div></pre></td></tr></table></figure>\n</li>\n<li><p>通过Class类的静态方法：forName（String  className）(常用)   </p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">Class personClass3 = Class.forName(<span class=\"string\">\"com.huangyuanlove.Person\"</span>);</div></pre></td></tr></table></figure>\n<p>需要注意的是，在运行期间，一个只有一个Class对象：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">System.out.println(personClass);</div><div class=\"line\">System.out.println(personClass == personClass2);</div><div class=\"line\">System.out.println(personClass == personClass3);</div></pre></td></tr></table></figure>\n<p>输出：</p>\n<blockquote>\n<p>class com.huangyuanlove.Person<br> true<br> true</p>\n</blockquote>\n</li>\n</ol>\n<h5 id=\"调用Class类中的方法\"><a href=\"#调用Class类中的方法\" class=\"headerlink\" title=\"调用Class类中的方法\"></a>调用Class类中的方法</h5><h6 id=\"获取构造方法并创造对象：\"><a href=\"#获取构造方法并创造对象：\" class=\"headerlink\" title=\"获取构造方法并创造对象：\"></a>获取构造方法并创造对象：</h6>   <figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div></pre></td><td class=\"code\"><pre><div class=\"line\"> \tPerson person = <span class=\"keyword\">new</span> Person();</div><div class=\"line\">Class personClass = person.getClass();</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// 获取所有的公有构造方法</span></div><div class=\"line\">Constructor[] publicConstructors = personClass.getConstructors();</div><div class=\"line\">System.out.println(<span class=\"string\">\"获取所有的公有构造方法\"</span>);</div><div class=\"line\"><span class=\"keyword\">for</span> (Constructor c : publicConstructors) &#123;</div><div class=\"line\">\tSystem.out.println(c);</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// 获取所有的构造方法</span></div><div class=\"line\">Constructor[] allConstructors = personClass.getDeclaredConstructors();</div><div class=\"line\">System.out.println(<span class=\"string\">\"获取所有的构造方法\"</span>);</div><div class=\"line\"><span class=\"keyword\">for</span> (Constructor c : allConstructors) &#123;</div><div class=\"line\">\tSystem.out.println(c);</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// 获取公有，无参构造方法</span></div><div class=\"line\">Constructor publicConstructorWithoutArgs = personClass.getConstructor();</div><div class=\"line\">System.out.println(<span class=\"string\">\"获取公有，无参构造方法\"</span>);</div><div class=\"line\">System.out.println(publicConstructorWithoutArgs);</div><div class=\"line\">System.out.println(publicConstructorWithoutArgs.newInstance());</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// 获取私有，有一个String类型参数的构造方法</span></div><div class=\"line\">Constructor publicConstructorWithOneStringArgs = personClass.getDeclaredConstructor(String.class);</div><div class=\"line\">System.out.println(<span class=\"string\">\"获取私有，有一个String类型参数的构造方法\"</span>);</div><div class=\"line\">System.out.println(publicConstructorWithOneStringArgs);</div><div class=\"line\">personClass.getDeclaredField(<span class=\"string\">\"nickName\"</span>).setAccessible(<span class=\"keyword\">true</span>);</div><div class=\"line\">System.out.println(publicConstructorWithOneStringArgs.newInstance(<span class=\"string\">\"xuan\"</span>));</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// 获取公有，有两个个String类型参数的构造方法</span></div><div class=\"line\">Constructor publicConstructorWithTwoStringArgs = personClass.getConstructor(String.class, String.class);</div><div class=\"line\">System.out.println(<span class=\"string\">\"获取公有，有两个个String类型参数的构造方法\"</span>);</div><div class=\"line\">System.out.println(publicConstructorWithTwoStringArgs);</div><div class=\"line\">publicConstructorWithTwoStringArgs.setAccessible(<span class=\"keyword\">true</span>);</div><div class=\"line\">System.out.println(publicConstructorWithTwoStringArgs.newInstance(<span class=\"string\">\"xuan\"</span>, <span class=\"string\">\"huangyuan\"</span>));</div></pre></td></tr></table></figure>\n<p>  这里需要注意的是，在获取私有，有一个String类型参数的构造方法，并调用<code>newInstance</code>方法的时候会抛出异常，这是因为该构造方法中的<code>nickName</code>字段是私有的,将其注释掉可获得如下输出<br>  输出：</p>\n<blockquote>\n<p>获取所有的公有构造方法<br>    public com.huangyuanlove.Person(java.lang.String,java.lang.String,int)<br>    public com.huangyuanlove.Person(java.lang.String,java.lang.String)<br>    public com.huangyuanlove.Person()<br>    获取所有的构造方法<br>    public com.huangyuanlove.Person(java.lang.String,java.lang.String,int)<br>    public com.huangyuanlove.Person(java.lang.String,java.lang.String)<br>    private com.huangyuanlove.Person(java.lang.String)<br>    protected com.huangyuanlove.Person(int)<br>    public com.huangyuanlove.Person()<br>    获取公有，无参构造方法<br>    public com.huangyuanlove.Person()<br>    Person [name=null, nickName=null, age=0]<br>    获取私有，有一个String类型参数的构造方法<br>    private com.huangyuanlove.Person(java.lang.String)<br>    获取公有，有两个个String类型参数的构造方法<br>    public com.huangyuanlove.Person(java.lang.String,java.lang.String)<br>    Person [name=xuan, nickName=huangyuan, age=0]</p>\n</blockquote>\n<h6 id=\"获取成员变量并进行操作\"><a href=\"#获取成员变量并进行操作\" class=\"headerlink\" title=\"获取成员变量并进行操作\"></a>获取成员变量并进行操作</h6>  <figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div></pre></td><td class=\"code\"><pre><div class=\"line\">  Person person = <span class=\"keyword\">new</span> Person();</div><div class=\"line\">Class personClass = person.getClass();</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// 获取所有的公共成员变量</span></div><div class=\"line\">Field publicFields[] = personClass.getFields();</div><div class=\"line\">System.out.println(<span class=\"string\">\"获取所有的公共成员变量\"</span>);</div><div class=\"line\"><span class=\"keyword\">for</span> (Field f : publicFields) &#123;</div><div class=\"line\">\tSystem.out.println(f);</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"comment\">// 获取所有的成员变量</span></div><div class=\"line\">Field allFields[] = personClass.getDeclaredFields();</div><div class=\"line\">System.out.println(<span class=\"string\">\"获取所有的成员变量\"</span>);</div><div class=\"line\"><span class=\"keyword\">for</span> (Field f : allFields) &#123;</div><div class=\"line\">\tSystem.out.println(f);</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// 获取某个公有成员变量并赋值</span></div><div class=\"line\">Field nameField = personClass.getField(<span class=\"string\">\"name\"</span>);</div><div class=\"line\">nameField.set(person, <span class=\"string\">\"huangyuan\"</span>);</div><div class=\"line\">System.out.println(person);</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// 获取某个私有成员变量并赋值</span></div><div class=\"line\">Field nickNameField = personClass.getDeclaredField(<span class=\"string\">\"nickName\"</span>);</div><div class=\"line\">  <span class=\"comment\">//因为nickName是私有的，所有需要先设置可访问</span></div><div class=\"line\">nickNameField.setAccessible(<span class=\"keyword\">true</span>);</div><div class=\"line\">nickNameField.set(person, <span class=\"string\">\"xuan\"</span>);</div><div class=\"line\">System.out.println(person);</div></pre></td></tr></table></figure>\n<p>  可以得到如下输出：</p>\n<blockquote>\n<p>获取所有的公共成员变量<br>    public java.lang.String com.huangyuanlove.Person.name<br>    获取所有的成员变量<br>    public java.lang.String com.huangyuanlove.Person.name<br>    private java.lang.String com.huangyuanlove.Person.nickName<br>    int com.huangyuanlove.Person.age<br>    Person [name=huangyuan, nickName=null, age=0]<br>    Person [name=huangyuan, nickName=xuan, age=0]</p>\n</blockquote>\n<p>  重要的事情来了，一定要记住，谁要是想上面那样反射获取类的公有成员变量然后进行赋值操作，肯定被骂的祸国殃民、民不聊生、生灵涂炭，都public了你还反射。<br>  获取私有变量的时候需要使用<code>getDeclaredField</code>方法，否则会抛出<code>noSuchFieldException</code></p>\n<h6 id=\"获取方法并进行调用\"><a href=\"#获取方法并进行调用\" class=\"headerlink\" title=\"获取方法并进行调用\"></a>获取方法并进行调用</h6><p>   在类中添加两个方法<br>   <figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">sayHi</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">    System.out.println(<span class=\"string\">\"hi\"</span>);</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">saySomeThing</span><span class=\"params\">(String someThing)</span> </span>&#123;</div><div class=\"line\">    System.out.println(someThing);</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>  反射获取类方法并进行调用<br>  <figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div></pre></td><td class=\"code\"><pre><div class=\"line\">  Person person = <span class=\"keyword\">new</span> Person();</div><div class=\"line\">Class personClass = person.getClass();</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// 获取所有公共方法</span></div><div class=\"line\">System.out.println(<span class=\"string\">\"获取所有公共方法\"</span>);</div><div class=\"line\">Method publicMethods[] = personClass.getMethods();</div><div class=\"line\"><span class=\"keyword\">for</span> (Method m : publicMethods) &#123;</div><div class=\"line\">\tSystem.out.println(m.getName());</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// 获取所有方法</span></div><div class=\"line\">System.out.println(<span class=\"string\">\"获取所有方法\"</span>);</div><div class=\"line\">Method allMethods[] = personClass.getDeclaredMethods();</div><div class=\"line\"><span class=\"keyword\">for</span> (Method m : allMethods) &#123;</div><div class=\"line\">\tSystem.out.println(m.getName());</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// 获取指定的公有方法</span></div><div class=\"line\">System.out.println(<span class=\"string\">\"获取指定的公有方法\"</span>);</div><div class=\"line\">Method publicMethodWithoutArgs = personClass.getMethod(<span class=\"string\">\"sayHi\"</span>);</div><div class=\"line\">publicMethodWithoutArgs.invoke(person);</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// 获取指定的私有方法</span></div><div class=\"line\">System.out.println(<span class=\"string\">\"获取指定的私有方法\"</span>);</div><div class=\"line\">Method privateMethodWithStringArgs = personClass.getDeclaredMethod(<span class=\"string\">\"saySomeThing\"</span>, String.class);</div><div class=\"line\">privateMethodWithStringArgs.setAccessible(<span class=\"keyword\">true</span>);</div><div class=\"line\">privateMethodWithStringArgs.invoke(person, <span class=\"string\">\"someThing\"</span>);</div></pre></td></tr></table></figure></p>\n<p>  得到输出：</p>\n<blockquote>\n<p>获取所有公共方法<br>    toString<br>    sayHi<br>    wait<br>    wait<br>    wait<br>    equals<br>    hashCode<br>    getClass<br>    notify<br>    notifyAll<br>    获取所有方法<br>    toString<br>    sayHi<br>    saySomeThing<br>    获取指定的公有方法<br>    hi<br>    获取指定的私有方法<br>    someThing</p>\n</blockquote>\n<p>  获取到的方法中并不包含构造方法，但是包含从父类继承下来的公共方法。和上面的获取成员变量赋值一样，谁要是反射去获取公共方法再去调用，基本上就凉了。</p>\n<h4 id=\"静态代理和动态代理\"><a href=\"#静态代理和动态代理\" class=\"headerlink\" title=\"静态代理和动态代理\"></a>静态代理和动态代理</h4><h5 id=\"静态代理\"><a href=\"#静态代理\" class=\"headerlink\" title=\"静态代理\"></a>静态代理</h5><p>简单来说，代理就是用一个代理类来封装一个委托类，这样做有两个好处：可以隐藏委托类的具体实现；可以在不改变委托类的情况下增加额外的操作。而静态代理，就是在程序运行之前，代理类就已经存在了。静态代理一般的实现方式为：委托类和代理类都实现同一个接口或者是继承自同一个父类，然后在代理类中保存一个委托类的对象引用（父类或者父类接口的对象引用），通过给构造器传入委托类的对象进行初始化，在同名方法中通过调用委托类的方法实现静态代理。除此之外，在代理类同名方法中还可以实现一些额外的功能。代码如下：<br>RealObject类为委托类，SimpleProxy类为代理类：<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"class\"><span class=\"keyword\">interface</span> <span class=\"title\">Interface</span> </span>&#123;</div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">doSomething</span><span class=\"params\">()</span></span>;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">somethingElse</span><span class=\"params\">(String arg)</span></span>;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">RealObject</span> <span class=\"keyword\">implements</span> <span class=\"title\">Interface</span> </span>&#123;</div><div class=\"line\">    <span class=\"meta\">@Override</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">doSomething</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">        <span class=\"comment\">// TODO Auto-generated method stub</span></div><div class=\"line\">        System.out.println(<span class=\"string\">\"doSomething\"</span>);</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"meta\">@Override</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">somethingElse</span><span class=\"params\">(String arg)</span> </span>&#123;</div><div class=\"line\">        <span class=\"comment\">// TODO Auto-generated method stub</span></div><div class=\"line\">        System.out.println(<span class=\"string\">\"somethingElse \"</span> + arg);</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">SimpleProxy</span> <span class=\"keyword\">implements</span> <span class=\"title\">Interface</span> </span>&#123;</div><div class=\"line\">    <span class=\"comment\">// 保存委托类（父接口的引用）</span></div><div class=\"line\">    <span class=\"keyword\">private</span> Interface proxied;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">// 传入委托类的对象用于初始化</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">SimpleProxy</span><span class=\"params\">(Interface proxied)</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">this</span>.proxied = proxied;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">// 两个同名方法中还实现了其他的功能</span></div><div class=\"line\">    <span class=\"meta\">@Override</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">doSomething</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">        <span class=\"comment\">// TODO Auto-generated method stub</span></div><div class=\"line\">        System.out.println(<span class=\"string\">\"SimpleProxy doSomething\"</span>);</div><div class=\"line\">        proxied.doSomething();</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"meta\">@Override</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">somethingElse</span><span class=\"params\">(String arg)</span> </span>&#123;</div><div class=\"line\">        <span class=\"comment\">// TODO Auto-generated method stub</span></div><div class=\"line\">        System.out.println(<span class=\"string\">\"SimpleProxy somethingElse \"</span> + arg);</div><div class=\"line\">        proxied.somethingElse(arg);</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">SimpleProxyDemo</span> </span>&#123;</div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</div><div class=\"line\">        consumer(<span class=\"keyword\">new</span> RealObject());</div><div class=\"line\">        consumer(<span class=\"keyword\">new</span> SimpleProxy(<span class=\"keyword\">new</span> RealObject()));</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">consumer</span><span class=\"params\">(Interface iface)</span> </span>&#123;</div><div class=\"line\">        iface.doSomething();</div><div class=\"line\">        iface.somethingElse(<span class=\"string\">\"bonobo\"</span>);</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<h5 id=\"动态代理\"><a href=\"#动态代理\" class=\"headerlink\" title=\"动态代理\"></a>动态代理</h5><p>静态代理的局限性在于，代理类需要在程序运行之前就编写好，而动态代理则可以在程序运行的过程中动态创建并处理对所代理方法的调用。在动态代理中，需要定义一个中介类，这个类实现InvocationHandle接口（主要是里面的invoke方法）。这个中介类位于委托类和代理类之间，作为一个调用处理器而存在。它保存一个委托类的引用，通过传入委托类对象进行初始化；然后在invoke方法中，实现对委托类方法的调用，并增加需要的额外操作。在需要使用动态代理时，首先通过Proxy类中的newProxyInstance方法得到代理类对象（方法的三个参数分别是：（通常是委托类实现接口的）类加载器，希望代理类实现的接口列表（通常也是委托类实现的接口），以及一个调用处理器的对象），然后通过这个代理类对象直接调用代理类的方法。这种调用实际上会通过调用处理器调用invoke方法，进而实现对委托类相应方法的调用。</p>\n<p>注意在动态代理中，只实现了一个调用处理器，而没有真正实现代理类。代理类对象是通过Proxy类中的newProxyInstance方法得到的。这样，不管你在调用委托类任何方法时需要加入的额外操作都可以仅仅在调用处理器中的invoke方法中实现就可以了。代码示例如下<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">SimpleDynamiProxyDemo</span> </span>&#123;</div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">consumer</span><span class=\"params\">(Interface iface)</span> </span>&#123;</div><div class=\"line\">        iface.doSomething();</div><div class=\"line\">        iface.somethingElse(<span class=\"string\">\"bonobo\"</span>);</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</div><div class=\"line\">        RealObject real = <span class=\"keyword\">new</span> RealObject();</div><div class=\"line\">        consumer(real);</div><div class=\"line\">        <span class=\"comment\">// 通过Proxy.newProxyInstance方法得到代理类对象</span></div><div class=\"line\">        Interface proxy = (Interface) Proxy.newProxyInstance(Interface.class.getClassLoader(),</div><div class=\"line\">                <span class=\"keyword\">new</span> Class[] &#123; Interface.class &#125;, <span class=\"keyword\">new</span> DynamicProxyHandler(real));</div><div class=\"line\">        <span class=\"comment\">// 通过代理类对象直接调用方法，会被重定向到调用处理器上的invoke方法</span></div><div class=\"line\">        consumer(proxy);</div><div class=\"line\"></div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// 中介类（调用处理器）</span></div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">DynamicProxyHandler</span> <span class=\"keyword\">implements</span> <span class=\"title\">InvocationHandler</span> </span>&#123;</div><div class=\"line\">    <span class=\"comment\">// 保存一个委托类的对象</span></div><div class=\"line\">    <span class=\"keyword\">private</span> Object proxied;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">DynamicProxyHandler</span><span class=\"params\">(Object proxied)</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">this</span>.proxied = proxied;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">// 三个参数：代理类的引用，方法名和方法的参数列表</span></div><div class=\"line\">    <span class=\"meta\">@Override</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> Object <span class=\"title\">invoke</span><span class=\"params\">(Object proxy, Method method, Object[] args)</span> <span class=\"keyword\">throws</span> Throwable </span>&#123;</div><div class=\"line\">        <span class=\"comment\">// TODO Auto-generated method stub</span></div><div class=\"line\">        System.out.println(<span class=\"string\">\"**** proxy: \"</span> + proxy.getClass() + <span class=\"string\">\", method: \"</span> + method + <span class=\"string\">\", args: \"</span> + args);</div><div class=\"line\">        <span class=\"keyword\">if</span> (args != <span class=\"keyword\">null</span>) &#123;</div><div class=\"line\">            <span class=\"keyword\">for</span> (Object arg : args) &#123;</div><div class=\"line\">                System.out.println(<span class=\"string\">\" \"</span> + arg);</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;</div><div class=\"line\">        <span class=\"comment\">// 实现对委托类方法的调用，参数表示委托类对象和参数</span></div><div class=\"line\">        <span class=\"keyword\">return</span> method.invoke(proxied, args);</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<hr>\n<p>以上<br>以上静态代理和动态代理相关的文字代码出自于 <a href=\"https://www.cnblogs.com/hrcnblogs/p/8711418.html\" target=\"_blank\" rel=\"external\">https://www.cnblogs.com/hrcnblogs/p/8711418.html</a></p>\n","excerpt":"<p>假如你已经非常熟悉java中反射(reflect)和代理(Proxy)，那你还在这里看我这篇文章纯粹就是浪费时间了。<br>","more":"</p>\n<h4 id=\"反射是什么\"><a href=\"#反射是什么\" class=\"headerlink\" title=\"反射是什么\"></a>反射是什么</h4><p>官方介绍</p>\n<blockquote>\n<p>Reflection is commonly used by programs which require the ability to examine or modify the runtime behavior of applications running in the Java virtual machine. This is a relatively advanced feature and should be used only by developers who have a strong grasp of the fundamentals of the language. With that caveat in mind, reflection is a powerful technique and can enable applications to perform operations which would otherwise be impossible.</p>\n</blockquote>\n<p>概括来讲就是：<strong> 反射这个功能很XX </strong><br>大家常见的对反射机制的概念:<br>在Java中的反射机制是指在运行状态中，对于任意一个类都能够知道这个类所有的属性和方法；并且对于任意一个对象，都能够调用它的任意一个方法；这种动态获取信息以及动态调用对象方法的功能成为Java语言的反射机制。</p>\n<h4 id=\"涉及到的类\"><a href=\"#涉及到的类\" class=\"headerlink\" title=\"涉及到的类\"></a>涉及到的类</h4><ul>\n<li><code>Class</code>：反射的核心类，可以获取类的属性，方法等信息。 </li>\n<li><code>Field</code>：Java.lang.reflec包中的类，表示类的成员变量，可以用来获取和设置类之中的属性值。 </li>\n<li><code>Method</code>： Java.lang.reflec包中的类，表示类的方法，它可以用来获取类中的方法信息或者执行方法。 </li>\n<li><code>Constructor</code>： Java.lang.reflec包中的类，表示类的构造方法。</li>\n</ul>\n<h4 id=\"简介\"><a href=\"#简介\" class=\"headerlink\" title=\"简介\"></a>简介</h4><p>先写一个简单的Person类当做目标类<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Person</span> </span>&#123;</div><div class=\"line\">\t<span class=\"keyword\">public</span> String name;</div><div class=\"line\">\t<span class=\"keyword\">private</span> String nickName;</div><div class=\"line\">\t<span class=\"keyword\">int</span> age;</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">Person</span><span class=\"params\">()</span></span>&#123;&#125;</div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">protected</span>  <span class=\"title\">Person</span><span class=\"params\">(<span class=\"keyword\">int</span> age)</span> </span>&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">this</span>. age = age;</div><div class=\"line\">\t&#125;</div><div class=\"line\">\t</div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">private</span> <span class=\"title\">Person</span><span class=\"params\">(String name)</span> </span>&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">this</span>.name = name;</div><div class=\"line\">\t&#125;</div><div class=\"line\">\t</div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">Person</span><span class=\"params\">(String name,String nickName)</span> </span>&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">this</span>.name = name;</div><div class=\"line\">\t\t<span class=\"keyword\">this</span>.nickName = nickName;</div><div class=\"line\">\t&#125;</div><div class=\"line\">\t</div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">Person</span><span class=\"params\">(String name, String nickName, <span class=\"keyword\">int</span> age)</span> </span>&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">super</span>();</div><div class=\"line\">\t\t<span class=\"keyword\">this</span>.name = name;</div><div class=\"line\">\t\t<span class=\"keyword\">this</span>.nickName = nickName;</div><div class=\"line\">\t\t<span class=\"keyword\">this</span>.age = age;</div><div class=\"line\">\t&#125;</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"meta\">@Override</span></div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">toString</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"string\">\"Person [name=\"</span> + name + <span class=\"string\">\", nickName=\"</span> + nickName + <span class=\"string\">\", age=\"</span> + age + <span class=\"string\">\"]\"</span>;</div><div class=\"line\">\t&#125;</div><div class=\"line\"></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<h5 id=\"获取想要操作的类的Class对象\"><a href=\"#获取想要操作的类的Class对象\" class=\"headerlink\" title=\"获取想要操作的类的Class对象\"></a>获取想要操作的类的Class对象</h5><ol>\n<li><p>Object.getClass();</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">  Person person = <span class=\"keyword\">new</span> Person();</div><div class=\"line\">Class personClass = person.getClass();</div></pre></td></tr></table></figure>\n</li>\n<li><p>任何数据类型（包括基本数据类型）都有一个“静态”的class属性</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">Class personClass2 = Person.class;</div></pre></td></tr></table></figure>\n</li>\n<li><p>通过Class类的静态方法：forName（String  className）(常用)   </p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">Class personClass3 = Class.forName(<span class=\"string\">\"com.huangyuanlove.Person\"</span>);</div></pre></td></tr></table></figure>\n<p>需要注意的是，在运行期间，一个只有一个Class对象：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">System.out.println(personClass);</div><div class=\"line\">System.out.println(personClass == personClass2);</div><div class=\"line\">System.out.println(personClass == personClass3);</div></pre></td></tr></table></figure>\n<p>输出：</p>\n<blockquote>\n<p>class com.huangyuanlove.Person<br> true<br> true</p>\n</blockquote>\n</li>\n</ol>\n<h5 id=\"调用Class类中的方法\"><a href=\"#调用Class类中的方法\" class=\"headerlink\" title=\"调用Class类中的方法\"></a>调用Class类中的方法</h5><h6 id=\"获取构造方法并创造对象：\"><a href=\"#获取构造方法并创造对象：\" class=\"headerlink\" title=\"获取构造方法并创造对象：\"></a>获取构造方法并创造对象：</h6>   <figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div></pre></td><td class=\"code\"><pre><div class=\"line\"> \tPerson person = <span class=\"keyword\">new</span> Person();</div><div class=\"line\">Class personClass = person.getClass();</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// 获取所有的公有构造方法</span></div><div class=\"line\">Constructor[] publicConstructors = personClass.getConstructors();</div><div class=\"line\">System.out.println(<span class=\"string\">\"获取所有的公有构造方法\"</span>);</div><div class=\"line\"><span class=\"keyword\">for</span> (Constructor c : publicConstructors) &#123;</div><div class=\"line\">\tSystem.out.println(c);</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// 获取所有的构造方法</span></div><div class=\"line\">Constructor[] allConstructors = personClass.getDeclaredConstructors();</div><div class=\"line\">System.out.println(<span class=\"string\">\"获取所有的构造方法\"</span>);</div><div class=\"line\"><span class=\"keyword\">for</span> (Constructor c : allConstructors) &#123;</div><div class=\"line\">\tSystem.out.println(c);</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// 获取公有，无参构造方法</span></div><div class=\"line\">Constructor publicConstructorWithoutArgs = personClass.getConstructor();</div><div class=\"line\">System.out.println(<span class=\"string\">\"获取公有，无参构造方法\"</span>);</div><div class=\"line\">System.out.println(publicConstructorWithoutArgs);</div><div class=\"line\">System.out.println(publicConstructorWithoutArgs.newInstance());</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// 获取私有，有一个String类型参数的构造方法</span></div><div class=\"line\">Constructor publicConstructorWithOneStringArgs = personClass.getDeclaredConstructor(String.class);</div><div class=\"line\">System.out.println(<span class=\"string\">\"获取私有，有一个String类型参数的构造方法\"</span>);</div><div class=\"line\">System.out.println(publicConstructorWithOneStringArgs);</div><div class=\"line\">personClass.getDeclaredField(<span class=\"string\">\"nickName\"</span>).setAccessible(<span class=\"keyword\">true</span>);</div><div class=\"line\">System.out.println(publicConstructorWithOneStringArgs.newInstance(<span class=\"string\">\"xuan\"</span>));</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// 获取公有，有两个个String类型参数的构造方法</span></div><div class=\"line\">Constructor publicConstructorWithTwoStringArgs = personClass.getConstructor(String.class, String.class);</div><div class=\"line\">System.out.println(<span class=\"string\">\"获取公有，有两个个String类型参数的构造方法\"</span>);</div><div class=\"line\">System.out.println(publicConstructorWithTwoStringArgs);</div><div class=\"line\">publicConstructorWithTwoStringArgs.setAccessible(<span class=\"keyword\">true</span>);</div><div class=\"line\">System.out.println(publicConstructorWithTwoStringArgs.newInstance(<span class=\"string\">\"xuan\"</span>, <span class=\"string\">\"huangyuan\"</span>));</div></pre></td></tr></table></figure>\n<p>  这里需要注意的是，在获取私有，有一个String类型参数的构造方法，并调用<code>newInstance</code>方法的时候会抛出异常，这是因为该构造方法中的<code>nickName</code>字段是私有的,将其注释掉可获得如下输出<br>  输出：</p>\n<blockquote>\n<p>获取所有的公有构造方法<br>    public com.huangyuanlove.Person(java.lang.String,java.lang.String,int)<br>    public com.huangyuanlove.Person(java.lang.String,java.lang.String)<br>    public com.huangyuanlove.Person()<br>    获取所有的构造方法<br>    public com.huangyuanlove.Person(java.lang.String,java.lang.String,int)<br>    public com.huangyuanlove.Person(java.lang.String,java.lang.String)<br>    private com.huangyuanlove.Person(java.lang.String)<br>    protected com.huangyuanlove.Person(int)<br>    public com.huangyuanlove.Person()<br>    获取公有，无参构造方法<br>    public com.huangyuanlove.Person()<br>    Person [name=null, nickName=null, age=0]<br>    获取私有，有一个String类型参数的构造方法<br>    private com.huangyuanlove.Person(java.lang.String)<br>    获取公有，有两个个String类型参数的构造方法<br>    public com.huangyuanlove.Person(java.lang.String,java.lang.String)<br>    Person [name=xuan, nickName=huangyuan, age=0]</p>\n</blockquote>\n<h6 id=\"获取成员变量并进行操作\"><a href=\"#获取成员变量并进行操作\" class=\"headerlink\" title=\"获取成员变量并进行操作\"></a>获取成员变量并进行操作</h6>  <figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div></pre></td><td class=\"code\"><pre><div class=\"line\">  Person person = <span class=\"keyword\">new</span> Person();</div><div class=\"line\">Class personClass = person.getClass();</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// 获取所有的公共成员变量</span></div><div class=\"line\">Field publicFields[] = personClass.getFields();</div><div class=\"line\">System.out.println(<span class=\"string\">\"获取所有的公共成员变量\"</span>);</div><div class=\"line\"><span class=\"keyword\">for</span> (Field f : publicFields) &#123;</div><div class=\"line\">\tSystem.out.println(f);</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"comment\">// 获取所有的成员变量</span></div><div class=\"line\">Field allFields[] = personClass.getDeclaredFields();</div><div class=\"line\">System.out.println(<span class=\"string\">\"获取所有的成员变量\"</span>);</div><div class=\"line\"><span class=\"keyword\">for</span> (Field f : allFields) &#123;</div><div class=\"line\">\tSystem.out.println(f);</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// 获取某个公有成员变量并赋值</span></div><div class=\"line\">Field nameField = personClass.getField(<span class=\"string\">\"name\"</span>);</div><div class=\"line\">nameField.set(person, <span class=\"string\">\"huangyuan\"</span>);</div><div class=\"line\">System.out.println(person);</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// 获取某个私有成员变量并赋值</span></div><div class=\"line\">Field nickNameField = personClass.getDeclaredField(<span class=\"string\">\"nickName\"</span>);</div><div class=\"line\">  <span class=\"comment\">//因为nickName是私有的，所有需要先设置可访问</span></div><div class=\"line\">nickNameField.setAccessible(<span class=\"keyword\">true</span>);</div><div class=\"line\">nickNameField.set(person, <span class=\"string\">\"xuan\"</span>);</div><div class=\"line\">System.out.println(person);</div></pre></td></tr></table></figure>\n<p>  可以得到如下输出：</p>\n<blockquote>\n<p>获取所有的公共成员变量<br>    public java.lang.String com.huangyuanlove.Person.name<br>    获取所有的成员变量<br>    public java.lang.String com.huangyuanlove.Person.name<br>    private java.lang.String com.huangyuanlove.Person.nickName<br>    int com.huangyuanlove.Person.age<br>    Person [name=huangyuan, nickName=null, age=0]<br>    Person [name=huangyuan, nickName=xuan, age=0]</p>\n</blockquote>\n<p>  重要的事情来了，一定要记住，谁要是想上面那样反射获取类的公有成员变量然后进行赋值操作，肯定被骂的祸国殃民、民不聊生、生灵涂炭，都public了你还反射。<br>  获取私有变量的时候需要使用<code>getDeclaredField</code>方法，否则会抛出<code>noSuchFieldException</code></p>\n<h6 id=\"获取方法并进行调用\"><a href=\"#获取方法并进行调用\" class=\"headerlink\" title=\"获取方法并进行调用\"></a>获取方法并进行调用</h6><p>   在类中添加两个方法<br>   <figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">sayHi</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">    System.out.println(<span class=\"string\">\"hi\"</span>);</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">saySomeThing</span><span class=\"params\">(String someThing)</span> </span>&#123;</div><div class=\"line\">    System.out.println(someThing);</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>  反射获取类方法并进行调用<br>  <figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div></pre></td><td class=\"code\"><pre><div class=\"line\">  Person person = <span class=\"keyword\">new</span> Person();</div><div class=\"line\">Class personClass = person.getClass();</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// 获取所有公共方法</span></div><div class=\"line\">System.out.println(<span class=\"string\">\"获取所有公共方法\"</span>);</div><div class=\"line\">Method publicMethods[] = personClass.getMethods();</div><div class=\"line\"><span class=\"keyword\">for</span> (Method m : publicMethods) &#123;</div><div class=\"line\">\tSystem.out.println(m.getName());</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// 获取所有方法</span></div><div class=\"line\">System.out.println(<span class=\"string\">\"获取所有方法\"</span>);</div><div class=\"line\">Method allMethods[] = personClass.getDeclaredMethods();</div><div class=\"line\"><span class=\"keyword\">for</span> (Method m : allMethods) &#123;</div><div class=\"line\">\tSystem.out.println(m.getName());</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// 获取指定的公有方法</span></div><div class=\"line\">System.out.println(<span class=\"string\">\"获取指定的公有方法\"</span>);</div><div class=\"line\">Method publicMethodWithoutArgs = personClass.getMethod(<span class=\"string\">\"sayHi\"</span>);</div><div class=\"line\">publicMethodWithoutArgs.invoke(person);</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// 获取指定的私有方法</span></div><div class=\"line\">System.out.println(<span class=\"string\">\"获取指定的私有方法\"</span>);</div><div class=\"line\">Method privateMethodWithStringArgs = personClass.getDeclaredMethod(<span class=\"string\">\"saySomeThing\"</span>, String.class);</div><div class=\"line\">privateMethodWithStringArgs.setAccessible(<span class=\"keyword\">true</span>);</div><div class=\"line\">privateMethodWithStringArgs.invoke(person, <span class=\"string\">\"someThing\"</span>);</div></pre></td></tr></table></figure></p>\n<p>  得到输出：</p>\n<blockquote>\n<p>获取所有公共方法<br>    toString<br>    sayHi<br>    wait<br>    wait<br>    wait<br>    equals<br>    hashCode<br>    getClass<br>    notify<br>    notifyAll<br>    获取所有方法<br>    toString<br>    sayHi<br>    saySomeThing<br>    获取指定的公有方法<br>    hi<br>    获取指定的私有方法<br>    someThing</p>\n</blockquote>\n<p>  获取到的方法中并不包含构造方法，但是包含从父类继承下来的公共方法。和上面的获取成员变量赋值一样，谁要是反射去获取公共方法再去调用，基本上就凉了。</p>\n<h4 id=\"静态代理和动态代理\"><a href=\"#静态代理和动态代理\" class=\"headerlink\" title=\"静态代理和动态代理\"></a>静态代理和动态代理</h4><h5 id=\"静态代理\"><a href=\"#静态代理\" class=\"headerlink\" title=\"静态代理\"></a>静态代理</h5><p>简单来说，代理就是用一个代理类来封装一个委托类，这样做有两个好处：可以隐藏委托类的具体实现；可以在不改变委托类的情况下增加额外的操作。而静态代理，就是在程序运行之前，代理类就已经存在了。静态代理一般的实现方式为：委托类和代理类都实现同一个接口或者是继承自同一个父类，然后在代理类中保存一个委托类的对象引用（父类或者父类接口的对象引用），通过给构造器传入委托类的对象进行初始化，在同名方法中通过调用委托类的方法实现静态代理。除此之外，在代理类同名方法中还可以实现一些额外的功能。代码如下：<br>RealObject类为委托类，SimpleProxy类为代理类：<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"class\"><span class=\"keyword\">interface</span> <span class=\"title\">Interface</span> </span>&#123;</div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">doSomething</span><span class=\"params\">()</span></span>;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">somethingElse</span><span class=\"params\">(String arg)</span></span>;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">RealObject</span> <span class=\"keyword\">implements</span> <span class=\"title\">Interface</span> </span>&#123;</div><div class=\"line\">    <span class=\"meta\">@Override</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">doSomething</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">        <span class=\"comment\">// TODO Auto-generated method stub</span></div><div class=\"line\">        System.out.println(<span class=\"string\">\"doSomething\"</span>);</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"meta\">@Override</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">somethingElse</span><span class=\"params\">(String arg)</span> </span>&#123;</div><div class=\"line\">        <span class=\"comment\">// TODO Auto-generated method stub</span></div><div class=\"line\">        System.out.println(<span class=\"string\">\"somethingElse \"</span> + arg);</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">SimpleProxy</span> <span class=\"keyword\">implements</span> <span class=\"title\">Interface</span> </span>&#123;</div><div class=\"line\">    <span class=\"comment\">// 保存委托类（父接口的引用）</span></div><div class=\"line\">    <span class=\"keyword\">private</span> Interface proxied;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">// 传入委托类的对象用于初始化</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">SimpleProxy</span><span class=\"params\">(Interface proxied)</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">this</span>.proxied = proxied;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">// 两个同名方法中还实现了其他的功能</span></div><div class=\"line\">    <span class=\"meta\">@Override</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">doSomething</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">        <span class=\"comment\">// TODO Auto-generated method stub</span></div><div class=\"line\">        System.out.println(<span class=\"string\">\"SimpleProxy doSomething\"</span>);</div><div class=\"line\">        proxied.doSomething();</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"meta\">@Override</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">somethingElse</span><span class=\"params\">(String arg)</span> </span>&#123;</div><div class=\"line\">        <span class=\"comment\">// TODO Auto-generated method stub</span></div><div class=\"line\">        System.out.println(<span class=\"string\">\"SimpleProxy somethingElse \"</span> + arg);</div><div class=\"line\">        proxied.somethingElse(arg);</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">SimpleProxyDemo</span> </span>&#123;</div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</div><div class=\"line\">        consumer(<span class=\"keyword\">new</span> RealObject());</div><div class=\"line\">        consumer(<span class=\"keyword\">new</span> SimpleProxy(<span class=\"keyword\">new</span> RealObject()));</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">consumer</span><span class=\"params\">(Interface iface)</span> </span>&#123;</div><div class=\"line\">        iface.doSomething();</div><div class=\"line\">        iface.somethingElse(<span class=\"string\">\"bonobo\"</span>);</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<h5 id=\"动态代理\"><a href=\"#动态代理\" class=\"headerlink\" title=\"动态代理\"></a>动态代理</h5><p>静态代理的局限性在于，代理类需要在程序运行之前就编写好，而动态代理则可以在程序运行的过程中动态创建并处理对所代理方法的调用。在动态代理中，需要定义一个中介类，这个类实现InvocationHandle接口（主要是里面的invoke方法）。这个中介类位于委托类和代理类之间，作为一个调用处理器而存在。它保存一个委托类的引用，通过传入委托类对象进行初始化；然后在invoke方法中，实现对委托类方法的调用，并增加需要的额外操作。在需要使用动态代理时，首先通过Proxy类中的newProxyInstance方法得到代理类对象（方法的三个参数分别是：（通常是委托类实现接口的）类加载器，希望代理类实现的接口列表（通常也是委托类实现的接口），以及一个调用处理器的对象），然后通过这个代理类对象直接调用代理类的方法。这种调用实际上会通过调用处理器调用invoke方法，进而实现对委托类相应方法的调用。</p>\n<p>注意在动态代理中，只实现了一个调用处理器，而没有真正实现代理类。代理类对象是通过Proxy类中的newProxyInstance方法得到的。这样，不管你在调用委托类任何方法时需要加入的额外操作都可以仅仅在调用处理器中的invoke方法中实现就可以了。代码示例如下<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">SimpleDynamiProxyDemo</span> </span>&#123;</div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">consumer</span><span class=\"params\">(Interface iface)</span> </span>&#123;</div><div class=\"line\">        iface.doSomething();</div><div class=\"line\">        iface.somethingElse(<span class=\"string\">\"bonobo\"</span>);</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</div><div class=\"line\">        RealObject real = <span class=\"keyword\">new</span> RealObject();</div><div class=\"line\">        consumer(real);</div><div class=\"line\">        <span class=\"comment\">// 通过Proxy.newProxyInstance方法得到代理类对象</span></div><div class=\"line\">        Interface proxy = (Interface) Proxy.newProxyInstance(Interface.class.getClassLoader(),</div><div class=\"line\">                <span class=\"keyword\">new</span> Class[] &#123; Interface.class &#125;, <span class=\"keyword\">new</span> DynamicProxyHandler(real));</div><div class=\"line\">        <span class=\"comment\">// 通过代理类对象直接调用方法，会被重定向到调用处理器上的invoke方法</span></div><div class=\"line\">        consumer(proxy);</div><div class=\"line\"></div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// 中介类（调用处理器）</span></div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">DynamicProxyHandler</span> <span class=\"keyword\">implements</span> <span class=\"title\">InvocationHandler</span> </span>&#123;</div><div class=\"line\">    <span class=\"comment\">// 保存一个委托类的对象</span></div><div class=\"line\">    <span class=\"keyword\">private</span> Object proxied;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">DynamicProxyHandler</span><span class=\"params\">(Object proxied)</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">this</span>.proxied = proxied;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">// 三个参数：代理类的引用，方法名和方法的参数列表</span></div><div class=\"line\">    <span class=\"meta\">@Override</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> Object <span class=\"title\">invoke</span><span class=\"params\">(Object proxy, Method method, Object[] args)</span> <span class=\"keyword\">throws</span> Throwable </span>&#123;</div><div class=\"line\">        <span class=\"comment\">// TODO Auto-generated method stub</span></div><div class=\"line\">        System.out.println(<span class=\"string\">\"**** proxy: \"</span> + proxy.getClass() + <span class=\"string\">\", method: \"</span> + method + <span class=\"string\">\", args: \"</span> + args);</div><div class=\"line\">        <span class=\"keyword\">if</span> (args != <span class=\"keyword\">null</span>) &#123;</div><div class=\"line\">            <span class=\"keyword\">for</span> (Object arg : args) &#123;</div><div class=\"line\">                System.out.println(<span class=\"string\">\" \"</span> + arg);</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;</div><div class=\"line\">        <span class=\"comment\">// 实现对委托类方法的调用，参数表示委托类对象和参数</span></div><div class=\"line\">        <span class=\"keyword\">return</span> method.invoke(proxied, args);</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<hr>\n<p>以上<br>以上静态代理和动态代理相关的文字代码出自于 <a href=\"https://www.cnblogs.com/hrcnblogs/p/8711418.html\">https://www.cnblogs.com/hrcnblogs/p/8711418.html</a></p>"},{"title":"Android hook--示例","date":"2018-08-06T07:46:06.000Z","keywords":"AndroidHook,反射,动态代理","photos":["/image/Android/hook/guide.jpg"],"_content":"\nHook过程：\n1. 寻找 Hook 点，原则是静态变量或者单例对象，尽量 Hook public 的对象和方法。\n   Hook的选择点：静态变量和单例，因为一旦创建对象，它们不容易变化，非常容易定位。\n2. 选择合适的代理方式，如果是接口可以用动态代理。\n3. 偷梁换柱——用代理对象替换原始对象。\n注意Android 的 API 版本比较多，方法和类可能不一样，所以要做好 API 的兼容工作。还有不要hook太底层的东西，各个厂商的rom代码不一样\n<!--more-->\n\n#### hookView的点击事件\n先来个简单点的，View的点击事件。\n\n##### hookOnLongClick\n顺着View的`setOnClickListener`方法找到了`getListenerInfo`方法，进而找到了`ListenerInfo`类，而view的click，longClick，ScrollChange的监听事件都存放在这里面。\n``` java\n    private void hookOnLongCLickListener(View view) {\n        try {\n            //拿到mListenerInfo ，可以通过getListenerInfo方法\n            Class<?> clazzView = Class.forName(\"android.view.View\");\n            Method getListenerInfoMethod = clazzView.getDeclaredMethod(\"getListenerInfo\");\n            getListenerInfoMethod.setAccessible(true);\n            Object listenerInfo = getListenerInfoMethod.invoke(view);\n\n            //拿到 mOnLongClickListener字段，这里的ListenerInfo是View的内部类，需要用$符号链接。\n            Class<?> clazz = Class.forName(\"android.view.View$ListenerInfo\");\n            Field field = clazz.getDeclaredField(\"mOnLongClickListener\");\n            field.setAccessible(true);\n            //拿到原来的mOnLongClickListener字段的值\n            View.OnLongClickListener raw =(View.OnLongClickListener) field.get(listenerInfo);\n            //替换成我们自己的\n            field.set(listenerInfo, new HookOnLongClickListener(raw));\n\n        } catch (Exception e) {\n            e.printStackTrace();\n        }\n    }\n\n    class HookOnLongClickListener implements View.OnLongClickListener{\n        private View.OnLongClickListener raw;\n        public HookOnLongClickListener(View.OnLongClickListener raw){\n            this.raw = raw;\n        }\n        @Override\n        public boolean onLongClick(View v) {\n            Log.e(\"HookUtil\",\"HookOnLongClickListener\");\n            Toast.makeText(MainActivity.this,\"替换之后\",Toast.LENGTH_SHORT).show();\n            if(raw!=null){\n                //调用原来的onLongClick，保持原有逻辑不变\n                raw.onLongClick(v);\n            }\n            return false;\n        }\n    }\n```\n\n这样调用`hookOnLongCLickListerner(view)`方法即可在原有逻辑不变的情况下添加我们自己的逻辑。\n\n##### hookOnLongClick\n```java\n    private void hookOnClickListener(View view) {\n        try {\n            //拿到mListenerInfo ，可以通过getListenerInfo方法\n            Method getListenerInfoMethod = view.getClass().getDeclaredMethod(\"getListenerInfo\");\n            getListenerInfoMethod.setAccessible(true);\n            Object listenerInfo = getListenerInfoMethod.invoke(view);\n\n            // 得到 原始的 OnClickListener 对象\n            Class<?> listenerInfoClz = Class.forName(\"android.view.View$ListenerInfo\");\n            Field mOnClickListener = listenerInfoClz.getDeclaredField(\"mOnClickListener\");\n            mOnClickListener.setAccessible(true);\n            View.OnClickListener originOnClickListener = (View.OnClickListener) mOnClickListener.get(listenerInfo);\n\n            // 用自定义的 OnClickListener 替换原始的 OnClickListener\n            View.OnClickListener hookedOnClickListener = new HookedOnClickListener(originOnClickListener);\n            mOnClickListener.set(listenerInfo, hookedOnClickListener);\n\n        } catch (Exception e) {\n        }\n    }\n\n    class HookedOnClickListener implements View.OnClickListener {\n        private View.OnClickListener origin;\n\n        HookedOnClickListener(View.OnClickListener origin) {\n            this.origin = origin;\n        }\n\n        @Override\n        public void onClick(View v) {\n            Toast.makeText(MainActivity.this, \"hook click\", Toast.LENGTH_SHORT).show();\n            Log.i(\"hook\", \"Before click, do what you want to to.\");\n            if (origin != null) {\n                origin.onClick(v);\n            }\n            Log.i(\"hook\", \"After click, do what you want to to.\");\n        }\n    }\n\n\n```\n这样调用`hookOnLongClickListerner(view)`方法即可在原有逻辑不变的情况下添加我们自己的逻辑。\n\n#### hookAlarmManager\n\n在设置Alarm的过程中，会调用AlarmManager.set方法，而AlarmManager对象又很方便得到：\n\n``` java\n    AlarmManager alarm = (AlarmManager) getSystemService(ALARM_SERVICE);\n    Class<?> alarmManagerClass = alarm.getClass();\n    Field mService = alarmManagerClass.getDeclaredField(\"mService\");\n    mService.setAccessible(true);\n    Object mSerViceInstant = mService.get(alarm);\n\n    AlarmManagerInvocationHandler handler = new AlarmManagerInvocationHandler(mSerViceInstant);\n    Class<?> IActivityManagerIntercept = Class.forName(\"android.app.IAlarmManager\");\n    Object proxy = Proxy.newProxyInstance(Thread.currentThread().getContextClassLoader(),\n            new Class<?>[]{IActivityManagerIntercept}, handler);\n    mService.set(alarm, proxy);\n\n    //动态代理\n    class AlarmManagerInvocationHandler implements InvocationHandler {\n\n        private Object iAlarmManagerObject;\n\n        private AlarmManagerInvocationHandler(Object iAlarmManagerObject) {\n            this.iAlarmManagerObject = iAlarmManagerObject;\n        }\n\n        @Override\n        public Object invoke(Object proxy, Method method, Object[] args) throws Throwable {\n\n\n            Log.i(\"alarm_manager\", method.getName());\n            \n            if (\"set\".equals(method.getName())) {\n                Log.e(\"alarm_manager\", \"调用了mService.set()\");\n\n                try {\n                    long interval = 0;\n                    int alarmManagerTimeType = Integer.valueOf(args[1].toString());\n                    long alarmManagerAtTime = Long.valueOf(args[2].toString());\n                    Log.e(\"alarm_manager_interval\", \"alarmManagerTimeType:\" +alarmManagerTimeType);\n                    Log.e(\"alarm_manager_interval\", \"alarmManagerAtTime:\" +alarmManagerAtTime);\n                    switch (alarmManagerTimeType) {\n                        case AlarmManager.RTC_WAKEUP:\n                        case AlarmManager.RTC:\n                            Log.e(\"alarm_manager_interval\", \"currentTimeMillis--RTC:\" +System.currentTimeMillis());\n                             interval = alarmManagerAtTime - System.currentTimeMillis();\n\n                            break;\n                        case AlarmManager.ELAPSED_REALTIME:\n                        case AlarmManager.ELAPSED_REALTIME_WAKEUP:\n                            Log.e(\"alarm_manager_interval\", \"currentTimeMillis--ELAPSED_REALTIME:\" +SystemClock.elapsedRealtime());\n                            interval = alarmManagerAtTime - SystemClock.elapsedRealtime();\n                            break;\n                    }\n                    Log.e(\"alarm_manager_interval\",interval+\"-->\" + interval/1000/60 );\n\n\n                } catch (Exception e) {\n                    e.printStackTrace();\n                }\n\n\n            }\n            return method.invoke(iAlarmManagerObject, args);\n        }\n    }\n```\n\n#### hookAMS\n对于Activity的启动过程，我们可以hook它的startActivity方法\n\n``` java\n    public void hookASM(){\n        try {\n            Class<?> activityManagerNativeClass = Class.forName(\"android.app.ActivityManagerNative\");\n            Field field = activityManagerNativeClass.getDeclaredField(\"gDefault\");\n            field.setAccessible(true);\n            Object gDefault= field.get(null);\n\n            Class<?> singletonClass = Class.forName(\"android.util.Singleton\");\n            Field mInstance = singletonClass.getDeclaredField(\"mInstance\");\n            mInstance.setAccessible(true);\n            Object iActivityManagerObject = mInstance.get(gDefault);\n\n\n            //开始动态代理，用代理对象替换掉真实的ActivityManager，\n            AmsInvocationHandler amsInvocationHandler = new AmsInvocationHandler(iActivityManagerObject);\n            Object proxy = Proxy.newProxyInstance(Thread.currentThread().getContextClassLoader(), iActivityManagerObject.getClass().getInterfaces(), amsInvocationHandler);\n\n            //现在替换掉这个对象\n            mInstance.set(gDefault, proxy);\n\n        }catch (Exception e){\n            e.printStackTrace();\n        }\n   }\n\n    private class AmsInvocationHandler implements InvocationHandler {\n\n        private Object iActivityManagerObject;\n        private AmsInvocationHandler(Object iActivityManagerObject) {\n            this.iActivityManagerObject = iActivityManagerObject;\n        }\n\n        @Override\n        public Object invoke(Object proxy, Method method, Object[] args) throws Throwable {\n\n            Log.i(\"hookASM\", method.getName());\n            //我要在这里搞点事情\n            if (\"startActivity\".contains(method.getName())) {\n                Log.e(\"hookASM\",\"Activity已经开始启动\");\n            }\n            return method.invoke(iActivityManagerObject, args);\n        }\n    }\n\n```\n既然我们能够接管startActivity方法，我们就可以伪造一个Intent去启动一个没有在清单文件中注册的Activity。\n----\n以上\n","source":"_posts/Android-hook-示例.md","raw":"---\ntitle: Android hook--示例\ndate: 2018-08-06 15:46:06\ntags: [Android]\nkeywords: AndroidHook,反射,动态代理\nphotos:\n  - /image/Android/hook/guide.jpg\n---\n\nHook过程：\n1. 寻找 Hook 点，原则是静态变量或者单例对象，尽量 Hook public 的对象和方法。\n   Hook的选择点：静态变量和单例，因为一旦创建对象，它们不容易变化，非常容易定位。\n2. 选择合适的代理方式，如果是接口可以用动态代理。\n3. 偷梁换柱——用代理对象替换原始对象。\n注意Android 的 API 版本比较多，方法和类可能不一样，所以要做好 API 的兼容工作。还有不要hook太底层的东西，各个厂商的rom代码不一样\n<!--more-->\n\n#### hookView的点击事件\n先来个简单点的，View的点击事件。\n\n##### hookOnLongClick\n顺着View的`setOnClickListener`方法找到了`getListenerInfo`方法，进而找到了`ListenerInfo`类，而view的click，longClick，ScrollChange的监听事件都存放在这里面。\n``` java\n    private void hookOnLongCLickListener(View view) {\n        try {\n            //拿到mListenerInfo ，可以通过getListenerInfo方法\n            Class<?> clazzView = Class.forName(\"android.view.View\");\n            Method getListenerInfoMethod = clazzView.getDeclaredMethod(\"getListenerInfo\");\n            getListenerInfoMethod.setAccessible(true);\n            Object listenerInfo = getListenerInfoMethod.invoke(view);\n\n            //拿到 mOnLongClickListener字段，这里的ListenerInfo是View的内部类，需要用$符号链接。\n            Class<?> clazz = Class.forName(\"android.view.View$ListenerInfo\");\n            Field field = clazz.getDeclaredField(\"mOnLongClickListener\");\n            field.setAccessible(true);\n            //拿到原来的mOnLongClickListener字段的值\n            View.OnLongClickListener raw =(View.OnLongClickListener) field.get(listenerInfo);\n            //替换成我们自己的\n            field.set(listenerInfo, new HookOnLongClickListener(raw));\n\n        } catch (Exception e) {\n            e.printStackTrace();\n        }\n    }\n\n    class HookOnLongClickListener implements View.OnLongClickListener{\n        private View.OnLongClickListener raw;\n        public HookOnLongClickListener(View.OnLongClickListener raw){\n            this.raw = raw;\n        }\n        @Override\n        public boolean onLongClick(View v) {\n            Log.e(\"HookUtil\",\"HookOnLongClickListener\");\n            Toast.makeText(MainActivity.this,\"替换之后\",Toast.LENGTH_SHORT).show();\n            if(raw!=null){\n                //调用原来的onLongClick，保持原有逻辑不变\n                raw.onLongClick(v);\n            }\n            return false;\n        }\n    }\n```\n\n这样调用`hookOnLongCLickListerner(view)`方法即可在原有逻辑不变的情况下添加我们自己的逻辑。\n\n##### hookOnLongClick\n```java\n    private void hookOnClickListener(View view) {\n        try {\n            //拿到mListenerInfo ，可以通过getListenerInfo方法\n            Method getListenerInfoMethod = view.getClass().getDeclaredMethod(\"getListenerInfo\");\n            getListenerInfoMethod.setAccessible(true);\n            Object listenerInfo = getListenerInfoMethod.invoke(view);\n\n            // 得到 原始的 OnClickListener 对象\n            Class<?> listenerInfoClz = Class.forName(\"android.view.View$ListenerInfo\");\n            Field mOnClickListener = listenerInfoClz.getDeclaredField(\"mOnClickListener\");\n            mOnClickListener.setAccessible(true);\n            View.OnClickListener originOnClickListener = (View.OnClickListener) mOnClickListener.get(listenerInfo);\n\n            // 用自定义的 OnClickListener 替换原始的 OnClickListener\n            View.OnClickListener hookedOnClickListener = new HookedOnClickListener(originOnClickListener);\n            mOnClickListener.set(listenerInfo, hookedOnClickListener);\n\n        } catch (Exception e) {\n        }\n    }\n\n    class HookedOnClickListener implements View.OnClickListener {\n        private View.OnClickListener origin;\n\n        HookedOnClickListener(View.OnClickListener origin) {\n            this.origin = origin;\n        }\n\n        @Override\n        public void onClick(View v) {\n            Toast.makeText(MainActivity.this, \"hook click\", Toast.LENGTH_SHORT).show();\n            Log.i(\"hook\", \"Before click, do what you want to to.\");\n            if (origin != null) {\n                origin.onClick(v);\n            }\n            Log.i(\"hook\", \"After click, do what you want to to.\");\n        }\n    }\n\n\n```\n这样调用`hookOnLongClickListerner(view)`方法即可在原有逻辑不变的情况下添加我们自己的逻辑。\n\n#### hookAlarmManager\n\n在设置Alarm的过程中，会调用AlarmManager.set方法，而AlarmManager对象又很方便得到：\n\n``` java\n    AlarmManager alarm = (AlarmManager) getSystemService(ALARM_SERVICE);\n    Class<?> alarmManagerClass = alarm.getClass();\n    Field mService = alarmManagerClass.getDeclaredField(\"mService\");\n    mService.setAccessible(true);\n    Object mSerViceInstant = mService.get(alarm);\n\n    AlarmManagerInvocationHandler handler = new AlarmManagerInvocationHandler(mSerViceInstant);\n    Class<?> IActivityManagerIntercept = Class.forName(\"android.app.IAlarmManager\");\n    Object proxy = Proxy.newProxyInstance(Thread.currentThread().getContextClassLoader(),\n            new Class<?>[]{IActivityManagerIntercept}, handler);\n    mService.set(alarm, proxy);\n\n    //动态代理\n    class AlarmManagerInvocationHandler implements InvocationHandler {\n\n        private Object iAlarmManagerObject;\n\n        private AlarmManagerInvocationHandler(Object iAlarmManagerObject) {\n            this.iAlarmManagerObject = iAlarmManagerObject;\n        }\n\n        @Override\n        public Object invoke(Object proxy, Method method, Object[] args) throws Throwable {\n\n\n            Log.i(\"alarm_manager\", method.getName());\n            \n            if (\"set\".equals(method.getName())) {\n                Log.e(\"alarm_manager\", \"调用了mService.set()\");\n\n                try {\n                    long interval = 0;\n                    int alarmManagerTimeType = Integer.valueOf(args[1].toString());\n                    long alarmManagerAtTime = Long.valueOf(args[2].toString());\n                    Log.e(\"alarm_manager_interval\", \"alarmManagerTimeType:\" +alarmManagerTimeType);\n                    Log.e(\"alarm_manager_interval\", \"alarmManagerAtTime:\" +alarmManagerAtTime);\n                    switch (alarmManagerTimeType) {\n                        case AlarmManager.RTC_WAKEUP:\n                        case AlarmManager.RTC:\n                            Log.e(\"alarm_manager_interval\", \"currentTimeMillis--RTC:\" +System.currentTimeMillis());\n                             interval = alarmManagerAtTime - System.currentTimeMillis();\n\n                            break;\n                        case AlarmManager.ELAPSED_REALTIME:\n                        case AlarmManager.ELAPSED_REALTIME_WAKEUP:\n                            Log.e(\"alarm_manager_interval\", \"currentTimeMillis--ELAPSED_REALTIME:\" +SystemClock.elapsedRealtime());\n                            interval = alarmManagerAtTime - SystemClock.elapsedRealtime();\n                            break;\n                    }\n                    Log.e(\"alarm_manager_interval\",interval+\"-->\" + interval/1000/60 );\n\n\n                } catch (Exception e) {\n                    e.printStackTrace();\n                }\n\n\n            }\n            return method.invoke(iAlarmManagerObject, args);\n        }\n    }\n```\n\n#### hookAMS\n对于Activity的启动过程，我们可以hook它的startActivity方法\n\n``` java\n    public void hookASM(){\n        try {\n            Class<?> activityManagerNativeClass = Class.forName(\"android.app.ActivityManagerNative\");\n            Field field = activityManagerNativeClass.getDeclaredField(\"gDefault\");\n            field.setAccessible(true);\n            Object gDefault= field.get(null);\n\n            Class<?> singletonClass = Class.forName(\"android.util.Singleton\");\n            Field mInstance = singletonClass.getDeclaredField(\"mInstance\");\n            mInstance.setAccessible(true);\n            Object iActivityManagerObject = mInstance.get(gDefault);\n\n\n            //开始动态代理，用代理对象替换掉真实的ActivityManager，\n            AmsInvocationHandler amsInvocationHandler = new AmsInvocationHandler(iActivityManagerObject);\n            Object proxy = Proxy.newProxyInstance(Thread.currentThread().getContextClassLoader(), iActivityManagerObject.getClass().getInterfaces(), amsInvocationHandler);\n\n            //现在替换掉这个对象\n            mInstance.set(gDefault, proxy);\n\n        }catch (Exception e){\n            e.printStackTrace();\n        }\n   }\n\n    private class AmsInvocationHandler implements InvocationHandler {\n\n        private Object iActivityManagerObject;\n        private AmsInvocationHandler(Object iActivityManagerObject) {\n            this.iActivityManagerObject = iActivityManagerObject;\n        }\n\n        @Override\n        public Object invoke(Object proxy, Method method, Object[] args) throws Throwable {\n\n            Log.i(\"hookASM\", method.getName());\n            //我要在这里搞点事情\n            if (\"startActivity\".contains(method.getName())) {\n                Log.e(\"hookASM\",\"Activity已经开始启动\");\n            }\n            return method.invoke(iActivityManagerObject, args);\n        }\n    }\n\n```\n既然我们能够接管startActivity方法，我们就可以伪造一个Intent去启动一个没有在清单文件中注册的Activity。\n----\n以上\n","slug":"Android-hook-示例","published":1,"updated":"2018-08-06T15:26:37.283Z","comments":1,"layout":"post","link":"","_id":"cjl3vbtpu0007isdgajmrbb1j","content":"<p>Hook过程：</p>\n<ol>\n<li>寻找 Hook 点，原则是静态变量或者单例对象，尽量 Hook public 的对象和方法。<br>Hook的选择点：静态变量和单例，因为一旦创建对象，它们不容易变化，非常容易定位。</li>\n<li>选择合适的代理方式，如果是接口可以用动态代理。</li>\n<li>偷梁换柱——用代理对象替换原始对象。<br>注意Android 的 API 版本比较多，方法和类可能不一样，所以要做好 API 的兼容工作。还有不要hook太底层的东西，各个厂商的rom代码不一样<a id=\"more\"></a>\n</li>\n</ol>\n<h4 id=\"hookView的点击事件\"><a href=\"#hookView的点击事件\" class=\"headerlink\" title=\"hookView的点击事件\"></a>hookView的点击事件</h4><p>先来个简单点的，View的点击事件。</p>\n<h5 id=\"hookOnLongClick\"><a href=\"#hookOnLongClick\" class=\"headerlink\" title=\"hookOnLongClick\"></a>hookOnLongClick</h5><p>顺着View的<code>setOnClickListener</code>方法找到了<code>getListenerInfo</code>方法，进而找到了<code>ListenerInfo</code>类，而view的click，longClick，ScrollChange的监听事件都存放在这里面。<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">hookOnLongCLickListener</span><span class=\"params\">(View view)</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">try</span> &#123;</div><div class=\"line\">        <span class=\"comment\">//拿到mListenerInfo ，可以通过getListenerInfo方法</span></div><div class=\"line\">        Class&lt;?&gt; clazzView = Class.forName(<span class=\"string\">\"android.view.View\"</span>);</div><div class=\"line\">        Method getListenerInfoMethod = clazzView.getDeclaredMethod(<span class=\"string\">\"getListenerInfo\"</span>);</div><div class=\"line\">        getListenerInfoMethod.setAccessible(<span class=\"keyword\">true</span>);</div><div class=\"line\">        Object listenerInfo = getListenerInfoMethod.invoke(view);</div><div class=\"line\"></div><div class=\"line\">        <span class=\"comment\">//拿到 mOnLongClickListener字段，这里的ListenerInfo是View的内部类，需要用$符号链接。</span></div><div class=\"line\">        Class&lt;?&gt; clazz = Class.forName(<span class=\"string\">\"android.view.View$ListenerInfo\"</span>);</div><div class=\"line\">        Field field = clazz.getDeclaredField(<span class=\"string\">\"mOnLongClickListener\"</span>);</div><div class=\"line\">        field.setAccessible(<span class=\"keyword\">true</span>);</div><div class=\"line\">        <span class=\"comment\">//拿到原来的mOnLongClickListener字段的值</span></div><div class=\"line\">        View.OnLongClickListener raw =(View.OnLongClickListener) field.get(listenerInfo);</div><div class=\"line\">        <span class=\"comment\">//替换成我们自己的</span></div><div class=\"line\">        field.set(listenerInfo, <span class=\"keyword\">new</span> HookOnLongClickListener(raw));</div><div class=\"line\"></div><div class=\"line\">    &#125; <span class=\"keyword\">catch</span> (Exception e) &#123;</div><div class=\"line\">        e.printStackTrace();</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">HookOnLongClickListener</span> <span class=\"keyword\">implements</span> <span class=\"title\">View</span>.<span class=\"title\">OnLongClickListener</span></span>&#123;</div><div class=\"line\">    <span class=\"keyword\">private</span> View.OnLongClickListener raw;</div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">HookOnLongClickListener</span><span class=\"params\">(View.OnLongClickListener raw)</span></span>&#123;</div><div class=\"line\">        <span class=\"keyword\">this</span>.raw = raw;</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"meta\">@Override</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">onLongClick</span><span class=\"params\">(View v)</span> </span>&#123;</div><div class=\"line\">        Log.e(<span class=\"string\">\"HookUtil\"</span>,<span class=\"string\">\"HookOnLongClickListener\"</span>);</div><div class=\"line\">        Toast.makeText(MainActivity.<span class=\"keyword\">this</span>,<span class=\"string\">\"替换之后\"</span>,Toast.LENGTH_SHORT).show();</div><div class=\"line\">        <span class=\"keyword\">if</span>(raw!=<span class=\"keyword\">null</span>)&#123;</div><div class=\"line\">            <span class=\"comment\">//调用原来的onLongClick，保持原有逻辑不变</span></div><div class=\"line\">            raw.onLongClick(v);</div><div class=\"line\">        &#125;</div><div class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">false</span>;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>这样调用<code>hookOnLongCLickListerner(view)</code>方法即可在原有逻辑不变的情况下添加我们自己的逻辑。</p>\n<h5 id=\"hookOnLongClick-1\"><a href=\"#hookOnLongClick-1\" class=\"headerlink\" title=\"hookOnLongClick\"></a>hookOnLongClick</h5><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">hookOnClickListener</span><span class=\"params\">(View view)</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">try</span> &#123;</div><div class=\"line\">        <span class=\"comment\">//拿到mListenerInfo ，可以通过getListenerInfo方法</span></div><div class=\"line\">        Method getListenerInfoMethod = view.getClass().getDeclaredMethod(<span class=\"string\">\"getListenerInfo\"</span>);</div><div class=\"line\">        getListenerInfoMethod.setAccessible(<span class=\"keyword\">true</span>);</div><div class=\"line\">        Object listenerInfo = getListenerInfoMethod.invoke(view);</div><div class=\"line\"></div><div class=\"line\">        <span class=\"comment\">// 得到 原始的 OnClickListener 对象</span></div><div class=\"line\">        Class&lt;?&gt; listenerInfoClz = Class.forName(<span class=\"string\">\"android.view.View$ListenerInfo\"</span>);</div><div class=\"line\">        Field mOnClickListener = listenerInfoClz.getDeclaredField(<span class=\"string\">\"mOnClickListener\"</span>);</div><div class=\"line\">        mOnClickListener.setAccessible(<span class=\"keyword\">true</span>);</div><div class=\"line\">        View.OnClickListener originOnClickListener = (View.OnClickListener) mOnClickListener.get(listenerInfo);</div><div class=\"line\"></div><div class=\"line\">        <span class=\"comment\">// 用自定义的 OnClickListener 替换原始的 OnClickListener</span></div><div class=\"line\">        View.OnClickListener hookedOnClickListener = <span class=\"keyword\">new</span> HookedOnClickListener(originOnClickListener);</div><div class=\"line\">        mOnClickListener.set(listenerInfo, hookedOnClickListener);</div><div class=\"line\"></div><div class=\"line\">    &#125; <span class=\"keyword\">catch</span> (Exception e) &#123;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">HookedOnClickListener</span> <span class=\"keyword\">implements</span> <span class=\"title\">View</span>.<span class=\"title\">OnClickListener</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">private</span> View.OnClickListener origin;</div><div class=\"line\"></div><div class=\"line\">    HookedOnClickListener(View.OnClickListener origin) &#123;</div><div class=\"line\">        <span class=\"keyword\">this</span>.origin = origin;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"meta\">@Override</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onClick</span><span class=\"params\">(View v)</span> </span>&#123;</div><div class=\"line\">        Toast.makeText(MainActivity.<span class=\"keyword\">this</span>, <span class=\"string\">\"hook click\"</span>, Toast.LENGTH_SHORT).show();</div><div class=\"line\">        Log.i(<span class=\"string\">\"hook\"</span>, <span class=\"string\">\"Before click, do what you want to to.\"</span>);</div><div class=\"line\">        <span class=\"keyword\">if</span> (origin != <span class=\"keyword\">null</span>) &#123;</div><div class=\"line\">            origin.onClick(v);</div><div class=\"line\">        &#125;</div><div class=\"line\">        Log.i(<span class=\"string\">\"hook\"</span>, <span class=\"string\">\"After click, do what you want to to.\"</span>);</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>这样调用<code>hookOnLongClickListerner(view)</code>方法即可在原有逻辑不变的情况下添加我们自己的逻辑。</p>\n<h4 id=\"hookAlarmManager\"><a href=\"#hookAlarmManager\" class=\"headerlink\" title=\"hookAlarmManager\"></a>hookAlarmManager</h4><p>在设置Alarm的过程中，会调用AlarmManager.set方法，而AlarmManager对象又很方便得到：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div></pre></td><td class=\"code\"><pre><div class=\"line\">AlarmManager alarm = (AlarmManager) getSystemService(ALARM_SERVICE);</div><div class=\"line\">Class&lt;?&gt; alarmManagerClass = alarm.getClass();</div><div class=\"line\">Field mService = alarmManagerClass.getDeclaredField(<span class=\"string\">\"mService\"</span>);</div><div class=\"line\">mService.setAccessible(<span class=\"keyword\">true</span>);</div><div class=\"line\">Object mSerViceInstant = mService.get(alarm);</div><div class=\"line\"></div><div class=\"line\">AlarmManagerInvocationHandler handler = <span class=\"keyword\">new</span> AlarmManagerInvocationHandler(mSerViceInstant);</div><div class=\"line\">Class&lt;?&gt; IActivityManagerIntercept = Class.forName(<span class=\"string\">\"android.app.IAlarmManager\"</span>);</div><div class=\"line\">Object proxy = Proxy.newProxyInstance(Thread.currentThread().getContextClassLoader(),</div><div class=\"line\">        <span class=\"keyword\">new</span> Class&lt;?&gt;[]&#123;IActivityManagerIntercept&#125;, handler);</div><div class=\"line\">mService.set(alarm, proxy);</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">//动态代理</span></div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">AlarmManagerInvocationHandler</span> <span class=\"keyword\">implements</span> <span class=\"title\">InvocationHandler</span> </span>&#123;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">private</span> Object iAlarmManagerObject;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"title\">AlarmManagerInvocationHandler</span><span class=\"params\">(Object iAlarmManagerObject)</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">this</span>.iAlarmManagerObject = iAlarmManagerObject;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"meta\">@Override</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> Object <span class=\"title\">invoke</span><span class=\"params\">(Object proxy, Method method, Object[] args)</span> <span class=\"keyword\">throws</span> Throwable </span>&#123;</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">        Log.i(<span class=\"string\">\"alarm_manager\"</span>, method.getName());</div><div class=\"line\">        </div><div class=\"line\">        <span class=\"keyword\">if</span> (<span class=\"string\">\"set\"</span>.equals(method.getName())) &#123;</div><div class=\"line\">            Log.e(<span class=\"string\">\"alarm_manager\"</span>, <span class=\"string\">\"调用了mService.set()\"</span>);</div><div class=\"line\"></div><div class=\"line\">            <span class=\"keyword\">try</span> &#123;</div><div class=\"line\">                <span class=\"keyword\">long</span> interval = <span class=\"number\">0</span>;</div><div class=\"line\">                <span class=\"keyword\">int</span> alarmManagerTimeType = Integer.valueOf(args[<span class=\"number\">1</span>].toString());</div><div class=\"line\">                <span class=\"keyword\">long</span> alarmManagerAtTime = Long.valueOf(args[<span class=\"number\">2</span>].toString());</div><div class=\"line\">                Log.e(<span class=\"string\">\"alarm_manager_interval\"</span>, <span class=\"string\">\"alarmManagerTimeType:\"</span> +alarmManagerTimeType);</div><div class=\"line\">                Log.e(<span class=\"string\">\"alarm_manager_interval\"</span>, <span class=\"string\">\"alarmManagerAtTime:\"</span> +alarmManagerAtTime);</div><div class=\"line\">                <span class=\"keyword\">switch</span> (alarmManagerTimeType) &#123;</div><div class=\"line\">                    <span class=\"keyword\">case</span> AlarmManager.RTC_WAKEUP:</div><div class=\"line\">                    <span class=\"keyword\">case</span> AlarmManager.RTC:</div><div class=\"line\">                        Log.e(<span class=\"string\">\"alarm_manager_interval\"</span>, <span class=\"string\">\"currentTimeMillis--RTC:\"</span> +System.currentTimeMillis());</div><div class=\"line\">                         interval = alarmManagerAtTime - System.currentTimeMillis();</div><div class=\"line\"></div><div class=\"line\">                        <span class=\"keyword\">break</span>;</div><div class=\"line\">                    <span class=\"keyword\">case</span> AlarmManager.ELAPSED_REALTIME:</div><div class=\"line\">                    <span class=\"keyword\">case</span> AlarmManager.ELAPSED_REALTIME_WAKEUP:</div><div class=\"line\">                        Log.e(<span class=\"string\">\"alarm_manager_interval\"</span>, <span class=\"string\">\"currentTimeMillis--ELAPSED_REALTIME:\"</span> +SystemClock.elapsedRealtime());</div><div class=\"line\">                        interval = alarmManagerAtTime - SystemClock.elapsedRealtime();</div><div class=\"line\">                        <span class=\"keyword\">break</span>;</div><div class=\"line\">                &#125;</div><div class=\"line\">                Log.e(<span class=\"string\">\"alarm_manager_interval\"</span>,interval+<span class=\"string\">\"--&gt;\"</span> + interval/<span class=\"number\">1000</span>/<span class=\"number\">60</span> );</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">            &#125; <span class=\"keyword\">catch</span> (Exception e) &#123;</div><div class=\"line\">                e.printStackTrace();</div><div class=\"line\">            &#125;</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">        &#125;</div><div class=\"line\">        <span class=\"keyword\">return</span> method.invoke(iAlarmManagerObject, args);</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h4 id=\"hookAMS\"><a href=\"#hookAMS\" class=\"headerlink\" title=\"hookAMS\"></a>hookAMS</h4><p>对于Activity的启动过程，我们可以hook它的startActivity方法</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div></pre></td><td class=\"code\"><pre><div class=\"line\"> <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">hookASM</span><span class=\"params\">()</span></span>&#123;</div><div class=\"line\">     <span class=\"keyword\">try</span> &#123;</div><div class=\"line\">         Class&lt;?&gt; activityManagerNativeClass = Class.forName(<span class=\"string\">\"android.app.ActivityManagerNative\"</span>);</div><div class=\"line\">         Field field = activityManagerNativeClass.getDeclaredField(<span class=\"string\">\"gDefault\"</span>);</div><div class=\"line\">         field.setAccessible(<span class=\"keyword\">true</span>);</div><div class=\"line\">         Object gDefault= field.get(<span class=\"keyword\">null</span>);</div><div class=\"line\"></div><div class=\"line\">         Class&lt;?&gt; singletonClass = Class.forName(<span class=\"string\">\"android.util.Singleton\"</span>);</div><div class=\"line\">         Field mInstance = singletonClass.getDeclaredField(<span class=\"string\">\"mInstance\"</span>);</div><div class=\"line\">         mInstance.setAccessible(<span class=\"keyword\">true</span>);</div><div class=\"line\">         Object iActivityManagerObject = mInstance.get(gDefault);</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">         <span class=\"comment\">//开始动态代理，用代理对象替换掉真实的ActivityManager，</span></div><div class=\"line\">         AmsInvocationHandler amsInvocationHandler = <span class=\"keyword\">new</span> AmsInvocationHandler(iActivityManagerObject);</div><div class=\"line\">         Object proxy = Proxy.newProxyInstance(Thread.currentThread().getContextClassLoader(), iActivityManagerObject.getClass().getInterfaces(), amsInvocationHandler);</div><div class=\"line\"></div><div class=\"line\">         <span class=\"comment\">//现在替换掉这个对象</span></div><div class=\"line\">         mInstance.set(gDefault, proxy);</div><div class=\"line\"></div><div class=\"line\">     &#125;<span class=\"keyword\">catch</span> (Exception e)&#123;</div><div class=\"line\">         e.printStackTrace();</div><div class=\"line\">     &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"> <span class=\"keyword\">private</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">AmsInvocationHandler</span> <span class=\"keyword\">implements</span> <span class=\"title\">InvocationHandler</span> </span>&#123;</div><div class=\"line\"></div><div class=\"line\">     <span class=\"keyword\">private</span> Object iActivityManagerObject;</div><div class=\"line\">     <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"title\">AmsInvocationHandler</span><span class=\"params\">(Object iActivityManagerObject)</span> </span>&#123;</div><div class=\"line\">         <span class=\"keyword\">this</span>.iActivityManagerObject = iActivityManagerObject;</div><div class=\"line\">     &#125;</div><div class=\"line\"></div><div class=\"line\">     <span class=\"meta\">@Override</span></div><div class=\"line\">     <span class=\"function\"><span class=\"keyword\">public</span> Object <span class=\"title\">invoke</span><span class=\"params\">(Object proxy, Method method, Object[] args)</span> <span class=\"keyword\">throws</span> Throwable </span>&#123;</div><div class=\"line\"></div><div class=\"line\">         Log.i(<span class=\"string\">\"hookASM\"</span>, method.getName());</div><div class=\"line\">         <span class=\"comment\">//我要在这里搞点事情</span></div><div class=\"line\">         <span class=\"keyword\">if</span> (<span class=\"string\">\"startActivity\"</span>.contains(method.getName())) &#123;</div><div class=\"line\">             Log.e(<span class=\"string\">\"hookASM\"</span>,<span class=\"string\">\"Activity已经开始启动\"</span>);</div><div class=\"line\">         &#125;</div><div class=\"line\">         <span class=\"keyword\">return</span> method.invoke(iActivityManagerObject, args);</div><div class=\"line\">     &#125;</div><div class=\"line\"> &#125;</div></pre></td></tr></table></figure>\n<h2 id=\"既然我们能够接管startActivity方法，我们就可以伪造一个Intent去启动一个没有在清单文件中注册的Activity。\"><a href=\"#既然我们能够接管startActivity方法，我们就可以伪造一个Intent去启动一个没有在清单文件中注册的Activity。\" class=\"headerlink\" title=\"既然我们能够接管startActivity方法，我们就可以伪造一个Intent去启动一个没有在清单文件中注册的Activity。\"></a>既然我们能够接管startActivity方法，我们就可以伪造一个Intent去启动一个没有在清单文件中注册的Activity。</h2><p>以上</p>\n","excerpt":"<p>Hook过程：</p>\n<ol>\n<li>寻找 Hook 点，原则是静态变量或者单例对象，尽量 Hook public 的对象和方法。<br>Hook的选择点：静态变量和单例，因为一旦创建对象，它们不容易变化，非常容易定位。</li>\n<li>选择合适的代理方式，如果是接口可以用动态代理。</li>\n<li>偷梁换柱——用代理对象替换原始对象。<br>注意Android 的 API 版本比较多，方法和类可能不一样，所以要做好 API 的兼容工作。还有不要hook太底层的东西，各个厂商的rom代码不一样","more":"</li>\n</ol>\n<h4 id=\"hookView的点击事件\"><a href=\"#hookView的点击事件\" class=\"headerlink\" title=\"hookView的点击事件\"></a>hookView的点击事件</h4><p>先来个简单点的，View的点击事件。</p>\n<h5 id=\"hookOnLongClick\"><a href=\"#hookOnLongClick\" class=\"headerlink\" title=\"hookOnLongClick\"></a>hookOnLongClick</h5><p>顺着View的<code>setOnClickListener</code>方法找到了<code>getListenerInfo</code>方法，进而找到了<code>ListenerInfo</code>类，而view的click，longClick，ScrollChange的监听事件都存放在这里面。<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">hookOnLongCLickListener</span><span class=\"params\">(View view)</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">try</span> &#123;</div><div class=\"line\">        <span class=\"comment\">//拿到mListenerInfo ，可以通过getListenerInfo方法</span></div><div class=\"line\">        Class&lt;?&gt; clazzView = Class.forName(<span class=\"string\">\"android.view.View\"</span>);</div><div class=\"line\">        Method getListenerInfoMethod = clazzView.getDeclaredMethod(<span class=\"string\">\"getListenerInfo\"</span>);</div><div class=\"line\">        getListenerInfoMethod.setAccessible(<span class=\"keyword\">true</span>);</div><div class=\"line\">        Object listenerInfo = getListenerInfoMethod.invoke(view);</div><div class=\"line\"></div><div class=\"line\">        <span class=\"comment\">//拿到 mOnLongClickListener字段，这里的ListenerInfo是View的内部类，需要用$符号链接。</span></div><div class=\"line\">        Class&lt;?&gt; clazz = Class.forName(<span class=\"string\">\"android.view.View$ListenerInfo\"</span>);</div><div class=\"line\">        Field field = clazz.getDeclaredField(<span class=\"string\">\"mOnLongClickListener\"</span>);</div><div class=\"line\">        field.setAccessible(<span class=\"keyword\">true</span>);</div><div class=\"line\">        <span class=\"comment\">//拿到原来的mOnLongClickListener字段的值</span></div><div class=\"line\">        View.OnLongClickListener raw =(View.OnLongClickListener) field.get(listenerInfo);</div><div class=\"line\">        <span class=\"comment\">//替换成我们自己的</span></div><div class=\"line\">        field.set(listenerInfo, <span class=\"keyword\">new</span> HookOnLongClickListener(raw));</div><div class=\"line\"></div><div class=\"line\">    &#125; <span class=\"keyword\">catch</span> (Exception e) &#123;</div><div class=\"line\">        e.printStackTrace();</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">HookOnLongClickListener</span> <span class=\"keyword\">implements</span> <span class=\"title\">View</span>.<span class=\"title\">OnLongClickListener</span></span>&#123;</div><div class=\"line\">    <span class=\"keyword\">private</span> View.OnLongClickListener raw;</div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">HookOnLongClickListener</span><span class=\"params\">(View.OnLongClickListener raw)</span></span>&#123;</div><div class=\"line\">        <span class=\"keyword\">this</span>.raw = raw;</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"meta\">@Override</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">onLongClick</span><span class=\"params\">(View v)</span> </span>&#123;</div><div class=\"line\">        Log.e(<span class=\"string\">\"HookUtil\"</span>,<span class=\"string\">\"HookOnLongClickListener\"</span>);</div><div class=\"line\">        Toast.makeText(MainActivity.<span class=\"keyword\">this</span>,<span class=\"string\">\"替换之后\"</span>,Toast.LENGTH_SHORT).show();</div><div class=\"line\">        <span class=\"keyword\">if</span>(raw!=<span class=\"keyword\">null</span>)&#123;</div><div class=\"line\">            <span class=\"comment\">//调用原来的onLongClick，保持原有逻辑不变</span></div><div class=\"line\">            raw.onLongClick(v);</div><div class=\"line\">        &#125;</div><div class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">false</span>;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>这样调用<code>hookOnLongCLickListerner(view)</code>方法即可在原有逻辑不变的情况下添加我们自己的逻辑。</p>\n<h5 id=\"hookOnLongClick-1\"><a href=\"#hookOnLongClick-1\" class=\"headerlink\" title=\"hookOnLongClick\"></a>hookOnLongClick</h5><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">hookOnClickListener</span><span class=\"params\">(View view)</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">try</span> &#123;</div><div class=\"line\">        <span class=\"comment\">//拿到mListenerInfo ，可以通过getListenerInfo方法</span></div><div class=\"line\">        Method getListenerInfoMethod = view.getClass().getDeclaredMethod(<span class=\"string\">\"getListenerInfo\"</span>);</div><div class=\"line\">        getListenerInfoMethod.setAccessible(<span class=\"keyword\">true</span>);</div><div class=\"line\">        Object listenerInfo = getListenerInfoMethod.invoke(view);</div><div class=\"line\"></div><div class=\"line\">        <span class=\"comment\">// 得到 原始的 OnClickListener 对象</span></div><div class=\"line\">        Class&lt;?&gt; listenerInfoClz = Class.forName(<span class=\"string\">\"android.view.View$ListenerInfo\"</span>);</div><div class=\"line\">        Field mOnClickListener = listenerInfoClz.getDeclaredField(<span class=\"string\">\"mOnClickListener\"</span>);</div><div class=\"line\">        mOnClickListener.setAccessible(<span class=\"keyword\">true</span>);</div><div class=\"line\">        View.OnClickListener originOnClickListener = (View.OnClickListener) mOnClickListener.get(listenerInfo);</div><div class=\"line\"></div><div class=\"line\">        <span class=\"comment\">// 用自定义的 OnClickListener 替换原始的 OnClickListener</span></div><div class=\"line\">        View.OnClickListener hookedOnClickListener = <span class=\"keyword\">new</span> HookedOnClickListener(originOnClickListener);</div><div class=\"line\">        mOnClickListener.set(listenerInfo, hookedOnClickListener);</div><div class=\"line\"></div><div class=\"line\">    &#125; <span class=\"keyword\">catch</span> (Exception e) &#123;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">HookedOnClickListener</span> <span class=\"keyword\">implements</span> <span class=\"title\">View</span>.<span class=\"title\">OnClickListener</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">private</span> View.OnClickListener origin;</div><div class=\"line\"></div><div class=\"line\">    HookedOnClickListener(View.OnClickListener origin) &#123;</div><div class=\"line\">        <span class=\"keyword\">this</span>.origin = origin;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"meta\">@Override</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onClick</span><span class=\"params\">(View v)</span> </span>&#123;</div><div class=\"line\">        Toast.makeText(MainActivity.<span class=\"keyword\">this</span>, <span class=\"string\">\"hook click\"</span>, Toast.LENGTH_SHORT).show();</div><div class=\"line\">        Log.i(<span class=\"string\">\"hook\"</span>, <span class=\"string\">\"Before click, do what you want to to.\"</span>);</div><div class=\"line\">        <span class=\"keyword\">if</span> (origin != <span class=\"keyword\">null</span>) &#123;</div><div class=\"line\">            origin.onClick(v);</div><div class=\"line\">        &#125;</div><div class=\"line\">        Log.i(<span class=\"string\">\"hook\"</span>, <span class=\"string\">\"After click, do what you want to to.\"</span>);</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>这样调用<code>hookOnLongClickListerner(view)</code>方法即可在原有逻辑不变的情况下添加我们自己的逻辑。</p>\n<h4 id=\"hookAlarmManager\"><a href=\"#hookAlarmManager\" class=\"headerlink\" title=\"hookAlarmManager\"></a>hookAlarmManager</h4><p>在设置Alarm的过程中，会调用AlarmManager.set方法，而AlarmManager对象又很方便得到：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div></pre></td><td class=\"code\"><pre><div class=\"line\">AlarmManager alarm = (AlarmManager) getSystemService(ALARM_SERVICE);</div><div class=\"line\">Class&lt;?&gt; alarmManagerClass = alarm.getClass();</div><div class=\"line\">Field mService = alarmManagerClass.getDeclaredField(<span class=\"string\">\"mService\"</span>);</div><div class=\"line\">mService.setAccessible(<span class=\"keyword\">true</span>);</div><div class=\"line\">Object mSerViceInstant = mService.get(alarm);</div><div class=\"line\"></div><div class=\"line\">AlarmManagerInvocationHandler handler = <span class=\"keyword\">new</span> AlarmManagerInvocationHandler(mSerViceInstant);</div><div class=\"line\">Class&lt;?&gt; IActivityManagerIntercept = Class.forName(<span class=\"string\">\"android.app.IAlarmManager\"</span>);</div><div class=\"line\">Object proxy = Proxy.newProxyInstance(Thread.currentThread().getContextClassLoader(),</div><div class=\"line\">        <span class=\"keyword\">new</span> Class&lt;?&gt;[]&#123;IActivityManagerIntercept&#125;, handler);</div><div class=\"line\">mService.set(alarm, proxy);</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">//动态代理</span></div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">AlarmManagerInvocationHandler</span> <span class=\"keyword\">implements</span> <span class=\"title\">InvocationHandler</span> </span>&#123;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">private</span> Object iAlarmManagerObject;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"title\">AlarmManagerInvocationHandler</span><span class=\"params\">(Object iAlarmManagerObject)</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">this</span>.iAlarmManagerObject = iAlarmManagerObject;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"meta\">@Override</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> Object <span class=\"title\">invoke</span><span class=\"params\">(Object proxy, Method method, Object[] args)</span> <span class=\"keyword\">throws</span> Throwable </span>&#123;</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">        Log.i(<span class=\"string\">\"alarm_manager\"</span>, method.getName());</div><div class=\"line\">        </div><div class=\"line\">        <span class=\"keyword\">if</span> (<span class=\"string\">\"set\"</span>.equals(method.getName())) &#123;</div><div class=\"line\">            Log.e(<span class=\"string\">\"alarm_manager\"</span>, <span class=\"string\">\"调用了mService.set()\"</span>);</div><div class=\"line\"></div><div class=\"line\">            <span class=\"keyword\">try</span> &#123;</div><div class=\"line\">                <span class=\"keyword\">long</span> interval = <span class=\"number\">0</span>;</div><div class=\"line\">                <span class=\"keyword\">int</span> alarmManagerTimeType = Integer.valueOf(args[<span class=\"number\">1</span>].toString());</div><div class=\"line\">                <span class=\"keyword\">long</span> alarmManagerAtTime = Long.valueOf(args[<span class=\"number\">2</span>].toString());</div><div class=\"line\">                Log.e(<span class=\"string\">\"alarm_manager_interval\"</span>, <span class=\"string\">\"alarmManagerTimeType:\"</span> +alarmManagerTimeType);</div><div class=\"line\">                Log.e(<span class=\"string\">\"alarm_manager_interval\"</span>, <span class=\"string\">\"alarmManagerAtTime:\"</span> +alarmManagerAtTime);</div><div class=\"line\">                <span class=\"keyword\">switch</span> (alarmManagerTimeType) &#123;</div><div class=\"line\">                    <span class=\"keyword\">case</span> AlarmManager.RTC_WAKEUP:</div><div class=\"line\">                    <span class=\"keyword\">case</span> AlarmManager.RTC:</div><div class=\"line\">                        Log.e(<span class=\"string\">\"alarm_manager_interval\"</span>, <span class=\"string\">\"currentTimeMillis--RTC:\"</span> +System.currentTimeMillis());</div><div class=\"line\">                         interval = alarmManagerAtTime - System.currentTimeMillis();</div><div class=\"line\"></div><div class=\"line\">                        <span class=\"keyword\">break</span>;</div><div class=\"line\">                    <span class=\"keyword\">case</span> AlarmManager.ELAPSED_REALTIME:</div><div class=\"line\">                    <span class=\"keyword\">case</span> AlarmManager.ELAPSED_REALTIME_WAKEUP:</div><div class=\"line\">                        Log.e(<span class=\"string\">\"alarm_manager_interval\"</span>, <span class=\"string\">\"currentTimeMillis--ELAPSED_REALTIME:\"</span> +SystemClock.elapsedRealtime());</div><div class=\"line\">                        interval = alarmManagerAtTime - SystemClock.elapsedRealtime();</div><div class=\"line\">                        <span class=\"keyword\">break</span>;</div><div class=\"line\">                &#125;</div><div class=\"line\">                Log.e(<span class=\"string\">\"alarm_manager_interval\"</span>,interval+<span class=\"string\">\"--&gt;\"</span> + interval/<span class=\"number\">1000</span>/<span class=\"number\">60</span> );</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">            &#125; <span class=\"keyword\">catch</span> (Exception e) &#123;</div><div class=\"line\">                e.printStackTrace();</div><div class=\"line\">            &#125;</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">        &#125;</div><div class=\"line\">        <span class=\"keyword\">return</span> method.invoke(iAlarmManagerObject, args);</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h4 id=\"hookAMS\"><a href=\"#hookAMS\" class=\"headerlink\" title=\"hookAMS\"></a>hookAMS</h4><p>对于Activity的启动过程，我们可以hook它的startActivity方法</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div></pre></td><td class=\"code\"><pre><div class=\"line\"> <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">hookASM</span><span class=\"params\">()</span></span>&#123;</div><div class=\"line\">     <span class=\"keyword\">try</span> &#123;</div><div class=\"line\">         Class&lt;?&gt; activityManagerNativeClass = Class.forName(<span class=\"string\">\"android.app.ActivityManagerNative\"</span>);</div><div class=\"line\">         Field field = activityManagerNativeClass.getDeclaredField(<span class=\"string\">\"gDefault\"</span>);</div><div class=\"line\">         field.setAccessible(<span class=\"keyword\">true</span>);</div><div class=\"line\">         Object gDefault= field.get(<span class=\"keyword\">null</span>);</div><div class=\"line\"></div><div class=\"line\">         Class&lt;?&gt; singletonClass = Class.forName(<span class=\"string\">\"android.util.Singleton\"</span>);</div><div class=\"line\">         Field mInstance = singletonClass.getDeclaredField(<span class=\"string\">\"mInstance\"</span>);</div><div class=\"line\">         mInstance.setAccessible(<span class=\"keyword\">true</span>);</div><div class=\"line\">         Object iActivityManagerObject = mInstance.get(gDefault);</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">         <span class=\"comment\">//开始动态代理，用代理对象替换掉真实的ActivityManager，</span></div><div class=\"line\">         AmsInvocationHandler amsInvocationHandler = <span class=\"keyword\">new</span> AmsInvocationHandler(iActivityManagerObject);</div><div class=\"line\">         Object proxy = Proxy.newProxyInstance(Thread.currentThread().getContextClassLoader(), iActivityManagerObject.getClass().getInterfaces(), amsInvocationHandler);</div><div class=\"line\"></div><div class=\"line\">         <span class=\"comment\">//现在替换掉这个对象</span></div><div class=\"line\">         mInstance.set(gDefault, proxy);</div><div class=\"line\"></div><div class=\"line\">     &#125;<span class=\"keyword\">catch</span> (Exception e)&#123;</div><div class=\"line\">         e.printStackTrace();</div><div class=\"line\">     &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"> <span class=\"keyword\">private</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">AmsInvocationHandler</span> <span class=\"keyword\">implements</span> <span class=\"title\">InvocationHandler</span> </span>&#123;</div><div class=\"line\"></div><div class=\"line\">     <span class=\"keyword\">private</span> Object iActivityManagerObject;</div><div class=\"line\">     <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"title\">AmsInvocationHandler</span><span class=\"params\">(Object iActivityManagerObject)</span> </span>&#123;</div><div class=\"line\">         <span class=\"keyword\">this</span>.iActivityManagerObject = iActivityManagerObject;</div><div class=\"line\">     &#125;</div><div class=\"line\"></div><div class=\"line\">     <span class=\"meta\">@Override</span></div><div class=\"line\">     <span class=\"function\"><span class=\"keyword\">public</span> Object <span class=\"title\">invoke</span><span class=\"params\">(Object proxy, Method method, Object[] args)</span> <span class=\"keyword\">throws</span> Throwable </span>&#123;</div><div class=\"line\"></div><div class=\"line\">         Log.i(<span class=\"string\">\"hookASM\"</span>, method.getName());</div><div class=\"line\">         <span class=\"comment\">//我要在这里搞点事情</span></div><div class=\"line\">         <span class=\"keyword\">if</span> (<span class=\"string\">\"startActivity\"</span>.contains(method.getName())) &#123;</div><div class=\"line\">             Log.e(<span class=\"string\">\"hookASM\"</span>,<span class=\"string\">\"Activity已经开始启动\"</span>);</div><div class=\"line\">         &#125;</div><div class=\"line\">         <span class=\"keyword\">return</span> method.invoke(iActivityManagerObject, args);</div><div class=\"line\">     &#125;</div><div class=\"line\"> &#125;</div></pre></td></tr></table></figure>\n<h2 id=\"既然我们能够接管startActivity方法，我们就可以伪造一个Intent去启动一个没有在清单文件中注册的Activity。\"><a href=\"#既然我们能够接管startActivity方法，我们就可以伪造一个Intent去启动一个没有在清单文件中注册的Activity。\" class=\"headerlink\" title=\"既然我们能够接管startActivity方法，我们就可以伪造一个Intent去启动一个没有在清单文件中注册的Activity。\"></a>既然我们能够接管startActivity方法，我们就可以伪造一个Intent去启动一个没有在清单文件中注册的Activity。</h2><p>以上</p>"},{"title":"Android7.0 MultiWindow","date":"2018-06-11T07:17:54.000Z","keywords":"分屏模式,多窗口,MultiWindow","_content":"Android7.0推出了多窗口(分屏)模式，允许一个屏幕下显示两个应用，可以一边追剧一边看电子书，不过在小一点的手机屏幕上看起来可能有点鸡肋。但是在TV端(这个屏幕就比较大了，一般都是40寸起步)中，画中画模式可以让我们同时进行多个任务了。\n<!-- more -->\n#### 开启分屏\n只要你编译使用sdk版本大于等于7.0就可以支持分屏了：`compileSdkVersion 25`，如果想要禁用分屏，只需要在`AndroidManifest.xml`添加属性：android:resizeableActivity=\"false\"，这个属性使用于application和Activity标签。\n7.0中默认是true。\n除了分屏模式之外，还有自由模式(Freeform,常见于桌面设备，类似于windows的应用窗口，可以拖拽边缘改变大小)。\n\n#### 生命周期\n开启多窗口模式不会更改Activity的生命周期，\n在多窗口模式中，在指定时间只有最近与用户交互过的 Activity 为活动状态。 该 Activity 将被视为顶级 Activity。 所有其他 Activity 虽然可见，但均处于暂停状态。 但是，这些已暂停但可见的 Activity 在系统中享有比不可见 Activity 更高的优先级。 如果用户与其中一个暂停的 Activity 交互，该 Activity 将恢复，而之前的顶级 Activity 将暂停。\n\n例如：\n![MultiWindow](/image/Android/MultiWindow/1.png)\n在上图中，我先打开了上面的Activity，然后又打开了下面Gmail的Activity，这时下面的Activity处于可交互(顶级Activity)状态，上面的Activity虽然课件，但是处于暂停状态，这时按下back键是对下面Activity进行操作。当点击上面的Activity时，上面的Activity处于可交互状态，下面的Activity处于暂停状态。\nPS：在多窗口模式中，用户仍可以看到处于暂停状态的应用。 应用在暂停状态下可能仍需要继续其操作。 例如，处于暂停模式但可见的视频播放应用应继续显示视频。 因此，我们建议播放视频的 Activity 不要暂停其 onPause() 处理程序中的视频。 应暂停 onStop() 中的视频，并恢复 onStart() 中的视频播放。\n\n用户使用多窗口模式显示应用时，系统将通知 Activity 发生配置变更。 该变更与系统通知应用设备从纵向模式切换到横向模式时的 Activity 生命周期影响基本相同，但设备不仅仅是交换尺寸，而是会变更尺寸。您的 Activity 可以自行处理配置变更，或允许系统销毁 Activity，并以新的尺寸重新创建该 Activity。\n给Activity加上如下配置可以保证切换成多屏模式或者画中画模式时Activity不会销毁重建。\nandroid:configChanges=\"screenSize|smallestScreenSize|screenLayout|orientation\"\n\n#### 针对多窗口模式配置应用\n\n如果应用支持 Android N，您可以对应用的 Activity 是否支持多窗口显示以及显示方式进行配置。 您可以在清单文件中设置属性，以控制大小和布局。 根 Activity 的属性设置适用于其任务栈中的所有 Activity。 例如，如果根 Activity 中 `android:resizeableActivity` 设定为 true，则任务栈中的所有 Activity 都将可以调整大小。\n如果使用低于 Android N 版本的 SDK 构建多向应用，则用户在多窗口模式中使用应用时，系统将强制调整应用大小。 系统将显示对话框，提醒用户应用可能会发生异常。 系统不会调整定向应用的大小；如果用户尝试在多窗口模式下打开定向应用，应用将全屏显示。\n\n** android:resizeableActivity **\n在清单的 `<activity>` 或 `<application>` 节点中设置该属性，启用或禁用多窗口显示：\n\n``` xml\n    android:resizeableActivity=[\"true\" | \"false\"] \n```\n如果该属性设置为 true，Activity 将能以分屏和自由形状模式启动。 如果此属性设置为 false，Activity 将不支持多窗口模式。 如果该值为 false，且用户尝试在多窗口模式下启动 Activity，该 Activity 将全屏显示。\n如果应用面向 Android N，但未对该属性指定值，则该属性的值默认设为 true。\n\n** android:supportsPictureInPicture **\n在清单文件的 `<activity>` 节点中设置该属性，指明 Activity 是否支持画中画显示。 如果 `android:resizeableActivity` 为 false，将忽略该属性。\n``` xml\nandroid:supportsPictureInPicture=[\"true\" | \"false\"]\n```\n\n#### 布局属性\n对于 Android N，`<layout>` 清单元素支持以下几种属性，这些属性影响 Activity 在多窗口模式中的行为：\n\n`android:defaultWidth`\n以自由形状模式启动时 Activity 的默认宽度。\n`android:defaultHeight`\n以自由形状模式启动时 Activity 的默认高度。\n`android:gravity`\n以自由形状模式启动时 Activity 的初始位置。请参阅 Gravity 参考资料，了解合适的值设置。\n`android:minimalHeight、android:minimalWidth`\n分屏和自由形状模式中 Activity 的最小高度和最小宽度。 如果用户在分屏模式中移动分界线，使 Activity 尺寸低于指定的最小值，系统会将 Activity 裁剪为用户请求的尺寸。\n例如，以下节点显示了如何指定 Activity 在自由形状模式中显示时 Activity 的默认大小、位置和最小尺寸：\n\n``` xml\n<activity android:name=\".MyActivity\">\n    <layout android:defaultHeight=\"500dp\"\n          android:defaultWidth=\"600dp\"\n          android:gravity=\"top|end\"\n          android:minimalHeight=\"450dp\"\n          android:minimalWidth=\"300dp\" />\n</activity>\n```\n\n#### 在多窗口模式中运行应用\n** 多窗口模式中被禁用的功能 **\n在设备处于多窗口模式中时，某些功能会被禁用或忽略，因为这些功能对与其他 Activity 或应用共享设备屏幕的 Activity 而言没有意义。 此类功能包括：\n1. 某些系统 UI 自定义选项将被禁用；例如，在非全屏模式中，应用无法隐藏状态栏。\n2. 系统将忽略对 android:screenOrientation 属性所作的更改。\n\n** 多窗口变更通知和查询 **\n\n1. Activity.isInMultiWindowMode()\n调用该方法以确认 Activity 是否处于多窗口模式。\n2. Activity.isInPictureInPictureMode()\n调用该方法以确认 Activity 是否处于画中画模式。\n> 画中画模式是多窗口模式的特例。 如果 myActivity.isInPictureInPictureMode() 返回 true，\n> myActivity.isInMultiWindowMode() 也返回 true。\n3. Activity.onMultiWindowModeChanged()\nActivity 进入或退出多窗口模式时系统将调用此方法。 在 Activity 进入多窗口模式时，系统向该方法传递 true 值，在退出多窗口模式时，则传递 false 值。\n4. Activity.onPictureInPictureModeChanged()\nActivity 进入或退出画中画模式时系统将调用此方法。 在 Activity 进入画中画模式时，系统向该方法传递 true 值，在退出画中画模式时，则传递 false 值。\n\n每个方法还有 Fragment 版本，例如 Fragment.isInMultiWindowMode()。\n\n#### 进入画中画模式\n如需在画中画模式中启动 Activity，请调用新方法 Activity.enterPictureInPictureMode()。 如果设备不支持画中画模式，则此方法无效。 如需了解详细信息，请参阅[画中画](https://developer.android.com/guide/topics/ui/picture-in-picture)文档。\nhttps://developer.android.com/guide/topics/ui/picture-in-picture\n#### 在多窗口模式中启动新 Activity\n如果只是简单的开启Activity，和在非多窗口模式下是一致的。如果想要在当前Activity的旁边启动Activity，可以添加`FLAG_ACTIVITY_LAUNCH_ADJACENT`标志位(官方文档说是`Intent.FLAG_ACTIVITY_LAUNCH_TO_ADJACENT`,但在实际操作中这个标志位不存在)，传递此标志将请求以下行为：\n1. 如果设备处于分屏模式，系统会尝试在启动系统的 Activity 旁创建新 Activity，这样两个 Activity 将共享屏幕。 系统并不一定能实现此操作，但如果可以，系统将使两个 Activity 处于相邻的位置。\n2. 如果设备不处于分屏模式，则该标志无效。\n如果设备处于自由形状模式，则在启动新 Activity 时，用户可通过调用 ActivityOptions.setLaunchBounds() 指定新 Activity 的尺寸和屏幕位置。 如果设备不处于多窗口模式，则该方法无效。\nPS:如果在任务栈中启动 Activity，该 Activity 将替换屏幕上的 Activity，并继承其所有的多窗口属性。 如果要在多窗口模式中以单独的窗口启动新 Activity，则必须在新的任务栈中启动此 Activity。\n\n#### 支持拖放\n用户可以在两个 Activity 共享屏幕的同时在这两个 Activity 之间拖放数据 （在此之前，用户只能在一个 Activity 内部拖放数据）。 \n1. android.view.DropPermissions \n令牌对象，负责指定对接收拖放数据的应用授予的权限。\n2. View.startDragAndDrop()\nView.startDrag() 的新别名。要启用跨 Activity 拖放，请传递新标志 View.DRAG_FLAG_GLOBAL。 如需对接收拖放数据的 Activity 授予 URI 权限，可根据情况传递新标志 View.DRAG_FLAG_GLOBAL_URI_READ 或 View.DRAG_FLAG_GLOBAL_URI_WRITE。\n3. View.cancelDragAndDrop()\n取消当前正在进行的拖动操作。只能由发起拖动操作的应用调用。\n4. View.updateDragShadow()\n替换当前正在进行的拖动操作的拖动阴影。只能由发起拖动操作的应用调用。\n5. Activity.requestDropPermissions()\n请求使用 DragEvent 中包含的 ClipData 传递的内容 URI 的权限。\n\n#### 代码\n** 在当前Activity旁边开启新界面 **\n如下图所示，上面的界面是MainActivity，下面的Activity是在MainActivity中点击`获取实时天气`开启的界面\n![MultiWindow](/image/Android/MultiWindow/2.png)\n在MainActivity中\n\n``` java\n    findViewById(R.id.get_weather).setOnClickListener(new View.OnClickListener() {\n        @Override\n        public void onClick(View v) {\n            Intent intent = new Intent(MainActivity.this,Main2Activity.class);\n            intent.addFlags(Intent.FLAG_ACTIVITY_LAUNCH_ADJACENT | Intent.FLAG_ACTIVITY_NEW_TASK);\n            startActivity(intent);\n        }\n    });\n```\n为什么需要 `FLAG_ACTIVITY_NEW_TASK`:\n官方解释\n>在同一个Activity返回栈中，打开一个新的Activity时，这个Activity将会继承上一个Activity所有和分屏模式有关的属性。如果你想要在一个独立的窗口以分屏模式打开一个新的Activity，那么必须新建一个Activity返回栈。\n\n** 拖拽 **\n首先在多窗口模式下打开新界面，如上面的代码所示。\n在MainActivity中发起拖拽\n``` java\nfinal Button dragedButton = findViewById(R.id.drag_to_another);//拖拽按钮\n        dragedButton.setTag(\"this is a test\");\n\n        dragedButton.setOnTouchListener(new View.OnTouchListener() {\n            @Override\n            public boolean onTouch(View v, MotionEvent event) {\n\n                if(event.getAction() == MotionEvent.ACTION_DOWN){\n\n                    ClipData.Item item = new ClipData.Item((CharSequence) dragedButton.getTag());\n                    String[] mimeTypes = {ClipDescription.MIMETYPE_TEXT_PLAIN};\n                    ClipData dragData = new ClipData(v.getTag().toString(), mimeTypes, item);\n                    View.DragShadowBuilder shadow = new View.DragShadowBuilder(dragedButton);\n                    /** startDragAndDrop是Android N SDK中的新方法，替代了以前的startDrag，flag需要设置为DRAG_FLAG_GLOBAL */\n                    v.startDragAndDrop(dragData, shadow, null, View.DRAG_FLAG_GLOBAL);\n                    return true;\n                }\n                else {\n                    return false;\n                }\n            }\n        });\n```\n在第二个界面中接收拖拽结果\n``` java\nfinal TextView textView = findViewById(R.id.show_drag_view_tag);\n        textView.setText(\"拖拽到这里\");\n        textView.setOnDragListener(new View.OnDragListener() {\n            @Override\n            public boolean onDrag(View view, DragEvent dragEvent) {\n                switch (dragEvent.getAction()) {\n                    case DragEvent.ACTION_DRAG_STARTED:\n                        Log.d(TAG, \"Action is DragEvent.ACTION_DRAG_STARTED\");\n                        break;\n\n                    case DragEvent.ACTION_DRAG_ENTERED:\n                        Log.d(TAG, \"Action is DragEvent.ACTION_DRAG_ENTERED\");\n                        break;\n\n                    case DragEvent.ACTION_DRAG_EXITED:\n                        Log.d(TAG, \"Action is DragEvent.ACTION_DRAG_EXITED\");\n                        break;\n\n                    case DragEvent.ACTION_DRAG_LOCATION:\n                        break;\n\n                    case DragEvent.ACTION_DRAG_ENDED:\n                        Log.d(TAG, \"Action is DragEvent.ACTION_DRAG_ENDED\");\n                        break;\n\n                    case DragEvent.ACTION_DROP:\n                        Log.d(TAG, \"ACTION_DROP event\");\n                        /** 3.在这里显示接收到的结果 */\n                        textView.setText(dragEvent.getClipData().getItemAt(0).getText());\n                        break;\n\n                    default:\n                        break;\n                }\n\n                return true;\n            }\n        });\n    }\n```\n将MainActivity中的拖拽按钮拖放的第二个界面中`拖拽到这里`view上之后\n![MultiWindow](/image/Android/MultiWindow/3.png)\n关于startDragAndDrop，官方参考文档在这里\n[startDragAndDrop](https://developer.android.com/reference/android/view/View?hl=zh-cn#startDrag)\nhttps://developer.android.com/reference/android/view/View?hl=zh-cn#startDrag\n\n----\n以上","source":"_posts/Android7-0分屏实现.md","raw":"---\ntitle: Android7.0 MultiWindow\ndate: 2018-06-11 15:17:54\ntags: [Android]\nkeywords: 分屏模式,多窗口,MultiWindow\n---\nAndroid7.0推出了多窗口(分屏)模式，允许一个屏幕下显示两个应用，可以一边追剧一边看电子书，不过在小一点的手机屏幕上看起来可能有点鸡肋。但是在TV端(这个屏幕就比较大了，一般都是40寸起步)中，画中画模式可以让我们同时进行多个任务了。\n<!-- more -->\n#### 开启分屏\n只要你编译使用sdk版本大于等于7.0就可以支持分屏了：`compileSdkVersion 25`，如果想要禁用分屏，只需要在`AndroidManifest.xml`添加属性：android:resizeableActivity=\"false\"，这个属性使用于application和Activity标签。\n7.0中默认是true。\n除了分屏模式之外，还有自由模式(Freeform,常见于桌面设备，类似于windows的应用窗口，可以拖拽边缘改变大小)。\n\n#### 生命周期\n开启多窗口模式不会更改Activity的生命周期，\n在多窗口模式中，在指定时间只有最近与用户交互过的 Activity 为活动状态。 该 Activity 将被视为顶级 Activity。 所有其他 Activity 虽然可见，但均处于暂停状态。 但是，这些已暂停但可见的 Activity 在系统中享有比不可见 Activity 更高的优先级。 如果用户与其中一个暂停的 Activity 交互，该 Activity 将恢复，而之前的顶级 Activity 将暂停。\n\n例如：\n![MultiWindow](/image/Android/MultiWindow/1.png)\n在上图中，我先打开了上面的Activity，然后又打开了下面Gmail的Activity，这时下面的Activity处于可交互(顶级Activity)状态，上面的Activity虽然课件，但是处于暂停状态，这时按下back键是对下面Activity进行操作。当点击上面的Activity时，上面的Activity处于可交互状态，下面的Activity处于暂停状态。\nPS：在多窗口模式中，用户仍可以看到处于暂停状态的应用。 应用在暂停状态下可能仍需要继续其操作。 例如，处于暂停模式但可见的视频播放应用应继续显示视频。 因此，我们建议播放视频的 Activity 不要暂停其 onPause() 处理程序中的视频。 应暂停 onStop() 中的视频，并恢复 onStart() 中的视频播放。\n\n用户使用多窗口模式显示应用时，系统将通知 Activity 发生配置变更。 该变更与系统通知应用设备从纵向模式切换到横向模式时的 Activity 生命周期影响基本相同，但设备不仅仅是交换尺寸，而是会变更尺寸。您的 Activity 可以自行处理配置变更，或允许系统销毁 Activity，并以新的尺寸重新创建该 Activity。\n给Activity加上如下配置可以保证切换成多屏模式或者画中画模式时Activity不会销毁重建。\nandroid:configChanges=\"screenSize|smallestScreenSize|screenLayout|orientation\"\n\n#### 针对多窗口模式配置应用\n\n如果应用支持 Android N，您可以对应用的 Activity 是否支持多窗口显示以及显示方式进行配置。 您可以在清单文件中设置属性，以控制大小和布局。 根 Activity 的属性设置适用于其任务栈中的所有 Activity。 例如，如果根 Activity 中 `android:resizeableActivity` 设定为 true，则任务栈中的所有 Activity 都将可以调整大小。\n如果使用低于 Android N 版本的 SDK 构建多向应用，则用户在多窗口模式中使用应用时，系统将强制调整应用大小。 系统将显示对话框，提醒用户应用可能会发生异常。 系统不会调整定向应用的大小；如果用户尝试在多窗口模式下打开定向应用，应用将全屏显示。\n\n** android:resizeableActivity **\n在清单的 `<activity>` 或 `<application>` 节点中设置该属性，启用或禁用多窗口显示：\n\n``` xml\n    android:resizeableActivity=[\"true\" | \"false\"] \n```\n如果该属性设置为 true，Activity 将能以分屏和自由形状模式启动。 如果此属性设置为 false，Activity 将不支持多窗口模式。 如果该值为 false，且用户尝试在多窗口模式下启动 Activity，该 Activity 将全屏显示。\n如果应用面向 Android N，但未对该属性指定值，则该属性的值默认设为 true。\n\n** android:supportsPictureInPicture **\n在清单文件的 `<activity>` 节点中设置该属性，指明 Activity 是否支持画中画显示。 如果 `android:resizeableActivity` 为 false，将忽略该属性。\n``` xml\nandroid:supportsPictureInPicture=[\"true\" | \"false\"]\n```\n\n#### 布局属性\n对于 Android N，`<layout>` 清单元素支持以下几种属性，这些属性影响 Activity 在多窗口模式中的行为：\n\n`android:defaultWidth`\n以自由形状模式启动时 Activity 的默认宽度。\n`android:defaultHeight`\n以自由形状模式启动时 Activity 的默认高度。\n`android:gravity`\n以自由形状模式启动时 Activity 的初始位置。请参阅 Gravity 参考资料，了解合适的值设置。\n`android:minimalHeight、android:minimalWidth`\n分屏和自由形状模式中 Activity 的最小高度和最小宽度。 如果用户在分屏模式中移动分界线，使 Activity 尺寸低于指定的最小值，系统会将 Activity 裁剪为用户请求的尺寸。\n例如，以下节点显示了如何指定 Activity 在自由形状模式中显示时 Activity 的默认大小、位置和最小尺寸：\n\n``` xml\n<activity android:name=\".MyActivity\">\n    <layout android:defaultHeight=\"500dp\"\n          android:defaultWidth=\"600dp\"\n          android:gravity=\"top|end\"\n          android:minimalHeight=\"450dp\"\n          android:minimalWidth=\"300dp\" />\n</activity>\n```\n\n#### 在多窗口模式中运行应用\n** 多窗口模式中被禁用的功能 **\n在设备处于多窗口模式中时，某些功能会被禁用或忽略，因为这些功能对与其他 Activity 或应用共享设备屏幕的 Activity 而言没有意义。 此类功能包括：\n1. 某些系统 UI 自定义选项将被禁用；例如，在非全屏模式中，应用无法隐藏状态栏。\n2. 系统将忽略对 android:screenOrientation 属性所作的更改。\n\n** 多窗口变更通知和查询 **\n\n1. Activity.isInMultiWindowMode()\n调用该方法以确认 Activity 是否处于多窗口模式。\n2. Activity.isInPictureInPictureMode()\n调用该方法以确认 Activity 是否处于画中画模式。\n> 画中画模式是多窗口模式的特例。 如果 myActivity.isInPictureInPictureMode() 返回 true，\n> myActivity.isInMultiWindowMode() 也返回 true。\n3. Activity.onMultiWindowModeChanged()\nActivity 进入或退出多窗口模式时系统将调用此方法。 在 Activity 进入多窗口模式时，系统向该方法传递 true 值，在退出多窗口模式时，则传递 false 值。\n4. Activity.onPictureInPictureModeChanged()\nActivity 进入或退出画中画模式时系统将调用此方法。 在 Activity 进入画中画模式时，系统向该方法传递 true 值，在退出画中画模式时，则传递 false 值。\n\n每个方法还有 Fragment 版本，例如 Fragment.isInMultiWindowMode()。\n\n#### 进入画中画模式\n如需在画中画模式中启动 Activity，请调用新方法 Activity.enterPictureInPictureMode()。 如果设备不支持画中画模式，则此方法无效。 如需了解详细信息，请参阅[画中画](https://developer.android.com/guide/topics/ui/picture-in-picture)文档。\nhttps://developer.android.com/guide/topics/ui/picture-in-picture\n#### 在多窗口模式中启动新 Activity\n如果只是简单的开启Activity，和在非多窗口模式下是一致的。如果想要在当前Activity的旁边启动Activity，可以添加`FLAG_ACTIVITY_LAUNCH_ADJACENT`标志位(官方文档说是`Intent.FLAG_ACTIVITY_LAUNCH_TO_ADJACENT`,但在实际操作中这个标志位不存在)，传递此标志将请求以下行为：\n1. 如果设备处于分屏模式，系统会尝试在启动系统的 Activity 旁创建新 Activity，这样两个 Activity 将共享屏幕。 系统并不一定能实现此操作，但如果可以，系统将使两个 Activity 处于相邻的位置。\n2. 如果设备不处于分屏模式，则该标志无效。\n如果设备处于自由形状模式，则在启动新 Activity 时，用户可通过调用 ActivityOptions.setLaunchBounds() 指定新 Activity 的尺寸和屏幕位置。 如果设备不处于多窗口模式，则该方法无效。\nPS:如果在任务栈中启动 Activity，该 Activity 将替换屏幕上的 Activity，并继承其所有的多窗口属性。 如果要在多窗口模式中以单独的窗口启动新 Activity，则必须在新的任务栈中启动此 Activity。\n\n#### 支持拖放\n用户可以在两个 Activity 共享屏幕的同时在这两个 Activity 之间拖放数据 （在此之前，用户只能在一个 Activity 内部拖放数据）。 \n1. android.view.DropPermissions \n令牌对象，负责指定对接收拖放数据的应用授予的权限。\n2. View.startDragAndDrop()\nView.startDrag() 的新别名。要启用跨 Activity 拖放，请传递新标志 View.DRAG_FLAG_GLOBAL。 如需对接收拖放数据的 Activity 授予 URI 权限，可根据情况传递新标志 View.DRAG_FLAG_GLOBAL_URI_READ 或 View.DRAG_FLAG_GLOBAL_URI_WRITE。\n3. View.cancelDragAndDrop()\n取消当前正在进行的拖动操作。只能由发起拖动操作的应用调用。\n4. View.updateDragShadow()\n替换当前正在进行的拖动操作的拖动阴影。只能由发起拖动操作的应用调用。\n5. Activity.requestDropPermissions()\n请求使用 DragEvent 中包含的 ClipData 传递的内容 URI 的权限。\n\n#### 代码\n** 在当前Activity旁边开启新界面 **\n如下图所示，上面的界面是MainActivity，下面的Activity是在MainActivity中点击`获取实时天气`开启的界面\n![MultiWindow](/image/Android/MultiWindow/2.png)\n在MainActivity中\n\n``` java\n    findViewById(R.id.get_weather).setOnClickListener(new View.OnClickListener() {\n        @Override\n        public void onClick(View v) {\n            Intent intent = new Intent(MainActivity.this,Main2Activity.class);\n            intent.addFlags(Intent.FLAG_ACTIVITY_LAUNCH_ADJACENT | Intent.FLAG_ACTIVITY_NEW_TASK);\n            startActivity(intent);\n        }\n    });\n```\n为什么需要 `FLAG_ACTIVITY_NEW_TASK`:\n官方解释\n>在同一个Activity返回栈中，打开一个新的Activity时，这个Activity将会继承上一个Activity所有和分屏模式有关的属性。如果你想要在一个独立的窗口以分屏模式打开一个新的Activity，那么必须新建一个Activity返回栈。\n\n** 拖拽 **\n首先在多窗口模式下打开新界面，如上面的代码所示。\n在MainActivity中发起拖拽\n``` java\nfinal Button dragedButton = findViewById(R.id.drag_to_another);//拖拽按钮\n        dragedButton.setTag(\"this is a test\");\n\n        dragedButton.setOnTouchListener(new View.OnTouchListener() {\n            @Override\n            public boolean onTouch(View v, MotionEvent event) {\n\n                if(event.getAction() == MotionEvent.ACTION_DOWN){\n\n                    ClipData.Item item = new ClipData.Item((CharSequence) dragedButton.getTag());\n                    String[] mimeTypes = {ClipDescription.MIMETYPE_TEXT_PLAIN};\n                    ClipData dragData = new ClipData(v.getTag().toString(), mimeTypes, item);\n                    View.DragShadowBuilder shadow = new View.DragShadowBuilder(dragedButton);\n                    /** startDragAndDrop是Android N SDK中的新方法，替代了以前的startDrag，flag需要设置为DRAG_FLAG_GLOBAL */\n                    v.startDragAndDrop(dragData, shadow, null, View.DRAG_FLAG_GLOBAL);\n                    return true;\n                }\n                else {\n                    return false;\n                }\n            }\n        });\n```\n在第二个界面中接收拖拽结果\n``` java\nfinal TextView textView = findViewById(R.id.show_drag_view_tag);\n        textView.setText(\"拖拽到这里\");\n        textView.setOnDragListener(new View.OnDragListener() {\n            @Override\n            public boolean onDrag(View view, DragEvent dragEvent) {\n                switch (dragEvent.getAction()) {\n                    case DragEvent.ACTION_DRAG_STARTED:\n                        Log.d(TAG, \"Action is DragEvent.ACTION_DRAG_STARTED\");\n                        break;\n\n                    case DragEvent.ACTION_DRAG_ENTERED:\n                        Log.d(TAG, \"Action is DragEvent.ACTION_DRAG_ENTERED\");\n                        break;\n\n                    case DragEvent.ACTION_DRAG_EXITED:\n                        Log.d(TAG, \"Action is DragEvent.ACTION_DRAG_EXITED\");\n                        break;\n\n                    case DragEvent.ACTION_DRAG_LOCATION:\n                        break;\n\n                    case DragEvent.ACTION_DRAG_ENDED:\n                        Log.d(TAG, \"Action is DragEvent.ACTION_DRAG_ENDED\");\n                        break;\n\n                    case DragEvent.ACTION_DROP:\n                        Log.d(TAG, \"ACTION_DROP event\");\n                        /** 3.在这里显示接收到的结果 */\n                        textView.setText(dragEvent.getClipData().getItemAt(0).getText());\n                        break;\n\n                    default:\n                        break;\n                }\n\n                return true;\n            }\n        });\n    }\n```\n将MainActivity中的拖拽按钮拖放的第二个界面中`拖拽到这里`view上之后\n![MultiWindow](/image/Android/MultiWindow/3.png)\n关于startDragAndDrop，官方参考文档在这里\n[startDragAndDrop](https://developer.android.com/reference/android/view/View?hl=zh-cn#startDrag)\nhttps://developer.android.com/reference/android/view/View?hl=zh-cn#startDrag\n\n----\n以上","slug":"Android7-0分屏实现","published":1,"updated":"2018-08-04T04:45:13.363Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjl3vbtpw0008isdgndqdzq2p","content":"<p>Android7.0推出了多窗口(分屏)模式，允许一个屏幕下显示两个应用，可以一边追剧一边看电子书，不过在小一点的手机屏幕上看起来可能有点鸡肋。但是在TV端(这个屏幕就比较大了，一般都是40寸起步)中，画中画模式可以让我们同时进行多个任务了。<br><a id=\"more\"></a></p>\n<h4 id=\"开启分屏\"><a href=\"#开启分屏\" class=\"headerlink\" title=\"开启分屏\"></a>开启分屏</h4><p>只要你编译使用sdk版本大于等于7.0就可以支持分屏了：<code>compileSdkVersion 25</code>，如果想要禁用分屏，只需要在<code>AndroidManifest.xml</code>添加属性：android:resizeableActivity=”false”，这个属性使用于application和Activity标签。<br>7.0中默认是true。<br>除了分屏模式之外，还有自由模式(Freeform,常见于桌面设备，类似于windows的应用窗口，可以拖拽边缘改变大小)。</p>\n<h4 id=\"生命周期\"><a href=\"#生命周期\" class=\"headerlink\" title=\"生命周期\"></a>生命周期</h4><p>开启多窗口模式不会更改Activity的生命周期，<br>在多窗口模式中，在指定时间只有最近与用户交互过的 Activity 为活动状态。 该 Activity 将被视为顶级 Activity。 所有其他 Activity 虽然可见，但均处于暂停状态。 但是，这些已暂停但可见的 Activity 在系统中享有比不可见 Activity 更高的优先级。 如果用户与其中一个暂停的 Activity 交互，该 Activity 将恢复，而之前的顶级 Activity 将暂停。</p>\n<p>例如：<br><img src=\"/image/Android/MultiWindow/1.png\" alt=\"MultiWindow\"><br>在上图中，我先打开了上面的Activity，然后又打开了下面Gmail的Activity，这时下面的Activity处于可交互(顶级Activity)状态，上面的Activity虽然课件，但是处于暂停状态，这时按下back键是对下面Activity进行操作。当点击上面的Activity时，上面的Activity处于可交互状态，下面的Activity处于暂停状态。<br>PS：在多窗口模式中，用户仍可以看到处于暂停状态的应用。 应用在暂停状态下可能仍需要继续其操作。 例如，处于暂停模式但可见的视频播放应用应继续显示视频。 因此，我们建议播放视频的 Activity 不要暂停其 onPause() 处理程序中的视频。 应暂停 onStop() 中的视频，并恢复 onStart() 中的视频播放。</p>\n<p>用户使用多窗口模式显示应用时，系统将通知 Activity 发生配置变更。 该变更与系统通知应用设备从纵向模式切换到横向模式时的 Activity 生命周期影响基本相同，但设备不仅仅是交换尺寸，而是会变更尺寸。您的 Activity 可以自行处理配置变更，或允许系统销毁 Activity，并以新的尺寸重新创建该 Activity。<br>给Activity加上如下配置可以保证切换成多屏模式或者画中画模式时Activity不会销毁重建。<br>android:configChanges=”screenSize|smallestScreenSize|screenLayout|orientation”</p>\n<h4 id=\"针对多窗口模式配置应用\"><a href=\"#针对多窗口模式配置应用\" class=\"headerlink\" title=\"针对多窗口模式配置应用\"></a>针对多窗口模式配置应用</h4><p>如果应用支持 Android N，您可以对应用的 Activity 是否支持多窗口显示以及显示方式进行配置。 您可以在清单文件中设置属性，以控制大小和布局。 根 Activity 的属性设置适用于其任务栈中的所有 Activity。 例如，如果根 Activity 中 <code>android:resizeableActivity</code> 设定为 true，则任务栈中的所有 Activity 都将可以调整大小。<br>如果使用低于 Android N 版本的 SDK 构建多向应用，则用户在多窗口模式中使用应用时，系统将强制调整应用大小。 系统将显示对话框，提醒用户应用可能会发生异常。 系统不会调整定向应用的大小；如果用户尝试在多窗口模式下打开定向应用，应用将全屏显示。</p>\n<p><strong> android:resizeableActivity </strong><br>在清单的 <code>&lt;activity&gt;</code> 或 <code>&lt;application&gt;</code> 节点中设置该属性，启用或禁用多窗口显示：</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">android:resizeableActivity=[\"true\" | \"false\"]</div></pre></td></tr></table></figure>\n<p>如果该属性设置为 true，Activity 将能以分屏和自由形状模式启动。 如果此属性设置为 false，Activity 将不支持多窗口模式。 如果该值为 false，且用户尝试在多窗口模式下启动 Activity，该 Activity 将全屏显示。<br>如果应用面向 Android N，但未对该属性指定值，则该属性的值默认设为 true。</p>\n<p><strong> android:supportsPictureInPicture </strong><br>在清单文件的 <code>&lt;activity&gt;</code> 节点中设置该属性，指明 Activity 是否支持画中画显示。 如果 <code>android:resizeableActivity</code> 为 false，将忽略该属性。<br><figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">android:supportsPictureInPicture=[\"true\" | \"false\"]</div></pre></td></tr></table></figure></p>\n<h4 id=\"布局属性\"><a href=\"#布局属性\" class=\"headerlink\" title=\"布局属性\"></a>布局属性</h4><p>对于 Android N，<code>&lt;layout&gt;</code> 清单元素支持以下几种属性，这些属性影响 Activity 在多窗口模式中的行为：</p>\n<p><code>android:defaultWidth</code><br>以自由形状模式启动时 Activity 的默认宽度。<br><code>android:defaultHeight</code><br>以自由形状模式启动时 Activity 的默认高度。<br><code>android:gravity</code><br>以自由形状模式启动时 Activity 的初始位置。请参阅 Gravity 参考资料，了解合适的值设置。<br><code>android:minimalHeight、android:minimalWidth</code><br>分屏和自由形状模式中 Activity 的最小高度和最小宽度。 如果用户在分屏模式中移动分界线，使 Activity 尺寸低于指定的最小值，系统会将 Activity 裁剪为用户请求的尺寸。<br>例如，以下节点显示了如何指定 Activity 在自由形状模式中显示时 Activity 的默认大小、位置和最小尺寸：</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">activity</span> <span class=\"attr\">android:name</span>=<span class=\"string\">\".MyActivity\"</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">layout</span> <span class=\"attr\">android:defaultHeight</span>=<span class=\"string\">\"500dp\"</span></span></div><div class=\"line\">          <span class=\"attr\">android:defaultWidth</span>=<span class=\"string\">\"600dp\"</span></div><div class=\"line\">          <span class=\"attr\">android:gravity</span>=<span class=\"string\">\"top|end\"</span></div><div class=\"line\">          <span class=\"attr\">android:minimalHeight</span>=<span class=\"string\">\"450dp\"</span></div><div class=\"line\">          <span class=\"attr\">android:minimalWidth</span>=<span class=\"string\">\"300dp\"</span> /&gt;</div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">activity</span>&gt;</span></div></pre></td></tr></table></figure>\n<h4 id=\"在多窗口模式中运行应用\"><a href=\"#在多窗口模式中运行应用\" class=\"headerlink\" title=\"在多窗口模式中运行应用\"></a>在多窗口模式中运行应用</h4><p><strong> 多窗口模式中被禁用的功能 </strong><br>在设备处于多窗口模式中时，某些功能会被禁用或忽略，因为这些功能对与其他 Activity 或应用共享设备屏幕的 Activity 而言没有意义。 此类功能包括：</p>\n<ol>\n<li>某些系统 UI 自定义选项将被禁用；例如，在非全屏模式中，应用无法隐藏状态栏。</li>\n<li>系统将忽略对 android:screenOrientation 属性所作的更改。</li>\n</ol>\n<p><strong> 多窗口变更通知和查询 </strong></p>\n<ol>\n<li>Activity.isInMultiWindowMode()<br>调用该方法以确认 Activity 是否处于多窗口模式。</li>\n<li>Activity.isInPictureInPictureMode()<br>调用该方法以确认 Activity 是否处于画中画模式。<blockquote>\n<p>画中画模式是多窗口模式的特例。 如果 myActivity.isInPictureInPictureMode() 返回 true，<br>myActivity.isInMultiWindowMode() 也返回 true。</p>\n</blockquote>\n</li>\n<li>Activity.onMultiWindowModeChanged()<br>Activity 进入或退出多窗口模式时系统将调用此方法。 在 Activity 进入多窗口模式时，系统向该方法传递 true 值，在退出多窗口模式时，则传递 false 值。</li>\n<li>Activity.onPictureInPictureModeChanged()<br>Activity 进入或退出画中画模式时系统将调用此方法。 在 Activity 进入画中画模式时，系统向该方法传递 true 值，在退出画中画模式时，则传递 false 值。</li>\n</ol>\n<p>每个方法还有 Fragment 版本，例如 Fragment.isInMultiWindowMode()。</p>\n<h4 id=\"进入画中画模式\"><a href=\"#进入画中画模式\" class=\"headerlink\" title=\"进入画中画模式\"></a>进入画中画模式</h4><p>如需在画中画模式中启动 Activity，请调用新方法 Activity.enterPictureInPictureMode()。 如果设备不支持画中画模式，则此方法无效。 如需了解详细信息，请参阅<a href=\"https://developer.android.com/guide/topics/ui/picture-in-picture\" target=\"_blank\" rel=\"external\">画中画</a>文档。<br><a href=\"https://developer.android.com/guide/topics/ui/picture-in-picture\" target=\"_blank\" rel=\"external\">https://developer.android.com/guide/topics/ui/picture-in-picture</a></p>\n<h4 id=\"在多窗口模式中启动新-Activity\"><a href=\"#在多窗口模式中启动新-Activity\" class=\"headerlink\" title=\"在多窗口模式中启动新 Activity\"></a>在多窗口模式中启动新 Activity</h4><p>如果只是简单的开启Activity，和在非多窗口模式下是一致的。如果想要在当前Activity的旁边启动Activity，可以添加<code>FLAG_ACTIVITY_LAUNCH_ADJACENT</code>标志位(官方文档说是<code>Intent.FLAG_ACTIVITY_LAUNCH_TO_ADJACENT</code>,但在实际操作中这个标志位不存在)，传递此标志将请求以下行为：</p>\n<ol>\n<li>如果设备处于分屏模式，系统会尝试在启动系统的 Activity 旁创建新 Activity，这样两个 Activity 将共享屏幕。 系统并不一定能实现此操作，但如果可以，系统将使两个 Activity 处于相邻的位置。</li>\n<li>如果设备不处于分屏模式，则该标志无效。<br>如果设备处于自由形状模式，则在启动新 Activity 时，用户可通过调用 ActivityOptions.setLaunchBounds() 指定新 Activity 的尺寸和屏幕位置。 如果设备不处于多窗口模式，则该方法无效。<br>PS:如果在任务栈中启动 Activity，该 Activity 将替换屏幕上的 Activity，并继承其所有的多窗口属性。 如果要在多窗口模式中以单独的窗口启动新 Activity，则必须在新的任务栈中启动此 Activity。</li>\n</ol>\n<h4 id=\"支持拖放\"><a href=\"#支持拖放\" class=\"headerlink\" title=\"支持拖放\"></a>支持拖放</h4><p>用户可以在两个 Activity 共享屏幕的同时在这两个 Activity 之间拖放数据 （在此之前，用户只能在一个 Activity 内部拖放数据）。 </p>\n<ol>\n<li>android.view.DropPermissions<br>令牌对象，负责指定对接收拖放数据的应用授予的权限。</li>\n<li>View.startDragAndDrop()<br>View.startDrag() 的新别名。要启用跨 Activity 拖放，请传递新标志 View.DRAG_FLAG_GLOBAL。 如需对接收拖放数据的 Activity 授予 URI 权限，可根据情况传递新标志 View.DRAG_FLAG_GLOBAL_URI_READ 或 View.DRAG_FLAG_GLOBAL_URI_WRITE。</li>\n<li>View.cancelDragAndDrop()<br>取消当前正在进行的拖动操作。只能由发起拖动操作的应用调用。</li>\n<li>View.updateDragShadow()<br>替换当前正在进行的拖动操作的拖动阴影。只能由发起拖动操作的应用调用。</li>\n<li>Activity.requestDropPermissions()<br>请求使用 DragEvent 中包含的 ClipData 传递的内容 URI 的权限。</li>\n</ol>\n<h4 id=\"代码\"><a href=\"#代码\" class=\"headerlink\" title=\"代码\"></a>代码</h4><p><strong> 在当前Activity旁边开启新界面 </strong><br>如下图所示，上面的界面是MainActivity，下面的Activity是在MainActivity中点击<code>获取实时天气</code>开启的界面<br><img src=\"/image/Android/MultiWindow/2.png\" alt=\"MultiWindow\"><br>在MainActivity中</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\">findViewById(R.id.get_weather).setOnClickListener(<span class=\"keyword\">new</span> View.OnClickListener() &#123;</div><div class=\"line\">    <span class=\"meta\">@Override</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onClick</span><span class=\"params\">(View v)</span> </span>&#123;</div><div class=\"line\">        Intent intent = <span class=\"keyword\">new</span> Intent(MainActivity.<span class=\"keyword\">this</span>,Main2Activity.class);</div><div class=\"line\">        intent.addFlags(Intent.FLAG_ACTIVITY_LAUNCH_ADJACENT | Intent.FLAG_ACTIVITY_NEW_TASK);</div><div class=\"line\">        startActivity(intent);</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure>\n<p>为什么需要 <code>FLAG_ACTIVITY_NEW_TASK</code>:<br>官方解释</p>\n<blockquote>\n<p>在同一个Activity返回栈中，打开一个新的Activity时，这个Activity将会继承上一个Activity所有和分屏模式有关的属性。如果你想要在一个独立的窗口以分屏模式打开一个新的Activity，那么必须新建一个Activity返回栈。</p>\n</blockquote>\n<p><strong> 拖拽 </strong><br>首先在多窗口模式下打开新界面，如上面的代码所示。<br>在MainActivity中发起拖拽<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">final</span> Button dragedButton = findViewById(R.id.drag_to_another);<span class=\"comment\">//拖拽按钮</span></div><div class=\"line\">        dragedButton.setTag(<span class=\"string\">\"this is a test\"</span>);</div><div class=\"line\"></div><div class=\"line\">        dragedButton.setOnTouchListener(<span class=\"keyword\">new</span> View.OnTouchListener() &#123;</div><div class=\"line\">            <span class=\"meta\">@Override</span></div><div class=\"line\">            <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">onTouch</span><span class=\"params\">(View v, MotionEvent event)</span> </span>&#123;</div><div class=\"line\"></div><div class=\"line\">                <span class=\"keyword\">if</span>(event.getAction() == MotionEvent.ACTION_DOWN)&#123;</div><div class=\"line\"></div><div class=\"line\">                    ClipData.Item item = <span class=\"keyword\">new</span> ClipData.Item((CharSequence) dragedButton.getTag());</div><div class=\"line\">                    String[] mimeTypes = &#123;ClipDescription.MIMETYPE_TEXT_PLAIN&#125;;</div><div class=\"line\">                    ClipData dragData = <span class=\"keyword\">new</span> ClipData(v.getTag().toString(), mimeTypes, item);</div><div class=\"line\">                    View.DragShadowBuilder shadow = <span class=\"keyword\">new</span> View.DragShadowBuilder(dragedButton);</div><div class=\"line\">                    <span class=\"comment\">/** startDragAndDrop是Android N SDK中的新方法，替代了以前的startDrag，flag需要设置为DRAG_FLAG_GLOBAL */</span></div><div class=\"line\">                    v.startDragAndDrop(dragData, shadow, <span class=\"keyword\">null</span>, View.DRAG_FLAG_GLOBAL);</div><div class=\"line\">                    <span class=\"keyword\">return</span> <span class=\"keyword\">true</span>;</div><div class=\"line\">                &#125;</div><div class=\"line\">                <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">                    <span class=\"keyword\">return</span> <span class=\"keyword\">false</span>;</div><div class=\"line\">                &#125;</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;);</div></pre></td></tr></table></figure></p>\n<p>在第二个界面中接收拖拽结果<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">final</span> TextView textView = findViewById(R.id.show_drag_view_tag);</div><div class=\"line\">        textView.setText(<span class=\"string\">\"拖拽到这里\"</span>);</div><div class=\"line\">        textView.setOnDragListener(<span class=\"keyword\">new</span> View.OnDragListener() &#123;</div><div class=\"line\">            <span class=\"meta\">@Override</span></div><div class=\"line\">            <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">onDrag</span><span class=\"params\">(View view, DragEvent dragEvent)</span> </span>&#123;</div><div class=\"line\">                <span class=\"keyword\">switch</span> (dragEvent.getAction()) &#123;</div><div class=\"line\">                    <span class=\"keyword\">case</span> DragEvent.ACTION_DRAG_STARTED:</div><div class=\"line\">                        Log.d(TAG, <span class=\"string\">\"Action is DragEvent.ACTION_DRAG_STARTED\"</span>);</div><div class=\"line\">                        <span class=\"keyword\">break</span>;</div><div class=\"line\"></div><div class=\"line\">                    <span class=\"keyword\">case</span> DragEvent.ACTION_DRAG_ENTERED:</div><div class=\"line\">                        Log.d(TAG, <span class=\"string\">\"Action is DragEvent.ACTION_DRAG_ENTERED\"</span>);</div><div class=\"line\">                        <span class=\"keyword\">break</span>;</div><div class=\"line\"></div><div class=\"line\">                    <span class=\"keyword\">case</span> DragEvent.ACTION_DRAG_EXITED:</div><div class=\"line\">                        Log.d(TAG, <span class=\"string\">\"Action is DragEvent.ACTION_DRAG_EXITED\"</span>);</div><div class=\"line\">                        <span class=\"keyword\">break</span>;</div><div class=\"line\"></div><div class=\"line\">                    <span class=\"keyword\">case</span> DragEvent.ACTION_DRAG_LOCATION:</div><div class=\"line\">                        <span class=\"keyword\">break</span>;</div><div class=\"line\"></div><div class=\"line\">                    <span class=\"keyword\">case</span> DragEvent.ACTION_DRAG_ENDED:</div><div class=\"line\">                        Log.d(TAG, <span class=\"string\">\"Action is DragEvent.ACTION_DRAG_ENDED\"</span>);</div><div class=\"line\">                        <span class=\"keyword\">break</span>;</div><div class=\"line\"></div><div class=\"line\">                    <span class=\"keyword\">case</span> DragEvent.ACTION_DROP:</div><div class=\"line\">                        Log.d(TAG, <span class=\"string\">\"ACTION_DROP event\"</span>);</div><div class=\"line\">                        <span class=\"comment\">/** 3.在这里显示接收到的结果 */</span></div><div class=\"line\">                        textView.setText(dragEvent.getClipData().getItemAt(<span class=\"number\">0</span>).getText());</div><div class=\"line\">                        <span class=\"keyword\">break</span>;</div><div class=\"line\"></div><div class=\"line\">                    <span class=\"keyword\">default</span>:</div><div class=\"line\">                        <span class=\"keyword\">break</span>;</div><div class=\"line\">                &#125;</div><div class=\"line\"></div><div class=\"line\">                <span class=\"keyword\">return</span> <span class=\"keyword\">true</span>;</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;);</div><div class=\"line\">    &#125;</div></pre></td></tr></table></figure></p>\n<p>将MainActivity中的拖拽按钮拖放的第二个界面中<code>拖拽到这里</code>view上之后<br><img src=\"/image/Android/MultiWindow/3.png\" alt=\"MultiWindow\"><br>关于startDragAndDrop，官方参考文档在这里<br><a href=\"https://developer.android.com/reference/android/view/View?hl=zh-cn#startDrag\" target=\"_blank\" rel=\"external\">startDragAndDrop</a><br><a href=\"https://developer.android.com/reference/android/view/View?hl=zh-cn#startDrag\" target=\"_blank\" rel=\"external\">https://developer.android.com/reference/android/view/View?hl=zh-cn#startDrag</a></p>\n<hr>\n<p>以上</p>\n","excerpt":"<p>Android7.0推出了多窗口(分屏)模式，允许一个屏幕下显示两个应用，可以一边追剧一边看电子书，不过在小一点的手机屏幕上看起来可能有点鸡肋。但是在TV端(这个屏幕就比较大了，一般都是40寸起步)中，画中画模式可以让我们同时进行多个任务了。<br>","more":"</p>\n<h4 id=\"开启分屏\"><a href=\"#开启分屏\" class=\"headerlink\" title=\"开启分屏\"></a>开启分屏</h4><p>只要你编译使用sdk版本大于等于7.0就可以支持分屏了：<code>compileSdkVersion 25</code>，如果想要禁用分屏，只需要在<code>AndroidManifest.xml</code>添加属性：android:resizeableActivity=”false”，这个属性使用于application和Activity标签。<br>7.0中默认是true。<br>除了分屏模式之外，还有自由模式(Freeform,常见于桌面设备，类似于windows的应用窗口，可以拖拽边缘改变大小)。</p>\n<h4 id=\"生命周期\"><a href=\"#生命周期\" class=\"headerlink\" title=\"生命周期\"></a>生命周期</h4><p>开启多窗口模式不会更改Activity的生命周期，<br>在多窗口模式中，在指定时间只有最近与用户交互过的 Activity 为活动状态。 该 Activity 将被视为顶级 Activity。 所有其他 Activity 虽然可见，但均处于暂停状态。 但是，这些已暂停但可见的 Activity 在系统中享有比不可见 Activity 更高的优先级。 如果用户与其中一个暂停的 Activity 交互，该 Activity 将恢复，而之前的顶级 Activity 将暂停。</p>\n<p>例如：<br><img src=\"/image/Android/MultiWindow/1.png\" alt=\"MultiWindow\"><br>在上图中，我先打开了上面的Activity，然后又打开了下面Gmail的Activity，这时下面的Activity处于可交互(顶级Activity)状态，上面的Activity虽然课件，但是处于暂停状态，这时按下back键是对下面Activity进行操作。当点击上面的Activity时，上面的Activity处于可交互状态，下面的Activity处于暂停状态。<br>PS：在多窗口模式中，用户仍可以看到处于暂停状态的应用。 应用在暂停状态下可能仍需要继续其操作。 例如，处于暂停模式但可见的视频播放应用应继续显示视频。 因此，我们建议播放视频的 Activity 不要暂停其 onPause() 处理程序中的视频。 应暂停 onStop() 中的视频，并恢复 onStart() 中的视频播放。</p>\n<p>用户使用多窗口模式显示应用时，系统将通知 Activity 发生配置变更。 该变更与系统通知应用设备从纵向模式切换到横向模式时的 Activity 生命周期影响基本相同，但设备不仅仅是交换尺寸，而是会变更尺寸。您的 Activity 可以自行处理配置变更，或允许系统销毁 Activity，并以新的尺寸重新创建该 Activity。<br>给Activity加上如下配置可以保证切换成多屏模式或者画中画模式时Activity不会销毁重建。<br>android:configChanges=”screenSize|smallestScreenSize|screenLayout|orientation”</p>\n<h4 id=\"针对多窗口模式配置应用\"><a href=\"#针对多窗口模式配置应用\" class=\"headerlink\" title=\"针对多窗口模式配置应用\"></a>针对多窗口模式配置应用</h4><p>如果应用支持 Android N，您可以对应用的 Activity 是否支持多窗口显示以及显示方式进行配置。 您可以在清单文件中设置属性，以控制大小和布局。 根 Activity 的属性设置适用于其任务栈中的所有 Activity。 例如，如果根 Activity 中 <code>android:resizeableActivity</code> 设定为 true，则任务栈中的所有 Activity 都将可以调整大小。<br>如果使用低于 Android N 版本的 SDK 构建多向应用，则用户在多窗口模式中使用应用时，系统将强制调整应用大小。 系统将显示对话框，提醒用户应用可能会发生异常。 系统不会调整定向应用的大小；如果用户尝试在多窗口模式下打开定向应用，应用将全屏显示。</p>\n<p><strong> android:resizeableActivity </strong><br>在清单的 <code>&lt;activity&gt;</code> 或 <code>&lt;application&gt;</code> 节点中设置该属性，启用或禁用多窗口显示：</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">android:resizeableActivity=[\"true\" | \"false\"]</div></pre></td></tr></table></figure>\n<p>如果该属性设置为 true，Activity 将能以分屏和自由形状模式启动。 如果此属性设置为 false，Activity 将不支持多窗口模式。 如果该值为 false，且用户尝试在多窗口模式下启动 Activity，该 Activity 将全屏显示。<br>如果应用面向 Android N，但未对该属性指定值，则该属性的值默认设为 true。</p>\n<p><strong> android:supportsPictureInPicture </strong><br>在清单文件的 <code>&lt;activity&gt;</code> 节点中设置该属性，指明 Activity 是否支持画中画显示。 如果 <code>android:resizeableActivity</code> 为 false，将忽略该属性。<br><figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">android:supportsPictureInPicture=[\"true\" | \"false\"]</div></pre></td></tr></table></figure></p>\n<h4 id=\"布局属性\"><a href=\"#布局属性\" class=\"headerlink\" title=\"布局属性\"></a>布局属性</h4><p>对于 Android N，<code>&lt;layout&gt;</code> 清单元素支持以下几种属性，这些属性影响 Activity 在多窗口模式中的行为：</p>\n<p><code>android:defaultWidth</code><br>以自由形状模式启动时 Activity 的默认宽度。<br><code>android:defaultHeight</code><br>以自由形状模式启动时 Activity 的默认高度。<br><code>android:gravity</code><br>以自由形状模式启动时 Activity 的初始位置。请参阅 Gravity 参考资料，了解合适的值设置。<br><code>android:minimalHeight、android:minimalWidth</code><br>分屏和自由形状模式中 Activity 的最小高度和最小宽度。 如果用户在分屏模式中移动分界线，使 Activity 尺寸低于指定的最小值，系统会将 Activity 裁剪为用户请求的尺寸。<br>例如，以下节点显示了如何指定 Activity 在自由形状模式中显示时 Activity 的默认大小、位置和最小尺寸：</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">activity</span> <span class=\"attr\">android:name</span>=<span class=\"string\">\".MyActivity\"</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">layout</span> <span class=\"attr\">android:defaultHeight</span>=<span class=\"string\">\"500dp\"</span></div><div class=\"line\">          <span class=\"attr\">android:defaultWidth</span>=<span class=\"string\">\"600dp\"</span></div><div class=\"line\">          <span class=\"attr\">android:gravity</span>=<span class=\"string\">\"top|end\"</span></div><div class=\"line\">          <span class=\"attr\">android:minimalHeight</span>=<span class=\"string\">\"450dp\"</span></div><div class=\"line\">          <span class=\"attr\">android:minimalWidth</span>=<span class=\"string\">\"300dp\"</span> /&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">activity</span>&gt;</span></div></pre></td></tr></table></figure>\n<h4 id=\"在多窗口模式中运行应用\"><a href=\"#在多窗口模式中运行应用\" class=\"headerlink\" title=\"在多窗口模式中运行应用\"></a>在多窗口模式中运行应用</h4><p><strong> 多窗口模式中被禁用的功能 </strong><br>在设备处于多窗口模式中时，某些功能会被禁用或忽略，因为这些功能对与其他 Activity 或应用共享设备屏幕的 Activity 而言没有意义。 此类功能包括：</p>\n<ol>\n<li>某些系统 UI 自定义选项将被禁用；例如，在非全屏模式中，应用无法隐藏状态栏。</li>\n<li>系统将忽略对 android:screenOrientation 属性所作的更改。</li>\n</ol>\n<p><strong> 多窗口变更通知和查询 </strong></p>\n<ol>\n<li>Activity.isInMultiWindowMode()<br>调用该方法以确认 Activity 是否处于多窗口模式。</li>\n<li>Activity.isInPictureInPictureMode()<br>调用该方法以确认 Activity 是否处于画中画模式。<blockquote>\n<p>画中画模式是多窗口模式的特例。 如果 myActivity.isInPictureInPictureMode() 返回 true，<br>myActivity.isInMultiWindowMode() 也返回 true。</p>\n</blockquote>\n</li>\n<li>Activity.onMultiWindowModeChanged()<br>Activity 进入或退出多窗口模式时系统将调用此方法。 在 Activity 进入多窗口模式时，系统向该方法传递 true 值，在退出多窗口模式时，则传递 false 值。</li>\n<li>Activity.onPictureInPictureModeChanged()<br>Activity 进入或退出画中画模式时系统将调用此方法。 在 Activity 进入画中画模式时，系统向该方法传递 true 值，在退出画中画模式时，则传递 false 值。</li>\n</ol>\n<p>每个方法还有 Fragment 版本，例如 Fragment.isInMultiWindowMode()。</p>\n<h4 id=\"进入画中画模式\"><a href=\"#进入画中画模式\" class=\"headerlink\" title=\"进入画中画模式\"></a>进入画中画模式</h4><p>如需在画中画模式中启动 Activity，请调用新方法 Activity.enterPictureInPictureMode()。 如果设备不支持画中画模式，则此方法无效。 如需了解详细信息，请参阅<a href=\"https://developer.android.com/guide/topics/ui/picture-in-picture\">画中画</a>文档。<br><a href=\"https://developer.android.com/guide/topics/ui/picture-in-picture\">https://developer.android.com/guide/topics/ui/picture-in-picture</a></p>\n<h4 id=\"在多窗口模式中启动新-Activity\"><a href=\"#在多窗口模式中启动新-Activity\" class=\"headerlink\" title=\"在多窗口模式中启动新 Activity\"></a>在多窗口模式中启动新 Activity</h4><p>如果只是简单的开启Activity，和在非多窗口模式下是一致的。如果想要在当前Activity的旁边启动Activity，可以添加<code>FLAG_ACTIVITY_LAUNCH_ADJACENT</code>标志位(官方文档说是<code>Intent.FLAG_ACTIVITY_LAUNCH_TO_ADJACENT</code>,但在实际操作中这个标志位不存在)，传递此标志将请求以下行为：</p>\n<ol>\n<li>如果设备处于分屏模式，系统会尝试在启动系统的 Activity 旁创建新 Activity，这样两个 Activity 将共享屏幕。 系统并不一定能实现此操作，但如果可以，系统将使两个 Activity 处于相邻的位置。</li>\n<li>如果设备不处于分屏模式，则该标志无效。<br>如果设备处于自由形状模式，则在启动新 Activity 时，用户可通过调用 ActivityOptions.setLaunchBounds() 指定新 Activity 的尺寸和屏幕位置。 如果设备不处于多窗口模式，则该方法无效。<br>PS:如果在任务栈中启动 Activity，该 Activity 将替换屏幕上的 Activity，并继承其所有的多窗口属性。 如果要在多窗口模式中以单独的窗口启动新 Activity，则必须在新的任务栈中启动此 Activity。</li>\n</ol>\n<h4 id=\"支持拖放\"><a href=\"#支持拖放\" class=\"headerlink\" title=\"支持拖放\"></a>支持拖放</h4><p>用户可以在两个 Activity 共享屏幕的同时在这两个 Activity 之间拖放数据 （在此之前，用户只能在一个 Activity 内部拖放数据）。 </p>\n<ol>\n<li>android.view.DropPermissions<br>令牌对象，负责指定对接收拖放数据的应用授予的权限。</li>\n<li>View.startDragAndDrop()<br>View.startDrag() 的新别名。要启用跨 Activity 拖放，请传递新标志 View.DRAG_FLAG_GLOBAL。 如需对接收拖放数据的 Activity 授予 URI 权限，可根据情况传递新标志 View.DRAG_FLAG_GLOBAL_URI_READ 或 View.DRAG_FLAG_GLOBAL_URI_WRITE。</li>\n<li>View.cancelDragAndDrop()<br>取消当前正在进行的拖动操作。只能由发起拖动操作的应用调用。</li>\n<li>View.updateDragShadow()<br>替换当前正在进行的拖动操作的拖动阴影。只能由发起拖动操作的应用调用。</li>\n<li>Activity.requestDropPermissions()<br>请求使用 DragEvent 中包含的 ClipData 传递的内容 URI 的权限。</li>\n</ol>\n<h4 id=\"代码\"><a href=\"#代码\" class=\"headerlink\" title=\"代码\"></a>代码</h4><p><strong> 在当前Activity旁边开启新界面 </strong><br>如下图所示，上面的界面是MainActivity，下面的Activity是在MainActivity中点击<code>获取实时天气</code>开启的界面<br><img src=\"/image/Android/MultiWindow/2.png\" alt=\"MultiWindow\"><br>在MainActivity中</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\">findViewById(R.id.get_weather).setOnClickListener(<span class=\"keyword\">new</span> View.OnClickListener() &#123;</div><div class=\"line\">    <span class=\"meta\">@Override</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onClick</span><span class=\"params\">(View v)</span> </span>&#123;</div><div class=\"line\">        Intent intent = <span class=\"keyword\">new</span> Intent(MainActivity.<span class=\"keyword\">this</span>,Main2Activity.class);</div><div class=\"line\">        intent.addFlags(Intent.FLAG_ACTIVITY_LAUNCH_ADJACENT | Intent.FLAG_ACTIVITY_NEW_TASK);</div><div class=\"line\">        startActivity(intent);</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure>\n<p>为什么需要 <code>FLAG_ACTIVITY_NEW_TASK</code>:<br>官方解释</p>\n<blockquote>\n<p>在同一个Activity返回栈中，打开一个新的Activity时，这个Activity将会继承上一个Activity所有和分屏模式有关的属性。如果你想要在一个独立的窗口以分屏模式打开一个新的Activity，那么必须新建一个Activity返回栈。</p>\n</blockquote>\n<p><strong> 拖拽 </strong><br>首先在多窗口模式下打开新界面，如上面的代码所示。<br>在MainActivity中发起拖拽<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">final</span> Button dragedButton = findViewById(R.id.drag_to_another);<span class=\"comment\">//拖拽按钮</span></div><div class=\"line\">        dragedButton.setTag(<span class=\"string\">\"this is a test\"</span>);</div><div class=\"line\"></div><div class=\"line\">        dragedButton.setOnTouchListener(<span class=\"keyword\">new</span> View.OnTouchListener() &#123;</div><div class=\"line\">            <span class=\"meta\">@Override</span></div><div class=\"line\">            <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">onTouch</span><span class=\"params\">(View v, MotionEvent event)</span> </span>&#123;</div><div class=\"line\"></div><div class=\"line\">                <span class=\"keyword\">if</span>(event.getAction() == MotionEvent.ACTION_DOWN)&#123;</div><div class=\"line\"></div><div class=\"line\">                    ClipData.Item item = <span class=\"keyword\">new</span> ClipData.Item((CharSequence) dragedButton.getTag());</div><div class=\"line\">                    String[] mimeTypes = &#123;ClipDescription.MIMETYPE_TEXT_PLAIN&#125;;</div><div class=\"line\">                    ClipData dragData = <span class=\"keyword\">new</span> ClipData(v.getTag().toString(), mimeTypes, item);</div><div class=\"line\">                    View.DragShadowBuilder shadow = <span class=\"keyword\">new</span> View.DragShadowBuilder(dragedButton);</div><div class=\"line\">                    <span class=\"comment\">/** startDragAndDrop是Android N SDK中的新方法，替代了以前的startDrag，flag需要设置为DRAG_FLAG_GLOBAL */</span></div><div class=\"line\">                    v.startDragAndDrop(dragData, shadow, <span class=\"keyword\">null</span>, View.DRAG_FLAG_GLOBAL);</div><div class=\"line\">                    <span class=\"keyword\">return</span> <span class=\"keyword\">true</span>;</div><div class=\"line\">                &#125;</div><div class=\"line\">                <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">                    <span class=\"keyword\">return</span> <span class=\"keyword\">false</span>;</div><div class=\"line\">                &#125;</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;);</div></pre></td></tr></table></figure></p>\n<p>在第二个界面中接收拖拽结果<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">final</span> TextView textView = findViewById(R.id.show_drag_view_tag);</div><div class=\"line\">        textView.setText(<span class=\"string\">\"拖拽到这里\"</span>);</div><div class=\"line\">        textView.setOnDragListener(<span class=\"keyword\">new</span> View.OnDragListener() &#123;</div><div class=\"line\">            <span class=\"meta\">@Override</span></div><div class=\"line\">            <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">onDrag</span><span class=\"params\">(View view, DragEvent dragEvent)</span> </span>&#123;</div><div class=\"line\">                <span class=\"keyword\">switch</span> (dragEvent.getAction()) &#123;</div><div class=\"line\">                    <span class=\"keyword\">case</span> DragEvent.ACTION_DRAG_STARTED:</div><div class=\"line\">                        Log.d(TAG, <span class=\"string\">\"Action is DragEvent.ACTION_DRAG_STARTED\"</span>);</div><div class=\"line\">                        <span class=\"keyword\">break</span>;</div><div class=\"line\"></div><div class=\"line\">                    <span class=\"keyword\">case</span> DragEvent.ACTION_DRAG_ENTERED:</div><div class=\"line\">                        Log.d(TAG, <span class=\"string\">\"Action is DragEvent.ACTION_DRAG_ENTERED\"</span>);</div><div class=\"line\">                        <span class=\"keyword\">break</span>;</div><div class=\"line\"></div><div class=\"line\">                    <span class=\"keyword\">case</span> DragEvent.ACTION_DRAG_EXITED:</div><div class=\"line\">                        Log.d(TAG, <span class=\"string\">\"Action is DragEvent.ACTION_DRAG_EXITED\"</span>);</div><div class=\"line\">                        <span class=\"keyword\">break</span>;</div><div class=\"line\"></div><div class=\"line\">                    <span class=\"keyword\">case</span> DragEvent.ACTION_DRAG_LOCATION:</div><div class=\"line\">                        <span class=\"keyword\">break</span>;</div><div class=\"line\"></div><div class=\"line\">                    <span class=\"keyword\">case</span> DragEvent.ACTION_DRAG_ENDED:</div><div class=\"line\">                        Log.d(TAG, <span class=\"string\">\"Action is DragEvent.ACTION_DRAG_ENDED\"</span>);</div><div class=\"line\">                        <span class=\"keyword\">break</span>;</div><div class=\"line\"></div><div class=\"line\">                    <span class=\"keyword\">case</span> DragEvent.ACTION_DROP:</div><div class=\"line\">                        Log.d(TAG, <span class=\"string\">\"ACTION_DROP event\"</span>);</div><div class=\"line\">                        <span class=\"comment\">/** 3.在这里显示接收到的结果 */</span></div><div class=\"line\">                        textView.setText(dragEvent.getClipData().getItemAt(<span class=\"number\">0</span>).getText());</div><div class=\"line\">                        <span class=\"keyword\">break</span>;</div><div class=\"line\"></div><div class=\"line\">                    <span class=\"keyword\">default</span>:</div><div class=\"line\">                        <span class=\"keyword\">break</span>;</div><div class=\"line\">                &#125;</div><div class=\"line\"></div><div class=\"line\">                <span class=\"keyword\">return</span> <span class=\"keyword\">true</span>;</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;);</div><div class=\"line\">    &#125;</div></pre></td></tr></table></figure></p>\n<p>将MainActivity中的拖拽按钮拖放的第二个界面中<code>拖拽到这里</code>view上之后<br><img src=\"/image/Android/MultiWindow/3.png\" alt=\"MultiWindow\"><br>关于startDragAndDrop，官方参考文档在这里<br><a href=\"https://developer.android.com/reference/android/view/View?hl=zh-cn#startDrag\">startDragAndDrop</a><br><a href=\"https://developer.android.com/reference/android/view/View?hl=zh-cn#startDrag\">https://developer.android.com/reference/android/view/View?hl=zh-cn#startDrag</a></p>\n<hr>\n<p>以上</p>"},{"title":"Android中使用WebSocket-2","date":"2017-12-26T08:37:37.000Z","keywords":"Android使用WebSocket","_content":"上一篇提到在Android中使用WebSocket和服务端进行通信。是直接在Activity里面进行操作的这样会保持一个长连接，一个应用里面没必要也不应该保持多个长连接，所以我们可以把WebSocket客户端挪到Service里面，使用广播和Activity进行通信。\n<!-- more -->\n1. APP端：\n继承`BroadcastReceiver`，重写`public void onReceive(Context context, Intent intent)`方法，在该方法中进行业务处理。\n``` java\n\npublic class MainActivity extends AppCompatActivity implements View.OnClickListener {\n\n    private TextView showMessage;\n    private EditText editText;\n    private StringBuilder sb = new StringBuilder();\n    private WebSocketBroadcastReceiver webSocketBroadcastReceiver;\n\n    @Override\n    protected void onCreate(Bundle savedInstanceState) {\n        super.onCreate(savedInstanceState);\n        setContentView(R.layout.activity_main);\n        Intent intent = new Intent(this, WebSocketService.class);\n        startService(intent);\n        showMessage = findViewById(R.id.show_message);\n        editText = findViewById(R.id.edit_text);\n        findViewById(R.id.send).setOnClickListener(this);\n        webSocketBroadcastReceiver = new WebSocketBroadcastReceiver();\n        IntentFilter intentFilter = new IntentFilter(\"web_socket\");\n        registerReceiver(webSocketBroadcastReceiver, intentFilter);\n    }\n\n    @Override\n    public void onClick(View v) {\n        switch (v.getId()) {\n            case R.id.send:\n\n                sb.append(\"客户端发送消息：\");\n                sb.append(new Date().toLocaleString());\n                sb.append(\"\\n\");\n                sb.append(editText.getText().toString().trim());\n                sb.append(\"\\n\");\n                showMessage.setText(sb.toString());\n                Intent intent = new Intent(this, WebSocketService.class);\n                intent.putExtra(\"message\", editText.getText().toString().trim());\n                startService(intent);\n                editText.setText(\"\");\n                break;\n            default:\n                break;\n        }\n    }\n\n    class WebSocketBroadcastReceiver extends BroadcastReceiver {\n\n        @Override\n        public void onReceive(Context context, Intent intent) {\n            String message = intent.getStringExtra(\"message\");\n            sb.append(\"服务端返回消息：\");\n            sb.append(new Date().toLocaleString());\n            sb.append(\"\\n\");\n            sb.append(message);\n            sb.append(\"\\n\");\n            showMessage.setText(sb.toString());\n\n    }\n}\n\n    @Override\n    protected void onDestroy() {\n        Intent intent = new Intent(this, WebSocketService.class);\n        stopService(intent);\n        unregisterReceiver(webSocketBroadcastReceiver);\n        super.onDestroy();\n    }\n}\n```\n2. Service\n继承`Service`,在`onCreate()`方法里面创建`WebSocketClient`并和服务端进行连接。在`AndroidManifest.xml`中注册服务。\n``` java\n\npublic class WebSocketService extends Service {\n    private IoTWebSocketClient ioTWebSocketClient;\n    private Intent broadcastIntent;\n\n    @Override\n    public IBinder onBind(Intent intent) {\n        return null;\n    }\n\n    @Override\n    public void onCreate() {\n        super.onCreate();\n        broadcastIntent = new Intent();\n        broadcastIntent.setAction(\"web_socket\");\n        ioTWebSocketClient = new IoTWebSocketClient(URI.create(\"ws://192.168.1.64:8887\"));\n        ioTWebSocketClient.connect();\n    }\n\n    @Override\n    public int onStartCommand(Intent intent, int flags, int startId) {\n        String message = intent.getStringExtra(\"message\");\n        if(ioTWebSocketClient.isClosing() || ioTWebSocketClient.isClosed()){\n            stopSelf();\n            return super.onStartCommand(intent, flags, startId);\n        }\n        try {\n            ioTWebSocketClient.send(message);\n        }catch (Exception e){\n            e.printStackTrace();\n        }\n        return super.onStartCommand(intent, flags, startId);\n    }\n\n    @Override\n    public void onDestroy() {\n        ioTWebSocketClient.close();\n        ioTWebSocketClient = null;\n        super.onDestroy();\n    }\n\n    class IoTWebSocketClient extends WebSocketClient {\n\n        IoTWebSocketClient(URI serverUri) {\n            super(serverUri);\n        }\n\n        @Override\n        public void onOpen(ServerHandshake handshakedata) {\n        }\n\n        @Override\n        public void onMessage(String message) {\n            broadcastIntent.putExtra(\"message\", message);\n            WebSocketService.this.sendBroadcast(broadcastIntent);\n        }\n\n        @Override\n        public void onClose(int code, String reason, boolean remote) {\n        }\n\n        @Override\n        public void onError(Exception ex) {\n            stopSelf();\n        }\n    }\n}\n```\n在`onStartCommand()`方法里面，对发送消息方法的调用进行异常捕获，是因为这时候可能服务端重启或者服务端还没有准备好，这是发送消息会抛出异常，可以根据自己的业务需求进行改进。\n\n----\n以上","source":"_posts/Android中使用WebSocket-2.md","raw":"---\ntitle: Android中使用WebSocket-2\ndate: 2017-12-26 16:37:37\ntags: [Android,WebSocket]\nkeywords: Android使用WebSocket\n---\n上一篇提到在Android中使用WebSocket和服务端进行通信。是直接在Activity里面进行操作的这样会保持一个长连接，一个应用里面没必要也不应该保持多个长连接，所以我们可以把WebSocket客户端挪到Service里面，使用广播和Activity进行通信。\n<!-- more -->\n1. APP端：\n继承`BroadcastReceiver`，重写`public void onReceive(Context context, Intent intent)`方法，在该方法中进行业务处理。\n``` java\n\npublic class MainActivity extends AppCompatActivity implements View.OnClickListener {\n\n    private TextView showMessage;\n    private EditText editText;\n    private StringBuilder sb = new StringBuilder();\n    private WebSocketBroadcastReceiver webSocketBroadcastReceiver;\n\n    @Override\n    protected void onCreate(Bundle savedInstanceState) {\n        super.onCreate(savedInstanceState);\n        setContentView(R.layout.activity_main);\n        Intent intent = new Intent(this, WebSocketService.class);\n        startService(intent);\n        showMessage = findViewById(R.id.show_message);\n        editText = findViewById(R.id.edit_text);\n        findViewById(R.id.send).setOnClickListener(this);\n        webSocketBroadcastReceiver = new WebSocketBroadcastReceiver();\n        IntentFilter intentFilter = new IntentFilter(\"web_socket\");\n        registerReceiver(webSocketBroadcastReceiver, intentFilter);\n    }\n\n    @Override\n    public void onClick(View v) {\n        switch (v.getId()) {\n            case R.id.send:\n\n                sb.append(\"客户端发送消息：\");\n                sb.append(new Date().toLocaleString());\n                sb.append(\"\\n\");\n                sb.append(editText.getText().toString().trim());\n                sb.append(\"\\n\");\n                showMessage.setText(sb.toString());\n                Intent intent = new Intent(this, WebSocketService.class);\n                intent.putExtra(\"message\", editText.getText().toString().trim());\n                startService(intent);\n                editText.setText(\"\");\n                break;\n            default:\n                break;\n        }\n    }\n\n    class WebSocketBroadcastReceiver extends BroadcastReceiver {\n\n        @Override\n        public void onReceive(Context context, Intent intent) {\n            String message = intent.getStringExtra(\"message\");\n            sb.append(\"服务端返回消息：\");\n            sb.append(new Date().toLocaleString());\n            sb.append(\"\\n\");\n            sb.append(message);\n            sb.append(\"\\n\");\n            showMessage.setText(sb.toString());\n\n    }\n}\n\n    @Override\n    protected void onDestroy() {\n        Intent intent = new Intent(this, WebSocketService.class);\n        stopService(intent);\n        unregisterReceiver(webSocketBroadcastReceiver);\n        super.onDestroy();\n    }\n}\n```\n2. Service\n继承`Service`,在`onCreate()`方法里面创建`WebSocketClient`并和服务端进行连接。在`AndroidManifest.xml`中注册服务。\n``` java\n\npublic class WebSocketService extends Service {\n    private IoTWebSocketClient ioTWebSocketClient;\n    private Intent broadcastIntent;\n\n    @Override\n    public IBinder onBind(Intent intent) {\n        return null;\n    }\n\n    @Override\n    public void onCreate() {\n        super.onCreate();\n        broadcastIntent = new Intent();\n        broadcastIntent.setAction(\"web_socket\");\n        ioTWebSocketClient = new IoTWebSocketClient(URI.create(\"ws://192.168.1.64:8887\"));\n        ioTWebSocketClient.connect();\n    }\n\n    @Override\n    public int onStartCommand(Intent intent, int flags, int startId) {\n        String message = intent.getStringExtra(\"message\");\n        if(ioTWebSocketClient.isClosing() || ioTWebSocketClient.isClosed()){\n            stopSelf();\n            return super.onStartCommand(intent, flags, startId);\n        }\n        try {\n            ioTWebSocketClient.send(message);\n        }catch (Exception e){\n            e.printStackTrace();\n        }\n        return super.onStartCommand(intent, flags, startId);\n    }\n\n    @Override\n    public void onDestroy() {\n        ioTWebSocketClient.close();\n        ioTWebSocketClient = null;\n        super.onDestroy();\n    }\n\n    class IoTWebSocketClient extends WebSocketClient {\n\n        IoTWebSocketClient(URI serverUri) {\n            super(serverUri);\n        }\n\n        @Override\n        public void onOpen(ServerHandshake handshakedata) {\n        }\n\n        @Override\n        public void onMessage(String message) {\n            broadcastIntent.putExtra(\"message\", message);\n            WebSocketService.this.sendBroadcast(broadcastIntent);\n        }\n\n        @Override\n        public void onClose(int code, String reason, boolean remote) {\n        }\n\n        @Override\n        public void onError(Exception ex) {\n            stopSelf();\n        }\n    }\n}\n```\n在`onStartCommand()`方法里面，对发送消息方法的调用进行异常捕获，是因为这时候可能服务端重启或者服务端还没有准备好，这是发送消息会抛出异常，可以根据自己的业务需求进行改进。\n\n----\n以上","slug":"Android中使用WebSocket-2","published":1,"updated":"2018-08-04T04:46:38.119Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjl3vbtpy000bisdgk51k4o11","content":"<p>上一篇提到在Android中使用WebSocket和服务端进行通信。是直接在Activity里面进行操作的这样会保持一个长连接，一个应用里面没必要也不应该保持多个长连接，所以我们可以把WebSocket客户端挪到Service里面，使用广播和Activity进行通信。<br><a id=\"more\"></a></p>\n<ol>\n<li><p>APP端：<br>继承<code>BroadcastReceiver</code>，重写<code>public void onReceive(Context context, Intent intent)</code>方法，在该方法中进行业务处理。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MainActivity</span> <span class=\"keyword\">extends</span> <span class=\"title\">AppCompatActivity</span> <span class=\"keyword\">implements</span> <span class=\"title\">View</span>.<span class=\"title\">OnClickListener</span> </span>&#123;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">private</span> TextView showMessage;</div><div class=\"line\">    <span class=\"keyword\">private</span> EditText editText;</div><div class=\"line\">    <span class=\"keyword\">private</span> StringBuilder sb = <span class=\"keyword\">new</span> StringBuilder();</div><div class=\"line\">    <span class=\"keyword\">private</span> WebSocketBroadcastReceiver webSocketBroadcastReceiver;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"meta\">@Override</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title\">onCreate</span><span class=\"params\">(Bundle savedInstanceState)</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">super</span>.onCreate(savedInstanceState);</div><div class=\"line\">        setContentView(R.layout.activity_main);</div><div class=\"line\">        Intent intent = <span class=\"keyword\">new</span> Intent(<span class=\"keyword\">this</span>, WebSocketService.class);</div><div class=\"line\">        startService(intent);</div><div class=\"line\">        showMessage = findViewById(R.id.show_message);</div><div class=\"line\">        editText = findViewById(R.id.edit_text);</div><div class=\"line\">        findViewById(R.id.send).setOnClickListener(<span class=\"keyword\">this</span>);</div><div class=\"line\">        webSocketBroadcastReceiver = <span class=\"keyword\">new</span> WebSocketBroadcastReceiver();</div><div class=\"line\">        IntentFilter intentFilter = <span class=\"keyword\">new</span> IntentFilter(<span class=\"string\">\"web_socket\"</span>);</div><div class=\"line\">        registerReceiver(webSocketBroadcastReceiver, intentFilter);</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"meta\">@Override</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onClick</span><span class=\"params\">(View v)</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">switch</span> (v.getId()) &#123;</div><div class=\"line\">            <span class=\"keyword\">case</span> R.id.send:</div><div class=\"line\"></div><div class=\"line\">                sb.append(<span class=\"string\">\"客户端发送消息：\"</span>);</div><div class=\"line\">                sb.append(<span class=\"keyword\">new</span> Date().toLocaleString());</div><div class=\"line\">                sb.append(<span class=\"string\">\"\\n\"</span>);</div><div class=\"line\">                sb.append(editText.getText().toString().trim());</div><div class=\"line\">                sb.append(<span class=\"string\">\"\\n\"</span>);</div><div class=\"line\">                showMessage.setText(sb.toString());</div><div class=\"line\">                Intent intent = <span class=\"keyword\">new</span> Intent(<span class=\"keyword\">this</span>, WebSocketService.class);</div><div class=\"line\">                intent.putExtra(<span class=\"string\">\"message\"</span>, editText.getText().toString().trim());</div><div class=\"line\">                startService(intent);</div><div class=\"line\">                editText.setText(<span class=\"string\">\"\"</span>);</div><div class=\"line\">                <span class=\"keyword\">break</span>;</div><div class=\"line\">            <span class=\"keyword\">default</span>:</div><div class=\"line\">                <span class=\"keyword\">break</span>;</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">WebSocketBroadcastReceiver</span> <span class=\"keyword\">extends</span> <span class=\"title\">BroadcastReceiver</span> </span>&#123;</div><div class=\"line\"></div><div class=\"line\">        <span class=\"meta\">@Override</span></div><div class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onReceive</span><span class=\"params\">(Context context, Intent intent)</span> </span>&#123;</div><div class=\"line\">            String message = intent.getStringExtra(<span class=\"string\">\"message\"</span>);</div><div class=\"line\">            sb.append(<span class=\"string\">\"服务端返回消息：\"</span>);</div><div class=\"line\">            sb.append(<span class=\"keyword\">new</span> Date().toLocaleString());</div><div class=\"line\">            sb.append(<span class=\"string\">\"\\n\"</span>);</div><div class=\"line\">            sb.append(message);</div><div class=\"line\">            sb.append(<span class=\"string\">\"\\n\"</span>);</div><div class=\"line\">            showMessage.setText(sb.toString());</div><div class=\"line\"></div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"meta\">@Override</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title\">onDestroy</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">        Intent intent = <span class=\"keyword\">new</span> Intent(<span class=\"keyword\">this</span>, WebSocketService.class);</div><div class=\"line\">        stopService(intent);</div><div class=\"line\">        unregisterReceiver(webSocketBroadcastReceiver);</div><div class=\"line\">        <span class=\"keyword\">super</span>.onDestroy();</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n</li>\n<li><p>Service<br>继承<code>Service</code>,在<code>onCreate()</code>方法里面创建<code>WebSocketClient</code>并和服务端进行连接。在<code>AndroidManifest.xml</code>中注册服务。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">WebSocketService</span> <span class=\"keyword\">extends</span> <span class=\"title\">Service</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">private</span> IoTWebSocketClient ioTWebSocketClient;</div><div class=\"line\">    <span class=\"keyword\">private</span> Intent broadcastIntent;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"meta\">@Override</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> IBinder <span class=\"title\">onBind</span><span class=\"params\">(Intent intent)</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">null</span>;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"meta\">@Override</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onCreate</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">super</span>.onCreate();</div><div class=\"line\">        broadcastIntent = <span class=\"keyword\">new</span> Intent();</div><div class=\"line\">        broadcastIntent.setAction(<span class=\"string\">\"web_socket\"</span>);</div><div class=\"line\">        ioTWebSocketClient = <span class=\"keyword\">new</span> IoTWebSocketClient(URI.create(<span class=\"string\">\"ws://192.168.1.64:8887\"</span>));</div><div class=\"line\">        ioTWebSocketClient.connect();</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"meta\">@Override</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">onStartCommand</span><span class=\"params\">(Intent intent, <span class=\"keyword\">int</span> flags, <span class=\"keyword\">int</span> startId)</span> </span>&#123;</div><div class=\"line\">        String message = intent.getStringExtra(<span class=\"string\">\"message\"</span>);</div><div class=\"line\">        <span class=\"keyword\">if</span>(ioTWebSocketClient.isClosing() || ioTWebSocketClient.isClosed())&#123;</div><div class=\"line\">            stopSelf();</div><div class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">super</span>.onStartCommand(intent, flags, startId);</div><div class=\"line\">        &#125;</div><div class=\"line\">        <span class=\"keyword\">try</span> &#123;</div><div class=\"line\">            ioTWebSocketClient.send(message);</div><div class=\"line\">        &#125;<span class=\"keyword\">catch</span> (Exception e)&#123;</div><div class=\"line\">            e.printStackTrace();</div><div class=\"line\">        &#125;</div><div class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">super</span>.onStartCommand(intent, flags, startId);</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"meta\">@Override</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onDestroy</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">        ioTWebSocketClient.close();</div><div class=\"line\">        ioTWebSocketClient = <span class=\"keyword\">null</span>;</div><div class=\"line\">        <span class=\"keyword\">super</span>.onDestroy();</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">IoTWebSocketClient</span> <span class=\"keyword\">extends</span> <span class=\"title\">WebSocketClient</span> </span>&#123;</div><div class=\"line\"></div><div class=\"line\">        IoTWebSocketClient(URI serverUri) &#123;</div><div class=\"line\">            <span class=\"keyword\">super</span>(serverUri);</div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\">        <span class=\"meta\">@Override</span></div><div class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onOpen</span><span class=\"params\">(ServerHandshake handshakedata)</span> </span>&#123;</div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\">        <span class=\"meta\">@Override</span></div><div class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onMessage</span><span class=\"params\">(String message)</span> </span>&#123;</div><div class=\"line\">            broadcastIntent.putExtra(<span class=\"string\">\"message\"</span>, message);</div><div class=\"line\">            WebSocketService.<span class=\"keyword\">this</span>.sendBroadcast(broadcastIntent);</div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\">        <span class=\"meta\">@Override</span></div><div class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onClose</span><span class=\"params\">(<span class=\"keyword\">int</span> code, String reason, <span class=\"keyword\">boolean</span> remote)</span> </span>&#123;</div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\">        <span class=\"meta\">@Override</span></div><div class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onError</span><span class=\"params\">(Exception ex)</span> </span>&#123;</div><div class=\"line\">            stopSelf();</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n</li>\n</ol>\n<p>在<code>onStartCommand()</code>方法里面，对发送消息方法的调用进行异常捕获，是因为这时候可能服务端重启或者服务端还没有准备好，这是发送消息会抛出异常，可以根据自己的业务需求进行改进。</p>\n<hr>\n<p>以上</p>\n","excerpt":"<p>上一篇提到在Android中使用WebSocket和服务端进行通信。是直接在Activity里面进行操作的这样会保持一个长连接，一个应用里面没必要也不应该保持多个长连接，所以我们可以把WebSocket客户端挪到Service里面，使用广播和Activity进行通信。<br>","more":"</p>\n<ol>\n<li><p>APP端：<br>继承<code>BroadcastReceiver</code>，重写<code>public void onReceive(Context context, Intent intent)</code>方法，在该方法中进行业务处理。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MainActivity</span> <span class=\"keyword\">extends</span> <span class=\"title\">AppCompatActivity</span> <span class=\"keyword\">implements</span> <span class=\"title\">View</span>.<span class=\"title\">OnClickListener</span> </span>&#123;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">private</span> TextView showMessage;</div><div class=\"line\">    <span class=\"keyword\">private</span> EditText editText;</div><div class=\"line\">    <span class=\"keyword\">private</span> StringBuilder sb = <span class=\"keyword\">new</span> StringBuilder();</div><div class=\"line\">    <span class=\"keyword\">private</span> WebSocketBroadcastReceiver webSocketBroadcastReceiver;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"meta\">@Override</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title\">onCreate</span><span class=\"params\">(Bundle savedInstanceState)</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">super</span>.onCreate(savedInstanceState);</div><div class=\"line\">        setContentView(R.layout.activity_main);</div><div class=\"line\">        Intent intent = <span class=\"keyword\">new</span> Intent(<span class=\"keyword\">this</span>, WebSocketService.class);</div><div class=\"line\">        startService(intent);</div><div class=\"line\">        showMessage = findViewById(R.id.show_message);</div><div class=\"line\">        editText = findViewById(R.id.edit_text);</div><div class=\"line\">        findViewById(R.id.send).setOnClickListener(<span class=\"keyword\">this</span>);</div><div class=\"line\">        webSocketBroadcastReceiver = <span class=\"keyword\">new</span> WebSocketBroadcastReceiver();</div><div class=\"line\">        IntentFilter intentFilter = <span class=\"keyword\">new</span> IntentFilter(<span class=\"string\">\"web_socket\"</span>);</div><div class=\"line\">        registerReceiver(webSocketBroadcastReceiver, intentFilter);</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"meta\">@Override</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onClick</span><span class=\"params\">(View v)</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">switch</span> (v.getId()) &#123;</div><div class=\"line\">            <span class=\"keyword\">case</span> R.id.send:</div><div class=\"line\"></div><div class=\"line\">                sb.append(<span class=\"string\">\"客户端发送消息：\"</span>);</div><div class=\"line\">                sb.append(<span class=\"keyword\">new</span> Date().toLocaleString());</div><div class=\"line\">                sb.append(<span class=\"string\">\"\\n\"</span>);</div><div class=\"line\">                sb.append(editText.getText().toString().trim());</div><div class=\"line\">                sb.append(<span class=\"string\">\"\\n\"</span>);</div><div class=\"line\">                showMessage.setText(sb.toString());</div><div class=\"line\">                Intent intent = <span class=\"keyword\">new</span> Intent(<span class=\"keyword\">this</span>, WebSocketService.class);</div><div class=\"line\">                intent.putExtra(<span class=\"string\">\"message\"</span>, editText.getText().toString().trim());</div><div class=\"line\">                startService(intent);</div><div class=\"line\">                editText.setText(<span class=\"string\">\"\"</span>);</div><div class=\"line\">                <span class=\"keyword\">break</span>;</div><div class=\"line\">            <span class=\"keyword\">default</span>:</div><div class=\"line\">                <span class=\"keyword\">break</span>;</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">WebSocketBroadcastReceiver</span> <span class=\"keyword\">extends</span> <span class=\"title\">BroadcastReceiver</span> </span>&#123;</div><div class=\"line\"></div><div class=\"line\">        <span class=\"meta\">@Override</span></div><div class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onReceive</span><span class=\"params\">(Context context, Intent intent)</span> </span>&#123;</div><div class=\"line\">            String message = intent.getStringExtra(<span class=\"string\">\"message\"</span>);</div><div class=\"line\">            sb.append(<span class=\"string\">\"服务端返回消息：\"</span>);</div><div class=\"line\">            sb.append(<span class=\"keyword\">new</span> Date().toLocaleString());</div><div class=\"line\">            sb.append(<span class=\"string\">\"\\n\"</span>);</div><div class=\"line\">            sb.append(message);</div><div class=\"line\">            sb.append(<span class=\"string\">\"\\n\"</span>);</div><div class=\"line\">            showMessage.setText(sb.toString());</div><div class=\"line\"></div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"meta\">@Override</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title\">onDestroy</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">        Intent intent = <span class=\"keyword\">new</span> Intent(<span class=\"keyword\">this</span>, WebSocketService.class);</div><div class=\"line\">        stopService(intent);</div><div class=\"line\">        unregisterReceiver(webSocketBroadcastReceiver);</div><div class=\"line\">        <span class=\"keyword\">super</span>.onDestroy();</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n</li>\n<li><p>Service<br>继承<code>Service</code>,在<code>onCreate()</code>方法里面创建<code>WebSocketClient</code>并和服务端进行连接。在<code>AndroidManifest.xml</code>中注册服务。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">WebSocketService</span> <span class=\"keyword\">extends</span> <span class=\"title\">Service</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">private</span> IoTWebSocketClient ioTWebSocketClient;</div><div class=\"line\">    <span class=\"keyword\">private</span> Intent broadcastIntent;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"meta\">@Override</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> IBinder <span class=\"title\">onBind</span><span class=\"params\">(Intent intent)</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">null</span>;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"meta\">@Override</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onCreate</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">super</span>.onCreate();</div><div class=\"line\">        broadcastIntent = <span class=\"keyword\">new</span> Intent();</div><div class=\"line\">        broadcastIntent.setAction(<span class=\"string\">\"web_socket\"</span>);</div><div class=\"line\">        ioTWebSocketClient = <span class=\"keyword\">new</span> IoTWebSocketClient(URI.create(<span class=\"string\">\"ws://192.168.1.64:8887\"</span>));</div><div class=\"line\">        ioTWebSocketClient.connect();</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"meta\">@Override</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">onStartCommand</span><span class=\"params\">(Intent intent, <span class=\"keyword\">int</span> flags, <span class=\"keyword\">int</span> startId)</span> </span>&#123;</div><div class=\"line\">        String message = intent.getStringExtra(<span class=\"string\">\"message\"</span>);</div><div class=\"line\">        <span class=\"keyword\">if</span>(ioTWebSocketClient.isClosing() || ioTWebSocketClient.isClosed())&#123;</div><div class=\"line\">            stopSelf();</div><div class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">super</span>.onStartCommand(intent, flags, startId);</div><div class=\"line\">        &#125;</div><div class=\"line\">        <span class=\"keyword\">try</span> &#123;</div><div class=\"line\">            ioTWebSocketClient.send(message);</div><div class=\"line\">        &#125;<span class=\"keyword\">catch</span> (Exception e)&#123;</div><div class=\"line\">            e.printStackTrace();</div><div class=\"line\">        &#125;</div><div class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">super</span>.onStartCommand(intent, flags, startId);</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"meta\">@Override</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onDestroy</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">        ioTWebSocketClient.close();</div><div class=\"line\">        ioTWebSocketClient = <span class=\"keyword\">null</span>;</div><div class=\"line\">        <span class=\"keyword\">super</span>.onDestroy();</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">IoTWebSocketClient</span> <span class=\"keyword\">extends</span> <span class=\"title\">WebSocketClient</span> </span>&#123;</div><div class=\"line\"></div><div class=\"line\">        IoTWebSocketClient(URI serverUri) &#123;</div><div class=\"line\">            <span class=\"keyword\">super</span>(serverUri);</div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\">        <span class=\"meta\">@Override</span></div><div class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onOpen</span><span class=\"params\">(ServerHandshake handshakedata)</span> </span>&#123;</div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\">        <span class=\"meta\">@Override</span></div><div class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onMessage</span><span class=\"params\">(String message)</span> </span>&#123;</div><div class=\"line\">            broadcastIntent.putExtra(<span class=\"string\">\"message\"</span>, message);</div><div class=\"line\">            WebSocketService.<span class=\"keyword\">this</span>.sendBroadcast(broadcastIntent);</div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\">        <span class=\"meta\">@Override</span></div><div class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onClose</span><span class=\"params\">(<span class=\"keyword\">int</span> code, String reason, <span class=\"keyword\">boolean</span> remote)</span> </span>&#123;</div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\">        <span class=\"meta\">@Override</span></div><div class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onError</span><span class=\"params\">(Exception ex)</span> </span>&#123;</div><div class=\"line\">            stopSelf();</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n</li>\n</ol>\n<p>在<code>onStartCommand()</code>方法里面，对发送消息方法的调用进行异常捕获，是因为这时候可能服务端重启或者服务端还没有准备好，这是发送消息会抛出异常，可以根据自己的业务需求进行改进。</p>\n<hr>\n<p>以上</p>"},{"title":"Activity启动模式，启动过程","date":"2018-07-26T06:20:07.000Z","keywords":"启动模式,启动过程,Intent匹配规则,App启动流程","_content":"面试总结，关于Activity启动模式、启动过程，Intent匹配规则、App启动流程等\n<!--more-->\n##### 启动模式：\n* standard：标准模式，这也是系统的默认模式。每次启动一个Activity都会重新创建一个新的实例，不管这个实例是否已经存在。\n* singleTop：栈顶复用模式。在这种模式下，如果新Activity已经位于任务栈的栈顶，那么此Activity不会被重新创建，同时它的onNewIntent方法会被回调，通过此方法的参数我们可以取出当前请求的信息。需要注意的是，这个Activity的onCreate、onStart不会被系统调用，因为它并没有发生改变。如果新Activity的实例已存在但不是位于栈顶，那么新Activity仍然会重新重建。\n* singleTask：栈内复用模式。这是一种单实例模式，在这种模式下，只要Activity在一个栈中存在，那么多次启动此Activity都不会重新创建实例，和singleTop一样，系统也会回调其onNewIntent。\n* singleInstance：单实例模式。这是一种加强的singleTask模式，它除了具有singleTask模式的所有特性外，还加强了一点，那就是具有此种模式的Activity只能单独地位于一个任务栈中，\n\n还有一个参数 `TaskAffinity`,这个参数标识了一个Activity所需要的任务栈的名字，默认情况下，所有Activity所需的任务栈的名字为应用的包名。当然，我们可以为每个Activity都单独指定TaskAffinity属性，这个属性值必须不能和包名相同，否则就相当于没有指定。TaskAffinity属性主要和singleTask启动模式或者allowTaskReparenting属性配对使用，在其他情况下没有意义。\n还有Activity中能够影响启动模式、运行状态的标记位：\n\n** FLAG_ACTIVITY_NEW_TASK **\n这个标记位的作用是为Activity指定“singleTask”启动模式，其效果和在XML中指定该启动模式相同。\n** FLAG_ACTIVITY_SINGLE_TOP **\n这个标记位的作用是为Activity指定“singleTop”启动模式，其效果和在XML中指定该启动模式相同。\n** FLAG_ACTIVITY_CLEAR_TOP **\n具有此标记位的Activity，当它启动时，在同一个任务栈中所有位于它上面的Activity都要出栈。这个模式一般需要和FLAG_ACTIVITY_NEW_TASK配合使用，在这种情况下，被启动Activity的实例如果已经存在，那么系统会调用它的onNewIntent。如果被启动的Activity采用standard模式启动，那么它连同它之上的Activity都要出栈，系统会创建新的Activity实例并放入栈顶。通过1.2.1节中的分析可以知道，singleTask启动模式默认就具有此标记位的效果。\n** FLAG_ACTIVITY_EXCLUDE_FROM_RECENTS **\n具有这个标记的Activity不会出现在历史Activity的列表中，当某些情况下我们不希望用户通过历史列表回到我们的Activity的时候这个标记比较有用。它等同于在XML中指定Activity的属性android:excludeFromRecents=\"true\"。\n\n##### Intent匹配规则\n启动Activity分为两种，显式调用和隐式调用。显式调用需要明确地指定被启动对象的组件信息，包括包名和类名，而隐式调用则不需要明确指定组件信息。原则上一个Intent不应该既是显式调用又是隐式调用，如果二者\n共存的话以显式调用为主。显式调用很简单，这里主要介绍一下隐式调用。隐式调用需要Intent能够匹配目标组件的IntentFilter中所设置的过滤信息，如果不匹配将无法启动目标Activity。\n为了匹配过滤列表，需要同时匹配过滤列表中的action、category、data信息，否则匹配失败。一个过滤列表中的action、category和data可以有多个，所有的action、category、data分别构成不同类别，同一类别的信息共同约束当前类别的匹配过程。只有一个Intent同时匹配action类别、category类别、data类别才算完全匹配，只有完全匹配才能成功启动目标Activity。另外一点，一个Activity中可以有多个intent-filter，一个Intent只要能匹配任何一组intent-filter即可成功启动对应的Activity。\n\n* action的匹配规则\naction是一个字符串，系统预定义了一些action，同时我们也可以在应用中定义自己的action。action的匹配规则是Intent中的action必须能够和过滤规则中的action匹配，这里说的匹配是指action的字符串值完全一样。一个过滤规则中可以有多个action，那么只要Intent中的action能够和过滤规则中的任何一个action相同即可匹配成功。需要注意的是，Intent中如果没有指定action，那么匹配失败。另外，action区分大小写，大小写不同字符串相同的action会匹配失败。\n* category的匹配规则\ncategory是一个字符串，系统预定义了一些category，同时我们也可以在应用中定义自己的category。category的匹配规则和action不同，它要求Intent中如果含有category，那么所有的category都必须和过滤规则中的其中一个category相同。换句话说，Intent中如果出现了category，不管有几个category，对于每个category来说，它必须是过滤规则中已经定义了的category。当然，Intent中可以没有category，如果没有category的话，按照上面的描述，这个Intent仍然可以匹配成功。这里要注意下它和action匹配过程的不同，action是要求Intent中必须有一个action且必须能够和过滤规则中的某个action相同，而category要求\nIntent可以没有category，但是如果你一旦有category，不管有几个，每个都要能够和过滤规则中的任何一个category相同。\n* data的匹配规则\ndata的匹配规则和action类似，如果过滤规则中定义了data，那么Intent中必须也要定义可匹配的data。在介绍data的匹配规则之前，我们需要先了解一下data的结构，因为data稍微有些复杂\n``` xml\n<data   android:scheme=\"string\"\n        android:host=\"string\"\n        android:port=\"string\"\n        android:path=\"string\"\n        android:pathPattern=\"string\"\n        android:pathPrefix=\"string\"\n        android:mimeType=\"string\" />\n```\ndata由两部分组成，mimeType和URI。mimeType指媒体类型，比如image/jpeg、audio/mpeg4-generic和video/*等，可以表示图片、文本、视频等不同的媒体格式，而URI中包含的数据就比较多了，下面是URI的结构：\n` <scheme>://<host>:<port>/[<path>|<pathPrefix>|<pathPattern>] `\n有如下过滤规则\n\n` <data android:mimeType=\"image/*\" /> `\n这种规则指定了媒体类型为所有类型的图片，那么Intent中的mimeType属性必须为“image/*”才能匹配，这种情况下虽然过滤规则没有指定URI，但是却有默认值，URI的默认值为content和file。也就是说，虽然没有指定URI，但是Intent中的URI部分的schema必须为content或者file才能匹配，这点是需要尤其注意的。为了匹配上面中规则，我们可以写出如下示例\n`intent.setDataAndType(Uri.parse(\"file://abc\"),\"image/png\")。`\n另外，如果要为Intent指定完整的data，必须要调用setDataAndType方法，不能先调用setData再调用setType，因为这两个方法彼此会清除对方的值。\n最后，当我们通过隐式方式启动一个Activity的时候，可以做一下判断，看是否有Activity能够匹配我们的隐式Intent，如果不做判断就有可能出现上述的错误了。判断方法有两种：采用PackageManager的resolveActivity方法或者Intent的resolveActivity方法，如果它们找不到匹配的Activity就会返回null，我们通过判断返回值就可以规避上述错误了。另外，PackageManager还提供了queryIntentActivities方法，这个方法和resolveActivity方法不同的是：它不是返回最佳匹配的Activity信息而是返回所有成功匹配的Activity信息。\n``` java\npublic abstract List<ResolveInfo> queryIntentActivities(Intent intent,int flags);\npublic abstract ResolveInfo resolveActivity(Intent intent,int flags);\n```\n上述两个方法的第一个参数比较好理解，第二个参数需要注意，我们要使用MATCH_DEFAULT_ONLY这个标记位，这个标记位的含义是仅仅匹配那些在intent-filter中声明了\n`<category  android:name=\"android.intent.category.DEFAULT\"/>`这个category的Activity。使用这个标记位的意义在于，只要上述两个方法不返回null，那么startActivity一定可以成功。如果不用这个标记位，就可以把intent-filter中category不含DEFAULT的那些Activity给匹配出来，从而导致startActivity可能失败。因为不含有DEFAULT这个category的Activity是无法接收隐式Intent的。\n\n##### App启动过程\n\n1. 点击桌面App图标，Launch进程采用Binder IPC向system_server进程发起startActivity请求\n2. system_server收到请求后，向zygote进程发送创建进程请求。\n3. Zygote进程fork出新的子进程，即App进程。\n4. App进程通过Binder IPC向system_server进程发起attachApplication请求\n5. system_server进程在收到请求后，进行一系列的准备工作，再通过Binder IPC向App进程发送scheduleLaunchActivity请求。\n6. App进程的binder线程(ApplicationThread)在收到请求后，通过handler向主线程发送LAUNCH_ACTIVITY消息；\n7. 主线程在收到Message后，通过发射机制创建目标Activity，并回调Activity.onCreate()等方法；\n8. 到此，App便正式启动，开始进入Activity生命周期。\n\n** 涉及到的类 **\n\n* `Activity` startActivity方法的真正实现在Activity中。\n* `Instrumentation` 每一个应用程序只有一个Instrumentation对象，每个Activity内都有一个对该对象的引用。Instrumentation可以理解为应用进程的管家，ActivityThread要创建或暂停某个Activity时，都需要通过Instrumentation来进行具体的操作,用来辅助Activity完成启动Activity的过程。\n* `ActivityThread`（包含ApplicationThread + ApplicationThreadNative + IApplicationThread）：真正启动Activity的实现都在这里,应用的入口类，系统通过调用main函数，开启消息循环队列。ActivityThread所在线程被称为应用的主线程（UI线程）。与ActivityManagerServices配合，一起完成Activity的管理工作。\n* `ActivityManagerService` 简称AMS，服务端对象。AMS是Android中最核心的服务之一，主要负责系统中四大组件的启动、切换、调度及应用进程的管理和调度等工作，其职责与操作系统中的进程管理和调度模块相类似，因此它在Android中非常重要，它本身也是一个Binder的实现类。\n* `ActivityManagerProxy` AMS服务在当前进程的代理类，负责与AMS通信。\n* `ApplicationThread` 用来实现ActivityManagerService与ActivityThread之间的交互。在ActivityManagerService需要管理相关Application中的Activity的生命周期时，通过ApplicationThread的代理对象与ActivityThread通讯。\n* `ApplicationThreadProxy` 是ApplicationThread在服务器端的代理，负责和客户端的ApplicationThread通讯。AMS就是通过该代理与ActivityThread进行通信的。\n* `ActivityStack` Activity在AMS的栈管理，用来记录已经启动的Activity的先后关系，状态信息等。通过ActivityStack决定是否需要启动新的进程。\n* `ActivityRecord` ActivityStack的管理对象，每个Activity在AMS对应一个ActivityRecord，来记录Activity的状态以及其他的管理信息。其实就是服务器端的Activity对象的映像。\n* `TaskRecord` AMS抽象出来的一个“任务”的概念，是记录ActivityRecord的栈，一个“Task”包含若干个ActivityRecord。AMS用TaskRecord确保Activity启动和退出的顺序。如果你清楚Activity的4种launchMode，那么对这个概念应该不陌生。\n\n** 基本概念 **\n###### zygote\nAndroid是基于Linux系统的，而在Linux中，所有的进程都是由init进程直接或者是间接fork出来的，zygote进程也不例外。至于init进程怎么来的，可以搜一下Android系统启动过程。\n在Android系统里面，zygote是一个进程的名字。Android是基于Linux System的，当你的手机开机的时候，Linux的内核加载完成之后就会启动一个叫“init“的进程。在Linux System里面，所有的进程都是由init进程fork出来的，我们的zygote进程也不例外。\n我们都知道，每一个App其实都是\n* 一个单独的虚拟机\n* 一个单独的进程\n所以当系统里面的第一个zygote进程运行之后，在这之后再开启App，就相当于开启一个新的进程。而为了实现资源共用和更快的启动速度，Android系统开启新进程的方式，是通过fork第一个zygote进程实现的。所以说，除了第一个zygote进程，其他应用所在的进程都是zygote的子进程，\n\n###### SystemServer\n它也是个进程，而且是由zygote进程fork出来的。系统里面重要的服务都是在这个进程里面开启的，比如`ActivityManagerService`、`PackageManagerService`、`WindowManagerService` 等等。在zygote开启的时候，会调用ZygoteInit.main()进行初始化：\n\n``` java\n/**\n * Startup class for the zygote process.\n *\n * Pre-initializes some classes, and then waits for commands on a UNIX domain\n * socket. Based on these commands, forks off child processes that inherit\n * the initial state of the VM.\n *\n * Please see {@link ZygoteConnection.Arguments} for documentation on the\n * client protocol.\n *\n */\n```\n从注释上也可以看出这个\b类主要是为了初始化某些参数。比如\n``` java\nstatic void preload(TimingsTraceLog bootTimingsTraceLog) {\n        Log.d(TAG, \"begin preload\");\n        bootTimingsTraceLog.traceBegin(\"BeginIcuCachePinning\");\n        beginIcuCachePinning();\n        bootTimingsTraceLog.traceEnd(); // BeginIcuCachePinning\n        bootTimingsTraceLog.traceBegin(\"PreloadClasses\");\n        preloadClasses();\n        bootTimingsTraceLog.traceEnd(); // PreloadClasses\n        bootTimingsTraceLog.traceBegin(\"PreloadResources\");\n        preloadResources();\n        bootTimingsTraceLog.traceEnd(); // PreloadResources\n        Trace.traceBegin(Trace.TRACE_TAG_DALVIK, \"PreloadAppProcessHALs\");\n        nativePreloadAppProcessHALs();\n        Trace.traceEnd(Trace.TRACE_TAG_DALVIK);\n        Trace.traceBegin(Trace.TRACE_TAG_DALVIK, \"PreloadOpenGL\");\n        preloadOpenGL();\n        Trace.traceEnd(Trace.TRACE_TAG_DALVIK);\n        preloadSharedLibraries();\n        preloadTextResources();\n        // Ask the WebViewFactory to do any initialization that must run in the zygote process,\n        // for memory sharing purposes.\n        WebViewFactory.prepareWebViewInZygote();\n        endIcuCachePinning();\n        warmUpJcaProviders();\n        Log.d(TAG, \"end preload\");\n\n        sPreloadComplete = true;\n    }\n\n    public static void lazyPreload() {\n        Preconditions.checkState(!sPreloadComplete);\n        Log.i(TAG, \"Lazily preloading resources.\");\n\n        preload(new TimingsTraceLog(\"ZygoteInitTiming_lazy\", Trace.TRACE_TAG_DALVIK));\n    }\n```\n还有一些关键的方法`preloadSharedLibraries()`、`preloadOpenGL()`、`preloadTextResources()`、`preloadClasses()`、`preloadResources()`、`preloadDrawables()`、`preloadColorStateLists()` 等.还有一个\b`startSystemServer()`方法。\n\n###### ActivityManagerService\n简称AMS,服务端对象，负责系统中所有Activity生命周期。它的初始化时机很明确，就是在SystemServer进程开启的时候，就会初始化ActivityManagerService。具体情况\b可以看一下`SystemServer.java`类。\n经过上面这些步骤，我们的ActivityManagerService对象已经创建好了，并且完成了成员变量初始化。而且在这之前，调用createSystemContext()创建系统上下文的时候，也已经完成了mSystemContext和ActivityThread的创建。注意，这是系统进程开启时的流程，在这之后，会开启系统的Launcher程序，完成系统界面的加载与显示。\n\n###### 为什么说AMS是服务端对象\n\n其实服务器客户端的概念不仅仅存在于Web开发中，在Android的框架设计中，使用的也是这一种模式。服务器端指的就是所有App共用的系统服务，比如我们这里提到的ActivityManagerService，和前面提到的PackageManagerService、WindowManagerService等等，这些基础的系统服务是被所有的App公用的，当某个App想实现某个操作的时候，要告诉这些系统服务，比如你想打开一个App，那么我们知道了包名和MainActivity类名之后就可以打开\n\n``` java\nIntent intent = new Intent(Intent.ACTION_MAIN);  \nintent.addCategory(Intent.CATEGORY_LAUNCHER);\nComponentName cn = new ComponentName(packageName, className);\nintent.setComponent(cn);  \nstartActivity(intent);\n```\n\n但是，我们的App通过调用startActivity()并不能直接打开另外一个App，这个方法会通过一系列的调用，最后还是告诉AMS说：“我要打开这个App，我知道他的住址和名字，你帮我打开吧！”所以是AMS来通知zygote进程来fork一个新进程，来开启我们的目标App的。这就像是浏览器想要打开一个超链接一样，浏览器把网页地址发送给服务器，然后还是服务器把需要的资源文件发送给客户端的。\n\n知道了Android Framework的客户端服务器架构之后，我们还需要了解一件事情，那就是我们的App和AMS(SystemServer进程)还有zygote进程分属于三个独立的进程，他们之间如何通信呢？\nApp与AMS通过Binder进行IPC通信，AMS(SystemServer进程)与zygote通过Socket进行IPC通信。\n那么AMS有什么用呢？在前面我们知道了，如果想打开一个App的话，需要AMS去通知zygote进程，除此之外，其实所有的Activity的开启、暂停、关闭都需要AMS来控制，所以我们说，AMS负责系统中所有Activity的生命周期。\n在Android系统中，任何一个Activity的启动都是由AMS和应用程序进程（主要是ActivityThread）相互配合来完成的。AMS服务统一调度系统中所有进程的Activity启动，而每个Activity的启动过程则由其所属的进程具体来完成。\n\n###### Launcher\n\n当我们点击手机桌面上的图标的时候，App就由Launcher开始启动了。Launcher本质上也是一个应用程序，和我们的App一样，也是继承自Activity，系统源码可以在这里看 http://androidxref.com/8.0.0_r4/xref/packages/apps/Launcher3/src/com/android/launcher3/Launcher.java\n``` java\nView createShortcut(int layoutResId, ViewGroup parent, ShortcutInfo info) {\n        BubbleTextView favorite = (BubbleTextView) mInflater.inflate(layoutResId, parent, false);\n        favorite.applyFromShortcutInfo(info, mIconCache);\n        favorite.setOnClickListener(this);\n        return favorite;\n}\n```\n创建图标并设置点击监听\n``` java\n/**\n     *\n     * Launches the intent referred by the clicked shortcut.\n     * @param v The view representing the clicked shortcut.\n     */\n    public void onClick(View v) {\n        // Make sure that rogue clicks don't get through while allapps is launching, or after the\n        // view has detached (it's possible for this to happen if the view is removed mid touch).\n        if (v.getWindowToken() == null) {\n            return;\n        }\n\n        if (!mWorkspace.isFinishedSwitchingState()) {\n            return;\n        }\n\n        Object tag = v.getTag();\n        if (tag instanceof ShortcutInfo) {\n            // Open shortcut\n            final Intent intent = ((ShortcutInfo) tag).intent;\n            int[] pos = new int[2];\n            v.getLocationOnScreen(pos);\n            intent.setSourceBounds(new Rect(pos[0], pos[1],\n                    pos[0] + v.getWidth(), pos[1] + v.getHeight()));\n\n            boolean success = startActivitySafely(v, intent, tag);\n\n            if (success && v instanceof BubbleTextView) {\n                mWaitingForResume = (BubbleTextView) v;\n                mWaitingForResume.setStayPressed(true);\n            }\n        } else if (tag instanceof FolderInfo) {\n            if (v instanceof FolderIcon) {\n                FolderIcon fi = (FolderIcon) v;\n                handleFolderClick(fi);\n            }\n        } else if (v == mAllAppsButton) {\n            if (isAllAppsVisible()) {\n                showWorkspace(true);\n            } else {\n                onClickAllAppsButton(v);\n            }\n        }\n    }\n\n```\n从上面可以看到，在桌面上点击快捷图标的时候，会调用\n``` java\nstartActivitySafely(v, intent, tag);\n```\n具体代码就不抄了，看一下上面的链接中的源码就好，在该方法中调用了`startActivity(v, intent, tag)`，这里会调用Activity.startActivity(intent, opts.toBundle())，这个方法熟悉吗？这就是我们经常用到的Activity.startActivity(Intent)的重载函数。而且由于设置了\n``` java\nintent.addFlags(Intent.FLAG_ACTIVITY_NEW_TASK);\n```\n所以这个Activity会添加到一个新的Task栈中，而且，startActivity()调用的其实是startActivityForResult()这个方法。\n所以现在明确了，Launcher中开启一个App，其实和我们在Activity中直接startActivity()基本一样，都是调用了Activity.startActivityForResult()。\n\n###### Instrumentation\n每个Activity都持有Instrumentation对象的一个引用，但是整个进程只会存在一个Instrumentation对象。当startActivityForResult()调用之后，实际上还是调用了mInstrumentation.execStartActivity().\n下面是mInstrumetation.execStartActivity()的实现\n``` java\npublic ActivityResult execStartActivity(\n            Context who, IBinder contextThread, IBinder token, Activity target,\n            Intent intent, int requestCode, Bundle options) {\n        IApplicationThread whoThread = (IApplicationThread) contextThread;\n        Uri referrer = target != null ? target.onProvideReferrer() : null;\n        if (referrer != null) {\n            intent.putExtra(Intent.EXTRA_REFERRER, referrer);\n        }\n        if (mActivityMonitors != null) {\n            synchronized (mSync) {\n                final int N = mActivityMonitors.size();\n                for (int i=0; i<N; i++) {\n                    final ActivityMonitor am = mActivityMonitors.get(i);\n                    if (am.match(who, null, intent)) {\n                        am.mHits++;\n                        if (am.isBlocking()) {\n                            return requestCode >= 0 ? am.getResult() : null;\n                        }\n                        break;\n                    }\n                }\n            }\n        }\n        try {\n            intent.migrateExtraStreamToClipData();\n            intent.prepareToLeaveProcess();\n            int result = ActivityManagerNative.getDefault()\n                .startActivity(whoThread, who.getBasePackageName(), intent,\n                        intent.resolveTypeIfNeeded(who.getContentResolver()),\n                        token, target != null ? target.mEmbeddedID : null,\n                        requestCode, 0, null, options);\n            checkStartActivityResult(result, intent);\n        } catch (RemoteException e) {\n            throw new RuntimeException(\"Failure from system\", e);\n        }\n        return null;\n    }\n\n```\n这里的 ActivityManagerNative.getDefault 返回ActivityManagerService的远程接口，即 ActivityManagerProxy 接口，有人可能会问了为什么会是ActivityManagerProxy，这就涉及到Binder通信了，这里不再展开。通过Binder驱动程序， ActivityManagerProxy 与AMS服务通信，则实现了跨进程到System进程。\n\n``` java\n /**\n     * Retrieve the system's default/global activity manager.\n     */\n    static public IActivityManager getDefault() {\n        return gDefault.get();\n    }\n\n    private static final Singleton<IActivityManager> gDefault = new Singleton<IActivityManager>() {\n        protected IActivityManager create() {\n            IBinder b = ServiceManager.getService(\"activity\");\n            if (false) {\n                Log.v(\"ActivityManager\", \"default service binder = \" + b);\n            }\n            IActivityManager am = asInterface(b);\n            if (false) {\n                Log.v(\"ActivityManager\", \"default service = \" + am);\n            }\n            return am;\n        }\n    };\n\n    /**\n     * Cast a Binder object into an activity manager interface, generating\n     * a proxy if needed.\n     */\n    static public IActivityManager asInterface(IBinder obj) {\n        if (obj == null) {\n            return null;\n        }\n        IActivityManager in =\n            (IActivityManager)obj.queryLocalInterface(descriptor);\n        if (in != null) {\n            return in;\n        }\n\n        return new ActivityManagerProxy(obj);\n    }\n```\n###### AMS响应Launcher进程请求\n至此，点击桌面图标调用startActivity()，终于把数据和要开启Activity的请求发送到了AMS了,AMS收到startActivity的请求之后，会按照如下的方法链进行调用：\n``` java\n@Override\n    public final int startActivity(IApplicationThread caller, String callingPackage,\n            Intent intent, String resolvedType, IBinder resultTo, String resultWho, int requestCode,\n            int startFlags, ProfilerInfo profilerInfo, Bundle options) {\n        return startActivityAsUser(caller, callingPackage, intent, resolvedType, resultTo,\n            resultWho, requestCode, startFlags, profilerInfo, options,\n            UserHandle.getCallingUserId());\n    }\n\n    @Override\n    public final int startActivityAsUser(IApplicationThread caller, String callingPackage,\n            Intent intent, String resolvedType, IBinder resultTo, String resultWho, int requestCode,\n            int startFlags, ProfilerInfo profilerInfo, Bundle options, int userId) {\n        enforceNotIsolatedCaller(\"startActivity\");\n        userId = handleIncomingUser(Binder.getCallingPid(), Binder.getCallingUid(), userId,\n                false, ALLOW_FULL_ONLY, \"startActivity\", null);\n        // TODO: Switch to user app stacks here.\n        return mStackSupervisor.startActivityMayWait(caller, -1, callingPackage, intent,\n                resolvedType, null, null, resultTo, resultWho, requestCode, startFlags,\n                profilerInfo, null, null, options, false, userId, null, null);\n    }\n```\n这里又出现了一个`mStackSupervisor`，定义是这么说的\n``` java\n/** Run all ActivityStacks through this */\n    ActivityStackSupervisor mStackSupervisor;\n\n```\n在`mStackSupervisor.startActivityMayWait()`方法中又调用了`startActivityLocked()`方法，接着调用了`startActivityUncheckedLocked()`方法，在这个方法中一大堆眼花缭乱的判断，最终调用了`targetStack.startActivityLocked(r, newTask, doResume, keepCurTransition, options)`方法，然后调用了`mStackSupervisor.resumeTopActivitiesLocked(this, r, options)`方法，然后调用`result = targetStack.resumeTopActivityLocked(target, targetOptions)`方法，调用`result = resumeTopActivityInnerLocked(prev, options)`方法，在这个方法里，prev.app为记录启动Lancher进程的ProcessRecord，prev.app.thread为Lancher进程的远程调用接口IApplicationThead，所以可以调用prev.app.thread.schedulePauseActivity，到Lancher进程暂停指定Activity。至此，AMS对Launcher的请求已经响应，这是我们发现又通过Binder通信回调至Launcher进程\n\n######  Launcher进程挂起Launcher，再次通知AMS\n\n看一下怎么挂起Launcher的,在ActivityThread中：\n``` java\nprivate void handlePauseActivity(IBinder token, boolean finished,\n            boolean userLeaving, int configChanges, boolean dontReport) {\n        ActivityClientRecord r = mActivities.get(token);\n        if (r != null) {\n            //Slog.v(TAG, \"userLeaving=\" + userLeaving + \" handling pause of \" + r);\n            if (userLeaving) {\n                performUserLeavingActivity(r);\n            }\n\n            r.activity.mConfigChangeFlags |= configChanges;\n            performPauseActivity(token, finished, r.isPreHoneycomb());\n\n            // Make sure any pending writes are now committed.\n            if (r.isPreHoneycomb()) {\n                QueuedWork.waitToFinish();\n            }\n\n            // Tell the activity manager we have paused.\n            if (!dontReport) {\n                try {\n                    ActivityManagerNative.getDefault().activityPaused(token);\n                } catch (RemoteException ex) {\n                }\n            }\n            mSomeActivitiesChanged = true;\n        }\n    }\n```\n这部分Launcher的ActivityThread处理页面Paused并且再次通过ActivityManagerProxy通知AMS。\n\n###### AMS创建新的进程\n\n创建新进程的时候，AMS会保存一个ProcessRecord信息，如果应用程序中的AndroidManifest.xml配置文件中，我们没有指定Application标签的process属性，系统就会默认使用package的名称。每一个应用程序都有自己的uid，因此，这里uid + process的组合就可以为每一个应用程序创建一个ProcessRecord。\n在`ActivityManagerService`中，\n``` java\nprivate final void startProcessLocked(ProcessRecord app, String hostingType,\n            String hostingNameStr, String abiOverride, String entryPoint, String[] entryPointArgs) {\n        long startTime = SystemClock.elapsedRealtime();\n        ......\n        // Start the process.  It will either succeed and return a result containing\n            // the PID of the new process, or else throw a RuntimeException.\n            boolean isActivityProcess = (entryPoint == null);\n            if (entryPoint == null) entryPoint = \"android.app.ActivityThread\";\n            Trace.traceBegin(Trace.TRACE_TAG_ACTIVITY_MANAGER, \"Start proc: \" +\n                    app.processName);\n            checkTime(startTime, \"startProcess: asking zygote to start proc\");\n            Process.ProcessStartResult startResult = Process.start(entryPoint,\n                    app.processName, uid, uid, gids, debugFlags, mountExternal,\n                    app.info.targetSdkVersion, app.info.seinfo, requiredAbi, instructionSet,\n                    app.info.dataDir, entryPointArgs);\n            checkTime(startTime, \"startProcess: returned from zygote!\");\n            Trace.traceEnd(Trace.TRACE_TAG_ACTIVITY_MANAGER);\n\n            if (app.isolated) {\n                mBatteryStatsService.addIsolatedUid(app.uid, app.info.uid);\n            }\n            mBatteryStatsService.noteProcessStart(app.processName, app.info.uid);\n            checkTime(startTime, \"startProcess: done updating battery stats\");\n```\n这里主要是调用Process.start接口来创建一个新的进程，新的进程会导入android.app.ActivityThread类，并且执行它的main函数，这就是每一个应用程序都有一个ActivityThread实例来对应的原因。\n\n###### 应用进程初始化\n来看Activity的main函数，这里绑定了主线程的Looper，并进入消息循环，大家应该知道，整个Android系统是消息驱动的，这也是为什么主线程默认绑定Looper的原因：\n``` java\npublic static void main(String[] args) {\n        Trace.traceBegin(Trace.TRACE_TAG_ACTIVITY_MANAGER, \"ActivityThreadMain\");\n        SamplingProfilerIntegration.start();\n\n        // CloseGuard defaults to true and can be quite spammy.  We\n        // disable it here, but selectively enable it later (via\n        // StrictMode) on debug builds, but using DropBox, not logs.\n        CloseGuard.setEnabled(false);\n\n        Environment.initForCurrentUser();\n\n        // Set the reporter for event logging in libcore\n        EventLogger.setReporter(new EventLoggingReporter());\n\n        AndroidKeyStoreProvider.install();\n\n        // Make sure TrustedCertificateStore looks in the right place for CA certificates\n        final File configDir = Environment.getUserConfigDirectory(UserHandle.myUserId());\n        TrustedCertificateStore.setDefaultUserDirectory(configDir);\n\n        Process.setArgV0(\"<pre-initialized>\");\n\n        Looper.prepareMainLooper();\n\n        ActivityThread thread = new ActivityThread();\n        thread.attach(false);\n\n        if (sMainThreadHandler == null) {\n            sMainThreadHandler = thread.getHandler();\n        }\n\n        if (false) {\n            Looper.myLooper().setMessageLogging(new\n                    LogPrinter(Log.DEBUG, \"ActivityThread\"));\n        }\n\n        // End of event ActivityThreadMain.\n        Trace.traceEnd(Trace.TRACE_TAG_ACTIVITY_MANAGER);\n        Looper.loop();\n\n        throw new RuntimeException(\"Main thread loop unexpectedly exited\");\n    }\n```\nattach函数最终调用了ActivityManagerService的远程接口ActivityManagerProxy的attachApplication函数，传入的参数是mAppThread，这是一个ApplicationThread类型的Binder对象，它的作用是AMS与应用进程进行进程间通信的。\n将进程和指定的Application绑定起来。这个是通过上节的ActivityThread对象中调用bindApplication()方法完成的。该方法发送一个BIND_APPLICATION的消息到消息队列中, 最终通过handleBindApplication()方法处理该消息. 然后调用makeApplication()方法来加载App的classes到内存中。\n\n###### 在AMS中注册应用进程，启动栈顶页面\n\nmMainStack.topRunningActivityLocked(null)从堆栈顶端取出要启动的Activity，并在realStartActivityLockedhan函数中通过ApplicationThreadProxy调回App进程启动页面。\n在`ActivityStackSupervisor`中\n``` java\nfinal boolean realStartActivityLocked(ActivityRecord r,\n            ProcessRecord app, boolean andResume, boolean checkConfig)\n            throws RemoteException {\n                    app.thread.scheduleLaunchActivity(new Intent(r.intent), r.appToken,\n                    System.identityHashCode(r), r.info, new Configuration(mService.mConfiguration),\n                    new Configuration(stack.mOverrideConfig), r.compat, r.launchedFromPackage,\n                    task.voiceInteractor, app.repProcState, r.icicle, r.persistentState, results,\n                    newIntents, !andResume, mService.isNextTransitionForward(), profilerInfo);\n            }\n```\n它会调用application线程对象中的scheduleLaunchActivity()发送一个LAUNCH_ACTIVITY消息到消息队列中, 通过 handleLaunchActivity()来处理该消息。在 handleLaunchActivity()通过performLaunchActiivty()方法回调Activity的onCreate()方法和onStart()方法，然后通过handleResumeActivity()方法，回调Activity的onResume()方法，而后会通知AMS该MainActivity已经处于resume状态最终显示Activity界面。\n至此，整个启动流程告一段落。\n\n\n最后：\n###### 一个App的程序入口到底是什么？\n是ActivityThread.main()。\n\n###### 整个App的主线程的消息循环是在哪里创建的？\n是在ActivityThread初始化的时候，就已经创建消息循环了，所以在主线程里面创建Handler不需要指定Looper，而如果在其他线程使用Handler，则需要单独使用Looper.prepare()和Looper.loop()创建消息循环。可以看ActivityThread的main方法\n\n###### Application是在什么时候创建的？onCreate()什么时候调用的？\n也是在ActivityThread.main()的时候，就是在thread.attach(false)的时候。\n\n``` java\nif (!system) {\n            ViewRootImpl.addFirstDrawHandler(new Runnable() {\n                @Override\n                public void run() {\n                    ensureJitEnabled();\n                }\n            });\n            android.ddm.DdmHandleAppName.setAppName(\"<pre-initialized>\",\n                                                    UserHandle.myUserId());\n            RuntimeInit.setApplicationObject(mAppThread.asBinder());\n            final IActivityManager mgr = ActivityManagerNative.getDefault();\n            try {\n                mgr.attachApplication(mAppThread);\n            } catch (RemoteException ex) {\n                // Ignore\n            }\n}\n```\n这里需要关注的就是mgr.attachApplication(mAppThread)，这个就会通过Binder调用到AMS里面对应的方法:\n``` java\n    @Override\n    public final void attachApplication(IApplicationThread thread) {\n        synchronized (this) {\n            int callingPid = Binder.getCallingPid();\n            final long origId = Binder.clearCallingIdentity();\n            attachApplicationLocked(thread, callingPid);\n            Binder.restoreCallingIdentity(origId);\n        }\n    }\n```\n然后调用的就是`private final boolean attachApplicationLocked(IApplicationThread thread,int pid)`方法，thread是IApplicationThread，实际上就是ApplicationThread在服务端的代理类ApplicationThreadProxy，然后又通过IPC就会调用到ApplicationThread的对应方法。这个方法里面又调用了`sendMessage()`，里面有函数的编号H.BIND_APPLICATION，然后这个Messge会被H这个Handler处理:\n``` java\nprivate class H extends Handler {\n\n    public static final int BIND_APPLICATION        = 110;\n    case BIND_APPLICATION:\n                    Trace.traceBegin(Trace.TRACE_TAG_ACTIVITY_MANAGER, \"bindApplication\");\n                    AppBindData data = (AppBindData)msg.obj;\n                    handleBindApplication(data);\n                    Trace.traceEnd(Trace.TRACE_TAG_ACTIVITY_MANAGER);\n                    break;\n}\n```\n然后在`handleBindApplication(data)`方法中\n``` java\n try {\n      java.lang.ClassLoader cl = instrContext.getClassLoader();\n      mInstrumentation = (Instrumentation)cl.loadClass(data.instrumentationName.getClassName()).newInstance();\n} catch (Exception e) {\n        throw new RuntimeException(\"Unable to instantiate instrumentation \"+ data.instrumentationName + \": \" + e.toString(), e);\n\n        ......\n         // Do this after providers, since instrumentation tests generally start their\n            // test thread at this point, and we don't want that racing.\n            try {\n                mInstrumentation.onCreate(data.instrumentationArgs);\n            }\n            catch (Exception e) {\n                throw new RuntimeException(\n                    \"Exception thrown in onCreate() of \"\n                    + data.instrumentationName + \": \" + e.toString(), e);\n            }\n\n            try {\n                mInstrumentation.callApplicationOnCreate(app);\n            } catch (Exception e) {\n                if (!mInstrumentation.onException(app, e)) {\n                    throw new RuntimeException(\n                        \"Unable to create application \" + app.getClass().getName()\n                        + \": \" + e.toString(), e);\n                }\n            }\n        } finally {\n            StrictMode.setThreadPolicy(savedPolicy);\n        }\n}\n```\n不同的版本代码不尽相同，但是基本逻辑不会变。\n参考、抄袭的链接如下：\nhttps://blog.csdn.net/bfboys/article/details/52564531\nhttps://www.jianshu.com/p/a72c5ccbd150\nhttps://www.jianshu.com/p/6037f6fda285\nhttps://www.jianshu.com/p/a72c5ccbd150\n\n----\n以上\n\n\n","source":"_posts/Activity启动模式，启动过程.md","raw":"---\ntitle: Activity启动模式，启动过程\ndate: 2018-07-26 14:20:07\ntags: [Android,面试]\nkeywords: 启动模式,启动过程,Intent匹配规则,App启动流程\n---\n面试总结，关于Activity启动模式、启动过程，Intent匹配规则、App启动流程等\n<!--more-->\n##### 启动模式：\n* standard：标准模式，这也是系统的默认模式。每次启动一个Activity都会重新创建一个新的实例，不管这个实例是否已经存在。\n* singleTop：栈顶复用模式。在这种模式下，如果新Activity已经位于任务栈的栈顶，那么此Activity不会被重新创建，同时它的onNewIntent方法会被回调，通过此方法的参数我们可以取出当前请求的信息。需要注意的是，这个Activity的onCreate、onStart不会被系统调用，因为它并没有发生改变。如果新Activity的实例已存在但不是位于栈顶，那么新Activity仍然会重新重建。\n* singleTask：栈内复用模式。这是一种单实例模式，在这种模式下，只要Activity在一个栈中存在，那么多次启动此Activity都不会重新创建实例，和singleTop一样，系统也会回调其onNewIntent。\n* singleInstance：单实例模式。这是一种加强的singleTask模式，它除了具有singleTask模式的所有特性外，还加强了一点，那就是具有此种模式的Activity只能单独地位于一个任务栈中，\n\n还有一个参数 `TaskAffinity`,这个参数标识了一个Activity所需要的任务栈的名字，默认情况下，所有Activity所需的任务栈的名字为应用的包名。当然，我们可以为每个Activity都单独指定TaskAffinity属性，这个属性值必须不能和包名相同，否则就相当于没有指定。TaskAffinity属性主要和singleTask启动模式或者allowTaskReparenting属性配对使用，在其他情况下没有意义。\n还有Activity中能够影响启动模式、运行状态的标记位：\n\n** FLAG_ACTIVITY_NEW_TASK **\n这个标记位的作用是为Activity指定“singleTask”启动模式，其效果和在XML中指定该启动模式相同。\n** FLAG_ACTIVITY_SINGLE_TOP **\n这个标记位的作用是为Activity指定“singleTop”启动模式，其效果和在XML中指定该启动模式相同。\n** FLAG_ACTIVITY_CLEAR_TOP **\n具有此标记位的Activity，当它启动时，在同一个任务栈中所有位于它上面的Activity都要出栈。这个模式一般需要和FLAG_ACTIVITY_NEW_TASK配合使用，在这种情况下，被启动Activity的实例如果已经存在，那么系统会调用它的onNewIntent。如果被启动的Activity采用standard模式启动，那么它连同它之上的Activity都要出栈，系统会创建新的Activity实例并放入栈顶。通过1.2.1节中的分析可以知道，singleTask启动模式默认就具有此标记位的效果。\n** FLAG_ACTIVITY_EXCLUDE_FROM_RECENTS **\n具有这个标记的Activity不会出现在历史Activity的列表中，当某些情况下我们不希望用户通过历史列表回到我们的Activity的时候这个标记比较有用。它等同于在XML中指定Activity的属性android:excludeFromRecents=\"true\"。\n\n##### Intent匹配规则\n启动Activity分为两种，显式调用和隐式调用。显式调用需要明确地指定被启动对象的组件信息，包括包名和类名，而隐式调用则不需要明确指定组件信息。原则上一个Intent不应该既是显式调用又是隐式调用，如果二者\n共存的话以显式调用为主。显式调用很简单，这里主要介绍一下隐式调用。隐式调用需要Intent能够匹配目标组件的IntentFilter中所设置的过滤信息，如果不匹配将无法启动目标Activity。\n为了匹配过滤列表，需要同时匹配过滤列表中的action、category、data信息，否则匹配失败。一个过滤列表中的action、category和data可以有多个，所有的action、category、data分别构成不同类别，同一类别的信息共同约束当前类别的匹配过程。只有一个Intent同时匹配action类别、category类别、data类别才算完全匹配，只有完全匹配才能成功启动目标Activity。另外一点，一个Activity中可以有多个intent-filter，一个Intent只要能匹配任何一组intent-filter即可成功启动对应的Activity。\n\n* action的匹配规则\naction是一个字符串，系统预定义了一些action，同时我们也可以在应用中定义自己的action。action的匹配规则是Intent中的action必须能够和过滤规则中的action匹配，这里说的匹配是指action的字符串值完全一样。一个过滤规则中可以有多个action，那么只要Intent中的action能够和过滤规则中的任何一个action相同即可匹配成功。需要注意的是，Intent中如果没有指定action，那么匹配失败。另外，action区分大小写，大小写不同字符串相同的action会匹配失败。\n* category的匹配规则\ncategory是一个字符串，系统预定义了一些category，同时我们也可以在应用中定义自己的category。category的匹配规则和action不同，它要求Intent中如果含有category，那么所有的category都必须和过滤规则中的其中一个category相同。换句话说，Intent中如果出现了category，不管有几个category，对于每个category来说，它必须是过滤规则中已经定义了的category。当然，Intent中可以没有category，如果没有category的话，按照上面的描述，这个Intent仍然可以匹配成功。这里要注意下它和action匹配过程的不同，action是要求Intent中必须有一个action且必须能够和过滤规则中的某个action相同，而category要求\nIntent可以没有category，但是如果你一旦有category，不管有几个，每个都要能够和过滤规则中的任何一个category相同。\n* data的匹配规则\ndata的匹配规则和action类似，如果过滤规则中定义了data，那么Intent中必须也要定义可匹配的data。在介绍data的匹配规则之前，我们需要先了解一下data的结构，因为data稍微有些复杂\n``` xml\n<data   android:scheme=\"string\"\n        android:host=\"string\"\n        android:port=\"string\"\n        android:path=\"string\"\n        android:pathPattern=\"string\"\n        android:pathPrefix=\"string\"\n        android:mimeType=\"string\" />\n```\ndata由两部分组成，mimeType和URI。mimeType指媒体类型，比如image/jpeg、audio/mpeg4-generic和video/*等，可以表示图片、文本、视频等不同的媒体格式，而URI中包含的数据就比较多了，下面是URI的结构：\n` <scheme>://<host>:<port>/[<path>|<pathPrefix>|<pathPattern>] `\n有如下过滤规则\n\n` <data android:mimeType=\"image/*\" /> `\n这种规则指定了媒体类型为所有类型的图片，那么Intent中的mimeType属性必须为“image/*”才能匹配，这种情况下虽然过滤规则没有指定URI，但是却有默认值，URI的默认值为content和file。也就是说，虽然没有指定URI，但是Intent中的URI部分的schema必须为content或者file才能匹配，这点是需要尤其注意的。为了匹配上面中规则，我们可以写出如下示例\n`intent.setDataAndType(Uri.parse(\"file://abc\"),\"image/png\")。`\n另外，如果要为Intent指定完整的data，必须要调用setDataAndType方法，不能先调用setData再调用setType，因为这两个方法彼此会清除对方的值。\n最后，当我们通过隐式方式启动一个Activity的时候，可以做一下判断，看是否有Activity能够匹配我们的隐式Intent，如果不做判断就有可能出现上述的错误了。判断方法有两种：采用PackageManager的resolveActivity方法或者Intent的resolveActivity方法，如果它们找不到匹配的Activity就会返回null，我们通过判断返回值就可以规避上述错误了。另外，PackageManager还提供了queryIntentActivities方法，这个方法和resolveActivity方法不同的是：它不是返回最佳匹配的Activity信息而是返回所有成功匹配的Activity信息。\n``` java\npublic abstract List<ResolveInfo> queryIntentActivities(Intent intent,int flags);\npublic abstract ResolveInfo resolveActivity(Intent intent,int flags);\n```\n上述两个方法的第一个参数比较好理解，第二个参数需要注意，我们要使用MATCH_DEFAULT_ONLY这个标记位，这个标记位的含义是仅仅匹配那些在intent-filter中声明了\n`<category  android:name=\"android.intent.category.DEFAULT\"/>`这个category的Activity。使用这个标记位的意义在于，只要上述两个方法不返回null，那么startActivity一定可以成功。如果不用这个标记位，就可以把intent-filter中category不含DEFAULT的那些Activity给匹配出来，从而导致startActivity可能失败。因为不含有DEFAULT这个category的Activity是无法接收隐式Intent的。\n\n##### App启动过程\n\n1. 点击桌面App图标，Launch进程采用Binder IPC向system_server进程发起startActivity请求\n2. system_server收到请求后，向zygote进程发送创建进程请求。\n3. Zygote进程fork出新的子进程，即App进程。\n4. App进程通过Binder IPC向system_server进程发起attachApplication请求\n5. system_server进程在收到请求后，进行一系列的准备工作，再通过Binder IPC向App进程发送scheduleLaunchActivity请求。\n6. App进程的binder线程(ApplicationThread)在收到请求后，通过handler向主线程发送LAUNCH_ACTIVITY消息；\n7. 主线程在收到Message后，通过发射机制创建目标Activity，并回调Activity.onCreate()等方法；\n8. 到此，App便正式启动，开始进入Activity生命周期。\n\n** 涉及到的类 **\n\n* `Activity` startActivity方法的真正实现在Activity中。\n* `Instrumentation` 每一个应用程序只有一个Instrumentation对象，每个Activity内都有一个对该对象的引用。Instrumentation可以理解为应用进程的管家，ActivityThread要创建或暂停某个Activity时，都需要通过Instrumentation来进行具体的操作,用来辅助Activity完成启动Activity的过程。\n* `ActivityThread`（包含ApplicationThread + ApplicationThreadNative + IApplicationThread）：真正启动Activity的实现都在这里,应用的入口类，系统通过调用main函数，开启消息循环队列。ActivityThread所在线程被称为应用的主线程（UI线程）。与ActivityManagerServices配合，一起完成Activity的管理工作。\n* `ActivityManagerService` 简称AMS，服务端对象。AMS是Android中最核心的服务之一，主要负责系统中四大组件的启动、切换、调度及应用进程的管理和调度等工作，其职责与操作系统中的进程管理和调度模块相类似，因此它在Android中非常重要，它本身也是一个Binder的实现类。\n* `ActivityManagerProxy` AMS服务在当前进程的代理类，负责与AMS通信。\n* `ApplicationThread` 用来实现ActivityManagerService与ActivityThread之间的交互。在ActivityManagerService需要管理相关Application中的Activity的生命周期时，通过ApplicationThread的代理对象与ActivityThread通讯。\n* `ApplicationThreadProxy` 是ApplicationThread在服务器端的代理，负责和客户端的ApplicationThread通讯。AMS就是通过该代理与ActivityThread进行通信的。\n* `ActivityStack` Activity在AMS的栈管理，用来记录已经启动的Activity的先后关系，状态信息等。通过ActivityStack决定是否需要启动新的进程。\n* `ActivityRecord` ActivityStack的管理对象，每个Activity在AMS对应一个ActivityRecord，来记录Activity的状态以及其他的管理信息。其实就是服务器端的Activity对象的映像。\n* `TaskRecord` AMS抽象出来的一个“任务”的概念，是记录ActivityRecord的栈，一个“Task”包含若干个ActivityRecord。AMS用TaskRecord确保Activity启动和退出的顺序。如果你清楚Activity的4种launchMode，那么对这个概念应该不陌生。\n\n** 基本概念 **\n###### zygote\nAndroid是基于Linux系统的，而在Linux中，所有的进程都是由init进程直接或者是间接fork出来的，zygote进程也不例外。至于init进程怎么来的，可以搜一下Android系统启动过程。\n在Android系统里面，zygote是一个进程的名字。Android是基于Linux System的，当你的手机开机的时候，Linux的内核加载完成之后就会启动一个叫“init“的进程。在Linux System里面，所有的进程都是由init进程fork出来的，我们的zygote进程也不例外。\n我们都知道，每一个App其实都是\n* 一个单独的虚拟机\n* 一个单独的进程\n所以当系统里面的第一个zygote进程运行之后，在这之后再开启App，就相当于开启一个新的进程。而为了实现资源共用和更快的启动速度，Android系统开启新进程的方式，是通过fork第一个zygote进程实现的。所以说，除了第一个zygote进程，其他应用所在的进程都是zygote的子进程，\n\n###### SystemServer\n它也是个进程，而且是由zygote进程fork出来的。系统里面重要的服务都是在这个进程里面开启的，比如`ActivityManagerService`、`PackageManagerService`、`WindowManagerService` 等等。在zygote开启的时候，会调用ZygoteInit.main()进行初始化：\n\n``` java\n/**\n * Startup class for the zygote process.\n *\n * Pre-initializes some classes, and then waits for commands on a UNIX domain\n * socket. Based on these commands, forks off child processes that inherit\n * the initial state of the VM.\n *\n * Please see {@link ZygoteConnection.Arguments} for documentation on the\n * client protocol.\n *\n */\n```\n从注释上也可以看出这个\b类主要是为了初始化某些参数。比如\n``` java\nstatic void preload(TimingsTraceLog bootTimingsTraceLog) {\n        Log.d(TAG, \"begin preload\");\n        bootTimingsTraceLog.traceBegin(\"BeginIcuCachePinning\");\n        beginIcuCachePinning();\n        bootTimingsTraceLog.traceEnd(); // BeginIcuCachePinning\n        bootTimingsTraceLog.traceBegin(\"PreloadClasses\");\n        preloadClasses();\n        bootTimingsTraceLog.traceEnd(); // PreloadClasses\n        bootTimingsTraceLog.traceBegin(\"PreloadResources\");\n        preloadResources();\n        bootTimingsTraceLog.traceEnd(); // PreloadResources\n        Trace.traceBegin(Trace.TRACE_TAG_DALVIK, \"PreloadAppProcessHALs\");\n        nativePreloadAppProcessHALs();\n        Trace.traceEnd(Trace.TRACE_TAG_DALVIK);\n        Trace.traceBegin(Trace.TRACE_TAG_DALVIK, \"PreloadOpenGL\");\n        preloadOpenGL();\n        Trace.traceEnd(Trace.TRACE_TAG_DALVIK);\n        preloadSharedLibraries();\n        preloadTextResources();\n        // Ask the WebViewFactory to do any initialization that must run in the zygote process,\n        // for memory sharing purposes.\n        WebViewFactory.prepareWebViewInZygote();\n        endIcuCachePinning();\n        warmUpJcaProviders();\n        Log.d(TAG, \"end preload\");\n\n        sPreloadComplete = true;\n    }\n\n    public static void lazyPreload() {\n        Preconditions.checkState(!sPreloadComplete);\n        Log.i(TAG, \"Lazily preloading resources.\");\n\n        preload(new TimingsTraceLog(\"ZygoteInitTiming_lazy\", Trace.TRACE_TAG_DALVIK));\n    }\n```\n还有一些关键的方法`preloadSharedLibraries()`、`preloadOpenGL()`、`preloadTextResources()`、`preloadClasses()`、`preloadResources()`、`preloadDrawables()`、`preloadColorStateLists()` 等.还有一个\b`startSystemServer()`方法。\n\n###### ActivityManagerService\n简称AMS,服务端对象，负责系统中所有Activity生命周期。它的初始化时机很明确，就是在SystemServer进程开启的时候，就会初始化ActivityManagerService。具体情况\b可以看一下`SystemServer.java`类。\n经过上面这些步骤，我们的ActivityManagerService对象已经创建好了，并且完成了成员变量初始化。而且在这之前，调用createSystemContext()创建系统上下文的时候，也已经完成了mSystemContext和ActivityThread的创建。注意，这是系统进程开启时的流程，在这之后，会开启系统的Launcher程序，完成系统界面的加载与显示。\n\n###### 为什么说AMS是服务端对象\n\n其实服务器客户端的概念不仅仅存在于Web开发中，在Android的框架设计中，使用的也是这一种模式。服务器端指的就是所有App共用的系统服务，比如我们这里提到的ActivityManagerService，和前面提到的PackageManagerService、WindowManagerService等等，这些基础的系统服务是被所有的App公用的，当某个App想实现某个操作的时候，要告诉这些系统服务，比如你想打开一个App，那么我们知道了包名和MainActivity类名之后就可以打开\n\n``` java\nIntent intent = new Intent(Intent.ACTION_MAIN);  \nintent.addCategory(Intent.CATEGORY_LAUNCHER);\nComponentName cn = new ComponentName(packageName, className);\nintent.setComponent(cn);  \nstartActivity(intent);\n```\n\n但是，我们的App通过调用startActivity()并不能直接打开另外一个App，这个方法会通过一系列的调用，最后还是告诉AMS说：“我要打开这个App，我知道他的住址和名字，你帮我打开吧！”所以是AMS来通知zygote进程来fork一个新进程，来开启我们的目标App的。这就像是浏览器想要打开一个超链接一样，浏览器把网页地址发送给服务器，然后还是服务器把需要的资源文件发送给客户端的。\n\n知道了Android Framework的客户端服务器架构之后，我们还需要了解一件事情，那就是我们的App和AMS(SystemServer进程)还有zygote进程分属于三个独立的进程，他们之间如何通信呢？\nApp与AMS通过Binder进行IPC通信，AMS(SystemServer进程)与zygote通过Socket进行IPC通信。\n那么AMS有什么用呢？在前面我们知道了，如果想打开一个App的话，需要AMS去通知zygote进程，除此之外，其实所有的Activity的开启、暂停、关闭都需要AMS来控制，所以我们说，AMS负责系统中所有Activity的生命周期。\n在Android系统中，任何一个Activity的启动都是由AMS和应用程序进程（主要是ActivityThread）相互配合来完成的。AMS服务统一调度系统中所有进程的Activity启动，而每个Activity的启动过程则由其所属的进程具体来完成。\n\n###### Launcher\n\n当我们点击手机桌面上的图标的时候，App就由Launcher开始启动了。Launcher本质上也是一个应用程序，和我们的App一样，也是继承自Activity，系统源码可以在这里看 http://androidxref.com/8.0.0_r4/xref/packages/apps/Launcher3/src/com/android/launcher3/Launcher.java\n``` java\nView createShortcut(int layoutResId, ViewGroup parent, ShortcutInfo info) {\n        BubbleTextView favorite = (BubbleTextView) mInflater.inflate(layoutResId, parent, false);\n        favorite.applyFromShortcutInfo(info, mIconCache);\n        favorite.setOnClickListener(this);\n        return favorite;\n}\n```\n创建图标并设置点击监听\n``` java\n/**\n     *\n     * Launches the intent referred by the clicked shortcut.\n     * @param v The view representing the clicked shortcut.\n     */\n    public void onClick(View v) {\n        // Make sure that rogue clicks don't get through while allapps is launching, or after the\n        // view has detached (it's possible for this to happen if the view is removed mid touch).\n        if (v.getWindowToken() == null) {\n            return;\n        }\n\n        if (!mWorkspace.isFinishedSwitchingState()) {\n            return;\n        }\n\n        Object tag = v.getTag();\n        if (tag instanceof ShortcutInfo) {\n            // Open shortcut\n            final Intent intent = ((ShortcutInfo) tag).intent;\n            int[] pos = new int[2];\n            v.getLocationOnScreen(pos);\n            intent.setSourceBounds(new Rect(pos[0], pos[1],\n                    pos[0] + v.getWidth(), pos[1] + v.getHeight()));\n\n            boolean success = startActivitySafely(v, intent, tag);\n\n            if (success && v instanceof BubbleTextView) {\n                mWaitingForResume = (BubbleTextView) v;\n                mWaitingForResume.setStayPressed(true);\n            }\n        } else if (tag instanceof FolderInfo) {\n            if (v instanceof FolderIcon) {\n                FolderIcon fi = (FolderIcon) v;\n                handleFolderClick(fi);\n            }\n        } else if (v == mAllAppsButton) {\n            if (isAllAppsVisible()) {\n                showWorkspace(true);\n            } else {\n                onClickAllAppsButton(v);\n            }\n        }\n    }\n\n```\n从上面可以看到，在桌面上点击快捷图标的时候，会调用\n``` java\nstartActivitySafely(v, intent, tag);\n```\n具体代码就不抄了，看一下上面的链接中的源码就好，在该方法中调用了`startActivity(v, intent, tag)`，这里会调用Activity.startActivity(intent, opts.toBundle())，这个方法熟悉吗？这就是我们经常用到的Activity.startActivity(Intent)的重载函数。而且由于设置了\n``` java\nintent.addFlags(Intent.FLAG_ACTIVITY_NEW_TASK);\n```\n所以这个Activity会添加到一个新的Task栈中，而且，startActivity()调用的其实是startActivityForResult()这个方法。\n所以现在明确了，Launcher中开启一个App，其实和我们在Activity中直接startActivity()基本一样，都是调用了Activity.startActivityForResult()。\n\n###### Instrumentation\n每个Activity都持有Instrumentation对象的一个引用，但是整个进程只会存在一个Instrumentation对象。当startActivityForResult()调用之后，实际上还是调用了mInstrumentation.execStartActivity().\n下面是mInstrumetation.execStartActivity()的实现\n``` java\npublic ActivityResult execStartActivity(\n            Context who, IBinder contextThread, IBinder token, Activity target,\n            Intent intent, int requestCode, Bundle options) {\n        IApplicationThread whoThread = (IApplicationThread) contextThread;\n        Uri referrer = target != null ? target.onProvideReferrer() : null;\n        if (referrer != null) {\n            intent.putExtra(Intent.EXTRA_REFERRER, referrer);\n        }\n        if (mActivityMonitors != null) {\n            synchronized (mSync) {\n                final int N = mActivityMonitors.size();\n                for (int i=0; i<N; i++) {\n                    final ActivityMonitor am = mActivityMonitors.get(i);\n                    if (am.match(who, null, intent)) {\n                        am.mHits++;\n                        if (am.isBlocking()) {\n                            return requestCode >= 0 ? am.getResult() : null;\n                        }\n                        break;\n                    }\n                }\n            }\n        }\n        try {\n            intent.migrateExtraStreamToClipData();\n            intent.prepareToLeaveProcess();\n            int result = ActivityManagerNative.getDefault()\n                .startActivity(whoThread, who.getBasePackageName(), intent,\n                        intent.resolveTypeIfNeeded(who.getContentResolver()),\n                        token, target != null ? target.mEmbeddedID : null,\n                        requestCode, 0, null, options);\n            checkStartActivityResult(result, intent);\n        } catch (RemoteException e) {\n            throw new RuntimeException(\"Failure from system\", e);\n        }\n        return null;\n    }\n\n```\n这里的 ActivityManagerNative.getDefault 返回ActivityManagerService的远程接口，即 ActivityManagerProxy 接口，有人可能会问了为什么会是ActivityManagerProxy，这就涉及到Binder通信了，这里不再展开。通过Binder驱动程序， ActivityManagerProxy 与AMS服务通信，则实现了跨进程到System进程。\n\n``` java\n /**\n     * Retrieve the system's default/global activity manager.\n     */\n    static public IActivityManager getDefault() {\n        return gDefault.get();\n    }\n\n    private static final Singleton<IActivityManager> gDefault = new Singleton<IActivityManager>() {\n        protected IActivityManager create() {\n            IBinder b = ServiceManager.getService(\"activity\");\n            if (false) {\n                Log.v(\"ActivityManager\", \"default service binder = \" + b);\n            }\n            IActivityManager am = asInterface(b);\n            if (false) {\n                Log.v(\"ActivityManager\", \"default service = \" + am);\n            }\n            return am;\n        }\n    };\n\n    /**\n     * Cast a Binder object into an activity manager interface, generating\n     * a proxy if needed.\n     */\n    static public IActivityManager asInterface(IBinder obj) {\n        if (obj == null) {\n            return null;\n        }\n        IActivityManager in =\n            (IActivityManager)obj.queryLocalInterface(descriptor);\n        if (in != null) {\n            return in;\n        }\n\n        return new ActivityManagerProxy(obj);\n    }\n```\n###### AMS响应Launcher进程请求\n至此，点击桌面图标调用startActivity()，终于把数据和要开启Activity的请求发送到了AMS了,AMS收到startActivity的请求之后，会按照如下的方法链进行调用：\n``` java\n@Override\n    public final int startActivity(IApplicationThread caller, String callingPackage,\n            Intent intent, String resolvedType, IBinder resultTo, String resultWho, int requestCode,\n            int startFlags, ProfilerInfo profilerInfo, Bundle options) {\n        return startActivityAsUser(caller, callingPackage, intent, resolvedType, resultTo,\n            resultWho, requestCode, startFlags, profilerInfo, options,\n            UserHandle.getCallingUserId());\n    }\n\n    @Override\n    public final int startActivityAsUser(IApplicationThread caller, String callingPackage,\n            Intent intent, String resolvedType, IBinder resultTo, String resultWho, int requestCode,\n            int startFlags, ProfilerInfo profilerInfo, Bundle options, int userId) {\n        enforceNotIsolatedCaller(\"startActivity\");\n        userId = handleIncomingUser(Binder.getCallingPid(), Binder.getCallingUid(), userId,\n                false, ALLOW_FULL_ONLY, \"startActivity\", null);\n        // TODO: Switch to user app stacks here.\n        return mStackSupervisor.startActivityMayWait(caller, -1, callingPackage, intent,\n                resolvedType, null, null, resultTo, resultWho, requestCode, startFlags,\n                profilerInfo, null, null, options, false, userId, null, null);\n    }\n```\n这里又出现了一个`mStackSupervisor`，定义是这么说的\n``` java\n/** Run all ActivityStacks through this */\n    ActivityStackSupervisor mStackSupervisor;\n\n```\n在`mStackSupervisor.startActivityMayWait()`方法中又调用了`startActivityLocked()`方法，接着调用了`startActivityUncheckedLocked()`方法，在这个方法中一大堆眼花缭乱的判断，最终调用了`targetStack.startActivityLocked(r, newTask, doResume, keepCurTransition, options)`方法，然后调用了`mStackSupervisor.resumeTopActivitiesLocked(this, r, options)`方法，然后调用`result = targetStack.resumeTopActivityLocked(target, targetOptions)`方法，调用`result = resumeTopActivityInnerLocked(prev, options)`方法，在这个方法里，prev.app为记录启动Lancher进程的ProcessRecord，prev.app.thread为Lancher进程的远程调用接口IApplicationThead，所以可以调用prev.app.thread.schedulePauseActivity，到Lancher进程暂停指定Activity。至此，AMS对Launcher的请求已经响应，这是我们发现又通过Binder通信回调至Launcher进程\n\n######  Launcher进程挂起Launcher，再次通知AMS\n\n看一下怎么挂起Launcher的,在ActivityThread中：\n``` java\nprivate void handlePauseActivity(IBinder token, boolean finished,\n            boolean userLeaving, int configChanges, boolean dontReport) {\n        ActivityClientRecord r = mActivities.get(token);\n        if (r != null) {\n            //Slog.v(TAG, \"userLeaving=\" + userLeaving + \" handling pause of \" + r);\n            if (userLeaving) {\n                performUserLeavingActivity(r);\n            }\n\n            r.activity.mConfigChangeFlags |= configChanges;\n            performPauseActivity(token, finished, r.isPreHoneycomb());\n\n            // Make sure any pending writes are now committed.\n            if (r.isPreHoneycomb()) {\n                QueuedWork.waitToFinish();\n            }\n\n            // Tell the activity manager we have paused.\n            if (!dontReport) {\n                try {\n                    ActivityManagerNative.getDefault().activityPaused(token);\n                } catch (RemoteException ex) {\n                }\n            }\n            mSomeActivitiesChanged = true;\n        }\n    }\n```\n这部分Launcher的ActivityThread处理页面Paused并且再次通过ActivityManagerProxy通知AMS。\n\n###### AMS创建新的进程\n\n创建新进程的时候，AMS会保存一个ProcessRecord信息，如果应用程序中的AndroidManifest.xml配置文件中，我们没有指定Application标签的process属性，系统就会默认使用package的名称。每一个应用程序都有自己的uid，因此，这里uid + process的组合就可以为每一个应用程序创建一个ProcessRecord。\n在`ActivityManagerService`中，\n``` java\nprivate final void startProcessLocked(ProcessRecord app, String hostingType,\n            String hostingNameStr, String abiOverride, String entryPoint, String[] entryPointArgs) {\n        long startTime = SystemClock.elapsedRealtime();\n        ......\n        // Start the process.  It will either succeed and return a result containing\n            // the PID of the new process, or else throw a RuntimeException.\n            boolean isActivityProcess = (entryPoint == null);\n            if (entryPoint == null) entryPoint = \"android.app.ActivityThread\";\n            Trace.traceBegin(Trace.TRACE_TAG_ACTIVITY_MANAGER, \"Start proc: \" +\n                    app.processName);\n            checkTime(startTime, \"startProcess: asking zygote to start proc\");\n            Process.ProcessStartResult startResult = Process.start(entryPoint,\n                    app.processName, uid, uid, gids, debugFlags, mountExternal,\n                    app.info.targetSdkVersion, app.info.seinfo, requiredAbi, instructionSet,\n                    app.info.dataDir, entryPointArgs);\n            checkTime(startTime, \"startProcess: returned from zygote!\");\n            Trace.traceEnd(Trace.TRACE_TAG_ACTIVITY_MANAGER);\n\n            if (app.isolated) {\n                mBatteryStatsService.addIsolatedUid(app.uid, app.info.uid);\n            }\n            mBatteryStatsService.noteProcessStart(app.processName, app.info.uid);\n            checkTime(startTime, \"startProcess: done updating battery stats\");\n```\n这里主要是调用Process.start接口来创建一个新的进程，新的进程会导入android.app.ActivityThread类，并且执行它的main函数，这就是每一个应用程序都有一个ActivityThread实例来对应的原因。\n\n###### 应用进程初始化\n来看Activity的main函数，这里绑定了主线程的Looper，并进入消息循环，大家应该知道，整个Android系统是消息驱动的，这也是为什么主线程默认绑定Looper的原因：\n``` java\npublic static void main(String[] args) {\n        Trace.traceBegin(Trace.TRACE_TAG_ACTIVITY_MANAGER, \"ActivityThreadMain\");\n        SamplingProfilerIntegration.start();\n\n        // CloseGuard defaults to true and can be quite spammy.  We\n        // disable it here, but selectively enable it later (via\n        // StrictMode) on debug builds, but using DropBox, not logs.\n        CloseGuard.setEnabled(false);\n\n        Environment.initForCurrentUser();\n\n        // Set the reporter for event logging in libcore\n        EventLogger.setReporter(new EventLoggingReporter());\n\n        AndroidKeyStoreProvider.install();\n\n        // Make sure TrustedCertificateStore looks in the right place for CA certificates\n        final File configDir = Environment.getUserConfigDirectory(UserHandle.myUserId());\n        TrustedCertificateStore.setDefaultUserDirectory(configDir);\n\n        Process.setArgV0(\"<pre-initialized>\");\n\n        Looper.prepareMainLooper();\n\n        ActivityThread thread = new ActivityThread();\n        thread.attach(false);\n\n        if (sMainThreadHandler == null) {\n            sMainThreadHandler = thread.getHandler();\n        }\n\n        if (false) {\n            Looper.myLooper().setMessageLogging(new\n                    LogPrinter(Log.DEBUG, \"ActivityThread\"));\n        }\n\n        // End of event ActivityThreadMain.\n        Trace.traceEnd(Trace.TRACE_TAG_ACTIVITY_MANAGER);\n        Looper.loop();\n\n        throw new RuntimeException(\"Main thread loop unexpectedly exited\");\n    }\n```\nattach函数最终调用了ActivityManagerService的远程接口ActivityManagerProxy的attachApplication函数，传入的参数是mAppThread，这是一个ApplicationThread类型的Binder对象，它的作用是AMS与应用进程进行进程间通信的。\n将进程和指定的Application绑定起来。这个是通过上节的ActivityThread对象中调用bindApplication()方法完成的。该方法发送一个BIND_APPLICATION的消息到消息队列中, 最终通过handleBindApplication()方法处理该消息. 然后调用makeApplication()方法来加载App的classes到内存中。\n\n###### 在AMS中注册应用进程，启动栈顶页面\n\nmMainStack.topRunningActivityLocked(null)从堆栈顶端取出要启动的Activity，并在realStartActivityLockedhan函数中通过ApplicationThreadProxy调回App进程启动页面。\n在`ActivityStackSupervisor`中\n``` java\nfinal boolean realStartActivityLocked(ActivityRecord r,\n            ProcessRecord app, boolean andResume, boolean checkConfig)\n            throws RemoteException {\n                    app.thread.scheduleLaunchActivity(new Intent(r.intent), r.appToken,\n                    System.identityHashCode(r), r.info, new Configuration(mService.mConfiguration),\n                    new Configuration(stack.mOverrideConfig), r.compat, r.launchedFromPackage,\n                    task.voiceInteractor, app.repProcState, r.icicle, r.persistentState, results,\n                    newIntents, !andResume, mService.isNextTransitionForward(), profilerInfo);\n            }\n```\n它会调用application线程对象中的scheduleLaunchActivity()发送一个LAUNCH_ACTIVITY消息到消息队列中, 通过 handleLaunchActivity()来处理该消息。在 handleLaunchActivity()通过performLaunchActiivty()方法回调Activity的onCreate()方法和onStart()方法，然后通过handleResumeActivity()方法，回调Activity的onResume()方法，而后会通知AMS该MainActivity已经处于resume状态最终显示Activity界面。\n至此，整个启动流程告一段落。\n\n\n最后：\n###### 一个App的程序入口到底是什么？\n是ActivityThread.main()。\n\n###### 整个App的主线程的消息循环是在哪里创建的？\n是在ActivityThread初始化的时候，就已经创建消息循环了，所以在主线程里面创建Handler不需要指定Looper，而如果在其他线程使用Handler，则需要单独使用Looper.prepare()和Looper.loop()创建消息循环。可以看ActivityThread的main方法\n\n###### Application是在什么时候创建的？onCreate()什么时候调用的？\n也是在ActivityThread.main()的时候，就是在thread.attach(false)的时候。\n\n``` java\nif (!system) {\n            ViewRootImpl.addFirstDrawHandler(new Runnable() {\n                @Override\n                public void run() {\n                    ensureJitEnabled();\n                }\n            });\n            android.ddm.DdmHandleAppName.setAppName(\"<pre-initialized>\",\n                                                    UserHandle.myUserId());\n            RuntimeInit.setApplicationObject(mAppThread.asBinder());\n            final IActivityManager mgr = ActivityManagerNative.getDefault();\n            try {\n                mgr.attachApplication(mAppThread);\n            } catch (RemoteException ex) {\n                // Ignore\n            }\n}\n```\n这里需要关注的就是mgr.attachApplication(mAppThread)，这个就会通过Binder调用到AMS里面对应的方法:\n``` java\n    @Override\n    public final void attachApplication(IApplicationThread thread) {\n        synchronized (this) {\n            int callingPid = Binder.getCallingPid();\n            final long origId = Binder.clearCallingIdentity();\n            attachApplicationLocked(thread, callingPid);\n            Binder.restoreCallingIdentity(origId);\n        }\n    }\n```\n然后调用的就是`private final boolean attachApplicationLocked(IApplicationThread thread,int pid)`方法，thread是IApplicationThread，实际上就是ApplicationThread在服务端的代理类ApplicationThreadProxy，然后又通过IPC就会调用到ApplicationThread的对应方法。这个方法里面又调用了`sendMessage()`，里面有函数的编号H.BIND_APPLICATION，然后这个Messge会被H这个Handler处理:\n``` java\nprivate class H extends Handler {\n\n    public static final int BIND_APPLICATION        = 110;\n    case BIND_APPLICATION:\n                    Trace.traceBegin(Trace.TRACE_TAG_ACTIVITY_MANAGER, \"bindApplication\");\n                    AppBindData data = (AppBindData)msg.obj;\n                    handleBindApplication(data);\n                    Trace.traceEnd(Trace.TRACE_TAG_ACTIVITY_MANAGER);\n                    break;\n}\n```\n然后在`handleBindApplication(data)`方法中\n``` java\n try {\n      java.lang.ClassLoader cl = instrContext.getClassLoader();\n      mInstrumentation = (Instrumentation)cl.loadClass(data.instrumentationName.getClassName()).newInstance();\n} catch (Exception e) {\n        throw new RuntimeException(\"Unable to instantiate instrumentation \"+ data.instrumentationName + \": \" + e.toString(), e);\n\n        ......\n         // Do this after providers, since instrumentation tests generally start their\n            // test thread at this point, and we don't want that racing.\n            try {\n                mInstrumentation.onCreate(data.instrumentationArgs);\n            }\n            catch (Exception e) {\n                throw new RuntimeException(\n                    \"Exception thrown in onCreate() of \"\n                    + data.instrumentationName + \": \" + e.toString(), e);\n            }\n\n            try {\n                mInstrumentation.callApplicationOnCreate(app);\n            } catch (Exception e) {\n                if (!mInstrumentation.onException(app, e)) {\n                    throw new RuntimeException(\n                        \"Unable to create application \" + app.getClass().getName()\n                        + \": \" + e.toString(), e);\n                }\n            }\n        } finally {\n            StrictMode.setThreadPolicy(savedPolicy);\n        }\n}\n```\n不同的版本代码不尽相同，但是基本逻辑不会变。\n参考、抄袭的链接如下：\nhttps://blog.csdn.net/bfboys/article/details/52564531\nhttps://www.jianshu.com/p/a72c5ccbd150\nhttps://www.jianshu.com/p/6037f6fda285\nhttps://www.jianshu.com/p/a72c5ccbd150\n\n----\n以上\n\n\n","slug":"Activity启动模式，启动过程","published":1,"updated":"2018-08-04T04:43:47.170Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjl3vbtpz000cisdgacch2b91","content":"<p>面试总结，关于Activity启动模式、启动过程，Intent匹配规则、App启动流程等<br><a id=\"more\"></a></p>\n<h5 id=\"启动模式：\"><a href=\"#启动模式：\" class=\"headerlink\" title=\"启动模式：\"></a>启动模式：</h5><ul>\n<li>standard：标准模式，这也是系统的默认模式。每次启动一个Activity都会重新创建一个新的实例，不管这个实例是否已经存在。</li>\n<li>singleTop：栈顶复用模式。在这种模式下，如果新Activity已经位于任务栈的栈顶，那么此Activity不会被重新创建，同时它的onNewIntent方法会被回调，通过此方法的参数我们可以取出当前请求的信息。需要注意的是，这个Activity的onCreate、onStart不会被系统调用，因为它并没有发生改变。如果新Activity的实例已存在但不是位于栈顶，那么新Activity仍然会重新重建。</li>\n<li>singleTask：栈内复用模式。这是一种单实例模式，在这种模式下，只要Activity在一个栈中存在，那么多次启动此Activity都不会重新创建实例，和singleTop一样，系统也会回调其onNewIntent。</li>\n<li>singleInstance：单实例模式。这是一种加强的singleTask模式，它除了具有singleTask模式的所有特性外，还加强了一点，那就是具有此种模式的Activity只能单独地位于一个任务栈中，</li>\n</ul>\n<p>还有一个参数 <code>TaskAffinity</code>,这个参数标识了一个Activity所需要的任务栈的名字，默认情况下，所有Activity所需的任务栈的名字为应用的包名。当然，我们可以为每个Activity都单独指定TaskAffinity属性，这个属性值必须不能和包名相同，否则就相当于没有指定。TaskAffinity属性主要和singleTask启动模式或者allowTaskReparenting属性配对使用，在其他情况下没有意义。<br>还有Activity中能够影响启动模式、运行状态的标记位：</p>\n<p><strong> FLAG_ACTIVITY_NEW_TASK </strong><br>这个标记位的作用是为Activity指定“singleTask”启动模式，其效果和在XML中指定该启动模式相同。<br><strong> FLAG_ACTIVITY_SINGLE_TOP </strong><br>这个标记位的作用是为Activity指定“singleTop”启动模式，其效果和在XML中指定该启动模式相同。<br><strong> FLAG_ACTIVITY_CLEAR_TOP </strong><br>具有此标记位的Activity，当它启动时，在同一个任务栈中所有位于它上面的Activity都要出栈。这个模式一般需要和FLAG_ACTIVITY_NEW_TASK配合使用，在这种情况下，被启动Activity的实例如果已经存在，那么系统会调用它的onNewIntent。如果被启动的Activity采用standard模式启动，那么它连同它之上的Activity都要出栈，系统会创建新的Activity实例并放入栈顶。通过1.2.1节中的分析可以知道，singleTask启动模式默认就具有此标记位的效果。<br><strong> FLAG_ACTIVITY_EXCLUDE_FROM_RECENTS </strong><br>具有这个标记的Activity不会出现在历史Activity的列表中，当某些情况下我们不希望用户通过历史列表回到我们的Activity的时候这个标记比较有用。它等同于在XML中指定Activity的属性android:excludeFromRecents=”true”。</p>\n<h5 id=\"Intent匹配规则\"><a href=\"#Intent匹配规则\" class=\"headerlink\" title=\"Intent匹配规则\"></a>Intent匹配规则</h5><p>启动Activity分为两种，显式调用和隐式调用。显式调用需要明确地指定被启动对象的组件信息，包括包名和类名，而隐式调用则不需要明确指定组件信息。原则上一个Intent不应该既是显式调用又是隐式调用，如果二者<br>共存的话以显式调用为主。显式调用很简单，这里主要介绍一下隐式调用。隐式调用需要Intent能够匹配目标组件的IntentFilter中所设置的过滤信息，如果不匹配将无法启动目标Activity。<br>为了匹配过滤列表，需要同时匹配过滤列表中的action、category、data信息，否则匹配失败。一个过滤列表中的action、category和data可以有多个，所有的action、category、data分别构成不同类别，同一类别的信息共同约束当前类别的匹配过程。只有一个Intent同时匹配action类别、category类别、data类别才算完全匹配，只有完全匹配才能成功启动目标Activity。另外一点，一个Activity中可以有多个intent-filter，一个Intent只要能匹配任何一组intent-filter即可成功启动对应的Activity。</p>\n<ul>\n<li>action的匹配规则<br>action是一个字符串，系统预定义了一些action，同时我们也可以在应用中定义自己的action。action的匹配规则是Intent中的action必须能够和过滤规则中的action匹配，这里说的匹配是指action的字符串值完全一样。一个过滤规则中可以有多个action，那么只要Intent中的action能够和过滤规则中的任何一个action相同即可匹配成功。需要注意的是，Intent中如果没有指定action，那么匹配失败。另外，action区分大小写，大小写不同字符串相同的action会匹配失败。</li>\n<li>category的匹配规则<br>category是一个字符串，系统预定义了一些category，同时我们也可以在应用中定义自己的category。category的匹配规则和action不同，它要求Intent中如果含有category，那么所有的category都必须和过滤规则中的其中一个category相同。换句话说，Intent中如果出现了category，不管有几个category，对于每个category来说，它必须是过滤规则中已经定义了的category。当然，Intent中可以没有category，如果没有category的话，按照上面的描述，这个Intent仍然可以匹配成功。这里要注意下它和action匹配过程的不同，action是要求Intent中必须有一个action且必须能够和过滤规则中的某个action相同，而category要求<br>Intent可以没有category，但是如果你一旦有category，不管有几个，每个都要能够和过滤规则中的任何一个category相同。</li>\n<li>data的匹配规则<br>data的匹配规则和action类似，如果过滤规则中定义了data，那么Intent中必须也要定义可匹配的data。在介绍data的匹配规则之前，我们需要先了解一下data的结构，因为data稍微有些复杂<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">data</span>   <span class=\"attr\">android:scheme</span>=<span class=\"string\">\"string\"</span></span></div><div class=\"line\">        <span class=\"attr\">android:host</span>=<span class=\"string\">\"string\"</span></div><div class=\"line\">        <span class=\"attr\">android:port</span>=<span class=\"string\">\"string\"</span></div><div class=\"line\">        <span class=\"attr\">android:path</span>=<span class=\"string\">\"string\"</span></div><div class=\"line\">        <span class=\"attr\">android:pathPattern</span>=<span class=\"string\">\"string\"</span></div><div class=\"line\">        <span class=\"attr\">android:pathPrefix</span>=<span class=\"string\">\"string\"</span></div><div class=\"line\">        <span class=\"attr\">android:mimeType</span>=<span class=\"string\">\"string\"</span> /&gt;</div></pre></td></tr></table></figure>\n</li>\n</ul>\n<p>data由两部分组成，mimeType和URI。mimeType指媒体类型，比如image/jpeg、audio/mpeg4-generic和video/*等，可以表示图片、文本、视频等不同的媒体格式，而URI中包含的数据就比较多了，下面是URI的结构：<br><code>&lt;scheme&gt;://&lt;host&gt;:&lt;port&gt;/[&lt;path&gt;|&lt;pathPrefix&gt;|&lt;pathPattern&gt;]</code><br>有如下过滤规则</p>\n<p><code>&lt;data android:mimeType=&quot;image/*&quot; /&gt;</code><br>这种规则指定了媒体类型为所有类型的图片，那么Intent中的mimeType属性必须为“image/*”才能匹配，这种情况下虽然过滤规则没有指定URI，但是却有默认值，URI的默认值为content和file。也就是说，虽然没有指定URI，但是Intent中的URI部分的schema必须为content或者file才能匹配，这点是需要尤其注意的。为了匹配上面中规则，我们可以写出如下示例<br><code>intent.setDataAndType(Uri.parse(&quot;file://abc&quot;),&quot;image/png&quot;)。</code><br>另外，如果要为Intent指定完整的data，必须要调用setDataAndType方法，不能先调用setData再调用setType，因为这两个方法彼此会清除对方的值。<br>最后，当我们通过隐式方式启动一个Activity的时候，可以做一下判断，看是否有Activity能够匹配我们的隐式Intent，如果不做判断就有可能出现上述的错误了。判断方法有两种：采用PackageManager的resolveActivity方法或者Intent的resolveActivity方法，如果它们找不到匹配的Activity就会返回null，我们通过判断返回值就可以规避上述错误了。另外，PackageManager还提供了queryIntentActivities方法，这个方法和resolveActivity方法不同的是：它不是返回最佳匹配的Activity信息而是返回所有成功匹配的Activity信息。<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">abstract</span> List&lt;ResolveInfo&gt; <span class=\"title\">queryIntentActivities</span><span class=\"params\">(Intent intent,<span class=\"keyword\">int</span> flags)</span></span>;</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">abstract</span> ResolveInfo <span class=\"title\">resolveActivity</span><span class=\"params\">(Intent intent,<span class=\"keyword\">int</span> flags)</span></span>;</div></pre></td></tr></table></figure></p>\n<p>上述两个方法的第一个参数比较好理解，第二个参数需要注意，我们要使用MATCH_DEFAULT_ONLY这个标记位，这个标记位的含义是仅仅匹配那些在intent-filter中声明了<br><code>&lt;category  android:name=&quot;android.intent.category.DEFAULT&quot;/&gt;</code>这个category的Activity。使用这个标记位的意义在于，只要上述两个方法不返回null，那么startActivity一定可以成功。如果不用这个标记位，就可以把intent-filter中category不含DEFAULT的那些Activity给匹配出来，从而导致startActivity可能失败。因为不含有DEFAULT这个category的Activity是无法接收隐式Intent的。</p>\n<h5 id=\"App启动过程\"><a href=\"#App启动过程\" class=\"headerlink\" title=\"App启动过程\"></a>App启动过程</h5><ol>\n<li>点击桌面App图标，Launch进程采用Binder IPC向system_server进程发起startActivity请求</li>\n<li>system_server收到请求后，向zygote进程发送创建进程请求。</li>\n<li>Zygote进程fork出新的子进程，即App进程。</li>\n<li>App进程通过Binder IPC向system_server进程发起attachApplication请求</li>\n<li>system_server进程在收到请求后，进行一系列的准备工作，再通过Binder IPC向App进程发送scheduleLaunchActivity请求。</li>\n<li>App进程的binder线程(ApplicationThread)在收到请求后，通过handler向主线程发送LAUNCH_ACTIVITY消息；</li>\n<li>主线程在收到Message后，通过发射机制创建目标Activity，并回调Activity.onCreate()等方法；</li>\n<li>到此，App便正式启动，开始进入Activity生命周期。</li>\n</ol>\n<p><strong> 涉及到的类 </strong></p>\n<ul>\n<li><code>Activity</code> startActivity方法的真正实现在Activity中。</li>\n<li><code>Instrumentation</code> 每一个应用程序只有一个Instrumentation对象，每个Activity内都有一个对该对象的引用。Instrumentation可以理解为应用进程的管家，ActivityThread要创建或暂停某个Activity时，都需要通过Instrumentation来进行具体的操作,用来辅助Activity完成启动Activity的过程。</li>\n<li><code>ActivityThread</code>（包含ApplicationThread + ApplicationThreadNative + IApplicationThread）：真正启动Activity的实现都在这里,应用的入口类，系统通过调用main函数，开启消息循环队列。ActivityThread所在线程被称为应用的主线程（UI线程）。与ActivityManagerServices配合，一起完成Activity的管理工作。</li>\n<li><code>ActivityManagerService</code> 简称AMS，服务端对象。AMS是Android中最核心的服务之一，主要负责系统中四大组件的启动、切换、调度及应用进程的管理和调度等工作，其职责与操作系统中的进程管理和调度模块相类似，因此它在Android中非常重要，它本身也是一个Binder的实现类。</li>\n<li><code>ActivityManagerProxy</code> AMS服务在当前进程的代理类，负责与AMS通信。</li>\n<li><code>ApplicationThread</code> 用来实现ActivityManagerService与ActivityThread之间的交互。在ActivityManagerService需要管理相关Application中的Activity的生命周期时，通过ApplicationThread的代理对象与ActivityThread通讯。</li>\n<li><code>ApplicationThreadProxy</code> 是ApplicationThread在服务器端的代理，负责和客户端的ApplicationThread通讯。AMS就是通过该代理与ActivityThread进行通信的。</li>\n<li><code>ActivityStack</code> Activity在AMS的栈管理，用来记录已经启动的Activity的先后关系，状态信息等。通过ActivityStack决定是否需要启动新的进程。</li>\n<li><code>ActivityRecord</code> ActivityStack的管理对象，每个Activity在AMS对应一个ActivityRecord，来记录Activity的状态以及其他的管理信息。其实就是服务器端的Activity对象的映像。</li>\n<li><code>TaskRecord</code> AMS抽象出来的一个“任务”的概念，是记录ActivityRecord的栈，一个“Task”包含若干个ActivityRecord。AMS用TaskRecord确保Activity启动和退出的顺序。如果你清楚Activity的4种launchMode，那么对这个概念应该不陌生。</li>\n</ul>\n<p><strong> 基本概念 </strong></p>\n<h6 id=\"zygote\"><a href=\"#zygote\" class=\"headerlink\" title=\"zygote\"></a>zygote</h6><p>Android是基于Linux系统的，而在Linux中，所有的进程都是由init进程直接或者是间接fork出来的，zygote进程也不例外。至于init进程怎么来的，可以搜一下Android系统启动过程。<br>在Android系统里面，zygote是一个进程的名字。Android是基于Linux System的，当你的手机开机的时候，Linux的内核加载完成之后就会启动一个叫“init“的进程。在Linux System里面，所有的进程都是由init进程fork出来的，我们的zygote进程也不例外。<br>我们都知道，每一个App其实都是</p>\n<ul>\n<li>一个单独的虚拟机</li>\n<li>一个单独的进程<br>所以当系统里面的第一个zygote进程运行之后，在这之后再开启App，就相当于开启一个新的进程。而为了实现资源共用和更快的启动速度，Android系统开启新进程的方式，是通过fork第一个zygote进程实现的。所以说，除了第一个zygote进程，其他应用所在的进程都是zygote的子进程，</li>\n</ul>\n<h6 id=\"SystemServer\"><a href=\"#SystemServer\" class=\"headerlink\" title=\"SystemServer\"></a>SystemServer</h6><p>它也是个进程，而且是由zygote进程fork出来的。系统里面重要的服务都是在这个进程里面开启的，比如<code>ActivityManagerService</code>、<code>PackageManagerService</code>、<code>WindowManagerService</code> 等等。在zygote开启的时候，会调用ZygoteInit.main()进行初始化：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">/**</span></div><div class=\"line\"> * Startup class for the zygote process.</div><div class=\"line\"> *</div><div class=\"line\"> * Pre-initializes some classes, and then waits for commands on a UNIX domain</div><div class=\"line\"> * socket. Based on these commands, forks off child processes that inherit</div><div class=\"line\"> * the initial state of the VM.</div><div class=\"line\"> *</div><div class=\"line\"> * Please see &#123;<span class=\"doctag\">@link</span> ZygoteConnection.Arguments&#125; for documentation on the</div><div class=\"line\"> * client protocol.</div><div class=\"line\"> *</div><div class=\"line\"> */</div></pre></td></tr></table></figure>\n<p>从注释上也可以看出这个\b类主要是为了初始化某些参数。比如<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">preload</span><span class=\"params\">(TimingsTraceLog bootTimingsTraceLog)</span> </span>&#123;</div><div class=\"line\">        Log.d(TAG, <span class=\"string\">\"begin preload\"</span>);</div><div class=\"line\">        bootTimingsTraceLog.traceBegin(<span class=\"string\">\"BeginIcuCachePinning\"</span>);</div><div class=\"line\">        beginIcuCachePinning();</div><div class=\"line\">        bootTimingsTraceLog.traceEnd(); <span class=\"comment\">// BeginIcuCachePinning</span></div><div class=\"line\">        bootTimingsTraceLog.traceBegin(<span class=\"string\">\"PreloadClasses\"</span>);</div><div class=\"line\">        preloadClasses();</div><div class=\"line\">        bootTimingsTraceLog.traceEnd(); <span class=\"comment\">// PreloadClasses</span></div><div class=\"line\">        bootTimingsTraceLog.traceBegin(<span class=\"string\">\"PreloadResources\"</span>);</div><div class=\"line\">        preloadResources();</div><div class=\"line\">        bootTimingsTraceLog.traceEnd(); <span class=\"comment\">// PreloadResources</span></div><div class=\"line\">        Trace.traceBegin(Trace.TRACE_TAG_DALVIK, <span class=\"string\">\"PreloadAppProcessHALs\"</span>);</div><div class=\"line\">        nativePreloadAppProcessHALs();</div><div class=\"line\">        Trace.traceEnd(Trace.TRACE_TAG_DALVIK);</div><div class=\"line\">        Trace.traceBegin(Trace.TRACE_TAG_DALVIK, <span class=\"string\">\"PreloadOpenGL\"</span>);</div><div class=\"line\">        preloadOpenGL();</div><div class=\"line\">        Trace.traceEnd(Trace.TRACE_TAG_DALVIK);</div><div class=\"line\">        preloadSharedLibraries();</div><div class=\"line\">        preloadTextResources();</div><div class=\"line\">        <span class=\"comment\">// Ask the WebViewFactory to do any initialization that must run in the zygote process,</span></div><div class=\"line\">        <span class=\"comment\">// for memory sharing purposes.</span></div><div class=\"line\">        WebViewFactory.prepareWebViewInZygote();</div><div class=\"line\">        endIcuCachePinning();</div><div class=\"line\">        warmUpJcaProviders();</div><div class=\"line\">        Log.d(TAG, <span class=\"string\">\"end preload\"</span>);</div><div class=\"line\"></div><div class=\"line\">        sPreloadComplete = <span class=\"keyword\">true</span>;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">lazyPreload</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">        Preconditions.checkState(!sPreloadComplete);</div><div class=\"line\">        Log.i(TAG, <span class=\"string\">\"Lazily preloading resources.\"</span>);</div><div class=\"line\"></div><div class=\"line\">        preload(<span class=\"keyword\">new</span> TimingsTraceLog(<span class=\"string\">\"ZygoteInitTiming_lazy\"</span>, Trace.TRACE_TAG_DALVIK));</div><div class=\"line\">    &#125;</div></pre></td></tr></table></figure></p>\n<p>还有一些关键的方法<code>preloadSharedLibraries()</code>、<code>preloadOpenGL()</code>、<code>preloadTextResources()</code>、<code>preloadClasses()</code>、<code>preloadResources()</code>、<code>preloadDrawables()</code>、<code>preloadColorStateLists()</code> 等.还有一个\b<code>startSystemServer()</code>方法。</p>\n<h6 id=\"ActivityManagerService\"><a href=\"#ActivityManagerService\" class=\"headerlink\" title=\"ActivityManagerService\"></a>ActivityManagerService</h6><p>简称AMS,服务端对象，负责系统中所有Activity生命周期。它的初始化时机很明确，就是在SystemServer进程开启的时候，就会初始化ActivityManagerService。具体情况\b可以看一下<code>SystemServer.java</code>类。<br>经过上面这些步骤，我们的ActivityManagerService对象已经创建好了，并且完成了成员变量初始化。而且在这之前，调用createSystemContext()创建系统上下文的时候，也已经完成了mSystemContext和ActivityThread的创建。注意，这是系统进程开启时的流程，在这之后，会开启系统的Launcher程序，完成系统界面的加载与显示。</p>\n<h6 id=\"为什么说AMS是服务端对象\"><a href=\"#为什么说AMS是服务端对象\" class=\"headerlink\" title=\"为什么说AMS是服务端对象\"></a>为什么说AMS是服务端对象</h6><p>其实服务器客户端的概念不仅仅存在于Web开发中，在Android的框架设计中，使用的也是这一种模式。服务器端指的就是所有App共用的系统服务，比如我们这里提到的ActivityManagerService，和前面提到的PackageManagerService、WindowManagerService等等，这些基础的系统服务是被所有的App公用的，当某个App想实现某个操作的时候，要告诉这些系统服务，比如你想打开一个App，那么我们知道了包名和MainActivity类名之后就可以打开</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">Intent intent = <span class=\"keyword\">new</span> Intent(Intent.ACTION_MAIN);  </div><div class=\"line\">intent.addCategory(Intent.CATEGORY_LAUNCHER);</div><div class=\"line\">ComponentName cn = <span class=\"keyword\">new</span> ComponentName(packageName, className);</div><div class=\"line\">intent.setComponent(cn);  </div><div class=\"line\">startActivity(intent);</div></pre></td></tr></table></figure>\n<p>但是，我们的App通过调用startActivity()并不能直接打开另外一个App，这个方法会通过一系列的调用，最后还是告诉AMS说：“我要打开这个App，我知道他的住址和名字，你帮我打开吧！”所以是AMS来通知zygote进程来fork一个新进程，来开启我们的目标App的。这就像是浏览器想要打开一个超链接一样，浏览器把网页地址发送给服务器，然后还是服务器把需要的资源文件发送给客户端的。</p>\n<p>知道了Android Framework的客户端服务器架构之后，我们还需要了解一件事情，那就是我们的App和AMS(SystemServer进程)还有zygote进程分属于三个独立的进程，他们之间如何通信呢？<br>App与AMS通过Binder进行IPC通信，AMS(SystemServer进程)与zygote通过Socket进行IPC通信。<br>那么AMS有什么用呢？在前面我们知道了，如果想打开一个App的话，需要AMS去通知zygote进程，除此之外，其实所有的Activity的开启、暂停、关闭都需要AMS来控制，所以我们说，AMS负责系统中所有Activity的生命周期。<br>在Android系统中，任何一个Activity的启动都是由AMS和应用程序进程（主要是ActivityThread）相互配合来完成的。AMS服务统一调度系统中所有进程的Activity启动，而每个Activity的启动过程则由其所属的进程具体来完成。</p>\n<h6 id=\"Launcher\"><a href=\"#Launcher\" class=\"headerlink\" title=\"Launcher\"></a>Launcher</h6><p>当我们点击手机桌面上的图标的时候，App就由Launcher开始启动了。Launcher本质上也是一个应用程序，和我们的App一样，也是继承自Activity，系统源码可以在这里看 <a href=\"http://androidxref.com/8.0.0_r4/xref/packages/apps/Launcher3/src/com/android/launcher3/Launcher.java\" target=\"_blank\" rel=\"external\">http://androidxref.com/8.0.0_r4/xref/packages/apps/Launcher3/src/com/android/launcher3/Launcher.java</a><br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\">View <span class=\"title\">createShortcut</span><span class=\"params\">(<span class=\"keyword\">int</span> layoutResId, ViewGroup parent, ShortcutInfo info)</span> </span>&#123;</div><div class=\"line\">        BubbleTextView favorite = (BubbleTextView) mInflater.inflate(layoutResId, parent, <span class=\"keyword\">false</span>);</div><div class=\"line\">        favorite.applyFromShortcutInfo(info, mIconCache);</div><div class=\"line\">        favorite.setOnClickListener(<span class=\"keyword\">this</span>);</div><div class=\"line\">        <span class=\"keyword\">return</span> favorite;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>创建图标并设置点击监听<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">/**</span></div><div class=\"line\">     *</div><div class=\"line\">     * Launches the intent referred by the clicked shortcut.</div><div class=\"line\">     * <span class=\"doctag\">@param</span> v The view representing the clicked shortcut.</div><div class=\"line\">     */</div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onClick</span><span class=\"params\">(View v)</span> </span>&#123;</div><div class=\"line\">        <span class=\"comment\">// Make sure that rogue clicks don't get through while allapps is launching, or after the</span></div><div class=\"line\">        <span class=\"comment\">// view has detached (it's possible for this to happen if the view is removed mid touch).</span></div><div class=\"line\">        <span class=\"keyword\">if</span> (v.getWindowToken() == <span class=\"keyword\">null</span>) &#123;</div><div class=\"line\">            <span class=\"keyword\">return</span>;</div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\">        <span class=\"keyword\">if</span> (!mWorkspace.isFinishedSwitchingState()) &#123;</div><div class=\"line\">            <span class=\"keyword\">return</span>;</div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\">        Object tag = v.getTag();</div><div class=\"line\">        <span class=\"keyword\">if</span> (tag <span class=\"keyword\">instanceof</span> ShortcutInfo) &#123;</div><div class=\"line\">            <span class=\"comment\">// Open shortcut</span></div><div class=\"line\">            <span class=\"keyword\">final</span> Intent intent = ((ShortcutInfo) tag).intent;</div><div class=\"line\">            <span class=\"keyword\">int</span>[] pos = <span class=\"keyword\">new</span> <span class=\"keyword\">int</span>[<span class=\"number\">2</span>];</div><div class=\"line\">            v.getLocationOnScreen(pos);</div><div class=\"line\">            intent.setSourceBounds(<span class=\"keyword\">new</span> Rect(pos[<span class=\"number\">0</span>], pos[<span class=\"number\">1</span>],</div><div class=\"line\">                    pos[<span class=\"number\">0</span>] + v.getWidth(), pos[<span class=\"number\">1</span>] + v.getHeight()));</div><div class=\"line\"></div><div class=\"line\">            <span class=\"keyword\">boolean</span> success = startActivitySafely(v, intent, tag);</div><div class=\"line\"></div><div class=\"line\">            <span class=\"keyword\">if</span> (success &amp;&amp; v <span class=\"keyword\">instanceof</span> BubbleTextView) &#123;</div><div class=\"line\">                mWaitingForResume = (BubbleTextView) v;</div><div class=\"line\">                mWaitingForResume.setStayPressed(<span class=\"keyword\">true</span>);</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (tag <span class=\"keyword\">instanceof</span> FolderInfo) &#123;</div><div class=\"line\">            <span class=\"keyword\">if</span> (v <span class=\"keyword\">instanceof</span> FolderIcon) &#123;</div><div class=\"line\">                FolderIcon fi = (FolderIcon) v;</div><div class=\"line\">                handleFolderClick(fi);</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (v == mAllAppsButton) &#123;</div><div class=\"line\">            <span class=\"keyword\">if</span> (isAllAppsVisible()) &#123;</div><div class=\"line\">                showWorkspace(<span class=\"keyword\">true</span>);</div><div class=\"line\">            &#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">                onClickAllAppsButton(v);</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div></pre></td></tr></table></figure></p>\n<p>从上面可以看到，在桌面上点击快捷图标的时候，会调用<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">startActivitySafely(v, intent, tag);</div></pre></td></tr></table></figure></p>\n<p>具体代码就不抄了，看一下上面的链接中的源码就好，在该方法中调用了<code>startActivity(v, intent, tag)</code>，这里会调用Activity.startActivity(intent, opts.toBundle())，这个方法熟悉吗？这就是我们经常用到的Activity.startActivity(Intent)的重载函数。而且由于设置了<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">intent.addFlags(Intent.FLAG_ACTIVITY_NEW_TASK);</div></pre></td></tr></table></figure></p>\n<p>所以这个Activity会添加到一个新的Task栈中，而且，startActivity()调用的其实是startActivityForResult()这个方法。<br>所以现在明确了，Launcher中开启一个App，其实和我们在Activity中直接startActivity()基本一样，都是调用了Activity.startActivityForResult()。</p>\n<h6 id=\"Instrumentation\"><a href=\"#Instrumentation\" class=\"headerlink\" title=\"Instrumentation\"></a>Instrumentation</h6><p>每个Activity都持有Instrumentation对象的一个引用，但是整个进程只会存在一个Instrumentation对象。当startActivityForResult()调用之后，实际上还是调用了mInstrumentation.execStartActivity().<br>下面是mInstrumetation.execStartActivity()的实现<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> ActivityResult <span class=\"title\">execStartActivity</span><span class=\"params\">(</span></span></div><div class=\"line\">            Context who, IBinder contextThread, IBinder token, Activity target,</div><div class=\"line\">            Intent intent, <span class=\"keyword\">int</span> requestCode, Bundle options) &#123;</div><div class=\"line\">        IApplicationThread whoThread = (IApplicationThread) contextThread;</div><div class=\"line\">        Uri referrer = target != <span class=\"keyword\">null</span> ? target.onProvideReferrer() : <span class=\"keyword\">null</span>;</div><div class=\"line\">        <span class=\"keyword\">if</span> (referrer != <span class=\"keyword\">null</span>) &#123;</div><div class=\"line\">            intent.putExtra(Intent.EXTRA_REFERRER, referrer);</div><div class=\"line\">        &#125;</div><div class=\"line\">        <span class=\"keyword\">if</span> (mActivityMonitors != <span class=\"keyword\">null</span>) &#123;</div><div class=\"line\">            <span class=\"keyword\">synchronized</span> (mSync) &#123;</div><div class=\"line\">                <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> N = mActivityMonitors.size();</div><div class=\"line\">                <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i=<span class=\"number\">0</span>; i&lt;N; i++) &#123;</div><div class=\"line\">                    <span class=\"keyword\">final</span> ActivityMonitor am = mActivityMonitors.get(i);</div><div class=\"line\">                    <span class=\"keyword\">if</span> (am.match(who, <span class=\"keyword\">null</span>, intent)) &#123;</div><div class=\"line\">                        am.mHits++;</div><div class=\"line\">                        <span class=\"keyword\">if</span> (am.isBlocking()) &#123;</div><div class=\"line\">                            <span class=\"keyword\">return</span> requestCode &gt;= <span class=\"number\">0</span> ? am.getResult() : <span class=\"keyword\">null</span>;</div><div class=\"line\">                        &#125;</div><div class=\"line\">                        <span class=\"keyword\">break</span>;</div><div class=\"line\">                    &#125;</div><div class=\"line\">                &#125;</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;</div><div class=\"line\">        <span class=\"keyword\">try</span> &#123;</div><div class=\"line\">            intent.migrateExtraStreamToClipData();</div><div class=\"line\">            intent.prepareToLeaveProcess();</div><div class=\"line\">            <span class=\"keyword\">int</span> result = ActivityManagerNative.getDefault()</div><div class=\"line\">                .startActivity(whoThread, who.getBasePackageName(), intent,</div><div class=\"line\">                        intent.resolveTypeIfNeeded(who.getContentResolver()),</div><div class=\"line\">                        token, target != <span class=\"keyword\">null</span> ? target.mEmbeddedID : <span class=\"keyword\">null</span>,</div><div class=\"line\">                        requestCode, <span class=\"number\">0</span>, <span class=\"keyword\">null</span>, options);</div><div class=\"line\">            checkStartActivityResult(result, intent);</div><div class=\"line\">        &#125; <span class=\"keyword\">catch</span> (RemoteException e) &#123;</div><div class=\"line\">            <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> RuntimeException(<span class=\"string\">\"Failure from system\"</span>, e);</div><div class=\"line\">        &#125;</div><div class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">null</span>;</div><div class=\"line\">    &#125;</div></pre></td></tr></table></figure></p>\n<p>这里的 ActivityManagerNative.getDefault 返回ActivityManagerService的远程接口，即 ActivityManagerProxy 接口，有人可能会问了为什么会是ActivityManagerProxy，这就涉及到Binder通信了，这里不再展开。通过Binder驱动程序， ActivityManagerProxy 与AMS服务通信，则实现了跨进程到System进程。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">/**</span></div><div class=\"line\">    * Retrieve the system's default/global activity manager.</div><div class=\"line\">    */</div><div class=\"line\">   <span class=\"function\"><span class=\"keyword\">static</span> <span class=\"keyword\">public</span> IActivityManager <span class=\"title\">getDefault</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">       <span class=\"keyword\">return</span> gDefault.get();</div><div class=\"line\">   &#125;</div><div class=\"line\"></div><div class=\"line\">   <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> Singleton&lt;IActivityManager&gt; gDefault = <span class=\"keyword\">new</span> Singleton&lt;IActivityManager&gt;() &#123;</div><div class=\"line\">       <span class=\"function\"><span class=\"keyword\">protected</span> IActivityManager <span class=\"title\">create</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">           IBinder b = ServiceManager.getService(<span class=\"string\">\"activity\"</span>);</div><div class=\"line\">           <span class=\"keyword\">if</span> (<span class=\"keyword\">false</span>) &#123;</div><div class=\"line\">               Log.v(<span class=\"string\">\"ActivityManager\"</span>, <span class=\"string\">\"default service binder = \"</span> + b);</div><div class=\"line\">           &#125;</div><div class=\"line\">           IActivityManager am = asInterface(b);</div><div class=\"line\">           <span class=\"keyword\">if</span> (<span class=\"keyword\">false</span>) &#123;</div><div class=\"line\">               Log.v(<span class=\"string\">\"ActivityManager\"</span>, <span class=\"string\">\"default service = \"</span> + am);</div><div class=\"line\">           &#125;</div><div class=\"line\">           <span class=\"keyword\">return</span> am;</div><div class=\"line\">       &#125;</div><div class=\"line\">   &#125;;</div><div class=\"line\"></div><div class=\"line\">   <span class=\"comment\">/**</span></div><div class=\"line\">    * Cast a Binder object into an activity manager interface, generating</div><div class=\"line\">    * a proxy if needed.</div><div class=\"line\">    */</div><div class=\"line\">   <span class=\"function\"><span class=\"keyword\">static</span> <span class=\"keyword\">public</span> IActivityManager <span class=\"title\">asInterface</span><span class=\"params\">(IBinder obj)</span> </span>&#123;</div><div class=\"line\">       <span class=\"keyword\">if</span> (obj == <span class=\"keyword\">null</span>) &#123;</div><div class=\"line\">           <span class=\"keyword\">return</span> <span class=\"keyword\">null</span>;</div><div class=\"line\">       &#125;</div><div class=\"line\">       IActivityManager in =</div><div class=\"line\">           (IActivityManager)obj.queryLocalInterface(descriptor);</div><div class=\"line\">       <span class=\"keyword\">if</span> (in != <span class=\"keyword\">null</span>) &#123;</div><div class=\"line\">           <span class=\"keyword\">return</span> in;</div><div class=\"line\">       &#125;</div><div class=\"line\"></div><div class=\"line\">       <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> ActivityManagerProxy(obj);</div><div class=\"line\">   &#125;</div></pre></td></tr></table></figure>\n<h6 id=\"AMS响应Launcher进程请求\"><a href=\"#AMS响应Launcher进程请求\" class=\"headerlink\" title=\"AMS响应Launcher进程请求\"></a>AMS响应Launcher进程请求</h6><p>至此，点击桌面图标调用startActivity()，终于把数据和要开启Activity的请求发送到了AMS了,AMS收到startActivity的请求之后，会按照如下的方法链进行调用：<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">@Override</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> <span class=\"title\">startActivity</span><span class=\"params\">(IApplicationThread caller, String callingPackage,</span></span></div><div class=\"line\">            Intent intent, String resolvedType, IBinder resultTo, String resultWho, <span class=\"keyword\">int</span> requestCode,</div><div class=\"line\">            <span class=\"keyword\">int</span> startFlags, ProfilerInfo profilerInfo, Bundle options) &#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> startActivityAsUser(caller, callingPackage, intent, resolvedType, resultTo,</div><div class=\"line\">            resultWho, requestCode, startFlags, profilerInfo, options,</div><div class=\"line\">            UserHandle.getCallingUserId());</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"meta\">@Override</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> <span class=\"title\">startActivityAsUser</span><span class=\"params\">(IApplicationThread caller, String callingPackage,</span></span></div><div class=\"line\">            Intent intent, String resolvedType, IBinder resultTo, String resultWho, <span class=\"keyword\">int</span> requestCode,</div><div class=\"line\">            <span class=\"keyword\">int</span> startFlags, ProfilerInfo profilerInfo, Bundle options, <span class=\"keyword\">int</span> userId) &#123;</div><div class=\"line\">        enforceNotIsolatedCaller(<span class=\"string\">\"startActivity\"</span>);</div><div class=\"line\">        userId = handleIncomingUser(Binder.getCallingPid(), Binder.getCallingUid(), userId,</div><div class=\"line\">                <span class=\"keyword\">false</span>, ALLOW_FULL_ONLY, <span class=\"string\">\"startActivity\"</span>, <span class=\"keyword\">null</span>);</div><div class=\"line\">        <span class=\"comment\">// <span class=\"doctag\">TODO:</span> Switch to user app stacks here.</span></div><div class=\"line\">        <span class=\"keyword\">return</span> mStackSupervisor.startActivityMayWait(caller, -<span class=\"number\">1</span>, callingPackage, intent,</div><div class=\"line\">                resolvedType, <span class=\"keyword\">null</span>, <span class=\"keyword\">null</span>, resultTo, resultWho, requestCode, startFlags,</div><div class=\"line\">                profilerInfo, <span class=\"keyword\">null</span>, <span class=\"keyword\">null</span>, options, <span class=\"keyword\">false</span>, userId, <span class=\"keyword\">null</span>, <span class=\"keyword\">null</span>);</div><div class=\"line\">    &#125;</div></pre></td></tr></table></figure></p>\n<p>这里又出现了一个<code>mStackSupervisor</code>，定义是这么说的<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">/** Run all ActivityStacks through this */</span></div><div class=\"line\">    ActivityStackSupervisor mStackSupervisor;</div></pre></td></tr></table></figure></p>\n<p>在<code>mStackSupervisor.startActivityMayWait()</code>方法中又调用了<code>startActivityLocked()</code>方法，接着调用了<code>startActivityUncheckedLocked()</code>方法，在这个方法中一大堆眼花缭乱的判断，最终调用了<code>targetStack.startActivityLocked(r, newTask, doResume, keepCurTransition, options)</code>方法，然后调用了<code>mStackSupervisor.resumeTopActivitiesLocked(this, r, options)</code>方法，然后调用<code>result = targetStack.resumeTopActivityLocked(target, targetOptions)</code>方法，调用<code>result = resumeTopActivityInnerLocked(prev, options)</code>方法，在这个方法里，prev.app为记录启动Lancher进程的ProcessRecord，prev.app.thread为Lancher进程的远程调用接口IApplicationThead，所以可以调用prev.app.thread.schedulePauseActivity，到Lancher进程暂停指定Activity。至此，AMS对Launcher的请求已经响应，这是我们发现又通过Binder通信回调至Launcher进程</p>\n<h6 id=\"Launcher进程挂起Launcher，再次通知AMS\"><a href=\"#Launcher进程挂起Launcher，再次通知AMS\" class=\"headerlink\" title=\"Launcher进程挂起Launcher，再次通知AMS\"></a>Launcher进程挂起Launcher，再次通知AMS</h6><p>看一下怎么挂起Launcher的,在ActivityThread中：<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">handlePauseActivity</span><span class=\"params\">(IBinder token, <span class=\"keyword\">boolean</span> finished,</span></span></div><div class=\"line\">            <span class=\"keyword\">boolean</span> userLeaving, <span class=\"keyword\">int</span> configChanges, <span class=\"keyword\">boolean</span> dontReport) &#123;</div><div class=\"line\">        ActivityClientRecord r = mActivities.get(token);</div><div class=\"line\">        <span class=\"keyword\">if</span> (r != <span class=\"keyword\">null</span>) &#123;</div><div class=\"line\">            <span class=\"comment\">//Slog.v(TAG, \"userLeaving=\" + userLeaving + \" handling pause of \" + r);</span></div><div class=\"line\">            <span class=\"keyword\">if</span> (userLeaving) &#123;</div><div class=\"line\">                performUserLeavingActivity(r);</div><div class=\"line\">            &#125;</div><div class=\"line\"></div><div class=\"line\">            r.activity.mConfigChangeFlags |= configChanges;</div><div class=\"line\">            performPauseActivity(token, finished, r.isPreHoneycomb());</div><div class=\"line\"></div><div class=\"line\">            <span class=\"comment\">// Make sure any pending writes are now committed.</span></div><div class=\"line\">            <span class=\"keyword\">if</span> (r.isPreHoneycomb()) &#123;</div><div class=\"line\">                QueuedWork.waitToFinish();</div><div class=\"line\">            &#125;</div><div class=\"line\"></div><div class=\"line\">            <span class=\"comment\">// Tell the activity manager we have paused.</span></div><div class=\"line\">            <span class=\"keyword\">if</span> (!dontReport) &#123;</div><div class=\"line\">                <span class=\"keyword\">try</span> &#123;</div><div class=\"line\">                    ActivityManagerNative.getDefault().activityPaused(token);</div><div class=\"line\">                &#125; <span class=\"keyword\">catch</span> (RemoteException ex) &#123;</div><div class=\"line\">                &#125;</div><div class=\"line\">            &#125;</div><div class=\"line\">            mSomeActivitiesChanged = <span class=\"keyword\">true</span>;</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div></pre></td></tr></table></figure></p>\n<p>这部分Launcher的ActivityThread处理页面Paused并且再次通过ActivityManagerProxy通知AMS。</p>\n<h6 id=\"AMS创建新的进程\"><a href=\"#AMS创建新的进程\" class=\"headerlink\" title=\"AMS创建新的进程\"></a>AMS创建新的进程</h6><p>创建新进程的时候，AMS会保存一个ProcessRecord信息，如果应用程序中的AndroidManifest.xml配置文件中，我们没有指定Application标签的process属性，系统就会默认使用package的名称。每一个应用程序都有自己的uid，因此，这里uid + process的组合就可以为每一个应用程序创建一个ProcessRecord。<br>在<code>ActivityManagerService</code>中，<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">final</span> <span class=\"keyword\">void</span> <span class=\"title\">startProcessLocked</span><span class=\"params\">(ProcessRecord app, String hostingType,</span></span></div><div class=\"line\">            String hostingNameStr, String abiOverride, String entryPoint, String[] entryPointArgs) &#123;</div><div class=\"line\">        <span class=\"keyword\">long</span> startTime = SystemClock.elapsedRealtime();</div><div class=\"line\">        ......</div><div class=\"line\">        <span class=\"comment\">// Start the process.  It will either succeed and return a result containing</span></div><div class=\"line\">            <span class=\"comment\">// the PID of the new process, or else throw a RuntimeException.</span></div><div class=\"line\">            <span class=\"keyword\">boolean</span> isActivityProcess = (entryPoint == <span class=\"keyword\">null</span>);</div><div class=\"line\">            <span class=\"keyword\">if</span> (entryPoint == <span class=\"keyword\">null</span>) entryPoint = <span class=\"string\">\"android.app.ActivityThread\"</span>;</div><div class=\"line\">            Trace.traceBegin(Trace.TRACE_TAG_ACTIVITY_MANAGER, <span class=\"string\">\"Start proc: \"</span> +</div><div class=\"line\">                    app.processName);</div><div class=\"line\">            checkTime(startTime, <span class=\"string\">\"startProcess: asking zygote to start proc\"</span>);</div><div class=\"line\">            Process.ProcessStartResult startResult = Process.start(entryPoint,</div><div class=\"line\">                    app.processName, uid, uid, gids, debugFlags, mountExternal,</div><div class=\"line\">                    app.info.targetSdkVersion, app.info.seinfo, requiredAbi, instructionSet,</div><div class=\"line\">                    app.info.dataDir, entryPointArgs);</div><div class=\"line\">            checkTime(startTime, <span class=\"string\">\"startProcess: returned from zygote!\"</span>);</div><div class=\"line\">            Trace.traceEnd(Trace.TRACE_TAG_ACTIVITY_MANAGER);</div><div class=\"line\"></div><div class=\"line\">            <span class=\"keyword\">if</span> (app.isolated) &#123;</div><div class=\"line\">                mBatteryStatsService.addIsolatedUid(app.uid, app.info.uid);</div><div class=\"line\">            &#125;</div><div class=\"line\">            mBatteryStatsService.noteProcessStart(app.processName, app.info.uid);</div><div class=\"line\">            checkTime(startTime, <span class=\"string\">\"startProcess: done updating battery stats\"</span>);</div></pre></td></tr></table></figure></p>\n<p>这里主要是调用Process.start接口来创建一个新的进程，新的进程会导入android.app.ActivityThread类，并且执行它的main函数，这就是每一个应用程序都有一个ActivityThread实例来对应的原因。</p>\n<h6 id=\"应用进程初始化\"><a href=\"#应用进程初始化\" class=\"headerlink\" title=\"应用进程初始化\"></a>应用进程初始化</h6><p>来看Activity的main函数，这里绑定了主线程的Looper，并进入消息循环，大家应该知道，整个Android系统是消息驱动的，这也是为什么主线程默认绑定Looper的原因：<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</div><div class=\"line\">        Trace.traceBegin(Trace.TRACE_TAG_ACTIVITY_MANAGER, <span class=\"string\">\"ActivityThreadMain\"</span>);</div><div class=\"line\">        SamplingProfilerIntegration.start();</div><div class=\"line\"></div><div class=\"line\">        <span class=\"comment\">// CloseGuard defaults to true and can be quite spammy.  We</span></div><div class=\"line\">        <span class=\"comment\">// disable it here, but selectively enable it later (via</span></div><div class=\"line\">        <span class=\"comment\">// StrictMode) on debug builds, but using DropBox, not logs.</span></div><div class=\"line\">        CloseGuard.setEnabled(<span class=\"keyword\">false</span>);</div><div class=\"line\"></div><div class=\"line\">        Environment.initForCurrentUser();</div><div class=\"line\"></div><div class=\"line\">        <span class=\"comment\">// Set the reporter for event logging in libcore</span></div><div class=\"line\">        EventLogger.setReporter(<span class=\"keyword\">new</span> EventLoggingReporter());</div><div class=\"line\"></div><div class=\"line\">        AndroidKeyStoreProvider.install();</div><div class=\"line\"></div><div class=\"line\">        <span class=\"comment\">// Make sure TrustedCertificateStore looks in the right place for CA certificates</span></div><div class=\"line\">        <span class=\"keyword\">final</span> File configDir = Environment.getUserConfigDirectory(UserHandle.myUserId());</div><div class=\"line\">        TrustedCertificateStore.setDefaultUserDirectory(configDir);</div><div class=\"line\"></div><div class=\"line\">        Process.setArgV0(<span class=\"string\">\"&lt;pre-initialized&gt;\"</span>);</div><div class=\"line\"></div><div class=\"line\">        Looper.prepareMainLooper();</div><div class=\"line\"></div><div class=\"line\">        ActivityThread thread = <span class=\"keyword\">new</span> ActivityThread();</div><div class=\"line\">        thread.attach(<span class=\"keyword\">false</span>);</div><div class=\"line\"></div><div class=\"line\">        <span class=\"keyword\">if</span> (sMainThreadHandler == <span class=\"keyword\">null</span>) &#123;</div><div class=\"line\">            sMainThreadHandler = thread.getHandler();</div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\">        <span class=\"keyword\">if</span> (<span class=\"keyword\">false</span>) &#123;</div><div class=\"line\">            Looper.myLooper().setMessageLogging(<span class=\"keyword\">new</span></div><div class=\"line\">                    LogPrinter(Log.DEBUG, <span class=\"string\">\"ActivityThread\"</span>));</div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\">        <span class=\"comment\">// End of event ActivityThreadMain.</span></div><div class=\"line\">        Trace.traceEnd(Trace.TRACE_TAG_ACTIVITY_MANAGER);</div><div class=\"line\">        Looper.loop();</div><div class=\"line\"></div><div class=\"line\">        <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> RuntimeException(<span class=\"string\">\"Main thread loop unexpectedly exited\"</span>);</div><div class=\"line\">    &#125;</div></pre></td></tr></table></figure></p>\n<p>attach函数最终调用了ActivityManagerService的远程接口ActivityManagerProxy的attachApplication函数，传入的参数是mAppThread，这是一个ApplicationThread类型的Binder对象，它的作用是AMS与应用进程进行进程间通信的。<br>将进程和指定的Application绑定起来。这个是通过上节的ActivityThread对象中调用bindApplication()方法完成的。该方法发送一个BIND_APPLICATION的消息到消息队列中, 最终通过handleBindApplication()方法处理该消息. 然后调用makeApplication()方法来加载App的classes到内存中。</p>\n<h6 id=\"在AMS中注册应用进程，启动栈顶页面\"><a href=\"#在AMS中注册应用进程，启动栈顶页面\" class=\"headerlink\" title=\"在AMS中注册应用进程，启动栈顶页面\"></a>在AMS中注册应用进程，启动栈顶页面</h6><p>mMainStack.topRunningActivityLocked(null)从堆栈顶端取出要启动的Activity，并在realStartActivityLockedhan函数中通过ApplicationThreadProxy调回App进程启动页面。<br>在<code>ActivityStackSupervisor</code>中<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">final</span> <span class=\"keyword\">boolean</span> <span class=\"title\">realStartActivityLocked</span><span class=\"params\">(ActivityRecord r,</span></span></div><div class=\"line\">            ProcessRecord app, <span class=\"keyword\">boolean</span> andResume, <span class=\"keyword\">boolean</span> checkConfig)</div><div class=\"line\">            <span class=\"keyword\">throws</span> RemoteException &#123;</div><div class=\"line\">                    app.thread.scheduleLaunchActivity(<span class=\"keyword\">new</span> Intent(r.intent), r.appToken,</div><div class=\"line\">                    System.identityHashCode(r), r.info, <span class=\"keyword\">new</span> Configuration(mService.mConfiguration),</div><div class=\"line\">                    <span class=\"keyword\">new</span> Configuration(stack.mOverrideConfig), r.compat, r.launchedFromPackage,</div><div class=\"line\">                    task.voiceInteractor, app.repProcState, r.icicle, r.persistentState, results,</div><div class=\"line\">                    newIntents, !andResume, mService.isNextTransitionForward(), profilerInfo);</div><div class=\"line\">            &#125;</div></pre></td></tr></table></figure></p>\n<p>它会调用application线程对象中的scheduleLaunchActivity()发送一个LAUNCH_ACTIVITY消息到消息队列中, 通过 handleLaunchActivity()来处理该消息。在 handleLaunchActivity()通过performLaunchActiivty()方法回调Activity的onCreate()方法和onStart()方法，然后通过handleResumeActivity()方法，回调Activity的onResume()方法，而后会通知AMS该MainActivity已经处于resume状态最终显示Activity界面。<br>至此，整个启动流程告一段落。</p>\n<p>最后：</p>\n<h6 id=\"一个App的程序入口到底是什么？\"><a href=\"#一个App的程序入口到底是什么？\" class=\"headerlink\" title=\"一个App的程序入口到底是什么？\"></a>一个App的程序入口到底是什么？</h6><p>是ActivityThread.main()。</p>\n<h6 id=\"整个App的主线程的消息循环是在哪里创建的？\"><a href=\"#整个App的主线程的消息循环是在哪里创建的？\" class=\"headerlink\" title=\"整个App的主线程的消息循环是在哪里创建的？\"></a>整个App的主线程的消息循环是在哪里创建的？</h6><p>是在ActivityThread初始化的时候，就已经创建消息循环了，所以在主线程里面创建Handler不需要指定Looper，而如果在其他线程使用Handler，则需要单独使用Looper.prepare()和Looper.loop()创建消息循环。可以看ActivityThread的main方法</p>\n<h6 id=\"Application是在什么时候创建的？onCreate-什么时候调用的？\"><a href=\"#Application是在什么时候创建的？onCreate-什么时候调用的？\" class=\"headerlink\" title=\"Application是在什么时候创建的？onCreate()什么时候调用的？\"></a>Application是在什么时候创建的？onCreate()什么时候调用的？</h6><p>也是在ActivityThread.main()的时候，就是在thread.attach(false)的时候。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">if</span> (!system) &#123;</div><div class=\"line\">            ViewRootImpl.addFirstDrawHandler(<span class=\"keyword\">new</span> Runnable() &#123;</div><div class=\"line\">                <span class=\"meta\">@Override</span></div><div class=\"line\">                <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">run</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">                    ensureJitEnabled();</div><div class=\"line\">                &#125;</div><div class=\"line\">            &#125;);</div><div class=\"line\">            android.ddm.DdmHandleAppName.setAppName(<span class=\"string\">\"&lt;pre-initialized&gt;\"</span>,</div><div class=\"line\">                                                    UserHandle.myUserId());</div><div class=\"line\">            RuntimeInit.setApplicationObject(mAppThread.asBinder());</div><div class=\"line\">            <span class=\"keyword\">final</span> IActivityManager mgr = ActivityManagerNative.getDefault();</div><div class=\"line\">            <span class=\"keyword\">try</span> &#123;</div><div class=\"line\">                mgr.attachApplication(mAppThread);</div><div class=\"line\">            &#125; <span class=\"keyword\">catch</span> (RemoteException ex) &#123;</div><div class=\"line\">                <span class=\"comment\">// Ignore</span></div><div class=\"line\">            &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>这里需要关注的就是mgr.attachApplication(mAppThread)，这个就会通过Binder调用到AMS里面对应的方法:<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">@Override</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">final</span> <span class=\"keyword\">void</span> <span class=\"title\">attachApplication</span><span class=\"params\">(IApplicationThread thread)</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">synchronized</span> (<span class=\"keyword\">this</span>) &#123;</div><div class=\"line\">        <span class=\"keyword\">int</span> callingPid = Binder.getCallingPid();</div><div class=\"line\">        <span class=\"keyword\">final</span> <span class=\"keyword\">long</span> origId = Binder.clearCallingIdentity();</div><div class=\"line\">        attachApplicationLocked(thread, callingPid);</div><div class=\"line\">        Binder.restoreCallingIdentity(origId);</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>然后调用的就是<code>private final boolean attachApplicationLocked(IApplicationThread thread,int pid)</code>方法，thread是IApplicationThread，实际上就是ApplicationThread在服务端的代理类ApplicationThreadProxy，然后又通过IPC就会调用到ApplicationThread的对应方法。这个方法里面又调用了<code>sendMessage()</code>，里面有函数的编号H.BIND_APPLICATION，然后这个Messge会被H这个Handler处理:<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">private</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">H</span> <span class=\"keyword\">extends</span> <span class=\"title\">Handler</span> </span>&#123;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> BIND_APPLICATION        = <span class=\"number\">110</span>;</div><div class=\"line\">    <span class=\"keyword\">case</span> BIND_APPLICATION:</div><div class=\"line\">                    Trace.traceBegin(Trace.TRACE_TAG_ACTIVITY_MANAGER, <span class=\"string\">\"bindApplication\"</span>);</div><div class=\"line\">                    AppBindData data = (AppBindData)msg.obj;</div><div class=\"line\">                    handleBindApplication(data);</div><div class=\"line\">                    Trace.traceEnd(Trace.TRACE_TAG_ACTIVITY_MANAGER);</div><div class=\"line\">                    <span class=\"keyword\">break</span>;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>然后在<code>handleBindApplication(data)</code>方法中<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div></pre></td><td class=\"code\"><pre><div class=\"line\"> <span class=\"keyword\">try</span> &#123;</div><div class=\"line\">      java.lang.ClassLoader cl = instrContext.getClassLoader();</div><div class=\"line\">      mInstrumentation = (Instrumentation)cl.loadClass(data.instrumentationName.getClassName()).newInstance();</div><div class=\"line\">&#125; <span class=\"keyword\">catch</span> (Exception e) &#123;</div><div class=\"line\">        <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> RuntimeException(<span class=\"string\">\"Unable to instantiate instrumentation \"</span>+ data.instrumentationName + <span class=\"string\">\": \"</span> + e.toString(), e);</div><div class=\"line\"></div><div class=\"line\">        ......</div><div class=\"line\">         <span class=\"comment\">// Do this after providers, since instrumentation tests generally start their</span></div><div class=\"line\">            <span class=\"comment\">// test thread at this point, and we don't want that racing.</span></div><div class=\"line\">            <span class=\"keyword\">try</span> &#123;</div><div class=\"line\">                mInstrumentation.onCreate(data.instrumentationArgs);</div><div class=\"line\">            &#125;</div><div class=\"line\">            <span class=\"keyword\">catch</span> (Exception e) &#123;</div><div class=\"line\">                <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> RuntimeException(</div><div class=\"line\">                    <span class=\"string\">\"Exception thrown in onCreate() of \"</span></div><div class=\"line\">                    + data.instrumentationName + <span class=\"string\">\": \"</span> + e.toString(), e);</div><div class=\"line\">            &#125;</div><div class=\"line\"></div><div class=\"line\">            <span class=\"keyword\">try</span> &#123;</div><div class=\"line\">                mInstrumentation.callApplicationOnCreate(app);</div><div class=\"line\">            &#125; <span class=\"keyword\">catch</span> (Exception e) &#123;</div><div class=\"line\">                <span class=\"keyword\">if</span> (!mInstrumentation.onException(app, e)) &#123;</div><div class=\"line\">                    <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> RuntimeException(</div><div class=\"line\">                        <span class=\"string\">\"Unable to create application \"</span> + app.getClass().getName()</div><div class=\"line\">                        + <span class=\"string\">\": \"</span> + e.toString(), e);</div><div class=\"line\">                &#125;</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125; <span class=\"keyword\">finally</span> &#123;</div><div class=\"line\">            StrictMode.setThreadPolicy(savedPolicy);</div><div class=\"line\">        &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>不同的版本代码不尽相同，但是基本逻辑不会变。<br>参考、抄袭的链接如下：<br><a href=\"https://blog.csdn.net/bfboys/article/details/52564531\" target=\"_blank\" rel=\"external\">https://blog.csdn.net/bfboys/article/details/52564531</a><br><a href=\"https://www.jianshu.com/p/a72c5ccbd150\" target=\"_blank\" rel=\"external\">https://www.jianshu.com/p/a72c5ccbd150</a><br><a href=\"https://www.jianshu.com/p/6037f6fda285\" target=\"_blank\" rel=\"external\">https://www.jianshu.com/p/6037f6fda285</a><br><a href=\"https://www.jianshu.com/p/a72c5ccbd150\" target=\"_blank\" rel=\"external\">https://www.jianshu.com/p/a72c5ccbd150</a></p>\n<hr>\n<p>以上</p>\n","excerpt":"<p>面试总结，关于Activity启动模式、启动过程，Intent匹配规则、App启动流程等<br>","more":"</p>\n<h5 id=\"启动模式：\"><a href=\"#启动模式：\" class=\"headerlink\" title=\"启动模式：\"></a>启动模式：</h5><ul>\n<li>standard：标准模式，这也是系统的默认模式。每次启动一个Activity都会重新创建一个新的实例，不管这个实例是否已经存在。</li>\n<li>singleTop：栈顶复用模式。在这种模式下，如果新Activity已经位于任务栈的栈顶，那么此Activity不会被重新创建，同时它的onNewIntent方法会被回调，通过此方法的参数我们可以取出当前请求的信息。需要注意的是，这个Activity的onCreate、onStart不会被系统调用，因为它并没有发生改变。如果新Activity的实例已存在但不是位于栈顶，那么新Activity仍然会重新重建。</li>\n<li>singleTask：栈内复用模式。这是一种单实例模式，在这种模式下，只要Activity在一个栈中存在，那么多次启动此Activity都不会重新创建实例，和singleTop一样，系统也会回调其onNewIntent。</li>\n<li>singleInstance：单实例模式。这是一种加强的singleTask模式，它除了具有singleTask模式的所有特性外，还加强了一点，那就是具有此种模式的Activity只能单独地位于一个任务栈中，</li>\n</ul>\n<p>还有一个参数 <code>TaskAffinity</code>,这个参数标识了一个Activity所需要的任务栈的名字，默认情况下，所有Activity所需的任务栈的名字为应用的包名。当然，我们可以为每个Activity都单独指定TaskAffinity属性，这个属性值必须不能和包名相同，否则就相当于没有指定。TaskAffinity属性主要和singleTask启动模式或者allowTaskReparenting属性配对使用，在其他情况下没有意义。<br>还有Activity中能够影响启动模式、运行状态的标记位：</p>\n<p><strong> FLAG_ACTIVITY_NEW_TASK </strong><br>这个标记位的作用是为Activity指定“singleTask”启动模式，其效果和在XML中指定该启动模式相同。<br><strong> FLAG_ACTIVITY_SINGLE_TOP </strong><br>这个标记位的作用是为Activity指定“singleTop”启动模式，其效果和在XML中指定该启动模式相同。<br><strong> FLAG_ACTIVITY_CLEAR_TOP </strong><br>具有此标记位的Activity，当它启动时，在同一个任务栈中所有位于它上面的Activity都要出栈。这个模式一般需要和FLAG_ACTIVITY_NEW_TASK配合使用，在这种情况下，被启动Activity的实例如果已经存在，那么系统会调用它的onNewIntent。如果被启动的Activity采用standard模式启动，那么它连同它之上的Activity都要出栈，系统会创建新的Activity实例并放入栈顶。通过1.2.1节中的分析可以知道，singleTask启动模式默认就具有此标记位的效果。<br><strong> FLAG_ACTIVITY_EXCLUDE_FROM_RECENTS </strong><br>具有这个标记的Activity不会出现在历史Activity的列表中，当某些情况下我们不希望用户通过历史列表回到我们的Activity的时候这个标记比较有用。它等同于在XML中指定Activity的属性android:excludeFromRecents=”true”。</p>\n<h5 id=\"Intent匹配规则\"><a href=\"#Intent匹配规则\" class=\"headerlink\" title=\"Intent匹配规则\"></a>Intent匹配规则</h5><p>启动Activity分为两种，显式调用和隐式调用。显式调用需要明确地指定被启动对象的组件信息，包括包名和类名，而隐式调用则不需要明确指定组件信息。原则上一个Intent不应该既是显式调用又是隐式调用，如果二者<br>共存的话以显式调用为主。显式调用很简单，这里主要介绍一下隐式调用。隐式调用需要Intent能够匹配目标组件的IntentFilter中所设置的过滤信息，如果不匹配将无法启动目标Activity。<br>为了匹配过滤列表，需要同时匹配过滤列表中的action、category、data信息，否则匹配失败。一个过滤列表中的action、category和data可以有多个，所有的action、category、data分别构成不同类别，同一类别的信息共同约束当前类别的匹配过程。只有一个Intent同时匹配action类别、category类别、data类别才算完全匹配，只有完全匹配才能成功启动目标Activity。另外一点，一个Activity中可以有多个intent-filter，一个Intent只要能匹配任何一组intent-filter即可成功启动对应的Activity。</p>\n<ul>\n<li>action的匹配规则<br>action是一个字符串，系统预定义了一些action，同时我们也可以在应用中定义自己的action。action的匹配规则是Intent中的action必须能够和过滤规则中的action匹配，这里说的匹配是指action的字符串值完全一样。一个过滤规则中可以有多个action，那么只要Intent中的action能够和过滤规则中的任何一个action相同即可匹配成功。需要注意的是，Intent中如果没有指定action，那么匹配失败。另外，action区分大小写，大小写不同字符串相同的action会匹配失败。</li>\n<li>category的匹配规则<br>category是一个字符串，系统预定义了一些category，同时我们也可以在应用中定义自己的category。category的匹配规则和action不同，它要求Intent中如果含有category，那么所有的category都必须和过滤规则中的其中一个category相同。换句话说，Intent中如果出现了category，不管有几个category，对于每个category来说，它必须是过滤规则中已经定义了的category。当然，Intent中可以没有category，如果没有category的话，按照上面的描述，这个Intent仍然可以匹配成功。这里要注意下它和action匹配过程的不同，action是要求Intent中必须有一个action且必须能够和过滤规则中的某个action相同，而category要求<br>Intent可以没有category，但是如果你一旦有category，不管有几个，每个都要能够和过滤规则中的任何一个category相同。</li>\n<li>data的匹配规则<br>data的匹配规则和action类似，如果过滤规则中定义了data，那么Intent中必须也要定义可匹配的data。在介绍data的匹配规则之前，我们需要先了解一下data的结构，因为data稍微有些复杂<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">data</span>   <span class=\"attr\">android:scheme</span>=<span class=\"string\">\"string\"</span></div><div class=\"line\">        <span class=\"attr\">android:host</span>=<span class=\"string\">\"string\"</span></div><div class=\"line\">        <span class=\"attr\">android:port</span>=<span class=\"string\">\"string\"</span></div><div class=\"line\">        <span class=\"attr\">android:path</span>=<span class=\"string\">\"string\"</span></div><div class=\"line\">        <span class=\"attr\">android:pathPattern</span>=<span class=\"string\">\"string\"</span></div><div class=\"line\">        <span class=\"attr\">android:pathPrefix</span>=<span class=\"string\">\"string\"</span></div><div class=\"line\">        <span class=\"attr\">android:mimeType</span>=<span class=\"string\">\"string\"</span> /&gt;</span></div></pre></td></tr></table></figure>\n</li>\n</ul>\n<p>data由两部分组成，mimeType和URI。mimeType指媒体类型，比如image/jpeg、audio/mpeg4-generic和video/*等，可以表示图片、文本、视频等不同的媒体格式，而URI中包含的数据就比较多了，下面是URI的结构：<br><code>&lt;scheme&gt;://&lt;host&gt;:&lt;port&gt;/[&lt;path&gt;|&lt;pathPrefix&gt;|&lt;pathPattern&gt;]</code><br>有如下过滤规则</p>\n<p><code>&lt;data android:mimeType=&quot;image/*&quot; /&gt;</code><br>这种规则指定了媒体类型为所有类型的图片，那么Intent中的mimeType属性必须为“image/*”才能匹配，这种情况下虽然过滤规则没有指定URI，但是却有默认值，URI的默认值为content和file。也就是说，虽然没有指定URI，但是Intent中的URI部分的schema必须为content或者file才能匹配，这点是需要尤其注意的。为了匹配上面中规则，我们可以写出如下示例<br><code>intent.setDataAndType(Uri.parse(&quot;file://abc&quot;),&quot;image/png&quot;)。</code><br>另外，如果要为Intent指定完整的data，必须要调用setDataAndType方法，不能先调用setData再调用setType，因为这两个方法彼此会清除对方的值。<br>最后，当我们通过隐式方式启动一个Activity的时候，可以做一下判断，看是否有Activity能够匹配我们的隐式Intent，如果不做判断就有可能出现上述的错误了。判断方法有两种：采用PackageManager的resolveActivity方法或者Intent的resolveActivity方法，如果它们找不到匹配的Activity就会返回null，我们通过判断返回值就可以规避上述错误了。另外，PackageManager还提供了queryIntentActivities方法，这个方法和resolveActivity方法不同的是：它不是返回最佳匹配的Activity信息而是返回所有成功匹配的Activity信息。<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">abstract</span> List&lt;ResolveInfo&gt; <span class=\"title\">queryIntentActivities</span><span class=\"params\">(Intent intent,<span class=\"keyword\">int</span> flags)</span></span>;</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">abstract</span> ResolveInfo <span class=\"title\">resolveActivity</span><span class=\"params\">(Intent intent,<span class=\"keyword\">int</span> flags)</span></span>;</div></pre></td></tr></table></figure></p>\n<p>上述两个方法的第一个参数比较好理解，第二个参数需要注意，我们要使用MATCH_DEFAULT_ONLY这个标记位，这个标记位的含义是仅仅匹配那些在intent-filter中声明了<br><code>&lt;category  android:name=&quot;android.intent.category.DEFAULT&quot;/&gt;</code>这个category的Activity。使用这个标记位的意义在于，只要上述两个方法不返回null，那么startActivity一定可以成功。如果不用这个标记位，就可以把intent-filter中category不含DEFAULT的那些Activity给匹配出来，从而导致startActivity可能失败。因为不含有DEFAULT这个category的Activity是无法接收隐式Intent的。</p>\n<h5 id=\"App启动过程\"><a href=\"#App启动过程\" class=\"headerlink\" title=\"App启动过程\"></a>App启动过程</h5><ol>\n<li>点击桌面App图标，Launch进程采用Binder IPC向system_server进程发起startActivity请求</li>\n<li>system_server收到请求后，向zygote进程发送创建进程请求。</li>\n<li>Zygote进程fork出新的子进程，即App进程。</li>\n<li>App进程通过Binder IPC向system_server进程发起attachApplication请求</li>\n<li>system_server进程在收到请求后，进行一系列的准备工作，再通过Binder IPC向App进程发送scheduleLaunchActivity请求。</li>\n<li>App进程的binder线程(ApplicationThread)在收到请求后，通过handler向主线程发送LAUNCH_ACTIVITY消息；</li>\n<li>主线程在收到Message后，通过发射机制创建目标Activity，并回调Activity.onCreate()等方法；</li>\n<li>到此，App便正式启动，开始进入Activity生命周期。</li>\n</ol>\n<p><strong> 涉及到的类 </strong></p>\n<ul>\n<li><code>Activity</code> startActivity方法的真正实现在Activity中。</li>\n<li><code>Instrumentation</code> 每一个应用程序只有一个Instrumentation对象，每个Activity内都有一个对该对象的引用。Instrumentation可以理解为应用进程的管家，ActivityThread要创建或暂停某个Activity时，都需要通过Instrumentation来进行具体的操作,用来辅助Activity完成启动Activity的过程。</li>\n<li><code>ActivityThread</code>（包含ApplicationThread + ApplicationThreadNative + IApplicationThread）：真正启动Activity的实现都在这里,应用的入口类，系统通过调用main函数，开启消息循环队列。ActivityThread所在线程被称为应用的主线程（UI线程）。与ActivityManagerServices配合，一起完成Activity的管理工作。</li>\n<li><code>ActivityManagerService</code> 简称AMS，服务端对象。AMS是Android中最核心的服务之一，主要负责系统中四大组件的启动、切换、调度及应用进程的管理和调度等工作，其职责与操作系统中的进程管理和调度模块相类似，因此它在Android中非常重要，它本身也是一个Binder的实现类。</li>\n<li><code>ActivityManagerProxy</code> AMS服务在当前进程的代理类，负责与AMS通信。</li>\n<li><code>ApplicationThread</code> 用来实现ActivityManagerService与ActivityThread之间的交互。在ActivityManagerService需要管理相关Application中的Activity的生命周期时，通过ApplicationThread的代理对象与ActivityThread通讯。</li>\n<li><code>ApplicationThreadProxy</code> 是ApplicationThread在服务器端的代理，负责和客户端的ApplicationThread通讯。AMS就是通过该代理与ActivityThread进行通信的。</li>\n<li><code>ActivityStack</code> Activity在AMS的栈管理，用来记录已经启动的Activity的先后关系，状态信息等。通过ActivityStack决定是否需要启动新的进程。</li>\n<li><code>ActivityRecord</code> ActivityStack的管理对象，每个Activity在AMS对应一个ActivityRecord，来记录Activity的状态以及其他的管理信息。其实就是服务器端的Activity对象的映像。</li>\n<li><code>TaskRecord</code> AMS抽象出来的一个“任务”的概念，是记录ActivityRecord的栈，一个“Task”包含若干个ActivityRecord。AMS用TaskRecord确保Activity启动和退出的顺序。如果你清楚Activity的4种launchMode，那么对这个概念应该不陌生。</li>\n</ul>\n<p><strong> 基本概念 </strong></p>\n<h6 id=\"zygote\"><a href=\"#zygote\" class=\"headerlink\" title=\"zygote\"></a>zygote</h6><p>Android是基于Linux系统的，而在Linux中，所有的进程都是由init进程直接或者是间接fork出来的，zygote进程也不例外。至于init进程怎么来的，可以搜一下Android系统启动过程。<br>在Android系统里面，zygote是一个进程的名字。Android是基于Linux System的，当你的手机开机的时候，Linux的内核加载完成之后就会启动一个叫“init“的进程。在Linux System里面，所有的进程都是由init进程fork出来的，我们的zygote进程也不例外。<br>我们都知道，每一个App其实都是</p>\n<ul>\n<li>一个单独的虚拟机</li>\n<li>一个单独的进程<br>所以当系统里面的第一个zygote进程运行之后，在这之后再开启App，就相当于开启一个新的进程。而为了实现资源共用和更快的启动速度，Android系统开启新进程的方式，是通过fork第一个zygote进程实现的。所以说，除了第一个zygote进程，其他应用所在的进程都是zygote的子进程，</li>\n</ul>\n<h6 id=\"SystemServer\"><a href=\"#SystemServer\" class=\"headerlink\" title=\"SystemServer\"></a>SystemServer</h6><p>它也是个进程，而且是由zygote进程fork出来的。系统里面重要的服务都是在这个进程里面开启的，比如<code>ActivityManagerService</code>、<code>PackageManagerService</code>、<code>WindowManagerService</code> 等等。在zygote开启的时候，会调用ZygoteInit.main()进行初始化：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">/**</div><div class=\"line\"> * Startup class for the zygote process.</div><div class=\"line\"> *</div><div class=\"line\"> * Pre-initializes some classes, and then waits for commands on a UNIX domain</div><div class=\"line\"> * socket. Based on these commands, forks off child processes that inherit</div><div class=\"line\"> * the initial state of the VM.</div><div class=\"line\"> *</div><div class=\"line\"> * Please see &#123;<span class=\"doctag\">@link</span> ZygoteConnection.Arguments&#125; for documentation on the</div><div class=\"line\"> * client protocol.</div><div class=\"line\"> *</div><div class=\"line\"> */</span></div></pre></td></tr></table></figure>\n<p>从注释上也可以看出这个\b类主要是为了初始化某些参数。比如<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">preload</span><span class=\"params\">(TimingsTraceLog bootTimingsTraceLog)</span> </span>&#123;</div><div class=\"line\">        Log.d(TAG, <span class=\"string\">\"begin preload\"</span>);</div><div class=\"line\">        bootTimingsTraceLog.traceBegin(<span class=\"string\">\"BeginIcuCachePinning\"</span>);</div><div class=\"line\">        beginIcuCachePinning();</div><div class=\"line\">        bootTimingsTraceLog.traceEnd(); <span class=\"comment\">// BeginIcuCachePinning</span></div><div class=\"line\">        bootTimingsTraceLog.traceBegin(<span class=\"string\">\"PreloadClasses\"</span>);</div><div class=\"line\">        preloadClasses();</div><div class=\"line\">        bootTimingsTraceLog.traceEnd(); <span class=\"comment\">// PreloadClasses</span></div><div class=\"line\">        bootTimingsTraceLog.traceBegin(<span class=\"string\">\"PreloadResources\"</span>);</div><div class=\"line\">        preloadResources();</div><div class=\"line\">        bootTimingsTraceLog.traceEnd(); <span class=\"comment\">// PreloadResources</span></div><div class=\"line\">        Trace.traceBegin(Trace.TRACE_TAG_DALVIK, <span class=\"string\">\"PreloadAppProcessHALs\"</span>);</div><div class=\"line\">        nativePreloadAppProcessHALs();</div><div class=\"line\">        Trace.traceEnd(Trace.TRACE_TAG_DALVIK);</div><div class=\"line\">        Trace.traceBegin(Trace.TRACE_TAG_DALVIK, <span class=\"string\">\"PreloadOpenGL\"</span>);</div><div class=\"line\">        preloadOpenGL();</div><div class=\"line\">        Trace.traceEnd(Trace.TRACE_TAG_DALVIK);</div><div class=\"line\">        preloadSharedLibraries();</div><div class=\"line\">        preloadTextResources();</div><div class=\"line\">        <span class=\"comment\">// Ask the WebViewFactory to do any initialization that must run in the zygote process,</span></div><div class=\"line\">        <span class=\"comment\">// for memory sharing purposes.</span></div><div class=\"line\">        WebViewFactory.prepareWebViewInZygote();</div><div class=\"line\">        endIcuCachePinning();</div><div class=\"line\">        warmUpJcaProviders();</div><div class=\"line\">        Log.d(TAG, <span class=\"string\">\"end preload\"</span>);</div><div class=\"line\"></div><div class=\"line\">        sPreloadComplete = <span class=\"keyword\">true</span>;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">lazyPreload</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">        Preconditions.checkState(!sPreloadComplete);</div><div class=\"line\">        Log.i(TAG, <span class=\"string\">\"Lazily preloading resources.\"</span>);</div><div class=\"line\"></div><div class=\"line\">        preload(<span class=\"keyword\">new</span> TimingsTraceLog(<span class=\"string\">\"ZygoteInitTiming_lazy\"</span>, Trace.TRACE_TAG_DALVIK));</div><div class=\"line\">    &#125;</div></pre></td></tr></table></figure></p>\n<p>还有一些关键的方法<code>preloadSharedLibraries()</code>、<code>preloadOpenGL()</code>、<code>preloadTextResources()</code>、<code>preloadClasses()</code>、<code>preloadResources()</code>、<code>preloadDrawables()</code>、<code>preloadColorStateLists()</code> 等.还有一个\b<code>startSystemServer()</code>方法。</p>\n<h6 id=\"ActivityManagerService\"><a href=\"#ActivityManagerService\" class=\"headerlink\" title=\"ActivityManagerService\"></a>ActivityManagerService</h6><p>简称AMS,服务端对象，负责系统中所有Activity生命周期。它的初始化时机很明确，就是在SystemServer进程开启的时候，就会初始化ActivityManagerService。具体情况\b可以看一下<code>SystemServer.java</code>类。<br>经过上面这些步骤，我们的ActivityManagerService对象已经创建好了，并且完成了成员变量初始化。而且在这之前，调用createSystemContext()创建系统上下文的时候，也已经完成了mSystemContext和ActivityThread的创建。注意，这是系统进程开启时的流程，在这之后，会开启系统的Launcher程序，完成系统界面的加载与显示。</p>\n<h6 id=\"为什么说AMS是服务端对象\"><a href=\"#为什么说AMS是服务端对象\" class=\"headerlink\" title=\"为什么说AMS是服务端对象\"></a>为什么说AMS是服务端对象</h6><p>其实服务器客户端的概念不仅仅存在于Web开发中，在Android的框架设计中，使用的也是这一种模式。服务器端指的就是所有App共用的系统服务，比如我们这里提到的ActivityManagerService，和前面提到的PackageManagerService、WindowManagerService等等，这些基础的系统服务是被所有的App公用的，当某个App想实现某个操作的时候，要告诉这些系统服务，比如你想打开一个App，那么我们知道了包名和MainActivity类名之后就可以打开</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">Intent intent = <span class=\"keyword\">new</span> Intent(Intent.ACTION_MAIN);  </div><div class=\"line\">intent.addCategory(Intent.CATEGORY_LAUNCHER);</div><div class=\"line\">ComponentName cn = <span class=\"keyword\">new</span> ComponentName(packageName, className);</div><div class=\"line\">intent.setComponent(cn);  </div><div class=\"line\">startActivity(intent);</div></pre></td></tr></table></figure>\n<p>但是，我们的App通过调用startActivity()并不能直接打开另外一个App，这个方法会通过一系列的调用，最后还是告诉AMS说：“我要打开这个App，我知道他的住址和名字，你帮我打开吧！”所以是AMS来通知zygote进程来fork一个新进程，来开启我们的目标App的。这就像是浏览器想要打开一个超链接一样，浏览器把网页地址发送给服务器，然后还是服务器把需要的资源文件发送给客户端的。</p>\n<p>知道了Android Framework的客户端服务器架构之后，我们还需要了解一件事情，那就是我们的App和AMS(SystemServer进程)还有zygote进程分属于三个独立的进程，他们之间如何通信呢？<br>App与AMS通过Binder进行IPC通信，AMS(SystemServer进程)与zygote通过Socket进行IPC通信。<br>那么AMS有什么用呢？在前面我们知道了，如果想打开一个App的话，需要AMS去通知zygote进程，除此之外，其实所有的Activity的开启、暂停、关闭都需要AMS来控制，所以我们说，AMS负责系统中所有Activity的生命周期。<br>在Android系统中，任何一个Activity的启动都是由AMS和应用程序进程（主要是ActivityThread）相互配合来完成的。AMS服务统一调度系统中所有进程的Activity启动，而每个Activity的启动过程则由其所属的进程具体来完成。</p>\n<h6 id=\"Launcher\"><a href=\"#Launcher\" class=\"headerlink\" title=\"Launcher\"></a>Launcher</h6><p>当我们点击手机桌面上的图标的时候，App就由Launcher开始启动了。Launcher本质上也是一个应用程序，和我们的App一样，也是继承自Activity，系统源码可以在这里看 <a href=\"http://androidxref.com/8.0.0_r4/xref/packages/apps/Launcher3/src/com/android/launcher3/Launcher.java\">http://androidxref.com/8.0.0_r4/xref/packages/apps/Launcher3/src/com/android/launcher3/Launcher.java</a><br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\">View <span class=\"title\">createShortcut</span><span class=\"params\">(<span class=\"keyword\">int</span> layoutResId, ViewGroup parent, ShortcutInfo info)</span> </span>&#123;</div><div class=\"line\">        BubbleTextView favorite = (BubbleTextView) mInflater.inflate(layoutResId, parent, <span class=\"keyword\">false</span>);</div><div class=\"line\">        favorite.applyFromShortcutInfo(info, mIconCache);</div><div class=\"line\">        favorite.setOnClickListener(<span class=\"keyword\">this</span>);</div><div class=\"line\">        <span class=\"keyword\">return</span> favorite;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>创建图标并设置点击监听<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">/**</div><div class=\"line\">     *</div><div class=\"line\">     * Launches the intent referred by the clicked shortcut.</div><div class=\"line\">     * <span class=\"doctag\">@param</span> v The view representing the clicked shortcut.</div><div class=\"line\">     */</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onClick</span><span class=\"params\">(View v)</span> </span>&#123;</div><div class=\"line\">        <span class=\"comment\">// Make sure that rogue clicks don't get through while allapps is launching, or after the</span></div><div class=\"line\">        <span class=\"comment\">// view has detached (it's possible for this to happen if the view is removed mid touch).</span></div><div class=\"line\">        <span class=\"keyword\">if</span> (v.getWindowToken() == <span class=\"keyword\">null</span>) &#123;</div><div class=\"line\">            <span class=\"keyword\">return</span>;</div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\">        <span class=\"keyword\">if</span> (!mWorkspace.isFinishedSwitchingState()) &#123;</div><div class=\"line\">            <span class=\"keyword\">return</span>;</div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\">        Object tag = v.getTag();</div><div class=\"line\">        <span class=\"keyword\">if</span> (tag <span class=\"keyword\">instanceof</span> ShortcutInfo) &#123;</div><div class=\"line\">            <span class=\"comment\">// Open shortcut</span></div><div class=\"line\">            <span class=\"keyword\">final</span> Intent intent = ((ShortcutInfo) tag).intent;</div><div class=\"line\">            <span class=\"keyword\">int</span>[] pos = <span class=\"keyword\">new</span> <span class=\"keyword\">int</span>[<span class=\"number\">2</span>];</div><div class=\"line\">            v.getLocationOnScreen(pos);</div><div class=\"line\">            intent.setSourceBounds(<span class=\"keyword\">new</span> Rect(pos[<span class=\"number\">0</span>], pos[<span class=\"number\">1</span>],</div><div class=\"line\">                    pos[<span class=\"number\">0</span>] + v.getWidth(), pos[<span class=\"number\">1</span>] + v.getHeight()));</div><div class=\"line\"></div><div class=\"line\">            <span class=\"keyword\">boolean</span> success = startActivitySafely(v, intent, tag);</div><div class=\"line\"></div><div class=\"line\">            <span class=\"keyword\">if</span> (success &amp;&amp; v <span class=\"keyword\">instanceof</span> BubbleTextView) &#123;</div><div class=\"line\">                mWaitingForResume = (BubbleTextView) v;</div><div class=\"line\">                mWaitingForResume.setStayPressed(<span class=\"keyword\">true</span>);</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (tag <span class=\"keyword\">instanceof</span> FolderInfo) &#123;</div><div class=\"line\">            <span class=\"keyword\">if</span> (v <span class=\"keyword\">instanceof</span> FolderIcon) &#123;</div><div class=\"line\">                FolderIcon fi = (FolderIcon) v;</div><div class=\"line\">                handleFolderClick(fi);</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (v == mAllAppsButton) &#123;</div><div class=\"line\">            <span class=\"keyword\">if</span> (isAllAppsVisible()) &#123;</div><div class=\"line\">                showWorkspace(<span class=\"keyword\">true</span>);</div><div class=\"line\">            &#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">                onClickAllAppsButton(v);</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div></pre></td></tr></table></figure></p>\n<p>从上面可以看到，在桌面上点击快捷图标的时候，会调用<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">startActivitySafely(v, intent, tag);</div></pre></td></tr></table></figure></p>\n<p>具体代码就不抄了，看一下上面的链接中的源码就好，在该方法中调用了<code>startActivity(v, intent, tag)</code>，这里会调用Activity.startActivity(intent, opts.toBundle())，这个方法熟悉吗？这就是我们经常用到的Activity.startActivity(Intent)的重载函数。而且由于设置了<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">intent.addFlags(Intent.FLAG_ACTIVITY_NEW_TASK);</div></pre></td></tr></table></figure></p>\n<p>所以这个Activity会添加到一个新的Task栈中，而且，startActivity()调用的其实是startActivityForResult()这个方法。<br>所以现在明确了，Launcher中开启一个App，其实和我们在Activity中直接startActivity()基本一样，都是调用了Activity.startActivityForResult()。</p>\n<h6 id=\"Instrumentation\"><a href=\"#Instrumentation\" class=\"headerlink\" title=\"Instrumentation\"></a>Instrumentation</h6><p>每个Activity都持有Instrumentation对象的一个引用，但是整个进程只会存在一个Instrumentation对象。当startActivityForResult()调用之后，实际上还是调用了mInstrumentation.execStartActivity().<br>下面是mInstrumetation.execStartActivity()的实现<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> ActivityResult <span class=\"title\">execStartActivity</span><span class=\"params\">(</div><div class=\"line\">            Context who, IBinder contextThread, IBinder token, Activity target,</div><div class=\"line\">            Intent intent, <span class=\"keyword\">int</span> requestCode, Bundle options)</span> </span>&#123;</div><div class=\"line\">        IApplicationThread whoThread = (IApplicationThread) contextThread;</div><div class=\"line\">        Uri referrer = target != <span class=\"keyword\">null</span> ? target.onProvideReferrer() : <span class=\"keyword\">null</span>;</div><div class=\"line\">        <span class=\"keyword\">if</span> (referrer != <span class=\"keyword\">null</span>) &#123;</div><div class=\"line\">            intent.putExtra(Intent.EXTRA_REFERRER, referrer);</div><div class=\"line\">        &#125;</div><div class=\"line\">        <span class=\"keyword\">if</span> (mActivityMonitors != <span class=\"keyword\">null</span>) &#123;</div><div class=\"line\">            <span class=\"keyword\">synchronized</span> (mSync) &#123;</div><div class=\"line\">                <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> N = mActivityMonitors.size();</div><div class=\"line\">                <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i=<span class=\"number\">0</span>; i&lt;N; i++) &#123;</div><div class=\"line\">                    <span class=\"keyword\">final</span> ActivityMonitor am = mActivityMonitors.get(i);</div><div class=\"line\">                    <span class=\"keyword\">if</span> (am.match(who, <span class=\"keyword\">null</span>, intent)) &#123;</div><div class=\"line\">                        am.mHits++;</div><div class=\"line\">                        <span class=\"keyword\">if</span> (am.isBlocking()) &#123;</div><div class=\"line\">                            <span class=\"keyword\">return</span> requestCode &gt;= <span class=\"number\">0</span> ? am.getResult() : <span class=\"keyword\">null</span>;</div><div class=\"line\">                        &#125;</div><div class=\"line\">                        <span class=\"keyword\">break</span>;</div><div class=\"line\">                    &#125;</div><div class=\"line\">                &#125;</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;</div><div class=\"line\">        <span class=\"keyword\">try</span> &#123;</div><div class=\"line\">            intent.migrateExtraStreamToClipData();</div><div class=\"line\">            intent.prepareToLeaveProcess();</div><div class=\"line\">            <span class=\"keyword\">int</span> result = ActivityManagerNative.getDefault()</div><div class=\"line\">                .startActivity(whoThread, who.getBasePackageName(), intent,</div><div class=\"line\">                        intent.resolveTypeIfNeeded(who.getContentResolver()),</div><div class=\"line\">                        token, target != <span class=\"keyword\">null</span> ? target.mEmbeddedID : <span class=\"keyword\">null</span>,</div><div class=\"line\">                        requestCode, <span class=\"number\">0</span>, <span class=\"keyword\">null</span>, options);</div><div class=\"line\">            checkStartActivityResult(result, intent);</div><div class=\"line\">        &#125; <span class=\"keyword\">catch</span> (RemoteException e) &#123;</div><div class=\"line\">            <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> RuntimeException(<span class=\"string\">\"Failure from system\"</span>, e);</div><div class=\"line\">        &#125;</div><div class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">null</span>;</div><div class=\"line\">    &#125;</div></pre></td></tr></table></figure></p>\n<p>这里的 ActivityManagerNative.getDefault 返回ActivityManagerService的远程接口，即 ActivityManagerProxy 接口，有人可能会问了为什么会是ActivityManagerProxy，这就涉及到Binder通信了，这里不再展开。通过Binder驱动程序， ActivityManagerProxy 与AMS服务通信，则实现了跨进程到System进程。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">/**</div><div class=\"line\">    * Retrieve the system's default/global activity manager.</div><div class=\"line\">    */</span></div><div class=\"line\">   <span class=\"function\"><span class=\"keyword\">static</span> <span class=\"keyword\">public</span> IActivityManager <span class=\"title\">getDefault</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">       <span class=\"keyword\">return</span> gDefault.get();</div><div class=\"line\">   &#125;</div><div class=\"line\"></div><div class=\"line\">   <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> Singleton&lt;IActivityManager&gt; gDefault = <span class=\"keyword\">new</span> Singleton&lt;IActivityManager&gt;() &#123;</div><div class=\"line\">       <span class=\"function\"><span class=\"keyword\">protected</span> IActivityManager <span class=\"title\">create</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">           IBinder b = ServiceManager.getService(<span class=\"string\">\"activity\"</span>);</div><div class=\"line\">           <span class=\"keyword\">if</span> (<span class=\"keyword\">false</span>) &#123;</div><div class=\"line\">               Log.v(<span class=\"string\">\"ActivityManager\"</span>, <span class=\"string\">\"default service binder = \"</span> + b);</div><div class=\"line\">           &#125;</div><div class=\"line\">           IActivityManager am = asInterface(b);</div><div class=\"line\">           <span class=\"keyword\">if</span> (<span class=\"keyword\">false</span>) &#123;</div><div class=\"line\">               Log.v(<span class=\"string\">\"ActivityManager\"</span>, <span class=\"string\">\"default service = \"</span> + am);</div><div class=\"line\">           &#125;</div><div class=\"line\">           <span class=\"keyword\">return</span> am;</div><div class=\"line\">       &#125;</div><div class=\"line\">   &#125;;</div><div class=\"line\"></div><div class=\"line\">   <span class=\"comment\">/**</div><div class=\"line\">    * Cast a Binder object into an activity manager interface, generating</div><div class=\"line\">    * a proxy if needed.</div><div class=\"line\">    */</span></div><div class=\"line\">   <span class=\"function\"><span class=\"keyword\">static</span> <span class=\"keyword\">public</span> IActivityManager <span class=\"title\">asInterface</span><span class=\"params\">(IBinder obj)</span> </span>&#123;</div><div class=\"line\">       <span class=\"keyword\">if</span> (obj == <span class=\"keyword\">null</span>) &#123;</div><div class=\"line\">           <span class=\"keyword\">return</span> <span class=\"keyword\">null</span>;</div><div class=\"line\">       &#125;</div><div class=\"line\">       IActivityManager in =</div><div class=\"line\">           (IActivityManager)obj.queryLocalInterface(descriptor);</div><div class=\"line\">       <span class=\"keyword\">if</span> (in != <span class=\"keyword\">null</span>) &#123;</div><div class=\"line\">           <span class=\"keyword\">return</span> in;</div><div class=\"line\">       &#125;</div><div class=\"line\"></div><div class=\"line\">       <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> ActivityManagerProxy(obj);</div><div class=\"line\">   &#125;</div></pre></td></tr></table></figure>\n<h6 id=\"AMS响应Launcher进程请求\"><a href=\"#AMS响应Launcher进程请求\" class=\"headerlink\" title=\"AMS响应Launcher进程请求\"></a>AMS响应Launcher进程请求</h6><p>至此，点击桌面图标调用startActivity()，终于把数据和要开启Activity的请求发送到了AMS了,AMS收到startActivity的请求之后，会按照如下的方法链进行调用：<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">@Override</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> <span class=\"title\">startActivity</span><span class=\"params\">(IApplicationThread caller, String callingPackage,</div><div class=\"line\">            Intent intent, String resolvedType, IBinder resultTo, String resultWho, <span class=\"keyword\">int</span> requestCode,</div><div class=\"line\">            <span class=\"keyword\">int</span> startFlags, ProfilerInfo profilerInfo, Bundle options)</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> startActivityAsUser(caller, callingPackage, intent, resolvedType, resultTo,</div><div class=\"line\">            resultWho, requestCode, startFlags, profilerInfo, options,</div><div class=\"line\">            UserHandle.getCallingUserId());</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"meta\">@Override</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> <span class=\"title\">startActivityAsUser</span><span class=\"params\">(IApplicationThread caller, String callingPackage,</div><div class=\"line\">            Intent intent, String resolvedType, IBinder resultTo, String resultWho, <span class=\"keyword\">int</span> requestCode,</div><div class=\"line\">            <span class=\"keyword\">int</span> startFlags, ProfilerInfo profilerInfo, Bundle options, <span class=\"keyword\">int</span> userId)</span> </span>&#123;</div><div class=\"line\">        enforceNotIsolatedCaller(<span class=\"string\">\"startActivity\"</span>);</div><div class=\"line\">        userId = handleIncomingUser(Binder.getCallingPid(), Binder.getCallingUid(), userId,</div><div class=\"line\">                <span class=\"keyword\">false</span>, ALLOW_FULL_ONLY, <span class=\"string\">\"startActivity\"</span>, <span class=\"keyword\">null</span>);</div><div class=\"line\">        <span class=\"comment\">// <span class=\"doctag\">TODO:</span> Switch to user app stacks here.</span></div><div class=\"line\">        <span class=\"keyword\">return</span> mStackSupervisor.startActivityMayWait(caller, -<span class=\"number\">1</span>, callingPackage, intent,</div><div class=\"line\">                resolvedType, <span class=\"keyword\">null</span>, <span class=\"keyword\">null</span>, resultTo, resultWho, requestCode, startFlags,</div><div class=\"line\">                profilerInfo, <span class=\"keyword\">null</span>, <span class=\"keyword\">null</span>, options, <span class=\"keyword\">false</span>, userId, <span class=\"keyword\">null</span>, <span class=\"keyword\">null</span>);</div><div class=\"line\">    &#125;</div></pre></td></tr></table></figure></p>\n<p>这里又出现了一个<code>mStackSupervisor</code>，定义是这么说的<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">/** Run all ActivityStacks through this */</span></div><div class=\"line\">    ActivityStackSupervisor mStackSupervisor;</div></pre></td></tr></table></figure></p>\n<p>在<code>mStackSupervisor.startActivityMayWait()</code>方法中又调用了<code>startActivityLocked()</code>方法，接着调用了<code>startActivityUncheckedLocked()</code>方法，在这个方法中一大堆眼花缭乱的判断，最终调用了<code>targetStack.startActivityLocked(r, newTask, doResume, keepCurTransition, options)</code>方法，然后调用了<code>mStackSupervisor.resumeTopActivitiesLocked(this, r, options)</code>方法，然后调用<code>result = targetStack.resumeTopActivityLocked(target, targetOptions)</code>方法，调用<code>result = resumeTopActivityInnerLocked(prev, options)</code>方法，在这个方法里，prev.app为记录启动Lancher进程的ProcessRecord，prev.app.thread为Lancher进程的远程调用接口IApplicationThead，所以可以调用prev.app.thread.schedulePauseActivity，到Lancher进程暂停指定Activity。至此，AMS对Launcher的请求已经响应，这是我们发现又通过Binder通信回调至Launcher进程</p>\n<h6 id=\"Launcher进程挂起Launcher，再次通知AMS\"><a href=\"#Launcher进程挂起Launcher，再次通知AMS\" class=\"headerlink\" title=\"Launcher进程挂起Launcher，再次通知AMS\"></a>Launcher进程挂起Launcher，再次通知AMS</h6><p>看一下怎么挂起Launcher的,在ActivityThread中：<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">handlePauseActivity</span><span class=\"params\">(IBinder token, <span class=\"keyword\">boolean</span> finished,</div><div class=\"line\">            <span class=\"keyword\">boolean</span> userLeaving, <span class=\"keyword\">int</span> configChanges, <span class=\"keyword\">boolean</span> dontReport)</span> </span>&#123;</div><div class=\"line\">        ActivityClientRecord r = mActivities.get(token);</div><div class=\"line\">        <span class=\"keyword\">if</span> (r != <span class=\"keyword\">null</span>) &#123;</div><div class=\"line\">            <span class=\"comment\">//Slog.v(TAG, \"userLeaving=\" + userLeaving + \" handling pause of \" + r);</span></div><div class=\"line\">            <span class=\"keyword\">if</span> (userLeaving) &#123;</div><div class=\"line\">                performUserLeavingActivity(r);</div><div class=\"line\">            &#125;</div><div class=\"line\"></div><div class=\"line\">            r.activity.mConfigChangeFlags |= configChanges;</div><div class=\"line\">            performPauseActivity(token, finished, r.isPreHoneycomb());</div><div class=\"line\"></div><div class=\"line\">            <span class=\"comment\">// Make sure any pending writes are now committed.</span></div><div class=\"line\">            <span class=\"keyword\">if</span> (r.isPreHoneycomb()) &#123;</div><div class=\"line\">                QueuedWork.waitToFinish();</div><div class=\"line\">            &#125;</div><div class=\"line\"></div><div class=\"line\">            <span class=\"comment\">// Tell the activity manager we have paused.</span></div><div class=\"line\">            <span class=\"keyword\">if</span> (!dontReport) &#123;</div><div class=\"line\">                <span class=\"keyword\">try</span> &#123;</div><div class=\"line\">                    ActivityManagerNative.getDefault().activityPaused(token);</div><div class=\"line\">                &#125; <span class=\"keyword\">catch</span> (RemoteException ex) &#123;</div><div class=\"line\">                &#125;</div><div class=\"line\">            &#125;</div><div class=\"line\">            mSomeActivitiesChanged = <span class=\"keyword\">true</span>;</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div></pre></td></tr></table></figure></p>\n<p>这部分Launcher的ActivityThread处理页面Paused并且再次通过ActivityManagerProxy通知AMS。</p>\n<h6 id=\"AMS创建新的进程\"><a href=\"#AMS创建新的进程\" class=\"headerlink\" title=\"AMS创建新的进程\"></a>AMS创建新的进程</h6><p>创建新进程的时候，AMS会保存一个ProcessRecord信息，如果应用程序中的AndroidManifest.xml配置文件中，我们没有指定Application标签的process属性，系统就会默认使用package的名称。每一个应用程序都有自己的uid，因此，这里uid + process的组合就可以为每一个应用程序创建一个ProcessRecord。<br>在<code>ActivityManagerService</code>中，<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">final</span> <span class=\"keyword\">void</span> <span class=\"title\">startProcessLocked</span><span class=\"params\">(ProcessRecord app, String hostingType,</div><div class=\"line\">            String hostingNameStr, String abiOverride, String entryPoint, String[] entryPointArgs)</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">long</span> startTime = SystemClock.elapsedRealtime();</div><div class=\"line\">        ......</div><div class=\"line\">        <span class=\"comment\">// Start the process.  It will either succeed and return a result containing</span></div><div class=\"line\">            <span class=\"comment\">// the PID of the new process, or else throw a RuntimeException.</span></div><div class=\"line\">            <span class=\"keyword\">boolean</span> isActivityProcess = (entryPoint == <span class=\"keyword\">null</span>);</div><div class=\"line\">            <span class=\"keyword\">if</span> (entryPoint == <span class=\"keyword\">null</span>) entryPoint = <span class=\"string\">\"android.app.ActivityThread\"</span>;</div><div class=\"line\">            Trace.traceBegin(Trace.TRACE_TAG_ACTIVITY_MANAGER, <span class=\"string\">\"Start proc: \"</span> +</div><div class=\"line\">                    app.processName);</div><div class=\"line\">            checkTime(startTime, <span class=\"string\">\"startProcess: asking zygote to start proc\"</span>);</div><div class=\"line\">            Process.ProcessStartResult startResult = Process.start(entryPoint,</div><div class=\"line\">                    app.processName, uid, uid, gids, debugFlags, mountExternal,</div><div class=\"line\">                    app.info.targetSdkVersion, app.info.seinfo, requiredAbi, instructionSet,</div><div class=\"line\">                    app.info.dataDir, entryPointArgs);</div><div class=\"line\">            checkTime(startTime, <span class=\"string\">\"startProcess: returned from zygote!\"</span>);</div><div class=\"line\">            Trace.traceEnd(Trace.TRACE_TAG_ACTIVITY_MANAGER);</div><div class=\"line\"></div><div class=\"line\">            <span class=\"keyword\">if</span> (app.isolated) &#123;</div><div class=\"line\">                mBatteryStatsService.addIsolatedUid(app.uid, app.info.uid);</div><div class=\"line\">            &#125;</div><div class=\"line\">            mBatteryStatsService.noteProcessStart(app.processName, app.info.uid);</div><div class=\"line\">            checkTime(startTime, <span class=\"string\">\"startProcess: done updating battery stats\"</span>);</div></pre></td></tr></table></figure></p>\n<p>这里主要是调用Process.start接口来创建一个新的进程，新的进程会导入android.app.ActivityThread类，并且执行它的main函数，这就是每一个应用程序都有一个ActivityThread实例来对应的原因。</p>\n<h6 id=\"应用进程初始化\"><a href=\"#应用进程初始化\" class=\"headerlink\" title=\"应用进程初始化\"></a>应用进程初始化</h6><p>来看Activity的main函数，这里绑定了主线程的Looper，并进入消息循环，大家应该知道，整个Android系统是消息驱动的，这也是为什么主线程默认绑定Looper的原因：<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</div><div class=\"line\">        Trace.traceBegin(Trace.TRACE_TAG_ACTIVITY_MANAGER, <span class=\"string\">\"ActivityThreadMain\"</span>);</div><div class=\"line\">        SamplingProfilerIntegration.start();</div><div class=\"line\"></div><div class=\"line\">        <span class=\"comment\">// CloseGuard defaults to true and can be quite spammy.  We</span></div><div class=\"line\">        <span class=\"comment\">// disable it here, but selectively enable it later (via</span></div><div class=\"line\">        <span class=\"comment\">// StrictMode) on debug builds, but using DropBox, not logs.</span></div><div class=\"line\">        CloseGuard.setEnabled(<span class=\"keyword\">false</span>);</div><div class=\"line\"></div><div class=\"line\">        Environment.initForCurrentUser();</div><div class=\"line\"></div><div class=\"line\">        <span class=\"comment\">// Set the reporter for event logging in libcore</span></div><div class=\"line\">        EventLogger.setReporter(<span class=\"keyword\">new</span> EventLoggingReporter());</div><div class=\"line\"></div><div class=\"line\">        AndroidKeyStoreProvider.install();</div><div class=\"line\"></div><div class=\"line\">        <span class=\"comment\">// Make sure TrustedCertificateStore looks in the right place for CA certificates</span></div><div class=\"line\">        <span class=\"keyword\">final</span> File configDir = Environment.getUserConfigDirectory(UserHandle.myUserId());</div><div class=\"line\">        TrustedCertificateStore.setDefaultUserDirectory(configDir);</div><div class=\"line\"></div><div class=\"line\">        Process.setArgV0(<span class=\"string\">\"&lt;pre-initialized&gt;\"</span>);</div><div class=\"line\"></div><div class=\"line\">        Looper.prepareMainLooper();</div><div class=\"line\"></div><div class=\"line\">        ActivityThread thread = <span class=\"keyword\">new</span> ActivityThread();</div><div class=\"line\">        thread.attach(<span class=\"keyword\">false</span>);</div><div class=\"line\"></div><div class=\"line\">        <span class=\"keyword\">if</span> (sMainThreadHandler == <span class=\"keyword\">null</span>) &#123;</div><div class=\"line\">            sMainThreadHandler = thread.getHandler();</div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\">        <span class=\"keyword\">if</span> (<span class=\"keyword\">false</span>) &#123;</div><div class=\"line\">            Looper.myLooper().setMessageLogging(<span class=\"keyword\">new</span></div><div class=\"line\">                    LogPrinter(Log.DEBUG, <span class=\"string\">\"ActivityThread\"</span>));</div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\">        <span class=\"comment\">// End of event ActivityThreadMain.</span></div><div class=\"line\">        Trace.traceEnd(Trace.TRACE_TAG_ACTIVITY_MANAGER);</div><div class=\"line\">        Looper.loop();</div><div class=\"line\"></div><div class=\"line\">        <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> RuntimeException(<span class=\"string\">\"Main thread loop unexpectedly exited\"</span>);</div><div class=\"line\">    &#125;</div></pre></td></tr></table></figure></p>\n<p>attach函数最终调用了ActivityManagerService的远程接口ActivityManagerProxy的attachApplication函数，传入的参数是mAppThread，这是一个ApplicationThread类型的Binder对象，它的作用是AMS与应用进程进行进程间通信的。<br>将进程和指定的Application绑定起来。这个是通过上节的ActivityThread对象中调用bindApplication()方法完成的。该方法发送一个BIND_APPLICATION的消息到消息队列中, 最终通过handleBindApplication()方法处理该消息. 然后调用makeApplication()方法来加载App的classes到内存中。</p>\n<h6 id=\"在AMS中注册应用进程，启动栈顶页面\"><a href=\"#在AMS中注册应用进程，启动栈顶页面\" class=\"headerlink\" title=\"在AMS中注册应用进程，启动栈顶页面\"></a>在AMS中注册应用进程，启动栈顶页面</h6><p>mMainStack.topRunningActivityLocked(null)从堆栈顶端取出要启动的Activity，并在realStartActivityLockedhan函数中通过ApplicationThreadProxy调回App进程启动页面。<br>在<code>ActivityStackSupervisor</code>中<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">final</span> <span class=\"keyword\">boolean</span> <span class=\"title\">realStartActivityLocked</span><span class=\"params\">(ActivityRecord r,</div><div class=\"line\">            ProcessRecord app, <span class=\"keyword\">boolean</span> andResume, <span class=\"keyword\">boolean</span> checkConfig)</span></div><div class=\"line\">            <span class=\"keyword\">throws</span> RemoteException </span>&#123;</div><div class=\"line\">                    app.thread.scheduleLaunchActivity(<span class=\"keyword\">new</span> Intent(r.intent), r.appToken,</div><div class=\"line\">                    System.identityHashCode(r), r.info, <span class=\"keyword\">new</span> Configuration(mService.mConfiguration),</div><div class=\"line\">                    <span class=\"keyword\">new</span> Configuration(stack.mOverrideConfig), r.compat, r.launchedFromPackage,</div><div class=\"line\">                    task.voiceInteractor, app.repProcState, r.icicle, r.persistentState, results,</div><div class=\"line\">                    newIntents, !andResume, mService.isNextTransitionForward(), profilerInfo);</div><div class=\"line\">            &#125;</div></pre></td></tr></table></figure></p>\n<p>它会调用application线程对象中的scheduleLaunchActivity()发送一个LAUNCH_ACTIVITY消息到消息队列中, 通过 handleLaunchActivity()来处理该消息。在 handleLaunchActivity()通过performLaunchActiivty()方法回调Activity的onCreate()方法和onStart()方法，然后通过handleResumeActivity()方法，回调Activity的onResume()方法，而后会通知AMS该MainActivity已经处于resume状态最终显示Activity界面。<br>至此，整个启动流程告一段落。</p>\n<p>最后：</p>\n<h6 id=\"一个App的程序入口到底是什么？\"><a href=\"#一个App的程序入口到底是什么？\" class=\"headerlink\" title=\"一个App的程序入口到底是什么？\"></a>一个App的程序入口到底是什么？</h6><p>是ActivityThread.main()。</p>\n<h6 id=\"整个App的主线程的消息循环是在哪里创建的？\"><a href=\"#整个App的主线程的消息循环是在哪里创建的？\" class=\"headerlink\" title=\"整个App的主线程的消息循环是在哪里创建的？\"></a>整个App的主线程的消息循环是在哪里创建的？</h6><p>是在ActivityThread初始化的时候，就已经创建消息循环了，所以在主线程里面创建Handler不需要指定Looper，而如果在其他线程使用Handler，则需要单独使用Looper.prepare()和Looper.loop()创建消息循环。可以看ActivityThread的main方法</p>\n<h6 id=\"Application是在什么时候创建的？onCreate-什么时候调用的？\"><a href=\"#Application是在什么时候创建的？onCreate-什么时候调用的？\" class=\"headerlink\" title=\"Application是在什么时候创建的？onCreate()什么时候调用的？\"></a>Application是在什么时候创建的？onCreate()什么时候调用的？</h6><p>也是在ActivityThread.main()的时候，就是在thread.attach(false)的时候。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">if</span> (!system) &#123;</div><div class=\"line\">            ViewRootImpl.addFirstDrawHandler(<span class=\"keyword\">new</span> Runnable() &#123;</div><div class=\"line\">                <span class=\"meta\">@Override</span></div><div class=\"line\">                <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">run</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">                    ensureJitEnabled();</div><div class=\"line\">                &#125;</div><div class=\"line\">            &#125;);</div><div class=\"line\">            android.ddm.DdmHandleAppName.setAppName(<span class=\"string\">\"&lt;pre-initialized&gt;\"</span>,</div><div class=\"line\">                                                    UserHandle.myUserId());</div><div class=\"line\">            RuntimeInit.setApplicationObject(mAppThread.asBinder());</div><div class=\"line\">            <span class=\"keyword\">final</span> IActivityManager mgr = ActivityManagerNative.getDefault();</div><div class=\"line\">            <span class=\"keyword\">try</span> &#123;</div><div class=\"line\">                mgr.attachApplication(mAppThread);</div><div class=\"line\">            &#125; <span class=\"keyword\">catch</span> (RemoteException ex) &#123;</div><div class=\"line\">                <span class=\"comment\">// Ignore</span></div><div class=\"line\">            &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>这里需要关注的就是mgr.attachApplication(mAppThread)，这个就会通过Binder调用到AMS里面对应的方法:<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">@Override</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">final</span> <span class=\"keyword\">void</span> <span class=\"title\">attachApplication</span><span class=\"params\">(IApplicationThread thread)</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">synchronized</span> (<span class=\"keyword\">this</span>) &#123;</div><div class=\"line\">        <span class=\"keyword\">int</span> callingPid = Binder.getCallingPid();</div><div class=\"line\">        <span class=\"keyword\">final</span> <span class=\"keyword\">long</span> origId = Binder.clearCallingIdentity();</div><div class=\"line\">        attachApplicationLocked(thread, callingPid);</div><div class=\"line\">        Binder.restoreCallingIdentity(origId);</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>然后调用的就是<code>private final boolean attachApplicationLocked(IApplicationThread thread,int pid)</code>方法，thread是IApplicationThread，实际上就是ApplicationThread在服务端的代理类ApplicationThreadProxy，然后又通过IPC就会调用到ApplicationThread的对应方法。这个方法里面又调用了<code>sendMessage()</code>，里面有函数的编号H.BIND_APPLICATION，然后这个Messge会被H这个Handler处理:<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">private</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">H</span> <span class=\"keyword\">extends</span> <span class=\"title\">Handler</span> </span>&#123;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> BIND_APPLICATION        = <span class=\"number\">110</span>;</div><div class=\"line\">    <span class=\"keyword\">case</span> BIND_APPLICATION:</div><div class=\"line\">                    Trace.traceBegin(Trace.TRACE_TAG_ACTIVITY_MANAGER, <span class=\"string\">\"bindApplication\"</span>);</div><div class=\"line\">                    AppBindData data = (AppBindData)msg.obj;</div><div class=\"line\">                    handleBindApplication(data);</div><div class=\"line\">                    Trace.traceEnd(Trace.TRACE_TAG_ACTIVITY_MANAGER);</div><div class=\"line\">                    <span class=\"keyword\">break</span>;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>然后在<code>handleBindApplication(data)</code>方法中<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div></pre></td><td class=\"code\"><pre><div class=\"line\"> <span class=\"keyword\">try</span> &#123;</div><div class=\"line\">      java.lang.ClassLoader cl = instrContext.getClassLoader();</div><div class=\"line\">      mInstrumentation = (Instrumentation)cl.loadClass(data.instrumentationName.getClassName()).newInstance();</div><div class=\"line\">&#125; <span class=\"keyword\">catch</span> (Exception e) &#123;</div><div class=\"line\">        <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> RuntimeException(<span class=\"string\">\"Unable to instantiate instrumentation \"</span>+ data.instrumentationName + <span class=\"string\">\": \"</span> + e.toString(), e);</div><div class=\"line\"></div><div class=\"line\">        ......</div><div class=\"line\">         <span class=\"comment\">// Do this after providers, since instrumentation tests generally start their</span></div><div class=\"line\">            <span class=\"comment\">// test thread at this point, and we don't want that racing.</span></div><div class=\"line\">            <span class=\"keyword\">try</span> &#123;</div><div class=\"line\">                mInstrumentation.onCreate(data.instrumentationArgs);</div><div class=\"line\">            &#125;</div><div class=\"line\">            <span class=\"keyword\">catch</span> (Exception e) &#123;</div><div class=\"line\">                <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> RuntimeException(</div><div class=\"line\">                    <span class=\"string\">\"Exception thrown in onCreate() of \"</span></div><div class=\"line\">                    + data.instrumentationName + <span class=\"string\">\": \"</span> + e.toString(), e);</div><div class=\"line\">            &#125;</div><div class=\"line\"></div><div class=\"line\">            <span class=\"keyword\">try</span> &#123;</div><div class=\"line\">                mInstrumentation.callApplicationOnCreate(app);</div><div class=\"line\">            &#125; <span class=\"keyword\">catch</span> (Exception e) &#123;</div><div class=\"line\">                <span class=\"keyword\">if</span> (!mInstrumentation.onException(app, e)) &#123;</div><div class=\"line\">                    <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> RuntimeException(</div><div class=\"line\">                        <span class=\"string\">\"Unable to create application \"</span> + app.getClass().getName()</div><div class=\"line\">                        + <span class=\"string\">\": \"</span> + e.toString(), e);</div><div class=\"line\">                &#125;</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125; <span class=\"keyword\">finally</span> &#123;</div><div class=\"line\">            StrictMode.setThreadPolicy(savedPolicy);</div><div class=\"line\">        &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>不同的版本代码不尽相同，但是基本逻辑不会变。<br>参考、抄袭的链接如下：<br><a href=\"https://blog.csdn.net/bfboys/article/details/52564531\">https://blog.csdn.net/bfboys/article/details/52564531</a><br><a href=\"https://www.jianshu.com/p/a72c5ccbd150\">https://www.jianshu.com/p/a72c5ccbd150</a><br><a href=\"https://www.jianshu.com/p/6037f6fda285\">https://www.jianshu.com/p/6037f6fda285</a><br><a href=\"https://www.jianshu.com/p/a72c5ccbd150\">https://www.jianshu.com/p/a72c5ccbd150</a></p>\n<hr>\n<p>以上</p>"},{"title":"Android中使用WebSocket","date":"2017-12-25T08:23:46.000Z","keywords":"Android使用WebSocket","_content":"背景：后端逻辑框架调整，将原来的推送和轮询方式改成了使用`WebSocket`通信。原来的请求方式是由app发起请求，appServer对请求进行分发，中转中继服务器将具体请求下发到对应的物联网服务器，物联网服务器将指令下发到指定的设备。整个流程涉及到很多层http请求，并且每个服务的回调接口还不一致，只能在app发情请求之后，接着去轮询服务器，服务器端去查询设备状态、是否对指令有响应。\n改版后涉及到对物联网的请求全部改成`WebSocket`,不在轮询，而是被动等待。\n后端使用的是`Spring`实现的`WebSocket`,app端使用的是[https://github.com/TooTallNate/Java-WebSocket](https://github.com/TooTallNate/Java-WebSocket)这个开源项目。\n<!-- more -->\n#### APP端实现\n1. 添加依赖`compile \"org.java-websocket:Java-WebSocket:1.3.7\"`\n2. 我们只需要关心三方库中`WebSocketClient`类就可以了，其他细节底层已经封装好了。\n3. 类中有四个方法需要重写：\n``` java\n/**打开连接*/\n public void onOpen(ServerHandshake handshakedata)\n /**服务端返回消息*/\n public void onMessage(String message) \n /**关闭连接*/\n public void onClose(int code, String reason, boolean remote)\n /**出现异常*/\n public void onError(Exception ex)\n```\n4. 一个简单的小测试，app端定义了一个发送按钮，和一个展示消息的文本\n``` xml\n<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<LinearLayout xmlns:android=\"http://schemas.android.com/apk/res/android\"\n    xmlns:tools=\"http://schemas.android.com/tools\"\n    android:layout_width=\"match_parent\"\n    android:layout_height=\"match_parent\"\n    android:orientation=\"vertical\"\n    tools:context=\"com.huangyuanlove.testwebsocket.MainActivity\">\n\n    <ScrollView\n        android:layout_width=\"match_parent\"\n        android:layout_height=\"0dp\"\n        android:layout_weight=\"1\">\n\n        <TextView\n            android:id=\"@+id/show_message\"\n            android:layout_width=\"wrap_content\"\n            android:layout_height=\"wrap_content\" />\n    </ScrollView>\n\n    <LinearLayout\n        android:layout_width=\"match_parent\"\n        android:layout_height=\"wrap_content\"\n        android:orientation=\"horizontal\">\n\n        <EditText\n            android:id=\"@+id/edit_text\"\n            android:layout_width=\"0dp\"\n            android:layout_height=\"wrap_content\"\n            android:layout_weight=\"1\" />\n\n        <TextView\n            android:id=\"@+id/send\"\n            android:layout_width=\"wrap_content\"\n            android:layout_height=\"wrap_content\"\n            android:background=\"@color/colorAccent\"\n            android:padding=\"10dp\"\n            android:text=\"发送\"\n            android:textColor=\"@android:color/black\" />\n    </LinearLayout>\n\n</LinearLayout>\n```\n5. 在代码里面处理具体逻辑：\n``` java\nimport android.os.Bundle;\nimport android.os.Handler;\nimport android.os.Message;\nimport android.support.design.widget.Snackbar;\nimport android.support.v7.app.AppCompatActivity;\nimport android.view.View;\nimport android.widget.EditText;\nimport android.widget.TextView;\n\nimport org.java_websocket.client.WebSocketClient;\nimport org.java_websocket.handshake.ServerHandshake;\n\nimport java.net.URI;\nimport java.util.Date;\n\npublic class MainActivity extends AppCompatActivity implements View.OnClickListener {\n\n\n    private TextView showMessage;\n    private EditText editText;\n    private WebSocketClient webSocketClient;\n    private StringBuilder sb = new StringBuilder();\n\n    private Handler handler = new Handler(new Handler.Callback() {\n        @Override\n        public boolean handleMessage(Message msg) {\n            sb.append(\"服务器返回数据：\");\n            sb.append(msg.obj.toString());\n            sb.append(\"\\n\");\n            showMessage.setText(sb.toString());\n            return true;\n        }\n    });\n\n    @Override\n    protected void onCreate(Bundle savedInstanceState) {\n        super.onCreate(savedInstanceState);\n        setContentView(R.layout.activity_main);\n        showMessage = findViewById(R.id.show_message);\n        editText = findViewById(R.id.edit_text);\n        findViewById(R.id.send).setOnClickListener(this);\n        URI serverURI = URI.create(\"ws://192.168.1.199:8887\");\n        webSocketClient = new WebSocketClient(serverURI) {\n            @Override\n            public void onOpen(ServerHandshake handshakedata) {\n                sb.append(\"onOpen at time：\");\n                sb.append(new Date());\n                sb.append(\"服务器状态：\");\n                sb.append(handshakedata.getHttpStatusMessage());\n                sb.append(\"\\n\");\n                showMessage.setText(sb.toString());\n            }\n            @Override\n            public void onMessage(String message) {\n                Message handlerMessage = Message.obtain();\n                handlerMessage.obj = message;\n                handler.sendMessage(handlerMessage);\n            }\n            @Override\n            public void onClose(int code, String reason, boolean remote) {\n                sb.append(\"onClose at time：\");\n                sb.append(new Date());\n                sb.append(\"\\n\");\n                sb.append(\"onClose info:\");\n                sb.append(code);\n                sb.append(reason);\n                sb.append(remote);\n                sb.append(\"\\n\");\n                showMessage.setText(sb.toString());\n            }\n\n            @Override\n            public void onError(Exception ex) {\n                sb.append(\"onError at time：\");\n                sb.append(new Date());\n                sb.append(\"\\n\");\n                sb.append(ex);\n                sb.append(\"\\n\");\n                showMessage.setText(sb.toString());\n            }\n        };\n        webSocketClient.connect();\n\n\n    }\n\n    @Override\n    public void onClick(View v) {\n        switch (v.getId()) {\n            case R.id.send:\n                if(webSocketClient.isClosed() || webSocketClient.isClosing()){\n                    Snackbar.make(v,\"Client正在关闭\",Snackbar.LENGTH_SHORT).show();\n                    webSocketClient.connect();\n                    break;\n                }\n                webSocketClient.send(editText.getText().toString().trim());\n                sb.append(\"客户端发送消息：\");\n                sb.append(new Date());\n                sb.append(\"\\n\");\n                sb.append(editText.getText().toString().trim());\n                sb.append(\"\\n\");\n                showMessage.setText(sb.toString());\n                editText.setText(\"\");\n                break;\n            default:\n                break;\n        }\n    }\n}\n\n```\n#### 服务端实现\n上面提到我们后端使用的Spring中的WebSocket实现，其实用什么实现服务端无所谓，只要遵循协议就可以。个人在本地做测试的时候用的还是这个开源项目。\n1. 服务端只需要关心`WebSocketServer`这个类就好，这个类里面有五个方法需要重写：\n``` java\n/**服务开启*/\npublic void onStart() \n/**有客户端连接*/\npublic void onOpen(WebSocket webSocket, ClientHandshake clientHandshake)\n/**服务端关闭*/\npublic void onClose(WebSocket webSocket, int i, String s, boolean b)\n/**收到客户端的消息*/\npublic void onMessage(WebSocket webSocket, String s)\n/**出现异常*/\n public void onError(WebSocket webSocket, Exception e) \n```\n2. 具体代码如下：\n``` java\npackage com.huangyuanlove;\n\nimport org.java_websocket.WebSocket;\nimport org.java_websocket.WebSocketImpl;\nimport org.java_websocket.handshake.ClientHandshake;\nimport org.java_websocket.server.WebSocketServer;\n\nimport java.io.BufferedReader;\nimport java.io.InputStreamReader;\nimport java.net.InetSocketAddress;\nimport java.net.UnknownHostException;\n\npublic class TestWebSocket extends WebSocketServer {\n    public TestWebSocket(int port) throws UnknownHostException {\n        super(new InetSocketAddress(port));\n    }\n\n    public TestWebSocket(InetSocketAddress address) {\n        super(address);\n    }\n\n    public static void main(String[] args) {\n        WebSocketImpl.DEBUG = true;\n        try {\n            int port = 8887; // 843 flash policy port\n            TestWebSocket s = new TestWebSocket(port);\n            s.start();\n            System.out.println(\"ChatServer started on port: \" + s.getPort());\n\n            BufferedReader sysin = new BufferedReader(new InputStreamReader(System.in));\n            while (true) {\n                String in = sysin.readLine();\n                s.broadcast(in);\n                if (in.equals(\"exit\")) {\n                    s.stop(1000);\n                    break;\n                }\n            }\n        } catch (Exception ex) {\n            ex.printStackTrace();\n        }\n    }\n\n    @Override\n    public void onOpen(WebSocket webSocket, ClientHandshake clientHandshake) {\n\n        broadcast(\"new connection: \" + clientHandshake.getResourceDescriptor());\n        System.out.println(webSocket.getRemoteSocketAddress().getAddress().getHostAddress() + \" entered the room!\");\n    }\n\n    @Override\n    public void onClose(WebSocket webSocket, int i, String s, boolean b) {\n        broadcast(webSocket + \" onClose\");\n        System.out.println(webSocket + \" onClose\");\n    }\n\n    @Override\n    public void onMessage(WebSocket webSocket, String s) {\n\n        broadcast(s);\n        System.out.println(webSocket + \": \" + s);\n    }\n\n    @Override\n    public void onError(WebSocket webSocket, Exception e) {\n        e.printStackTrace();\n        if (webSocket != null) {\n            // some errors like port binding failed may not be assignable to a specific websocket\n        }\n    }\n\n    @Override\n    public void onStart() {\n        System.out.println(\"Server started!\");\n    }\n}\n```\n上面代码中`onMessage`方法中的`broadcast`方法是向所有连接到服务器的客户端发送消息(广播发送，其实就是一个小型的局域网聊天室)，如果只是谁发来的消息就回复给谁，可以调用`webSocket.send()`方法。\n是用的时候先开启服务端，然后开启客户端(app)，需要注意是的，在客户端中重写的方法都不是在主线程中，如果需要更新UI，请切换到UI线程。\n或者在客户端中使用`Service`,在`Service`中收到消息之后，广播给UI界面。\n\n----\n以上","source":"_posts/Android中使用WebSocket.md","raw":"---\ntitle: Android中使用WebSocket\ndate: 2017-12-25 16:23:46\ntags: [Android,WebSocket]\nkeywords: Android使用WebSocket\n---\n背景：后端逻辑框架调整，将原来的推送和轮询方式改成了使用`WebSocket`通信。原来的请求方式是由app发起请求，appServer对请求进行分发，中转中继服务器将具体请求下发到对应的物联网服务器，物联网服务器将指令下发到指定的设备。整个流程涉及到很多层http请求，并且每个服务的回调接口还不一致，只能在app发情请求之后，接着去轮询服务器，服务器端去查询设备状态、是否对指令有响应。\n改版后涉及到对物联网的请求全部改成`WebSocket`,不在轮询，而是被动等待。\n后端使用的是`Spring`实现的`WebSocket`,app端使用的是[https://github.com/TooTallNate/Java-WebSocket](https://github.com/TooTallNate/Java-WebSocket)这个开源项目。\n<!-- more -->\n#### APP端实现\n1. 添加依赖`compile \"org.java-websocket:Java-WebSocket:1.3.7\"`\n2. 我们只需要关心三方库中`WebSocketClient`类就可以了，其他细节底层已经封装好了。\n3. 类中有四个方法需要重写：\n``` java\n/**打开连接*/\n public void onOpen(ServerHandshake handshakedata)\n /**服务端返回消息*/\n public void onMessage(String message) \n /**关闭连接*/\n public void onClose(int code, String reason, boolean remote)\n /**出现异常*/\n public void onError(Exception ex)\n```\n4. 一个简单的小测试，app端定义了一个发送按钮，和一个展示消息的文本\n``` xml\n<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<LinearLayout xmlns:android=\"http://schemas.android.com/apk/res/android\"\n    xmlns:tools=\"http://schemas.android.com/tools\"\n    android:layout_width=\"match_parent\"\n    android:layout_height=\"match_parent\"\n    android:orientation=\"vertical\"\n    tools:context=\"com.huangyuanlove.testwebsocket.MainActivity\">\n\n    <ScrollView\n        android:layout_width=\"match_parent\"\n        android:layout_height=\"0dp\"\n        android:layout_weight=\"1\">\n\n        <TextView\n            android:id=\"@+id/show_message\"\n            android:layout_width=\"wrap_content\"\n            android:layout_height=\"wrap_content\" />\n    </ScrollView>\n\n    <LinearLayout\n        android:layout_width=\"match_parent\"\n        android:layout_height=\"wrap_content\"\n        android:orientation=\"horizontal\">\n\n        <EditText\n            android:id=\"@+id/edit_text\"\n            android:layout_width=\"0dp\"\n            android:layout_height=\"wrap_content\"\n            android:layout_weight=\"1\" />\n\n        <TextView\n            android:id=\"@+id/send\"\n            android:layout_width=\"wrap_content\"\n            android:layout_height=\"wrap_content\"\n            android:background=\"@color/colorAccent\"\n            android:padding=\"10dp\"\n            android:text=\"发送\"\n            android:textColor=\"@android:color/black\" />\n    </LinearLayout>\n\n</LinearLayout>\n```\n5. 在代码里面处理具体逻辑：\n``` java\nimport android.os.Bundle;\nimport android.os.Handler;\nimport android.os.Message;\nimport android.support.design.widget.Snackbar;\nimport android.support.v7.app.AppCompatActivity;\nimport android.view.View;\nimport android.widget.EditText;\nimport android.widget.TextView;\n\nimport org.java_websocket.client.WebSocketClient;\nimport org.java_websocket.handshake.ServerHandshake;\n\nimport java.net.URI;\nimport java.util.Date;\n\npublic class MainActivity extends AppCompatActivity implements View.OnClickListener {\n\n\n    private TextView showMessage;\n    private EditText editText;\n    private WebSocketClient webSocketClient;\n    private StringBuilder sb = new StringBuilder();\n\n    private Handler handler = new Handler(new Handler.Callback() {\n        @Override\n        public boolean handleMessage(Message msg) {\n            sb.append(\"服务器返回数据：\");\n            sb.append(msg.obj.toString());\n            sb.append(\"\\n\");\n            showMessage.setText(sb.toString());\n            return true;\n        }\n    });\n\n    @Override\n    protected void onCreate(Bundle savedInstanceState) {\n        super.onCreate(savedInstanceState);\n        setContentView(R.layout.activity_main);\n        showMessage = findViewById(R.id.show_message);\n        editText = findViewById(R.id.edit_text);\n        findViewById(R.id.send).setOnClickListener(this);\n        URI serverURI = URI.create(\"ws://192.168.1.199:8887\");\n        webSocketClient = new WebSocketClient(serverURI) {\n            @Override\n            public void onOpen(ServerHandshake handshakedata) {\n                sb.append(\"onOpen at time：\");\n                sb.append(new Date());\n                sb.append(\"服务器状态：\");\n                sb.append(handshakedata.getHttpStatusMessage());\n                sb.append(\"\\n\");\n                showMessage.setText(sb.toString());\n            }\n            @Override\n            public void onMessage(String message) {\n                Message handlerMessage = Message.obtain();\n                handlerMessage.obj = message;\n                handler.sendMessage(handlerMessage);\n            }\n            @Override\n            public void onClose(int code, String reason, boolean remote) {\n                sb.append(\"onClose at time：\");\n                sb.append(new Date());\n                sb.append(\"\\n\");\n                sb.append(\"onClose info:\");\n                sb.append(code);\n                sb.append(reason);\n                sb.append(remote);\n                sb.append(\"\\n\");\n                showMessage.setText(sb.toString());\n            }\n\n            @Override\n            public void onError(Exception ex) {\n                sb.append(\"onError at time：\");\n                sb.append(new Date());\n                sb.append(\"\\n\");\n                sb.append(ex);\n                sb.append(\"\\n\");\n                showMessage.setText(sb.toString());\n            }\n        };\n        webSocketClient.connect();\n\n\n    }\n\n    @Override\n    public void onClick(View v) {\n        switch (v.getId()) {\n            case R.id.send:\n                if(webSocketClient.isClosed() || webSocketClient.isClosing()){\n                    Snackbar.make(v,\"Client正在关闭\",Snackbar.LENGTH_SHORT).show();\n                    webSocketClient.connect();\n                    break;\n                }\n                webSocketClient.send(editText.getText().toString().trim());\n                sb.append(\"客户端发送消息：\");\n                sb.append(new Date());\n                sb.append(\"\\n\");\n                sb.append(editText.getText().toString().trim());\n                sb.append(\"\\n\");\n                showMessage.setText(sb.toString());\n                editText.setText(\"\");\n                break;\n            default:\n                break;\n        }\n    }\n}\n\n```\n#### 服务端实现\n上面提到我们后端使用的Spring中的WebSocket实现，其实用什么实现服务端无所谓，只要遵循协议就可以。个人在本地做测试的时候用的还是这个开源项目。\n1. 服务端只需要关心`WebSocketServer`这个类就好，这个类里面有五个方法需要重写：\n``` java\n/**服务开启*/\npublic void onStart() \n/**有客户端连接*/\npublic void onOpen(WebSocket webSocket, ClientHandshake clientHandshake)\n/**服务端关闭*/\npublic void onClose(WebSocket webSocket, int i, String s, boolean b)\n/**收到客户端的消息*/\npublic void onMessage(WebSocket webSocket, String s)\n/**出现异常*/\n public void onError(WebSocket webSocket, Exception e) \n```\n2. 具体代码如下：\n``` java\npackage com.huangyuanlove;\n\nimport org.java_websocket.WebSocket;\nimport org.java_websocket.WebSocketImpl;\nimport org.java_websocket.handshake.ClientHandshake;\nimport org.java_websocket.server.WebSocketServer;\n\nimport java.io.BufferedReader;\nimport java.io.InputStreamReader;\nimport java.net.InetSocketAddress;\nimport java.net.UnknownHostException;\n\npublic class TestWebSocket extends WebSocketServer {\n    public TestWebSocket(int port) throws UnknownHostException {\n        super(new InetSocketAddress(port));\n    }\n\n    public TestWebSocket(InetSocketAddress address) {\n        super(address);\n    }\n\n    public static void main(String[] args) {\n        WebSocketImpl.DEBUG = true;\n        try {\n            int port = 8887; // 843 flash policy port\n            TestWebSocket s = new TestWebSocket(port);\n            s.start();\n            System.out.println(\"ChatServer started on port: \" + s.getPort());\n\n            BufferedReader sysin = new BufferedReader(new InputStreamReader(System.in));\n            while (true) {\n                String in = sysin.readLine();\n                s.broadcast(in);\n                if (in.equals(\"exit\")) {\n                    s.stop(1000);\n                    break;\n                }\n            }\n        } catch (Exception ex) {\n            ex.printStackTrace();\n        }\n    }\n\n    @Override\n    public void onOpen(WebSocket webSocket, ClientHandshake clientHandshake) {\n\n        broadcast(\"new connection: \" + clientHandshake.getResourceDescriptor());\n        System.out.println(webSocket.getRemoteSocketAddress().getAddress().getHostAddress() + \" entered the room!\");\n    }\n\n    @Override\n    public void onClose(WebSocket webSocket, int i, String s, boolean b) {\n        broadcast(webSocket + \" onClose\");\n        System.out.println(webSocket + \" onClose\");\n    }\n\n    @Override\n    public void onMessage(WebSocket webSocket, String s) {\n\n        broadcast(s);\n        System.out.println(webSocket + \": \" + s);\n    }\n\n    @Override\n    public void onError(WebSocket webSocket, Exception e) {\n        e.printStackTrace();\n        if (webSocket != null) {\n            // some errors like port binding failed may not be assignable to a specific websocket\n        }\n    }\n\n    @Override\n    public void onStart() {\n        System.out.println(\"Server started!\");\n    }\n}\n```\n上面代码中`onMessage`方法中的`broadcast`方法是向所有连接到服务器的客户端发送消息(广播发送，其实就是一个小型的局域网聊天室)，如果只是谁发来的消息就回复给谁，可以调用`webSocket.send()`方法。\n是用的时候先开启服务端，然后开启客户端(app)，需要注意是的，在客户端中重写的方法都不是在主线程中，如果需要更新UI，请切换到UI线程。\n或者在客户端中使用`Service`,在`Service`中收到消息之后，广播给UI界面。\n\n----\n以上","slug":"Android中使用WebSocket","published":1,"updated":"2018-08-04T04:46:47.739Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjl3vbtq0000eisdgoprk0wx7","content":"<p>背景：后端逻辑框架调整，将原来的推送和轮询方式改成了使用<code>WebSocket</code>通信。原来的请求方式是由app发起请求，appServer对请求进行分发，中转中继服务器将具体请求下发到对应的物联网服务器，物联网服务器将指令下发到指定的设备。整个流程涉及到很多层http请求，并且每个服务的回调接口还不一致，只能在app发情请求之后，接着去轮询服务器，服务器端去查询设备状态、是否对指令有响应。<br>改版后涉及到对物联网的请求全部改成<code>WebSocket</code>,不在轮询，而是被动等待。<br>后端使用的是<code>Spring</code>实现的<code>WebSocket</code>,app端使用的是<a href=\"https://github.com/TooTallNate/Java-WebSocket\" target=\"_blank\" rel=\"external\">https://github.com/TooTallNate/Java-WebSocket</a>这个开源项目。<br><a id=\"more\"></a></p>\n<h4 id=\"APP端实现\"><a href=\"#APP端实现\" class=\"headerlink\" title=\"APP端实现\"></a>APP端实现</h4><ol>\n<li>添加依赖<code>compile &quot;org.java-websocket:Java-WebSocket:1.3.7&quot;</code></li>\n<li>我们只需要关心三方库中<code>WebSocketClient</code>类就可以了，其他细节底层已经封装好了。</li>\n<li><p>类中有四个方法需要重写：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">/**打开连接*/</span></div><div class=\"line\"> <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onOpen</span><span class=\"params\">(ServerHandshake handshakedata)</span></span></div><div class=\"line\"> <span class=\"comment\">/**服务端返回消息*/</span></div><div class=\"line\"> <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onMessage</span><span class=\"params\">(String message)</span> </div><div class=\"line\"> <span class=\"comment\">/**关闭连接*/</span></div><div class=\"line\"> <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onClose</span><span class=\"params\">(<span class=\"keyword\">int</span> code, String reason, <span class=\"keyword\">boolean</span> remote)</span></div><div class=\"line\"> <span class=\"comment\">/**出现异常*/</span></div><div class=\"line\"> <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onError</span><span class=\"params\">(Exception ex)</span></div></pre></td></tr></table></figure>\n</li>\n<li><p>一个简单的小测试，app端定义了一个发送按钮，和一个展示消息的文本</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;?xml version=\"1.0\" encoding=\"utf-8\"?&gt;</div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">LinearLayout</span> <span class=\"attr\">xmlns:android</span>=<span class=\"string\">\"http://schemas.android.com/apk/res/android\"</span></span></div><div class=\"line\">    <span class=\"attr\">xmlns:tools</span>=<span class=\"string\">\"http://schemas.android.com/tools\"</span></div><div class=\"line\">    <span class=\"attr\">android:layout_width</span>=<span class=\"string\">\"match_parent\"</span></div><div class=\"line\">    <span class=\"attr\">android:layout_height</span>=<span class=\"string\">\"match_parent\"</span></div><div class=\"line\">    <span class=\"attr\">android:orientation</span>=<span class=\"string\">\"vertical\"</span></div><div class=\"line\">    <span class=\"attr\">tools:context</span>=<span class=\"string\">\"com.huangyuanlove.testwebsocket.MainActivity\"</span>&gt;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">ScrollView</span></span></div><div class=\"line\">        <span class=\"attr\">android:layout_width</span>=<span class=\"string\">\"match_parent\"</span></div><div class=\"line\">        <span class=\"attr\">android:layout_height</span>=<span class=\"string\">\"0dp\"</span></div><div class=\"line\">        <span class=\"attr\">android:layout_weight</span>=<span class=\"string\">\"1\"</span>&gt;</div><div class=\"line\"></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">TextView</span></span></div><div class=\"line\">            <span class=\"attr\">android:id</span>=<span class=\"string\">\"@+id/show_message\"</span></div><div class=\"line\">            <span class=\"attr\">android:layout_width</span>=<span class=\"string\">\"wrap_content\"</span></div><div class=\"line\">            <span class=\"attr\">android:layout_height</span>=<span class=\"string\">\"wrap_content\"</span> /&gt;</div><div class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">ScrollView</span>&gt;</span></div><div class=\"line\"></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">LinearLayout</span></span></div><div class=\"line\">        <span class=\"attr\">android:layout_width</span>=<span class=\"string\">\"match_parent\"</span></div><div class=\"line\">        <span class=\"attr\">android:layout_height</span>=<span class=\"string\">\"wrap_content\"</span></div><div class=\"line\">        <span class=\"attr\">android:orientation</span>=<span class=\"string\">\"horizontal\"</span>&gt;</div><div class=\"line\"></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">EditText</span></span></div><div class=\"line\">            <span class=\"attr\">android:id</span>=<span class=\"string\">\"@+id/edit_text\"</span></div><div class=\"line\">            <span class=\"attr\">android:layout_width</span>=<span class=\"string\">\"0dp\"</span></div><div class=\"line\">            <span class=\"attr\">android:layout_height</span>=<span class=\"string\">\"wrap_content\"</span></div><div class=\"line\">            <span class=\"attr\">android:layout_weight</span>=<span class=\"string\">\"1\"</span> /&gt;</div><div class=\"line\"></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">TextView</span></span></div><div class=\"line\">            <span class=\"attr\">android:id</span>=<span class=\"string\">\"@+id/send\"</span></div><div class=\"line\">            <span class=\"attr\">android:layout_width</span>=<span class=\"string\">\"wrap_content\"</span></div><div class=\"line\">            <span class=\"attr\">android:layout_height</span>=<span class=\"string\">\"wrap_content\"</span></div><div class=\"line\">            <span class=\"attr\">android:background</span>=<span class=\"string\">\"@color/colorAccent\"</span></div><div class=\"line\">            <span class=\"attr\">android:padding</span>=<span class=\"string\">\"10dp\"</span></div><div class=\"line\">            <span class=\"attr\">android:text</span>=<span class=\"string\">\"发送\"</span></div><div class=\"line\">            <span class=\"attr\">android:textColor</span>=<span class=\"string\">\"@android:color/black\"</span> /&gt;</div><div class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">LinearLayout</span>&gt;</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">LinearLayout</span>&gt;</span></div></pre></td></tr></table></figure>\n</li>\n<li><p>在代码里面处理具体逻辑：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div><div class=\"line\">71</div><div class=\"line\">72</div><div class=\"line\">73</div><div class=\"line\">74</div><div class=\"line\">75</div><div class=\"line\">76</div><div class=\"line\">77</div><div class=\"line\">78</div><div class=\"line\">79</div><div class=\"line\">80</div><div class=\"line\">81</div><div class=\"line\">82</div><div class=\"line\">83</div><div class=\"line\">84</div><div class=\"line\">85</div><div class=\"line\">86</div><div class=\"line\">87</div><div class=\"line\">88</div><div class=\"line\">89</div><div class=\"line\">90</div><div class=\"line\">91</div><div class=\"line\">92</div><div class=\"line\">93</div><div class=\"line\">94</div><div class=\"line\">95</div><div class=\"line\">96</div><div class=\"line\">97</div><div class=\"line\">98</div><div class=\"line\">99</div><div class=\"line\">100</div><div class=\"line\">101</div><div class=\"line\">102</div><div class=\"line\">103</div><div class=\"line\">104</div><div class=\"line\">105</div><div class=\"line\">106</div><div class=\"line\">107</div><div class=\"line\">108</div><div class=\"line\">109</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">import</span> android.os.Bundle;</div><div class=\"line\"><span class=\"keyword\">import</span> android.os.Handler;</div><div class=\"line\"><span class=\"keyword\">import</span> android.os.Message;</div><div class=\"line\"><span class=\"keyword\">import</span> android.support.design.widget.Snackbar;</div><div class=\"line\"><span class=\"keyword\">import</span> android.support.v7.app.AppCompatActivity;</div><div class=\"line\"><span class=\"keyword\">import</span> android.view.View;</div><div class=\"line\"><span class=\"keyword\">import</span> android.widget.EditText;</div><div class=\"line\"><span class=\"keyword\">import</span> android.widget.TextView;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">import</span> org.java_websocket.client.WebSocketClient;</div><div class=\"line\"><span class=\"keyword\">import</span> org.java_websocket.handshake.ServerHandshake;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">import</span> java.net.URI;</div><div class=\"line\"><span class=\"keyword\">import</span> java.util.Date;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MainActivity</span> <span class=\"keyword\">extends</span> <span class=\"title\">AppCompatActivity</span> <span class=\"keyword\">implements</span> <span class=\"title\">View</span>.<span class=\"title\">OnClickListener</span> </span>&#123;</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">private</span> TextView showMessage;</div><div class=\"line\">    <span class=\"keyword\">private</span> EditText editText;</div><div class=\"line\">    <span class=\"keyword\">private</span> WebSocketClient webSocketClient;</div><div class=\"line\">    <span class=\"keyword\">private</span> StringBuilder sb = <span class=\"keyword\">new</span> StringBuilder();</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">private</span> Handler handler = <span class=\"keyword\">new</span> Handler(<span class=\"keyword\">new</span> Handler.Callback() &#123;</div><div class=\"line\">        <span class=\"meta\">@Override</span></div><div class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">handleMessage</span><span class=\"params\">(Message msg)</span> </span>&#123;</div><div class=\"line\">            sb.append(<span class=\"string\">\"服务器返回数据：\"</span>);</div><div class=\"line\">            sb.append(msg.obj.toString());</div><div class=\"line\">            sb.append(<span class=\"string\">\"\\n\"</span>);</div><div class=\"line\">            showMessage.setText(sb.toString());</div><div class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">true</span>;</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;);</div><div class=\"line\"></div><div class=\"line\">    <span class=\"meta\">@Override</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title\">onCreate</span><span class=\"params\">(Bundle savedInstanceState)</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">super</span>.onCreate(savedInstanceState);</div><div class=\"line\">        setContentView(R.layout.activity_main);</div><div class=\"line\">        showMessage = findViewById(R.id.show_message);</div><div class=\"line\">        editText = findViewById(R.id.edit_text);</div><div class=\"line\">        findViewById(R.id.send).setOnClickListener(<span class=\"keyword\">this</span>);</div><div class=\"line\">        URI serverURI = URI.create(<span class=\"string\">\"ws://192.168.1.199:8887\"</span>);</div><div class=\"line\">        webSocketClient = <span class=\"keyword\">new</span> WebSocketClient(serverURI) &#123;</div><div class=\"line\">            <span class=\"meta\">@Override</span></div><div class=\"line\">            <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onOpen</span><span class=\"params\">(ServerHandshake handshakedata)</span> </span>&#123;</div><div class=\"line\">                sb.append(<span class=\"string\">\"onOpen at time：\"</span>);</div><div class=\"line\">                sb.append(<span class=\"keyword\">new</span> Date());</div><div class=\"line\">                sb.append(<span class=\"string\">\"服务器状态：\"</span>);</div><div class=\"line\">                sb.append(handshakedata.getHttpStatusMessage());</div><div class=\"line\">                sb.append(<span class=\"string\">\"\\n\"</span>);</div><div class=\"line\">                showMessage.setText(sb.toString());</div><div class=\"line\">            &#125;</div><div class=\"line\">            <span class=\"meta\">@Override</span></div><div class=\"line\">            <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onMessage</span><span class=\"params\">(String message)</span> </span>&#123;</div><div class=\"line\">                Message handlerMessage = Message.obtain();</div><div class=\"line\">                handlerMessage.obj = message;</div><div class=\"line\">                handler.sendMessage(handlerMessage);</div><div class=\"line\">            &#125;</div><div class=\"line\">            <span class=\"meta\">@Override</span></div><div class=\"line\">            <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onClose</span><span class=\"params\">(<span class=\"keyword\">int</span> code, String reason, <span class=\"keyword\">boolean</span> remote)</span> </span>&#123;</div><div class=\"line\">                sb.append(<span class=\"string\">\"onClose at time：\"</span>);</div><div class=\"line\">                sb.append(<span class=\"keyword\">new</span> Date());</div><div class=\"line\">                sb.append(<span class=\"string\">\"\\n\"</span>);</div><div class=\"line\">                sb.append(<span class=\"string\">\"onClose info:\"</span>);</div><div class=\"line\">                sb.append(code);</div><div class=\"line\">                sb.append(reason);</div><div class=\"line\">                sb.append(remote);</div><div class=\"line\">                sb.append(<span class=\"string\">\"\\n\"</span>);</div><div class=\"line\">                showMessage.setText(sb.toString());</div><div class=\"line\">            &#125;</div><div class=\"line\"></div><div class=\"line\">            <span class=\"meta\">@Override</span></div><div class=\"line\">            <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onError</span><span class=\"params\">(Exception ex)</span> </span>&#123;</div><div class=\"line\">                sb.append(<span class=\"string\">\"onError at time：\"</span>);</div><div class=\"line\">                sb.append(<span class=\"keyword\">new</span> Date());</div><div class=\"line\">                sb.append(<span class=\"string\">\"\\n\"</span>);</div><div class=\"line\">                sb.append(ex);</div><div class=\"line\">                sb.append(<span class=\"string\">\"\\n\"</span>);</div><div class=\"line\">                showMessage.setText(sb.toString());</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;;</div><div class=\"line\">        webSocketClient.connect();</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"meta\">@Override</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onClick</span><span class=\"params\">(View v)</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">switch</span> (v.getId()) &#123;</div><div class=\"line\">            <span class=\"keyword\">case</span> R.id.send:</div><div class=\"line\">                <span class=\"keyword\">if</span>(webSocketClient.isClosed() || webSocketClient.isClosing())&#123;</div><div class=\"line\">                    Snackbar.make(v,<span class=\"string\">\"Client正在关闭\"</span>,Snackbar.LENGTH_SHORT).show();</div><div class=\"line\">                    webSocketClient.connect();</div><div class=\"line\">                    <span class=\"keyword\">break</span>;</div><div class=\"line\">                &#125;</div><div class=\"line\">                webSocketClient.send(editText.getText().toString().trim());</div><div class=\"line\">                sb.append(<span class=\"string\">\"客户端发送消息：\"</span>);</div><div class=\"line\">                sb.append(<span class=\"keyword\">new</span> Date());</div><div class=\"line\">                sb.append(<span class=\"string\">\"\\n\"</span>);</div><div class=\"line\">                sb.append(editText.getText().toString().trim());</div><div class=\"line\">                sb.append(<span class=\"string\">\"\\n\"</span>);</div><div class=\"line\">                showMessage.setText(sb.toString());</div><div class=\"line\">                editText.setText(<span class=\"string\">\"\"</span>);</div><div class=\"line\">                <span class=\"keyword\">break</span>;</div><div class=\"line\">            <span class=\"keyword\">default</span>:</div><div class=\"line\">                <span class=\"keyword\">break</span>;</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n</li>\n</ol>\n<h4 id=\"服务端实现\"><a href=\"#服务端实现\" class=\"headerlink\" title=\"服务端实现\"></a>服务端实现</h4><p>上面提到我们后端使用的Spring中的WebSocket实现，其实用什么实现服务端无所谓，只要遵循协议就可以。个人在本地做测试的时候用的还是这个开源项目。</p>\n<ol>\n<li><p>服务端只需要关心<code>WebSocketServer</code>这个类就好，这个类里面有五个方法需要重写：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">/**服务开启*/</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onStart</span><span class=\"params\">()</span> </span></div><div class=\"line\"><span class=\"comment\">/**有客户端连接*/</span></div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onOpen</span><span class=\"params\">(WebSocket webSocket, ClientHandshake clientHandshake)</span></div><div class=\"line\"><span class=\"comment\">/**服务端关闭*/</span></div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onClose</span><span class=\"params\">(WebSocket webSocket, <span class=\"keyword\">int</span> i, String s, <span class=\"keyword\">boolean</span> b)</span></div><div class=\"line\"><span class=\"comment\">/**收到客户端的消息*/</span></div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onMessage</span><span class=\"params\">(WebSocket webSocket, String s)</span></div><div class=\"line\"><span class=\"comment\">/**出现异常*/</span></div><div class=\"line\"> <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onError</span><span class=\"params\">(WebSocket webSocket, Exception e)</span></div></pre></td></tr></table></figure>\n</li>\n<li><p>具体代码如下：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div><div class=\"line\">71</div><div class=\"line\">72</div><div class=\"line\">73</div><div class=\"line\">74</div><div class=\"line\">75</div><div class=\"line\">76</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">package</span> com.huangyuanlove;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">import</span> org.java_websocket.WebSocket;</div><div class=\"line\"><span class=\"keyword\">import</span> org.java_websocket.WebSocketImpl;</div><div class=\"line\"><span class=\"keyword\">import</span> org.java_websocket.handshake.ClientHandshake;</div><div class=\"line\"><span class=\"keyword\">import</span> org.java_websocket.server.WebSocketServer;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">import</span> java.io.BufferedReader;</div><div class=\"line\"><span class=\"keyword\">import</span> java.io.InputStreamReader;</div><div class=\"line\"><span class=\"keyword\">import</span> java.net.InetSocketAddress;</div><div class=\"line\"><span class=\"keyword\">import</span> java.net.UnknownHostException;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">TestWebSocket</span> <span class=\"keyword\">extends</span> <span class=\"title\">WebSocketServer</span> </span>&#123;</div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">TestWebSocket</span><span class=\"params\">(<span class=\"keyword\">int</span> port)</span> <span class=\"keyword\">throws</span> UnknownHostException </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">super</span>(<span class=\"keyword\">new</span> InetSocketAddress(port));</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">TestWebSocket</span><span class=\"params\">(InetSocketAddress address)</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">super</span>(address);</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</div><div class=\"line\">        WebSocketImpl.DEBUG = <span class=\"keyword\">true</span>;</div><div class=\"line\">        <span class=\"keyword\">try</span> &#123;</div><div class=\"line\">            <span class=\"keyword\">int</span> port = <span class=\"number\">8887</span>; <span class=\"comment\">// 843 flash policy port</span></div><div class=\"line\">            TestWebSocket s = <span class=\"keyword\">new</span> TestWebSocket(port);</div><div class=\"line\">            s.start();</div><div class=\"line\">            System.out.println(<span class=\"string\">\"ChatServer started on port: \"</span> + s.getPort());</div><div class=\"line\"></div><div class=\"line\">            BufferedReader sysin = <span class=\"keyword\">new</span> BufferedReader(<span class=\"keyword\">new</span> InputStreamReader(System.in));</div><div class=\"line\">            <span class=\"keyword\">while</span> (<span class=\"keyword\">true</span>) &#123;</div><div class=\"line\">                String in = sysin.readLine();</div><div class=\"line\">                s.broadcast(in);</div><div class=\"line\">                <span class=\"keyword\">if</span> (in.equals(<span class=\"string\">\"exit\"</span>)) &#123;</div><div class=\"line\">                    s.stop(<span class=\"number\">1000</span>);</div><div class=\"line\">                    <span class=\"keyword\">break</span>;</div><div class=\"line\">                &#125;</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125; <span class=\"keyword\">catch</span> (Exception ex) &#123;</div><div class=\"line\">            ex.printStackTrace();</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"meta\">@Override</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onOpen</span><span class=\"params\">(WebSocket webSocket, ClientHandshake clientHandshake)</span> </span>&#123;</div><div class=\"line\"></div><div class=\"line\">        broadcast(<span class=\"string\">\"new connection: \"</span> + clientHandshake.getResourceDescriptor());</div><div class=\"line\">        System.out.println(webSocket.getRemoteSocketAddress().getAddress().getHostAddress() + <span class=\"string\">\" entered the room!\"</span>);</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"meta\">@Override</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onClose</span><span class=\"params\">(WebSocket webSocket, <span class=\"keyword\">int</span> i, String s, <span class=\"keyword\">boolean</span> b)</span> </span>&#123;</div><div class=\"line\">        broadcast(webSocket + <span class=\"string\">\" onClose\"</span>);</div><div class=\"line\">        System.out.println(webSocket + <span class=\"string\">\" onClose\"</span>);</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"meta\">@Override</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onMessage</span><span class=\"params\">(WebSocket webSocket, String s)</span> </span>&#123;</div><div class=\"line\"></div><div class=\"line\">        broadcast(s);</div><div class=\"line\">        System.out.println(webSocket + <span class=\"string\">\": \"</span> + s);</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"meta\">@Override</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onError</span><span class=\"params\">(WebSocket webSocket, Exception e)</span> </span>&#123;</div><div class=\"line\">        e.printStackTrace();</div><div class=\"line\">        <span class=\"keyword\">if</span> (webSocket != <span class=\"keyword\">null</span>) &#123;</div><div class=\"line\">            <span class=\"comment\">// some errors like port binding failed may not be assignable to a specific websocket</span></div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"meta\">@Override</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onStart</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">        System.out.println(<span class=\"string\">\"Server started!\"</span>);</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n</li>\n</ol>\n<p>上面代码中<code>onMessage</code>方法中的<code>broadcast</code>方法是向所有连接到服务器的客户端发送消息(广播发送，其实就是一个小型的局域网聊天室)，如果只是谁发来的消息就回复给谁，可以调用<code>webSocket.send()</code>方法。<br>是用的时候先开启服务端，然后开启客户端(app)，需要注意是的，在客户端中重写的方法都不是在主线程中，如果需要更新UI，请切换到UI线程。<br>或者在客户端中使用<code>Service</code>,在<code>Service</code>中收到消息之后，广播给UI界面。</p>\n<hr>\n<p>以上</p>\n","excerpt":"<p>背景：后端逻辑框架调整，将原来的推送和轮询方式改成了使用<code>WebSocket</code>通信。原来的请求方式是由app发起请求，appServer对请求进行分发，中转中继服务器将具体请求下发到对应的物联网服务器，物联网服务器将指令下发到指定的设备。整个流程涉及到很多层http请求，并且每个服务的回调接口还不一致，只能在app发情请求之后，接着去轮询服务器，服务器端去查询设备状态、是否对指令有响应。<br>改版后涉及到对物联网的请求全部改成<code>WebSocket</code>,不在轮询，而是被动等待。<br>后端使用的是<code>Spring</code>实现的<code>WebSocket</code>,app端使用的是<a href=\"https://github.com/TooTallNate/Java-WebSocket\">https://github.com/TooTallNate/Java-WebSocket</a>这个开源项目。<br>","more":"</p>\n<h4 id=\"APP端实现\"><a href=\"#APP端实现\" class=\"headerlink\" title=\"APP端实现\"></a>APP端实现</h4><ol>\n<li>添加依赖<code>compile &quot;org.java-websocket:Java-WebSocket:1.3.7&quot;</code></li>\n<li>我们只需要关心三方库中<code>WebSocketClient</code>类就可以了，其他细节底层已经封装好了。</li>\n<li><p>类中有四个方法需要重写：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">/**打开连接*/</span></div><div class=\"line\"> <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onOpen</span><span class=\"params\">(ServerHandshake handshakedata)</span></div><div class=\"line\"> <span class=\"comment\">/**服务端返回消息*/</span></div><div class=\"line\"> <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onMessage</span><span class=\"params\">(String message)</span> </div><div class=\"line\"> <span class=\"comment\">/**关闭连接*/</span></div><div class=\"line\"> <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onClose</span><span class=\"params\">(<span class=\"keyword\">int</span> code, String reason, <span class=\"keyword\">boolean</span> remote)</span></div><div class=\"line\"> <span class=\"comment\">/**出现异常*/</span></div><div class=\"line\"> <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onError</span><span class=\"params\">(Exception ex)</span></span></div></pre></td></tr></table></figure>\n</li>\n<li><p>一个简单的小测试，app端定义了一个发送按钮，和一个展示消息的文本</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;?xml version=\"1.0\" encoding=\"utf-8\"?&gt;</div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">LinearLayout</span> <span class=\"attr\">xmlns:android</span>=<span class=\"string\">\"http://schemas.android.com/apk/res/android\"</span></div><div class=\"line\">    <span class=\"attr\">xmlns:tools</span>=<span class=\"string\">\"http://schemas.android.com/tools\"</span></div><div class=\"line\">    <span class=\"attr\">android:layout_width</span>=<span class=\"string\">\"match_parent\"</span></div><div class=\"line\">    <span class=\"attr\">android:layout_height</span>=<span class=\"string\">\"match_parent\"</span></div><div class=\"line\">    <span class=\"attr\">android:orientation</span>=<span class=\"string\">\"vertical\"</span></div><div class=\"line\">    <span class=\"attr\">tools:context</span>=<span class=\"string\">\"com.huangyuanlove.testwebsocket.MainActivity\"</span>&gt;</span></div><div class=\"line\"></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">ScrollView</span></div><div class=\"line\">        <span class=\"attr\">android:layout_width</span>=<span class=\"string\">\"match_parent\"</span></div><div class=\"line\">        <span class=\"attr\">android:layout_height</span>=<span class=\"string\">\"0dp\"</span></div><div class=\"line\">        <span class=\"attr\">android:layout_weight</span>=<span class=\"string\">\"1\"</span>&gt;</span></div><div class=\"line\"></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">TextView</span></div><div class=\"line\">            <span class=\"attr\">android:id</span>=<span class=\"string\">\"@+id/show_message\"</span></div><div class=\"line\">            <span class=\"attr\">android:layout_width</span>=<span class=\"string\">\"wrap_content\"</span></div><div class=\"line\">            <span class=\"attr\">android:layout_height</span>=<span class=\"string\">\"wrap_content\"</span> /&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">ScrollView</span>&gt;</span></div><div class=\"line\"></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">LinearLayout</span></div><div class=\"line\">        <span class=\"attr\">android:layout_width</span>=<span class=\"string\">\"match_parent\"</span></div><div class=\"line\">        <span class=\"attr\">android:layout_height</span>=<span class=\"string\">\"wrap_content\"</span></div><div class=\"line\">        <span class=\"attr\">android:orientation</span>=<span class=\"string\">\"horizontal\"</span>&gt;</span></div><div class=\"line\"></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">EditText</span></div><div class=\"line\">            <span class=\"attr\">android:id</span>=<span class=\"string\">\"@+id/edit_text\"</span></div><div class=\"line\">            <span class=\"attr\">android:layout_width</span>=<span class=\"string\">\"0dp\"</span></div><div class=\"line\">            <span class=\"attr\">android:layout_height</span>=<span class=\"string\">\"wrap_content\"</span></div><div class=\"line\">            <span class=\"attr\">android:layout_weight</span>=<span class=\"string\">\"1\"</span> /&gt;</span></div><div class=\"line\"></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">TextView</span></div><div class=\"line\">            <span class=\"attr\">android:id</span>=<span class=\"string\">\"@+id/send\"</span></div><div class=\"line\">            <span class=\"attr\">android:layout_width</span>=<span class=\"string\">\"wrap_content\"</span></div><div class=\"line\">            <span class=\"attr\">android:layout_height</span>=<span class=\"string\">\"wrap_content\"</span></div><div class=\"line\">            <span class=\"attr\">android:background</span>=<span class=\"string\">\"@color/colorAccent\"</span></div><div class=\"line\">            <span class=\"attr\">android:padding</span>=<span class=\"string\">\"10dp\"</span></div><div class=\"line\">            <span class=\"attr\">android:text</span>=<span class=\"string\">\"发送\"</span></div><div class=\"line\">            <span class=\"attr\">android:textColor</span>=<span class=\"string\">\"@android:color/black\"</span> /&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">LinearLayout</span>&gt;</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">LinearLayout</span>&gt;</span></div></pre></td></tr></table></figure>\n</li>\n<li><p>在代码里面处理具体逻辑：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div><div class=\"line\">71</div><div class=\"line\">72</div><div class=\"line\">73</div><div class=\"line\">74</div><div class=\"line\">75</div><div class=\"line\">76</div><div class=\"line\">77</div><div class=\"line\">78</div><div class=\"line\">79</div><div class=\"line\">80</div><div class=\"line\">81</div><div class=\"line\">82</div><div class=\"line\">83</div><div class=\"line\">84</div><div class=\"line\">85</div><div class=\"line\">86</div><div class=\"line\">87</div><div class=\"line\">88</div><div class=\"line\">89</div><div class=\"line\">90</div><div class=\"line\">91</div><div class=\"line\">92</div><div class=\"line\">93</div><div class=\"line\">94</div><div class=\"line\">95</div><div class=\"line\">96</div><div class=\"line\">97</div><div class=\"line\">98</div><div class=\"line\">99</div><div class=\"line\">100</div><div class=\"line\">101</div><div class=\"line\">102</div><div class=\"line\">103</div><div class=\"line\">104</div><div class=\"line\">105</div><div class=\"line\">106</div><div class=\"line\">107</div><div class=\"line\">108</div><div class=\"line\">109</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">import</span> android.os.Bundle;</div><div class=\"line\"><span class=\"keyword\">import</span> android.os.Handler;</div><div class=\"line\"><span class=\"keyword\">import</span> android.os.Message;</div><div class=\"line\"><span class=\"keyword\">import</span> android.support.design.widget.Snackbar;</div><div class=\"line\"><span class=\"keyword\">import</span> android.support.v7.app.AppCompatActivity;</div><div class=\"line\"><span class=\"keyword\">import</span> android.view.View;</div><div class=\"line\"><span class=\"keyword\">import</span> android.widget.EditText;</div><div class=\"line\"><span class=\"keyword\">import</span> android.widget.TextView;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">import</span> org.java_websocket.client.WebSocketClient;</div><div class=\"line\"><span class=\"keyword\">import</span> org.java_websocket.handshake.ServerHandshake;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">import</span> java.net.URI;</div><div class=\"line\"><span class=\"keyword\">import</span> java.util.Date;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MainActivity</span> <span class=\"keyword\">extends</span> <span class=\"title\">AppCompatActivity</span> <span class=\"keyword\">implements</span> <span class=\"title\">View</span>.<span class=\"title\">OnClickListener</span> </span>&#123;</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">private</span> TextView showMessage;</div><div class=\"line\">    <span class=\"keyword\">private</span> EditText editText;</div><div class=\"line\">    <span class=\"keyword\">private</span> WebSocketClient webSocketClient;</div><div class=\"line\">    <span class=\"keyword\">private</span> StringBuilder sb = <span class=\"keyword\">new</span> StringBuilder();</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">private</span> Handler handler = <span class=\"keyword\">new</span> Handler(<span class=\"keyword\">new</span> Handler.Callback() &#123;</div><div class=\"line\">        <span class=\"meta\">@Override</span></div><div class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">handleMessage</span><span class=\"params\">(Message msg)</span> </span>&#123;</div><div class=\"line\">            sb.append(<span class=\"string\">\"服务器返回数据：\"</span>);</div><div class=\"line\">            sb.append(msg.obj.toString());</div><div class=\"line\">            sb.append(<span class=\"string\">\"\\n\"</span>);</div><div class=\"line\">            showMessage.setText(sb.toString());</div><div class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">true</span>;</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;);</div><div class=\"line\"></div><div class=\"line\">    <span class=\"meta\">@Override</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title\">onCreate</span><span class=\"params\">(Bundle savedInstanceState)</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">super</span>.onCreate(savedInstanceState);</div><div class=\"line\">        setContentView(R.layout.activity_main);</div><div class=\"line\">        showMessage = findViewById(R.id.show_message);</div><div class=\"line\">        editText = findViewById(R.id.edit_text);</div><div class=\"line\">        findViewById(R.id.send).setOnClickListener(<span class=\"keyword\">this</span>);</div><div class=\"line\">        URI serverURI = URI.create(<span class=\"string\">\"ws://192.168.1.199:8887\"</span>);</div><div class=\"line\">        webSocketClient = <span class=\"keyword\">new</span> WebSocketClient(serverURI) &#123;</div><div class=\"line\">            <span class=\"meta\">@Override</span></div><div class=\"line\">            <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onOpen</span><span class=\"params\">(ServerHandshake handshakedata)</span> </span>&#123;</div><div class=\"line\">                sb.append(<span class=\"string\">\"onOpen at time：\"</span>);</div><div class=\"line\">                sb.append(<span class=\"keyword\">new</span> Date());</div><div class=\"line\">                sb.append(<span class=\"string\">\"服务器状态：\"</span>);</div><div class=\"line\">                sb.append(handshakedata.getHttpStatusMessage());</div><div class=\"line\">                sb.append(<span class=\"string\">\"\\n\"</span>);</div><div class=\"line\">                showMessage.setText(sb.toString());</div><div class=\"line\">            &#125;</div><div class=\"line\">            <span class=\"meta\">@Override</span></div><div class=\"line\">            <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onMessage</span><span class=\"params\">(String message)</span> </span>&#123;</div><div class=\"line\">                Message handlerMessage = Message.obtain();</div><div class=\"line\">                handlerMessage.obj = message;</div><div class=\"line\">                handler.sendMessage(handlerMessage);</div><div class=\"line\">            &#125;</div><div class=\"line\">            <span class=\"meta\">@Override</span></div><div class=\"line\">            <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onClose</span><span class=\"params\">(<span class=\"keyword\">int</span> code, String reason, <span class=\"keyword\">boolean</span> remote)</span> </span>&#123;</div><div class=\"line\">                sb.append(<span class=\"string\">\"onClose at time：\"</span>);</div><div class=\"line\">                sb.append(<span class=\"keyword\">new</span> Date());</div><div class=\"line\">                sb.append(<span class=\"string\">\"\\n\"</span>);</div><div class=\"line\">                sb.append(<span class=\"string\">\"onClose info:\"</span>);</div><div class=\"line\">                sb.append(code);</div><div class=\"line\">                sb.append(reason);</div><div class=\"line\">                sb.append(remote);</div><div class=\"line\">                sb.append(<span class=\"string\">\"\\n\"</span>);</div><div class=\"line\">                showMessage.setText(sb.toString());</div><div class=\"line\">            &#125;</div><div class=\"line\"></div><div class=\"line\">            <span class=\"meta\">@Override</span></div><div class=\"line\">            <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onError</span><span class=\"params\">(Exception ex)</span> </span>&#123;</div><div class=\"line\">                sb.append(<span class=\"string\">\"onError at time：\"</span>);</div><div class=\"line\">                sb.append(<span class=\"keyword\">new</span> Date());</div><div class=\"line\">                sb.append(<span class=\"string\">\"\\n\"</span>);</div><div class=\"line\">                sb.append(ex);</div><div class=\"line\">                sb.append(<span class=\"string\">\"\\n\"</span>);</div><div class=\"line\">                showMessage.setText(sb.toString());</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;;</div><div class=\"line\">        webSocketClient.connect();</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"meta\">@Override</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onClick</span><span class=\"params\">(View v)</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">switch</span> (v.getId()) &#123;</div><div class=\"line\">            <span class=\"keyword\">case</span> R.id.send:</div><div class=\"line\">                <span class=\"keyword\">if</span>(webSocketClient.isClosed() || webSocketClient.isClosing())&#123;</div><div class=\"line\">                    Snackbar.make(v,<span class=\"string\">\"Client正在关闭\"</span>,Snackbar.LENGTH_SHORT).show();</div><div class=\"line\">                    webSocketClient.connect();</div><div class=\"line\">                    <span class=\"keyword\">break</span>;</div><div class=\"line\">                &#125;</div><div class=\"line\">                webSocketClient.send(editText.getText().toString().trim());</div><div class=\"line\">                sb.append(<span class=\"string\">\"客户端发送消息：\"</span>);</div><div class=\"line\">                sb.append(<span class=\"keyword\">new</span> Date());</div><div class=\"line\">                sb.append(<span class=\"string\">\"\\n\"</span>);</div><div class=\"line\">                sb.append(editText.getText().toString().trim());</div><div class=\"line\">                sb.append(<span class=\"string\">\"\\n\"</span>);</div><div class=\"line\">                showMessage.setText(sb.toString());</div><div class=\"line\">                editText.setText(<span class=\"string\">\"\"</span>);</div><div class=\"line\">                <span class=\"keyword\">break</span>;</div><div class=\"line\">            <span class=\"keyword\">default</span>:</div><div class=\"line\">                <span class=\"keyword\">break</span>;</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n</li>\n</ol>\n<h4 id=\"服务端实现\"><a href=\"#服务端实现\" class=\"headerlink\" title=\"服务端实现\"></a>服务端实现</h4><p>上面提到我们后端使用的Spring中的WebSocket实现，其实用什么实现服务端无所谓，只要遵循协议就可以。个人在本地做测试的时候用的还是这个开源项目。</p>\n<ol>\n<li><p>服务端只需要关心<code>WebSocketServer</code>这个类就好，这个类里面有五个方法需要重写：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">/**服务开启*/</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onStart</span><span class=\"params\">()</span> </div><div class=\"line\"><span class=\"comment\">/**有客户端连接*/</span></div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onOpen</span><span class=\"params\">(WebSocket webSocket, ClientHandshake clientHandshake)</span></div><div class=\"line\"><span class=\"comment\">/**服务端关闭*/</span></div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onClose</span><span class=\"params\">(WebSocket webSocket, <span class=\"keyword\">int</span> i, String s, <span class=\"keyword\">boolean</span> b)</span></div><div class=\"line\"><span class=\"comment\">/**收到客户端的消息*/</span></div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onMessage</span><span class=\"params\">(WebSocket webSocket, String s)</span></div><div class=\"line\"><span class=\"comment\">/**出现异常*/</span></div><div class=\"line\"> <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onError</span><span class=\"params\">(WebSocket webSocket, Exception e)</span></span></div></pre></td></tr></table></figure>\n</li>\n<li><p>具体代码如下：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div><div class=\"line\">71</div><div class=\"line\">72</div><div class=\"line\">73</div><div class=\"line\">74</div><div class=\"line\">75</div><div class=\"line\">76</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">package</span> com.huangyuanlove;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">import</span> org.java_websocket.WebSocket;</div><div class=\"line\"><span class=\"keyword\">import</span> org.java_websocket.WebSocketImpl;</div><div class=\"line\"><span class=\"keyword\">import</span> org.java_websocket.handshake.ClientHandshake;</div><div class=\"line\"><span class=\"keyword\">import</span> org.java_websocket.server.WebSocketServer;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">import</span> java.io.BufferedReader;</div><div class=\"line\"><span class=\"keyword\">import</span> java.io.InputStreamReader;</div><div class=\"line\"><span class=\"keyword\">import</span> java.net.InetSocketAddress;</div><div class=\"line\"><span class=\"keyword\">import</span> java.net.UnknownHostException;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">TestWebSocket</span> <span class=\"keyword\">extends</span> <span class=\"title\">WebSocketServer</span> </span>&#123;</div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">TestWebSocket</span><span class=\"params\">(<span class=\"keyword\">int</span> port)</span> <span class=\"keyword\">throws</span> UnknownHostException </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">super</span>(<span class=\"keyword\">new</span> InetSocketAddress(port));</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">TestWebSocket</span><span class=\"params\">(InetSocketAddress address)</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">super</span>(address);</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</div><div class=\"line\">        WebSocketImpl.DEBUG = <span class=\"keyword\">true</span>;</div><div class=\"line\">        <span class=\"keyword\">try</span> &#123;</div><div class=\"line\">            <span class=\"keyword\">int</span> port = <span class=\"number\">8887</span>; <span class=\"comment\">// 843 flash policy port</span></div><div class=\"line\">            TestWebSocket s = <span class=\"keyword\">new</span> TestWebSocket(port);</div><div class=\"line\">            s.start();</div><div class=\"line\">            System.out.println(<span class=\"string\">\"ChatServer started on port: \"</span> + s.getPort());</div><div class=\"line\"></div><div class=\"line\">            BufferedReader sysin = <span class=\"keyword\">new</span> BufferedReader(<span class=\"keyword\">new</span> InputStreamReader(System.in));</div><div class=\"line\">            <span class=\"keyword\">while</span> (<span class=\"keyword\">true</span>) &#123;</div><div class=\"line\">                String in = sysin.readLine();</div><div class=\"line\">                s.broadcast(in);</div><div class=\"line\">                <span class=\"keyword\">if</span> (in.equals(<span class=\"string\">\"exit\"</span>)) &#123;</div><div class=\"line\">                    s.stop(<span class=\"number\">1000</span>);</div><div class=\"line\">                    <span class=\"keyword\">break</span>;</div><div class=\"line\">                &#125;</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125; <span class=\"keyword\">catch</span> (Exception ex) &#123;</div><div class=\"line\">            ex.printStackTrace();</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"meta\">@Override</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onOpen</span><span class=\"params\">(WebSocket webSocket, ClientHandshake clientHandshake)</span> </span>&#123;</div><div class=\"line\"></div><div class=\"line\">        broadcast(<span class=\"string\">\"new connection: \"</span> + clientHandshake.getResourceDescriptor());</div><div class=\"line\">        System.out.println(webSocket.getRemoteSocketAddress().getAddress().getHostAddress() + <span class=\"string\">\" entered the room!\"</span>);</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"meta\">@Override</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onClose</span><span class=\"params\">(WebSocket webSocket, <span class=\"keyword\">int</span> i, String s, <span class=\"keyword\">boolean</span> b)</span> </span>&#123;</div><div class=\"line\">        broadcast(webSocket + <span class=\"string\">\" onClose\"</span>);</div><div class=\"line\">        System.out.println(webSocket + <span class=\"string\">\" onClose\"</span>);</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"meta\">@Override</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onMessage</span><span class=\"params\">(WebSocket webSocket, String s)</span> </span>&#123;</div><div class=\"line\"></div><div class=\"line\">        broadcast(s);</div><div class=\"line\">        System.out.println(webSocket + <span class=\"string\">\": \"</span> + s);</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"meta\">@Override</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onError</span><span class=\"params\">(WebSocket webSocket, Exception e)</span> </span>&#123;</div><div class=\"line\">        e.printStackTrace();</div><div class=\"line\">        <span class=\"keyword\">if</span> (webSocket != <span class=\"keyword\">null</span>) &#123;</div><div class=\"line\">            <span class=\"comment\">// some errors like port binding failed may not be assignable to a specific websocket</span></div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"meta\">@Override</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onStart</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">        System.out.println(<span class=\"string\">\"Server started!\"</span>);</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n</li>\n</ol>\n<p>上面代码中<code>onMessage</code>方法中的<code>broadcast</code>方法是向所有连接到服务器的客户端发送消息(广播发送，其实就是一个小型的局域网聊天室)，如果只是谁发来的消息就回复给谁，可以调用<code>webSocket.send()</code>方法。<br>是用的时候先开启服务端，然后开启客户端(app)，需要注意是的，在客户端中重写的方法都不是在主线程中，如果需要更新UI，请切换到UI线程。<br>或者在客户端中使用<code>Service</code>,在<code>Service</code>中收到消息之后，广播给UI界面。</p>\n<hr>\n<p>以上</p>"},{"title":"Android ContentProvider","date":"2018-08-02T14:06:07.000Z","keywords":"ContentProvider","_content":"《Android开发艺术探索》9.5章\n\n系统预置了许多`ContentProvider`，比如通讯录信息、日程表信息等，要跨进程访问这些信息，只需要通过`ContentResolver`的query、update、insert和delete方法即可。虽然`ContentProvider`的底层\n实现是`Binder`，但是它的使用过程要比`AIDL`简单许多，这是因为系统已经为我们做了封装，使得我们无须关心底层细节即可轻松实现IPC。系统预置了许多`ContentProvider`，比如通讯录信息、日程表信息等，要跨进程访问这些信息，只需要通过`ContentResolver`的query、update、insert和delete方法即可。\n<!--more-->\n\n#### 使用ContentResolver读取联系人\n\n``` java\nprivate ArrayList<HashMap<String, String>> readContact() {\n\n    String NUM = ContactsContract.CommonDataKinds.Phone.NUMBER;\n    String NAME = ContactsContract.CommonDataKinds.Phone.DISPLAY_NAME;\n    Uri uri = ContactsContract.CommonDataKinds.Phone.CONTENT_URI;\n\n    ArrayList<HashMap<String, String>> list = new ArrayList<HashMap<String, String>>();\n    ContentResolver cr = getContentResolver();\n    Cursor cursor = cr.query(uri,new String[]{NUM,NAME},null,null,null);\n    while (cursor.moveToNext()){\n        String name = cursor.getString(cursor.getColumnIndex(NAME));\n        String phone = cursor.getString(cursor.getColumnIndex(NUM));\n        HashMap<String,String> contact = new HashMap<>();\n        contact.put(\"name\",name);\n        contact.put(\"phone\",phone);\n        list.add(contact);\n    }\n    return list;\n```\n\n#### 工作过程\n`ContentProvider`是一种内容共享型组件，它通过`Binder`向其他组件乃至其他应用提供数据。当`ContentProvider`所在的进程启动时，`ContentProvider`会同时启动并被发布到AMS中。需要注意的是，这个时候`ContentProvider`的`onCreate`要先于`Application`的`onCreate`而执行。\n当一个应用启动时，入口方法为`ActivityThread`的`main`方法，`main`方法是一个静态方法，在`main`方法中会创建`ActivityThread`的实例并创建主线程的消息队列，然后在`ActivityThread`的`attach`方法中会远程调用`AMS`的`attachApplication`方法并将`ApplicationThread`对象提供给`AMS`。`ApplicationThread`是一个`Binder`对象，它的`Binder`接口是`IApplicationThread`，它主要用于`ActivityThread`和`AMS`之间的通信，这一点在前面多次提到。在`AMS`的`attachApplication`方法中，会调用`ApplicationThread`的`bindApplication`方法，注意这个过程同样是跨进程完成的，`bindApplication`的逻辑会经过`ActivityThread`中的`mH  Handler`切换到`ActivityThread`中去执行，具体的方法是`handleBindApplication`。在`handleBindApplication`方法中，`ActivityThread`会创建`Application`对象并加载`ContentProvider`。需要注意的是，`ActivityThread`会先加载`ContentProvider`，然后再调用`Application`的`onCreate`方法。\n这就是`ContentProvider`的启动过程，`ContentProvider`启动后，外界就可以通过它所提供的增删改查这四个接口来操作`ContentProvider`中的数据源，即insert、delete、update和query四个方法。这四个方法都是通过`Binder`来调用的，外界无法直接访问`ContentProvider`，它只能通过AMS根据Uri来获取对应的`ContentProvider`的`Binder`接口`IConentProvider`，然后再通过`IConentProvider`来访问`ContentProvider`中的数据源。\n一般来说，`ContentProvide`r都应该是单实例的。`ContentProvider`到底是不是单实例，这是由它的`android:multiprocess`属性来决定的，当`android:multiprocess`为`false`时，`ContentProvider`是单实例，这也是默认值；当`android:multiprocess`为`true`时，`ContentProvider`为多实例，这个时候在每个调用者的进程中都存在一个`ContentProvider`对象。\n访问`ContentProvide`r需要通过`ContentResolver`，`ContentResolver`是一个抽象类，通过`Context`的`getContentResolver`方法获取的实际上是`ApplicationContentResolver`对象，`ApplicationContentResolver`类继承了`ContentResolver`并实现了`ContentResolver`中的抽象方法。当`ContentProvider`所在的进程未启动时，第一次访问它时就会触发`ContentProvider`的创建，当然这也伴随着`ContentProvider`所在进程的启动。通过`ContentProvider`的四个方法的任何一个都可以触发`ContentProvider`的启动过程，这里选择`query`方法。`ContentProvider`的`query`方法中，首先会获取`IContentProvider`对象，不管是通过`acquireUnstableProvider`方法还是直接通过`acquireProvider`方法，它们的本质都是一样的，最终都是通过`acquireProvider`方法来获取`ContentProvider`。下面是`ApplicationContentResolver`的`acquireProvider`方法的具体实现:\n``` java\n @Override\n    protected IContentProvider acquireProvider(Context context, String auth) {\n        return mMainThread.acquireProvider(context,\n                ContentProvider.getAuthorityWithoutUserId(auth),\n                resolveUserIdFromAuthority(auth), true);\n    }\n```\n`ApplicationContentResolver`的`acquireProvider`方法并没有处理任何逻辑，它直接调用了`ActivityThread`的`acquireProvider`方法，`ActivityThread`的`acquireProvider`方法的源码如下:\n``` java\npublic final IContentProvider acquireProvider(\n            Context c, String auth, int userId, boolean stable) {\n    final IContentProvider provider = acquireExistingProvider(c, auth, userId, stable);\n    if (provider != null) {\n        return provider;\n    }\n\n    // There is a possible race here.  Another thread may try to acquire\n    // the same provider at the same time.  When this happens, we want to ensure\n    // that the first one wins.\n    // Note that we cannot hold the lock while acquiring and installing the\n    // provider since it might take a long time to run and it could also potentially\n    // be re-entrant in the case where the provider is in the same process.\n    ContentProviderHolder holder = null;\n    try {\n        holder = ActivityManager.getService().getContentProvider(\n                getApplicationThread(), auth, userId, stable);\n    } catch (RemoteException ex) {\n        throw ex.rethrowFromSystemServer();\n    }\n    if (holder == null) {\n        Slog.e(TAG, \"Failed to find provider info for \" + auth);\n        return null;\n    }\n\n    // Install provider will increment the reference count for us, and break\n    // any ties in the race.\n    holder = installProvider(c, holder, holder.info,\n            true /*noisy*/, holder.noReleaseNeeded, stable);\n    return holder.provider;\n}\n```\n上面的代码首先会从`ActivityThread`中查找是否已经存在目标`ContentProvider`了，如果存在就直接返回。`ActivityThread`中通过`mProviderMap`来存储已经启动的`ContentProvider`对象，`mProviderMap`的声明如下所示:\n``` java\ninal ArrayMap<providerKey,ProviderClientRecord> mProviderMap = new ArrayMap<providerKey,ProviderClientRecord>();\n```\n如果目前`ContentProvider`没有启动，那么就发送一个进程间请求给AMS让其启动目标`ContentProvider`，最后再通过`installProvider`方法来修改引用计数。`ContentProvider`被启动时会伴随着进程的启动，在AMS中，首先会启动`ContentProvider`所在的进程，然后再启动`ContentProvider`。启动进程是由AMS的`startProcessLocked`方法来完成的，其内部主要是通过`Process`的`start`方法来完成一个新进程的启动，新进程启动后其入口方法为`ActivityThread`的main方法，如下所示:\n``` java\npublic static void main(String[] args) {\n    Trace.traceBegin(Trace.TRACE_TAG_ACTIVITY_MANAGER, \"ActivityThreadMain\");\n\n    // CloseGuard defaults to true and can be quite spammy.  We\n    // disable it here, but selectively enable it later (via\n    // StrictMode) on debug builds, but using DropBox, not logs.\n    CloseGuard.setEnabled(false);\n\n    Environment.initForCurrentUser();\n\n    // Set the reporter for event logging in libcore\n    EventLogger.setReporter(new EventLoggingReporter());\n\n    // Make sure TrustedCertificateStore looks in the right place for CA certificates\n    final File configDir = Environment.getUserConfigDirectory(UserHandle.myUserId());\n    TrustedCertificateStore.setDefaultUserDirectory(configDir);\n\n    Process.setArgV0(\"<pre-initialized>\");\n\n    Looper.prepareMainLooper();\n\n    ActivityThread thread = new ActivityThread();\n    thread.attach(false);\n\n    if (sMainThreadHandler == null) {\n        sMainThreadHandler = thread.getHandler();\n    }\n\n    if (false) {\n        Looper.myLooper().setMessageLogging(new\n                LogPrinter(Log.DEBUG, \"ActivityThread\"));\n    }\n\n    // End of event ActivityThreadMain.\n    Trace.traceEnd(Trace.TRACE_TAG_ACTIVITY_MANAGER);\n    Looper.loop();\n\n    throw new RuntimeException(\"Main thread loop unexpectedly exited\");\n}\n```\n可以看到，`ActivityThread`的`main`方法是一个静态方法，在它内部首先会创建`ActivityThread`的实例并调用`attach`方法来进行一系列初始化，接着就开始进行消息循环了。`ActivityThread`的`attach`方法会将`ApplicationThread`对象通过`AMS`的`attachApplication`方法跨进程传递给AMS，最终AMS会完成`ContentProvider`的创建过程，AMS的`attachApplication`方法调用了`attachApplicationLocked`方法，`attachApplicationLocked`中又调用了`ApplicationThread`的`bindApplication`，注意这个过程也是进程间调用，\n``` java\ntry {\n    mgr.attachApplication(mAppThread);\n} catch (RemoteException ex) {\n    throw ex.rethrowFromSystemServer();\n}\n\n@Override\n    public final void attachApplication(IApplicationThread thread) {\n        synchronized (this) {\n            int callingPid = Binder.getCallingPid();\n            final long origId = Binder.clearCallingIdentity();\n            attachApplicationLocked(thread, callingPid);\n            Binder.restoreCallingIdentity(origId);\n        }\n    }\nprivate final boolean attachApplicationLocked(IApplicationThread thread,int pid) {\n    ......\nif (app.instr != null) {\n                thread.bindApplication(processName, appInfo, providers,\n                        app.instr.mClass,\n                        profilerInfo, app.instr.mArguments,\n                        app.instr.mWatcher,\n                        app.instr.mUiAutomationConnection, testMode,\n                        mBinderTransactionTrackingEnabled, enableTrackAllocation,\n                        isRestrictedBackupMode || !normalMode, app.persistent,\n                        new Configuration(getGlobalConfiguration()), app.compat,\n                        getCommonServicesLocked(app.isolated),\n                        mCoreSettingsObserver.getCoreSettingsLocked(),\n                        buildSerial);\n            } else {\n                thread.bindApplication(processName, appInfo, providers, null, profilerInfo,\n                        null, null, null, testMode,\n                        mBinderTransactionTrackingEnabled, enableTrackAllocation,\n                        isRestrictedBackupMode || !normalMode, app.persistent,\n                        new Configuration(getGlobalConfiguration()), app.compat,\n                        getCommonServicesLocked(app.isolated),\n                        mCoreSettingsObserver.getCoreSettingsLocked(),\n                        buildSerial);\n            }\n            ......\n}\n```\n`ActivityThread`的`bindApplication`会发送一个`BIND_APPLICATION`类型的消息给`mH`，`mH`是一个`Handler`，它收到消息后会调用`ActivityThread`的`handleBindApplication`方法，`bindApplication`发送消息的过程如下所示:\n``` java\nAppBindData data = new AppBindData();\n            data.processName = processName;\n            data.appInfo = appInfo;\n            data.providers = providers;\n            data.instrumentationName = instrumentationName;\n            data.instrumentationArgs = instrumentationArgs;\n            data.instrumentationWatcher = instrumentationWatcher;\n            data.instrumentationUiAutomationConnection = instrumentationUiConnection;\n            data.debugMode = debugMode;\n            data.enableBinderTracking = enableBinderTracking;\n            data.trackAllocation = trackAllocation;\n            data.restrictedBackupMode = isRestrictedBackupMode;\n            data.persistent = persistent;\n            data.config = config;\n            data.compatInfo = compatInfo;\n            data.initProfilerInfo = profilerInfo;\n            data.buildSerial = buildSerial;\n            sendMessage(H.BIND_APPLICATION, data);\n```\n`ActivityThread`的`handleBindApplication`则完成了`Application`的创建以及`ContentProvider`的创建，可以分为如下四个步骤:\n\n** 创建ContextImpl和Instrumentation **\n``` java\nfinal ContextImpl appContext = ContextImpl.createAppContext(this, data.info);\nupdateLocaleListFromAppContext(appContext, mResourcesManager.getConfiguration().getLocales());\n try {\n    final ClassLoader cl = instrContext.getClassLoader();\n    mInstrumentation = (Instrumentation)\n        cl.loadClass(data.instrumentationName.getClassName()).newInstance();\n} catch (Exception e) {\n    throw new RuntimeException(\n        \"Unable to instantiate instrumentation \"\n        + data.instrumentationName + \": \" + e.toString(), e);\n}\nfinal ComponentName component = new ComponentName(ii.packageName, ii.name);\nmInstrumentation.init(this, instrContext, appContext, component, data.instrumentationWatcher, data.instrumentationUiAutomationConnection);\n```\n\n** 创建Application对象 **\n``` java\n// If the app is being launched for full backup or restore, bring it up in\n// a restricted environment with the base application class.\napp = data.info.makeApplication(data.restrictedBackupMode, null);\nmInitialApplication = app;\n```\n\n** 启动当前进程的ContentProvider并调用其onCreate方法 **\n``` java\n// don't bring up providers in restricted mode; they may depend on the\n// app's custom Application class\nif (!data.restrictedBackupMode) {\n    if (!ArrayUtils.isEmpty(data.providers)) {\n        installContentProviders(app, data.providers);\n        // For process that contains content providers, we want to\n        // ensure that the JIT is enabled \"at some point\".\n        mH.sendEmptyMessageDelayed(H.ENABLE_JIT, 10*1000);\n    }\n}\n```\n`installContentProviders`完成了`ContentProvider`的启动工作，它的实现如下所示。首先会遍历当前进程的`ProviderInfo`的列表并一一调用调用`installProvider`方法来启动它们，接着将已经启动的`ContentProvider`发布到AMS中，AMS会把它们存储在`ProviderMap`中，这样一来外部调用者就可以直接从AMS中获取`ContentProvider`了。\n``` java\n private void installContentProviders(\n            Context context, List<ProviderInfo> providers) {\n        final ArrayList<ContentProviderHolder> results = new ArrayList<>();\n\n        for (ProviderInfo cpi : providers) {\n            if (DEBUG_PROVIDER) {\n                StringBuilder buf = new StringBuilder(128);\n                buf.append(\"Pub \");\n                buf.append(cpi.authority);\n                buf.append(\": \");\n                buf.append(cpi.name);\n                Log.i(TAG, buf.toString());\n            }\n            ContentProviderHolder cph = installProvider(context, null, cpi,\n                    false /*noisy*/, true /*noReleaseNeeded*/, true /*stable*/);\n            if (cph != null) {\n                cph.noReleaseNeeded = true;\n                results.add(cph);\n            }\n        }\n\n        try {\n            ActivityManager.getService().publishContentProviders(\n                getApplicationThread(), results);\n        } catch (RemoteException ex) {\n            throw ex.rethrowFromSystemServer();\n        }\n    }\n```\n下面看一下`ContentProvider`对象的创建过程，在`installProvider`方法中有下面一段代码，其通过类加载器完成了`ContentProvider`对象的创建:\n``` java\nfinal java.lang.ClassLoader cl = c.getClassLoader();\nlocalProvider = (ContentProvider)cl.loadClass(info.name).newInstance();\nprovider = localProvider.getIContentProvider();\n// XXX Need to create the correct context for this provider.\nlocalProvider.attachInfo(c, info);\n```\n在上述代码中，除了完成`ContentProvider`对象的创建，还会通过`ContentProvider`的`attachInfo`方法来调用它的`onCreate`方法:\n``` java\nprivate void attachInfo(Context context, ProviderInfo info, boolean testing) {\n    mNoPerms = testing;\n\n    /*\n        * Only allow it to be set once, so after the content service gives\n        * this to us clients can't change it.\n        */\n    if (mContext == null) {\n        mContext = context;\n        if (context != null) {\n            mTransport.mAppOpsManager = (AppOpsManager) context.getSystemService(\n                    Context.APP_OPS_SERVICE);\n        }\n        mMyUid = Process.myUid();\n        if (info != null) {\n            setReadPermission(info.readPermission);\n            setWritePermission(info.writePermission);\n            setPathPermissions(info.pathPermissions);\n            mExported = info.exported;\n            mSingleUser = (info.flags & ProviderInfo.FLAG_SINGLE_USER) != 0;\n            setAuthorities(info.authority);\n        }\n        ContentProvider.this.onCreate();\n    }\n}\n```\n到此为止，`ContentProvider`已经被创建并且其`onCreate`方法也已经被调用，这意味着`ContentProvider`已经启动完成了。\n\n** 调用Application的onCreate方法 **\n``` java\n// Do this after providers, since instrumentation tests generally start their\n// test thread at this point, and we don't want that racing.\ntry {\n    mInstrumentation.onCreate(data.instrumentationArgs);\n}\ncatch (Exception e) {\n    throw new RuntimeException(\n        \"Exception thrown in onCreate() of \"\n        + data.instrumentationName + \": \" + e.toString(), e);\n}\ntry {\n    mInstrumentation.callApplicationOnCreate(app);\n} catch (Exception e) {\n    if (!mInstrumentation.onException(app, e)) {\n        throw new RuntimeException(\n            \"Unable to create application \" + app.getClass().getName()\n            + \": \" + e.toString(), e);\n    }\n}\n```\n经过上面的四个步骤，`ContentProvider`已经成功启动，并且其所在进程的`Application`也已经启动，这意味着`ContentProvider`所在的进程已经完成了整个的启动过程，然后其他应用就可以通过AMS来访问这个`ContentProvider`了。拿到了`ContentProvider`以后，就可以通过它所提供的接口方法来访问它了。需要注意的是，这里的`ContentProvider`并不是原始的`ContentProvider`，而是`ContentProvider`的`Binder`类型的对象`IContentProvider`，`IContentProvider`的具体实现是`ContentProviderNative`和`ContentProvider.Transport`，其中`ContentProvider.Transport`继承了`ContentProviderNative`。这里仍然选择`query`方法，首先其他应用会通过AMS获取到`ContentProvider`的`Binder`对象即`IContentProvider`，而`IContentProvider`的实现者实际上是`ContentProvider.Transport`。因此其他应用调用`IContentProvider`的query方法时最终会以进程间通信的方式调用到`ContentProvider.Transport`的query方法，它的实现如下所示:\n``` java\n@Override\npublic Cursor query(String callingPkg, Uri uri, @Nullable String[] projection,\n        @Nullable Bundle queryArgs, @Nullable ICancellationSignal cancellationSignal) {\n    validateIncomingUri(uri);\n    uri = maybeGetUriWithoutUserId(uri);\n    if (enforceReadPermission(callingPkg, uri, null) != AppOpsManager.MODE_ALLOWED) {\n        // The caller has no access to the data, so return an empty cursor with\n        // the columns in the requested order. The caller may ask for an invalid\n        // column and we would not catch that but this is not a problem in practice.\n        // We do not call ContentProvider#query with a modified where clause since\n        // the implementation is not guaranteed to be backed by a SQL database, hence\n        // it may not handle properly the tautology where clause we would have created.\n        if (projection != null) {\n            return new MatrixCursor(projection, 0);\n        }\n\n        // Null projection means all columns but we have no idea which they are.\n        // However, the caller may be expecting to access them my index. Hence,\n        // we have to execute the query as if allowed to get a cursor with the\n        // columns. We then use the column names to return an empty cursor.\n        Cursor cursor = ContentProvider.this.query(\n                uri, projection, queryArgs,\n                CancellationSignal.fromTransport(cancellationSignal));\n        if (cursor == null) {\n            return null;\n        }\n\n        // Return an empty cursor for all columns.\n        return new MatrixCursor(cursor.getColumnNames(), 0);\n    }\n    final String original = setCallingPackage(callingPkg);\n    try {\n        return ContentProvider.this.query(\n                uri, projection, queryArgs,\n                CancellationSignal.fromTransport(cancellationSignal));\n    } finally {\n        setCallingPackage(original);\n    }\n}\n```\n很显然，`ContentProvider.Transport`的`query`方法调用了`ContentProvider`的`query`方法，`query`方法的执行结果再通过`Binder`返回给调用者，这样一来整个调用过程就完成了。除了query方法，insert、delete和update方法也是类似的。\n\n----\n以上","source":"_posts/Android-ContentProvider.md","raw":"---\ntitle: Android ContentProvider\ndate: 2018-08-02 22:06:07\ntags: [Android]\nkeywords: ContentProvider\n---\n《Android开发艺术探索》9.5章\n\n系统预置了许多`ContentProvider`，比如通讯录信息、日程表信息等，要跨进程访问这些信息，只需要通过`ContentResolver`的query、update、insert和delete方法即可。虽然`ContentProvider`的底层\n实现是`Binder`，但是它的使用过程要比`AIDL`简单许多，这是因为系统已经为我们做了封装，使得我们无须关心底层细节即可轻松实现IPC。系统预置了许多`ContentProvider`，比如通讯录信息、日程表信息等，要跨进程访问这些信息，只需要通过`ContentResolver`的query、update、insert和delete方法即可。\n<!--more-->\n\n#### 使用ContentResolver读取联系人\n\n``` java\nprivate ArrayList<HashMap<String, String>> readContact() {\n\n    String NUM = ContactsContract.CommonDataKinds.Phone.NUMBER;\n    String NAME = ContactsContract.CommonDataKinds.Phone.DISPLAY_NAME;\n    Uri uri = ContactsContract.CommonDataKinds.Phone.CONTENT_URI;\n\n    ArrayList<HashMap<String, String>> list = new ArrayList<HashMap<String, String>>();\n    ContentResolver cr = getContentResolver();\n    Cursor cursor = cr.query(uri,new String[]{NUM,NAME},null,null,null);\n    while (cursor.moveToNext()){\n        String name = cursor.getString(cursor.getColumnIndex(NAME));\n        String phone = cursor.getString(cursor.getColumnIndex(NUM));\n        HashMap<String,String> contact = new HashMap<>();\n        contact.put(\"name\",name);\n        contact.put(\"phone\",phone);\n        list.add(contact);\n    }\n    return list;\n```\n\n#### 工作过程\n`ContentProvider`是一种内容共享型组件，它通过`Binder`向其他组件乃至其他应用提供数据。当`ContentProvider`所在的进程启动时，`ContentProvider`会同时启动并被发布到AMS中。需要注意的是，这个时候`ContentProvider`的`onCreate`要先于`Application`的`onCreate`而执行。\n当一个应用启动时，入口方法为`ActivityThread`的`main`方法，`main`方法是一个静态方法，在`main`方法中会创建`ActivityThread`的实例并创建主线程的消息队列，然后在`ActivityThread`的`attach`方法中会远程调用`AMS`的`attachApplication`方法并将`ApplicationThread`对象提供给`AMS`。`ApplicationThread`是一个`Binder`对象，它的`Binder`接口是`IApplicationThread`，它主要用于`ActivityThread`和`AMS`之间的通信，这一点在前面多次提到。在`AMS`的`attachApplication`方法中，会调用`ApplicationThread`的`bindApplication`方法，注意这个过程同样是跨进程完成的，`bindApplication`的逻辑会经过`ActivityThread`中的`mH  Handler`切换到`ActivityThread`中去执行，具体的方法是`handleBindApplication`。在`handleBindApplication`方法中，`ActivityThread`会创建`Application`对象并加载`ContentProvider`。需要注意的是，`ActivityThread`会先加载`ContentProvider`，然后再调用`Application`的`onCreate`方法。\n这就是`ContentProvider`的启动过程，`ContentProvider`启动后，外界就可以通过它所提供的增删改查这四个接口来操作`ContentProvider`中的数据源，即insert、delete、update和query四个方法。这四个方法都是通过`Binder`来调用的，外界无法直接访问`ContentProvider`，它只能通过AMS根据Uri来获取对应的`ContentProvider`的`Binder`接口`IConentProvider`，然后再通过`IConentProvider`来访问`ContentProvider`中的数据源。\n一般来说，`ContentProvide`r都应该是单实例的。`ContentProvider`到底是不是单实例，这是由它的`android:multiprocess`属性来决定的，当`android:multiprocess`为`false`时，`ContentProvider`是单实例，这也是默认值；当`android:multiprocess`为`true`时，`ContentProvider`为多实例，这个时候在每个调用者的进程中都存在一个`ContentProvider`对象。\n访问`ContentProvide`r需要通过`ContentResolver`，`ContentResolver`是一个抽象类，通过`Context`的`getContentResolver`方法获取的实际上是`ApplicationContentResolver`对象，`ApplicationContentResolver`类继承了`ContentResolver`并实现了`ContentResolver`中的抽象方法。当`ContentProvider`所在的进程未启动时，第一次访问它时就会触发`ContentProvider`的创建，当然这也伴随着`ContentProvider`所在进程的启动。通过`ContentProvider`的四个方法的任何一个都可以触发`ContentProvider`的启动过程，这里选择`query`方法。`ContentProvider`的`query`方法中，首先会获取`IContentProvider`对象，不管是通过`acquireUnstableProvider`方法还是直接通过`acquireProvider`方法，它们的本质都是一样的，最终都是通过`acquireProvider`方法来获取`ContentProvider`。下面是`ApplicationContentResolver`的`acquireProvider`方法的具体实现:\n``` java\n @Override\n    protected IContentProvider acquireProvider(Context context, String auth) {\n        return mMainThread.acquireProvider(context,\n                ContentProvider.getAuthorityWithoutUserId(auth),\n                resolveUserIdFromAuthority(auth), true);\n    }\n```\n`ApplicationContentResolver`的`acquireProvider`方法并没有处理任何逻辑，它直接调用了`ActivityThread`的`acquireProvider`方法，`ActivityThread`的`acquireProvider`方法的源码如下:\n``` java\npublic final IContentProvider acquireProvider(\n            Context c, String auth, int userId, boolean stable) {\n    final IContentProvider provider = acquireExistingProvider(c, auth, userId, stable);\n    if (provider != null) {\n        return provider;\n    }\n\n    // There is a possible race here.  Another thread may try to acquire\n    // the same provider at the same time.  When this happens, we want to ensure\n    // that the first one wins.\n    // Note that we cannot hold the lock while acquiring and installing the\n    // provider since it might take a long time to run and it could also potentially\n    // be re-entrant in the case where the provider is in the same process.\n    ContentProviderHolder holder = null;\n    try {\n        holder = ActivityManager.getService().getContentProvider(\n                getApplicationThread(), auth, userId, stable);\n    } catch (RemoteException ex) {\n        throw ex.rethrowFromSystemServer();\n    }\n    if (holder == null) {\n        Slog.e(TAG, \"Failed to find provider info for \" + auth);\n        return null;\n    }\n\n    // Install provider will increment the reference count for us, and break\n    // any ties in the race.\n    holder = installProvider(c, holder, holder.info,\n            true /*noisy*/, holder.noReleaseNeeded, stable);\n    return holder.provider;\n}\n```\n上面的代码首先会从`ActivityThread`中查找是否已经存在目标`ContentProvider`了，如果存在就直接返回。`ActivityThread`中通过`mProviderMap`来存储已经启动的`ContentProvider`对象，`mProviderMap`的声明如下所示:\n``` java\ninal ArrayMap<providerKey,ProviderClientRecord> mProviderMap = new ArrayMap<providerKey,ProviderClientRecord>();\n```\n如果目前`ContentProvider`没有启动，那么就发送一个进程间请求给AMS让其启动目标`ContentProvider`，最后再通过`installProvider`方法来修改引用计数。`ContentProvider`被启动时会伴随着进程的启动，在AMS中，首先会启动`ContentProvider`所在的进程，然后再启动`ContentProvider`。启动进程是由AMS的`startProcessLocked`方法来完成的，其内部主要是通过`Process`的`start`方法来完成一个新进程的启动，新进程启动后其入口方法为`ActivityThread`的main方法，如下所示:\n``` java\npublic static void main(String[] args) {\n    Trace.traceBegin(Trace.TRACE_TAG_ACTIVITY_MANAGER, \"ActivityThreadMain\");\n\n    // CloseGuard defaults to true and can be quite spammy.  We\n    // disable it here, but selectively enable it later (via\n    // StrictMode) on debug builds, but using DropBox, not logs.\n    CloseGuard.setEnabled(false);\n\n    Environment.initForCurrentUser();\n\n    // Set the reporter for event logging in libcore\n    EventLogger.setReporter(new EventLoggingReporter());\n\n    // Make sure TrustedCertificateStore looks in the right place for CA certificates\n    final File configDir = Environment.getUserConfigDirectory(UserHandle.myUserId());\n    TrustedCertificateStore.setDefaultUserDirectory(configDir);\n\n    Process.setArgV0(\"<pre-initialized>\");\n\n    Looper.prepareMainLooper();\n\n    ActivityThread thread = new ActivityThread();\n    thread.attach(false);\n\n    if (sMainThreadHandler == null) {\n        sMainThreadHandler = thread.getHandler();\n    }\n\n    if (false) {\n        Looper.myLooper().setMessageLogging(new\n                LogPrinter(Log.DEBUG, \"ActivityThread\"));\n    }\n\n    // End of event ActivityThreadMain.\n    Trace.traceEnd(Trace.TRACE_TAG_ACTIVITY_MANAGER);\n    Looper.loop();\n\n    throw new RuntimeException(\"Main thread loop unexpectedly exited\");\n}\n```\n可以看到，`ActivityThread`的`main`方法是一个静态方法，在它内部首先会创建`ActivityThread`的实例并调用`attach`方法来进行一系列初始化，接着就开始进行消息循环了。`ActivityThread`的`attach`方法会将`ApplicationThread`对象通过`AMS`的`attachApplication`方法跨进程传递给AMS，最终AMS会完成`ContentProvider`的创建过程，AMS的`attachApplication`方法调用了`attachApplicationLocked`方法，`attachApplicationLocked`中又调用了`ApplicationThread`的`bindApplication`，注意这个过程也是进程间调用，\n``` java\ntry {\n    mgr.attachApplication(mAppThread);\n} catch (RemoteException ex) {\n    throw ex.rethrowFromSystemServer();\n}\n\n@Override\n    public final void attachApplication(IApplicationThread thread) {\n        synchronized (this) {\n            int callingPid = Binder.getCallingPid();\n            final long origId = Binder.clearCallingIdentity();\n            attachApplicationLocked(thread, callingPid);\n            Binder.restoreCallingIdentity(origId);\n        }\n    }\nprivate final boolean attachApplicationLocked(IApplicationThread thread,int pid) {\n    ......\nif (app.instr != null) {\n                thread.bindApplication(processName, appInfo, providers,\n                        app.instr.mClass,\n                        profilerInfo, app.instr.mArguments,\n                        app.instr.mWatcher,\n                        app.instr.mUiAutomationConnection, testMode,\n                        mBinderTransactionTrackingEnabled, enableTrackAllocation,\n                        isRestrictedBackupMode || !normalMode, app.persistent,\n                        new Configuration(getGlobalConfiguration()), app.compat,\n                        getCommonServicesLocked(app.isolated),\n                        mCoreSettingsObserver.getCoreSettingsLocked(),\n                        buildSerial);\n            } else {\n                thread.bindApplication(processName, appInfo, providers, null, profilerInfo,\n                        null, null, null, testMode,\n                        mBinderTransactionTrackingEnabled, enableTrackAllocation,\n                        isRestrictedBackupMode || !normalMode, app.persistent,\n                        new Configuration(getGlobalConfiguration()), app.compat,\n                        getCommonServicesLocked(app.isolated),\n                        mCoreSettingsObserver.getCoreSettingsLocked(),\n                        buildSerial);\n            }\n            ......\n}\n```\n`ActivityThread`的`bindApplication`会发送一个`BIND_APPLICATION`类型的消息给`mH`，`mH`是一个`Handler`，它收到消息后会调用`ActivityThread`的`handleBindApplication`方法，`bindApplication`发送消息的过程如下所示:\n``` java\nAppBindData data = new AppBindData();\n            data.processName = processName;\n            data.appInfo = appInfo;\n            data.providers = providers;\n            data.instrumentationName = instrumentationName;\n            data.instrumentationArgs = instrumentationArgs;\n            data.instrumentationWatcher = instrumentationWatcher;\n            data.instrumentationUiAutomationConnection = instrumentationUiConnection;\n            data.debugMode = debugMode;\n            data.enableBinderTracking = enableBinderTracking;\n            data.trackAllocation = trackAllocation;\n            data.restrictedBackupMode = isRestrictedBackupMode;\n            data.persistent = persistent;\n            data.config = config;\n            data.compatInfo = compatInfo;\n            data.initProfilerInfo = profilerInfo;\n            data.buildSerial = buildSerial;\n            sendMessage(H.BIND_APPLICATION, data);\n```\n`ActivityThread`的`handleBindApplication`则完成了`Application`的创建以及`ContentProvider`的创建，可以分为如下四个步骤:\n\n** 创建ContextImpl和Instrumentation **\n``` java\nfinal ContextImpl appContext = ContextImpl.createAppContext(this, data.info);\nupdateLocaleListFromAppContext(appContext, mResourcesManager.getConfiguration().getLocales());\n try {\n    final ClassLoader cl = instrContext.getClassLoader();\n    mInstrumentation = (Instrumentation)\n        cl.loadClass(data.instrumentationName.getClassName()).newInstance();\n} catch (Exception e) {\n    throw new RuntimeException(\n        \"Unable to instantiate instrumentation \"\n        + data.instrumentationName + \": \" + e.toString(), e);\n}\nfinal ComponentName component = new ComponentName(ii.packageName, ii.name);\nmInstrumentation.init(this, instrContext, appContext, component, data.instrumentationWatcher, data.instrumentationUiAutomationConnection);\n```\n\n** 创建Application对象 **\n``` java\n// If the app is being launched for full backup or restore, bring it up in\n// a restricted environment with the base application class.\napp = data.info.makeApplication(data.restrictedBackupMode, null);\nmInitialApplication = app;\n```\n\n** 启动当前进程的ContentProvider并调用其onCreate方法 **\n``` java\n// don't bring up providers in restricted mode; they may depend on the\n// app's custom Application class\nif (!data.restrictedBackupMode) {\n    if (!ArrayUtils.isEmpty(data.providers)) {\n        installContentProviders(app, data.providers);\n        // For process that contains content providers, we want to\n        // ensure that the JIT is enabled \"at some point\".\n        mH.sendEmptyMessageDelayed(H.ENABLE_JIT, 10*1000);\n    }\n}\n```\n`installContentProviders`完成了`ContentProvider`的启动工作，它的实现如下所示。首先会遍历当前进程的`ProviderInfo`的列表并一一调用调用`installProvider`方法来启动它们，接着将已经启动的`ContentProvider`发布到AMS中，AMS会把它们存储在`ProviderMap`中，这样一来外部调用者就可以直接从AMS中获取`ContentProvider`了。\n``` java\n private void installContentProviders(\n            Context context, List<ProviderInfo> providers) {\n        final ArrayList<ContentProviderHolder> results = new ArrayList<>();\n\n        for (ProviderInfo cpi : providers) {\n            if (DEBUG_PROVIDER) {\n                StringBuilder buf = new StringBuilder(128);\n                buf.append(\"Pub \");\n                buf.append(cpi.authority);\n                buf.append(\": \");\n                buf.append(cpi.name);\n                Log.i(TAG, buf.toString());\n            }\n            ContentProviderHolder cph = installProvider(context, null, cpi,\n                    false /*noisy*/, true /*noReleaseNeeded*/, true /*stable*/);\n            if (cph != null) {\n                cph.noReleaseNeeded = true;\n                results.add(cph);\n            }\n        }\n\n        try {\n            ActivityManager.getService().publishContentProviders(\n                getApplicationThread(), results);\n        } catch (RemoteException ex) {\n            throw ex.rethrowFromSystemServer();\n        }\n    }\n```\n下面看一下`ContentProvider`对象的创建过程，在`installProvider`方法中有下面一段代码，其通过类加载器完成了`ContentProvider`对象的创建:\n``` java\nfinal java.lang.ClassLoader cl = c.getClassLoader();\nlocalProvider = (ContentProvider)cl.loadClass(info.name).newInstance();\nprovider = localProvider.getIContentProvider();\n// XXX Need to create the correct context for this provider.\nlocalProvider.attachInfo(c, info);\n```\n在上述代码中，除了完成`ContentProvider`对象的创建，还会通过`ContentProvider`的`attachInfo`方法来调用它的`onCreate`方法:\n``` java\nprivate void attachInfo(Context context, ProviderInfo info, boolean testing) {\n    mNoPerms = testing;\n\n    /*\n        * Only allow it to be set once, so after the content service gives\n        * this to us clients can't change it.\n        */\n    if (mContext == null) {\n        mContext = context;\n        if (context != null) {\n            mTransport.mAppOpsManager = (AppOpsManager) context.getSystemService(\n                    Context.APP_OPS_SERVICE);\n        }\n        mMyUid = Process.myUid();\n        if (info != null) {\n            setReadPermission(info.readPermission);\n            setWritePermission(info.writePermission);\n            setPathPermissions(info.pathPermissions);\n            mExported = info.exported;\n            mSingleUser = (info.flags & ProviderInfo.FLAG_SINGLE_USER) != 0;\n            setAuthorities(info.authority);\n        }\n        ContentProvider.this.onCreate();\n    }\n}\n```\n到此为止，`ContentProvider`已经被创建并且其`onCreate`方法也已经被调用，这意味着`ContentProvider`已经启动完成了。\n\n** 调用Application的onCreate方法 **\n``` java\n// Do this after providers, since instrumentation tests generally start their\n// test thread at this point, and we don't want that racing.\ntry {\n    mInstrumentation.onCreate(data.instrumentationArgs);\n}\ncatch (Exception e) {\n    throw new RuntimeException(\n        \"Exception thrown in onCreate() of \"\n        + data.instrumentationName + \": \" + e.toString(), e);\n}\ntry {\n    mInstrumentation.callApplicationOnCreate(app);\n} catch (Exception e) {\n    if (!mInstrumentation.onException(app, e)) {\n        throw new RuntimeException(\n            \"Unable to create application \" + app.getClass().getName()\n            + \": \" + e.toString(), e);\n    }\n}\n```\n经过上面的四个步骤，`ContentProvider`已经成功启动，并且其所在进程的`Application`也已经启动，这意味着`ContentProvider`所在的进程已经完成了整个的启动过程，然后其他应用就可以通过AMS来访问这个`ContentProvider`了。拿到了`ContentProvider`以后，就可以通过它所提供的接口方法来访问它了。需要注意的是，这里的`ContentProvider`并不是原始的`ContentProvider`，而是`ContentProvider`的`Binder`类型的对象`IContentProvider`，`IContentProvider`的具体实现是`ContentProviderNative`和`ContentProvider.Transport`，其中`ContentProvider.Transport`继承了`ContentProviderNative`。这里仍然选择`query`方法，首先其他应用会通过AMS获取到`ContentProvider`的`Binder`对象即`IContentProvider`，而`IContentProvider`的实现者实际上是`ContentProvider.Transport`。因此其他应用调用`IContentProvider`的query方法时最终会以进程间通信的方式调用到`ContentProvider.Transport`的query方法，它的实现如下所示:\n``` java\n@Override\npublic Cursor query(String callingPkg, Uri uri, @Nullable String[] projection,\n        @Nullable Bundle queryArgs, @Nullable ICancellationSignal cancellationSignal) {\n    validateIncomingUri(uri);\n    uri = maybeGetUriWithoutUserId(uri);\n    if (enforceReadPermission(callingPkg, uri, null) != AppOpsManager.MODE_ALLOWED) {\n        // The caller has no access to the data, so return an empty cursor with\n        // the columns in the requested order. The caller may ask for an invalid\n        // column and we would not catch that but this is not a problem in practice.\n        // We do not call ContentProvider#query with a modified where clause since\n        // the implementation is not guaranteed to be backed by a SQL database, hence\n        // it may not handle properly the tautology where clause we would have created.\n        if (projection != null) {\n            return new MatrixCursor(projection, 0);\n        }\n\n        // Null projection means all columns but we have no idea which they are.\n        // However, the caller may be expecting to access them my index. Hence,\n        // we have to execute the query as if allowed to get a cursor with the\n        // columns. We then use the column names to return an empty cursor.\n        Cursor cursor = ContentProvider.this.query(\n                uri, projection, queryArgs,\n                CancellationSignal.fromTransport(cancellationSignal));\n        if (cursor == null) {\n            return null;\n        }\n\n        // Return an empty cursor for all columns.\n        return new MatrixCursor(cursor.getColumnNames(), 0);\n    }\n    final String original = setCallingPackage(callingPkg);\n    try {\n        return ContentProvider.this.query(\n                uri, projection, queryArgs,\n                CancellationSignal.fromTransport(cancellationSignal));\n    } finally {\n        setCallingPackage(original);\n    }\n}\n```\n很显然，`ContentProvider.Transport`的`query`方法调用了`ContentProvider`的`query`方法，`query`方法的执行结果再通过`Binder`返回给调用者，这样一来整个调用过程就完成了。除了query方法，insert、delete和update方法也是类似的。\n\n----\n以上","slug":"Android-ContentProvider","published":1,"updated":"2018-08-04T04:44:06.660Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjl3vbtq1000fisdgrya640gg","content":"<p>《Android开发艺术探索》9.5章</p>\n<p>系统预置了许多<code>ContentProvider</code>，比如通讯录信息、日程表信息等，要跨进程访问这些信息，只需要通过<code>ContentResolver</code>的query、update、insert和delete方法即可。虽然<code>ContentProvider</code>的底层<br>实现是<code>Binder</code>，但是它的使用过程要比<code>AIDL</code>简单许多，这是因为系统已经为我们做了封装，使得我们无须关心底层细节即可轻松实现IPC。系统预置了许多<code>ContentProvider</code>，比如通讯录信息、日程表信息等，要跨进程访问这些信息，只需要通过<code>ContentResolver</code>的query、update、insert和delete方法即可。<br><a id=\"more\"></a></p>\n<h4 id=\"使用ContentResolver读取联系人\"><a href=\"#使用ContentResolver读取联系人\" class=\"headerlink\" title=\"使用ContentResolver读取联系人\"></a>使用ContentResolver读取联系人</h4><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">private</span> ArrayList&lt;HashMap&lt;String, String&gt;&gt; readContact() &#123;</div><div class=\"line\"></div><div class=\"line\">    String NUM = ContactsContract.CommonDataKinds.Phone.NUMBER;</div><div class=\"line\">    String NAME = ContactsContract.CommonDataKinds.Phone.DISPLAY_NAME;</div><div class=\"line\">    Uri uri = ContactsContract.CommonDataKinds.Phone.CONTENT_URI;</div><div class=\"line\"></div><div class=\"line\">    ArrayList&lt;HashMap&lt;String, String&gt;&gt; list = <span class=\"keyword\">new</span> ArrayList&lt;HashMap&lt;String, String&gt;&gt;();</div><div class=\"line\">    ContentResolver cr = getContentResolver();</div><div class=\"line\">    Cursor cursor = cr.query(uri,<span class=\"keyword\">new</span> String[]&#123;NUM,NAME&#125;,<span class=\"keyword\">null</span>,<span class=\"keyword\">null</span>,<span class=\"keyword\">null</span>);</div><div class=\"line\">    <span class=\"keyword\">while</span> (cursor.moveToNext())&#123;</div><div class=\"line\">        String name = cursor.getString(cursor.getColumnIndex(NAME));</div><div class=\"line\">        String phone = cursor.getString(cursor.getColumnIndex(NUM));</div><div class=\"line\">        HashMap&lt;String,String&gt; contact = <span class=\"keyword\">new</span> HashMap&lt;&gt;();</div><div class=\"line\">        contact.put(<span class=\"string\">\"name\"</span>,name);</div><div class=\"line\">        contact.put(<span class=\"string\">\"phone\"</span>,phone);</div><div class=\"line\">        list.add(contact);</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">return</span> list;</div></pre></td></tr></table></figure>\n<h4 id=\"工作过程\"><a href=\"#工作过程\" class=\"headerlink\" title=\"工作过程\"></a>工作过程</h4><p><code>ContentProvider</code>是一种内容共享型组件，它通过<code>Binder</code>向其他组件乃至其他应用提供数据。当<code>ContentProvider</code>所在的进程启动时，<code>ContentProvider</code>会同时启动并被发布到AMS中。需要注意的是，这个时候<code>ContentProvider</code>的<code>onCreate</code>要先于<code>Application</code>的<code>onCreate</code>而执行。<br>当一个应用启动时，入口方法为<code>ActivityThread</code>的<code>main</code>方法，<code>main</code>方法是一个静态方法，在<code>main</code>方法中会创建<code>ActivityThread</code>的实例并创建主线程的消息队列，然后在<code>ActivityThread</code>的<code>attach</code>方法中会远程调用<code>AMS</code>的<code>attachApplication</code>方法并将<code>ApplicationThread</code>对象提供给<code>AMS</code>。<code>ApplicationThread</code>是一个<code>Binder</code>对象，它的<code>Binder</code>接口是<code>IApplicationThread</code>，它主要用于<code>ActivityThread</code>和<code>AMS</code>之间的通信，这一点在前面多次提到。在<code>AMS</code>的<code>attachApplication</code>方法中，会调用<code>ApplicationThread</code>的<code>bindApplication</code>方法，注意这个过程同样是跨进程完成的，<code>bindApplication</code>的逻辑会经过<code>ActivityThread</code>中的<code>mH  Handler</code>切换到<code>ActivityThread</code>中去执行，具体的方法是<code>handleBindApplication</code>。在<code>handleBindApplication</code>方法中，<code>ActivityThread</code>会创建<code>Application</code>对象并加载<code>ContentProvider</code>。需要注意的是，<code>ActivityThread</code>会先加载<code>ContentProvider</code>，然后再调用<code>Application</code>的<code>onCreate</code>方法。<br>这就是<code>ContentProvider</code>的启动过程，<code>ContentProvider</code>启动后，外界就可以通过它所提供的增删改查这四个接口来操作<code>ContentProvider</code>中的数据源，即insert、delete、update和query四个方法。这四个方法都是通过<code>Binder</code>来调用的，外界无法直接访问<code>ContentProvider</code>，它只能通过AMS根据Uri来获取对应的<code>ContentProvider</code>的<code>Binder</code>接口<code>IConentProvider</code>，然后再通过<code>IConentProvider</code>来访问<code>ContentProvider</code>中的数据源。<br>一般来说，<code>ContentProvide</code>r都应该是单实例的。<code>ContentProvider</code>到底是不是单实例，这是由它的<code>android:multiprocess</code>属性来决定的，当<code>android:multiprocess</code>为<code>false</code>时，<code>ContentProvider</code>是单实例，这也是默认值；当<code>android:multiprocess</code>为<code>true</code>时，<code>ContentProvider</code>为多实例，这个时候在每个调用者的进程中都存在一个<code>ContentProvider</code>对象。<br>访问<code>ContentProvide</code>r需要通过<code>ContentResolver</code>，<code>ContentResolver</code>是一个抽象类，通过<code>Context</code>的<code>getContentResolver</code>方法获取的实际上是<code>ApplicationContentResolver</code>对象，<code>ApplicationContentResolver</code>类继承了<code>ContentResolver</code>并实现了<code>ContentResolver</code>中的抽象方法。当<code>ContentProvider</code>所在的进程未启动时，第一次访问它时就会触发<code>ContentProvider</code>的创建，当然这也伴随着<code>ContentProvider</code>所在进程的启动。通过<code>ContentProvider</code>的四个方法的任何一个都可以触发<code>ContentProvider</code>的启动过程，这里选择<code>query</code>方法。<code>ContentProvider</code>的<code>query</code>方法中，首先会获取<code>IContentProvider</code>对象，不管是通过<code>acquireUnstableProvider</code>方法还是直接通过<code>acquireProvider</code>方法，它们的本质都是一样的，最终都是通过<code>acquireProvider</code>方法来获取<code>ContentProvider</code>。下面是<code>ApplicationContentResolver</code>的<code>acquireProvider</code>方法的具体实现:<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">@Override</span></div><div class=\"line\">   <span class=\"function\"><span class=\"keyword\">protected</span> IContentProvider <span class=\"title\">acquireProvider</span><span class=\"params\">(Context context, String auth)</span> </span>&#123;</div><div class=\"line\">       <span class=\"keyword\">return</span> mMainThread.acquireProvider(context,</div><div class=\"line\">               ContentProvider.getAuthorityWithoutUserId(auth),</div><div class=\"line\">               resolveUserIdFromAuthority(auth), <span class=\"keyword\">true</span>);</div><div class=\"line\">   &#125;</div></pre></td></tr></table></figure></p>\n<p><code>ApplicationContentResolver</code>的<code>acquireProvider</code>方法并没有处理任何逻辑，它直接调用了<code>ActivityThread</code>的<code>acquireProvider</code>方法，<code>ActivityThread</code>的<code>acquireProvider</code>方法的源码如下:<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">final</span> IContentProvider <span class=\"title\">acquireProvider</span><span class=\"params\">(</span></span></div><div class=\"line\">            Context c, String auth, <span class=\"keyword\">int</span> userId, <span class=\"keyword\">boolean</span> stable) &#123;</div><div class=\"line\">    <span class=\"keyword\">final</span> IContentProvider provider = acquireExistingProvider(c, auth, userId, stable);</div><div class=\"line\">    <span class=\"keyword\">if</span> (provider != <span class=\"keyword\">null</span>) &#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> provider;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">// There is a possible race here.  Another thread may try to acquire</span></div><div class=\"line\">    <span class=\"comment\">// the same provider at the same time.  When this happens, we want to ensure</span></div><div class=\"line\">    <span class=\"comment\">// that the first one wins.</span></div><div class=\"line\">    <span class=\"comment\">// Note that we cannot hold the lock while acquiring and installing the</span></div><div class=\"line\">    <span class=\"comment\">// provider since it might take a long time to run and it could also potentially</span></div><div class=\"line\">    <span class=\"comment\">// be re-entrant in the case where the provider is in the same process.</span></div><div class=\"line\">    ContentProviderHolder holder = <span class=\"keyword\">null</span>;</div><div class=\"line\">    <span class=\"keyword\">try</span> &#123;</div><div class=\"line\">        holder = ActivityManager.getService().getContentProvider(</div><div class=\"line\">                getApplicationThread(), auth, userId, stable);</div><div class=\"line\">    &#125; <span class=\"keyword\">catch</span> (RemoteException ex) &#123;</div><div class=\"line\">        <span class=\"keyword\">throw</span> ex.rethrowFromSystemServer();</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">if</span> (holder == <span class=\"keyword\">null</span>) &#123;</div><div class=\"line\">        Slog.e(TAG, <span class=\"string\">\"Failed to find provider info for \"</span> + auth);</div><div class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">null</span>;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">// Install provider will increment the reference count for us, and break</span></div><div class=\"line\">    <span class=\"comment\">// any ties in the race.</span></div><div class=\"line\">    holder = installProvider(c, holder, holder.info,</div><div class=\"line\">            <span class=\"keyword\">true</span> <span class=\"comment\">/*noisy*/</span>, holder.noReleaseNeeded, stable);</div><div class=\"line\">    <span class=\"keyword\">return</span> holder.provider;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>上面的代码首先会从<code>ActivityThread</code>中查找是否已经存在目标<code>ContentProvider</code>了，如果存在就直接返回。<code>ActivityThread</code>中通过<code>mProviderMap</code>来存储已经启动的<code>ContentProvider</code>对象，<code>mProviderMap</code>的声明如下所示:<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">inal ArrayMap&lt;providerKey,ProviderClientRecord&gt; mProviderMap = <span class=\"keyword\">new</span> ArrayMap&lt;providerKey,ProviderClientRecord&gt;();</div></pre></td></tr></table></figure></p>\n<p>如果目前<code>ContentProvider</code>没有启动，那么就发送一个进程间请求给AMS让其启动目标<code>ContentProvider</code>，最后再通过<code>installProvider</code>方法来修改引用计数。<code>ContentProvider</code>被启动时会伴随着进程的启动，在AMS中，首先会启动<code>ContentProvider</code>所在的进程，然后再启动<code>ContentProvider</code>。启动进程是由AMS的<code>startProcessLocked</code>方法来完成的，其内部主要是通过<code>Process</code>的<code>start</code>方法来完成一个新进程的启动，新进程启动后其入口方法为<code>ActivityThread</code>的main方法，如下所示:<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</div><div class=\"line\">    Trace.traceBegin(Trace.TRACE_TAG_ACTIVITY_MANAGER, <span class=\"string\">\"ActivityThreadMain\"</span>);</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">// CloseGuard defaults to true and can be quite spammy.  We</span></div><div class=\"line\">    <span class=\"comment\">// disable it here, but selectively enable it later (via</span></div><div class=\"line\">    <span class=\"comment\">// StrictMode) on debug builds, but using DropBox, not logs.</span></div><div class=\"line\">    CloseGuard.setEnabled(<span class=\"keyword\">false</span>);</div><div class=\"line\"></div><div class=\"line\">    Environment.initForCurrentUser();</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">// Set the reporter for event logging in libcore</span></div><div class=\"line\">    EventLogger.setReporter(<span class=\"keyword\">new</span> EventLoggingReporter());</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">// Make sure TrustedCertificateStore looks in the right place for CA certificates</span></div><div class=\"line\">    <span class=\"keyword\">final</span> File configDir = Environment.getUserConfigDirectory(UserHandle.myUserId());</div><div class=\"line\">    TrustedCertificateStore.setDefaultUserDirectory(configDir);</div><div class=\"line\"></div><div class=\"line\">    Process.setArgV0(<span class=\"string\">\"&lt;pre-initialized&gt;\"</span>);</div><div class=\"line\"></div><div class=\"line\">    Looper.prepareMainLooper();</div><div class=\"line\"></div><div class=\"line\">    ActivityThread thread = <span class=\"keyword\">new</span> ActivityThread();</div><div class=\"line\">    thread.attach(<span class=\"keyword\">false</span>);</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">if</span> (sMainThreadHandler == <span class=\"keyword\">null</span>) &#123;</div><div class=\"line\">        sMainThreadHandler = thread.getHandler();</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"keyword\">false</span>) &#123;</div><div class=\"line\">        Looper.myLooper().setMessageLogging(<span class=\"keyword\">new</span></div><div class=\"line\">                LogPrinter(Log.DEBUG, <span class=\"string\">\"ActivityThread\"</span>));</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">// End of event ActivityThreadMain.</span></div><div class=\"line\">    Trace.traceEnd(Trace.TRACE_TAG_ACTIVITY_MANAGER);</div><div class=\"line\">    Looper.loop();</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> RuntimeException(<span class=\"string\">\"Main thread loop unexpectedly exited\"</span>);</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>可以看到，<code>ActivityThread</code>的<code>main</code>方法是一个静态方法，在它内部首先会创建<code>ActivityThread</code>的实例并调用<code>attach</code>方法来进行一系列初始化，接着就开始进行消息循环了。<code>ActivityThread</code>的<code>attach</code>方法会将<code>ApplicationThread</code>对象通过<code>AMS</code>的<code>attachApplication</code>方法跨进程传递给AMS，最终AMS会完成<code>ContentProvider</code>的创建过程，AMS的<code>attachApplication</code>方法调用了<code>attachApplicationLocked</code>方法，<code>attachApplicationLocked</code>中又调用了<code>ApplicationThread</code>的<code>bindApplication</code>，注意这个过程也是进程间调用，<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">try</span> &#123;</div><div class=\"line\">    mgr.attachApplication(mAppThread);</div><div class=\"line\">&#125; <span class=\"keyword\">catch</span> (RemoteException ex) &#123;</div><div class=\"line\">    <span class=\"keyword\">throw</span> ex.rethrowFromSystemServer();</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"meta\">@Override</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">final</span> <span class=\"keyword\">void</span> <span class=\"title\">attachApplication</span><span class=\"params\">(IApplicationThread thread)</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">synchronized</span> (<span class=\"keyword\">this</span>) &#123;</div><div class=\"line\">            <span class=\"keyword\">int</span> callingPid = Binder.getCallingPid();</div><div class=\"line\">            <span class=\"keyword\">final</span> <span class=\"keyword\">long</span> origId = Binder.clearCallingIdentity();</div><div class=\"line\">            attachApplicationLocked(thread, callingPid);</div><div class=\"line\">            Binder.restoreCallingIdentity(origId);</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">final</span> <span class=\"keyword\">boolean</span> <span class=\"title\">attachApplicationLocked</span><span class=\"params\">(IApplicationThread thread,<span class=\"keyword\">int</span> pid)</span> </span>&#123;</div><div class=\"line\">    ......</div><div class=\"line\"><span class=\"keyword\">if</span> (app.instr != <span class=\"keyword\">null</span>) &#123;</div><div class=\"line\">                thread.bindApplication(processName, appInfo, providers,</div><div class=\"line\">                        app.instr.mClass,</div><div class=\"line\">                        profilerInfo, app.instr.mArguments,</div><div class=\"line\">                        app.instr.mWatcher,</div><div class=\"line\">                        app.instr.mUiAutomationConnection, testMode,</div><div class=\"line\">                        mBinderTransactionTrackingEnabled, enableTrackAllocation,</div><div class=\"line\">                        isRestrictedBackupMode || !normalMode, app.persistent,</div><div class=\"line\">                        <span class=\"keyword\">new</span> Configuration(getGlobalConfiguration()), app.compat,</div><div class=\"line\">                        getCommonServicesLocked(app.isolated),</div><div class=\"line\">                        mCoreSettingsObserver.getCoreSettingsLocked(),</div><div class=\"line\">                        buildSerial);</div><div class=\"line\">            &#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">                thread.bindApplication(processName, appInfo, providers, <span class=\"keyword\">null</span>, profilerInfo,</div><div class=\"line\">                        <span class=\"keyword\">null</span>, <span class=\"keyword\">null</span>, <span class=\"keyword\">null</span>, testMode,</div><div class=\"line\">                        mBinderTransactionTrackingEnabled, enableTrackAllocation,</div><div class=\"line\">                        isRestrictedBackupMode || !normalMode, app.persistent,</div><div class=\"line\">                        <span class=\"keyword\">new</span> Configuration(getGlobalConfiguration()), app.compat,</div><div class=\"line\">                        getCommonServicesLocked(app.isolated),</div><div class=\"line\">                        mCoreSettingsObserver.getCoreSettingsLocked(),</div><div class=\"line\">                        buildSerial);</div><div class=\"line\">            &#125;</div><div class=\"line\">            ......</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p><code>ActivityThread</code>的<code>bindApplication</code>会发送一个<code>BIND_APPLICATION</code>类型的消息给<code>mH</code>，<code>mH</code>是一个<code>Handler</code>，它收到消息后会调用<code>ActivityThread</code>的<code>handleBindApplication</code>方法，<code>bindApplication</code>发送消息的过程如下所示:<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div></pre></td><td class=\"code\"><pre><div class=\"line\">AppBindData data = <span class=\"keyword\">new</span> AppBindData();</div><div class=\"line\">            data.processName = processName;</div><div class=\"line\">            data.appInfo = appInfo;</div><div class=\"line\">            data.providers = providers;</div><div class=\"line\">            data.instrumentationName = instrumentationName;</div><div class=\"line\">            data.instrumentationArgs = instrumentationArgs;</div><div class=\"line\">            data.instrumentationWatcher = instrumentationWatcher;</div><div class=\"line\">            data.instrumentationUiAutomationConnection = instrumentationUiConnection;</div><div class=\"line\">            data.debugMode = debugMode;</div><div class=\"line\">            data.enableBinderTracking = enableBinderTracking;</div><div class=\"line\">            data.trackAllocation = trackAllocation;</div><div class=\"line\">            data.restrictedBackupMode = isRestrictedBackupMode;</div><div class=\"line\">            data.persistent = persistent;</div><div class=\"line\">            data.config = config;</div><div class=\"line\">            data.compatInfo = compatInfo;</div><div class=\"line\">            data.initProfilerInfo = profilerInfo;</div><div class=\"line\">            data.buildSerial = buildSerial;</div><div class=\"line\">            sendMessage(H.BIND_APPLICATION, data);</div></pre></td></tr></table></figure></p>\n<p><code>ActivityThread</code>的<code>handleBindApplication</code>则完成了<code>Application</code>的创建以及<code>ContentProvider</code>的创建，可以分为如下四个步骤:</p>\n<p><strong> 创建ContextImpl和Instrumentation </strong><br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">final</span> ContextImpl appContext = ContextImpl.createAppContext(<span class=\"keyword\">this</span>, data.info);</div><div class=\"line\">updateLocaleListFromAppContext(appContext, mResourcesManager.getConfiguration().getLocales());</div><div class=\"line\"> <span class=\"keyword\">try</span> &#123;</div><div class=\"line\">    <span class=\"keyword\">final</span> ClassLoader cl = instrContext.getClassLoader();</div><div class=\"line\">    mInstrumentation = (Instrumentation)</div><div class=\"line\">        cl.loadClass(data.instrumentationName.getClassName()).newInstance();</div><div class=\"line\">&#125; <span class=\"keyword\">catch</span> (Exception e) &#123;</div><div class=\"line\">    <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> RuntimeException(</div><div class=\"line\">        <span class=\"string\">\"Unable to instantiate instrumentation \"</span></div><div class=\"line\">        + data.instrumentationName + <span class=\"string\">\": \"</span> + e.toString(), e);</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"keyword\">final</span> ComponentName component = <span class=\"keyword\">new</span> ComponentName(ii.packageName, ii.name);</div><div class=\"line\">mInstrumentation.init(<span class=\"keyword\">this</span>, instrContext, appContext, component, data.instrumentationWatcher, data.instrumentationUiAutomationConnection);</div></pre></td></tr></table></figure></p>\n<p><strong> 创建Application对象 </strong><br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// If the app is being launched for full backup or restore, bring it up in</span></div><div class=\"line\"><span class=\"comment\">// a restricted environment with the base application class.</span></div><div class=\"line\">app = data.info.makeApplication(data.restrictedBackupMode, <span class=\"keyword\">null</span>);</div><div class=\"line\">mInitialApplication = app;</div></pre></td></tr></table></figure></p>\n<p><strong> 启动当前进程的ContentProvider并调用其onCreate方法 </strong><br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// don't bring up providers in restricted mode; they may depend on the</span></div><div class=\"line\"><span class=\"comment\">// app's custom Application class</span></div><div class=\"line\"><span class=\"keyword\">if</span> (!data.restrictedBackupMode) &#123;</div><div class=\"line\">    <span class=\"keyword\">if</span> (!ArrayUtils.isEmpty(data.providers)) &#123;</div><div class=\"line\">        installContentProviders(app, data.providers);</div><div class=\"line\">        <span class=\"comment\">// For process that contains content providers, we want to</span></div><div class=\"line\">        <span class=\"comment\">// ensure that the JIT is enabled \"at some point\".</span></div><div class=\"line\">        mH.sendEmptyMessageDelayed(H.ENABLE_JIT, <span class=\"number\">10</span>*<span class=\"number\">1000</span>);</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p><code>installContentProviders</code>完成了<code>ContentProvider</code>的启动工作，它的实现如下所示。首先会遍历当前进程的<code>ProviderInfo</code>的列表并一一调用调用<code>installProvider</code>方法来启动它们，接着将已经启动的<code>ContentProvider</code>发布到AMS中，AMS会把它们存储在<code>ProviderMap</code>中，这样一来外部调用者就可以直接从AMS中获取<code>ContentProvider</code>了。<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">installContentProviders</span><span class=\"params\">(</span></span></div><div class=\"line\">           Context context, List&lt;ProviderInfo&gt; providers) &#123;</div><div class=\"line\">       <span class=\"keyword\">final</span> ArrayList&lt;ContentProviderHolder&gt; results = <span class=\"keyword\">new</span> ArrayList&lt;&gt;();</div><div class=\"line\"></div><div class=\"line\">       <span class=\"keyword\">for</span> (ProviderInfo cpi : providers) &#123;</div><div class=\"line\">           <span class=\"keyword\">if</span> (DEBUG_PROVIDER) &#123;</div><div class=\"line\">               StringBuilder buf = <span class=\"keyword\">new</span> StringBuilder(<span class=\"number\">128</span>);</div><div class=\"line\">               buf.append(<span class=\"string\">\"Pub \"</span>);</div><div class=\"line\">               buf.append(cpi.authority);</div><div class=\"line\">               buf.append(<span class=\"string\">\": \"</span>);</div><div class=\"line\">               buf.append(cpi.name);</div><div class=\"line\">               Log.i(TAG, buf.toString());</div><div class=\"line\">           &#125;</div><div class=\"line\">           ContentProviderHolder cph = installProvider(context, <span class=\"keyword\">null</span>, cpi,</div><div class=\"line\">                   <span class=\"keyword\">false</span> <span class=\"comment\">/*noisy*/</span>, <span class=\"keyword\">true</span> <span class=\"comment\">/*noReleaseNeeded*/</span>, <span class=\"keyword\">true</span> <span class=\"comment\">/*stable*/</span>);</div><div class=\"line\">           <span class=\"keyword\">if</span> (cph != <span class=\"keyword\">null</span>) &#123;</div><div class=\"line\">               cph.noReleaseNeeded = <span class=\"keyword\">true</span>;</div><div class=\"line\">               results.add(cph);</div><div class=\"line\">           &#125;</div><div class=\"line\">       &#125;</div><div class=\"line\"></div><div class=\"line\">       <span class=\"keyword\">try</span> &#123;</div><div class=\"line\">           ActivityManager.getService().publishContentProviders(</div><div class=\"line\">               getApplicationThread(), results);</div><div class=\"line\">       &#125; <span class=\"keyword\">catch</span> (RemoteException ex) &#123;</div><div class=\"line\">           <span class=\"keyword\">throw</span> ex.rethrowFromSystemServer();</div><div class=\"line\">       &#125;</div><div class=\"line\">   &#125;</div></pre></td></tr></table></figure></p>\n<p>下面看一下<code>ContentProvider</code>对象的创建过程，在<code>installProvider</code>方法中有下面一段代码，其通过类加载器完成了<code>ContentProvider</code>对象的创建:<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">final</span> java.lang.ClassLoader cl = c.getClassLoader();</div><div class=\"line\">localProvider = (ContentProvider)cl.loadClass(info.name).newInstance();</div><div class=\"line\">provider = localProvider.getIContentProvider();</div><div class=\"line\"><span class=\"comment\">// XXX Need to create the correct context for this provider.</span></div><div class=\"line\">localProvider.attachInfo(c, info);</div></pre></td></tr></table></figure></p>\n<p>在上述代码中，除了完成<code>ContentProvider</code>对象的创建，还会通过<code>ContentProvider</code>的<code>attachInfo</code>方法来调用它的<code>onCreate</code>方法:<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">attachInfo</span><span class=\"params\">(Context context, ProviderInfo info, <span class=\"keyword\">boolean</span> testing)</span> </span>&#123;</div><div class=\"line\">    mNoPerms = testing;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">/*</span></div><div class=\"line\">        * Only allow it to be set once, so after the content service gives</div><div class=\"line\">        * this to us clients can't change it.</div><div class=\"line\">        */</div><div class=\"line\">    <span class=\"keyword\">if</span> (mContext == <span class=\"keyword\">null</span>) &#123;</div><div class=\"line\">        mContext = context;</div><div class=\"line\">        <span class=\"keyword\">if</span> (context != <span class=\"keyword\">null</span>) &#123;</div><div class=\"line\">            mTransport.mAppOpsManager = (AppOpsManager) context.getSystemService(</div><div class=\"line\">                    Context.APP_OPS_SERVICE);</div><div class=\"line\">        &#125;</div><div class=\"line\">        mMyUid = Process.myUid();</div><div class=\"line\">        <span class=\"keyword\">if</span> (info != <span class=\"keyword\">null</span>) &#123;</div><div class=\"line\">            setReadPermission(info.readPermission);</div><div class=\"line\">            setWritePermission(info.writePermission);</div><div class=\"line\">            setPathPermissions(info.pathPermissions);</div><div class=\"line\">            mExported = info.exported;</div><div class=\"line\">            mSingleUser = (info.flags &amp; ProviderInfo.FLAG_SINGLE_USER) != <span class=\"number\">0</span>;</div><div class=\"line\">            setAuthorities(info.authority);</div><div class=\"line\">        &#125;</div><div class=\"line\">        ContentProvider.<span class=\"keyword\">this</span>.onCreate();</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>到此为止，<code>ContentProvider</code>已经被创建并且其<code>onCreate</code>方法也已经被调用，这意味着<code>ContentProvider</code>已经启动完成了。</p>\n<p><strong> 调用Application的onCreate方法 </strong><br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// Do this after providers, since instrumentation tests generally start their</span></div><div class=\"line\"><span class=\"comment\">// test thread at this point, and we don't want that racing.</span></div><div class=\"line\"><span class=\"keyword\">try</span> &#123;</div><div class=\"line\">    mInstrumentation.onCreate(data.instrumentationArgs);</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"keyword\">catch</span> (Exception e) &#123;</div><div class=\"line\">    <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> RuntimeException(</div><div class=\"line\">        <span class=\"string\">\"Exception thrown in onCreate() of \"</span></div><div class=\"line\">        + data.instrumentationName + <span class=\"string\">\": \"</span> + e.toString(), e);</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"keyword\">try</span> &#123;</div><div class=\"line\">    mInstrumentation.callApplicationOnCreate(app);</div><div class=\"line\">&#125; <span class=\"keyword\">catch</span> (Exception e) &#123;</div><div class=\"line\">    <span class=\"keyword\">if</span> (!mInstrumentation.onException(app, e)) &#123;</div><div class=\"line\">        <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> RuntimeException(</div><div class=\"line\">            <span class=\"string\">\"Unable to create application \"</span> + app.getClass().getName()</div><div class=\"line\">            + <span class=\"string\">\": \"</span> + e.toString(), e);</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>经过上面的四个步骤，<code>ContentProvider</code>已经成功启动，并且其所在进程的<code>Application</code>也已经启动，这意味着<code>ContentProvider</code>所在的进程已经完成了整个的启动过程，然后其他应用就可以通过AMS来访问这个<code>ContentProvider</code>了。拿到了<code>ContentProvider</code>以后，就可以通过它所提供的接口方法来访问它了。需要注意的是，这里的<code>ContentProvider</code>并不是原始的<code>ContentProvider</code>，而是<code>ContentProvider</code>的<code>Binder</code>类型的对象<code>IContentProvider</code>，<code>IContentProvider</code>的具体实现是<code>ContentProviderNative</code>和<code>ContentProvider.Transport</code>，其中<code>ContentProvider.Transport</code>继承了<code>ContentProviderNative</code>。这里仍然选择<code>query</code>方法，首先其他应用会通过AMS获取到<code>ContentProvider</code>的<code>Binder</code>对象即<code>IContentProvider</code>，而<code>IContentProvider</code>的实现者实际上是<code>ContentProvider.Transport</code>。因此其他应用调用<code>IContentProvider</code>的query方法时最终会以进程间通信的方式调用到<code>ContentProvider.Transport</code>的query方法，它的实现如下所示:<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">@Override</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> Cursor <span class=\"title\">query</span><span class=\"params\">(String callingPkg, Uri uri, @Nullable String[] projection,</span></span></div><div class=\"line\">        @Nullable Bundle queryArgs, @Nullable ICancellationSignal cancellationSignal) &#123;</div><div class=\"line\">    validateIncomingUri(uri);</div><div class=\"line\">    uri = maybeGetUriWithoutUserId(uri);</div><div class=\"line\">    <span class=\"keyword\">if</span> (enforceReadPermission(callingPkg, uri, <span class=\"keyword\">null</span>) != AppOpsManager.MODE_ALLOWED) &#123;</div><div class=\"line\">        <span class=\"comment\">// The caller has no access to the data, so return an empty cursor with</span></div><div class=\"line\">        <span class=\"comment\">// the columns in the requested order. The caller may ask for an invalid</span></div><div class=\"line\">        <span class=\"comment\">// column and we would not catch that but this is not a problem in practice.</span></div><div class=\"line\">        <span class=\"comment\">// We do not call ContentProvider#query with a modified where clause since</span></div><div class=\"line\">        <span class=\"comment\">// the implementation is not guaranteed to be backed by a SQL database, hence</span></div><div class=\"line\">        <span class=\"comment\">// it may not handle properly the tautology where clause we would have created.</span></div><div class=\"line\">        <span class=\"keyword\">if</span> (projection != <span class=\"keyword\">null</span>) &#123;</div><div class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> MatrixCursor(projection, <span class=\"number\">0</span>);</div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\">        <span class=\"comment\">// Null projection means all columns but we have no idea which they are.</span></div><div class=\"line\">        <span class=\"comment\">// However, the caller may be expecting to access them my index. Hence,</span></div><div class=\"line\">        <span class=\"comment\">// we have to execute the query as if allowed to get a cursor with the</span></div><div class=\"line\">        <span class=\"comment\">// columns. We then use the column names to return an empty cursor.</span></div><div class=\"line\">        Cursor cursor = ContentProvider.<span class=\"keyword\">this</span>.query(</div><div class=\"line\">                uri, projection, queryArgs,</div><div class=\"line\">                CancellationSignal.fromTransport(cancellationSignal));</div><div class=\"line\">        <span class=\"keyword\">if</span> (cursor == <span class=\"keyword\">null</span>) &#123;</div><div class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">null</span>;</div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\">        <span class=\"comment\">// Return an empty cursor for all columns.</span></div><div class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> MatrixCursor(cursor.getColumnNames(), <span class=\"number\">0</span>);</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">final</span> String original = setCallingPackage(callingPkg);</div><div class=\"line\">    <span class=\"keyword\">try</span> &#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> ContentProvider.<span class=\"keyword\">this</span>.query(</div><div class=\"line\">                uri, projection, queryArgs,</div><div class=\"line\">                CancellationSignal.fromTransport(cancellationSignal));</div><div class=\"line\">    &#125; <span class=\"keyword\">finally</span> &#123;</div><div class=\"line\">        setCallingPackage(original);</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>很显然，<code>ContentProvider.Transport</code>的<code>query</code>方法调用了<code>ContentProvider</code>的<code>query</code>方法，<code>query</code>方法的执行结果再通过<code>Binder</code>返回给调用者，这样一来整个调用过程就完成了。除了query方法，insert、delete和update方法也是类似的。</p>\n<hr>\n<p>以上</p>\n","excerpt":"<p>《Android开发艺术探索》9.5章</p>\n<p>系统预置了许多<code>ContentProvider</code>，比如通讯录信息、日程表信息等，要跨进程访问这些信息，只需要通过<code>ContentResolver</code>的query、update、insert和delete方法即可。虽然<code>ContentProvider</code>的底层<br>实现是<code>Binder</code>，但是它的使用过程要比<code>AIDL</code>简单许多，这是因为系统已经为我们做了封装，使得我们无须关心底层细节即可轻松实现IPC。系统预置了许多<code>ContentProvider</code>，比如通讯录信息、日程表信息等，要跨进程访问这些信息，只需要通过<code>ContentResolver</code>的query、update、insert和delete方法即可。<br>","more":"</p>\n<h4 id=\"使用ContentResolver读取联系人\"><a href=\"#使用ContentResolver读取联系人\" class=\"headerlink\" title=\"使用ContentResolver读取联系人\"></a>使用ContentResolver读取联系人</h4><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">private</span> ArrayList&lt;HashMap&lt;String, String&gt;&gt; readContact() &#123;</div><div class=\"line\"></div><div class=\"line\">    String NUM = ContactsContract.CommonDataKinds.Phone.NUMBER;</div><div class=\"line\">    String NAME = ContactsContract.CommonDataKinds.Phone.DISPLAY_NAME;</div><div class=\"line\">    Uri uri = ContactsContract.CommonDataKinds.Phone.CONTENT_URI;</div><div class=\"line\"></div><div class=\"line\">    ArrayList&lt;HashMap&lt;String, String&gt;&gt; list = <span class=\"keyword\">new</span> ArrayList&lt;HashMap&lt;String, String&gt;&gt;();</div><div class=\"line\">    ContentResolver cr = getContentResolver();</div><div class=\"line\">    Cursor cursor = cr.query(uri,<span class=\"keyword\">new</span> String[]&#123;NUM,NAME&#125;,<span class=\"keyword\">null</span>,<span class=\"keyword\">null</span>,<span class=\"keyword\">null</span>);</div><div class=\"line\">    <span class=\"keyword\">while</span> (cursor.moveToNext())&#123;</div><div class=\"line\">        String name = cursor.getString(cursor.getColumnIndex(NAME));</div><div class=\"line\">        String phone = cursor.getString(cursor.getColumnIndex(NUM));</div><div class=\"line\">        HashMap&lt;String,String&gt; contact = <span class=\"keyword\">new</span> HashMap&lt;&gt;();</div><div class=\"line\">        contact.put(<span class=\"string\">\"name\"</span>,name);</div><div class=\"line\">        contact.put(<span class=\"string\">\"phone\"</span>,phone);</div><div class=\"line\">        list.add(contact);</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">return</span> list;</div></pre></td></tr></table></figure>\n<h4 id=\"工作过程\"><a href=\"#工作过程\" class=\"headerlink\" title=\"工作过程\"></a>工作过程</h4><p><code>ContentProvider</code>是一种内容共享型组件，它通过<code>Binder</code>向其他组件乃至其他应用提供数据。当<code>ContentProvider</code>所在的进程启动时，<code>ContentProvider</code>会同时启动并被发布到AMS中。需要注意的是，这个时候<code>ContentProvider</code>的<code>onCreate</code>要先于<code>Application</code>的<code>onCreate</code>而执行。<br>当一个应用启动时，入口方法为<code>ActivityThread</code>的<code>main</code>方法，<code>main</code>方法是一个静态方法，在<code>main</code>方法中会创建<code>ActivityThread</code>的实例并创建主线程的消息队列，然后在<code>ActivityThread</code>的<code>attach</code>方法中会远程调用<code>AMS</code>的<code>attachApplication</code>方法并将<code>ApplicationThread</code>对象提供给<code>AMS</code>。<code>ApplicationThread</code>是一个<code>Binder</code>对象，它的<code>Binder</code>接口是<code>IApplicationThread</code>，它主要用于<code>ActivityThread</code>和<code>AMS</code>之间的通信，这一点在前面多次提到。在<code>AMS</code>的<code>attachApplication</code>方法中，会调用<code>ApplicationThread</code>的<code>bindApplication</code>方法，注意这个过程同样是跨进程完成的，<code>bindApplication</code>的逻辑会经过<code>ActivityThread</code>中的<code>mH  Handler</code>切换到<code>ActivityThread</code>中去执行，具体的方法是<code>handleBindApplication</code>。在<code>handleBindApplication</code>方法中，<code>ActivityThread</code>会创建<code>Application</code>对象并加载<code>ContentProvider</code>。需要注意的是，<code>ActivityThread</code>会先加载<code>ContentProvider</code>，然后再调用<code>Application</code>的<code>onCreate</code>方法。<br>这就是<code>ContentProvider</code>的启动过程，<code>ContentProvider</code>启动后，外界就可以通过它所提供的增删改查这四个接口来操作<code>ContentProvider</code>中的数据源，即insert、delete、update和query四个方法。这四个方法都是通过<code>Binder</code>来调用的，外界无法直接访问<code>ContentProvider</code>，它只能通过AMS根据Uri来获取对应的<code>ContentProvider</code>的<code>Binder</code>接口<code>IConentProvider</code>，然后再通过<code>IConentProvider</code>来访问<code>ContentProvider</code>中的数据源。<br>一般来说，<code>ContentProvide</code>r都应该是单实例的。<code>ContentProvider</code>到底是不是单实例，这是由它的<code>android:multiprocess</code>属性来决定的，当<code>android:multiprocess</code>为<code>false</code>时，<code>ContentProvider</code>是单实例，这也是默认值；当<code>android:multiprocess</code>为<code>true</code>时，<code>ContentProvider</code>为多实例，这个时候在每个调用者的进程中都存在一个<code>ContentProvider</code>对象。<br>访问<code>ContentProvide</code>r需要通过<code>ContentResolver</code>，<code>ContentResolver</code>是一个抽象类，通过<code>Context</code>的<code>getContentResolver</code>方法获取的实际上是<code>ApplicationContentResolver</code>对象，<code>ApplicationContentResolver</code>类继承了<code>ContentResolver</code>并实现了<code>ContentResolver</code>中的抽象方法。当<code>ContentProvider</code>所在的进程未启动时，第一次访问它时就会触发<code>ContentProvider</code>的创建，当然这也伴随着<code>ContentProvider</code>所在进程的启动。通过<code>ContentProvider</code>的四个方法的任何一个都可以触发<code>ContentProvider</code>的启动过程，这里选择<code>query</code>方法。<code>ContentProvider</code>的<code>query</code>方法中，首先会获取<code>IContentProvider</code>对象，不管是通过<code>acquireUnstableProvider</code>方法还是直接通过<code>acquireProvider</code>方法，它们的本质都是一样的，最终都是通过<code>acquireProvider</code>方法来获取<code>ContentProvider</code>。下面是<code>ApplicationContentResolver</code>的<code>acquireProvider</code>方法的具体实现:<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">@Override</span></div><div class=\"line\">   <span class=\"function\"><span class=\"keyword\">protected</span> IContentProvider <span class=\"title\">acquireProvider</span><span class=\"params\">(Context context, String auth)</span> </span>&#123;</div><div class=\"line\">       <span class=\"keyword\">return</span> mMainThread.acquireProvider(context,</div><div class=\"line\">               ContentProvider.getAuthorityWithoutUserId(auth),</div><div class=\"line\">               resolveUserIdFromAuthority(auth), <span class=\"keyword\">true</span>);</div><div class=\"line\">   &#125;</div></pre></td></tr></table></figure></p>\n<p><code>ApplicationContentResolver</code>的<code>acquireProvider</code>方法并没有处理任何逻辑，它直接调用了<code>ActivityThread</code>的<code>acquireProvider</code>方法，<code>ActivityThread</code>的<code>acquireProvider</code>方法的源码如下:<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">final</span> IContentProvider <span class=\"title\">acquireProvider</span><span class=\"params\">(</div><div class=\"line\">            Context c, String auth, <span class=\"keyword\">int</span> userId, <span class=\"keyword\">boolean</span> stable)</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">final</span> IContentProvider provider = acquireExistingProvider(c, auth, userId, stable);</div><div class=\"line\">    <span class=\"keyword\">if</span> (provider != <span class=\"keyword\">null</span>) &#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> provider;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">// There is a possible race here.  Another thread may try to acquire</span></div><div class=\"line\">    <span class=\"comment\">// the same provider at the same time.  When this happens, we want to ensure</span></div><div class=\"line\">    <span class=\"comment\">// that the first one wins.</span></div><div class=\"line\">    <span class=\"comment\">// Note that we cannot hold the lock while acquiring and installing the</span></div><div class=\"line\">    <span class=\"comment\">// provider since it might take a long time to run and it could also potentially</span></div><div class=\"line\">    <span class=\"comment\">// be re-entrant in the case where the provider is in the same process.</span></div><div class=\"line\">    ContentProviderHolder holder = <span class=\"keyword\">null</span>;</div><div class=\"line\">    <span class=\"keyword\">try</span> &#123;</div><div class=\"line\">        holder = ActivityManager.getService().getContentProvider(</div><div class=\"line\">                getApplicationThread(), auth, userId, stable);</div><div class=\"line\">    &#125; <span class=\"keyword\">catch</span> (RemoteException ex) &#123;</div><div class=\"line\">        <span class=\"keyword\">throw</span> ex.rethrowFromSystemServer();</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">if</span> (holder == <span class=\"keyword\">null</span>) &#123;</div><div class=\"line\">        Slog.e(TAG, <span class=\"string\">\"Failed to find provider info for \"</span> + auth);</div><div class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">null</span>;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">// Install provider will increment the reference count for us, and break</span></div><div class=\"line\">    <span class=\"comment\">// any ties in the race.</span></div><div class=\"line\">    holder = installProvider(c, holder, holder.info,</div><div class=\"line\">            <span class=\"keyword\">true</span> <span class=\"comment\">/*noisy*/</span>, holder.noReleaseNeeded, stable);</div><div class=\"line\">    <span class=\"keyword\">return</span> holder.provider;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>上面的代码首先会从<code>ActivityThread</code>中查找是否已经存在目标<code>ContentProvider</code>了，如果存在就直接返回。<code>ActivityThread</code>中通过<code>mProviderMap</code>来存储已经启动的<code>ContentProvider</code>对象，<code>mProviderMap</code>的声明如下所示:<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">inal ArrayMap&lt;providerKey,ProviderClientRecord&gt; mProviderMap = <span class=\"keyword\">new</span> ArrayMap&lt;providerKey,ProviderClientRecord&gt;();</div></pre></td></tr></table></figure></p>\n<p>如果目前<code>ContentProvider</code>没有启动，那么就发送一个进程间请求给AMS让其启动目标<code>ContentProvider</code>，最后再通过<code>installProvider</code>方法来修改引用计数。<code>ContentProvider</code>被启动时会伴随着进程的启动，在AMS中，首先会启动<code>ContentProvider</code>所在的进程，然后再启动<code>ContentProvider</code>。启动进程是由AMS的<code>startProcessLocked</code>方法来完成的，其内部主要是通过<code>Process</code>的<code>start</code>方法来完成一个新进程的启动，新进程启动后其入口方法为<code>ActivityThread</code>的main方法，如下所示:<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</div><div class=\"line\">    Trace.traceBegin(Trace.TRACE_TAG_ACTIVITY_MANAGER, <span class=\"string\">\"ActivityThreadMain\"</span>);</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">// CloseGuard defaults to true and can be quite spammy.  We</span></div><div class=\"line\">    <span class=\"comment\">// disable it here, but selectively enable it later (via</span></div><div class=\"line\">    <span class=\"comment\">// StrictMode) on debug builds, but using DropBox, not logs.</span></div><div class=\"line\">    CloseGuard.setEnabled(<span class=\"keyword\">false</span>);</div><div class=\"line\"></div><div class=\"line\">    Environment.initForCurrentUser();</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">// Set the reporter for event logging in libcore</span></div><div class=\"line\">    EventLogger.setReporter(<span class=\"keyword\">new</span> EventLoggingReporter());</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">// Make sure TrustedCertificateStore looks in the right place for CA certificates</span></div><div class=\"line\">    <span class=\"keyword\">final</span> File configDir = Environment.getUserConfigDirectory(UserHandle.myUserId());</div><div class=\"line\">    TrustedCertificateStore.setDefaultUserDirectory(configDir);</div><div class=\"line\"></div><div class=\"line\">    Process.setArgV0(<span class=\"string\">\"&lt;pre-initialized&gt;\"</span>);</div><div class=\"line\"></div><div class=\"line\">    Looper.prepareMainLooper();</div><div class=\"line\"></div><div class=\"line\">    ActivityThread thread = <span class=\"keyword\">new</span> ActivityThread();</div><div class=\"line\">    thread.attach(<span class=\"keyword\">false</span>);</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">if</span> (sMainThreadHandler == <span class=\"keyword\">null</span>) &#123;</div><div class=\"line\">        sMainThreadHandler = thread.getHandler();</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"keyword\">false</span>) &#123;</div><div class=\"line\">        Looper.myLooper().setMessageLogging(<span class=\"keyword\">new</span></div><div class=\"line\">                LogPrinter(Log.DEBUG, <span class=\"string\">\"ActivityThread\"</span>));</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">// End of event ActivityThreadMain.</span></div><div class=\"line\">    Trace.traceEnd(Trace.TRACE_TAG_ACTIVITY_MANAGER);</div><div class=\"line\">    Looper.loop();</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> RuntimeException(<span class=\"string\">\"Main thread loop unexpectedly exited\"</span>);</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>可以看到，<code>ActivityThread</code>的<code>main</code>方法是一个静态方法，在它内部首先会创建<code>ActivityThread</code>的实例并调用<code>attach</code>方法来进行一系列初始化，接着就开始进行消息循环了。<code>ActivityThread</code>的<code>attach</code>方法会将<code>ApplicationThread</code>对象通过<code>AMS</code>的<code>attachApplication</code>方法跨进程传递给AMS，最终AMS会完成<code>ContentProvider</code>的创建过程，AMS的<code>attachApplication</code>方法调用了<code>attachApplicationLocked</code>方法，<code>attachApplicationLocked</code>中又调用了<code>ApplicationThread</code>的<code>bindApplication</code>，注意这个过程也是进程间调用，<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">try</span> &#123;</div><div class=\"line\">    mgr.attachApplication(mAppThread);</div><div class=\"line\">&#125; <span class=\"keyword\">catch</span> (RemoteException ex) &#123;</div><div class=\"line\">    <span class=\"keyword\">throw</span> ex.rethrowFromSystemServer();</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"meta\">@Override</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">final</span> <span class=\"keyword\">void</span> <span class=\"title\">attachApplication</span><span class=\"params\">(IApplicationThread thread)</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">synchronized</span> (<span class=\"keyword\">this</span>) &#123;</div><div class=\"line\">            <span class=\"keyword\">int</span> callingPid = Binder.getCallingPid();</div><div class=\"line\">            <span class=\"keyword\">final</span> <span class=\"keyword\">long</span> origId = Binder.clearCallingIdentity();</div><div class=\"line\">            attachApplicationLocked(thread, callingPid);</div><div class=\"line\">            Binder.restoreCallingIdentity(origId);</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">final</span> <span class=\"keyword\">boolean</span> <span class=\"title\">attachApplicationLocked</span><span class=\"params\">(IApplicationThread thread,<span class=\"keyword\">int</span> pid)</span> </span>&#123;</div><div class=\"line\">    ......</div><div class=\"line\"><span class=\"keyword\">if</span> (app.instr != <span class=\"keyword\">null</span>) &#123;</div><div class=\"line\">                thread.bindApplication(processName, appInfo, providers,</div><div class=\"line\">                        app.instr.mClass,</div><div class=\"line\">                        profilerInfo, app.instr.mArguments,</div><div class=\"line\">                        app.instr.mWatcher,</div><div class=\"line\">                        app.instr.mUiAutomationConnection, testMode,</div><div class=\"line\">                        mBinderTransactionTrackingEnabled, enableTrackAllocation,</div><div class=\"line\">                        isRestrictedBackupMode || !normalMode, app.persistent,</div><div class=\"line\">                        <span class=\"keyword\">new</span> Configuration(getGlobalConfiguration()), app.compat,</div><div class=\"line\">                        getCommonServicesLocked(app.isolated),</div><div class=\"line\">                        mCoreSettingsObserver.getCoreSettingsLocked(),</div><div class=\"line\">                        buildSerial);</div><div class=\"line\">            &#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">                thread.bindApplication(processName, appInfo, providers, <span class=\"keyword\">null</span>, profilerInfo,</div><div class=\"line\">                        <span class=\"keyword\">null</span>, <span class=\"keyword\">null</span>, <span class=\"keyword\">null</span>, testMode,</div><div class=\"line\">                        mBinderTransactionTrackingEnabled, enableTrackAllocation,</div><div class=\"line\">                        isRestrictedBackupMode || !normalMode, app.persistent,</div><div class=\"line\">                        <span class=\"keyword\">new</span> Configuration(getGlobalConfiguration()), app.compat,</div><div class=\"line\">                        getCommonServicesLocked(app.isolated),</div><div class=\"line\">                        mCoreSettingsObserver.getCoreSettingsLocked(),</div><div class=\"line\">                        buildSerial);</div><div class=\"line\">            &#125;</div><div class=\"line\">            ......</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p><code>ActivityThread</code>的<code>bindApplication</code>会发送一个<code>BIND_APPLICATION</code>类型的消息给<code>mH</code>，<code>mH</code>是一个<code>Handler</code>，它收到消息后会调用<code>ActivityThread</code>的<code>handleBindApplication</code>方法，<code>bindApplication</code>发送消息的过程如下所示:<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div></pre></td><td class=\"code\"><pre><div class=\"line\">AppBindData data = <span class=\"keyword\">new</span> AppBindData();</div><div class=\"line\">            data.processName = processName;</div><div class=\"line\">            data.appInfo = appInfo;</div><div class=\"line\">            data.providers = providers;</div><div class=\"line\">            data.instrumentationName = instrumentationName;</div><div class=\"line\">            data.instrumentationArgs = instrumentationArgs;</div><div class=\"line\">            data.instrumentationWatcher = instrumentationWatcher;</div><div class=\"line\">            data.instrumentationUiAutomationConnection = instrumentationUiConnection;</div><div class=\"line\">            data.debugMode = debugMode;</div><div class=\"line\">            data.enableBinderTracking = enableBinderTracking;</div><div class=\"line\">            data.trackAllocation = trackAllocation;</div><div class=\"line\">            data.restrictedBackupMode = isRestrictedBackupMode;</div><div class=\"line\">            data.persistent = persistent;</div><div class=\"line\">            data.config = config;</div><div class=\"line\">            data.compatInfo = compatInfo;</div><div class=\"line\">            data.initProfilerInfo = profilerInfo;</div><div class=\"line\">            data.buildSerial = buildSerial;</div><div class=\"line\">            sendMessage(H.BIND_APPLICATION, data);</div></pre></td></tr></table></figure></p>\n<p><code>ActivityThread</code>的<code>handleBindApplication</code>则完成了<code>Application</code>的创建以及<code>ContentProvider</code>的创建，可以分为如下四个步骤:</p>\n<p><strong> 创建ContextImpl和Instrumentation </strong><br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">final</span> ContextImpl appContext = ContextImpl.createAppContext(<span class=\"keyword\">this</span>, data.info);</div><div class=\"line\">updateLocaleListFromAppContext(appContext, mResourcesManager.getConfiguration().getLocales());</div><div class=\"line\"> <span class=\"keyword\">try</span> &#123;</div><div class=\"line\">    <span class=\"keyword\">final</span> ClassLoader cl = instrContext.getClassLoader();</div><div class=\"line\">    mInstrumentation = (Instrumentation)</div><div class=\"line\">        cl.loadClass(data.instrumentationName.getClassName()).newInstance();</div><div class=\"line\">&#125; <span class=\"keyword\">catch</span> (Exception e) &#123;</div><div class=\"line\">    <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> RuntimeException(</div><div class=\"line\">        <span class=\"string\">\"Unable to instantiate instrumentation \"</span></div><div class=\"line\">        + data.instrumentationName + <span class=\"string\">\": \"</span> + e.toString(), e);</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"keyword\">final</span> ComponentName component = <span class=\"keyword\">new</span> ComponentName(ii.packageName, ii.name);</div><div class=\"line\">mInstrumentation.init(<span class=\"keyword\">this</span>, instrContext, appContext, component, data.instrumentationWatcher, data.instrumentationUiAutomationConnection);</div></pre></td></tr></table></figure></p>\n<p><strong> 创建Application对象 </strong><br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// If the app is being launched for full backup or restore, bring it up in</span></div><div class=\"line\"><span class=\"comment\">// a restricted environment with the base application class.</span></div><div class=\"line\">app = data.info.makeApplication(data.restrictedBackupMode, <span class=\"keyword\">null</span>);</div><div class=\"line\">mInitialApplication = app;</div></pre></td></tr></table></figure></p>\n<p><strong> 启动当前进程的ContentProvider并调用其onCreate方法 </strong><br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// don't bring up providers in restricted mode; they may depend on the</span></div><div class=\"line\"><span class=\"comment\">// app's custom Application class</span></div><div class=\"line\"><span class=\"keyword\">if</span> (!data.restrictedBackupMode) &#123;</div><div class=\"line\">    <span class=\"keyword\">if</span> (!ArrayUtils.isEmpty(data.providers)) &#123;</div><div class=\"line\">        installContentProviders(app, data.providers);</div><div class=\"line\">        <span class=\"comment\">// For process that contains content providers, we want to</span></div><div class=\"line\">        <span class=\"comment\">// ensure that the JIT is enabled \"at some point\".</span></div><div class=\"line\">        mH.sendEmptyMessageDelayed(H.ENABLE_JIT, <span class=\"number\">10</span>*<span class=\"number\">1000</span>);</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p><code>installContentProviders</code>完成了<code>ContentProvider</code>的启动工作，它的实现如下所示。首先会遍历当前进程的<code>ProviderInfo</code>的列表并一一调用调用<code>installProvider</code>方法来启动它们，接着将已经启动的<code>ContentProvider</code>发布到AMS中，AMS会把它们存储在<code>ProviderMap</code>中，这样一来外部调用者就可以直接从AMS中获取<code>ContentProvider</code>了。<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">installContentProviders</span><span class=\"params\">(</div><div class=\"line\">           Context context, List&lt;ProviderInfo&gt; providers)</span> </span>&#123;</div><div class=\"line\">       <span class=\"keyword\">final</span> ArrayList&lt;ContentProviderHolder&gt; results = <span class=\"keyword\">new</span> ArrayList&lt;&gt;();</div><div class=\"line\"></div><div class=\"line\">       <span class=\"keyword\">for</span> (ProviderInfo cpi : providers) &#123;</div><div class=\"line\">           <span class=\"keyword\">if</span> (DEBUG_PROVIDER) &#123;</div><div class=\"line\">               StringBuilder buf = <span class=\"keyword\">new</span> StringBuilder(<span class=\"number\">128</span>);</div><div class=\"line\">               buf.append(<span class=\"string\">\"Pub \"</span>);</div><div class=\"line\">               buf.append(cpi.authority);</div><div class=\"line\">               buf.append(<span class=\"string\">\": \"</span>);</div><div class=\"line\">               buf.append(cpi.name);</div><div class=\"line\">               Log.i(TAG, buf.toString());</div><div class=\"line\">           &#125;</div><div class=\"line\">           ContentProviderHolder cph = installProvider(context, <span class=\"keyword\">null</span>, cpi,</div><div class=\"line\">                   <span class=\"keyword\">false</span> <span class=\"comment\">/*noisy*/</span>, <span class=\"keyword\">true</span> <span class=\"comment\">/*noReleaseNeeded*/</span>, <span class=\"keyword\">true</span> <span class=\"comment\">/*stable*/</span>);</div><div class=\"line\">           <span class=\"keyword\">if</span> (cph != <span class=\"keyword\">null</span>) &#123;</div><div class=\"line\">               cph.noReleaseNeeded = <span class=\"keyword\">true</span>;</div><div class=\"line\">               results.add(cph);</div><div class=\"line\">           &#125;</div><div class=\"line\">       &#125;</div><div class=\"line\"></div><div class=\"line\">       <span class=\"keyword\">try</span> &#123;</div><div class=\"line\">           ActivityManager.getService().publishContentProviders(</div><div class=\"line\">               getApplicationThread(), results);</div><div class=\"line\">       &#125; <span class=\"keyword\">catch</span> (RemoteException ex) &#123;</div><div class=\"line\">           <span class=\"keyword\">throw</span> ex.rethrowFromSystemServer();</div><div class=\"line\">       &#125;</div><div class=\"line\">   &#125;</div></pre></td></tr></table></figure></p>\n<p>下面看一下<code>ContentProvider</code>对象的创建过程，在<code>installProvider</code>方法中有下面一段代码，其通过类加载器完成了<code>ContentProvider</code>对象的创建:<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">final</span> java.lang.ClassLoader cl = c.getClassLoader();</div><div class=\"line\">localProvider = (ContentProvider)cl.loadClass(info.name).newInstance();</div><div class=\"line\">provider = localProvider.getIContentProvider();</div><div class=\"line\"><span class=\"comment\">// XXX Need to create the correct context for this provider.</span></div><div class=\"line\">localProvider.attachInfo(c, info);</div></pre></td></tr></table></figure></p>\n<p>在上述代码中，除了完成<code>ContentProvider</code>对象的创建，还会通过<code>ContentProvider</code>的<code>attachInfo</code>方法来调用它的<code>onCreate</code>方法:<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">attachInfo</span><span class=\"params\">(Context context, ProviderInfo info, <span class=\"keyword\">boolean</span> testing)</span> </span>&#123;</div><div class=\"line\">    mNoPerms = testing;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">/*</div><div class=\"line\">        * Only allow it to be set once, so after the content service gives</div><div class=\"line\">        * this to us clients can't change it.</div><div class=\"line\">        */</span></div><div class=\"line\">    <span class=\"keyword\">if</span> (mContext == <span class=\"keyword\">null</span>) &#123;</div><div class=\"line\">        mContext = context;</div><div class=\"line\">        <span class=\"keyword\">if</span> (context != <span class=\"keyword\">null</span>) &#123;</div><div class=\"line\">            mTransport.mAppOpsManager = (AppOpsManager) context.getSystemService(</div><div class=\"line\">                    Context.APP_OPS_SERVICE);</div><div class=\"line\">        &#125;</div><div class=\"line\">        mMyUid = Process.myUid();</div><div class=\"line\">        <span class=\"keyword\">if</span> (info != <span class=\"keyword\">null</span>) &#123;</div><div class=\"line\">            setReadPermission(info.readPermission);</div><div class=\"line\">            setWritePermission(info.writePermission);</div><div class=\"line\">            setPathPermissions(info.pathPermissions);</div><div class=\"line\">            mExported = info.exported;</div><div class=\"line\">            mSingleUser = (info.flags &amp; ProviderInfo.FLAG_SINGLE_USER) != <span class=\"number\">0</span>;</div><div class=\"line\">            setAuthorities(info.authority);</div><div class=\"line\">        &#125;</div><div class=\"line\">        ContentProvider.<span class=\"keyword\">this</span>.onCreate();</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>到此为止，<code>ContentProvider</code>已经被创建并且其<code>onCreate</code>方法也已经被调用，这意味着<code>ContentProvider</code>已经启动完成了。</p>\n<p><strong> 调用Application的onCreate方法 </strong><br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// Do this after providers, since instrumentation tests generally start their</span></div><div class=\"line\"><span class=\"comment\">// test thread at this point, and we don't want that racing.</span></div><div class=\"line\"><span class=\"keyword\">try</span> &#123;</div><div class=\"line\">    mInstrumentation.onCreate(data.instrumentationArgs);</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"keyword\">catch</span> (Exception e) &#123;</div><div class=\"line\">    <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> RuntimeException(</div><div class=\"line\">        <span class=\"string\">\"Exception thrown in onCreate() of \"</span></div><div class=\"line\">        + data.instrumentationName + <span class=\"string\">\": \"</span> + e.toString(), e);</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"keyword\">try</span> &#123;</div><div class=\"line\">    mInstrumentation.callApplicationOnCreate(app);</div><div class=\"line\">&#125; <span class=\"keyword\">catch</span> (Exception e) &#123;</div><div class=\"line\">    <span class=\"keyword\">if</span> (!mInstrumentation.onException(app, e)) &#123;</div><div class=\"line\">        <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> RuntimeException(</div><div class=\"line\">            <span class=\"string\">\"Unable to create application \"</span> + app.getClass().getName()</div><div class=\"line\">            + <span class=\"string\">\": \"</span> + e.toString(), e);</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>经过上面的四个步骤，<code>ContentProvider</code>已经成功启动，并且其所在进程的<code>Application</code>也已经启动，这意味着<code>ContentProvider</code>所在的进程已经完成了整个的启动过程，然后其他应用就可以通过AMS来访问这个<code>ContentProvider</code>了。拿到了<code>ContentProvider</code>以后，就可以通过它所提供的接口方法来访问它了。需要注意的是，这里的<code>ContentProvider</code>并不是原始的<code>ContentProvider</code>，而是<code>ContentProvider</code>的<code>Binder</code>类型的对象<code>IContentProvider</code>，<code>IContentProvider</code>的具体实现是<code>ContentProviderNative</code>和<code>ContentProvider.Transport</code>，其中<code>ContentProvider.Transport</code>继承了<code>ContentProviderNative</code>。这里仍然选择<code>query</code>方法，首先其他应用会通过AMS获取到<code>ContentProvider</code>的<code>Binder</code>对象即<code>IContentProvider</code>，而<code>IContentProvider</code>的实现者实际上是<code>ContentProvider.Transport</code>。因此其他应用调用<code>IContentProvider</code>的query方法时最终会以进程间通信的方式调用到<code>ContentProvider.Transport</code>的query方法，它的实现如下所示:<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">@Override</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> Cursor <span class=\"title\">query</span><span class=\"params\">(String callingPkg, Uri uri, @Nullable String[] projection,</div><div class=\"line\">        @Nullable Bundle queryArgs, @Nullable ICancellationSignal cancellationSignal)</span> </span>&#123;</div><div class=\"line\">    validateIncomingUri(uri);</div><div class=\"line\">    uri = maybeGetUriWithoutUserId(uri);</div><div class=\"line\">    <span class=\"keyword\">if</span> (enforceReadPermission(callingPkg, uri, <span class=\"keyword\">null</span>) != AppOpsManager.MODE_ALLOWED) &#123;</div><div class=\"line\">        <span class=\"comment\">// The caller has no access to the data, so return an empty cursor with</span></div><div class=\"line\">        <span class=\"comment\">// the columns in the requested order. The caller may ask for an invalid</span></div><div class=\"line\">        <span class=\"comment\">// column and we would not catch that but this is not a problem in practice.</span></div><div class=\"line\">        <span class=\"comment\">// We do not call ContentProvider#query with a modified where clause since</span></div><div class=\"line\">        <span class=\"comment\">// the implementation is not guaranteed to be backed by a SQL database, hence</span></div><div class=\"line\">        <span class=\"comment\">// it may not handle properly the tautology where clause we would have created.</span></div><div class=\"line\">        <span class=\"keyword\">if</span> (projection != <span class=\"keyword\">null</span>) &#123;</div><div class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> MatrixCursor(projection, <span class=\"number\">0</span>);</div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\">        <span class=\"comment\">// Null projection means all columns but we have no idea which they are.</span></div><div class=\"line\">        <span class=\"comment\">// However, the caller may be expecting to access them my index. Hence,</span></div><div class=\"line\">        <span class=\"comment\">// we have to execute the query as if allowed to get a cursor with the</span></div><div class=\"line\">        <span class=\"comment\">// columns. We then use the column names to return an empty cursor.</span></div><div class=\"line\">        Cursor cursor = ContentProvider.<span class=\"keyword\">this</span>.query(</div><div class=\"line\">                uri, projection, queryArgs,</div><div class=\"line\">                CancellationSignal.fromTransport(cancellationSignal));</div><div class=\"line\">        <span class=\"keyword\">if</span> (cursor == <span class=\"keyword\">null</span>) &#123;</div><div class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">null</span>;</div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\">        <span class=\"comment\">// Return an empty cursor for all columns.</span></div><div class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> MatrixCursor(cursor.getColumnNames(), <span class=\"number\">0</span>);</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">final</span> String original = setCallingPackage(callingPkg);</div><div class=\"line\">    <span class=\"keyword\">try</span> &#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> ContentProvider.<span class=\"keyword\">this</span>.query(</div><div class=\"line\">                uri, projection, queryArgs,</div><div class=\"line\">                CancellationSignal.fromTransport(cancellationSignal));</div><div class=\"line\">    &#125; <span class=\"keyword\">finally</span> &#123;</div><div class=\"line\">        setCallingPackage(original);</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>很显然，<code>ContentProvider.Transport</code>的<code>query</code>方法调用了<code>ContentProvider</code>的<code>query</code>方法，<code>query</code>方法的执行结果再通过<code>Binder</code>返回给调用者，这样一来整个调用过程就完成了。除了query方法，insert、delete和update方法也是类似的。</p>\n<hr>\n<p>以上</p>"},{"title":"Android多进程-二","date":"2018-06-22T08:03:38.000Z","keywords":"多进程通信","_content":"Android中中IPC方式有很多，比如使用Bundle，使用文件共享，使用Messenger，使用AIDL，使用ContentProvider，使用Socket等。前两种方式比较简单，自己玩。\n下面主要是抄的《Android开发艺术探索》2.4.3章节，看过书的就不用看了。\n<!-- more -->\nMessenger可以翻译为信使，顾名思义，通过它可以在不同进程中传递Message对象,在Message中放入我们需要传递的数据，就可以轻松地实现数据的进程间传递了。Messenger是一种轻量级的IPC方案，它的底层实现是AIDL，为什么这么说呢，我们大致看一下Messenger这个类的构造方法就明白了。下面是Messenger的两个构造方法，从构造方法的实现上我们可以明显看出AIDL的痕迹，不管是IMessenger还是Stub.asInterface,这种使用方法都表明它的底层是AIDL。\n``` java\npublic Messenger (Handler target) {\n    mTarget = target.getIMessenger();\n}\npublic Messenger ( IBinder target) {\n    mTarget = IMessenger.Stub.asInterface(target);\n}\n```\nMessenger的使用方法很简单，它对AIDL做了封装，使得我们可以更简便地进行进程间通信。同时，由于它一次处理一个请求，因此在服务端我们不用考虑线程同步的问题，这是因为服务端中不存在并发执行的情形。实现一个Messenger有如下几个步骤，分为服务端和客户端。\n\n1. 服务端进程\n首先，我们需要在服务端创建--个Service来处理客户端的连接请求，同时创建一个Handler并通过它来创建一个Messenger对 象，然后在Service的onBind中返回这个Messenger对象底层的Binder即可。\n2. 客户端进程\n客户端进程中，首先要绑定服务端的Service,绑定成功后用服务端返回的IBinder对象创建一个Messenger,通过这个Messenger就可以向服务端发送消息了，发消息类型为Message对象。如果需要服务端能够回应客户端，就和服务端一-样，我们还需要创建一个Handler并创建一个 新的Messenger,并把这个Messenger对象通过Message的replyTo参数传递给服务端，服务端通过这个replyTo参数就可以回应客户端。\n\n首先看服务端的代码，这是服务端的典型代码，可以看到MessengerHandler用来处理客户端发送的消息，并从消息中取出客户端发来的文本信息。而mMessenger是一个Messenger对象，它和MessengerHandler相关联，并在onBind方法中返回它里面的Binder对象，可以看出，这里Messenger的作用是将客户端发送的消息传递给MessengerHandler处理。\n\n``` java\npublic class MessengerService extends Service {\n\n\n    private static class MessengerHandler extends Handler{\n        @Override\n        public void handleMessage(Message msg) {\n            switch (msg.what){\n                case 10001:\n                    Log.e(\"xuan\",\"收到客户端\"+msg.getData().getString(\"msg\"));\n                    break;\n                    default:\n                        super.handleMessage(msg);\n            }\n\n        }\n    }\n\n    private final Messenger messenger = new Messenger(new MessengerHandler());\n    @Nullable\n    @Override\n    public IBinder onBind(Intent intent) {\n        return messenger.getBinder();\n    }\n}\n\n```\n然后注册`service`,让其在单独的进程中运行\n``` xml\n<service\nandroid: name=\".messenger.MessengerService\"\nandroid: process=\":remote\">\n```\n在客户端,首先需要绑定远程进程的MessengerService,绑定成功后，根据服务端返回的binder对象创建Messenger对象并使用此对象向服务端发送消息。下面的代码在Bundle中向服务端发送了一句话，在，上面的服务端代码中会打印出这句话。\n\n``` java\npublic class MessengerActivity extends AppCompatActivity {\n\n\n    private Messenger mService;\n\n    private ServiceConnection connection = new ServiceConnection() {\n        @Override\n        public void onServiceConnected(ComponentName name, IBinder service) {\n            mService = new Messenger(service);\n            Message msg = Message.obtain(null,10001);\n            Bundle data = new Bundle();\n            data.putString(\"msg\",\"hi 来自客户端的问候\");\n            msg.setData(data);\n            try {\n                mService.send(msg);\n            } catch (RemoteException e) {\n                e.printStackTrace();\n            }\n        }\n\n        @Override\n        public void onServiceDisconnected(ComponentName name) {\n\n        }\n    };\n\n    @Override\n    protected void onCreate(Bundle savedInstanceState) {\n        super.onCreate(savedInstanceState);\n        setContentView(R.layout.activity_messenger2);\n\n        Intent intent = new Intent(this, MessengerService.class);\n        bindService(intent,connection, Context.BIND_AUTO_CREATE);\n    }\n\n    @Override\n    protected void onDestroy() {\n        super.onDestroy();\n        unbindService(connection);\n    }\n}\n\n```\n\n通过上面的例子可以看出，在Messenger中进行数据传递必须将数据放入Message中，而Messenger和Message都实现了Parcelable接口，因此可以跨进程传输。简单来说,Message中所支持的数据类型就是Messenger所支持的传输类型。实际上，通过Messenger来传输Message, Message中 能使用的载体只有what、arg1、 arg2、 Bundle 以及replyTo。Message中的另一个字段object在同一-个进程中是很实用的，但是在进程间通信的时候，在Android2.2以前object字段不支持跨进程传输，即便是2.2以后，也仅仅是系统提供的实现了Parcelable接口的对象才能通过它来传输。这就意味着我们自定义的Parcelable对象是无法通过object字段来传输的，读者可以试一下。非系统的Parcelable对象的确无法通过object字段来传输，这也导致了object字段的实用性大大降低，所幸我们还有Bundle,Bundle中可以支持大量的数据类型。\n上面的例子演示了如何在服务端接收客户端中发送的消息，但是有时候我们还需要能回应客户端，下面就介绍如何实现这种效果。还是采用上面的例子，但是稍微做一下修改，每当客户端发来一条消息，服务端就会自动回复一条“嗯，你的消息我已经收到，稍后会回复你。”，这很类似邮箱的自动回复功能。\n\n首先看服务端的修改，服务端只需要修改MessengerHandler,当收到消息后，会立即回复一条消息给客户端。\n\n``` java\npublic class MessengerService extends Service {\n    private static class MessengerHandler extends Handler{\n        @Override\n        public void handleMessage(Message msg) {\n            switch (msg.what){\n                case 10001:\n                    Log.e(\"huangyuan\",\"收到客户端\"+msg.getData().getString(\"msg\"));\n                    Messenger clientMessenger = msg.replyTo;\n                    Message message = Message.obtain(null,10001);\n                    Bundle bundle = new Bundle();\n                    bundle.putString(\"msg\",\"服务端回应\");\n                    message.setData(bundle);\n                    try {\n                        clientMessenger.send(message);\n                    } catch (RemoteException e) {\n\n                        e.printStackTrace();\n                    }\n                    break;\n                    default:\n                        super.handleMessage(msg);\n            }\n        }\n    }\n    private final Messenger messenger = new Messenger(new MessengerHandler());\n    @Nullable\n    @Override\n    public IBinder onBind(Intent intent) {\n        return messenger.getBinder();\n    }\n}\n\n```\n\n为了接收服务端的消息，客户端也需要准备一个接收消息的Messenger和Handler:\n``` java\npublic class MessengerActivity extends AppCompatActivity {\n\n    private Messenger mService;\n    private Messenger getReplyMessenger = new Messenger(new MessengerHandler());\n    private ServiceConnection connection = new ServiceConnection() {\n        @Override\n        public void onServiceConnected(ComponentName name, IBinder service) {\n            mService = new Messenger(service);\n            Message msg = Message.obtain(null,10001);\n            Bundle data = new Bundle();\n            data.putString(\"msg\",\"hi 来自客户端的问候\");\n            msg.setData(data);\n            msg.replyTo = getReplyMessenger;\n            try {\n                mService.send(msg);\n            } catch (RemoteException e) {\n                e.printStackTrace();\n            }\n        }\n\n        @Override\n        public void onServiceDisconnected(ComponentName name) {\n        }\n    };\n\n    private static class MessengerHandler  extends Handler{\n        @Override\n        public void handleMessage(Message msg) {\n            switch (msg.what){\n                case 10001:\n                    Log.e(\"huangyuan\",\"收到服务端的回复-->\"+ msg.getData().get(\"msg\"));\n                    break;\n                    default:\n                        super.handleMessage(msg);\n            }\n        }\n    }\n\n    @Override\n    protected void onCreate(Bundle savedInstanceState) {\n        super.onCreate(savedInstanceState);\n        setContentView(R.layout.activity_messenger2);\n        Intent intent = new Intent(this, MessengerService.class);\n        bindService(intent,connection, Context.BIND_AUTO_CREATE);\n    }\n\n    @Override\n    protected void onDestroy() {\n        super.onDestroy();\n        unbindService(connection);\n    }\n}\n\n```\n关键的一点在于当客户端发送消息的时候，需要把接收服务端回复的Messenger通过Message的replyTo参数传递给服务端：\n``` java\n msg.replyTo = getReplyMessenger;\n```\n\n----\n以上","source":"_posts/Android多进程-二.md","raw":"---\ntitle: Android多进程-二\ndate: 2018-06-22 16:03:38\ntags: [Android]\nkeywords: 多进程通信\n---\nAndroid中中IPC方式有很多，比如使用Bundle，使用文件共享，使用Messenger，使用AIDL，使用ContentProvider，使用Socket等。前两种方式比较简单，自己玩。\n下面主要是抄的《Android开发艺术探索》2.4.3章节，看过书的就不用看了。\n<!-- more -->\nMessenger可以翻译为信使，顾名思义，通过它可以在不同进程中传递Message对象,在Message中放入我们需要传递的数据，就可以轻松地实现数据的进程间传递了。Messenger是一种轻量级的IPC方案，它的底层实现是AIDL，为什么这么说呢，我们大致看一下Messenger这个类的构造方法就明白了。下面是Messenger的两个构造方法，从构造方法的实现上我们可以明显看出AIDL的痕迹，不管是IMessenger还是Stub.asInterface,这种使用方法都表明它的底层是AIDL。\n``` java\npublic Messenger (Handler target) {\n    mTarget = target.getIMessenger();\n}\npublic Messenger ( IBinder target) {\n    mTarget = IMessenger.Stub.asInterface(target);\n}\n```\nMessenger的使用方法很简单，它对AIDL做了封装，使得我们可以更简便地进行进程间通信。同时，由于它一次处理一个请求，因此在服务端我们不用考虑线程同步的问题，这是因为服务端中不存在并发执行的情形。实现一个Messenger有如下几个步骤，分为服务端和客户端。\n\n1. 服务端进程\n首先，我们需要在服务端创建--个Service来处理客户端的连接请求，同时创建一个Handler并通过它来创建一个Messenger对 象，然后在Service的onBind中返回这个Messenger对象底层的Binder即可。\n2. 客户端进程\n客户端进程中，首先要绑定服务端的Service,绑定成功后用服务端返回的IBinder对象创建一个Messenger,通过这个Messenger就可以向服务端发送消息了，发消息类型为Message对象。如果需要服务端能够回应客户端，就和服务端一-样，我们还需要创建一个Handler并创建一个 新的Messenger,并把这个Messenger对象通过Message的replyTo参数传递给服务端，服务端通过这个replyTo参数就可以回应客户端。\n\n首先看服务端的代码，这是服务端的典型代码，可以看到MessengerHandler用来处理客户端发送的消息，并从消息中取出客户端发来的文本信息。而mMessenger是一个Messenger对象，它和MessengerHandler相关联，并在onBind方法中返回它里面的Binder对象，可以看出，这里Messenger的作用是将客户端发送的消息传递给MessengerHandler处理。\n\n``` java\npublic class MessengerService extends Service {\n\n\n    private static class MessengerHandler extends Handler{\n        @Override\n        public void handleMessage(Message msg) {\n            switch (msg.what){\n                case 10001:\n                    Log.e(\"xuan\",\"收到客户端\"+msg.getData().getString(\"msg\"));\n                    break;\n                    default:\n                        super.handleMessage(msg);\n            }\n\n        }\n    }\n\n    private final Messenger messenger = new Messenger(new MessengerHandler());\n    @Nullable\n    @Override\n    public IBinder onBind(Intent intent) {\n        return messenger.getBinder();\n    }\n}\n\n```\n然后注册`service`,让其在单独的进程中运行\n``` xml\n<service\nandroid: name=\".messenger.MessengerService\"\nandroid: process=\":remote\">\n```\n在客户端,首先需要绑定远程进程的MessengerService,绑定成功后，根据服务端返回的binder对象创建Messenger对象并使用此对象向服务端发送消息。下面的代码在Bundle中向服务端发送了一句话，在，上面的服务端代码中会打印出这句话。\n\n``` java\npublic class MessengerActivity extends AppCompatActivity {\n\n\n    private Messenger mService;\n\n    private ServiceConnection connection = new ServiceConnection() {\n        @Override\n        public void onServiceConnected(ComponentName name, IBinder service) {\n            mService = new Messenger(service);\n            Message msg = Message.obtain(null,10001);\n            Bundle data = new Bundle();\n            data.putString(\"msg\",\"hi 来自客户端的问候\");\n            msg.setData(data);\n            try {\n                mService.send(msg);\n            } catch (RemoteException e) {\n                e.printStackTrace();\n            }\n        }\n\n        @Override\n        public void onServiceDisconnected(ComponentName name) {\n\n        }\n    };\n\n    @Override\n    protected void onCreate(Bundle savedInstanceState) {\n        super.onCreate(savedInstanceState);\n        setContentView(R.layout.activity_messenger2);\n\n        Intent intent = new Intent(this, MessengerService.class);\n        bindService(intent,connection, Context.BIND_AUTO_CREATE);\n    }\n\n    @Override\n    protected void onDestroy() {\n        super.onDestroy();\n        unbindService(connection);\n    }\n}\n\n```\n\n通过上面的例子可以看出，在Messenger中进行数据传递必须将数据放入Message中，而Messenger和Message都实现了Parcelable接口，因此可以跨进程传输。简单来说,Message中所支持的数据类型就是Messenger所支持的传输类型。实际上，通过Messenger来传输Message, Message中 能使用的载体只有what、arg1、 arg2、 Bundle 以及replyTo。Message中的另一个字段object在同一-个进程中是很实用的，但是在进程间通信的时候，在Android2.2以前object字段不支持跨进程传输，即便是2.2以后，也仅仅是系统提供的实现了Parcelable接口的对象才能通过它来传输。这就意味着我们自定义的Parcelable对象是无法通过object字段来传输的，读者可以试一下。非系统的Parcelable对象的确无法通过object字段来传输，这也导致了object字段的实用性大大降低，所幸我们还有Bundle,Bundle中可以支持大量的数据类型。\n上面的例子演示了如何在服务端接收客户端中发送的消息，但是有时候我们还需要能回应客户端，下面就介绍如何实现这种效果。还是采用上面的例子，但是稍微做一下修改，每当客户端发来一条消息，服务端就会自动回复一条“嗯，你的消息我已经收到，稍后会回复你。”，这很类似邮箱的自动回复功能。\n\n首先看服务端的修改，服务端只需要修改MessengerHandler,当收到消息后，会立即回复一条消息给客户端。\n\n``` java\npublic class MessengerService extends Service {\n    private static class MessengerHandler extends Handler{\n        @Override\n        public void handleMessage(Message msg) {\n            switch (msg.what){\n                case 10001:\n                    Log.e(\"huangyuan\",\"收到客户端\"+msg.getData().getString(\"msg\"));\n                    Messenger clientMessenger = msg.replyTo;\n                    Message message = Message.obtain(null,10001);\n                    Bundle bundle = new Bundle();\n                    bundle.putString(\"msg\",\"服务端回应\");\n                    message.setData(bundle);\n                    try {\n                        clientMessenger.send(message);\n                    } catch (RemoteException e) {\n\n                        e.printStackTrace();\n                    }\n                    break;\n                    default:\n                        super.handleMessage(msg);\n            }\n        }\n    }\n    private final Messenger messenger = new Messenger(new MessengerHandler());\n    @Nullable\n    @Override\n    public IBinder onBind(Intent intent) {\n        return messenger.getBinder();\n    }\n}\n\n```\n\n为了接收服务端的消息，客户端也需要准备一个接收消息的Messenger和Handler:\n``` java\npublic class MessengerActivity extends AppCompatActivity {\n\n    private Messenger mService;\n    private Messenger getReplyMessenger = new Messenger(new MessengerHandler());\n    private ServiceConnection connection = new ServiceConnection() {\n        @Override\n        public void onServiceConnected(ComponentName name, IBinder service) {\n            mService = new Messenger(service);\n            Message msg = Message.obtain(null,10001);\n            Bundle data = new Bundle();\n            data.putString(\"msg\",\"hi 来自客户端的问候\");\n            msg.setData(data);\n            msg.replyTo = getReplyMessenger;\n            try {\n                mService.send(msg);\n            } catch (RemoteException e) {\n                e.printStackTrace();\n            }\n        }\n\n        @Override\n        public void onServiceDisconnected(ComponentName name) {\n        }\n    };\n\n    private static class MessengerHandler  extends Handler{\n        @Override\n        public void handleMessage(Message msg) {\n            switch (msg.what){\n                case 10001:\n                    Log.e(\"huangyuan\",\"收到服务端的回复-->\"+ msg.getData().get(\"msg\"));\n                    break;\n                    default:\n                        super.handleMessage(msg);\n            }\n        }\n    }\n\n    @Override\n    protected void onCreate(Bundle savedInstanceState) {\n        super.onCreate(savedInstanceState);\n        setContentView(R.layout.activity_messenger2);\n        Intent intent = new Intent(this, MessengerService.class);\n        bindService(intent,connection, Context.BIND_AUTO_CREATE);\n    }\n\n    @Override\n    protected void onDestroy() {\n        super.onDestroy();\n        unbindService(connection);\n    }\n}\n\n```\n关键的一点在于当客户端发送消息的时候，需要把接收服务端回复的Messenger通过Message的replyTo参数传递给服务端：\n``` java\n msg.replyTo = getReplyMessenger;\n```\n\n----\n以上","slug":"Android多进程-二","published":1,"updated":"2018-08-04T04:47:10.417Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjl3vbtq4000hisdgaccsztim","content":"<p>Android中中IPC方式有很多，比如使用Bundle，使用文件共享，使用Messenger，使用AIDL，使用ContentProvider，使用Socket等。前两种方式比较简单，自己玩。<br>下面主要是抄的《Android开发艺术探索》2.4.3章节，看过书的就不用看了。<br><a id=\"more\"></a><br>Messenger可以翻译为信使，顾名思义，通过它可以在不同进程中传递Message对象,在Message中放入我们需要传递的数据，就可以轻松地实现数据的进程间传递了。Messenger是一种轻量级的IPC方案，它的底层实现是AIDL，为什么这么说呢，我们大致看一下Messenger这个类的构造方法就明白了。下面是Messenger的两个构造方法，从构造方法的实现上我们可以明显看出AIDL的痕迹，不管是IMessenger还是Stub.asInterface,这种使用方法都表明它的底层是AIDL。<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">Messenger</span> <span class=\"params\">(Handler target)</span> </span>&#123;</div><div class=\"line\">    mTarget = target.getIMessenger();</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">Messenger</span> <span class=\"params\">( IBinder target)</span> </span>&#123;</div><div class=\"line\">    mTarget = IMessenger.Stub.asInterface(target);</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>Messenger的使用方法很简单，它对AIDL做了封装，使得我们可以更简便地进行进程间通信。同时，由于它一次处理一个请求，因此在服务端我们不用考虑线程同步的问题，这是因为服务端中不存在并发执行的情形。实现一个Messenger有如下几个步骤，分为服务端和客户端。</p>\n<ol>\n<li>服务端进程<br>首先，我们需要在服务端创建–个Service来处理客户端的连接请求，同时创建一个Handler并通过它来创建一个Messenger对 象，然后在Service的onBind中返回这个Messenger对象底层的Binder即可。</li>\n<li>客户端进程<br>客户端进程中，首先要绑定服务端的Service,绑定成功后用服务端返回的IBinder对象创建一个Messenger,通过这个Messenger就可以向服务端发送消息了，发消息类型为Message对象。如果需要服务端能够回应客户端，就和服务端一-样，我们还需要创建一个Handler并创建一个 新的Messenger,并把这个Messenger对象通过Message的replyTo参数传递给服务端，服务端通过这个replyTo参数就可以回应客户端。</li>\n</ol>\n<p>首先看服务端的代码，这是服务端的典型代码，可以看到MessengerHandler用来处理客户端发送的消息，并从消息中取出客户端发来的文本信息。而mMessenger是一个Messenger对象，它和MessengerHandler相关联，并在onBind方法中返回它里面的Binder对象，可以看出，这里Messenger的作用是将客户端发送的消息传递给MessengerHandler处理。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MessengerService</span> <span class=\"keyword\">extends</span> <span class=\"title\">Service</span> </span>&#123;</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MessengerHandler</span> <span class=\"keyword\">extends</span> <span class=\"title\">Handler</span></span>&#123;</div><div class=\"line\">        <span class=\"meta\">@Override</span></div><div class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">handleMessage</span><span class=\"params\">(Message msg)</span> </span>&#123;</div><div class=\"line\">            <span class=\"keyword\">switch</span> (msg.what)&#123;</div><div class=\"line\">                <span class=\"keyword\">case</span> <span class=\"number\">10001</span>:</div><div class=\"line\">                    Log.e(<span class=\"string\">\"xuan\"</span>,<span class=\"string\">\"收到客户端\"</span>+msg.getData().getString(<span class=\"string\">\"msg\"</span>));</div><div class=\"line\">                    <span class=\"keyword\">break</span>;</div><div class=\"line\">                    <span class=\"keyword\">default</span>:</div><div class=\"line\">                        <span class=\"keyword\">super</span>.handleMessage(msg);</div><div class=\"line\">            &#125;</div><div class=\"line\"></div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">final</span> Messenger messenger = <span class=\"keyword\">new</span> Messenger(<span class=\"keyword\">new</span> MessengerHandler());</div><div class=\"line\">    <span class=\"meta\">@Nullable</span></div><div class=\"line\">    <span class=\"meta\">@Override</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> IBinder <span class=\"title\">onBind</span><span class=\"params\">(Intent intent)</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> messenger.getBinder();</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>然后注册<code>service</code>,让其在单独的进程中运行<br><figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">service</span></span></div><div class=\"line\"><span class=\"attr\">android:</span> <span class=\"attr\">name</span>=<span class=\"string\">\".messenger.MessengerService\"</span></div><div class=\"line\"><span class=\"attr\">android:</span> <span class=\"attr\">process</span>=<span class=\"string\">\":remote\"</span>&gt;</div></pre></td></tr></table></figure></p>\n<p>在客户端,首先需要绑定远程进程的MessengerService,绑定成功后，根据服务端返回的binder对象创建Messenger对象并使用此对象向服务端发送消息。下面的代码在Bundle中向服务端发送了一句话，在，上面的服务端代码中会打印出这句话。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MessengerActivity</span> <span class=\"keyword\">extends</span> <span class=\"title\">AppCompatActivity</span> </span>&#123;</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">private</span> Messenger mService;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">private</span> ServiceConnection connection = <span class=\"keyword\">new</span> ServiceConnection() &#123;</div><div class=\"line\">        <span class=\"meta\">@Override</span></div><div class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onServiceConnected</span><span class=\"params\">(ComponentName name, IBinder service)</span> </span>&#123;</div><div class=\"line\">            mService = <span class=\"keyword\">new</span> Messenger(service);</div><div class=\"line\">            Message msg = Message.obtain(<span class=\"keyword\">null</span>,<span class=\"number\">10001</span>);</div><div class=\"line\">            Bundle data = <span class=\"keyword\">new</span> Bundle();</div><div class=\"line\">            data.putString(<span class=\"string\">\"msg\"</span>,<span class=\"string\">\"hi 来自客户端的问候\"</span>);</div><div class=\"line\">            msg.setData(data);</div><div class=\"line\">            <span class=\"keyword\">try</span> &#123;</div><div class=\"line\">                mService.send(msg);</div><div class=\"line\">            &#125; <span class=\"keyword\">catch</span> (RemoteException e) &#123;</div><div class=\"line\">                e.printStackTrace();</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\">        <span class=\"meta\">@Override</span></div><div class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onServiceDisconnected</span><span class=\"params\">(ComponentName name)</span> </span>&#123;</div><div class=\"line\"></div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"meta\">@Override</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title\">onCreate</span><span class=\"params\">(Bundle savedInstanceState)</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">super</span>.onCreate(savedInstanceState);</div><div class=\"line\">        setContentView(R.layout.activity_messenger2);</div><div class=\"line\"></div><div class=\"line\">        Intent intent = <span class=\"keyword\">new</span> Intent(<span class=\"keyword\">this</span>, MessengerService.class);</div><div class=\"line\">        bindService(intent,connection, Context.BIND_AUTO_CREATE);</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"meta\">@Override</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title\">onDestroy</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">super</span>.onDestroy();</div><div class=\"line\">        unbindService(connection);</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>通过上面的例子可以看出，在Messenger中进行数据传递必须将数据放入Message中，而Messenger和Message都实现了Parcelable接口，因此可以跨进程传输。简单来说,Message中所支持的数据类型就是Messenger所支持的传输类型。实际上，通过Messenger来传输Message, Message中 能使用的载体只有what、arg1、 arg2、 Bundle 以及replyTo。Message中的另一个字段object在同一-个进程中是很实用的，但是在进程间通信的时候，在Android2.2以前object字段不支持跨进程传输，即便是2.2以后，也仅仅是系统提供的实现了Parcelable接口的对象才能通过它来传输。这就意味着我们自定义的Parcelable对象是无法通过object字段来传输的，读者可以试一下。非系统的Parcelable对象的确无法通过object字段来传输，这也导致了object字段的实用性大大降低，所幸我们还有Bundle,Bundle中可以支持大量的数据类型。<br>上面的例子演示了如何在服务端接收客户端中发送的消息，但是有时候我们还需要能回应客户端，下面就介绍如何实现这种效果。还是采用上面的例子，但是稍微做一下修改，每当客户端发来一条消息，服务端就会自动回复一条“嗯，你的消息我已经收到，稍后会回复你。”，这很类似邮箱的自动回复功能。</p>\n<p>首先看服务端的修改，服务端只需要修改MessengerHandler,当收到消息后，会立即回复一条消息给客户端。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MessengerService</span> <span class=\"keyword\">extends</span> <span class=\"title\">Service</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MessengerHandler</span> <span class=\"keyword\">extends</span> <span class=\"title\">Handler</span></span>&#123;</div><div class=\"line\">        <span class=\"meta\">@Override</span></div><div class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">handleMessage</span><span class=\"params\">(Message msg)</span> </span>&#123;</div><div class=\"line\">            <span class=\"keyword\">switch</span> (msg.what)&#123;</div><div class=\"line\">                <span class=\"keyword\">case</span> <span class=\"number\">10001</span>:</div><div class=\"line\">                    Log.e(<span class=\"string\">\"huangyuan\"</span>,<span class=\"string\">\"收到客户端\"</span>+msg.getData().getString(<span class=\"string\">\"msg\"</span>));</div><div class=\"line\">                    Messenger clientMessenger = msg.replyTo;</div><div class=\"line\">                    Message message = Message.obtain(<span class=\"keyword\">null</span>,<span class=\"number\">10001</span>);</div><div class=\"line\">                    Bundle bundle = <span class=\"keyword\">new</span> Bundle();</div><div class=\"line\">                    bundle.putString(<span class=\"string\">\"msg\"</span>,<span class=\"string\">\"服务端回应\"</span>);</div><div class=\"line\">                    message.setData(bundle);</div><div class=\"line\">                    <span class=\"keyword\">try</span> &#123;</div><div class=\"line\">                        clientMessenger.send(message);</div><div class=\"line\">                    &#125; <span class=\"keyword\">catch</span> (RemoteException e) &#123;</div><div class=\"line\"></div><div class=\"line\">                        e.printStackTrace();</div><div class=\"line\">                    &#125;</div><div class=\"line\">                    <span class=\"keyword\">break</span>;</div><div class=\"line\">                    <span class=\"keyword\">default</span>:</div><div class=\"line\">                        <span class=\"keyword\">super</span>.handleMessage(msg);</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">final</span> Messenger messenger = <span class=\"keyword\">new</span> Messenger(<span class=\"keyword\">new</span> MessengerHandler());</div><div class=\"line\">    <span class=\"meta\">@Nullable</span></div><div class=\"line\">    <span class=\"meta\">@Override</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> IBinder <span class=\"title\">onBind</span><span class=\"params\">(Intent intent)</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> messenger.getBinder();</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>为了接收服务端的消息，客户端也需要准备一个接收消息的Messenger和Handler:<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MessengerActivity</span> <span class=\"keyword\">extends</span> <span class=\"title\">AppCompatActivity</span> </span>&#123;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">private</span> Messenger mService;</div><div class=\"line\">    <span class=\"keyword\">private</span> Messenger getReplyMessenger = <span class=\"keyword\">new</span> Messenger(<span class=\"keyword\">new</span> MessengerHandler());</div><div class=\"line\">    <span class=\"keyword\">private</span> ServiceConnection connection = <span class=\"keyword\">new</span> ServiceConnection() &#123;</div><div class=\"line\">        <span class=\"meta\">@Override</span></div><div class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onServiceConnected</span><span class=\"params\">(ComponentName name, IBinder service)</span> </span>&#123;</div><div class=\"line\">            mService = <span class=\"keyword\">new</span> Messenger(service);</div><div class=\"line\">            Message msg = Message.obtain(<span class=\"keyword\">null</span>,<span class=\"number\">10001</span>);</div><div class=\"line\">            Bundle data = <span class=\"keyword\">new</span> Bundle();</div><div class=\"line\">            data.putString(<span class=\"string\">\"msg\"</span>,<span class=\"string\">\"hi 来自客户端的问候\"</span>);</div><div class=\"line\">            msg.setData(data);</div><div class=\"line\">            msg.replyTo = getReplyMessenger;</div><div class=\"line\">            <span class=\"keyword\">try</span> &#123;</div><div class=\"line\">                mService.send(msg);</div><div class=\"line\">            &#125; <span class=\"keyword\">catch</span> (RemoteException e) &#123;</div><div class=\"line\">                e.printStackTrace();</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\">        <span class=\"meta\">@Override</span></div><div class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onServiceDisconnected</span><span class=\"params\">(ComponentName name)</span> </span>&#123;</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MessengerHandler</span>  <span class=\"keyword\">extends</span> <span class=\"title\">Handler</span></span>&#123;</div><div class=\"line\">        <span class=\"meta\">@Override</span></div><div class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">handleMessage</span><span class=\"params\">(Message msg)</span> </span>&#123;</div><div class=\"line\">            <span class=\"keyword\">switch</span> (msg.what)&#123;</div><div class=\"line\">                <span class=\"keyword\">case</span> <span class=\"number\">10001</span>:</div><div class=\"line\">                    Log.e(<span class=\"string\">\"huangyuan\"</span>,<span class=\"string\">\"收到服务端的回复--&gt;\"</span>+ msg.getData().get(<span class=\"string\">\"msg\"</span>));</div><div class=\"line\">                    <span class=\"keyword\">break</span>;</div><div class=\"line\">                    <span class=\"keyword\">default</span>:</div><div class=\"line\">                        <span class=\"keyword\">super</span>.handleMessage(msg);</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"meta\">@Override</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title\">onCreate</span><span class=\"params\">(Bundle savedInstanceState)</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">super</span>.onCreate(savedInstanceState);</div><div class=\"line\">        setContentView(R.layout.activity_messenger2);</div><div class=\"line\">        Intent intent = <span class=\"keyword\">new</span> Intent(<span class=\"keyword\">this</span>, MessengerService.class);</div><div class=\"line\">        bindService(intent,connection, Context.BIND_AUTO_CREATE);</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"meta\">@Override</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title\">onDestroy</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">super</span>.onDestroy();</div><div class=\"line\">        unbindService(connection);</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>关键的一点在于当客户端发送消息的时候，需要把接收服务端回复的Messenger通过Message的replyTo参数传递给服务端：<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">msg.replyTo = getReplyMessenger;</div></pre></td></tr></table></figure></p>\n<hr>\n<p>以上</p>\n","excerpt":"<p>Android中中IPC方式有很多，比如使用Bundle，使用文件共享，使用Messenger，使用AIDL，使用ContentProvider，使用Socket等。前两种方式比较简单，自己玩。<br>下面主要是抄的《Android开发艺术探索》2.4.3章节，看过书的就不用看了。<br>","more":"<br>Messenger可以翻译为信使，顾名思义，通过它可以在不同进程中传递Message对象,在Message中放入我们需要传递的数据，就可以轻松地实现数据的进程间传递了。Messenger是一种轻量级的IPC方案，它的底层实现是AIDL，为什么这么说呢，我们大致看一下Messenger这个类的构造方法就明白了。下面是Messenger的两个构造方法，从构造方法的实现上我们可以明显看出AIDL的痕迹，不管是IMessenger还是Stub.asInterface,这种使用方法都表明它的底层是AIDL。<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">Messenger</span> <span class=\"params\">(Handler target)</span> </span>&#123;</div><div class=\"line\">    mTarget = target.getIMessenger();</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">Messenger</span> <span class=\"params\">( IBinder target)</span> </span>&#123;</div><div class=\"line\">    mTarget = IMessenger.Stub.asInterface(target);</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>Messenger的使用方法很简单，它对AIDL做了封装，使得我们可以更简便地进行进程间通信。同时，由于它一次处理一个请求，因此在服务端我们不用考虑线程同步的问题，这是因为服务端中不存在并发执行的情形。实现一个Messenger有如下几个步骤，分为服务端和客户端。</p>\n<ol>\n<li>服务端进程<br>首先，我们需要在服务端创建–个Service来处理客户端的连接请求，同时创建一个Handler并通过它来创建一个Messenger对 象，然后在Service的onBind中返回这个Messenger对象底层的Binder即可。</li>\n<li>客户端进程<br>客户端进程中，首先要绑定服务端的Service,绑定成功后用服务端返回的IBinder对象创建一个Messenger,通过这个Messenger就可以向服务端发送消息了，发消息类型为Message对象。如果需要服务端能够回应客户端，就和服务端一-样，我们还需要创建一个Handler并创建一个 新的Messenger,并把这个Messenger对象通过Message的replyTo参数传递给服务端，服务端通过这个replyTo参数就可以回应客户端。</li>\n</ol>\n<p>首先看服务端的代码，这是服务端的典型代码，可以看到MessengerHandler用来处理客户端发送的消息，并从消息中取出客户端发来的文本信息。而mMessenger是一个Messenger对象，它和MessengerHandler相关联，并在onBind方法中返回它里面的Binder对象，可以看出，这里Messenger的作用是将客户端发送的消息传递给MessengerHandler处理。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MessengerService</span> <span class=\"keyword\">extends</span> <span class=\"title\">Service</span> </span>&#123;</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MessengerHandler</span> <span class=\"keyword\">extends</span> <span class=\"title\">Handler</span></span>&#123;</div><div class=\"line\">        <span class=\"meta\">@Override</span></div><div class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">handleMessage</span><span class=\"params\">(Message msg)</span> </span>&#123;</div><div class=\"line\">            <span class=\"keyword\">switch</span> (msg.what)&#123;</div><div class=\"line\">                <span class=\"keyword\">case</span> <span class=\"number\">10001</span>:</div><div class=\"line\">                    Log.e(<span class=\"string\">\"xuan\"</span>,<span class=\"string\">\"收到客户端\"</span>+msg.getData().getString(<span class=\"string\">\"msg\"</span>));</div><div class=\"line\">                    <span class=\"keyword\">break</span>;</div><div class=\"line\">                    <span class=\"keyword\">default</span>:</div><div class=\"line\">                        <span class=\"keyword\">super</span>.handleMessage(msg);</div><div class=\"line\">            &#125;</div><div class=\"line\"></div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">final</span> Messenger messenger = <span class=\"keyword\">new</span> Messenger(<span class=\"keyword\">new</span> MessengerHandler());</div><div class=\"line\">    <span class=\"meta\">@Nullable</span></div><div class=\"line\">    <span class=\"meta\">@Override</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> IBinder <span class=\"title\">onBind</span><span class=\"params\">(Intent intent)</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> messenger.getBinder();</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>然后注册<code>service</code>,让其在单独的进程中运行<br><figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">service</span></div><div class=\"line\"><span class=\"attr\">android:</span> <span class=\"attr\">name</span>=<span class=\"string\">\".messenger.MessengerService\"</span></div><div class=\"line\"><span class=\"attr\">android:</span> <span class=\"attr\">process</span>=<span class=\"string\">\":remote\"</span>&gt;</span></div></pre></td></tr></table></figure></p>\n<p>在客户端,首先需要绑定远程进程的MessengerService,绑定成功后，根据服务端返回的binder对象创建Messenger对象并使用此对象向服务端发送消息。下面的代码在Bundle中向服务端发送了一句话，在，上面的服务端代码中会打印出这句话。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MessengerActivity</span> <span class=\"keyword\">extends</span> <span class=\"title\">AppCompatActivity</span> </span>&#123;</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">private</span> Messenger mService;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">private</span> ServiceConnection connection = <span class=\"keyword\">new</span> ServiceConnection() &#123;</div><div class=\"line\">        <span class=\"meta\">@Override</span></div><div class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onServiceConnected</span><span class=\"params\">(ComponentName name, IBinder service)</span> </span>&#123;</div><div class=\"line\">            mService = <span class=\"keyword\">new</span> Messenger(service);</div><div class=\"line\">            Message msg = Message.obtain(<span class=\"keyword\">null</span>,<span class=\"number\">10001</span>);</div><div class=\"line\">            Bundle data = <span class=\"keyword\">new</span> Bundle();</div><div class=\"line\">            data.putString(<span class=\"string\">\"msg\"</span>,<span class=\"string\">\"hi 来自客户端的问候\"</span>);</div><div class=\"line\">            msg.setData(data);</div><div class=\"line\">            <span class=\"keyword\">try</span> &#123;</div><div class=\"line\">                mService.send(msg);</div><div class=\"line\">            &#125; <span class=\"keyword\">catch</span> (RemoteException e) &#123;</div><div class=\"line\">                e.printStackTrace();</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\">        <span class=\"meta\">@Override</span></div><div class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onServiceDisconnected</span><span class=\"params\">(ComponentName name)</span> </span>&#123;</div><div class=\"line\"></div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"meta\">@Override</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title\">onCreate</span><span class=\"params\">(Bundle savedInstanceState)</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">super</span>.onCreate(savedInstanceState);</div><div class=\"line\">        setContentView(R.layout.activity_messenger2);</div><div class=\"line\"></div><div class=\"line\">        Intent intent = <span class=\"keyword\">new</span> Intent(<span class=\"keyword\">this</span>, MessengerService.class);</div><div class=\"line\">        bindService(intent,connection, Context.BIND_AUTO_CREATE);</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"meta\">@Override</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title\">onDestroy</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">super</span>.onDestroy();</div><div class=\"line\">        unbindService(connection);</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>通过上面的例子可以看出，在Messenger中进行数据传递必须将数据放入Message中，而Messenger和Message都实现了Parcelable接口，因此可以跨进程传输。简单来说,Message中所支持的数据类型就是Messenger所支持的传输类型。实际上，通过Messenger来传输Message, Message中 能使用的载体只有what、arg1、 arg2、 Bundle 以及replyTo。Message中的另一个字段object在同一-个进程中是很实用的，但是在进程间通信的时候，在Android2.2以前object字段不支持跨进程传输，即便是2.2以后，也仅仅是系统提供的实现了Parcelable接口的对象才能通过它来传输。这就意味着我们自定义的Parcelable对象是无法通过object字段来传输的，读者可以试一下。非系统的Parcelable对象的确无法通过object字段来传输，这也导致了object字段的实用性大大降低，所幸我们还有Bundle,Bundle中可以支持大量的数据类型。<br>上面的例子演示了如何在服务端接收客户端中发送的消息，但是有时候我们还需要能回应客户端，下面就介绍如何实现这种效果。还是采用上面的例子，但是稍微做一下修改，每当客户端发来一条消息，服务端就会自动回复一条“嗯，你的消息我已经收到，稍后会回复你。”，这很类似邮箱的自动回复功能。</p>\n<p>首先看服务端的修改，服务端只需要修改MessengerHandler,当收到消息后，会立即回复一条消息给客户端。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MessengerService</span> <span class=\"keyword\">extends</span> <span class=\"title\">Service</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MessengerHandler</span> <span class=\"keyword\">extends</span> <span class=\"title\">Handler</span></span>&#123;</div><div class=\"line\">        <span class=\"meta\">@Override</span></div><div class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">handleMessage</span><span class=\"params\">(Message msg)</span> </span>&#123;</div><div class=\"line\">            <span class=\"keyword\">switch</span> (msg.what)&#123;</div><div class=\"line\">                <span class=\"keyword\">case</span> <span class=\"number\">10001</span>:</div><div class=\"line\">                    Log.e(<span class=\"string\">\"huangyuan\"</span>,<span class=\"string\">\"收到客户端\"</span>+msg.getData().getString(<span class=\"string\">\"msg\"</span>));</div><div class=\"line\">                    Messenger clientMessenger = msg.replyTo;</div><div class=\"line\">                    Message message = Message.obtain(<span class=\"keyword\">null</span>,<span class=\"number\">10001</span>);</div><div class=\"line\">                    Bundle bundle = <span class=\"keyword\">new</span> Bundle();</div><div class=\"line\">                    bundle.putString(<span class=\"string\">\"msg\"</span>,<span class=\"string\">\"服务端回应\"</span>);</div><div class=\"line\">                    message.setData(bundle);</div><div class=\"line\">                    <span class=\"keyword\">try</span> &#123;</div><div class=\"line\">                        clientMessenger.send(message);</div><div class=\"line\">                    &#125; <span class=\"keyword\">catch</span> (RemoteException e) &#123;</div><div class=\"line\"></div><div class=\"line\">                        e.printStackTrace();</div><div class=\"line\">                    &#125;</div><div class=\"line\">                    <span class=\"keyword\">break</span>;</div><div class=\"line\">                    <span class=\"keyword\">default</span>:</div><div class=\"line\">                        <span class=\"keyword\">super</span>.handleMessage(msg);</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">final</span> Messenger messenger = <span class=\"keyword\">new</span> Messenger(<span class=\"keyword\">new</span> MessengerHandler());</div><div class=\"line\">    <span class=\"meta\">@Nullable</span></div><div class=\"line\">    <span class=\"meta\">@Override</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> IBinder <span class=\"title\">onBind</span><span class=\"params\">(Intent intent)</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> messenger.getBinder();</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>为了接收服务端的消息，客户端也需要准备一个接收消息的Messenger和Handler:<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MessengerActivity</span> <span class=\"keyword\">extends</span> <span class=\"title\">AppCompatActivity</span> </span>&#123;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">private</span> Messenger mService;</div><div class=\"line\">    <span class=\"keyword\">private</span> Messenger getReplyMessenger = <span class=\"keyword\">new</span> Messenger(<span class=\"keyword\">new</span> MessengerHandler());</div><div class=\"line\">    <span class=\"keyword\">private</span> ServiceConnection connection = <span class=\"keyword\">new</span> ServiceConnection() &#123;</div><div class=\"line\">        <span class=\"meta\">@Override</span></div><div class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onServiceConnected</span><span class=\"params\">(ComponentName name, IBinder service)</span> </span>&#123;</div><div class=\"line\">            mService = <span class=\"keyword\">new</span> Messenger(service);</div><div class=\"line\">            Message msg = Message.obtain(<span class=\"keyword\">null</span>,<span class=\"number\">10001</span>);</div><div class=\"line\">            Bundle data = <span class=\"keyword\">new</span> Bundle();</div><div class=\"line\">            data.putString(<span class=\"string\">\"msg\"</span>,<span class=\"string\">\"hi 来自客户端的问候\"</span>);</div><div class=\"line\">            msg.setData(data);</div><div class=\"line\">            msg.replyTo = getReplyMessenger;</div><div class=\"line\">            <span class=\"keyword\">try</span> &#123;</div><div class=\"line\">                mService.send(msg);</div><div class=\"line\">            &#125; <span class=\"keyword\">catch</span> (RemoteException e) &#123;</div><div class=\"line\">                e.printStackTrace();</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\">        <span class=\"meta\">@Override</span></div><div class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onServiceDisconnected</span><span class=\"params\">(ComponentName name)</span> </span>&#123;</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MessengerHandler</span>  <span class=\"keyword\">extends</span> <span class=\"title\">Handler</span></span>&#123;</div><div class=\"line\">        <span class=\"meta\">@Override</span></div><div class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">handleMessage</span><span class=\"params\">(Message msg)</span> </span>&#123;</div><div class=\"line\">            <span class=\"keyword\">switch</span> (msg.what)&#123;</div><div class=\"line\">                <span class=\"keyword\">case</span> <span class=\"number\">10001</span>:</div><div class=\"line\">                    Log.e(<span class=\"string\">\"huangyuan\"</span>,<span class=\"string\">\"收到服务端的回复--&gt;\"</span>+ msg.getData().get(<span class=\"string\">\"msg\"</span>));</div><div class=\"line\">                    <span class=\"keyword\">break</span>;</div><div class=\"line\">                    <span class=\"keyword\">default</span>:</div><div class=\"line\">                        <span class=\"keyword\">super</span>.handleMessage(msg);</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"meta\">@Override</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title\">onCreate</span><span class=\"params\">(Bundle savedInstanceState)</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">super</span>.onCreate(savedInstanceState);</div><div class=\"line\">        setContentView(R.layout.activity_messenger2);</div><div class=\"line\">        Intent intent = <span class=\"keyword\">new</span> Intent(<span class=\"keyword\">this</span>, MessengerService.class);</div><div class=\"line\">        bindService(intent,connection, Context.BIND_AUTO_CREATE);</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"meta\">@Override</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title\">onDestroy</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">super</span>.onDestroy();</div><div class=\"line\">        unbindService(connection);</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>关键的一点在于当客户端发送消息的时候，需要把接收服务端回复的Messenger通过Message的replyTo参数传递给服务端：<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">msg.replyTo = getReplyMessenger;</div></pre></td></tr></table></figure></p>\n<hr>\n<p>以上</p>"},{"title":"AndroidService","date":"2018-08-01T02:01:16.000Z","keywords":"Service,startService,bindService","_content":"《Android开发艺术探索》9.3章\n`Service`分为两种工作状态,一种是启动状态，主要用于执行后台计算;另一种是绑定态,主要用于其他组件和`Service`的交互。需要注意的是，`Service`的这两种状态是可以共存的，即`Service`既可以处于启动状态也可以同时处于绑定状态。\n通过`Context`的`startService`方法即可启动一个`Service`:\n``` java \nIntent intent = new Intent(content,Service.class);\nstartService(intent);\n```\n通过`Context`的`bindService`方法可以绑定一个`Service`：\n``` java\nIntent intent = new Intent(content,Service.class);\nbindService(intent,connection,BIND_AUTO_CREATE);\n```\n<!--more-->\n#### Service启动过程\n\n`Service`的启动时从`ContextWrapper`的`startService`开始的：\n``` java\n@Override\n    public ComponentName startService(Intent service) {\n        return mBase.startService(service);\n    }\n```\n`mBase`是`Context`的实现类`ContextImpl`，`在Activity`启动的时候会通过`attach`方法关联一个`ContextImpl`，这个`ContextImpl`就是上面的`mBase`，从`ContextWrapper`的实现来看，大部分的实现都是通过`mBase`来实现的，这是一种典型的桥接模式。在`ContextImpl`的`startService`方法中又调用了`startServiceCommon`。\n``` java\n @Override\n    public ComponentName startService(Intent service) {\n        warnIfCallingFromSystemProcess();\n        return startServiceCommon(service, false, mUser);\n    }\nprivate ComponentName startServiceCommon(Intent service, boolean requireForeground,UserHandle user) {\n\n    validateServiceIntent(service);\n    service.prepareToLeaveProcess(this);\n    //api 27\n    ComponentName cn = ActivityManager.getService().startService(\n        mMainThread.getApplicationThread(), service, service.resolveTypeIfNeeded(\n                    getContentResolver()), requireForeground,\n                    getOpPackageName(), user.getIdentifier());\n    //api 25\n    //ComponentName cn = ActivityManagerNative.getDefault().startService(\n     //   mMainThread.getApplicationThread(), service, service.resolveTypeIfNeeded(\n      //  getContentResolver()), getOpPackageName(), user.getIdentifier());\n\n    return cn;\n\n}\n```\n在`startServiceCommon`中通过`getService`这个对象来启动一个服务，这个对象就是AMS，需要注意的是，在上述代码中通过AMS来启动服务的过程是一个跨进程调用。AMS的`startService`如下：\n``` java\n@Override\n    public ComponentName startService(IApplicationThread caller, Intent service,\n            String resolvedType, String callingPackage, int userId)\n            throws TransactionTooLargeException {\n        synchronized(this) {\n            final int callingPid = Binder.getCallingPid();\n            final int callingUid = Binder.getCallingUid();\n            final long origId = Binder.clearCallingIdentity();\n            ComponentName res = mServices.startServiceLocked(caller, service,\n                    resolvedType, callingPid, callingUid, callingPackage, userId);\n            Binder.restoreCallingIdentity(origId);\n            return res;\n        }\n    }\n```\nAMS会通过`mServices`来完成`service`的启动过程，`mServices`的对象类型是`ActiveServices`，`ActiveServices`是一个辅助AMS进行`Service`管理的类，包括`Service`的启动、绑定和停止。在`startService`方法的尾部会调用`startServiceInnerLocked`方法\n``` java\nComponentName startServiceInnerLocked(ServiceMap smap, Intent service, ServiceRecord r,\n            boolean callerFg, boolean addToStarting) throws TransactionTooLargeException {\n        ServiceState stracker = r.getTracker();\n        if (stracker != null) {\n            stracker.setStarted(true, mAm.mProcessStats.getMemFactorLocked(), r.lastActivity);\n        }\n        r.callStart = false;\n        synchronized (r.stats.getBatteryStats()) {\n            r.stats.startRunningLocked();\n        }\n        String error = bringUpServiceLocked(r, service.getFlags(), callerFg, false, false);\n        return r.name;\n    }\n```\n上述代码中`ServiceRecord`是描述一个Service记录，`ServiceRecord`一直贯穿整个Service流程，`startServiceInnerLocked`并没有完成启动Service的完整流程，而是将后续的过程交给了`bringUpServiceLocked`，在该方法中又调用了`realStartServiceLocked`方法:\n``` java\nprivate final void realStartServiceLocked(ServiceRecord r,\n            ProcessRecord app, boolean execInFg) throws RemoteException {\n       \n        r.app = app;\n        r.restartTime = r.lastActivity = SystemClock.uptimeMillis();\n\n        final boolean newService = app.services.add(r);\n        bumpServiceExecutingLocked(r, execInFg, \"create\");\n        mAm.updateLruProcessLocked(app, false, null);\n        mAm.updateOomAdjLocked();\n\n        boolean created = false;\n        try {\n            \n            synchronized (r.stats.getBatteryStats()) {\n                r.stats.startLaunchedLocked();\n            }\n            mAm.notifyPackageUse(r.serviceInfo.packageName,\n                                 PackageManager.NOTIFY_PACKAGE_USE_SERVICE);\n            app.forceProcessStateUpTo(ActivityManager.PROCESS_STATE_SERVICE);\n            app.thread.scheduleCreateService(r, r.serviceInfo,\n                    mAm.compatibilityInfoForPackageLocked(r.serviceInfo.applicationInfo),\n                    app.repProcState);\n            r.postNotification();\n            created = true;\n        } catch (DeadObjectException e) {\n            Slog.w(TAG, \"Application dead when creating service \" + r);\n            mAm.appDiedLocked(app);\n            throw e;\n        } finally {\n            if (!created) {\n                // Keep the executeNesting count accurate.\n                final boolean inDestroying = mDestroyingServices.contains(r);\n                serviceDoneExecutingLocked(r, inDestroying, inDestroying);\n\n                // Cleanup.\n                if (newService) {\n                    app.services.remove(r);\n                    r.app = null;\n                }\n\n                // Retry.\n                if (!inDestroying) {\n                    scheduleServiceRestartLocked(r, false);\n                }\n            }\n        }\n\n        if (r.whitelistManager) {\n            app.whitelistManager = true;\n        }\n\n        requestServiceBindingsLocked(r, execInFg);\n\n        updateServiceClientActivitiesLocked(app, null, true);\n\n        // If the service is in the started state, and there are no\n        // pending arguments, then fake up one so its onStartCommand() will\n        // be called.\n        if (r.startRequested && r.callStart && r.pendingStarts.size() == 0) {\n            r.pendingStarts.add(new ServiceRecord.StartItem(r, false, r.makeNextStartId(),\n                    null, null));\n        }\n\n        sendServiceArgsLocked(r, execInFg, true);\n\n        if (r.delayed) {\n            if (DEBUG_DELAYED_STARTS) Slog.v(TAG_SERVICE, \"REM FR DELAY LIST (new proc): \" + r);\n            getServiceMap(r.userId).mDelayedStartList.remove(r);\n            r.delayed = false;\n        }\n\n        if (r.delayedStop) {\n            // Oh and hey we've already been asked to stop!\n            r.delayedStop = false;\n            if (r.startRequested) {\n                if (DEBUG_DELAYED_STARTS) Slog.v(TAG_SERVICE,\n                        \"Applying delayed stop (from start): \" + r);\n                stopServiceLocked(r);\n            }\n        }\n    }\n```\n在`realStartServiceLocked`方法中，首先通过`app.thread`的`scheduleCreateService`方法来创建`Service`对象并调用其`onCreate`,接着再通过`sendServiceArgsLocked`方法来调用`Service`的其他方法，比如`onStartCommand`,这两个过程均是进程间通信。`app.thread`对象是`IApplicationThread`类型，它实际上是一个`Binder`,它的具体实现是`ApplicationThread`和`ApplicationThreadNative`。由于`ApplicationThread`继承了`ApplicationThreadNative`,因此只需要看`ApplicationThread`对`Service`启动过程的处理即可，这对应着它的`scheduleCreateService`方法，如下所示：\n``` java\n public final void scheduleCreateService(IBinder token,\n                ServiceInfo info, CompatibilityInfo compatInfo, int processState) {\n            updateProcessState(processState, false);\n            CreateServiceData s = new CreateServiceData();\n            s.token = token;\n            s.info = info;\n            s.compatInfo = compatInfo;\n\n            sendMessage(H.CREATE_SERVICE, s);\n        }\n```\n通过发送消息给`Handler H`来完成的。H会接收这个`CREATE_ SERVICE`消息并通过`ActivityThread`的`handleCreateService`方法来完成Service的最终启动，`handleCreateService`的源码如下所示：\n``` java\nprivate void handleCreateService(CreateServiceData data) {\n        // If we are getting ready to gc after going to the background, well\n        // we are back active so skip it.\n        unscheduleGcIdler();\n        LoadedApk packageInfo = getPackageInfoNoCheck(\n                data.info.applicationInfo, data.compatInfo);\n        Service service = null;\n\n            java.lang.ClassLoader cl = packageInfo.getClassLoader();\n            service = (Service) cl.loadClass(data.info.name).newInstance();\n\n            ContextImpl context = ContextImpl.createAppContext(this, packageInfo);\n            context.setOuterContext(service);\n\n            Application app = packageInfo.makeApplication(false, mInstrumentation);\n            service.attach(context, this, data.info.name, data.token, app,\n                    ActivityManagerNative.getDefault());\n            service.onCreate();\n            mServices.put(data.token, service);\n            ActivityManagerNative.getDefault().serviceDoneExecuting(\n                        data.token, SERVICE_DONE_EXECUTING_ANON, 0, 0);\n    }\n\n```\n`handleCreateService`主要完成了以下几件事：\n首先通过类加载器创建了Service实例，接着创建`ContextImpl`对象和`Application`对象  并通过service.attach方法建立联系，最后调用`service.onCreate`方法，并将`service`存储在`ActivityThread`中的一个列表`mServices`中\n``` java\n final ArrayMap<IBinder, Service> mServices = new ArrayMap<>();\n```\n由于`service`的`onCreate`方法执行了，也就意味着`Service`已经启动了。除此之外，`ActivityThead`中还会通过`handleServiceArgs`方法调用`Service`的`onStartCommand`方法。\n\n#### Service绑定过程\n和启动过程一样，也是从`ContextWrapper`开始的：\n``` java\n@Override\npublic boolean bindService(Intent service, ServiceConnection conn,\n        int flags) {\n    return mBase.bindService(service, conn, flags);\n}\n```\n然后是`ContextImpl`的`bindService`方法调用`bindServiceCommon`方法，然后远程调用AMS的`bindService`:\n``` java\nprivate boolean bindServiceCommon(Intent service, ServiceConnection conn, int flags, Handler handler, UserHandle user) {\n    // Keep this in sync with DevicePolicyManager.bindDeviceAdminServiceAsUser.\n    IServiceConnection sd;\n    if (conn == null) {\n        throw new IllegalArgumentException(\"connection is null\");\n    }\n    if (mPackageInfo != null) {\n        sd = mPackageInfo.getServiceDispatcher(conn, getOuterContext(), handler, flags);\n    } else {\n        throw new RuntimeException(\"Not supported in system context\");\n    }\n    validateServiceIntent(service);\n    try {\n        IBinder token = getActivityToken();\n        if (token == null && (flags&BIND_AUTO_CREATE) == 0 && mPackageInfo != null\n                && mPackageInfo.getApplicationInfo().targetSdkVersion\n                < android.os.Build.VERSION_CODES.ICE_CREAM_SANDWICH) {\n            flags |= BIND_WAIVE_PRIORITY;\n        }\n        service.prepareToLeaveProcess(this);\n        int res = ActivityManager.getService().bindService(\n            mMainThread.getApplicationThread(), getActivityToken(), service,\n            service.resolveTypeIfNeeded(getContentResolver()),\n            sd, flags, getOpPackageName(), user.getIdentifier());\n        if (res < 0) {\n            throw new SecurityException(\n                    \"Not allowed to bind to service \" + service);\n        }\n        return res != 0;\n    } catch (RemoteException e) {\n        throw e.rethrowFromSystemServer();\n    }\n}\n```\n在该方法中，首先将客户端的`ServiceConnection`转化为`ServiceDispatcher.InnerConnection`对象，因为服务绑定是跨进程的，所以`ServiceConnection`对象必须借助`Binder`对象才能让远程服务端调用自己的方法。`ServiceDispatcher`起着连接`ServiceConnection`和`InnerConnection`的作用。这个过程由`LoadedApk.getServiceDispatcher`方法完成：\n``` java\npublic final IServiceConnection getServiceDispatcher(ServiceConnection c,\n            Context context, Handler handler, int flags) {\n        synchronized (mServices) {\n            LoadedApk.ServiceDispatcher sd = null;\n            ArrayMap<ServiceConnection, LoadedApk.ServiceDispatcher> map = mServices.get(context);\n            if (map != null) {\n                if (DEBUG) Slog.d(TAG, \"Returning existing dispatcher \" + sd + \" for conn \" + c);\n                sd = map.get(c);\n            }\n            if (sd == null) {\n                sd = new ServiceDispatcher(c, context, handler, flags);\n                if (DEBUG) Slog.d(TAG, \"Creating new dispatcher \" + sd + \" for conn \" + c);\n                if (map == null) {\n                    map = new ArrayMap<>();\n                    mServices.put(context, map);\n                }\n                map.put(c, sd);\n            } else {\n                sd.validate(context, handler);\n            }\n            return sd.getIServiceConnection();\n        }\n    }\n```\n在上面的代码中，`mServices`是一个`ArrayMap`，它存储了一个应用当前活动的`ServiceConnection`和`ServiceDispatcher`的映射关系，其声明如下：\n``` java\nprivate final ArrayMap<Context, ArrayMap<ServiceConnection, LoadedApk.ServiceDispatcher>> mServices\n        = new ArrayMap<>();\n```\n系统首先会查找是否存在相同的`ServiceConnection`,如果不存在就重新创建一个`ServiceDispatcher`对象，并将其存储在`mServices`中，其中映射关系的key是`ServiceConnection`,value是`ServiceDispatcher`,在`ServiceDispatcher`的内部又保存了`ServiceConnection`和`InnerConnection`对象。当`Service`和客户端建立连接后，系统会通过`InnerConnection`来调用`ServiceConnection`中的`onServiceConnected`方法，这个过程有可能是跨进程的。当`ServiceDispatcher`创建好了以后，`getServiceDispatcher`会 返回其保存的`InnerConnection`对象。\n接着调用AMS的`bindService`  方法，该方法又调用了`bindServiceLocked`-->`bringUpServiceLocked`-->`realStartServiceLocked`，这个过程和上面的`StartService`过程逻辑类似，最终都是通过`ApplicationThread`来完成`Service`的实例创建并调用`onCreate`方法。和启动`Service`过程不同的是，绑定过程会调用`app.thread`的`scheduleBindService`方法，这个过程的实现在`ActivityService`的`requestServiceBindingsLocked`方法中：\n``` java\n private final void requestServiceBindingsLocked(ServiceRecord r, boolean execInFg)\n            throws TransactionTooLargeException {\n        for (int i=r.bindings.size()-1; i>=0; i--) {\n            IntentBindRecord ibr = r.bindings.valueAt(i);\n            if (!requestServiceBindingLocked(r, ibr, execInFg, false)) {\n                break;\n            }\n        }\n    }\n\n```\n该方法用到了`r.bindings`。它是一个`ArrayMap`，保存了客户端的`bind`消息：\n``` java\nfinal ArrayMap<Intent.FilterComparison, IntentBindRecord> bindings = new ArrayMap<Intent.FilterComparison, IntentBindRecord>();\n```\n具体保存方法在AMS一开始的方法`bindServiceLocked`中：\n``` java\nAppBindRecord b = s.retrieveAppBindingLocked(service, callerApp);\n```\n在`requestServiceBindingsLocked`方法中调用了了`requestServiceBindingLocked`方法:\n``` java\nprivate final boolean requestServiceBindingLocked(ServiceRecord r, IntentBindRecord i,\n            boolean execInFg, boolean rebind) throws TransactionTooLargeException {\n        if (r.app == null || r.app.thread == null) {\n            // If service is not currently running, can't yet bind.\n            return false;\n        }\n        if (DEBUG_SERVICE) Slog.d(TAG_SERVICE, \"requestBind \" + i + \": requested=\" + i.requested\n                + \" rebind=\" + rebind);\n        if ((!i.requested || rebind) && i.apps.size() > 0) {\n            try {\n                bumpServiceExecutingLocked(r, execInFg, \"bind\");\n                r.app.forceProcessStateUpTo(ActivityManager.PROCESS_STATE_SERVICE);\n                r.app.thread.scheduleBindService(r, i.intent.getIntent(), rebind,\n                        r.app.repProcState);\n                if (!rebind) {\n                    i.requested = true;\n                }\n                i.hasBound = true;\n                i.doRebind = false;\n            } catch (TransactionTooLargeException e) {\n                // Keep the executeNesting count accurate.\n                if (DEBUG_SERVICE) Slog.v(TAG_SERVICE, \"Crashed while binding \" + r, e);\n                final boolean inDestroying = mDestroyingServices.contains(r);\n                serviceDoneExecutingLocked(r, inDestroying, inDestroying);\n                throw e;\n            } catch (RemoteException e) {\n                if (DEBUG_SERVICE) Slog.v(TAG_SERVICE, \"Crashed while binding \" + r);\n                // Keep the executeNesting count accurate.\n                final boolean inDestroying = mDestroyingServices.contains(r);\n                serviceDoneExecutingLocked(r, inDestroying, inDestroying);\n                return false;\n            }\n        }\n        return true;\n    }\n```\n在上述代码中，`app.thread`这个对象多次出现过，它实际上就是`ApplicationThread`。`ApplicationThread`的一系列以`schedule`开头的方法，其内部都是通过`Handler H`来中转的，对于`scheduleBindService`方法来说也是如此，它的实现如下所示：\n``` java\npublic final void scheduleBindService(IBinder token, Intent intent,\n                boolean rebind, int processState) {\n            updateProcessState(processState, false);\n            BindServiceData s = new BindServiceData();\n            s.token = token;\n            s.intent = intent;\n            s.rebind = rebind;\n            sendMessage(H.BIND_SERVICE, s);\n        }\n```\n在H内部，接收到`BIND_SERVICE`这类消息时，会交给`ActivityThread`的`handleBindService`方法来处理。在`handleBindService`中，首先根据`Service`的`token`取出`Service`对象，然后调用`Service`的`onBind`方法，`Service`的`onBind`方法会返回一个`Binder`对象给客户端使用，原则上来说，`Service`的`onBind`方法被调用以后，`Service`就处于绑定状态了，但是`onBind`方法是`Service`的方法，这个时候客户端并不知道已经成功连接`Service`了，所以还必须调用客户端的`ServiceConnection`中的`onServiceConnected`,这个过程是由`ActivityManager.getService()`的`publishService`方法来完成的，而前面多次提到，`ActivityManager.getService()`就是AMS。`handleBindService`的实现过程如下所示。\n``` java\nprivate void handleBindService(BindServiceData data) {\n        Service s = mServices.get(data.token);\n        if (s != null) {\n            try {\n                data.intent.setExtrasClassLoader(s.getClassLoader());\n                data.intent.prepareToEnterProcess();\n                try {\n                    if (!data.rebind) {\n                        IBinder binder = s.onBind(data.intent);\n                        ActivityManager.getService().publishService(\n                                data.token, data.intent, binder);\n                    } else {\n                        s.onRebind(data.intent);\n                        ActivityManager.getService().serviceDoneExecuting(\n                                data.token, SERVICE_DONE_EXECUTING_ANON, 0, 0);\n                    }\n                    ensureJitEnabled();\n                } catch (RemoteException ex) {\n                    throw ex.rethrowFromSystemServer();\n                }\n            } catch (Exception e) {\n                if (!mInstrumentation.onException(s, e)) {\n                    throw new RuntimeException(\n                            \"Unable to bind to service \" + s\n                            + \" with \" + data.intent + \": \" + e.toString(), e);\n                }\n            }\n        }\n    }\n```\nService有一个特性，当多次绑定同一个Service时，Service的`onBind`方法**只会执行一次**，除非Service被终止了。当Service的onBind执行以后，系统还需要告知客户端已经成功连接Service了。根据上面的分析，这个过程由AMS的`publishService`方法来实现:\n``` java\npublic void publishService(IBinder token, Intent intent, IBinder service) {\n        // Refuse possible leaked file descriptors\n        if (intent != null && intent.hasFileDescriptors() == true) {\n            throw new IllegalArgumentException(\"File descriptors passed in Intent\");\n        }\n\n        synchronized(this) {\n            if (!(token instanceof ServiceRecord)) {\n                throw new IllegalArgumentException(\"Invalid service token\");\n            }\n            mServices.publishServiceLocked((ServiceRecord)token, intent, service);\n        }\n    }\n```\n从_上面代码可以看出，AMS的`publishService`方法将具体的工作交给了`ActiveServices`类型的`mServices`对象来处理。`ActiveServices`的`publishServiceLocked`方法看起来很复杂，但其实核心代码就只有一- 句话: `c.conn.connected(r.name,service)`， 其中c的类型是`ConnectionRecord`，`c.comn`的类型是`ServiceDispatcher.InnerConnection`, service就是Service的onBind方法返回的Binder对象。为了分析具体的逻辑，下面看一下`ServiceDispatcher.InnerConnection`的定义：\n``` java\nprivate static class InnerConnection extends IServiceConnection.Stub {\n            final WeakReference<LoadedApk.ServiceDispatcher> mDispatcher;\n\n            InnerConnection(LoadedApk.ServiceDispatcher sd) {\n                mDispatcher = new WeakReference<LoadedApk.ServiceDispatcher>(sd);\n            }\n\n            public void connected(ComponentName name, IBinder service, boolean dead)\n                    throws RemoteException {\n                LoadedApk.ServiceDispatcher sd = mDispatcher.get();\n                if (sd != null) {\n                    sd.connected(name, service, dead);\n                }\n            }\n        }\n```\n从`InnerConnection`的定义可以看出来，它的`connected`方法又调用了`ServiceDispatcher`的`connected`方法\n``` java\npublic void connected(ComponentName name, IBinder service, boolean dead) {\n            if (mActivityThread != null) {\n                mActivityThread.post(new RunConnection(name, service, 0, dead));\n            } else {\n                doConnected(name, service, dead);\n            }\n        }\n```\n对于Service的绑定过程来讲，`ServiceDispatcher`中的`mActivityThread`就是一个`handler`，它就是`ActivityThread`中的`H`，从`Service`的创建过程来讲，`mActivityTHread`不会为`null`，这样一来，`RunConnection`就可以经由`H`的`post`方法从而运行在主线程中，因此，客户端的`ServiceConnection`中的方法回调是在主线程中执行的。\n``` java\nprivate final class RunConnection implements Runnable {\n            RunConnection(ComponentName name, IBinder service, int command, boolean dead) {\n                mName = name;\n                mService = service;\n                mCommand = command;\n                mDead = dead;\n            }\n\n            public void run() {\n                if (mCommand == 0) {\n                    doConnected(mName, mService, mDead);\n                } else if (mCommand == 1) {\n                    doDeath(mName, mService);\n                }\n            }\n\n            final ComponentName mName;\n            final IBinder mService;\n            final int mCommand;\n            final boolean mDead;\n        }\n\n```\n很显然，`RunConnection`的`run`方法也是简单调用了`ServiceDispatcher`的`doConnected`方法，由于`ServiceDispatcher`内部保存了客户端的`ServiceConnection`对象，因此它可以很方便地调用`ServiceConnection`对象的`onServiceConnected`方法，如下所示。\n至此，bindService的过程完成。\n\n----\n以上","source":"_posts/AndroidService.md","raw":"---\ntitle: AndroidService\ndate: 2018-08-01 10:01:16\ntags: [Android]\nkeywords: Service,startService,bindService\n---\n《Android开发艺术探索》9.3章\n`Service`分为两种工作状态,一种是启动状态，主要用于执行后台计算;另一种是绑定态,主要用于其他组件和`Service`的交互。需要注意的是，`Service`的这两种状态是可以共存的，即`Service`既可以处于启动状态也可以同时处于绑定状态。\n通过`Context`的`startService`方法即可启动一个`Service`:\n``` java \nIntent intent = new Intent(content,Service.class);\nstartService(intent);\n```\n通过`Context`的`bindService`方法可以绑定一个`Service`：\n``` java\nIntent intent = new Intent(content,Service.class);\nbindService(intent,connection,BIND_AUTO_CREATE);\n```\n<!--more-->\n#### Service启动过程\n\n`Service`的启动时从`ContextWrapper`的`startService`开始的：\n``` java\n@Override\n    public ComponentName startService(Intent service) {\n        return mBase.startService(service);\n    }\n```\n`mBase`是`Context`的实现类`ContextImpl`，`在Activity`启动的时候会通过`attach`方法关联一个`ContextImpl`，这个`ContextImpl`就是上面的`mBase`，从`ContextWrapper`的实现来看，大部分的实现都是通过`mBase`来实现的，这是一种典型的桥接模式。在`ContextImpl`的`startService`方法中又调用了`startServiceCommon`。\n``` java\n @Override\n    public ComponentName startService(Intent service) {\n        warnIfCallingFromSystemProcess();\n        return startServiceCommon(service, false, mUser);\n    }\nprivate ComponentName startServiceCommon(Intent service, boolean requireForeground,UserHandle user) {\n\n    validateServiceIntent(service);\n    service.prepareToLeaveProcess(this);\n    //api 27\n    ComponentName cn = ActivityManager.getService().startService(\n        mMainThread.getApplicationThread(), service, service.resolveTypeIfNeeded(\n                    getContentResolver()), requireForeground,\n                    getOpPackageName(), user.getIdentifier());\n    //api 25\n    //ComponentName cn = ActivityManagerNative.getDefault().startService(\n     //   mMainThread.getApplicationThread(), service, service.resolveTypeIfNeeded(\n      //  getContentResolver()), getOpPackageName(), user.getIdentifier());\n\n    return cn;\n\n}\n```\n在`startServiceCommon`中通过`getService`这个对象来启动一个服务，这个对象就是AMS，需要注意的是，在上述代码中通过AMS来启动服务的过程是一个跨进程调用。AMS的`startService`如下：\n``` java\n@Override\n    public ComponentName startService(IApplicationThread caller, Intent service,\n            String resolvedType, String callingPackage, int userId)\n            throws TransactionTooLargeException {\n        synchronized(this) {\n            final int callingPid = Binder.getCallingPid();\n            final int callingUid = Binder.getCallingUid();\n            final long origId = Binder.clearCallingIdentity();\n            ComponentName res = mServices.startServiceLocked(caller, service,\n                    resolvedType, callingPid, callingUid, callingPackage, userId);\n            Binder.restoreCallingIdentity(origId);\n            return res;\n        }\n    }\n```\nAMS会通过`mServices`来完成`service`的启动过程，`mServices`的对象类型是`ActiveServices`，`ActiveServices`是一个辅助AMS进行`Service`管理的类，包括`Service`的启动、绑定和停止。在`startService`方法的尾部会调用`startServiceInnerLocked`方法\n``` java\nComponentName startServiceInnerLocked(ServiceMap smap, Intent service, ServiceRecord r,\n            boolean callerFg, boolean addToStarting) throws TransactionTooLargeException {\n        ServiceState stracker = r.getTracker();\n        if (stracker != null) {\n            stracker.setStarted(true, mAm.mProcessStats.getMemFactorLocked(), r.lastActivity);\n        }\n        r.callStart = false;\n        synchronized (r.stats.getBatteryStats()) {\n            r.stats.startRunningLocked();\n        }\n        String error = bringUpServiceLocked(r, service.getFlags(), callerFg, false, false);\n        return r.name;\n    }\n```\n上述代码中`ServiceRecord`是描述一个Service记录，`ServiceRecord`一直贯穿整个Service流程，`startServiceInnerLocked`并没有完成启动Service的完整流程，而是将后续的过程交给了`bringUpServiceLocked`，在该方法中又调用了`realStartServiceLocked`方法:\n``` java\nprivate final void realStartServiceLocked(ServiceRecord r,\n            ProcessRecord app, boolean execInFg) throws RemoteException {\n       \n        r.app = app;\n        r.restartTime = r.lastActivity = SystemClock.uptimeMillis();\n\n        final boolean newService = app.services.add(r);\n        bumpServiceExecutingLocked(r, execInFg, \"create\");\n        mAm.updateLruProcessLocked(app, false, null);\n        mAm.updateOomAdjLocked();\n\n        boolean created = false;\n        try {\n            \n            synchronized (r.stats.getBatteryStats()) {\n                r.stats.startLaunchedLocked();\n            }\n            mAm.notifyPackageUse(r.serviceInfo.packageName,\n                                 PackageManager.NOTIFY_PACKAGE_USE_SERVICE);\n            app.forceProcessStateUpTo(ActivityManager.PROCESS_STATE_SERVICE);\n            app.thread.scheduleCreateService(r, r.serviceInfo,\n                    mAm.compatibilityInfoForPackageLocked(r.serviceInfo.applicationInfo),\n                    app.repProcState);\n            r.postNotification();\n            created = true;\n        } catch (DeadObjectException e) {\n            Slog.w(TAG, \"Application dead when creating service \" + r);\n            mAm.appDiedLocked(app);\n            throw e;\n        } finally {\n            if (!created) {\n                // Keep the executeNesting count accurate.\n                final boolean inDestroying = mDestroyingServices.contains(r);\n                serviceDoneExecutingLocked(r, inDestroying, inDestroying);\n\n                // Cleanup.\n                if (newService) {\n                    app.services.remove(r);\n                    r.app = null;\n                }\n\n                // Retry.\n                if (!inDestroying) {\n                    scheduleServiceRestartLocked(r, false);\n                }\n            }\n        }\n\n        if (r.whitelistManager) {\n            app.whitelistManager = true;\n        }\n\n        requestServiceBindingsLocked(r, execInFg);\n\n        updateServiceClientActivitiesLocked(app, null, true);\n\n        // If the service is in the started state, and there are no\n        // pending arguments, then fake up one so its onStartCommand() will\n        // be called.\n        if (r.startRequested && r.callStart && r.pendingStarts.size() == 0) {\n            r.pendingStarts.add(new ServiceRecord.StartItem(r, false, r.makeNextStartId(),\n                    null, null));\n        }\n\n        sendServiceArgsLocked(r, execInFg, true);\n\n        if (r.delayed) {\n            if (DEBUG_DELAYED_STARTS) Slog.v(TAG_SERVICE, \"REM FR DELAY LIST (new proc): \" + r);\n            getServiceMap(r.userId).mDelayedStartList.remove(r);\n            r.delayed = false;\n        }\n\n        if (r.delayedStop) {\n            // Oh and hey we've already been asked to stop!\n            r.delayedStop = false;\n            if (r.startRequested) {\n                if (DEBUG_DELAYED_STARTS) Slog.v(TAG_SERVICE,\n                        \"Applying delayed stop (from start): \" + r);\n                stopServiceLocked(r);\n            }\n        }\n    }\n```\n在`realStartServiceLocked`方法中，首先通过`app.thread`的`scheduleCreateService`方法来创建`Service`对象并调用其`onCreate`,接着再通过`sendServiceArgsLocked`方法来调用`Service`的其他方法，比如`onStartCommand`,这两个过程均是进程间通信。`app.thread`对象是`IApplicationThread`类型，它实际上是一个`Binder`,它的具体实现是`ApplicationThread`和`ApplicationThreadNative`。由于`ApplicationThread`继承了`ApplicationThreadNative`,因此只需要看`ApplicationThread`对`Service`启动过程的处理即可，这对应着它的`scheduleCreateService`方法，如下所示：\n``` java\n public final void scheduleCreateService(IBinder token,\n                ServiceInfo info, CompatibilityInfo compatInfo, int processState) {\n            updateProcessState(processState, false);\n            CreateServiceData s = new CreateServiceData();\n            s.token = token;\n            s.info = info;\n            s.compatInfo = compatInfo;\n\n            sendMessage(H.CREATE_SERVICE, s);\n        }\n```\n通过发送消息给`Handler H`来完成的。H会接收这个`CREATE_ SERVICE`消息并通过`ActivityThread`的`handleCreateService`方法来完成Service的最终启动，`handleCreateService`的源码如下所示：\n``` java\nprivate void handleCreateService(CreateServiceData data) {\n        // If we are getting ready to gc after going to the background, well\n        // we are back active so skip it.\n        unscheduleGcIdler();\n        LoadedApk packageInfo = getPackageInfoNoCheck(\n                data.info.applicationInfo, data.compatInfo);\n        Service service = null;\n\n            java.lang.ClassLoader cl = packageInfo.getClassLoader();\n            service = (Service) cl.loadClass(data.info.name).newInstance();\n\n            ContextImpl context = ContextImpl.createAppContext(this, packageInfo);\n            context.setOuterContext(service);\n\n            Application app = packageInfo.makeApplication(false, mInstrumentation);\n            service.attach(context, this, data.info.name, data.token, app,\n                    ActivityManagerNative.getDefault());\n            service.onCreate();\n            mServices.put(data.token, service);\n            ActivityManagerNative.getDefault().serviceDoneExecuting(\n                        data.token, SERVICE_DONE_EXECUTING_ANON, 0, 0);\n    }\n\n```\n`handleCreateService`主要完成了以下几件事：\n首先通过类加载器创建了Service实例，接着创建`ContextImpl`对象和`Application`对象  并通过service.attach方法建立联系，最后调用`service.onCreate`方法，并将`service`存储在`ActivityThread`中的一个列表`mServices`中\n``` java\n final ArrayMap<IBinder, Service> mServices = new ArrayMap<>();\n```\n由于`service`的`onCreate`方法执行了，也就意味着`Service`已经启动了。除此之外，`ActivityThead`中还会通过`handleServiceArgs`方法调用`Service`的`onStartCommand`方法。\n\n#### Service绑定过程\n和启动过程一样，也是从`ContextWrapper`开始的：\n``` java\n@Override\npublic boolean bindService(Intent service, ServiceConnection conn,\n        int flags) {\n    return mBase.bindService(service, conn, flags);\n}\n```\n然后是`ContextImpl`的`bindService`方法调用`bindServiceCommon`方法，然后远程调用AMS的`bindService`:\n``` java\nprivate boolean bindServiceCommon(Intent service, ServiceConnection conn, int flags, Handler handler, UserHandle user) {\n    // Keep this in sync with DevicePolicyManager.bindDeviceAdminServiceAsUser.\n    IServiceConnection sd;\n    if (conn == null) {\n        throw new IllegalArgumentException(\"connection is null\");\n    }\n    if (mPackageInfo != null) {\n        sd = mPackageInfo.getServiceDispatcher(conn, getOuterContext(), handler, flags);\n    } else {\n        throw new RuntimeException(\"Not supported in system context\");\n    }\n    validateServiceIntent(service);\n    try {\n        IBinder token = getActivityToken();\n        if (token == null && (flags&BIND_AUTO_CREATE) == 0 && mPackageInfo != null\n                && mPackageInfo.getApplicationInfo().targetSdkVersion\n                < android.os.Build.VERSION_CODES.ICE_CREAM_SANDWICH) {\n            flags |= BIND_WAIVE_PRIORITY;\n        }\n        service.prepareToLeaveProcess(this);\n        int res = ActivityManager.getService().bindService(\n            mMainThread.getApplicationThread(), getActivityToken(), service,\n            service.resolveTypeIfNeeded(getContentResolver()),\n            sd, flags, getOpPackageName(), user.getIdentifier());\n        if (res < 0) {\n            throw new SecurityException(\n                    \"Not allowed to bind to service \" + service);\n        }\n        return res != 0;\n    } catch (RemoteException e) {\n        throw e.rethrowFromSystemServer();\n    }\n}\n```\n在该方法中，首先将客户端的`ServiceConnection`转化为`ServiceDispatcher.InnerConnection`对象，因为服务绑定是跨进程的，所以`ServiceConnection`对象必须借助`Binder`对象才能让远程服务端调用自己的方法。`ServiceDispatcher`起着连接`ServiceConnection`和`InnerConnection`的作用。这个过程由`LoadedApk.getServiceDispatcher`方法完成：\n``` java\npublic final IServiceConnection getServiceDispatcher(ServiceConnection c,\n            Context context, Handler handler, int flags) {\n        synchronized (mServices) {\n            LoadedApk.ServiceDispatcher sd = null;\n            ArrayMap<ServiceConnection, LoadedApk.ServiceDispatcher> map = mServices.get(context);\n            if (map != null) {\n                if (DEBUG) Slog.d(TAG, \"Returning existing dispatcher \" + sd + \" for conn \" + c);\n                sd = map.get(c);\n            }\n            if (sd == null) {\n                sd = new ServiceDispatcher(c, context, handler, flags);\n                if (DEBUG) Slog.d(TAG, \"Creating new dispatcher \" + sd + \" for conn \" + c);\n                if (map == null) {\n                    map = new ArrayMap<>();\n                    mServices.put(context, map);\n                }\n                map.put(c, sd);\n            } else {\n                sd.validate(context, handler);\n            }\n            return sd.getIServiceConnection();\n        }\n    }\n```\n在上面的代码中，`mServices`是一个`ArrayMap`，它存储了一个应用当前活动的`ServiceConnection`和`ServiceDispatcher`的映射关系，其声明如下：\n``` java\nprivate final ArrayMap<Context, ArrayMap<ServiceConnection, LoadedApk.ServiceDispatcher>> mServices\n        = new ArrayMap<>();\n```\n系统首先会查找是否存在相同的`ServiceConnection`,如果不存在就重新创建一个`ServiceDispatcher`对象，并将其存储在`mServices`中，其中映射关系的key是`ServiceConnection`,value是`ServiceDispatcher`,在`ServiceDispatcher`的内部又保存了`ServiceConnection`和`InnerConnection`对象。当`Service`和客户端建立连接后，系统会通过`InnerConnection`来调用`ServiceConnection`中的`onServiceConnected`方法，这个过程有可能是跨进程的。当`ServiceDispatcher`创建好了以后，`getServiceDispatcher`会 返回其保存的`InnerConnection`对象。\n接着调用AMS的`bindService`  方法，该方法又调用了`bindServiceLocked`-->`bringUpServiceLocked`-->`realStartServiceLocked`，这个过程和上面的`StartService`过程逻辑类似，最终都是通过`ApplicationThread`来完成`Service`的实例创建并调用`onCreate`方法。和启动`Service`过程不同的是，绑定过程会调用`app.thread`的`scheduleBindService`方法，这个过程的实现在`ActivityService`的`requestServiceBindingsLocked`方法中：\n``` java\n private final void requestServiceBindingsLocked(ServiceRecord r, boolean execInFg)\n            throws TransactionTooLargeException {\n        for (int i=r.bindings.size()-1; i>=0; i--) {\n            IntentBindRecord ibr = r.bindings.valueAt(i);\n            if (!requestServiceBindingLocked(r, ibr, execInFg, false)) {\n                break;\n            }\n        }\n    }\n\n```\n该方法用到了`r.bindings`。它是一个`ArrayMap`，保存了客户端的`bind`消息：\n``` java\nfinal ArrayMap<Intent.FilterComparison, IntentBindRecord> bindings = new ArrayMap<Intent.FilterComparison, IntentBindRecord>();\n```\n具体保存方法在AMS一开始的方法`bindServiceLocked`中：\n``` java\nAppBindRecord b = s.retrieveAppBindingLocked(service, callerApp);\n```\n在`requestServiceBindingsLocked`方法中调用了了`requestServiceBindingLocked`方法:\n``` java\nprivate final boolean requestServiceBindingLocked(ServiceRecord r, IntentBindRecord i,\n            boolean execInFg, boolean rebind) throws TransactionTooLargeException {\n        if (r.app == null || r.app.thread == null) {\n            // If service is not currently running, can't yet bind.\n            return false;\n        }\n        if (DEBUG_SERVICE) Slog.d(TAG_SERVICE, \"requestBind \" + i + \": requested=\" + i.requested\n                + \" rebind=\" + rebind);\n        if ((!i.requested || rebind) && i.apps.size() > 0) {\n            try {\n                bumpServiceExecutingLocked(r, execInFg, \"bind\");\n                r.app.forceProcessStateUpTo(ActivityManager.PROCESS_STATE_SERVICE);\n                r.app.thread.scheduleBindService(r, i.intent.getIntent(), rebind,\n                        r.app.repProcState);\n                if (!rebind) {\n                    i.requested = true;\n                }\n                i.hasBound = true;\n                i.doRebind = false;\n            } catch (TransactionTooLargeException e) {\n                // Keep the executeNesting count accurate.\n                if (DEBUG_SERVICE) Slog.v(TAG_SERVICE, \"Crashed while binding \" + r, e);\n                final boolean inDestroying = mDestroyingServices.contains(r);\n                serviceDoneExecutingLocked(r, inDestroying, inDestroying);\n                throw e;\n            } catch (RemoteException e) {\n                if (DEBUG_SERVICE) Slog.v(TAG_SERVICE, \"Crashed while binding \" + r);\n                // Keep the executeNesting count accurate.\n                final boolean inDestroying = mDestroyingServices.contains(r);\n                serviceDoneExecutingLocked(r, inDestroying, inDestroying);\n                return false;\n            }\n        }\n        return true;\n    }\n```\n在上述代码中，`app.thread`这个对象多次出现过，它实际上就是`ApplicationThread`。`ApplicationThread`的一系列以`schedule`开头的方法，其内部都是通过`Handler H`来中转的，对于`scheduleBindService`方法来说也是如此，它的实现如下所示：\n``` java\npublic final void scheduleBindService(IBinder token, Intent intent,\n                boolean rebind, int processState) {\n            updateProcessState(processState, false);\n            BindServiceData s = new BindServiceData();\n            s.token = token;\n            s.intent = intent;\n            s.rebind = rebind;\n            sendMessage(H.BIND_SERVICE, s);\n        }\n```\n在H内部，接收到`BIND_SERVICE`这类消息时，会交给`ActivityThread`的`handleBindService`方法来处理。在`handleBindService`中，首先根据`Service`的`token`取出`Service`对象，然后调用`Service`的`onBind`方法，`Service`的`onBind`方法会返回一个`Binder`对象给客户端使用，原则上来说，`Service`的`onBind`方法被调用以后，`Service`就处于绑定状态了，但是`onBind`方法是`Service`的方法，这个时候客户端并不知道已经成功连接`Service`了，所以还必须调用客户端的`ServiceConnection`中的`onServiceConnected`,这个过程是由`ActivityManager.getService()`的`publishService`方法来完成的，而前面多次提到，`ActivityManager.getService()`就是AMS。`handleBindService`的实现过程如下所示。\n``` java\nprivate void handleBindService(BindServiceData data) {\n        Service s = mServices.get(data.token);\n        if (s != null) {\n            try {\n                data.intent.setExtrasClassLoader(s.getClassLoader());\n                data.intent.prepareToEnterProcess();\n                try {\n                    if (!data.rebind) {\n                        IBinder binder = s.onBind(data.intent);\n                        ActivityManager.getService().publishService(\n                                data.token, data.intent, binder);\n                    } else {\n                        s.onRebind(data.intent);\n                        ActivityManager.getService().serviceDoneExecuting(\n                                data.token, SERVICE_DONE_EXECUTING_ANON, 0, 0);\n                    }\n                    ensureJitEnabled();\n                } catch (RemoteException ex) {\n                    throw ex.rethrowFromSystemServer();\n                }\n            } catch (Exception e) {\n                if (!mInstrumentation.onException(s, e)) {\n                    throw new RuntimeException(\n                            \"Unable to bind to service \" + s\n                            + \" with \" + data.intent + \": \" + e.toString(), e);\n                }\n            }\n        }\n    }\n```\nService有一个特性，当多次绑定同一个Service时，Service的`onBind`方法**只会执行一次**，除非Service被终止了。当Service的onBind执行以后，系统还需要告知客户端已经成功连接Service了。根据上面的分析，这个过程由AMS的`publishService`方法来实现:\n``` java\npublic void publishService(IBinder token, Intent intent, IBinder service) {\n        // Refuse possible leaked file descriptors\n        if (intent != null && intent.hasFileDescriptors() == true) {\n            throw new IllegalArgumentException(\"File descriptors passed in Intent\");\n        }\n\n        synchronized(this) {\n            if (!(token instanceof ServiceRecord)) {\n                throw new IllegalArgumentException(\"Invalid service token\");\n            }\n            mServices.publishServiceLocked((ServiceRecord)token, intent, service);\n        }\n    }\n```\n从_上面代码可以看出，AMS的`publishService`方法将具体的工作交给了`ActiveServices`类型的`mServices`对象来处理。`ActiveServices`的`publishServiceLocked`方法看起来很复杂，但其实核心代码就只有一- 句话: `c.conn.connected(r.name,service)`， 其中c的类型是`ConnectionRecord`，`c.comn`的类型是`ServiceDispatcher.InnerConnection`, service就是Service的onBind方法返回的Binder对象。为了分析具体的逻辑，下面看一下`ServiceDispatcher.InnerConnection`的定义：\n``` java\nprivate static class InnerConnection extends IServiceConnection.Stub {\n            final WeakReference<LoadedApk.ServiceDispatcher> mDispatcher;\n\n            InnerConnection(LoadedApk.ServiceDispatcher sd) {\n                mDispatcher = new WeakReference<LoadedApk.ServiceDispatcher>(sd);\n            }\n\n            public void connected(ComponentName name, IBinder service, boolean dead)\n                    throws RemoteException {\n                LoadedApk.ServiceDispatcher sd = mDispatcher.get();\n                if (sd != null) {\n                    sd.connected(name, service, dead);\n                }\n            }\n        }\n```\n从`InnerConnection`的定义可以看出来，它的`connected`方法又调用了`ServiceDispatcher`的`connected`方法\n``` java\npublic void connected(ComponentName name, IBinder service, boolean dead) {\n            if (mActivityThread != null) {\n                mActivityThread.post(new RunConnection(name, service, 0, dead));\n            } else {\n                doConnected(name, service, dead);\n            }\n        }\n```\n对于Service的绑定过程来讲，`ServiceDispatcher`中的`mActivityThread`就是一个`handler`，它就是`ActivityThread`中的`H`，从`Service`的创建过程来讲，`mActivityTHread`不会为`null`，这样一来，`RunConnection`就可以经由`H`的`post`方法从而运行在主线程中，因此，客户端的`ServiceConnection`中的方法回调是在主线程中执行的。\n``` java\nprivate final class RunConnection implements Runnable {\n            RunConnection(ComponentName name, IBinder service, int command, boolean dead) {\n                mName = name;\n                mService = service;\n                mCommand = command;\n                mDead = dead;\n            }\n\n            public void run() {\n                if (mCommand == 0) {\n                    doConnected(mName, mService, mDead);\n                } else if (mCommand == 1) {\n                    doDeath(mName, mService);\n                }\n            }\n\n            final ComponentName mName;\n            final IBinder mService;\n            final int mCommand;\n            final boolean mDead;\n        }\n\n```\n很显然，`RunConnection`的`run`方法也是简单调用了`ServiceDispatcher`的`doConnected`方法，由于`ServiceDispatcher`内部保存了客户端的`ServiceConnection`对象，因此它可以很方便地调用`ServiceConnection`对象的`onServiceConnected`方法，如下所示。\n至此，bindService的过程完成。\n\n----\n以上","slug":"AndroidService","published":1,"updated":"2018-08-04T04:46:23.080Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjl3vbtq5000jisdgdmapqzz3","content":"<p>《Android开发艺术探索》9.3章<br><code>Service</code>分为两种工作状态,一种是启动状态，主要用于执行后台计算;另一种是绑定态,主要用于其他组件和<code>Service</code>的交互。需要注意的是，<code>Service</code>的这两种状态是可以共存的，即<code>Service</code>既可以处于启动状态也可以同时处于绑定状态。<br>通过<code>Context</code>的<code>startService</code>方法即可启动一个<code>Service</code>:<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">Intent intent = <span class=\"keyword\">new</span> Intent(content,Service.class);</div><div class=\"line\">startService(intent);</div></pre></td></tr></table></figure></p>\n<p>通过<code>Context</code>的<code>bindService</code>方法可以绑定一个<code>Service</code>：<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">Intent intent = <span class=\"keyword\">new</span> Intent(content,Service.class);</div><div class=\"line\">bindService(intent,connection,BIND_AUTO_CREATE);</div></pre></td></tr></table></figure></p>\n<a id=\"more\"></a>\n<h4 id=\"Service启动过程\"><a href=\"#Service启动过程\" class=\"headerlink\" title=\"Service启动过程\"></a>Service启动过程</h4><p><code>Service</code>的启动时从<code>ContextWrapper</code>的<code>startService</code>开始的：<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">@Override</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> ComponentName <span class=\"title\">startService</span><span class=\"params\">(Intent service)</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> mBase.startService(service);</div><div class=\"line\">    &#125;</div></pre></td></tr></table></figure></p>\n<p><code>mBase</code>是<code>Context</code>的实现类<code>ContextImpl</code>，<code>在Activity</code>启动的时候会通过<code>attach</code>方法关联一个<code>ContextImpl</code>，这个<code>ContextImpl</code>就是上面的<code>mBase</code>，从<code>ContextWrapper</code>的实现来看，大部分的实现都是通过<code>mBase</code>来实现的，这是一种典型的桥接模式。在<code>ContextImpl</code>的<code>startService</code>方法中又调用了<code>startServiceCommon</code>。<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div></pre></td><td class=\"code\"><pre><div class=\"line\"> <span class=\"meta\">@Override</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> ComponentName <span class=\"title\">startService</span><span class=\"params\">(Intent service)</span> </span>&#123;</div><div class=\"line\">        warnIfCallingFromSystemProcess();</div><div class=\"line\">        <span class=\"keyword\">return</span> startServiceCommon(service, <span class=\"keyword\">false</span>, mUser);</div><div class=\"line\">    &#125;</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> ComponentName <span class=\"title\">startServiceCommon</span><span class=\"params\">(Intent service, <span class=\"keyword\">boolean</span> requireForeground,UserHandle user)</span> </span>&#123;</div><div class=\"line\"></div><div class=\"line\">    validateServiceIntent(service);</div><div class=\"line\">    service.prepareToLeaveProcess(<span class=\"keyword\">this</span>);</div><div class=\"line\">    <span class=\"comment\">//api 27</span></div><div class=\"line\">    ComponentName cn = ActivityManager.getService().startService(</div><div class=\"line\">        mMainThread.getApplicationThread(), service, service.resolveTypeIfNeeded(</div><div class=\"line\">                    getContentResolver()), requireForeground,</div><div class=\"line\">                    getOpPackageName(), user.getIdentifier());</div><div class=\"line\">    <span class=\"comment\">//api 25</span></div><div class=\"line\">    <span class=\"comment\">//ComponentName cn = ActivityManagerNative.getDefault().startService(</span></div><div class=\"line\">     <span class=\"comment\">//   mMainThread.getApplicationThread(), service, service.resolveTypeIfNeeded(</span></div><div class=\"line\">      <span class=\"comment\">//  getContentResolver()), getOpPackageName(), user.getIdentifier());</span></div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">return</span> cn;</div><div class=\"line\"></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>在<code>startServiceCommon</code>中通过<code>getService</code>这个对象来启动一个服务，这个对象就是AMS，需要注意的是，在上述代码中通过AMS来启动服务的过程是一个跨进程调用。AMS的<code>startService</code>如下：<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">@Override</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> ComponentName <span class=\"title\">startService</span><span class=\"params\">(IApplicationThread caller, Intent service,</span></span></div><div class=\"line\">            String resolvedType, String callingPackage, <span class=\"keyword\">int</span> userId)</div><div class=\"line\">            <span class=\"keyword\">throws</span> TransactionTooLargeException &#123;</div><div class=\"line\">        <span class=\"keyword\">synchronized</span>(<span class=\"keyword\">this</span>) &#123;</div><div class=\"line\">            <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> callingPid = Binder.getCallingPid();</div><div class=\"line\">            <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> callingUid = Binder.getCallingUid();</div><div class=\"line\">            <span class=\"keyword\">final</span> <span class=\"keyword\">long</span> origId = Binder.clearCallingIdentity();</div><div class=\"line\">            ComponentName res = mServices.startServiceLocked(caller, service,</div><div class=\"line\">                    resolvedType, callingPid, callingUid, callingPackage, userId);</div><div class=\"line\">            Binder.restoreCallingIdentity(origId);</div><div class=\"line\">            <span class=\"keyword\">return</span> res;</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div></pre></td></tr></table></figure></p>\n<p>AMS会通过<code>mServices</code>来完成<code>service</code>的启动过程，<code>mServices</code>的对象类型是<code>ActiveServices</code>，<code>ActiveServices</code>是一个辅助AMS进行<code>Service</code>管理的类，包括<code>Service</code>的启动、绑定和停止。在<code>startService</code>方法的尾部会调用<code>startServiceInnerLocked</code>方法<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\">ComponentName <span class=\"title\">startServiceInnerLocked</span><span class=\"params\">(ServiceMap smap, Intent service, ServiceRecord r,</span></span></div><div class=\"line\">            <span class=\"keyword\">boolean</span> callerFg, <span class=\"keyword\">boolean</span> addToStarting) <span class=\"keyword\">throws</span> TransactionTooLargeException &#123;</div><div class=\"line\">        ServiceState stracker = r.getTracker();</div><div class=\"line\">        <span class=\"keyword\">if</span> (stracker != <span class=\"keyword\">null</span>) &#123;</div><div class=\"line\">            stracker.setStarted(<span class=\"keyword\">true</span>, mAm.mProcessStats.getMemFactorLocked(), r.lastActivity);</div><div class=\"line\">        &#125;</div><div class=\"line\">        r.callStart = <span class=\"keyword\">false</span>;</div><div class=\"line\">        <span class=\"keyword\">synchronized</span> (r.stats.getBatteryStats()) &#123;</div><div class=\"line\">            r.stats.startRunningLocked();</div><div class=\"line\">        &#125;</div><div class=\"line\">        String error = bringUpServiceLocked(r, service.getFlags(), callerFg, <span class=\"keyword\">false</span>, <span class=\"keyword\">false</span>);</div><div class=\"line\">        <span class=\"keyword\">return</span> r.name;</div><div class=\"line\">    &#125;</div></pre></td></tr></table></figure></p>\n<p>上述代码中<code>ServiceRecord</code>是描述一个Service记录，<code>ServiceRecord</code>一直贯穿整个Service流程，<code>startServiceInnerLocked</code>并没有完成启动Service的完整流程，而是将后续的过程交给了<code>bringUpServiceLocked</code>，在该方法中又调用了<code>realStartServiceLocked</code>方法:<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div><div class=\"line\">71</div><div class=\"line\">72</div><div class=\"line\">73</div><div class=\"line\">74</div><div class=\"line\">75</div><div class=\"line\">76</div><div class=\"line\">77</div><div class=\"line\">78</div><div class=\"line\">79</div><div class=\"line\">80</div><div class=\"line\">81</div><div class=\"line\">82</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">final</span> <span class=\"keyword\">void</span> <span class=\"title\">realStartServiceLocked</span><span class=\"params\">(ServiceRecord r,</span></span></div><div class=\"line\">            ProcessRecord app, <span class=\"keyword\">boolean</span> execInFg) <span class=\"keyword\">throws</span> RemoteException &#123;</div><div class=\"line\">       </div><div class=\"line\">        r.app = app;</div><div class=\"line\">        r.restartTime = r.lastActivity = SystemClock.uptimeMillis();</div><div class=\"line\"></div><div class=\"line\">        <span class=\"keyword\">final</span> <span class=\"keyword\">boolean</span> newService = app.services.add(r);</div><div class=\"line\">        bumpServiceExecutingLocked(r, execInFg, <span class=\"string\">\"create\"</span>);</div><div class=\"line\">        mAm.updateLruProcessLocked(app, <span class=\"keyword\">false</span>, <span class=\"keyword\">null</span>);</div><div class=\"line\">        mAm.updateOomAdjLocked();</div><div class=\"line\"></div><div class=\"line\">        <span class=\"keyword\">boolean</span> created = <span class=\"keyword\">false</span>;</div><div class=\"line\">        <span class=\"keyword\">try</span> &#123;</div><div class=\"line\">            </div><div class=\"line\">            <span class=\"keyword\">synchronized</span> (r.stats.getBatteryStats()) &#123;</div><div class=\"line\">                r.stats.startLaunchedLocked();</div><div class=\"line\">            &#125;</div><div class=\"line\">            mAm.notifyPackageUse(r.serviceInfo.packageName,</div><div class=\"line\">                                 PackageManager.NOTIFY_PACKAGE_USE_SERVICE);</div><div class=\"line\">            app.forceProcessStateUpTo(ActivityManager.PROCESS_STATE_SERVICE);</div><div class=\"line\">            app.thread.scheduleCreateService(r, r.serviceInfo,</div><div class=\"line\">                    mAm.compatibilityInfoForPackageLocked(r.serviceInfo.applicationInfo),</div><div class=\"line\">                    app.repProcState);</div><div class=\"line\">            r.postNotification();</div><div class=\"line\">            created = <span class=\"keyword\">true</span>;</div><div class=\"line\">        &#125; <span class=\"keyword\">catch</span> (DeadObjectException e) &#123;</div><div class=\"line\">            Slog.w(TAG, <span class=\"string\">\"Application dead when creating service \"</span> + r);</div><div class=\"line\">            mAm.appDiedLocked(app);</div><div class=\"line\">            <span class=\"keyword\">throw</span> e;</div><div class=\"line\">        &#125; <span class=\"keyword\">finally</span> &#123;</div><div class=\"line\">            <span class=\"keyword\">if</span> (!created) &#123;</div><div class=\"line\">                <span class=\"comment\">// Keep the executeNesting count accurate.</span></div><div class=\"line\">                <span class=\"keyword\">final</span> <span class=\"keyword\">boolean</span> inDestroying = mDestroyingServices.contains(r);</div><div class=\"line\">                serviceDoneExecutingLocked(r, inDestroying, inDestroying);</div><div class=\"line\"></div><div class=\"line\">                <span class=\"comment\">// Cleanup.</span></div><div class=\"line\">                <span class=\"keyword\">if</span> (newService) &#123;</div><div class=\"line\">                    app.services.remove(r);</div><div class=\"line\">                    r.app = <span class=\"keyword\">null</span>;</div><div class=\"line\">                &#125;</div><div class=\"line\"></div><div class=\"line\">                <span class=\"comment\">// Retry.</span></div><div class=\"line\">                <span class=\"keyword\">if</span> (!inDestroying) &#123;</div><div class=\"line\">                    scheduleServiceRestartLocked(r, <span class=\"keyword\">false</span>);</div><div class=\"line\">                &#125;</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\">        <span class=\"keyword\">if</span> (r.whitelistManager) &#123;</div><div class=\"line\">            app.whitelistManager = <span class=\"keyword\">true</span>;</div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\">        requestServiceBindingsLocked(r, execInFg);</div><div class=\"line\"></div><div class=\"line\">        updateServiceClientActivitiesLocked(app, <span class=\"keyword\">null</span>, <span class=\"keyword\">true</span>);</div><div class=\"line\"></div><div class=\"line\">        <span class=\"comment\">// If the service is in the started state, and there are no</span></div><div class=\"line\">        <span class=\"comment\">// pending arguments, then fake up one so its onStartCommand() will</span></div><div class=\"line\">        <span class=\"comment\">// be called.</span></div><div class=\"line\">        <span class=\"keyword\">if</span> (r.startRequested &amp;&amp; r.callStart &amp;&amp; r.pendingStarts.size() == <span class=\"number\">0</span>) &#123;</div><div class=\"line\">            r.pendingStarts.add(<span class=\"keyword\">new</span> ServiceRecord.StartItem(r, <span class=\"keyword\">false</span>, r.makeNextStartId(),</div><div class=\"line\">                    <span class=\"keyword\">null</span>, <span class=\"keyword\">null</span>));</div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\">        sendServiceArgsLocked(r, execInFg, <span class=\"keyword\">true</span>);</div><div class=\"line\"></div><div class=\"line\">        <span class=\"keyword\">if</span> (r.delayed) &#123;</div><div class=\"line\">            <span class=\"keyword\">if</span> (DEBUG_DELAYED_STARTS) Slog.v(TAG_SERVICE, <span class=\"string\">\"REM FR DELAY LIST (new proc): \"</span> + r);</div><div class=\"line\">            getServiceMap(r.userId).mDelayedStartList.remove(r);</div><div class=\"line\">            r.delayed = <span class=\"keyword\">false</span>;</div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\">        <span class=\"keyword\">if</span> (r.delayedStop) &#123;</div><div class=\"line\">            <span class=\"comment\">// Oh and hey we've already been asked to stop!</span></div><div class=\"line\">            r.delayedStop = <span class=\"keyword\">false</span>;</div><div class=\"line\">            <span class=\"keyword\">if</span> (r.startRequested) &#123;</div><div class=\"line\">                <span class=\"keyword\">if</span> (DEBUG_DELAYED_STARTS) Slog.v(TAG_SERVICE,</div><div class=\"line\">                        <span class=\"string\">\"Applying delayed stop (from start): \"</span> + r);</div><div class=\"line\">                stopServiceLocked(r);</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div></pre></td></tr></table></figure></p>\n<p>在<code>realStartServiceLocked</code>方法中，首先通过<code>app.thread</code>的<code>scheduleCreateService</code>方法来创建<code>Service</code>对象并调用其<code>onCreate</code>,接着再通过<code>sendServiceArgsLocked</code>方法来调用<code>Service</code>的其他方法，比如<code>onStartCommand</code>,这两个过程均是进程间通信。<code>app.thread</code>对象是<code>IApplicationThread</code>类型，它实际上是一个<code>Binder</code>,它的具体实现是<code>ApplicationThread</code>和<code>ApplicationThreadNative</code>。由于<code>ApplicationThread</code>继承了<code>ApplicationThreadNative</code>,因此只需要看<code>ApplicationThread</code>对<code>Service</code>启动过程的处理即可，这对应着它的<code>scheduleCreateService</code>方法，如下所示：<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">final</span> <span class=\"keyword\">void</span> <span class=\"title\">scheduleCreateService</span><span class=\"params\">(IBinder token,</span></span></div><div class=\"line\">               ServiceInfo info, CompatibilityInfo compatInfo, <span class=\"keyword\">int</span> processState) &#123;</div><div class=\"line\">           updateProcessState(processState, <span class=\"keyword\">false</span>);</div><div class=\"line\">           CreateServiceData s = <span class=\"keyword\">new</span> CreateServiceData();</div><div class=\"line\">           s.token = token;</div><div class=\"line\">           s.info = info;</div><div class=\"line\">           s.compatInfo = compatInfo;</div><div class=\"line\"></div><div class=\"line\">           sendMessage(H.CREATE_SERVICE, s);</div><div class=\"line\">       &#125;</div></pre></td></tr></table></figure></p>\n<p>通过发送消息给<code>Handler H</code>来完成的。H会接收这个<code>CREATE_ SERVICE</code>消息并通过<code>ActivityThread</code>的<code>handleCreateService</code>方法来完成Service的最终启动，<code>handleCreateService</code>的源码如下所示：<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">handleCreateService</span><span class=\"params\">(CreateServiceData data)</span> </span>&#123;</div><div class=\"line\">        <span class=\"comment\">// If we are getting ready to gc after going to the background, well</span></div><div class=\"line\">        <span class=\"comment\">// we are back active so skip it.</span></div><div class=\"line\">        unscheduleGcIdler();</div><div class=\"line\">        LoadedApk packageInfo = getPackageInfoNoCheck(</div><div class=\"line\">                data.info.applicationInfo, data.compatInfo);</div><div class=\"line\">        Service service = <span class=\"keyword\">null</span>;</div><div class=\"line\"></div><div class=\"line\">            java.lang.ClassLoader cl = packageInfo.getClassLoader();</div><div class=\"line\">            service = (Service) cl.loadClass(data.info.name).newInstance();</div><div class=\"line\"></div><div class=\"line\">            ContextImpl context = ContextImpl.createAppContext(<span class=\"keyword\">this</span>, packageInfo);</div><div class=\"line\">            context.setOuterContext(service);</div><div class=\"line\"></div><div class=\"line\">            Application app = packageInfo.makeApplication(<span class=\"keyword\">false</span>, mInstrumentation);</div><div class=\"line\">            service.attach(context, <span class=\"keyword\">this</span>, data.info.name, data.token, app,</div><div class=\"line\">                    ActivityManagerNative.getDefault());</div><div class=\"line\">            service.onCreate();</div><div class=\"line\">            mServices.put(data.token, service);</div><div class=\"line\">            ActivityManagerNative.getDefault().serviceDoneExecuting(</div><div class=\"line\">                        data.token, SERVICE_DONE_EXECUTING_ANON, <span class=\"number\">0</span>, <span class=\"number\">0</span>);</div><div class=\"line\">    &#125;</div></pre></td></tr></table></figure></p>\n<p><code>handleCreateService</code>主要完成了以下几件事：<br>首先通过类加载器创建了Service实例，接着创建<code>ContextImpl</code>对象和<code>Application</code>对象  并通过service.attach方法建立联系，最后调用<code>service.onCreate</code>方法，并将<code>service</code>存储在<code>ActivityThread</code>中的一个列表<code>mServices</code>中<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">final</span> ArrayMap&lt;IBinder, Service&gt; mServices = <span class=\"keyword\">new</span> ArrayMap&lt;&gt;();</div></pre></td></tr></table></figure></p>\n<p>由于<code>service</code>的<code>onCreate</code>方法执行了，也就意味着<code>Service</code>已经启动了。除此之外，<code>ActivityThead</code>中还会通过<code>handleServiceArgs</code>方法调用<code>Service</code>的<code>onStartCommand</code>方法。</p>\n<h4 id=\"Service绑定过程\"><a href=\"#Service绑定过程\" class=\"headerlink\" title=\"Service绑定过程\"></a>Service绑定过程</h4><p>和启动过程一样，也是从<code>ContextWrapper</code>开始的：<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">@Override</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">bindService</span><span class=\"params\">(Intent service, ServiceConnection conn,</span></span></div><div class=\"line\">        <span class=\"keyword\">int</span> flags) &#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> mBase.bindService(service, conn, flags);</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>然后是<code>ContextImpl</code>的<code>bindService</code>方法调用<code>bindServiceCommon</code>方法，然后远程调用AMS的<code>bindService</code>:<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">boolean</span> <span class=\"title\">bindServiceCommon</span><span class=\"params\">(Intent service, ServiceConnection conn, <span class=\"keyword\">int</span> flags, Handler handler, UserHandle user)</span> </span>&#123;</div><div class=\"line\">    <span class=\"comment\">// Keep this in sync with DevicePolicyManager.bindDeviceAdminServiceAsUser.</span></div><div class=\"line\">    IServiceConnection sd;</div><div class=\"line\">    <span class=\"keyword\">if</span> (conn == <span class=\"keyword\">null</span>) &#123;</div><div class=\"line\">        <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> IllegalArgumentException(<span class=\"string\">\"connection is null\"</span>);</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">if</span> (mPackageInfo != <span class=\"keyword\">null</span>) &#123;</div><div class=\"line\">        sd = mPackageInfo.getServiceDispatcher(conn, getOuterContext(), handler, flags);</div><div class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">        <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> RuntimeException(<span class=\"string\">\"Not supported in system context\"</span>);</div><div class=\"line\">    &#125;</div><div class=\"line\">    validateServiceIntent(service);</div><div class=\"line\">    <span class=\"keyword\">try</span> &#123;</div><div class=\"line\">        IBinder token = getActivityToken();</div><div class=\"line\">        <span class=\"keyword\">if</span> (token == <span class=\"keyword\">null</span> &amp;&amp; (flags&amp;BIND_AUTO_CREATE) == <span class=\"number\">0</span> &amp;&amp; mPackageInfo != <span class=\"keyword\">null</span></div><div class=\"line\">                &amp;&amp; mPackageInfo.getApplicationInfo().targetSdkVersion</div><div class=\"line\">                &lt; android.os.Build.VERSION_CODES.ICE_CREAM_SANDWICH) &#123;</div><div class=\"line\">            flags |= BIND_WAIVE_PRIORITY;</div><div class=\"line\">        &#125;</div><div class=\"line\">        service.prepareToLeaveProcess(<span class=\"keyword\">this</span>);</div><div class=\"line\">        <span class=\"keyword\">int</span> res = ActivityManager.getService().bindService(</div><div class=\"line\">            mMainThread.getApplicationThread(), getActivityToken(), service,</div><div class=\"line\">            service.resolveTypeIfNeeded(getContentResolver()),</div><div class=\"line\">            sd, flags, getOpPackageName(), user.getIdentifier());</div><div class=\"line\">        <span class=\"keyword\">if</span> (res &lt; <span class=\"number\">0</span>) &#123;</div><div class=\"line\">            <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> SecurityException(</div><div class=\"line\">                    <span class=\"string\">\"Not allowed to bind to service \"</span> + service);</div><div class=\"line\">        &#125;</div><div class=\"line\">        <span class=\"keyword\">return</span> res != <span class=\"number\">0</span>;</div><div class=\"line\">    &#125; <span class=\"keyword\">catch</span> (RemoteException e) &#123;</div><div class=\"line\">        <span class=\"keyword\">throw</span> e.rethrowFromSystemServer();</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>在该方法中，首先将客户端的<code>ServiceConnection</code>转化为<code>ServiceDispatcher.InnerConnection</code>对象，因为服务绑定是跨进程的，所以<code>ServiceConnection</code>对象必须借助<code>Binder</code>对象才能让远程服务端调用自己的方法。<code>ServiceDispatcher</code>起着连接<code>ServiceConnection</code>和<code>InnerConnection</code>的作用。这个过程由<code>LoadedApk.getServiceDispatcher</code>方法完成：<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">final</span> IServiceConnection <span class=\"title\">getServiceDispatcher</span><span class=\"params\">(ServiceConnection c,</span></span></div><div class=\"line\">            Context context, Handler handler, <span class=\"keyword\">int</span> flags) &#123;</div><div class=\"line\">        <span class=\"keyword\">synchronized</span> (mServices) &#123;</div><div class=\"line\">            LoadedApk.ServiceDispatcher sd = <span class=\"keyword\">null</span>;</div><div class=\"line\">            ArrayMap&lt;ServiceConnection, LoadedApk.ServiceDispatcher&gt; map = mServices.get(context);</div><div class=\"line\">            <span class=\"keyword\">if</span> (map != <span class=\"keyword\">null</span>) &#123;</div><div class=\"line\">                <span class=\"keyword\">if</span> (DEBUG) Slog.d(TAG, <span class=\"string\">\"Returning existing dispatcher \"</span> + sd + <span class=\"string\">\" for conn \"</span> + c);</div><div class=\"line\">                sd = map.get(c);</div><div class=\"line\">            &#125;</div><div class=\"line\">            <span class=\"keyword\">if</span> (sd == <span class=\"keyword\">null</span>) &#123;</div><div class=\"line\">                sd = <span class=\"keyword\">new</span> ServiceDispatcher(c, context, handler, flags);</div><div class=\"line\">                <span class=\"keyword\">if</span> (DEBUG) Slog.d(TAG, <span class=\"string\">\"Creating new dispatcher \"</span> + sd + <span class=\"string\">\" for conn \"</span> + c);</div><div class=\"line\">                <span class=\"keyword\">if</span> (map == <span class=\"keyword\">null</span>) &#123;</div><div class=\"line\">                    map = <span class=\"keyword\">new</span> ArrayMap&lt;&gt;();</div><div class=\"line\">                    mServices.put(context, map);</div><div class=\"line\">                &#125;</div><div class=\"line\">                map.put(c, sd);</div><div class=\"line\">            &#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">                sd.validate(context, handler);</div><div class=\"line\">            &#125;</div><div class=\"line\">            <span class=\"keyword\">return</span> sd.getIServiceConnection();</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div></pre></td></tr></table></figure></p>\n<p>在上面的代码中，<code>mServices</code>是一个<code>ArrayMap</code>，它存储了一个应用当前活动的<code>ServiceConnection</code>和<code>ServiceDispatcher</code>的映射关系，其声明如下：<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">private</span> <span class=\"keyword\">final</span> ArrayMap&lt;Context, ArrayMap&lt;ServiceConnection, LoadedApk.ServiceDispatcher&gt;&gt; mServices</div><div class=\"line\">        = <span class=\"keyword\">new</span> ArrayMap&lt;&gt;();</div></pre></td></tr></table></figure></p>\n<p>系统首先会查找是否存在相同的<code>ServiceConnection</code>,如果不存在就重新创建一个<code>ServiceDispatcher</code>对象，并将其存储在<code>mServices</code>中，其中映射关系的key是<code>ServiceConnection</code>,value是<code>ServiceDispatcher</code>,在<code>ServiceDispatcher</code>的内部又保存了<code>ServiceConnection</code>和<code>InnerConnection</code>对象。当<code>Service</code>和客户端建立连接后，系统会通过<code>InnerConnection</code>来调用<code>ServiceConnection</code>中的<code>onServiceConnected</code>方法，这个过程有可能是跨进程的。当<code>ServiceDispatcher</code>创建好了以后，<code>getServiceDispatcher</code>会 返回其保存的<code>InnerConnection</code>对象。<br>接着调用AMS的<code>bindService</code>  方法，该方法又调用了<code>bindServiceLocked</code>–&gt;<code>bringUpServiceLocked</code>–&gt;<code>realStartServiceLocked</code>，这个过程和上面的<code>StartService</code>过程逻辑类似，最终都是通过<code>ApplicationThread</code>来完成<code>Service</code>的实例创建并调用<code>onCreate</code>方法。和启动<code>Service</code>过程不同的是，绑定过程会调用<code>app.thread</code>的<code>scheduleBindService</code>方法，这个过程的实现在<code>ActivityService</code>的<code>requestServiceBindingsLocked</code>方法中：<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">final</span> <span class=\"keyword\">void</span> <span class=\"title\">requestServiceBindingsLocked</span><span class=\"params\">(ServiceRecord r, <span class=\"keyword\">boolean</span> execInFg)</span></span></div><div class=\"line\">           <span class=\"keyword\">throws</span> TransactionTooLargeException &#123;</div><div class=\"line\">       <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i=r.bindings.size()-<span class=\"number\">1</span>; i&gt;=<span class=\"number\">0</span>; i--) &#123;</div><div class=\"line\">           IntentBindRecord ibr = r.bindings.valueAt(i);</div><div class=\"line\">           <span class=\"keyword\">if</span> (!requestServiceBindingLocked(r, ibr, execInFg, <span class=\"keyword\">false</span>)) &#123;</div><div class=\"line\">               <span class=\"keyword\">break</span>;</div><div class=\"line\">           &#125;</div><div class=\"line\">       &#125;</div><div class=\"line\">   &#125;</div></pre></td></tr></table></figure></p>\n<p>该方法用到了<code>r.bindings</code>。它是一个<code>ArrayMap</code>，保存了客户端的<code>bind</code>消息：<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">final</span> ArrayMap&lt;Intent.FilterComparison, IntentBindRecord&gt; bindings = <span class=\"keyword\">new</span> ArrayMap&lt;Intent.FilterComparison, IntentBindRecord&gt;();</div></pre></td></tr></table></figure></p>\n<p>具体保存方法在AMS一开始的方法<code>bindServiceLocked</code>中：<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">AppBindRecord b = s.retrieveAppBindingLocked(service, callerApp);</div></pre></td></tr></table></figure></p>\n<p>在<code>requestServiceBindingsLocked</code>方法中调用了了<code>requestServiceBindingLocked</code>方法:<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">final</span> <span class=\"keyword\">boolean</span> <span class=\"title\">requestServiceBindingLocked</span><span class=\"params\">(ServiceRecord r, IntentBindRecord i,</span></span></div><div class=\"line\">            <span class=\"keyword\">boolean</span> execInFg, <span class=\"keyword\">boolean</span> rebind) <span class=\"keyword\">throws</span> TransactionTooLargeException &#123;</div><div class=\"line\">        <span class=\"keyword\">if</span> (r.app == <span class=\"keyword\">null</span> || r.app.thread == <span class=\"keyword\">null</span>) &#123;</div><div class=\"line\">            <span class=\"comment\">// If service is not currently running, can't yet bind.</span></div><div class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">false</span>;</div><div class=\"line\">        &#125;</div><div class=\"line\">        <span class=\"keyword\">if</span> (DEBUG_SERVICE) Slog.d(TAG_SERVICE, <span class=\"string\">\"requestBind \"</span> + i + <span class=\"string\">\": requested=\"</span> + i.requested</div><div class=\"line\">                + <span class=\"string\">\" rebind=\"</span> + rebind);</div><div class=\"line\">        <span class=\"keyword\">if</span> ((!i.requested || rebind) &amp;&amp; i.apps.size() &gt; <span class=\"number\">0</span>) &#123;</div><div class=\"line\">            <span class=\"keyword\">try</span> &#123;</div><div class=\"line\">                bumpServiceExecutingLocked(r, execInFg, <span class=\"string\">\"bind\"</span>);</div><div class=\"line\">                r.app.forceProcessStateUpTo(ActivityManager.PROCESS_STATE_SERVICE);</div><div class=\"line\">                r.app.thread.scheduleBindService(r, i.intent.getIntent(), rebind,</div><div class=\"line\">                        r.app.repProcState);</div><div class=\"line\">                <span class=\"keyword\">if</span> (!rebind) &#123;</div><div class=\"line\">                    i.requested = <span class=\"keyword\">true</span>;</div><div class=\"line\">                &#125;</div><div class=\"line\">                i.hasBound = <span class=\"keyword\">true</span>;</div><div class=\"line\">                i.doRebind = <span class=\"keyword\">false</span>;</div><div class=\"line\">            &#125; <span class=\"keyword\">catch</span> (TransactionTooLargeException e) &#123;</div><div class=\"line\">                <span class=\"comment\">// Keep the executeNesting count accurate.</span></div><div class=\"line\">                <span class=\"keyword\">if</span> (DEBUG_SERVICE) Slog.v(TAG_SERVICE, <span class=\"string\">\"Crashed while binding \"</span> + r, e);</div><div class=\"line\">                <span class=\"keyword\">final</span> <span class=\"keyword\">boolean</span> inDestroying = mDestroyingServices.contains(r);</div><div class=\"line\">                serviceDoneExecutingLocked(r, inDestroying, inDestroying);</div><div class=\"line\">                <span class=\"keyword\">throw</span> e;</div><div class=\"line\">            &#125; <span class=\"keyword\">catch</span> (RemoteException e) &#123;</div><div class=\"line\">                <span class=\"keyword\">if</span> (DEBUG_SERVICE) Slog.v(TAG_SERVICE, <span class=\"string\">\"Crashed while binding \"</span> + r);</div><div class=\"line\">                <span class=\"comment\">// Keep the executeNesting count accurate.</span></div><div class=\"line\">                <span class=\"keyword\">final</span> <span class=\"keyword\">boolean</span> inDestroying = mDestroyingServices.contains(r);</div><div class=\"line\">                serviceDoneExecutingLocked(r, inDestroying, inDestroying);</div><div class=\"line\">                <span class=\"keyword\">return</span> <span class=\"keyword\">false</span>;</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;</div><div class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">true</span>;</div><div class=\"line\">    &#125;</div></pre></td></tr></table></figure></p>\n<p>在上述代码中，<code>app.thread</code>这个对象多次出现过，它实际上就是<code>ApplicationThread</code>。<code>ApplicationThread</code>的一系列以<code>schedule</code>开头的方法，其内部都是通过<code>Handler H</code>来中转的，对于<code>scheduleBindService</code>方法来说也是如此，它的实现如下所示：<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">final</span> <span class=\"keyword\">void</span> <span class=\"title\">scheduleBindService</span><span class=\"params\">(IBinder token, Intent intent,</span></span></div><div class=\"line\">                <span class=\"keyword\">boolean</span> rebind, <span class=\"keyword\">int</span> processState) &#123;</div><div class=\"line\">            updateProcessState(processState, <span class=\"keyword\">false</span>);</div><div class=\"line\">            BindServiceData s = <span class=\"keyword\">new</span> BindServiceData();</div><div class=\"line\">            s.token = token;</div><div class=\"line\">            s.intent = intent;</div><div class=\"line\">            s.rebind = rebind;</div><div class=\"line\">            sendMessage(H.BIND_SERVICE, s);</div><div class=\"line\">        &#125;</div></pre></td></tr></table></figure></p>\n<p>在H内部，接收到<code>BIND_SERVICE</code>这类消息时，会交给<code>ActivityThread</code>的<code>handleBindService</code>方法来处理。在<code>handleBindService</code>中，首先根据<code>Service</code>的<code>token</code>取出<code>Service</code>对象，然后调用<code>Service</code>的<code>onBind</code>方法，<code>Service</code>的<code>onBind</code>方法会返回一个<code>Binder</code>对象给客户端使用，原则上来说，<code>Service</code>的<code>onBind</code>方法被调用以后，<code>Service</code>就处于绑定状态了，但是<code>onBind</code>方法是<code>Service</code>的方法，这个时候客户端并不知道已经成功连接<code>Service</code>了，所以还必须调用客户端的<code>ServiceConnection</code>中的<code>onServiceConnected</code>,这个过程是由<code>ActivityManager.getService()</code>的<code>publishService</code>方法来完成的，而前面多次提到，<code>ActivityManager.getService()</code>就是AMS。<code>handleBindService</code>的实现过程如下所示。<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">handleBindService</span><span class=\"params\">(BindServiceData data)</span> </span>&#123;</div><div class=\"line\">        Service s = mServices.get(data.token);</div><div class=\"line\">        <span class=\"keyword\">if</span> (s != <span class=\"keyword\">null</span>) &#123;</div><div class=\"line\">            <span class=\"keyword\">try</span> &#123;</div><div class=\"line\">                data.intent.setExtrasClassLoader(s.getClassLoader());</div><div class=\"line\">                data.intent.prepareToEnterProcess();</div><div class=\"line\">                <span class=\"keyword\">try</span> &#123;</div><div class=\"line\">                    <span class=\"keyword\">if</span> (!data.rebind) &#123;</div><div class=\"line\">                        IBinder binder = s.onBind(data.intent);</div><div class=\"line\">                        ActivityManager.getService().publishService(</div><div class=\"line\">                                data.token, data.intent, binder);</div><div class=\"line\">                    &#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">                        s.onRebind(data.intent);</div><div class=\"line\">                        ActivityManager.getService().serviceDoneExecuting(</div><div class=\"line\">                                data.token, SERVICE_DONE_EXECUTING_ANON, <span class=\"number\">0</span>, <span class=\"number\">0</span>);</div><div class=\"line\">                    &#125;</div><div class=\"line\">                    ensureJitEnabled();</div><div class=\"line\">                &#125; <span class=\"keyword\">catch</span> (RemoteException ex) &#123;</div><div class=\"line\">                    <span class=\"keyword\">throw</span> ex.rethrowFromSystemServer();</div><div class=\"line\">                &#125;</div><div class=\"line\">            &#125; <span class=\"keyword\">catch</span> (Exception e) &#123;</div><div class=\"line\">                <span class=\"keyword\">if</span> (!mInstrumentation.onException(s, e)) &#123;</div><div class=\"line\">                    <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> RuntimeException(</div><div class=\"line\">                            <span class=\"string\">\"Unable to bind to service \"</span> + s</div><div class=\"line\">                            + <span class=\"string\">\" with \"</span> + data.intent + <span class=\"string\">\": \"</span> + e.toString(), e);</div><div class=\"line\">                &#125;</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div></pre></td></tr></table></figure></p>\n<p>Service有一个特性，当多次绑定同一个Service时，Service的<code>onBind</code>方法<strong>只会执行一次</strong>，除非Service被终止了。当Service的onBind执行以后，系统还需要告知客户端已经成功连接Service了。根据上面的分析，这个过程由AMS的<code>publishService</code>方法来实现:<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">publishService</span><span class=\"params\">(IBinder token, Intent intent, IBinder service)</span> </span>&#123;</div><div class=\"line\">        <span class=\"comment\">// Refuse possible leaked file descriptors</span></div><div class=\"line\">        <span class=\"keyword\">if</span> (intent != <span class=\"keyword\">null</span> &amp;&amp; intent.hasFileDescriptors() == <span class=\"keyword\">true</span>) &#123;</div><div class=\"line\">            <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> IllegalArgumentException(<span class=\"string\">\"File descriptors passed in Intent\"</span>);</div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\">        <span class=\"keyword\">synchronized</span>(<span class=\"keyword\">this</span>) &#123;</div><div class=\"line\">            <span class=\"keyword\">if</span> (!(token <span class=\"keyword\">instanceof</span> ServiceRecord)) &#123;</div><div class=\"line\">                <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> IllegalArgumentException(<span class=\"string\">\"Invalid service token\"</span>);</div><div class=\"line\">            &#125;</div><div class=\"line\">            mServices.publishServiceLocked((ServiceRecord)token, intent, service);</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div></pre></td></tr></table></figure></p>\n<p>从_上面代码可以看出，AMS的<code>publishService</code>方法将具体的工作交给了<code>ActiveServices</code>类型的<code>mServices</code>对象来处理。<code>ActiveServices</code>的<code>publishServiceLocked</code>方法看起来很复杂，但其实核心代码就只有一- 句话: <code>c.conn.connected(r.name,service)</code>， 其中c的类型是<code>ConnectionRecord</code>，<code>c.comn</code>的类型是<code>ServiceDispatcher.InnerConnection</code>, service就是Service的onBind方法返回的Binder对象。为了分析具体的逻辑，下面看一下<code>ServiceDispatcher.InnerConnection</code>的定义：<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">InnerConnection</span> <span class=\"keyword\">extends</span> <span class=\"title\">IServiceConnection</span>.<span class=\"title\">Stub</span> </span>&#123;</div><div class=\"line\">            <span class=\"keyword\">final</span> WeakReference&lt;LoadedApk.ServiceDispatcher&gt; mDispatcher;</div><div class=\"line\"></div><div class=\"line\">            InnerConnection(LoadedApk.ServiceDispatcher sd) &#123;</div><div class=\"line\">                mDispatcher = <span class=\"keyword\">new</span> WeakReference&lt;LoadedApk.ServiceDispatcher&gt;(sd);</div><div class=\"line\">            &#125;</div><div class=\"line\"></div><div class=\"line\">            <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">connected</span><span class=\"params\">(ComponentName name, IBinder service, <span class=\"keyword\">boolean</span> dead)</span></span></div><div class=\"line\">                    <span class=\"keyword\">throws</span> RemoteException &#123;</div><div class=\"line\">                LoadedApk.ServiceDispatcher sd = mDispatcher.get();</div><div class=\"line\">                <span class=\"keyword\">if</span> (sd != <span class=\"keyword\">null</span>) &#123;</div><div class=\"line\">                    sd.connected(name, service, dead);</div><div class=\"line\">                &#125;</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;</div></pre></td></tr></table></figure></p>\n<p>从<code>InnerConnection</code>的定义可以看出来，它的<code>connected</code>方法又调用了<code>ServiceDispatcher</code>的<code>connected</code>方法<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">connected</span><span class=\"params\">(ComponentName name, IBinder service, <span class=\"keyword\">boolean</span> dead)</span> </span>&#123;</div><div class=\"line\">            <span class=\"keyword\">if</span> (mActivityThread != <span class=\"keyword\">null</span>) &#123;</div><div class=\"line\">                mActivityThread.post(<span class=\"keyword\">new</span> RunConnection(name, service, <span class=\"number\">0</span>, dead));</div><div class=\"line\">            &#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">                doConnected(name, service, dead);</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;</div></pre></td></tr></table></figure></p>\n<p>对于Service的绑定过程来讲，<code>ServiceDispatcher</code>中的<code>mActivityThread</code>就是一个<code>handler</code>，它就是<code>ActivityThread</code>中的<code>H</code>，从<code>Service</code>的创建过程来讲，<code>mActivityTHread</code>不会为<code>null</code>，这样一来，<code>RunConnection</code>就可以经由<code>H</code>的<code>post</code>方法从而运行在主线程中，因此，客户端的<code>ServiceConnection</code>中的方法回调是在主线程中执行的。<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">private</span> <span class=\"keyword\">final</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">RunConnection</span> <span class=\"keyword\">implements</span> <span class=\"title\">Runnable</span> </span>&#123;</div><div class=\"line\">            RunConnection(ComponentName name, IBinder service, <span class=\"keyword\">int</span> command, <span class=\"keyword\">boolean</span> dead) &#123;</div><div class=\"line\">                mName = name;</div><div class=\"line\">                mService = service;</div><div class=\"line\">                mCommand = command;</div><div class=\"line\">                mDead = dead;</div><div class=\"line\">            &#125;</div><div class=\"line\"></div><div class=\"line\">            <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">run</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">                <span class=\"keyword\">if</span> (mCommand == <span class=\"number\">0</span>) &#123;</div><div class=\"line\">                    doConnected(mName, mService, mDead);</div><div class=\"line\">                &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (mCommand == <span class=\"number\">1</span>) &#123;</div><div class=\"line\">                    doDeath(mName, mService);</div><div class=\"line\">                &#125;</div><div class=\"line\">            &#125;</div><div class=\"line\"></div><div class=\"line\">            <span class=\"keyword\">final</span> ComponentName mName;</div><div class=\"line\">            <span class=\"keyword\">final</span> IBinder mService;</div><div class=\"line\">            <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> mCommand;</div><div class=\"line\">            <span class=\"keyword\">final</span> <span class=\"keyword\">boolean</span> mDead;</div><div class=\"line\">        &#125;</div></pre></td></tr></table></figure></p>\n<p>很显然，<code>RunConnection</code>的<code>run</code>方法也是简单调用了<code>ServiceDispatcher</code>的<code>doConnected</code>方法，由于<code>ServiceDispatcher</code>内部保存了客户端的<code>ServiceConnection</code>对象，因此它可以很方便地调用<code>ServiceConnection</code>对象的<code>onServiceConnected</code>方法，如下所示。<br>至此，bindService的过程完成。</p>\n<hr>\n<p>以上</p>\n","excerpt":"<p>《Android开发艺术探索》9.3章<br><code>Service</code>分为两种工作状态,一种是启动状态，主要用于执行后台计算;另一种是绑定态,主要用于其他组件和<code>Service</code>的交互。需要注意的是，<code>Service</code>的这两种状态是可以共存的，即<code>Service</code>既可以处于启动状态也可以同时处于绑定状态。<br>通过<code>Context</code>的<code>startService</code>方法即可启动一个<code>Service</code>:<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">Intent intent = <span class=\"keyword\">new</span> Intent(content,Service.class);</div><div class=\"line\">startService(intent);</div></pre></td></tr></table></figure></p>\n<p>通过<code>Context</code>的<code>bindService</code>方法可以绑定一个<code>Service</code>：<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">Intent intent = <span class=\"keyword\">new</span> Intent(content,Service.class);</div><div class=\"line\">bindService(intent,connection,BIND_AUTO_CREATE);</div></pre></td></tr></table></figure></p>","more":"<h4 id=\"Service启动过程\"><a href=\"#Service启动过程\" class=\"headerlink\" title=\"Service启动过程\"></a>Service启动过程</h4><p><code>Service</code>的启动时从<code>ContextWrapper</code>的<code>startService</code>开始的：<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">@Override</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> ComponentName <span class=\"title\">startService</span><span class=\"params\">(Intent service)</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> mBase.startService(service);</div><div class=\"line\">    &#125;</div></pre></td></tr></table></figure></p>\n<p><code>mBase</code>是<code>Context</code>的实现类<code>ContextImpl</code>，<code>在Activity</code>启动的时候会通过<code>attach</code>方法关联一个<code>ContextImpl</code>，这个<code>ContextImpl</code>就是上面的<code>mBase</code>，从<code>ContextWrapper</code>的实现来看，大部分的实现都是通过<code>mBase</code>来实现的，这是一种典型的桥接模式。在<code>ContextImpl</code>的<code>startService</code>方法中又调用了<code>startServiceCommon</code>。<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div></pre></td><td class=\"code\"><pre><div class=\"line\"> <span class=\"meta\">@Override</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> ComponentName <span class=\"title\">startService</span><span class=\"params\">(Intent service)</span> </span>&#123;</div><div class=\"line\">        warnIfCallingFromSystemProcess();</div><div class=\"line\">        <span class=\"keyword\">return</span> startServiceCommon(service, <span class=\"keyword\">false</span>, mUser);</div><div class=\"line\">    &#125;</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> ComponentName <span class=\"title\">startServiceCommon</span><span class=\"params\">(Intent service, <span class=\"keyword\">boolean</span> requireForeground,UserHandle user)</span> </span>&#123;</div><div class=\"line\"></div><div class=\"line\">    validateServiceIntent(service);</div><div class=\"line\">    service.prepareToLeaveProcess(<span class=\"keyword\">this</span>);</div><div class=\"line\">    <span class=\"comment\">//api 27</span></div><div class=\"line\">    ComponentName cn = ActivityManager.getService().startService(</div><div class=\"line\">        mMainThread.getApplicationThread(), service, service.resolveTypeIfNeeded(</div><div class=\"line\">                    getContentResolver()), requireForeground,</div><div class=\"line\">                    getOpPackageName(), user.getIdentifier());</div><div class=\"line\">    <span class=\"comment\">//api 25</span></div><div class=\"line\">    <span class=\"comment\">//ComponentName cn = ActivityManagerNative.getDefault().startService(</span></div><div class=\"line\">     <span class=\"comment\">//   mMainThread.getApplicationThread(), service, service.resolveTypeIfNeeded(</span></div><div class=\"line\">      <span class=\"comment\">//  getContentResolver()), getOpPackageName(), user.getIdentifier());</span></div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">return</span> cn;</div><div class=\"line\"></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>在<code>startServiceCommon</code>中通过<code>getService</code>这个对象来启动一个服务，这个对象就是AMS，需要注意的是，在上述代码中通过AMS来启动服务的过程是一个跨进程调用。AMS的<code>startService</code>如下：<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">@Override</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> ComponentName <span class=\"title\">startService</span><span class=\"params\">(IApplicationThread caller, Intent service,</div><div class=\"line\">            String resolvedType, String callingPackage, <span class=\"keyword\">int</span> userId)</span></div><div class=\"line\">            <span class=\"keyword\">throws</span> TransactionTooLargeException </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">synchronized</span>(<span class=\"keyword\">this</span>) &#123;</div><div class=\"line\">            <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> callingPid = Binder.getCallingPid();</div><div class=\"line\">            <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> callingUid = Binder.getCallingUid();</div><div class=\"line\">            <span class=\"keyword\">final</span> <span class=\"keyword\">long</span> origId = Binder.clearCallingIdentity();</div><div class=\"line\">            ComponentName res = mServices.startServiceLocked(caller, service,</div><div class=\"line\">                    resolvedType, callingPid, callingUid, callingPackage, userId);</div><div class=\"line\">            Binder.restoreCallingIdentity(origId);</div><div class=\"line\">            <span class=\"keyword\">return</span> res;</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div></pre></td></tr></table></figure></p>\n<p>AMS会通过<code>mServices</code>来完成<code>service</code>的启动过程，<code>mServices</code>的对象类型是<code>ActiveServices</code>，<code>ActiveServices</code>是一个辅助AMS进行<code>Service</code>管理的类，包括<code>Service</code>的启动、绑定和停止。在<code>startService</code>方法的尾部会调用<code>startServiceInnerLocked</code>方法<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\">ComponentName <span class=\"title\">startServiceInnerLocked</span><span class=\"params\">(ServiceMap smap, Intent service, ServiceRecord r,</div><div class=\"line\">            <span class=\"keyword\">boolean</span> callerFg, <span class=\"keyword\">boolean</span> addToStarting)</span> <span class=\"keyword\">throws</span> TransactionTooLargeException </span>&#123;</div><div class=\"line\">        ServiceState stracker = r.getTracker();</div><div class=\"line\">        <span class=\"keyword\">if</span> (stracker != <span class=\"keyword\">null</span>) &#123;</div><div class=\"line\">            stracker.setStarted(<span class=\"keyword\">true</span>, mAm.mProcessStats.getMemFactorLocked(), r.lastActivity);</div><div class=\"line\">        &#125;</div><div class=\"line\">        r.callStart = <span class=\"keyword\">false</span>;</div><div class=\"line\">        <span class=\"keyword\">synchronized</span> (r.stats.getBatteryStats()) &#123;</div><div class=\"line\">            r.stats.startRunningLocked();</div><div class=\"line\">        &#125;</div><div class=\"line\">        String error = bringUpServiceLocked(r, service.getFlags(), callerFg, <span class=\"keyword\">false</span>, <span class=\"keyword\">false</span>);</div><div class=\"line\">        <span class=\"keyword\">return</span> r.name;</div><div class=\"line\">    &#125;</div></pre></td></tr></table></figure></p>\n<p>上述代码中<code>ServiceRecord</code>是描述一个Service记录，<code>ServiceRecord</code>一直贯穿整个Service流程，<code>startServiceInnerLocked</code>并没有完成启动Service的完整流程，而是将后续的过程交给了<code>bringUpServiceLocked</code>，在该方法中又调用了<code>realStartServiceLocked</code>方法:<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div><div class=\"line\">71</div><div class=\"line\">72</div><div class=\"line\">73</div><div class=\"line\">74</div><div class=\"line\">75</div><div class=\"line\">76</div><div class=\"line\">77</div><div class=\"line\">78</div><div class=\"line\">79</div><div class=\"line\">80</div><div class=\"line\">81</div><div class=\"line\">82</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">final</span> <span class=\"keyword\">void</span> <span class=\"title\">realStartServiceLocked</span><span class=\"params\">(ServiceRecord r,</div><div class=\"line\">            ProcessRecord app, <span class=\"keyword\">boolean</span> execInFg)</span> <span class=\"keyword\">throws</span> RemoteException </span>&#123;</div><div class=\"line\">       </div><div class=\"line\">        r.app = app;</div><div class=\"line\">        r.restartTime = r.lastActivity = SystemClock.uptimeMillis();</div><div class=\"line\"></div><div class=\"line\">        <span class=\"keyword\">final</span> <span class=\"keyword\">boolean</span> newService = app.services.add(r);</div><div class=\"line\">        bumpServiceExecutingLocked(r, execInFg, <span class=\"string\">\"create\"</span>);</div><div class=\"line\">        mAm.updateLruProcessLocked(app, <span class=\"keyword\">false</span>, <span class=\"keyword\">null</span>);</div><div class=\"line\">        mAm.updateOomAdjLocked();</div><div class=\"line\"></div><div class=\"line\">        <span class=\"keyword\">boolean</span> created = <span class=\"keyword\">false</span>;</div><div class=\"line\">        <span class=\"keyword\">try</span> &#123;</div><div class=\"line\">            </div><div class=\"line\">            <span class=\"keyword\">synchronized</span> (r.stats.getBatteryStats()) &#123;</div><div class=\"line\">                r.stats.startLaunchedLocked();</div><div class=\"line\">            &#125;</div><div class=\"line\">            mAm.notifyPackageUse(r.serviceInfo.packageName,</div><div class=\"line\">                                 PackageManager.NOTIFY_PACKAGE_USE_SERVICE);</div><div class=\"line\">            app.forceProcessStateUpTo(ActivityManager.PROCESS_STATE_SERVICE);</div><div class=\"line\">            app.thread.scheduleCreateService(r, r.serviceInfo,</div><div class=\"line\">                    mAm.compatibilityInfoForPackageLocked(r.serviceInfo.applicationInfo),</div><div class=\"line\">                    app.repProcState);</div><div class=\"line\">            r.postNotification();</div><div class=\"line\">            created = <span class=\"keyword\">true</span>;</div><div class=\"line\">        &#125; <span class=\"keyword\">catch</span> (DeadObjectException e) &#123;</div><div class=\"line\">            Slog.w(TAG, <span class=\"string\">\"Application dead when creating service \"</span> + r);</div><div class=\"line\">            mAm.appDiedLocked(app);</div><div class=\"line\">            <span class=\"keyword\">throw</span> e;</div><div class=\"line\">        &#125; <span class=\"keyword\">finally</span> &#123;</div><div class=\"line\">            <span class=\"keyword\">if</span> (!created) &#123;</div><div class=\"line\">                <span class=\"comment\">// Keep the executeNesting count accurate.</span></div><div class=\"line\">                <span class=\"keyword\">final</span> <span class=\"keyword\">boolean</span> inDestroying = mDestroyingServices.contains(r);</div><div class=\"line\">                serviceDoneExecutingLocked(r, inDestroying, inDestroying);</div><div class=\"line\"></div><div class=\"line\">                <span class=\"comment\">// Cleanup.</span></div><div class=\"line\">                <span class=\"keyword\">if</span> (newService) &#123;</div><div class=\"line\">                    app.services.remove(r);</div><div class=\"line\">                    r.app = <span class=\"keyword\">null</span>;</div><div class=\"line\">                &#125;</div><div class=\"line\"></div><div class=\"line\">                <span class=\"comment\">// Retry.</span></div><div class=\"line\">                <span class=\"keyword\">if</span> (!inDestroying) &#123;</div><div class=\"line\">                    scheduleServiceRestartLocked(r, <span class=\"keyword\">false</span>);</div><div class=\"line\">                &#125;</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\">        <span class=\"keyword\">if</span> (r.whitelistManager) &#123;</div><div class=\"line\">            app.whitelistManager = <span class=\"keyword\">true</span>;</div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\">        requestServiceBindingsLocked(r, execInFg);</div><div class=\"line\"></div><div class=\"line\">        updateServiceClientActivitiesLocked(app, <span class=\"keyword\">null</span>, <span class=\"keyword\">true</span>);</div><div class=\"line\"></div><div class=\"line\">        <span class=\"comment\">// If the service is in the started state, and there are no</span></div><div class=\"line\">        <span class=\"comment\">// pending arguments, then fake up one so its onStartCommand() will</span></div><div class=\"line\">        <span class=\"comment\">// be called.</span></div><div class=\"line\">        <span class=\"keyword\">if</span> (r.startRequested &amp;&amp; r.callStart &amp;&amp; r.pendingStarts.size() == <span class=\"number\">0</span>) &#123;</div><div class=\"line\">            r.pendingStarts.add(<span class=\"keyword\">new</span> ServiceRecord.StartItem(r, <span class=\"keyword\">false</span>, r.makeNextStartId(),</div><div class=\"line\">                    <span class=\"keyword\">null</span>, <span class=\"keyword\">null</span>));</div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\">        sendServiceArgsLocked(r, execInFg, <span class=\"keyword\">true</span>);</div><div class=\"line\"></div><div class=\"line\">        <span class=\"keyword\">if</span> (r.delayed) &#123;</div><div class=\"line\">            <span class=\"keyword\">if</span> (DEBUG_DELAYED_STARTS) Slog.v(TAG_SERVICE, <span class=\"string\">\"REM FR DELAY LIST (new proc): \"</span> + r);</div><div class=\"line\">            getServiceMap(r.userId).mDelayedStartList.remove(r);</div><div class=\"line\">            r.delayed = <span class=\"keyword\">false</span>;</div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\">        <span class=\"keyword\">if</span> (r.delayedStop) &#123;</div><div class=\"line\">            <span class=\"comment\">// Oh and hey we've already been asked to stop!</span></div><div class=\"line\">            r.delayedStop = <span class=\"keyword\">false</span>;</div><div class=\"line\">            <span class=\"keyword\">if</span> (r.startRequested) &#123;</div><div class=\"line\">                <span class=\"keyword\">if</span> (DEBUG_DELAYED_STARTS) Slog.v(TAG_SERVICE,</div><div class=\"line\">                        <span class=\"string\">\"Applying delayed stop (from start): \"</span> + r);</div><div class=\"line\">                stopServiceLocked(r);</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div></pre></td></tr></table></figure></p>\n<p>在<code>realStartServiceLocked</code>方法中，首先通过<code>app.thread</code>的<code>scheduleCreateService</code>方法来创建<code>Service</code>对象并调用其<code>onCreate</code>,接着再通过<code>sendServiceArgsLocked</code>方法来调用<code>Service</code>的其他方法，比如<code>onStartCommand</code>,这两个过程均是进程间通信。<code>app.thread</code>对象是<code>IApplicationThread</code>类型，它实际上是一个<code>Binder</code>,它的具体实现是<code>ApplicationThread</code>和<code>ApplicationThreadNative</code>。由于<code>ApplicationThread</code>继承了<code>ApplicationThreadNative</code>,因此只需要看<code>ApplicationThread</code>对<code>Service</code>启动过程的处理即可，这对应着它的<code>scheduleCreateService</code>方法，如下所示：<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">final</span> <span class=\"keyword\">void</span> <span class=\"title\">scheduleCreateService</span><span class=\"params\">(IBinder token,</div><div class=\"line\">               ServiceInfo info, CompatibilityInfo compatInfo, <span class=\"keyword\">int</span> processState)</span> </span>&#123;</div><div class=\"line\">           updateProcessState(processState, <span class=\"keyword\">false</span>);</div><div class=\"line\">           CreateServiceData s = <span class=\"keyword\">new</span> CreateServiceData();</div><div class=\"line\">           s.token = token;</div><div class=\"line\">           s.info = info;</div><div class=\"line\">           s.compatInfo = compatInfo;</div><div class=\"line\"></div><div class=\"line\">           sendMessage(H.CREATE_SERVICE, s);</div><div class=\"line\">       &#125;</div></pre></td></tr></table></figure></p>\n<p>通过发送消息给<code>Handler H</code>来完成的。H会接收这个<code>CREATE_ SERVICE</code>消息并通过<code>ActivityThread</code>的<code>handleCreateService</code>方法来完成Service的最终启动，<code>handleCreateService</code>的源码如下所示：<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">handleCreateService</span><span class=\"params\">(CreateServiceData data)</span> </span>&#123;</div><div class=\"line\">        <span class=\"comment\">// If we are getting ready to gc after going to the background, well</span></div><div class=\"line\">        <span class=\"comment\">// we are back active so skip it.</span></div><div class=\"line\">        unscheduleGcIdler();</div><div class=\"line\">        LoadedApk packageInfo = getPackageInfoNoCheck(</div><div class=\"line\">                data.info.applicationInfo, data.compatInfo);</div><div class=\"line\">        Service service = <span class=\"keyword\">null</span>;</div><div class=\"line\"></div><div class=\"line\">            java.lang.ClassLoader cl = packageInfo.getClassLoader();</div><div class=\"line\">            service = (Service) cl.loadClass(data.info.name).newInstance();</div><div class=\"line\"></div><div class=\"line\">            ContextImpl context = ContextImpl.createAppContext(<span class=\"keyword\">this</span>, packageInfo);</div><div class=\"line\">            context.setOuterContext(service);</div><div class=\"line\"></div><div class=\"line\">            Application app = packageInfo.makeApplication(<span class=\"keyword\">false</span>, mInstrumentation);</div><div class=\"line\">            service.attach(context, <span class=\"keyword\">this</span>, data.info.name, data.token, app,</div><div class=\"line\">                    ActivityManagerNative.getDefault());</div><div class=\"line\">            service.onCreate();</div><div class=\"line\">            mServices.put(data.token, service);</div><div class=\"line\">            ActivityManagerNative.getDefault().serviceDoneExecuting(</div><div class=\"line\">                        data.token, SERVICE_DONE_EXECUTING_ANON, <span class=\"number\">0</span>, <span class=\"number\">0</span>);</div><div class=\"line\">    &#125;</div></pre></td></tr></table></figure></p>\n<p><code>handleCreateService</code>主要完成了以下几件事：<br>首先通过类加载器创建了Service实例，接着创建<code>ContextImpl</code>对象和<code>Application</code>对象  并通过service.attach方法建立联系，最后调用<code>service.onCreate</code>方法，并将<code>service</code>存储在<code>ActivityThread</code>中的一个列表<code>mServices</code>中<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">final</span> ArrayMap&lt;IBinder, Service&gt; mServices = <span class=\"keyword\">new</span> ArrayMap&lt;&gt;();</div></pre></td></tr></table></figure></p>\n<p>由于<code>service</code>的<code>onCreate</code>方法执行了，也就意味着<code>Service</code>已经启动了。除此之外，<code>ActivityThead</code>中还会通过<code>handleServiceArgs</code>方法调用<code>Service</code>的<code>onStartCommand</code>方法。</p>\n<h4 id=\"Service绑定过程\"><a href=\"#Service绑定过程\" class=\"headerlink\" title=\"Service绑定过程\"></a>Service绑定过程</h4><p>和启动过程一样，也是从<code>ContextWrapper</code>开始的：<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">@Override</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">bindService</span><span class=\"params\">(Intent service, ServiceConnection conn,</div><div class=\"line\">        <span class=\"keyword\">int</span> flags)</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> mBase.bindService(service, conn, flags);</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>然后是<code>ContextImpl</code>的<code>bindService</code>方法调用<code>bindServiceCommon</code>方法，然后远程调用AMS的<code>bindService</code>:<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">boolean</span> <span class=\"title\">bindServiceCommon</span><span class=\"params\">(Intent service, ServiceConnection conn, <span class=\"keyword\">int</span> flags, Handler handler, UserHandle user)</span> </span>&#123;</div><div class=\"line\">    <span class=\"comment\">// Keep this in sync with DevicePolicyManager.bindDeviceAdminServiceAsUser.</span></div><div class=\"line\">    IServiceConnection sd;</div><div class=\"line\">    <span class=\"keyword\">if</span> (conn == <span class=\"keyword\">null</span>) &#123;</div><div class=\"line\">        <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> IllegalArgumentException(<span class=\"string\">\"connection is null\"</span>);</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">if</span> (mPackageInfo != <span class=\"keyword\">null</span>) &#123;</div><div class=\"line\">        sd = mPackageInfo.getServiceDispatcher(conn, getOuterContext(), handler, flags);</div><div class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">        <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> RuntimeException(<span class=\"string\">\"Not supported in system context\"</span>);</div><div class=\"line\">    &#125;</div><div class=\"line\">    validateServiceIntent(service);</div><div class=\"line\">    <span class=\"keyword\">try</span> &#123;</div><div class=\"line\">        IBinder token = getActivityToken();</div><div class=\"line\">        <span class=\"keyword\">if</span> (token == <span class=\"keyword\">null</span> &amp;&amp; (flags&amp;BIND_AUTO_CREATE) == <span class=\"number\">0</span> &amp;&amp; mPackageInfo != <span class=\"keyword\">null</span></div><div class=\"line\">                &amp;&amp; mPackageInfo.getApplicationInfo().targetSdkVersion</div><div class=\"line\">                &lt; android.os.Build.VERSION_CODES.ICE_CREAM_SANDWICH) &#123;</div><div class=\"line\">            flags |= BIND_WAIVE_PRIORITY;</div><div class=\"line\">        &#125;</div><div class=\"line\">        service.prepareToLeaveProcess(<span class=\"keyword\">this</span>);</div><div class=\"line\">        <span class=\"keyword\">int</span> res = ActivityManager.getService().bindService(</div><div class=\"line\">            mMainThread.getApplicationThread(), getActivityToken(), service,</div><div class=\"line\">            service.resolveTypeIfNeeded(getContentResolver()),</div><div class=\"line\">            sd, flags, getOpPackageName(), user.getIdentifier());</div><div class=\"line\">        <span class=\"keyword\">if</span> (res &lt; <span class=\"number\">0</span>) &#123;</div><div class=\"line\">            <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> SecurityException(</div><div class=\"line\">                    <span class=\"string\">\"Not allowed to bind to service \"</span> + service);</div><div class=\"line\">        &#125;</div><div class=\"line\">        <span class=\"keyword\">return</span> res != <span class=\"number\">0</span>;</div><div class=\"line\">    &#125; <span class=\"keyword\">catch</span> (RemoteException e) &#123;</div><div class=\"line\">        <span class=\"keyword\">throw</span> e.rethrowFromSystemServer();</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>在该方法中，首先将客户端的<code>ServiceConnection</code>转化为<code>ServiceDispatcher.InnerConnection</code>对象，因为服务绑定是跨进程的，所以<code>ServiceConnection</code>对象必须借助<code>Binder</code>对象才能让远程服务端调用自己的方法。<code>ServiceDispatcher</code>起着连接<code>ServiceConnection</code>和<code>InnerConnection</code>的作用。这个过程由<code>LoadedApk.getServiceDispatcher</code>方法完成：<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">final</span> IServiceConnection <span class=\"title\">getServiceDispatcher</span><span class=\"params\">(ServiceConnection c,</div><div class=\"line\">            Context context, Handler handler, <span class=\"keyword\">int</span> flags)</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">synchronized</span> (mServices) &#123;</div><div class=\"line\">            LoadedApk.ServiceDispatcher sd = <span class=\"keyword\">null</span>;</div><div class=\"line\">            ArrayMap&lt;ServiceConnection, LoadedApk.ServiceDispatcher&gt; map = mServices.get(context);</div><div class=\"line\">            <span class=\"keyword\">if</span> (map != <span class=\"keyword\">null</span>) &#123;</div><div class=\"line\">                <span class=\"keyword\">if</span> (DEBUG) Slog.d(TAG, <span class=\"string\">\"Returning existing dispatcher \"</span> + sd + <span class=\"string\">\" for conn \"</span> + c);</div><div class=\"line\">                sd = map.get(c);</div><div class=\"line\">            &#125;</div><div class=\"line\">            <span class=\"keyword\">if</span> (sd == <span class=\"keyword\">null</span>) &#123;</div><div class=\"line\">                sd = <span class=\"keyword\">new</span> ServiceDispatcher(c, context, handler, flags);</div><div class=\"line\">                <span class=\"keyword\">if</span> (DEBUG) Slog.d(TAG, <span class=\"string\">\"Creating new dispatcher \"</span> + sd + <span class=\"string\">\" for conn \"</span> + c);</div><div class=\"line\">                <span class=\"keyword\">if</span> (map == <span class=\"keyword\">null</span>) &#123;</div><div class=\"line\">                    map = <span class=\"keyword\">new</span> ArrayMap&lt;&gt;();</div><div class=\"line\">                    mServices.put(context, map);</div><div class=\"line\">                &#125;</div><div class=\"line\">                map.put(c, sd);</div><div class=\"line\">            &#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">                sd.validate(context, handler);</div><div class=\"line\">            &#125;</div><div class=\"line\">            <span class=\"keyword\">return</span> sd.getIServiceConnection();</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div></pre></td></tr></table></figure></p>\n<p>在上面的代码中，<code>mServices</code>是一个<code>ArrayMap</code>，它存储了一个应用当前活动的<code>ServiceConnection</code>和<code>ServiceDispatcher</code>的映射关系，其声明如下：<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">private</span> <span class=\"keyword\">final</span> ArrayMap&lt;Context, ArrayMap&lt;ServiceConnection, LoadedApk.ServiceDispatcher&gt;&gt; mServices</div><div class=\"line\">        = <span class=\"keyword\">new</span> ArrayMap&lt;&gt;();</div></pre></td></tr></table></figure></p>\n<p>系统首先会查找是否存在相同的<code>ServiceConnection</code>,如果不存在就重新创建一个<code>ServiceDispatcher</code>对象，并将其存储在<code>mServices</code>中，其中映射关系的key是<code>ServiceConnection</code>,value是<code>ServiceDispatcher</code>,在<code>ServiceDispatcher</code>的内部又保存了<code>ServiceConnection</code>和<code>InnerConnection</code>对象。当<code>Service</code>和客户端建立连接后，系统会通过<code>InnerConnection</code>来调用<code>ServiceConnection</code>中的<code>onServiceConnected</code>方法，这个过程有可能是跨进程的。当<code>ServiceDispatcher</code>创建好了以后，<code>getServiceDispatcher</code>会 返回其保存的<code>InnerConnection</code>对象。<br>接着调用AMS的<code>bindService</code>  方法，该方法又调用了<code>bindServiceLocked</code>–&gt;<code>bringUpServiceLocked</code>–&gt;<code>realStartServiceLocked</code>，这个过程和上面的<code>StartService</code>过程逻辑类似，最终都是通过<code>ApplicationThread</code>来完成<code>Service</code>的实例创建并调用<code>onCreate</code>方法。和启动<code>Service</code>过程不同的是，绑定过程会调用<code>app.thread</code>的<code>scheduleBindService</code>方法，这个过程的实现在<code>ActivityService</code>的<code>requestServiceBindingsLocked</code>方法中：<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">final</span> <span class=\"keyword\">void</span> <span class=\"title\">requestServiceBindingsLocked</span><span class=\"params\">(ServiceRecord r, <span class=\"keyword\">boolean</span> execInFg)</span></div><div class=\"line\">           <span class=\"keyword\">throws</span> TransactionTooLargeException </span>&#123;</div><div class=\"line\">       <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i=r.bindings.size()-<span class=\"number\">1</span>; i&gt;=<span class=\"number\">0</span>; i--) &#123;</div><div class=\"line\">           IntentBindRecord ibr = r.bindings.valueAt(i);</div><div class=\"line\">           <span class=\"keyword\">if</span> (!requestServiceBindingLocked(r, ibr, execInFg, <span class=\"keyword\">false</span>)) &#123;</div><div class=\"line\">               <span class=\"keyword\">break</span>;</div><div class=\"line\">           &#125;</div><div class=\"line\">       &#125;</div><div class=\"line\">   &#125;</div></pre></td></tr></table></figure></p>\n<p>该方法用到了<code>r.bindings</code>。它是一个<code>ArrayMap</code>，保存了客户端的<code>bind</code>消息：<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">final</span> ArrayMap&lt;Intent.FilterComparison, IntentBindRecord&gt; bindings = <span class=\"keyword\">new</span> ArrayMap&lt;Intent.FilterComparison, IntentBindRecord&gt;();</div></pre></td></tr></table></figure></p>\n<p>具体保存方法在AMS一开始的方法<code>bindServiceLocked</code>中：<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">AppBindRecord b = s.retrieveAppBindingLocked(service, callerApp);</div></pre></td></tr></table></figure></p>\n<p>在<code>requestServiceBindingsLocked</code>方法中调用了了<code>requestServiceBindingLocked</code>方法:<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">final</span> <span class=\"keyword\">boolean</span> <span class=\"title\">requestServiceBindingLocked</span><span class=\"params\">(ServiceRecord r, IntentBindRecord i,</div><div class=\"line\">            <span class=\"keyword\">boolean</span> execInFg, <span class=\"keyword\">boolean</span> rebind)</span> <span class=\"keyword\">throws</span> TransactionTooLargeException </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">if</span> (r.app == <span class=\"keyword\">null</span> || r.app.thread == <span class=\"keyword\">null</span>) &#123;</div><div class=\"line\">            <span class=\"comment\">// If service is not currently running, can't yet bind.</span></div><div class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">false</span>;</div><div class=\"line\">        &#125;</div><div class=\"line\">        <span class=\"keyword\">if</span> (DEBUG_SERVICE) Slog.d(TAG_SERVICE, <span class=\"string\">\"requestBind \"</span> + i + <span class=\"string\">\": requested=\"</span> + i.requested</div><div class=\"line\">                + <span class=\"string\">\" rebind=\"</span> + rebind);</div><div class=\"line\">        <span class=\"keyword\">if</span> ((!i.requested || rebind) &amp;&amp; i.apps.size() &gt; <span class=\"number\">0</span>) &#123;</div><div class=\"line\">            <span class=\"keyword\">try</span> &#123;</div><div class=\"line\">                bumpServiceExecutingLocked(r, execInFg, <span class=\"string\">\"bind\"</span>);</div><div class=\"line\">                r.app.forceProcessStateUpTo(ActivityManager.PROCESS_STATE_SERVICE);</div><div class=\"line\">                r.app.thread.scheduleBindService(r, i.intent.getIntent(), rebind,</div><div class=\"line\">                        r.app.repProcState);</div><div class=\"line\">                <span class=\"keyword\">if</span> (!rebind) &#123;</div><div class=\"line\">                    i.requested = <span class=\"keyword\">true</span>;</div><div class=\"line\">                &#125;</div><div class=\"line\">                i.hasBound = <span class=\"keyword\">true</span>;</div><div class=\"line\">                i.doRebind = <span class=\"keyword\">false</span>;</div><div class=\"line\">            &#125; <span class=\"keyword\">catch</span> (TransactionTooLargeException e) &#123;</div><div class=\"line\">                <span class=\"comment\">// Keep the executeNesting count accurate.</span></div><div class=\"line\">                <span class=\"keyword\">if</span> (DEBUG_SERVICE) Slog.v(TAG_SERVICE, <span class=\"string\">\"Crashed while binding \"</span> + r, e);</div><div class=\"line\">                <span class=\"keyword\">final</span> <span class=\"keyword\">boolean</span> inDestroying = mDestroyingServices.contains(r);</div><div class=\"line\">                serviceDoneExecutingLocked(r, inDestroying, inDestroying);</div><div class=\"line\">                <span class=\"keyword\">throw</span> e;</div><div class=\"line\">            &#125; <span class=\"keyword\">catch</span> (RemoteException e) &#123;</div><div class=\"line\">                <span class=\"keyword\">if</span> (DEBUG_SERVICE) Slog.v(TAG_SERVICE, <span class=\"string\">\"Crashed while binding \"</span> + r);</div><div class=\"line\">                <span class=\"comment\">// Keep the executeNesting count accurate.</span></div><div class=\"line\">                <span class=\"keyword\">final</span> <span class=\"keyword\">boolean</span> inDestroying = mDestroyingServices.contains(r);</div><div class=\"line\">                serviceDoneExecutingLocked(r, inDestroying, inDestroying);</div><div class=\"line\">                <span class=\"keyword\">return</span> <span class=\"keyword\">false</span>;</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;</div><div class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">true</span>;</div><div class=\"line\">    &#125;</div></pre></td></tr></table></figure></p>\n<p>在上述代码中，<code>app.thread</code>这个对象多次出现过，它实际上就是<code>ApplicationThread</code>。<code>ApplicationThread</code>的一系列以<code>schedule</code>开头的方法，其内部都是通过<code>Handler H</code>来中转的，对于<code>scheduleBindService</code>方法来说也是如此，它的实现如下所示：<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">final</span> <span class=\"keyword\">void</span> <span class=\"title\">scheduleBindService</span><span class=\"params\">(IBinder token, Intent intent,</div><div class=\"line\">                <span class=\"keyword\">boolean</span> rebind, <span class=\"keyword\">int</span> processState)</span> </span>&#123;</div><div class=\"line\">            updateProcessState(processState, <span class=\"keyword\">false</span>);</div><div class=\"line\">            BindServiceData s = <span class=\"keyword\">new</span> BindServiceData();</div><div class=\"line\">            s.token = token;</div><div class=\"line\">            s.intent = intent;</div><div class=\"line\">            s.rebind = rebind;</div><div class=\"line\">            sendMessage(H.BIND_SERVICE, s);</div><div class=\"line\">        &#125;</div></pre></td></tr></table></figure></p>\n<p>在H内部，接收到<code>BIND_SERVICE</code>这类消息时，会交给<code>ActivityThread</code>的<code>handleBindService</code>方法来处理。在<code>handleBindService</code>中，首先根据<code>Service</code>的<code>token</code>取出<code>Service</code>对象，然后调用<code>Service</code>的<code>onBind</code>方法，<code>Service</code>的<code>onBind</code>方法会返回一个<code>Binder</code>对象给客户端使用，原则上来说，<code>Service</code>的<code>onBind</code>方法被调用以后，<code>Service</code>就处于绑定状态了，但是<code>onBind</code>方法是<code>Service</code>的方法，这个时候客户端并不知道已经成功连接<code>Service</code>了，所以还必须调用客户端的<code>ServiceConnection</code>中的<code>onServiceConnected</code>,这个过程是由<code>ActivityManager.getService()</code>的<code>publishService</code>方法来完成的，而前面多次提到，<code>ActivityManager.getService()</code>就是AMS。<code>handleBindService</code>的实现过程如下所示。<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">handleBindService</span><span class=\"params\">(BindServiceData data)</span> </span>&#123;</div><div class=\"line\">        Service s = mServices.get(data.token);</div><div class=\"line\">        <span class=\"keyword\">if</span> (s != <span class=\"keyword\">null</span>) &#123;</div><div class=\"line\">            <span class=\"keyword\">try</span> &#123;</div><div class=\"line\">                data.intent.setExtrasClassLoader(s.getClassLoader());</div><div class=\"line\">                data.intent.prepareToEnterProcess();</div><div class=\"line\">                <span class=\"keyword\">try</span> &#123;</div><div class=\"line\">                    <span class=\"keyword\">if</span> (!data.rebind) &#123;</div><div class=\"line\">                        IBinder binder = s.onBind(data.intent);</div><div class=\"line\">                        ActivityManager.getService().publishService(</div><div class=\"line\">                                data.token, data.intent, binder);</div><div class=\"line\">                    &#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">                        s.onRebind(data.intent);</div><div class=\"line\">                        ActivityManager.getService().serviceDoneExecuting(</div><div class=\"line\">                                data.token, SERVICE_DONE_EXECUTING_ANON, <span class=\"number\">0</span>, <span class=\"number\">0</span>);</div><div class=\"line\">                    &#125;</div><div class=\"line\">                    ensureJitEnabled();</div><div class=\"line\">                &#125; <span class=\"keyword\">catch</span> (RemoteException ex) &#123;</div><div class=\"line\">                    <span class=\"keyword\">throw</span> ex.rethrowFromSystemServer();</div><div class=\"line\">                &#125;</div><div class=\"line\">            &#125; <span class=\"keyword\">catch</span> (Exception e) &#123;</div><div class=\"line\">                <span class=\"keyword\">if</span> (!mInstrumentation.onException(s, e)) &#123;</div><div class=\"line\">                    <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> RuntimeException(</div><div class=\"line\">                            <span class=\"string\">\"Unable to bind to service \"</span> + s</div><div class=\"line\">                            + <span class=\"string\">\" with \"</span> + data.intent + <span class=\"string\">\": \"</span> + e.toString(), e);</div><div class=\"line\">                &#125;</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div></pre></td></tr></table></figure></p>\n<p>Service有一个特性，当多次绑定同一个Service时，Service的<code>onBind</code>方法<strong>只会执行一次</strong>，除非Service被终止了。当Service的onBind执行以后，系统还需要告知客户端已经成功连接Service了。根据上面的分析，这个过程由AMS的<code>publishService</code>方法来实现:<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">publishService</span><span class=\"params\">(IBinder token, Intent intent, IBinder service)</span> </span>&#123;</div><div class=\"line\">        <span class=\"comment\">// Refuse possible leaked file descriptors</span></div><div class=\"line\">        <span class=\"keyword\">if</span> (intent != <span class=\"keyword\">null</span> &amp;&amp; intent.hasFileDescriptors() == <span class=\"keyword\">true</span>) &#123;</div><div class=\"line\">            <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> IllegalArgumentException(<span class=\"string\">\"File descriptors passed in Intent\"</span>);</div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\">        <span class=\"keyword\">synchronized</span>(<span class=\"keyword\">this</span>) &#123;</div><div class=\"line\">            <span class=\"keyword\">if</span> (!(token <span class=\"keyword\">instanceof</span> ServiceRecord)) &#123;</div><div class=\"line\">                <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> IllegalArgumentException(<span class=\"string\">\"Invalid service token\"</span>);</div><div class=\"line\">            &#125;</div><div class=\"line\">            mServices.publishServiceLocked((ServiceRecord)token, intent, service);</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div></pre></td></tr></table></figure></p>\n<p>从_上面代码可以看出，AMS的<code>publishService</code>方法将具体的工作交给了<code>ActiveServices</code>类型的<code>mServices</code>对象来处理。<code>ActiveServices</code>的<code>publishServiceLocked</code>方法看起来很复杂，但其实核心代码就只有一- 句话: <code>c.conn.connected(r.name,service)</code>， 其中c的类型是<code>ConnectionRecord</code>，<code>c.comn</code>的类型是<code>ServiceDispatcher.InnerConnection</code>, service就是Service的onBind方法返回的Binder对象。为了分析具体的逻辑，下面看一下<code>ServiceDispatcher.InnerConnection</code>的定义：<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">InnerConnection</span> <span class=\"keyword\">extends</span> <span class=\"title\">IServiceConnection</span>.<span class=\"title\">Stub</span> </span>&#123;</div><div class=\"line\">            <span class=\"keyword\">final</span> WeakReference&lt;LoadedApk.ServiceDispatcher&gt; mDispatcher;</div><div class=\"line\"></div><div class=\"line\">            InnerConnection(LoadedApk.ServiceDispatcher sd) &#123;</div><div class=\"line\">                mDispatcher = <span class=\"keyword\">new</span> WeakReference&lt;LoadedApk.ServiceDispatcher&gt;(sd);</div><div class=\"line\">            &#125;</div><div class=\"line\"></div><div class=\"line\">            <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">connected</span><span class=\"params\">(ComponentName name, IBinder service, <span class=\"keyword\">boolean</span> dead)</span></div><div class=\"line\">                    <span class=\"keyword\">throws</span> RemoteException </span>&#123;</div><div class=\"line\">                LoadedApk.ServiceDispatcher sd = mDispatcher.get();</div><div class=\"line\">                <span class=\"keyword\">if</span> (sd != <span class=\"keyword\">null</span>) &#123;</div><div class=\"line\">                    sd.connected(name, service, dead);</div><div class=\"line\">                &#125;</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;</div></pre></td></tr></table></figure></p>\n<p>从<code>InnerConnection</code>的定义可以看出来，它的<code>connected</code>方法又调用了<code>ServiceDispatcher</code>的<code>connected</code>方法<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">connected</span><span class=\"params\">(ComponentName name, IBinder service, <span class=\"keyword\">boolean</span> dead)</span> </span>&#123;</div><div class=\"line\">            <span class=\"keyword\">if</span> (mActivityThread != <span class=\"keyword\">null</span>) &#123;</div><div class=\"line\">                mActivityThread.post(<span class=\"keyword\">new</span> RunConnection(name, service, <span class=\"number\">0</span>, dead));</div><div class=\"line\">            &#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">                doConnected(name, service, dead);</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;</div></pre></td></tr></table></figure></p>\n<p>对于Service的绑定过程来讲，<code>ServiceDispatcher</code>中的<code>mActivityThread</code>就是一个<code>handler</code>，它就是<code>ActivityThread</code>中的<code>H</code>，从<code>Service</code>的创建过程来讲，<code>mActivityTHread</code>不会为<code>null</code>，这样一来，<code>RunConnection</code>就可以经由<code>H</code>的<code>post</code>方法从而运行在主线程中，因此，客户端的<code>ServiceConnection</code>中的方法回调是在主线程中执行的。<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">private</span> <span class=\"keyword\">final</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">RunConnection</span> <span class=\"keyword\">implements</span> <span class=\"title\">Runnable</span> </span>&#123;</div><div class=\"line\">            RunConnection(ComponentName name, IBinder service, <span class=\"keyword\">int</span> command, <span class=\"keyword\">boolean</span> dead) &#123;</div><div class=\"line\">                mName = name;</div><div class=\"line\">                mService = service;</div><div class=\"line\">                mCommand = command;</div><div class=\"line\">                mDead = dead;</div><div class=\"line\">            &#125;</div><div class=\"line\"></div><div class=\"line\">            <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">run</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">                <span class=\"keyword\">if</span> (mCommand == <span class=\"number\">0</span>) &#123;</div><div class=\"line\">                    doConnected(mName, mService, mDead);</div><div class=\"line\">                &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (mCommand == <span class=\"number\">1</span>) &#123;</div><div class=\"line\">                    doDeath(mName, mService);</div><div class=\"line\">                &#125;</div><div class=\"line\">            &#125;</div><div class=\"line\"></div><div class=\"line\">            <span class=\"keyword\">final</span> ComponentName mName;</div><div class=\"line\">            <span class=\"keyword\">final</span> IBinder mService;</div><div class=\"line\">            <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> mCommand;</div><div class=\"line\">            <span class=\"keyword\">final</span> <span class=\"keyword\">boolean</span> mDead;</div><div class=\"line\">        &#125;</div></pre></td></tr></table></figure></p>\n<p>很显然，<code>RunConnection</code>的<code>run</code>方法也是简单调用了<code>ServiceDispatcher</code>的<code>doConnected</code>方法，由于<code>ServiceDispatcher</code>内部保存了客户端的<code>ServiceConnection</code>对象，因此它可以很方便地调用<code>ServiceConnection</code>对象的<code>onServiceConnected</code>方法，如下所示。<br>至此，bindService的过程完成。</p>\n<hr>\n<p>以上</p>"},{"title":"Android布局文件中的xmlns:tools","date":"2018-01-04T06:12:34.000Z","keywords":"xmlns-tools","_content":"在使用AndroidStudio创建布局文件的时候，跟布局下总是有如下代码：\n``` xml\n<RootTag xmlns:android=\"http://schemas.android.com/apk/res/android\"\n    xmlns:tools=\"http://schemas.android.com/tools\"\n    tools:context=\"***.***Activity\" >\n```\n于是在官网查了一下这俩货是干嘛用的，下面是自己的翻译+实践\n<!--more-->\n`xmlns`的全称是`xmlnamespace`,和c++中`namespace`差不多，都是为了解决命名上的冲突问题。\n在Android布局文件中，常见的`xmlns`大概有三个（你可以随意命名，把tools改成bug也可以，只要对应使用tools的地方都改成bug，说白了，它只是个变量而已）。\n``` xml\nxmlns:android=\"http://schemas.android.com/apk/res/android\"\nxmlns:tools=\"http://schemas.android.com/tools\"\nxmlns:app=\"http://schemas.android.com/apk/res-auto\"\n```\n###### android\n用于Android系统定义的一些属性\n###### app\n用于我们自定义的一些属性\n###### tools\n给IDE或者预览界面用的，当打包编译时并不会包含在apk中。\n#### tools可以干什么\n先看官网介绍 https://developer.android.com/studio/write/tool-attributes.html\n> Android Studio supports a variety of XML attributes in the tools namespace that enable design-time features (such as which layout to show in a fragment) or compile-time behaviors (such as which shrinking mode to apply to your XML resources). When you build your app, the build tools remove these attributes so there is no effect on your APK size or runtime behavior.\n\n大致意思就是说使用`tools`后面的属性不会再编译时存在，只存在于设计时的预览，不会影响apk的体积，\n\n##### Error handling attributes\n影响Lint提示的属性主要有下面三种：\n>**tools:ignore**\nIntended for: Any element\nUsed by: Lint\n\n> **tools:targetApi**\nIntended for: Any element\nUsed by: Lint\n\n>**tools:locale**\nIntended for: resources\nUsed by: Lint, Android Studio editor\n\n`ignore`属性是告诉Lint忽略xml中的某些警告，比如我们在`ImageView`或者`ImageButton`中没有写`contentDescription`属性，Lint会有警告：`Missing contentDescription attribute on image`,原因是这个属性是提供无障碍阅读的，没有这个属性的话`Screen Reader`无法正常工作，但是有些特定分类的软件是不考虑这些东西的。虽然这种警告无所谓，但是对于要求代码中不能有warning的公司来说，这是不可取的，我们可以用`ignore`属性来忽略这个警告(如果你说你改了Lint的警告级别，当我没说)：\n``` xml\n<ImageView\nandroid:layout_width=\"wrap_content\"\nandroid:layout_height=\"wrap_content\"\nandroid:layout_marginStart=\"@dimen/margin_main\"\nandroid:layout_marginTop=\"@dimen/margin_main\"\nandroid:scaleType=\"center\"\nandroid:src=\"@drawable/divider\"\ntools:ignore=\"contentDescription\" />\n```\n`targetApi`和代码中的注解`@RequiresApi(api = Build.VERSION_CODES.JELLY_BEAN_MR2)`差不多。假设配置文件中的最小sdkLevel为11，而布局文件中使用了21的控件比如`GridLayout`,Lint会有警告，为了消除这个警告，可以这么写：\n``` xml\n<GridLayout xmlns:android=\"http://schemas.android.com/apk/res/android\"\n    xmlns:tools=\"http://schemas.android.com/tools\"\n    tools:targetApi=\"14\" >\n```\n`locale`是告诉Lint和AndroidStudio editor默认的是什么语言，如果不指定的话，默认是英语。可以把这个属性添加到`values/strings.xml`中：\n``` xml\n<resources xmlns:tools=\"http://schemas.android.com/tools\"\n    tools:locale=\"es\"/>\n```\n##### Design-time view attributes(设计时试图属性)\n###### tools: instead of android\n**Intended for:** *`View`*\n**Used by:**  *Android Studio layout editor*\n\n我们有一个`TextView`，需要显示从网络获取到的文件，控件大小是`wrap_content`,但是`TextView`中没有文字的话在预览界面中是看不到的，大部分同学可能会使用`android:text=XXXX`这个属性，调整好布局之后再把文字删除。一两个控件还好说，控件多了指不定哪个控件就忘记删除文本了，我们可以使用`tools`这个东西：\n``` xml\n<TextView\n    android:id=\"@+id/unlock_bike\"\n    android:layout_width=\"wrap_content\"\n    android:layout_height=\"wrap_content\"\n    android:background=\"#12345678\"\n    android:paddingBottom=\"10dp\"\n    android:paddingTop=\"10dp\"\n    tools:text=\"测试用例\" />\n```\n这时我们在IDE预览界面是可以看到文字的，打包成apk运行在手机上时是看不到的。\n总之，`tools`可以告诉`Android Studio`哪些属性在运行的时候是被忽略的，只在设计布局的时候有效。基本上原生控件的属性都可以这么使用。\n###### tools:context\n**Intended for:** *Any root View*\n**Used by:**  *Lint, Android Studio layout editor*\n这个属性告诉IDE当前布局和哪个activity相关联，在预览界面使用关联Activity的主题展示。\n``` xml\n<android.support.constraint.ConstraintLayout\n    xmlns:android=\"http://schemas.android.com/apk/res/android\"\n    xmlns:tools=\"http://schemas.android.com/tools\"\n    tools:context=\".MainActivity\" >\n```\n###### tools:itemCount\n**Intended for:** *RecyclerView*\n**Used by:** *Android Studio layout editor*\n这个属性告诉编辑器在预览窗口展示多少个列表项\n``` xml\n<android.support.v7.widget.RecyclerView\n    android:id=\"@+id/recyclerView\"\n    android:layout_width=\"match_parent\"\n    android:layout_height=\"match_parent\"\n    tools:itemCount=\"3\"/>\n```\n###### tools:layout\n**Intended for:** *`fragment`*\n**Used by:** *Android Studio layout editor*\n这个属性告诉编辑器fragment中显示哪个布局文件\n``` xml\n<fragment android:name=\"com.example.master.ItemListFragment\"\n    tools:layout=\"@layout/list_content\" />\n```\n###### tools:listitem / tools:listheader / tools:listfooter\n**Intended for:** *`AdapterView` (and subclasses like `ListView`)*\n**Used by:** *Android Studio layout editor*\n看属性名字就能猜出来了，预览界面显示列表的头部，底部和列表项布局\n``` xml\n<ListView xmlns:android=\"http://schemas.android.com/apk/res/android\"\n    xmlns:tools=\"http://schemas.android.com/tools\"\n    android:id=\"@android:id/list\"\n    android:layout_width=\"match_parent\"\n    android:layout_height=\"match_parent\"\n    tools:listitem=\"@layout/sample_list_item\"\n    tools:listheader=\"@layout/sample_list_header\"\n    tools:listfooter=\"@layout/sample_list_footer\" />\n```\n###### tools:showIn\n**Intended for:** *Any root `View` in a layout that's referred to by an `include`*\n**Used by:** *Android Studio layout editor*\n此属性可以通过指向使用此布局包含的布局，因此您可以预览(和编辑)这个文件，因为它嵌入在其父布局时出现\n``` xml\n<TextView xmlns:android=\"http://schemas.android.com/apk/res/android\"\n    xmlns:tools=\"http://schemas.android.com/tools\"\n    android:text=\"@string/hello_world\"\n    android:layout_width=\"wrap_content\"\n    android:layout_height=\"wrap_content\"\n    tools:showIn=\"@layout/activity_main\" />\n```\n###### tools:menu\n**Intended for:**  *Any root `View`*\n**Used by:** *Android Studio layout editor*\n此属性指定菜单应该显示在应用程序栏的布局预览。该值可以是一个或多个菜单id，由逗号分隔\n``` xml\n<LinearLayout xmlns:android=\"http://schemas.android.com/apk/res/android\"\n    xmlns:tools=\"http://schemas.android.com/tools\"\n    android:orientation=\"vertical\"\n    android:layout_width=\"match_parent\"\n    android:layout_height=\"match_parent\"\n    tools:menu=\"menu1,menu2\" />\n```\n###### tools:minValue / tools:maxValue\n**Intended for:** *`NumberPicker`*\n**Used by:** *Android Studio layout editor*\n设置NumberPicker的最大值和最小值\n``` xml\n<NumberPicker xmlns:android=\"http://schemas.android.com/apk/res/android\"\n    xmlns:tools=\"http://schemas.android.com/tools\"\n    android:id=\"@+id/numberPicker\"\n    android:layout_width=\"match_parent\"\n    android:layout_height=\"wrap_content\"\n    tools:minValue=\"0\"\n    tools:maxValue=\"10\" />\n```\n###### tools:openDrawer\n**Intended for:** *`DrawerLayout`*\n**Used by:** *Android Studio layout editor*\n设置`DrawerLayout`在预览窗口的打开位置\n\n|Constant|Value|Description|\n|:-------------:|:-------------:|:-----:|\n|end|800005|Push object to the end of its container, not changing its size. |\n|left|3|Push object to the left of its container, not changing its size.|\n|right|5|Push object to the right of its container, not changing its size.|\n|start|800003|Push object to the beginning of its container, not changing its size.|\n\n``` xml\n<android.support.v4.widget.DrawerLayout\n    xmlns:android=\"http://schemas.android.com/apk/res/android\"\n    xmlns:tools=\"http://schemas.android.com/tools\"\n    android:id=\"@+id/drawer_layout\"\n    android:layout_width=\"match_parent\"\n    android:layout_height=\"match_parent\"\n    tools:openDrawer=\"start\" />\n```\n下面的不想翻译了，链接在下面\nhttps://developer.android.com/studio/write/tool-attributes.html#resource_shrinking_attributes\n自己撸吧\n\n----\n以上","source":"_posts/Android布局文件中的xmlns-tools.md","raw":"---\ntitle: 'Android布局文件中的xmlns:tools'\ndate: 2018-01-04 14:12:34\ntags: [Android]\nkeywords: xmlns-tools\n---\n在使用AndroidStudio创建布局文件的时候，跟布局下总是有如下代码：\n``` xml\n<RootTag xmlns:android=\"http://schemas.android.com/apk/res/android\"\n    xmlns:tools=\"http://schemas.android.com/tools\"\n    tools:context=\"***.***Activity\" >\n```\n于是在官网查了一下这俩货是干嘛用的，下面是自己的翻译+实践\n<!--more-->\n`xmlns`的全称是`xmlnamespace`,和c++中`namespace`差不多，都是为了解决命名上的冲突问题。\n在Android布局文件中，常见的`xmlns`大概有三个（你可以随意命名，把tools改成bug也可以，只要对应使用tools的地方都改成bug，说白了，它只是个变量而已）。\n``` xml\nxmlns:android=\"http://schemas.android.com/apk/res/android\"\nxmlns:tools=\"http://schemas.android.com/tools\"\nxmlns:app=\"http://schemas.android.com/apk/res-auto\"\n```\n###### android\n用于Android系统定义的一些属性\n###### app\n用于我们自定义的一些属性\n###### tools\n给IDE或者预览界面用的，当打包编译时并不会包含在apk中。\n#### tools可以干什么\n先看官网介绍 https://developer.android.com/studio/write/tool-attributes.html\n> Android Studio supports a variety of XML attributes in the tools namespace that enable design-time features (such as which layout to show in a fragment) or compile-time behaviors (such as which shrinking mode to apply to your XML resources). When you build your app, the build tools remove these attributes so there is no effect on your APK size or runtime behavior.\n\n大致意思就是说使用`tools`后面的属性不会再编译时存在，只存在于设计时的预览，不会影响apk的体积，\n\n##### Error handling attributes\n影响Lint提示的属性主要有下面三种：\n>**tools:ignore**\nIntended for: Any element\nUsed by: Lint\n\n> **tools:targetApi**\nIntended for: Any element\nUsed by: Lint\n\n>**tools:locale**\nIntended for: resources\nUsed by: Lint, Android Studio editor\n\n`ignore`属性是告诉Lint忽略xml中的某些警告，比如我们在`ImageView`或者`ImageButton`中没有写`contentDescription`属性，Lint会有警告：`Missing contentDescription attribute on image`,原因是这个属性是提供无障碍阅读的，没有这个属性的话`Screen Reader`无法正常工作，但是有些特定分类的软件是不考虑这些东西的。虽然这种警告无所谓，但是对于要求代码中不能有warning的公司来说，这是不可取的，我们可以用`ignore`属性来忽略这个警告(如果你说你改了Lint的警告级别，当我没说)：\n``` xml\n<ImageView\nandroid:layout_width=\"wrap_content\"\nandroid:layout_height=\"wrap_content\"\nandroid:layout_marginStart=\"@dimen/margin_main\"\nandroid:layout_marginTop=\"@dimen/margin_main\"\nandroid:scaleType=\"center\"\nandroid:src=\"@drawable/divider\"\ntools:ignore=\"contentDescription\" />\n```\n`targetApi`和代码中的注解`@RequiresApi(api = Build.VERSION_CODES.JELLY_BEAN_MR2)`差不多。假设配置文件中的最小sdkLevel为11，而布局文件中使用了21的控件比如`GridLayout`,Lint会有警告，为了消除这个警告，可以这么写：\n``` xml\n<GridLayout xmlns:android=\"http://schemas.android.com/apk/res/android\"\n    xmlns:tools=\"http://schemas.android.com/tools\"\n    tools:targetApi=\"14\" >\n```\n`locale`是告诉Lint和AndroidStudio editor默认的是什么语言，如果不指定的话，默认是英语。可以把这个属性添加到`values/strings.xml`中：\n``` xml\n<resources xmlns:tools=\"http://schemas.android.com/tools\"\n    tools:locale=\"es\"/>\n```\n##### Design-time view attributes(设计时试图属性)\n###### tools: instead of android\n**Intended for:** *`View`*\n**Used by:**  *Android Studio layout editor*\n\n我们有一个`TextView`，需要显示从网络获取到的文件，控件大小是`wrap_content`,但是`TextView`中没有文字的话在预览界面中是看不到的，大部分同学可能会使用`android:text=XXXX`这个属性，调整好布局之后再把文字删除。一两个控件还好说，控件多了指不定哪个控件就忘记删除文本了，我们可以使用`tools`这个东西：\n``` xml\n<TextView\n    android:id=\"@+id/unlock_bike\"\n    android:layout_width=\"wrap_content\"\n    android:layout_height=\"wrap_content\"\n    android:background=\"#12345678\"\n    android:paddingBottom=\"10dp\"\n    android:paddingTop=\"10dp\"\n    tools:text=\"测试用例\" />\n```\n这时我们在IDE预览界面是可以看到文字的，打包成apk运行在手机上时是看不到的。\n总之，`tools`可以告诉`Android Studio`哪些属性在运行的时候是被忽略的，只在设计布局的时候有效。基本上原生控件的属性都可以这么使用。\n###### tools:context\n**Intended for:** *Any root View*\n**Used by:**  *Lint, Android Studio layout editor*\n这个属性告诉IDE当前布局和哪个activity相关联，在预览界面使用关联Activity的主题展示。\n``` xml\n<android.support.constraint.ConstraintLayout\n    xmlns:android=\"http://schemas.android.com/apk/res/android\"\n    xmlns:tools=\"http://schemas.android.com/tools\"\n    tools:context=\".MainActivity\" >\n```\n###### tools:itemCount\n**Intended for:** *RecyclerView*\n**Used by:** *Android Studio layout editor*\n这个属性告诉编辑器在预览窗口展示多少个列表项\n``` xml\n<android.support.v7.widget.RecyclerView\n    android:id=\"@+id/recyclerView\"\n    android:layout_width=\"match_parent\"\n    android:layout_height=\"match_parent\"\n    tools:itemCount=\"3\"/>\n```\n###### tools:layout\n**Intended for:** *`fragment`*\n**Used by:** *Android Studio layout editor*\n这个属性告诉编辑器fragment中显示哪个布局文件\n``` xml\n<fragment android:name=\"com.example.master.ItemListFragment\"\n    tools:layout=\"@layout/list_content\" />\n```\n###### tools:listitem / tools:listheader / tools:listfooter\n**Intended for:** *`AdapterView` (and subclasses like `ListView`)*\n**Used by:** *Android Studio layout editor*\n看属性名字就能猜出来了，预览界面显示列表的头部，底部和列表项布局\n``` xml\n<ListView xmlns:android=\"http://schemas.android.com/apk/res/android\"\n    xmlns:tools=\"http://schemas.android.com/tools\"\n    android:id=\"@android:id/list\"\n    android:layout_width=\"match_parent\"\n    android:layout_height=\"match_parent\"\n    tools:listitem=\"@layout/sample_list_item\"\n    tools:listheader=\"@layout/sample_list_header\"\n    tools:listfooter=\"@layout/sample_list_footer\" />\n```\n###### tools:showIn\n**Intended for:** *Any root `View` in a layout that's referred to by an `include`*\n**Used by:** *Android Studio layout editor*\n此属性可以通过指向使用此布局包含的布局，因此您可以预览(和编辑)这个文件，因为它嵌入在其父布局时出现\n``` xml\n<TextView xmlns:android=\"http://schemas.android.com/apk/res/android\"\n    xmlns:tools=\"http://schemas.android.com/tools\"\n    android:text=\"@string/hello_world\"\n    android:layout_width=\"wrap_content\"\n    android:layout_height=\"wrap_content\"\n    tools:showIn=\"@layout/activity_main\" />\n```\n###### tools:menu\n**Intended for:**  *Any root `View`*\n**Used by:** *Android Studio layout editor*\n此属性指定菜单应该显示在应用程序栏的布局预览。该值可以是一个或多个菜单id，由逗号分隔\n``` xml\n<LinearLayout xmlns:android=\"http://schemas.android.com/apk/res/android\"\n    xmlns:tools=\"http://schemas.android.com/tools\"\n    android:orientation=\"vertical\"\n    android:layout_width=\"match_parent\"\n    android:layout_height=\"match_parent\"\n    tools:menu=\"menu1,menu2\" />\n```\n###### tools:minValue / tools:maxValue\n**Intended for:** *`NumberPicker`*\n**Used by:** *Android Studio layout editor*\n设置NumberPicker的最大值和最小值\n``` xml\n<NumberPicker xmlns:android=\"http://schemas.android.com/apk/res/android\"\n    xmlns:tools=\"http://schemas.android.com/tools\"\n    android:id=\"@+id/numberPicker\"\n    android:layout_width=\"match_parent\"\n    android:layout_height=\"wrap_content\"\n    tools:minValue=\"0\"\n    tools:maxValue=\"10\" />\n```\n###### tools:openDrawer\n**Intended for:** *`DrawerLayout`*\n**Used by:** *Android Studio layout editor*\n设置`DrawerLayout`在预览窗口的打开位置\n\n|Constant|Value|Description|\n|:-------------:|:-------------:|:-----:|\n|end|800005|Push object to the end of its container, not changing its size. |\n|left|3|Push object to the left of its container, not changing its size.|\n|right|5|Push object to the right of its container, not changing its size.|\n|start|800003|Push object to the beginning of its container, not changing its size.|\n\n``` xml\n<android.support.v4.widget.DrawerLayout\n    xmlns:android=\"http://schemas.android.com/apk/res/android\"\n    xmlns:tools=\"http://schemas.android.com/tools\"\n    android:id=\"@+id/drawer_layout\"\n    android:layout_width=\"match_parent\"\n    android:layout_height=\"match_parent\"\n    tools:openDrawer=\"start\" />\n```\n下面的不想翻译了，链接在下面\nhttps://developer.android.com/studio/write/tool-attributes.html#resource_shrinking_attributes\n自己撸吧\n\n----\n以上","slug":"Android布局文件中的xmlns-tools","published":1,"updated":"2018-08-04T04:48:31.962Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjl3vbtq7000misdguc4hjvhk","content":"<p>在使用AndroidStudio创建布局文件的时候，跟布局下总是有如下代码：<br><figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">RootTag</span> <span class=\"attr\">xmlns:android</span>=<span class=\"string\">\"http://schemas.android.com/apk/res/android\"</span></span></div><div class=\"line\">    <span class=\"attr\">xmlns:tools</span>=<span class=\"string\">\"http://schemas.android.com/tools\"</span></div><div class=\"line\">    <span class=\"attr\">tools:context</span>=<span class=\"string\">\"***.***Activity\"</span> &gt;</div></pre></td></tr></table></figure></p>\n<p>于是在官网查了一下这俩货是干嘛用的，下面是自己的翻译+实践<br><a id=\"more\"></a><br><code>xmlns</code>的全称是<code>xmlnamespace</code>,和c++中<code>namespace</code>差不多，都是为了解决命名上的冲突问题。<br>在Android布局文件中，常见的<code>xmlns</code>大概有三个（你可以随意命名，把tools改成bug也可以，只要对应使用tools的地方都改成bug，说白了，它只是个变量而已）。<br><figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">xmlns:android=\"http://schemas.android.com/apk/res/android\"</div><div class=\"line\">xmlns:tools=\"http://schemas.android.com/tools\"</div><div class=\"line\">xmlns:app=\"http://schemas.android.com/apk/res-auto\"</div></pre></td></tr></table></figure></p>\n<h6 id=\"android\"><a href=\"#android\" class=\"headerlink\" title=\"android\"></a>android</h6><p>用于Android系统定义的一些属性</p>\n<h6 id=\"app\"><a href=\"#app\" class=\"headerlink\" title=\"app\"></a>app</h6><p>用于我们自定义的一些属性</p>\n<h6 id=\"tools\"><a href=\"#tools\" class=\"headerlink\" title=\"tools\"></a>tools</h6><p>给IDE或者预览界面用的，当打包编译时并不会包含在apk中。</p>\n<h4 id=\"tools可以干什么\"><a href=\"#tools可以干什么\" class=\"headerlink\" title=\"tools可以干什么\"></a>tools可以干什么</h4><p>先看官网介绍 <a href=\"https://developer.android.com/studio/write/tool-attributes.html\" target=\"_blank\" rel=\"external\">https://developer.android.com/studio/write/tool-attributes.html</a></p>\n<blockquote>\n<p>Android Studio supports a variety of XML attributes in the tools namespace that enable design-time features (such as which layout to show in a fragment) or compile-time behaviors (such as which shrinking mode to apply to your XML resources). When you build your app, the build tools remove these attributes so there is no effect on your APK size or runtime behavior.</p>\n</blockquote>\n<p>大致意思就是说使用<code>tools</code>后面的属性不会再编译时存在，只存在于设计时的预览，不会影响apk的体积，</p>\n<h5 id=\"Error-handling-attributes\"><a href=\"#Error-handling-attributes\" class=\"headerlink\" title=\"Error handling attributes\"></a>Error handling attributes</h5><p>影响Lint提示的属性主要有下面三种：</p>\n<blockquote>\n<p><strong>tools:ignore</strong><br>Intended for: Any element<br>Used by: Lint</p>\n<p><strong>tools:targetApi</strong><br>Intended for: Any element<br>Used by: Lint</p>\n<p><strong>tools:locale</strong><br>Intended for: resources<br>Used by: Lint, Android Studio editor</p>\n</blockquote>\n<p><code>ignore</code>属性是告诉Lint忽略xml中的某些警告，比如我们在<code>ImageView</code>或者<code>ImageButton</code>中没有写<code>contentDescription</code>属性，Lint会有警告：<code>Missing contentDescription attribute on image</code>,原因是这个属性是提供无障碍阅读的，没有这个属性的话<code>Screen Reader</code>无法正常工作，但是有些特定分类的软件是不考虑这些东西的。虽然这种警告无所谓，但是对于要求代码中不能有warning的公司来说，这是不可取的，我们可以用<code>ignore</code>属性来忽略这个警告(如果你说你改了Lint的警告级别，当我没说)：<br><figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">ImageView</span></span></div><div class=\"line\"><span class=\"attr\">android:layout_width</span>=<span class=\"string\">\"wrap_content\"</span></div><div class=\"line\"><span class=\"attr\">android:layout_height</span>=<span class=\"string\">\"wrap_content\"</span></div><div class=\"line\"><span class=\"attr\">android:layout_marginStart</span>=<span class=\"string\">\"@dimen/margin_main\"</span></div><div class=\"line\"><span class=\"attr\">android:layout_marginTop</span>=<span class=\"string\">\"@dimen/margin_main\"</span></div><div class=\"line\"><span class=\"attr\">android:scaleType</span>=<span class=\"string\">\"center\"</span></div><div class=\"line\"><span class=\"attr\">android:src</span>=<span class=\"string\">\"@drawable/divider\"</span></div><div class=\"line\"><span class=\"attr\">tools:ignore</span>=<span class=\"string\">\"contentDescription\"</span> /&gt;</div></pre></td></tr></table></figure></p>\n<p><code>targetApi</code>和代码中的注解<code>@RequiresApi(api = Build.VERSION_CODES.JELLY_BEAN_MR2)</code>差不多。假设配置文件中的最小sdkLevel为11，而布局文件中使用了21的控件比如<code>GridLayout</code>,Lint会有警告，为了消除这个警告，可以这么写：<br><figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">GridLayout</span> <span class=\"attr\">xmlns:android</span>=<span class=\"string\">\"http://schemas.android.com/apk/res/android\"</span></span></div><div class=\"line\">    <span class=\"attr\">xmlns:tools</span>=<span class=\"string\">\"http://schemas.android.com/tools\"</span></div><div class=\"line\">    <span class=\"attr\">tools:targetApi</span>=<span class=\"string\">\"14\"</span> &gt;</div></pre></td></tr></table></figure></p>\n<p><code>locale</code>是告诉Lint和AndroidStudio editor默认的是什么语言，如果不指定的话，默认是英语。可以把这个属性添加到<code>values/strings.xml</code>中：<br><figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">resources</span> <span class=\"attr\">xmlns:tools</span>=<span class=\"string\">\"http://schemas.android.com/tools\"</span></span></div><div class=\"line\">    <span class=\"attr\">tools:locale</span>=<span class=\"string\">\"es\"</span>/&gt;</div></pre></td></tr></table></figure></p>\n<h5 id=\"Design-time-view-attributes-设计时试图属性\"><a href=\"#Design-time-view-attributes-设计时试图属性\" class=\"headerlink\" title=\"Design-time view attributes(设计时试图属性)\"></a>Design-time view attributes(设计时试图属性)</h5><h6 id=\"tools-instead-of-android\"><a href=\"#tools-instead-of-android\" class=\"headerlink\" title=\"tools: instead of android\"></a>tools: instead of android</h6><p><strong>Intended for:</strong> <em><code>View</code></em><br><strong>Used by:</strong>  <em>Android Studio layout editor</em></p>\n<p>我们有一个<code>TextView</code>，需要显示从网络获取到的文件，控件大小是<code>wrap_content</code>,但是<code>TextView</code>中没有文字的话在预览界面中是看不到的，大部分同学可能会使用<code>android:text=XXXX</code>这个属性，调整好布局之后再把文字删除。一两个控件还好说，控件多了指不定哪个控件就忘记删除文本了，我们可以使用<code>tools</code>这个东西：<br><figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">TextView</span></span></div><div class=\"line\">    <span class=\"attr\">android:id</span>=<span class=\"string\">\"@+id/unlock_bike\"</span></div><div class=\"line\">    <span class=\"attr\">android:layout_width</span>=<span class=\"string\">\"wrap_content\"</span></div><div class=\"line\">    <span class=\"attr\">android:layout_height</span>=<span class=\"string\">\"wrap_content\"</span></div><div class=\"line\">    <span class=\"attr\">android:background</span>=<span class=\"string\">\"#12345678\"</span></div><div class=\"line\">    <span class=\"attr\">android:paddingBottom</span>=<span class=\"string\">\"10dp\"</span></div><div class=\"line\">    <span class=\"attr\">android:paddingTop</span>=<span class=\"string\">\"10dp\"</span></div><div class=\"line\">    <span class=\"attr\">tools:text</span>=<span class=\"string\">\"测试用例\"</span> /&gt;</div></pre></td></tr></table></figure></p>\n<p>这时我们在IDE预览界面是可以看到文字的，打包成apk运行在手机上时是看不到的。<br>总之，<code>tools</code>可以告诉<code>Android Studio</code>哪些属性在运行的时候是被忽略的，只在设计布局的时候有效。基本上原生控件的属性都可以这么使用。</p>\n<h6 id=\"tools-context\"><a href=\"#tools-context\" class=\"headerlink\" title=\"tools:context\"></a>tools:context</h6><p><strong>Intended for:</strong> <em>Any root View</em><br><strong>Used by:</strong>  <em>Lint, Android Studio layout editor</em><br>这个属性告诉IDE当前布局和哪个activity相关联，在预览界面使用关联Activity的主题展示。<br><figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">android.support.constraint.ConstraintLayout</span></span></div><div class=\"line\">    <span class=\"attr\">xmlns:android</span>=<span class=\"string\">\"http://schemas.android.com/apk/res/android\"</span></div><div class=\"line\">    <span class=\"attr\">xmlns:tools</span>=<span class=\"string\">\"http://schemas.android.com/tools\"</span></div><div class=\"line\">    <span class=\"attr\">tools:context</span>=<span class=\"string\">\".MainActivity\"</span> &gt;</div></pre></td></tr></table></figure></p>\n<h6 id=\"tools-itemCount\"><a href=\"#tools-itemCount\" class=\"headerlink\" title=\"tools:itemCount\"></a>tools:itemCount</h6><p><strong>Intended for:</strong> <em>RecyclerView</em><br><strong>Used by:</strong> <em>Android Studio layout editor</em><br>这个属性告诉编辑器在预览窗口展示多少个列表项<br><figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">android.support.v7.widget.RecyclerView</span></span></div><div class=\"line\">    <span class=\"attr\">android:id</span>=<span class=\"string\">\"@+id/recyclerView\"</span></div><div class=\"line\">    <span class=\"attr\">android:layout_width</span>=<span class=\"string\">\"match_parent\"</span></div><div class=\"line\">    <span class=\"attr\">android:layout_height</span>=<span class=\"string\">\"match_parent\"</span></div><div class=\"line\">    <span class=\"attr\">tools:itemCount</span>=<span class=\"string\">\"3\"</span>/&gt;</div></pre></td></tr></table></figure></p>\n<h6 id=\"tools-layout\"><a href=\"#tools-layout\" class=\"headerlink\" title=\"tools:layout\"></a>tools:layout</h6><p><strong>Intended for:</strong> <em><code>fragment</code></em><br><strong>Used by:</strong> <em>Android Studio layout editor</em><br>这个属性告诉编辑器fragment中显示哪个布局文件<br><figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">fragment</span> <span class=\"attr\">android:name</span>=<span class=\"string\">\"com.example.master.ItemListFragment\"</span></span></div><div class=\"line\">    <span class=\"attr\">tools:layout</span>=<span class=\"string\">\"@layout/list_content\"</span> /&gt;</div></pre></td></tr></table></figure></p>\n<h6 id=\"tools-listitem-tools-listheader-tools-listfooter\"><a href=\"#tools-listitem-tools-listheader-tools-listfooter\" class=\"headerlink\" title=\"tools:listitem / tools:listheader / tools:listfooter\"></a>tools:listitem / tools:listheader / tools:listfooter</h6><p><strong>Intended for:</strong> <em><code>AdapterView</code> (and subclasses like <code>ListView</code>)</em><br><strong>Used by:</strong> <em>Android Studio layout editor</em><br>看属性名字就能猜出来了，预览界面显示列表的头部，底部和列表项布局<br><figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">ListView</span> <span class=\"attr\">xmlns:android</span>=<span class=\"string\">\"http://schemas.android.com/apk/res/android\"</span></span></div><div class=\"line\">    <span class=\"attr\">xmlns:tools</span>=<span class=\"string\">\"http://schemas.android.com/tools\"</span></div><div class=\"line\">    <span class=\"attr\">android:id</span>=<span class=\"string\">\"@android:id/list\"</span></div><div class=\"line\">    <span class=\"attr\">android:layout_width</span>=<span class=\"string\">\"match_parent\"</span></div><div class=\"line\">    <span class=\"attr\">android:layout_height</span>=<span class=\"string\">\"match_parent\"</span></div><div class=\"line\">    <span class=\"attr\">tools:listitem</span>=<span class=\"string\">\"@layout/sample_list_item\"</span></div><div class=\"line\">    <span class=\"attr\">tools:listheader</span>=<span class=\"string\">\"@layout/sample_list_header\"</span></div><div class=\"line\">    <span class=\"attr\">tools:listfooter</span>=<span class=\"string\">\"@layout/sample_list_footer\"</span> /&gt;</div></pre></td></tr></table></figure></p>\n<h6 id=\"tools-showIn\"><a href=\"#tools-showIn\" class=\"headerlink\" title=\"tools:showIn\"></a>tools:showIn</h6><p><strong>Intended for:</strong> <em>Any root <code>View</code> in a layout that’s referred to by an <code>include</code></em><br><strong>Used by:</strong> <em>Android Studio layout editor</em><br>此属性可以通过指向使用此布局包含的布局，因此您可以预览(和编辑)这个文件，因为它嵌入在其父布局时出现<br><figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">TextView</span> <span class=\"attr\">xmlns:android</span>=<span class=\"string\">\"http://schemas.android.com/apk/res/android\"</span></span></div><div class=\"line\">    <span class=\"attr\">xmlns:tools</span>=<span class=\"string\">\"http://schemas.android.com/tools\"</span></div><div class=\"line\">    <span class=\"attr\">android:text</span>=<span class=\"string\">\"@string/hello_world\"</span></div><div class=\"line\">    <span class=\"attr\">android:layout_width</span>=<span class=\"string\">\"wrap_content\"</span></div><div class=\"line\">    <span class=\"attr\">android:layout_height</span>=<span class=\"string\">\"wrap_content\"</span></div><div class=\"line\">    <span class=\"attr\">tools:showIn</span>=<span class=\"string\">\"@layout/activity_main\"</span> /&gt;</div></pre></td></tr></table></figure></p>\n<h6 id=\"tools-menu\"><a href=\"#tools-menu\" class=\"headerlink\" title=\"tools:menu\"></a>tools:menu</h6><p><strong>Intended for:</strong>  <em>Any root <code>View</code></em><br><strong>Used by:</strong> <em>Android Studio layout editor</em><br>此属性指定菜单应该显示在应用程序栏的布局预览。该值可以是一个或多个菜单id，由逗号分隔<br><figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">LinearLayout</span> <span class=\"attr\">xmlns:android</span>=<span class=\"string\">\"http://schemas.android.com/apk/res/android\"</span></span></div><div class=\"line\">    <span class=\"attr\">xmlns:tools</span>=<span class=\"string\">\"http://schemas.android.com/tools\"</span></div><div class=\"line\">    <span class=\"attr\">android:orientation</span>=<span class=\"string\">\"vertical\"</span></div><div class=\"line\">    <span class=\"attr\">android:layout_width</span>=<span class=\"string\">\"match_parent\"</span></div><div class=\"line\">    <span class=\"attr\">android:layout_height</span>=<span class=\"string\">\"match_parent\"</span></div><div class=\"line\">    <span class=\"attr\">tools:menu</span>=<span class=\"string\">\"menu1,menu2\"</span> /&gt;</div></pre></td></tr></table></figure></p>\n<h6 id=\"tools-minValue-tools-maxValue\"><a href=\"#tools-minValue-tools-maxValue\" class=\"headerlink\" title=\"tools:minValue / tools:maxValue\"></a>tools:minValue / tools:maxValue</h6><p><strong>Intended for:</strong> <em><code>NumberPicker</code></em><br><strong>Used by:</strong> <em>Android Studio layout editor</em><br>设置NumberPicker的最大值和最小值<br><figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">NumberPicker</span> <span class=\"attr\">xmlns:android</span>=<span class=\"string\">\"http://schemas.android.com/apk/res/android\"</span></span></div><div class=\"line\">    <span class=\"attr\">xmlns:tools</span>=<span class=\"string\">\"http://schemas.android.com/tools\"</span></div><div class=\"line\">    <span class=\"attr\">android:id</span>=<span class=\"string\">\"@+id/numberPicker\"</span></div><div class=\"line\">    <span class=\"attr\">android:layout_width</span>=<span class=\"string\">\"match_parent\"</span></div><div class=\"line\">    <span class=\"attr\">android:layout_height</span>=<span class=\"string\">\"wrap_content\"</span></div><div class=\"line\">    <span class=\"attr\">tools:minValue</span>=<span class=\"string\">\"0\"</span></div><div class=\"line\">    <span class=\"attr\">tools:maxValue</span>=<span class=\"string\">\"10\"</span> /&gt;</div></pre></td></tr></table></figure></p>\n<h6 id=\"tools-openDrawer\"><a href=\"#tools-openDrawer\" class=\"headerlink\" title=\"tools:openDrawer\"></a>tools:openDrawer</h6><p><strong>Intended for:</strong> <em><code>DrawerLayout</code></em><br><strong>Used by:</strong> <em>Android Studio layout editor</em><br>设置<code>DrawerLayout</code>在预览窗口的打开位置</p>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:center\">Constant</th>\n<th style=\"text-align:center\">Value</th>\n<th style=\"text-align:center\">Description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\">end</td>\n<td style=\"text-align:center\">800005</td>\n<td style=\"text-align:center\">Push object to the end of its container, not changing its size.</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">left</td>\n<td style=\"text-align:center\">3</td>\n<td style=\"text-align:center\">Push object to the left of its container, not changing its size.</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">right</td>\n<td style=\"text-align:center\">5</td>\n<td style=\"text-align:center\">Push object to the right of its container, not changing its size.</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">start</td>\n<td style=\"text-align:center\">800003</td>\n<td style=\"text-align:center\">Push object to the beginning of its container, not changing its size.</td>\n</tr>\n</tbody>\n</table>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">android.support.v4.widget.DrawerLayout</span></span></div><div class=\"line\">    <span class=\"attr\">xmlns:android</span>=<span class=\"string\">\"http://schemas.android.com/apk/res/android\"</span></div><div class=\"line\">    <span class=\"attr\">xmlns:tools</span>=<span class=\"string\">\"http://schemas.android.com/tools\"</span></div><div class=\"line\">    <span class=\"attr\">android:id</span>=<span class=\"string\">\"@+id/drawer_layout\"</span></div><div class=\"line\">    <span class=\"attr\">android:layout_width</span>=<span class=\"string\">\"match_parent\"</span></div><div class=\"line\">    <span class=\"attr\">android:layout_height</span>=<span class=\"string\">\"match_parent\"</span></div><div class=\"line\">    <span class=\"attr\">tools:openDrawer</span>=<span class=\"string\">\"start\"</span> /&gt;</div></pre></td></tr></table></figure>\n<p>下面的不想翻译了，链接在下面<br><a href=\"https://developer.android.com/studio/write/tool-attributes.html#resource_shrinking_attributes\" target=\"_blank\" rel=\"external\">https://developer.android.com/studio/write/tool-attributes.html#resource_shrinking_attributes</a><br>自己撸吧</p>\n<hr>\n<p>以上</p>\n","excerpt":"<p>在使用AndroidStudio创建布局文件的时候，跟布局下总是有如下代码：<br><figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">RootTag</span> <span class=\"attr\">xmlns:android</span>=<span class=\"string\">\"http://schemas.android.com/apk/res/android\"</span></div><div class=\"line\">    <span class=\"attr\">xmlns:tools</span>=<span class=\"string\">\"http://schemas.android.com/tools\"</span></div><div class=\"line\">    <span class=\"attr\">tools:context</span>=<span class=\"string\">\"***.***Activity\"</span> &gt;</span></div></pre></td></tr></table></figure></p>\n<p>于是在官网查了一下这俩货是干嘛用的，下面是自己的翻译+实践<br>","more":"<br><code>xmlns</code>的全称是<code>xmlnamespace</code>,和c++中<code>namespace</code>差不多，都是为了解决命名上的冲突问题。<br>在Android布局文件中，常见的<code>xmlns</code>大概有三个（你可以随意命名，把tools改成bug也可以，只要对应使用tools的地方都改成bug，说白了，它只是个变量而已）。<br><figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">xmlns:android=\"http://schemas.android.com/apk/res/android\"</div><div class=\"line\">xmlns:tools=\"http://schemas.android.com/tools\"</div><div class=\"line\">xmlns:app=\"http://schemas.android.com/apk/res-auto\"</div></pre></td></tr></table></figure></p>\n<h6 id=\"android\"><a href=\"#android\" class=\"headerlink\" title=\"android\"></a>android</h6><p>用于Android系统定义的一些属性</p>\n<h6 id=\"app\"><a href=\"#app\" class=\"headerlink\" title=\"app\"></a>app</h6><p>用于我们自定义的一些属性</p>\n<h6 id=\"tools\"><a href=\"#tools\" class=\"headerlink\" title=\"tools\"></a>tools</h6><p>给IDE或者预览界面用的，当打包编译时并不会包含在apk中。</p>\n<h4 id=\"tools可以干什么\"><a href=\"#tools可以干什么\" class=\"headerlink\" title=\"tools可以干什么\"></a>tools可以干什么</h4><p>先看官网介绍 <a href=\"https://developer.android.com/studio/write/tool-attributes.html\">https://developer.android.com/studio/write/tool-attributes.html</a></p>\n<blockquote>\n<p>Android Studio supports a variety of XML attributes in the tools namespace that enable design-time features (such as which layout to show in a fragment) or compile-time behaviors (such as which shrinking mode to apply to your XML resources). When you build your app, the build tools remove these attributes so there is no effect on your APK size or runtime behavior.</p>\n</blockquote>\n<p>大致意思就是说使用<code>tools</code>后面的属性不会再编译时存在，只存在于设计时的预览，不会影响apk的体积，</p>\n<h5 id=\"Error-handling-attributes\"><a href=\"#Error-handling-attributes\" class=\"headerlink\" title=\"Error handling attributes\"></a>Error handling attributes</h5><p>影响Lint提示的属性主要有下面三种：</p>\n<blockquote>\n<p><strong>tools:ignore</strong><br>Intended for: Any element<br>Used by: Lint</p>\n<p><strong>tools:targetApi</strong><br>Intended for: Any element<br>Used by: Lint</p>\n<p><strong>tools:locale</strong><br>Intended for: resources<br>Used by: Lint, Android Studio editor</p>\n</blockquote>\n<p><code>ignore</code>属性是告诉Lint忽略xml中的某些警告，比如我们在<code>ImageView</code>或者<code>ImageButton</code>中没有写<code>contentDescription</code>属性，Lint会有警告：<code>Missing contentDescription attribute on image</code>,原因是这个属性是提供无障碍阅读的，没有这个属性的话<code>Screen Reader</code>无法正常工作，但是有些特定分类的软件是不考虑这些东西的。虽然这种警告无所谓，但是对于要求代码中不能有warning的公司来说，这是不可取的，我们可以用<code>ignore</code>属性来忽略这个警告(如果你说你改了Lint的警告级别，当我没说)：<br><figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">ImageView</span></div><div class=\"line\"><span class=\"attr\">android:layout_width</span>=<span class=\"string\">\"wrap_content\"</span></div><div class=\"line\"><span class=\"attr\">android:layout_height</span>=<span class=\"string\">\"wrap_content\"</span></div><div class=\"line\"><span class=\"attr\">android:layout_marginStart</span>=<span class=\"string\">\"@dimen/margin_main\"</span></div><div class=\"line\"><span class=\"attr\">android:layout_marginTop</span>=<span class=\"string\">\"@dimen/margin_main\"</span></div><div class=\"line\"><span class=\"attr\">android:scaleType</span>=<span class=\"string\">\"center\"</span></div><div class=\"line\"><span class=\"attr\">android:src</span>=<span class=\"string\">\"@drawable/divider\"</span></div><div class=\"line\"><span class=\"attr\">tools:ignore</span>=<span class=\"string\">\"contentDescription\"</span> /&gt;</span></div></pre></td></tr></table></figure></p>\n<p><code>targetApi</code>和代码中的注解<code>@RequiresApi(api = Build.VERSION_CODES.JELLY_BEAN_MR2)</code>差不多。假设配置文件中的最小sdkLevel为11，而布局文件中使用了21的控件比如<code>GridLayout</code>,Lint会有警告，为了消除这个警告，可以这么写：<br><figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">GridLayout</span> <span class=\"attr\">xmlns:android</span>=<span class=\"string\">\"http://schemas.android.com/apk/res/android\"</span></div><div class=\"line\">    <span class=\"attr\">xmlns:tools</span>=<span class=\"string\">\"http://schemas.android.com/tools\"</span></div><div class=\"line\">    <span class=\"attr\">tools:targetApi</span>=<span class=\"string\">\"14\"</span> &gt;</span></div></pre></td></tr></table></figure></p>\n<p><code>locale</code>是告诉Lint和AndroidStudio editor默认的是什么语言，如果不指定的话，默认是英语。可以把这个属性添加到<code>values/strings.xml</code>中：<br><figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">resources</span> <span class=\"attr\">xmlns:tools</span>=<span class=\"string\">\"http://schemas.android.com/tools\"</span></div><div class=\"line\">    <span class=\"attr\">tools:locale</span>=<span class=\"string\">\"es\"</span>/&gt;</span></div></pre></td></tr></table></figure></p>\n<h5 id=\"Design-time-view-attributes-设计时试图属性\"><a href=\"#Design-time-view-attributes-设计时试图属性\" class=\"headerlink\" title=\"Design-time view attributes(设计时试图属性)\"></a>Design-time view attributes(设计时试图属性)</h5><h6 id=\"tools-instead-of-android\"><a href=\"#tools-instead-of-android\" class=\"headerlink\" title=\"tools: instead of android\"></a>tools: instead of android</h6><p><strong>Intended for:</strong> <em><code>View</code></em><br><strong>Used by:</strong>  <em>Android Studio layout editor</em></p>\n<p>我们有一个<code>TextView</code>，需要显示从网络获取到的文件，控件大小是<code>wrap_content</code>,但是<code>TextView</code>中没有文字的话在预览界面中是看不到的，大部分同学可能会使用<code>android:text=XXXX</code>这个属性，调整好布局之后再把文字删除。一两个控件还好说，控件多了指不定哪个控件就忘记删除文本了，我们可以使用<code>tools</code>这个东西：<br><figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">TextView</span></div><div class=\"line\">    <span class=\"attr\">android:id</span>=<span class=\"string\">\"@+id/unlock_bike\"</span></div><div class=\"line\">    <span class=\"attr\">android:layout_width</span>=<span class=\"string\">\"wrap_content\"</span></div><div class=\"line\">    <span class=\"attr\">android:layout_height</span>=<span class=\"string\">\"wrap_content\"</span></div><div class=\"line\">    <span class=\"attr\">android:background</span>=<span class=\"string\">\"#12345678\"</span></div><div class=\"line\">    <span class=\"attr\">android:paddingBottom</span>=<span class=\"string\">\"10dp\"</span></div><div class=\"line\">    <span class=\"attr\">android:paddingTop</span>=<span class=\"string\">\"10dp\"</span></div><div class=\"line\">    <span class=\"attr\">tools:text</span>=<span class=\"string\">\"测试用例\"</span> /&gt;</span></div></pre></td></tr></table></figure></p>\n<p>这时我们在IDE预览界面是可以看到文字的，打包成apk运行在手机上时是看不到的。<br>总之，<code>tools</code>可以告诉<code>Android Studio</code>哪些属性在运行的时候是被忽略的，只在设计布局的时候有效。基本上原生控件的属性都可以这么使用。</p>\n<h6 id=\"tools-context\"><a href=\"#tools-context\" class=\"headerlink\" title=\"tools:context\"></a>tools:context</h6><p><strong>Intended for:</strong> <em>Any root View</em><br><strong>Used by:</strong>  <em>Lint, Android Studio layout editor</em><br>这个属性告诉IDE当前布局和哪个activity相关联，在预览界面使用关联Activity的主题展示。<br><figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">android.support.constraint.ConstraintLayout</span></div><div class=\"line\">    <span class=\"attr\">xmlns:android</span>=<span class=\"string\">\"http://schemas.android.com/apk/res/android\"</span></div><div class=\"line\">    <span class=\"attr\">xmlns:tools</span>=<span class=\"string\">\"http://schemas.android.com/tools\"</span></div><div class=\"line\">    <span class=\"attr\">tools:context</span>=<span class=\"string\">\".MainActivity\"</span> &gt;</span></div></pre></td></tr></table></figure></p>\n<h6 id=\"tools-itemCount\"><a href=\"#tools-itemCount\" class=\"headerlink\" title=\"tools:itemCount\"></a>tools:itemCount</h6><p><strong>Intended for:</strong> <em>RecyclerView</em><br><strong>Used by:</strong> <em>Android Studio layout editor</em><br>这个属性告诉编辑器在预览窗口展示多少个列表项<br><figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">android.support.v7.widget.RecyclerView</span></div><div class=\"line\">    <span class=\"attr\">android:id</span>=<span class=\"string\">\"@+id/recyclerView\"</span></div><div class=\"line\">    <span class=\"attr\">android:layout_width</span>=<span class=\"string\">\"match_parent\"</span></div><div class=\"line\">    <span class=\"attr\">android:layout_height</span>=<span class=\"string\">\"match_parent\"</span></div><div class=\"line\">    <span class=\"attr\">tools:itemCount</span>=<span class=\"string\">\"3\"</span>/&gt;</span></div></pre></td></tr></table></figure></p>\n<h6 id=\"tools-layout\"><a href=\"#tools-layout\" class=\"headerlink\" title=\"tools:layout\"></a>tools:layout</h6><p><strong>Intended for:</strong> <em><code>fragment</code></em><br><strong>Used by:</strong> <em>Android Studio layout editor</em><br>这个属性告诉编辑器fragment中显示哪个布局文件<br><figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">fragment</span> <span class=\"attr\">android:name</span>=<span class=\"string\">\"com.example.master.ItemListFragment\"</span></div><div class=\"line\">    <span class=\"attr\">tools:layout</span>=<span class=\"string\">\"@layout/list_content\"</span> /&gt;</span></div></pre></td></tr></table></figure></p>\n<h6 id=\"tools-listitem-tools-listheader-tools-listfooter\"><a href=\"#tools-listitem-tools-listheader-tools-listfooter\" class=\"headerlink\" title=\"tools:listitem / tools:listheader / tools:listfooter\"></a>tools:listitem / tools:listheader / tools:listfooter</h6><p><strong>Intended for:</strong> <em><code>AdapterView</code> (and subclasses like <code>ListView</code>)</em><br><strong>Used by:</strong> <em>Android Studio layout editor</em><br>看属性名字就能猜出来了，预览界面显示列表的头部，底部和列表项布局<br><figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">ListView</span> <span class=\"attr\">xmlns:android</span>=<span class=\"string\">\"http://schemas.android.com/apk/res/android\"</span></div><div class=\"line\">    <span class=\"attr\">xmlns:tools</span>=<span class=\"string\">\"http://schemas.android.com/tools\"</span></div><div class=\"line\">    <span class=\"attr\">android:id</span>=<span class=\"string\">\"@android:id/list\"</span></div><div class=\"line\">    <span class=\"attr\">android:layout_width</span>=<span class=\"string\">\"match_parent\"</span></div><div class=\"line\">    <span class=\"attr\">android:layout_height</span>=<span class=\"string\">\"match_parent\"</span></div><div class=\"line\">    <span class=\"attr\">tools:listitem</span>=<span class=\"string\">\"@layout/sample_list_item\"</span></div><div class=\"line\">    <span class=\"attr\">tools:listheader</span>=<span class=\"string\">\"@layout/sample_list_header\"</span></div><div class=\"line\">    <span class=\"attr\">tools:listfooter</span>=<span class=\"string\">\"@layout/sample_list_footer\"</span> /&gt;</span></div></pre></td></tr></table></figure></p>\n<h6 id=\"tools-showIn\"><a href=\"#tools-showIn\" class=\"headerlink\" title=\"tools:showIn\"></a>tools:showIn</h6><p><strong>Intended for:</strong> <em>Any root <code>View</code> in a layout that’s referred to by an <code>include</code></em><br><strong>Used by:</strong> <em>Android Studio layout editor</em><br>此属性可以通过指向使用此布局包含的布局，因此您可以预览(和编辑)这个文件，因为它嵌入在其父布局时出现<br><figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">TextView</span> <span class=\"attr\">xmlns:android</span>=<span class=\"string\">\"http://schemas.android.com/apk/res/android\"</span></div><div class=\"line\">    <span class=\"attr\">xmlns:tools</span>=<span class=\"string\">\"http://schemas.android.com/tools\"</span></div><div class=\"line\">    <span class=\"attr\">android:text</span>=<span class=\"string\">\"@string/hello_world\"</span></div><div class=\"line\">    <span class=\"attr\">android:layout_width</span>=<span class=\"string\">\"wrap_content\"</span></div><div class=\"line\">    <span class=\"attr\">android:layout_height</span>=<span class=\"string\">\"wrap_content\"</span></div><div class=\"line\">    <span class=\"attr\">tools:showIn</span>=<span class=\"string\">\"@layout/activity_main\"</span> /&gt;</span></div></pre></td></tr></table></figure></p>\n<h6 id=\"tools-menu\"><a href=\"#tools-menu\" class=\"headerlink\" title=\"tools:menu\"></a>tools:menu</h6><p><strong>Intended for:</strong>  <em>Any root <code>View</code></em><br><strong>Used by:</strong> <em>Android Studio layout editor</em><br>此属性指定菜单应该显示在应用程序栏的布局预览。该值可以是一个或多个菜单id，由逗号分隔<br><figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">LinearLayout</span> <span class=\"attr\">xmlns:android</span>=<span class=\"string\">\"http://schemas.android.com/apk/res/android\"</span></div><div class=\"line\">    <span class=\"attr\">xmlns:tools</span>=<span class=\"string\">\"http://schemas.android.com/tools\"</span></div><div class=\"line\">    <span class=\"attr\">android:orientation</span>=<span class=\"string\">\"vertical\"</span></div><div class=\"line\">    <span class=\"attr\">android:layout_width</span>=<span class=\"string\">\"match_parent\"</span></div><div class=\"line\">    <span class=\"attr\">android:layout_height</span>=<span class=\"string\">\"match_parent\"</span></div><div class=\"line\">    <span class=\"attr\">tools:menu</span>=<span class=\"string\">\"menu1,menu2\"</span> /&gt;</span></div></pre></td></tr></table></figure></p>\n<h6 id=\"tools-minValue-tools-maxValue\"><a href=\"#tools-minValue-tools-maxValue\" class=\"headerlink\" title=\"tools:minValue / tools:maxValue\"></a>tools:minValue / tools:maxValue</h6><p><strong>Intended for:</strong> <em><code>NumberPicker</code></em><br><strong>Used by:</strong> <em>Android Studio layout editor</em><br>设置NumberPicker的最大值和最小值<br><figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">NumberPicker</span> <span class=\"attr\">xmlns:android</span>=<span class=\"string\">\"http://schemas.android.com/apk/res/android\"</span></div><div class=\"line\">    <span class=\"attr\">xmlns:tools</span>=<span class=\"string\">\"http://schemas.android.com/tools\"</span></div><div class=\"line\">    <span class=\"attr\">android:id</span>=<span class=\"string\">\"@+id/numberPicker\"</span></div><div class=\"line\">    <span class=\"attr\">android:layout_width</span>=<span class=\"string\">\"match_parent\"</span></div><div class=\"line\">    <span class=\"attr\">android:layout_height</span>=<span class=\"string\">\"wrap_content\"</span></div><div class=\"line\">    <span class=\"attr\">tools:minValue</span>=<span class=\"string\">\"0\"</span></div><div class=\"line\">    <span class=\"attr\">tools:maxValue</span>=<span class=\"string\">\"10\"</span> /&gt;</span></div></pre></td></tr></table></figure></p>\n<h6 id=\"tools-openDrawer\"><a href=\"#tools-openDrawer\" class=\"headerlink\" title=\"tools:openDrawer\"></a>tools:openDrawer</h6><p><strong>Intended for:</strong> <em><code>DrawerLayout</code></em><br><strong>Used by:</strong> <em>Android Studio layout editor</em><br>设置<code>DrawerLayout</code>在预览窗口的打开位置</p>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:center\">Constant</th>\n<th style=\"text-align:center\">Value</th>\n<th style=\"text-align:center\">Description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\">end</td>\n<td style=\"text-align:center\">800005</td>\n<td style=\"text-align:center\">Push object to the end of its container, not changing its size.</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">left</td>\n<td style=\"text-align:center\">3</td>\n<td style=\"text-align:center\">Push object to the left of its container, not changing its size.</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">right</td>\n<td style=\"text-align:center\">5</td>\n<td style=\"text-align:center\">Push object to the right of its container, not changing its size.</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">start</td>\n<td style=\"text-align:center\">800003</td>\n<td style=\"text-align:center\">Push object to the beginning of its container, not changing its size.</td>\n</tr>\n</tbody>\n</table>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">android.support.v4.widget.DrawerLayout</span></div><div class=\"line\">    <span class=\"attr\">xmlns:android</span>=<span class=\"string\">\"http://schemas.android.com/apk/res/android\"</span></div><div class=\"line\">    <span class=\"attr\">xmlns:tools</span>=<span class=\"string\">\"http://schemas.android.com/tools\"</span></div><div class=\"line\">    <span class=\"attr\">android:id</span>=<span class=\"string\">\"@+id/drawer_layout\"</span></div><div class=\"line\">    <span class=\"attr\">android:layout_width</span>=<span class=\"string\">\"match_parent\"</span></div><div class=\"line\">    <span class=\"attr\">android:layout_height</span>=<span class=\"string\">\"match_parent\"</span></div><div class=\"line\">    <span class=\"attr\">tools:openDrawer</span>=<span class=\"string\">\"start\"</span> /&gt;</span></div></pre></td></tr></table></figure>\n<p>下面的不想翻译了，链接在下面<br><a href=\"https://developer.android.com/studio/write/tool-attributes.html#resource_shrinking_attributes\">https://developer.android.com/studio/write/tool-attributes.html#resource_shrinking_attributes</a><br>自己撸吧</p>\n<hr>\n<p>以上</p>"},{"title":"Android多进程(一)","date":"2018-06-21T10:02:25.000Z","keywords":"多进程实现","_content":"\nReference：《Android开发艺术探索》，作者：任玉刚\n多进程基础以及一些名词\n<!-- more -->\n###### IPC\n\n进程间通信或者跨进程通信，全称：Inter-Process Communication。\n在操作系统中，线程是CPU调度的最小单元，同时线程是一种有限的系统资源。而进程一般指一个执行单元。一个进程可以包含做个线程。最简单的情况下，一个进程中可以只有一个线程，即主线程，在Android中，主线程也叫UI线程。\nIPC不是Android中所独有的，任何一个操作系统都需要有相应的IPC机制，比如windows上可以通过剪贴板、管道和邮槽等来进行进程间通信；linux上可以通过命名管道、共享内容、信号量等来进行进程间通信。Android是基于Linux内核的移动操作系统，它的进程间通信方式没有完全继承自linux，在Android中可以通过Binder轻松实现进程间通信。除了Binder，Android还支持Socket。\n\n###### 开启多进程\n\n** 指定process属性 **\n\n正常情况下，在Android中多进程是指一个应用中存在多个进程的情况，因此先忽略多个应用多进程的情况。首先在Android中使用多进程只有一种方式：在AndroidMenifest文件中指定`android:process`属性，除此之外还有一种非常规的方式，通过JNI在native层fork一个新的进程。也就是说我们无法给一个线程或者一个实体类指定其运行时所在的进程。\n\n``` xml\n<activity\n\tandroid:name=\".ui.ActivityOne\"\n\tandroid:process=\":remote\" />\n<activity\n\tandroid:name=\".ui.ActivityTwo\"\n\tandroid:process=\"com.huangyuanlove.xuan\" />\n<activity\n\tandroid:name=\".ui.ActivityThree\" />\n```\n\n假如当前应用包名为`com.huangyuanlove.ipc`，当`ActivityOne`启动时，系统会为它创建一个单独的进程，进程名为`com.huangyuanlove.ipc:remote`，当`ActivityTwo`启动时，系统也会为它创建一个进程，进程名为：`com.huangyuanlove.xuan`，当然`ActivityThree`是运行在默认进程中，默认进程是包名。\n\n** :name 和 全限定名的区别 **\n\n* “:”的含义是在当前进程名的前面附加上包名(ActivityOne)，全限定名并不会附加包名。\n* 以\":\"开头的进程属于当前应用的私有进程，其他应用的组件不可以和它跑在同一个进程中，其他不以\":\"开头的进程属于全局进程，其他应用通过ShareUID方式可以和它跑在同一个进程中。\n\n​     Android会为每一个应用分配一个UID，具有相同UID的应用才能共享数据，需要注意的是，两个应用通过ShareUID跑在同一个进程中是有要求的，需要这两个应用有相同的ShareUID并且签名相同才可以。这种情况下，他们可以互相访问对方的私有数据，还可以共享内存数据，或者说它们看起来就像是一个应用的两个部分。\n\n###### 带来的问题\n\n* 静态成员和单例模式凉凉\n* 线程同步锁机制凉凉\n* SharedPreferences可靠性凉凉\n* Application会创建多次\n\n因为开启多进程之后，就不再是同一个内存区域，所以带来第一个问题，第二个问题也是同样，不在同一个内存区域，无论是对象锁还是全局锁可靠性基本就凉了。第三个问题和多进程写sp一样，第四个问题也是显而易见的，系统在创建新进程的时候会同时分配独立的虚拟机，所以这个过程就是启动一个应用的过程。\n\n###### Parcelable 和 Serializable\n\n这个自己玩\n\n###### Binder\n\n直观的讲，Binder是Android中的一个类，它继承了IBinder接口。从IPC角度来说，Binder是Android中的一种跨进程通信方式，从Android Framework角度来说，Binder是ServiceManager连接各种Manager(ActivityManager、WindowManager，等等)和相应ManagerService的桥梁；从Android应用层来说，Binder是客户端和服务端进行通信的媒介。\n\n** 创建AIDL示例 **\n创建一个Book类，实现Parcelable接口。\n\n``` java\npublic class Book implements Parcelable {\n    private int bookId;\n    private String bookName;\n\n    public Book(int bookId, String bookName) {\n        this.bookId = bookId;\n        this.bookName = bookName;\n    }\n\n    @Override\n    public int describeContents() {\n        return 0;\n    }\n\n    @Override\n    public void writeToParcel(Parcel dest, int flags) {\n        dest.writeInt(this.bookId);\n        dest.writeString(this.bookName);\n    }\n\n    protected Book(Parcel in) {\n        this.bookId = in.readInt();\n        this.bookName = in.readString();\n    }\n\n    public static final Creator<Book> CREATOR = new Creator<Book>() {\n        @Override\n        public Book createFromParcel(Parcel source) {\n            return new Book(source);\n        }\n\n        @Override\n        public Book[] newArray(int size) {\n            return new Book[size];\n        }\n    };\n}\n\n```\n创建`IBookManager.aidl`文件，需要注意的是，在AndroidStudio中，右键创建aidl文件时候，IDE会自动创建一个和java平级的aidl文件夹，我们创建的aidl文件就在这里面。\n![create_aidl_file](/image/Android/IPC/create_aidl.png )\n** Book.aidl **\n``` java\npackage com.example.huangyuan.testandroid;\nparcelable Book;\n```\n`Book.aidl`是`Book.java`类在AIDL中的声明。\n\n** IBookManager.aidl **\n``` java\n// IBookManager.aidl\npackage com.example.huangyuan.testandroid;\nimport com.example.huangyuan.testandroid.Book;\n// Declare any non-default types here with import statements\n\ninterface IBookManager {\n    /**\n     * Demonstrates some basic types that you can use as parameters\n     * and return values in AIDL.\n     */\n    void basicTypes(int anInt, long aLong, boolean aBoolean, float aFloat,\n            double aDouble, String aString);\n\n     List<Book> getBookList();\n     void addBook(in Book book);\n}\n```\n其中 `basicTypes`是IDE自动生成的，我们自己添加 `getBookList()` 和 `addBook` 两个方法\n尽管Book类和IBookManager的包名相同，但是在IBookManager中仍要导入Book类。下面看一下IDE生成的`IBookManager.java`类，该类在`app/build/generated/source/aidl/debug/packageName`包下。\n``` java\n/*\n * This file is auto-generated.  DO NOT MODIFY.\n * Original file: /Users/huangyuan/AndroidStudioProjects/TestAndroid/app/src/main/aidl/com/example/huangyuan/testandroid/IBookManager.aidl\n */\npackage com.example.huangyuan.testandroid;\n// Declare any non-default types here with import statements\n\npublic interface IBookManager extends android.os.IInterface {\n    /**\n     * Local-side IPC implementation stub class.\n     */\n    public static abstract class Stub extends android.os.Binder implements com.example.huangyuan.testandroid.IBookManager {\n        private static final java.lang.String DESCRIPTOR = \"com.example.huangyuan.testandroid.IBookManager\";\n\n        /**\n         * Construct the stub at attach it to the interface.\n         */\n        public Stub() {\n            this.attachInterface(this, DESCRIPTOR);\n        }\n\n        /**\n         * Cast an IBinder object into an com.example.huangyuan.testandroid.IBookManager interface,\n         * generating a proxy if needed.\n         */\n        public static com.example.huangyuan.testandroid.IBookManager asInterface(android.os.IBinder obj) {\n            if ((obj == null)) {\n                return null;\n            }\n            android.os.IInterface iin = obj.queryLocalInterface(DESCRIPTOR);\n            if (((iin != null) && (iin instanceof com.example.huangyuan.testandroid.IBookManager))) {\n                return ((com.example.huangyuan.testandroid.IBookManager) iin);\n            }\n            return new com.example.huangyuan.testandroid.IBookManager.Stub.Proxy(obj);\n        }\n\n        @Override\n        public android.os.IBinder asBinder() {\n            return this;\n        }\n\n        @Override\n        public boolean onTransact(int code, android.os.Parcel data, android.os.Parcel reply, int flags) throws android.os.RemoteException {\n            switch (code) {\n                case INTERFACE_TRANSACTION: {\n                    reply.writeString(DESCRIPTOR);\n                    return true;\n                }\n                case TRANSACTION_basicTypes: {\n                    data.enforceInterface(DESCRIPTOR);\n                    int _arg0;\n                    _arg0 = data.readInt();\n                    long _arg1;\n                    _arg1 = data.readLong();\n                    boolean _arg2;\n                    _arg2 = (0 != data.readInt());\n                    float _arg3;\n                    _arg3 = data.readFloat();\n                    double _arg4;\n                    _arg4 = data.readDouble();\n                    java.lang.String _arg5;\n                    _arg5 = data.readString();\n                    this.basicTypes(_arg0, _arg1, _arg2, _arg3, _arg4, _arg5);\n                    reply.writeNoException();\n                    return true;\n                }\n                case TRANSACTION_getBookList: {\n                    data.enforceInterface(DESCRIPTOR);\n                    java.util.List<com.example.huangyuan.testandroid.Book> _result = this.getBookList();\n                    reply.writeNoException();\n                    reply.writeTypedList(_result);\n                    return true;\n                }\n                case TRANSACTION_addBook: {\n                    data.enforceInterface(DESCRIPTOR);\n                    com.example.huangyuan.testandroid.Book _arg0;\n                    if ((0 != data.readInt())) {\n                        _arg0 = com.example.huangyuan.testandroid.Book.CREATOR.createFromParcel(data);\n                    } else {\n                        _arg0 = null;\n                    }\n                    this.addBook(_arg0);\n                    reply.writeNoException();\n                    return true;\n                }\n            }\n            return super.onTransact(code, data, reply, flags);\n        }\n\n        private static class Proxy implements com.example.huangyuan.testandroid.IBookManager {\n            private android.os.IBinder mRemote;\n\n            Proxy(android.os.IBinder remote) {\n                mRemote = remote;\n            }\n\n            @Override\n            public android.os.IBinder asBinder() {\n                return mRemote;\n            }\n\n            public java.lang.String getInterfaceDescriptor() {\n                return DESCRIPTOR;\n            }\n\n            /**\n             * Demonstrates some basic types that you can use as parameters\n             * and return values in AIDL.\n             */\n            @Override\n            public void basicTypes(int anInt, long aLong, boolean aBoolean, float aFloat, double aDouble, java.lang.String aString) throws android.os.RemoteException {\n                android.os.Parcel _data = android.os.Parcel.obtain();\n                android.os.Parcel _reply = android.os.Parcel.obtain();\n                try {\n                    _data.writeInterfaceToken(DESCRIPTOR);\n                    _data.writeInt(anInt);\n                    _data.writeLong(aLong);\n                    _data.writeInt(((aBoolean) ? (1) : (0)));\n                    _data.writeFloat(aFloat);\n                    _data.writeDouble(aDouble);\n                    _data.writeString(aString);\n                    mRemote.transact(Stub.TRANSACTION_basicTypes, _data, _reply, 0);\n                    _reply.readException();\n                } finally {\n                    _reply.recycle();\n                    _data.recycle();\n                }\n            }\n\n            @Override\n            public java.util.List<com.example.huangyuan.testandroid.Book> getBookList() throws android.os.RemoteException {\n                android.os.Parcel _data = android.os.Parcel.obtain();\n                android.os.Parcel _reply = android.os.Parcel.obtain();\n                java.util.List<com.example.huangyuan.testandroid.Book> _result;\n                try {\n                    _data.writeInterfaceToken(DESCRIPTOR);\n                    mRemote.transact(Stub.TRANSACTION_getBookList, _data, _reply, 0);\n                    _reply.readException();\n                    _result = _reply.createTypedArrayList(com.example.huangyuan.testandroid.Book.CREATOR);\n                } finally {\n                    _reply.recycle();\n                    _data.recycle();\n                }\n                return _result;\n            }\n\n            @Override\n            public void addBook(com.example.huangyuan.testandroid.Book book) throws android.os.RemoteException {\n                android.os.Parcel _data = android.os.Parcel.obtain();\n                android.os.Parcel _reply = android.os.Parcel.obtain();\n                try {\n                    _data.writeInterfaceToken(DESCRIPTOR);\n                    if ((book != null)) {\n                        _data.writeInt(1);\n                        book.writeToParcel(_data, 0);\n                    } else {\n                        _data.writeInt(0);\n                    }\n                    mRemote.transact(Stub.TRANSACTION_addBook, _data, _reply, 0);\n                    _reply.readException();\n                } finally {\n                    _reply.recycle();\n                    _data.recycle();\n                }\n            }\n        }\n\n        static final int TRANSACTION_basicTypes = (android.os.IBinder.FIRST_CALL_TRANSACTION + 0);\n        static final int TRANSACTION_getBookList = (android.os.IBinder.FIRST_CALL_TRANSACTION + 1);\n        static final int TRANSACTION_addBook = (android.os.IBinder.FIRST_CALL_TRANSACTION + 2);\n    }\n\n    /**\n     * Demonstrates some basic types that you can use as parameters\n     * and return values in AIDL.\n     */\n    public void basicTypes(int anInt, long aLong, boolean aBoolean, float aFloat, double aDouble, java.lang.String aString) throws android.os.RemoteException;\n\n    public java.util.List<com.example.huangyuan.testandroid.Book> getBookList() throws android.os.RemoteException;\n\n    public void addBook(com.example.huangyuan.testandroid.Book book) throws android.os.RemoteException;\n}\n\n```\n\n结构比较简单，最外面是IBookManager接口，\n其中声明了一个抽象内部类Stub，在该类中，声明了一个Proxy代理类。还声明了三个静态变量来标志aidl文件中的三个方法。这个Stub就是一个Binder类，当客户端和服务端都位于同一个进程时，方法调用不会走跨进程的transact过程，而当两者位于不同进程时，方法调用需要走transact过程，这个逻辑由内部Proxy类来完成。\n最后，声明了aidl文件中的三个方法。\n下面详细介绍：\n** DESCRIPTOR **\nBinder的唯一标示，一般用当前Binder的类名标示\n\n** asInterface(android.os.IBinder obj) **\n用于将服务端的BInder对象转换成客户端所需的AIDL借口类型的对象，这种转换过程是区分进程的，如果客户端和服务端位于同一进程，那么此方法返回的就是服务端的Stub对象本身，否则返回的是系统封装后的Stub.proxy对象。\n\n** asBinder **\n用于返回当前Binder对象\n\n** onTransact **\n这个方法运行在服务端中的Binder线程池中，当客户端发起跨进程请求时，远程请求会通过系统底层封装后交由此方法来处理。该方法的原型为public Boolean onTransact(int code,android.os. Parcel data,android.os.Parcel reply,int flags)。服务端通过code可以确定客户端所请求的目标方法是什么，接着从data中取出目标方法所需的参数(如果目标方法有参数的话)，然后执行目标方法。当目标方法执行完毕后，就向reply中写入返回值(如果目标方法有返回值的话)，onTransact方 法的执行过程就是这样的。需要注意的是，如果此方法返回false,那么客户端的请求会失败，因此我们可以利用这个特性来做权限验证，毕竟我们也不希望随便-一个进程都能远程调用我们的服务。\n\n** Proxy#getBookList **\n这个方法运行在客户端，当客户端远程调用此方法时，它的内部实现是这样的:首先创建该方法所需要的输入型Parcel对象_data、 输出型Parcel对象_ reply和返回值对象List;然后把该方法的参数信息写入_data中(如果有参数的话);接着调用transact方法来发起RPC (远程过程调用)请求，同时当前线程挂起;然后服务端的onTransact方法会被调用，直到RPC过程返回后，当前线程继续执行，并从_reply中 取出RPC过程的返回结果;最后返回_reply中的数据。\n\n** Proxy#addBook **\n这个方法运行在客户端，它的执行过程和getBookList是一样的，addBook没有返回值，所以它不需要从_replay中取出返回值。\n\n接下来，我们介绍Binder的两个很重要的方法linkToDeath和unlinkToDeath。我们知道，Binder运行在服务端进程，如果服务端进程由于某种原因异常终止，这个时候我们到服务端的Binder连接断裂(称之为Binder死亡)，会导致我们的远程调用失败。更为关键的是，如果我们不知道Binder连接已经断裂，那么客户端的功能就会受到影响。为了解决这个问题，Binder中提供 了两个配对的方法linkToDeath和unlinkToDeath,通过linkToDeath我们可以给Binder设置- - 个死亡代理，当Binder死亡时， 我们就会收到通知，这个时候我们就可以重新发起连接请求从而恢复连接。那么到底如何给Binder设置死亡代理呢?也很简单。\n首先，声明一个DeathRecipient对象。DeathRecipient是一个接口，其内部只有一个方法binderDied,我们需要实现这个方法，当Binder死亡的时 候，系统就会回调binderDied方法，然后我们就可以移出之前绑定的binder代理并重新绑定远程服务:\n``` java\nprivate IBinder .DeathRecipient mDeathRecipient = new IBinder.DeathRecipient() {\n\t@Override\n\tpublic void binderDied() {\n\t\tif ( mBookManager ==null)\n\t\t\t\treturn;\n\n\t\tmBookManager.asBinder().unlinkToDeath(mDeathRecipient 0);\n\t\tmBookManager = null;\n\t}\n);\n```\n其次，在客户端绑定远程服务成功后，给binder设置死亡代理。\n``` java\nmService = IMessageBoxManager.Stub.asInterface(binder);\nbinder.linkToDeath(mDeathRecipient,0);\n```\n其中linkToDeath的第二个参数是个标记位，我们直接设为0即可。经过上面两个步骤，就给我们的Binder设置了死亡代理，当Binder死 亡的时候我们就可以收到通知了。另外，通过Binder的 方法isBinderAlive也可以判断Binder是否死亡。\n\n** 这一篇全部都是抄的《Android开发艺术探索》第2.3.3Binder 章节上的内容，毕竟一直带着书也不现实 **\n----\n以上","source":"_posts/Android多进程-一.md","raw":"---\ntitle: Android多进程(一)\ndate: 2018-06-21 18:02:25\ntags: [Android]\nkeywords: 多进程实现\n---\n\nReference：《Android开发艺术探索》，作者：任玉刚\n多进程基础以及一些名词\n<!-- more -->\n###### IPC\n\n进程间通信或者跨进程通信，全称：Inter-Process Communication。\n在操作系统中，线程是CPU调度的最小单元，同时线程是一种有限的系统资源。而进程一般指一个执行单元。一个进程可以包含做个线程。最简单的情况下，一个进程中可以只有一个线程，即主线程，在Android中，主线程也叫UI线程。\nIPC不是Android中所独有的，任何一个操作系统都需要有相应的IPC机制，比如windows上可以通过剪贴板、管道和邮槽等来进行进程间通信；linux上可以通过命名管道、共享内容、信号量等来进行进程间通信。Android是基于Linux内核的移动操作系统，它的进程间通信方式没有完全继承自linux，在Android中可以通过Binder轻松实现进程间通信。除了Binder，Android还支持Socket。\n\n###### 开启多进程\n\n** 指定process属性 **\n\n正常情况下，在Android中多进程是指一个应用中存在多个进程的情况，因此先忽略多个应用多进程的情况。首先在Android中使用多进程只有一种方式：在AndroidMenifest文件中指定`android:process`属性，除此之外还有一种非常规的方式，通过JNI在native层fork一个新的进程。也就是说我们无法给一个线程或者一个实体类指定其运行时所在的进程。\n\n``` xml\n<activity\n\tandroid:name=\".ui.ActivityOne\"\n\tandroid:process=\":remote\" />\n<activity\n\tandroid:name=\".ui.ActivityTwo\"\n\tandroid:process=\"com.huangyuanlove.xuan\" />\n<activity\n\tandroid:name=\".ui.ActivityThree\" />\n```\n\n假如当前应用包名为`com.huangyuanlove.ipc`，当`ActivityOne`启动时，系统会为它创建一个单独的进程，进程名为`com.huangyuanlove.ipc:remote`，当`ActivityTwo`启动时，系统也会为它创建一个进程，进程名为：`com.huangyuanlove.xuan`，当然`ActivityThree`是运行在默认进程中，默认进程是包名。\n\n** :name 和 全限定名的区别 **\n\n* “:”的含义是在当前进程名的前面附加上包名(ActivityOne)，全限定名并不会附加包名。\n* 以\":\"开头的进程属于当前应用的私有进程，其他应用的组件不可以和它跑在同一个进程中，其他不以\":\"开头的进程属于全局进程，其他应用通过ShareUID方式可以和它跑在同一个进程中。\n\n​     Android会为每一个应用分配一个UID，具有相同UID的应用才能共享数据，需要注意的是，两个应用通过ShareUID跑在同一个进程中是有要求的，需要这两个应用有相同的ShareUID并且签名相同才可以。这种情况下，他们可以互相访问对方的私有数据，还可以共享内存数据，或者说它们看起来就像是一个应用的两个部分。\n\n###### 带来的问题\n\n* 静态成员和单例模式凉凉\n* 线程同步锁机制凉凉\n* SharedPreferences可靠性凉凉\n* Application会创建多次\n\n因为开启多进程之后，就不再是同一个内存区域，所以带来第一个问题，第二个问题也是同样，不在同一个内存区域，无论是对象锁还是全局锁可靠性基本就凉了。第三个问题和多进程写sp一样，第四个问题也是显而易见的，系统在创建新进程的时候会同时分配独立的虚拟机，所以这个过程就是启动一个应用的过程。\n\n###### Parcelable 和 Serializable\n\n这个自己玩\n\n###### Binder\n\n直观的讲，Binder是Android中的一个类，它继承了IBinder接口。从IPC角度来说，Binder是Android中的一种跨进程通信方式，从Android Framework角度来说，Binder是ServiceManager连接各种Manager(ActivityManager、WindowManager，等等)和相应ManagerService的桥梁；从Android应用层来说，Binder是客户端和服务端进行通信的媒介。\n\n** 创建AIDL示例 **\n创建一个Book类，实现Parcelable接口。\n\n``` java\npublic class Book implements Parcelable {\n    private int bookId;\n    private String bookName;\n\n    public Book(int bookId, String bookName) {\n        this.bookId = bookId;\n        this.bookName = bookName;\n    }\n\n    @Override\n    public int describeContents() {\n        return 0;\n    }\n\n    @Override\n    public void writeToParcel(Parcel dest, int flags) {\n        dest.writeInt(this.bookId);\n        dest.writeString(this.bookName);\n    }\n\n    protected Book(Parcel in) {\n        this.bookId = in.readInt();\n        this.bookName = in.readString();\n    }\n\n    public static final Creator<Book> CREATOR = new Creator<Book>() {\n        @Override\n        public Book createFromParcel(Parcel source) {\n            return new Book(source);\n        }\n\n        @Override\n        public Book[] newArray(int size) {\n            return new Book[size];\n        }\n    };\n}\n\n```\n创建`IBookManager.aidl`文件，需要注意的是，在AndroidStudio中，右键创建aidl文件时候，IDE会自动创建一个和java平级的aidl文件夹，我们创建的aidl文件就在这里面。\n![create_aidl_file](/image/Android/IPC/create_aidl.png )\n** Book.aidl **\n``` java\npackage com.example.huangyuan.testandroid;\nparcelable Book;\n```\n`Book.aidl`是`Book.java`类在AIDL中的声明。\n\n** IBookManager.aidl **\n``` java\n// IBookManager.aidl\npackage com.example.huangyuan.testandroid;\nimport com.example.huangyuan.testandroid.Book;\n// Declare any non-default types here with import statements\n\ninterface IBookManager {\n    /**\n     * Demonstrates some basic types that you can use as parameters\n     * and return values in AIDL.\n     */\n    void basicTypes(int anInt, long aLong, boolean aBoolean, float aFloat,\n            double aDouble, String aString);\n\n     List<Book> getBookList();\n     void addBook(in Book book);\n}\n```\n其中 `basicTypes`是IDE自动生成的，我们自己添加 `getBookList()` 和 `addBook` 两个方法\n尽管Book类和IBookManager的包名相同，但是在IBookManager中仍要导入Book类。下面看一下IDE生成的`IBookManager.java`类，该类在`app/build/generated/source/aidl/debug/packageName`包下。\n``` java\n/*\n * This file is auto-generated.  DO NOT MODIFY.\n * Original file: /Users/huangyuan/AndroidStudioProjects/TestAndroid/app/src/main/aidl/com/example/huangyuan/testandroid/IBookManager.aidl\n */\npackage com.example.huangyuan.testandroid;\n// Declare any non-default types here with import statements\n\npublic interface IBookManager extends android.os.IInterface {\n    /**\n     * Local-side IPC implementation stub class.\n     */\n    public static abstract class Stub extends android.os.Binder implements com.example.huangyuan.testandroid.IBookManager {\n        private static final java.lang.String DESCRIPTOR = \"com.example.huangyuan.testandroid.IBookManager\";\n\n        /**\n         * Construct the stub at attach it to the interface.\n         */\n        public Stub() {\n            this.attachInterface(this, DESCRIPTOR);\n        }\n\n        /**\n         * Cast an IBinder object into an com.example.huangyuan.testandroid.IBookManager interface,\n         * generating a proxy if needed.\n         */\n        public static com.example.huangyuan.testandroid.IBookManager asInterface(android.os.IBinder obj) {\n            if ((obj == null)) {\n                return null;\n            }\n            android.os.IInterface iin = obj.queryLocalInterface(DESCRIPTOR);\n            if (((iin != null) && (iin instanceof com.example.huangyuan.testandroid.IBookManager))) {\n                return ((com.example.huangyuan.testandroid.IBookManager) iin);\n            }\n            return new com.example.huangyuan.testandroid.IBookManager.Stub.Proxy(obj);\n        }\n\n        @Override\n        public android.os.IBinder asBinder() {\n            return this;\n        }\n\n        @Override\n        public boolean onTransact(int code, android.os.Parcel data, android.os.Parcel reply, int flags) throws android.os.RemoteException {\n            switch (code) {\n                case INTERFACE_TRANSACTION: {\n                    reply.writeString(DESCRIPTOR);\n                    return true;\n                }\n                case TRANSACTION_basicTypes: {\n                    data.enforceInterface(DESCRIPTOR);\n                    int _arg0;\n                    _arg0 = data.readInt();\n                    long _arg1;\n                    _arg1 = data.readLong();\n                    boolean _arg2;\n                    _arg2 = (0 != data.readInt());\n                    float _arg3;\n                    _arg3 = data.readFloat();\n                    double _arg4;\n                    _arg4 = data.readDouble();\n                    java.lang.String _arg5;\n                    _arg5 = data.readString();\n                    this.basicTypes(_arg0, _arg1, _arg2, _arg3, _arg4, _arg5);\n                    reply.writeNoException();\n                    return true;\n                }\n                case TRANSACTION_getBookList: {\n                    data.enforceInterface(DESCRIPTOR);\n                    java.util.List<com.example.huangyuan.testandroid.Book> _result = this.getBookList();\n                    reply.writeNoException();\n                    reply.writeTypedList(_result);\n                    return true;\n                }\n                case TRANSACTION_addBook: {\n                    data.enforceInterface(DESCRIPTOR);\n                    com.example.huangyuan.testandroid.Book _arg0;\n                    if ((0 != data.readInt())) {\n                        _arg0 = com.example.huangyuan.testandroid.Book.CREATOR.createFromParcel(data);\n                    } else {\n                        _arg0 = null;\n                    }\n                    this.addBook(_arg0);\n                    reply.writeNoException();\n                    return true;\n                }\n            }\n            return super.onTransact(code, data, reply, flags);\n        }\n\n        private static class Proxy implements com.example.huangyuan.testandroid.IBookManager {\n            private android.os.IBinder mRemote;\n\n            Proxy(android.os.IBinder remote) {\n                mRemote = remote;\n            }\n\n            @Override\n            public android.os.IBinder asBinder() {\n                return mRemote;\n            }\n\n            public java.lang.String getInterfaceDescriptor() {\n                return DESCRIPTOR;\n            }\n\n            /**\n             * Demonstrates some basic types that you can use as parameters\n             * and return values in AIDL.\n             */\n            @Override\n            public void basicTypes(int anInt, long aLong, boolean aBoolean, float aFloat, double aDouble, java.lang.String aString) throws android.os.RemoteException {\n                android.os.Parcel _data = android.os.Parcel.obtain();\n                android.os.Parcel _reply = android.os.Parcel.obtain();\n                try {\n                    _data.writeInterfaceToken(DESCRIPTOR);\n                    _data.writeInt(anInt);\n                    _data.writeLong(aLong);\n                    _data.writeInt(((aBoolean) ? (1) : (0)));\n                    _data.writeFloat(aFloat);\n                    _data.writeDouble(aDouble);\n                    _data.writeString(aString);\n                    mRemote.transact(Stub.TRANSACTION_basicTypes, _data, _reply, 0);\n                    _reply.readException();\n                } finally {\n                    _reply.recycle();\n                    _data.recycle();\n                }\n            }\n\n            @Override\n            public java.util.List<com.example.huangyuan.testandroid.Book> getBookList() throws android.os.RemoteException {\n                android.os.Parcel _data = android.os.Parcel.obtain();\n                android.os.Parcel _reply = android.os.Parcel.obtain();\n                java.util.List<com.example.huangyuan.testandroid.Book> _result;\n                try {\n                    _data.writeInterfaceToken(DESCRIPTOR);\n                    mRemote.transact(Stub.TRANSACTION_getBookList, _data, _reply, 0);\n                    _reply.readException();\n                    _result = _reply.createTypedArrayList(com.example.huangyuan.testandroid.Book.CREATOR);\n                } finally {\n                    _reply.recycle();\n                    _data.recycle();\n                }\n                return _result;\n            }\n\n            @Override\n            public void addBook(com.example.huangyuan.testandroid.Book book) throws android.os.RemoteException {\n                android.os.Parcel _data = android.os.Parcel.obtain();\n                android.os.Parcel _reply = android.os.Parcel.obtain();\n                try {\n                    _data.writeInterfaceToken(DESCRIPTOR);\n                    if ((book != null)) {\n                        _data.writeInt(1);\n                        book.writeToParcel(_data, 0);\n                    } else {\n                        _data.writeInt(0);\n                    }\n                    mRemote.transact(Stub.TRANSACTION_addBook, _data, _reply, 0);\n                    _reply.readException();\n                } finally {\n                    _reply.recycle();\n                    _data.recycle();\n                }\n            }\n        }\n\n        static final int TRANSACTION_basicTypes = (android.os.IBinder.FIRST_CALL_TRANSACTION + 0);\n        static final int TRANSACTION_getBookList = (android.os.IBinder.FIRST_CALL_TRANSACTION + 1);\n        static final int TRANSACTION_addBook = (android.os.IBinder.FIRST_CALL_TRANSACTION + 2);\n    }\n\n    /**\n     * Demonstrates some basic types that you can use as parameters\n     * and return values in AIDL.\n     */\n    public void basicTypes(int anInt, long aLong, boolean aBoolean, float aFloat, double aDouble, java.lang.String aString) throws android.os.RemoteException;\n\n    public java.util.List<com.example.huangyuan.testandroid.Book> getBookList() throws android.os.RemoteException;\n\n    public void addBook(com.example.huangyuan.testandroid.Book book) throws android.os.RemoteException;\n}\n\n```\n\n结构比较简单，最外面是IBookManager接口，\n其中声明了一个抽象内部类Stub，在该类中，声明了一个Proxy代理类。还声明了三个静态变量来标志aidl文件中的三个方法。这个Stub就是一个Binder类，当客户端和服务端都位于同一个进程时，方法调用不会走跨进程的transact过程，而当两者位于不同进程时，方法调用需要走transact过程，这个逻辑由内部Proxy类来完成。\n最后，声明了aidl文件中的三个方法。\n下面详细介绍：\n** DESCRIPTOR **\nBinder的唯一标示，一般用当前Binder的类名标示\n\n** asInterface(android.os.IBinder obj) **\n用于将服务端的BInder对象转换成客户端所需的AIDL借口类型的对象，这种转换过程是区分进程的，如果客户端和服务端位于同一进程，那么此方法返回的就是服务端的Stub对象本身，否则返回的是系统封装后的Stub.proxy对象。\n\n** asBinder **\n用于返回当前Binder对象\n\n** onTransact **\n这个方法运行在服务端中的Binder线程池中，当客户端发起跨进程请求时，远程请求会通过系统底层封装后交由此方法来处理。该方法的原型为public Boolean onTransact(int code,android.os. Parcel data,android.os.Parcel reply,int flags)。服务端通过code可以确定客户端所请求的目标方法是什么，接着从data中取出目标方法所需的参数(如果目标方法有参数的话)，然后执行目标方法。当目标方法执行完毕后，就向reply中写入返回值(如果目标方法有返回值的话)，onTransact方 法的执行过程就是这样的。需要注意的是，如果此方法返回false,那么客户端的请求会失败，因此我们可以利用这个特性来做权限验证，毕竟我们也不希望随便-一个进程都能远程调用我们的服务。\n\n** Proxy#getBookList **\n这个方法运行在客户端，当客户端远程调用此方法时，它的内部实现是这样的:首先创建该方法所需要的输入型Parcel对象_data、 输出型Parcel对象_ reply和返回值对象List;然后把该方法的参数信息写入_data中(如果有参数的话);接着调用transact方法来发起RPC (远程过程调用)请求，同时当前线程挂起;然后服务端的onTransact方法会被调用，直到RPC过程返回后，当前线程继续执行，并从_reply中 取出RPC过程的返回结果;最后返回_reply中的数据。\n\n** Proxy#addBook **\n这个方法运行在客户端，它的执行过程和getBookList是一样的，addBook没有返回值，所以它不需要从_replay中取出返回值。\n\n接下来，我们介绍Binder的两个很重要的方法linkToDeath和unlinkToDeath。我们知道，Binder运行在服务端进程，如果服务端进程由于某种原因异常终止，这个时候我们到服务端的Binder连接断裂(称之为Binder死亡)，会导致我们的远程调用失败。更为关键的是，如果我们不知道Binder连接已经断裂，那么客户端的功能就会受到影响。为了解决这个问题，Binder中提供 了两个配对的方法linkToDeath和unlinkToDeath,通过linkToDeath我们可以给Binder设置- - 个死亡代理，当Binder死亡时， 我们就会收到通知，这个时候我们就可以重新发起连接请求从而恢复连接。那么到底如何给Binder设置死亡代理呢?也很简单。\n首先，声明一个DeathRecipient对象。DeathRecipient是一个接口，其内部只有一个方法binderDied,我们需要实现这个方法，当Binder死亡的时 候，系统就会回调binderDied方法，然后我们就可以移出之前绑定的binder代理并重新绑定远程服务:\n``` java\nprivate IBinder .DeathRecipient mDeathRecipient = new IBinder.DeathRecipient() {\n\t@Override\n\tpublic void binderDied() {\n\t\tif ( mBookManager ==null)\n\t\t\t\treturn;\n\n\t\tmBookManager.asBinder().unlinkToDeath(mDeathRecipient 0);\n\t\tmBookManager = null;\n\t}\n);\n```\n其次，在客户端绑定远程服务成功后，给binder设置死亡代理。\n``` java\nmService = IMessageBoxManager.Stub.asInterface(binder);\nbinder.linkToDeath(mDeathRecipient,0);\n```\n其中linkToDeath的第二个参数是个标记位，我们直接设为0即可。经过上面两个步骤，就给我们的Binder设置了死亡代理，当Binder死 亡的时候我们就可以收到通知了。另外，通过Binder的 方法isBinderAlive也可以判断Binder是否死亡。\n\n** 这一篇全部都是抄的《Android开发艺术探索》第2.3.3Binder 章节上的内容，毕竟一直带着书也不现实 **\n----\n以上","slug":"Android多进程-一","published":1,"updated":"2018-08-04T04:47:00.126Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjl3vbtqa000oisdgvty331fz","content":"<p>Reference：《Android开发艺术探索》，作者：任玉刚<br>多进程基础以及一些名词<br><a id=\"more\"></a></p>\n<h6 id=\"IPC\"><a href=\"#IPC\" class=\"headerlink\" title=\"IPC\"></a>IPC</h6><p>进程间通信或者跨进程通信，全称：Inter-Process Communication。<br>在操作系统中，线程是CPU调度的最小单元，同时线程是一种有限的系统资源。而进程一般指一个执行单元。一个进程可以包含做个线程。最简单的情况下，一个进程中可以只有一个线程，即主线程，在Android中，主线程也叫UI线程。<br>IPC不是Android中所独有的，任何一个操作系统都需要有相应的IPC机制，比如windows上可以通过剪贴板、管道和邮槽等来进行进程间通信；linux上可以通过命名管道、共享内容、信号量等来进行进程间通信。Android是基于Linux内核的移动操作系统，它的进程间通信方式没有完全继承自linux，在Android中可以通过Binder轻松实现进程间通信。除了Binder，Android还支持Socket。</p>\n<h6 id=\"开启多进程\"><a href=\"#开启多进程\" class=\"headerlink\" title=\"开启多进程\"></a>开启多进程</h6><p><strong> 指定process属性 </strong></p>\n<p>正常情况下，在Android中多进程是指一个应用中存在多个进程的情况，因此先忽略多个应用多进程的情况。首先在Android中使用多进程只有一种方式：在AndroidMenifest文件中指定<code>android:process</code>属性，除此之外还有一种非常规的方式，通过JNI在native层fork一个新的进程。也就是说我们无法给一个线程或者一个实体类指定其运行时所在的进程。</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">activity</span></span></div><div class=\"line\">\t<span class=\"attr\">android:name</span>=<span class=\"string\">\".ui.ActivityOne\"</span></div><div class=\"line\">\t<span class=\"attr\">android:process</span>=<span class=\"string\">\":remote\"</span> /&gt;</div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">activity</span></span></div><div class=\"line\">\t<span class=\"attr\">android:name</span>=<span class=\"string\">\".ui.ActivityTwo\"</span></div><div class=\"line\">\t<span class=\"attr\">android:process</span>=<span class=\"string\">\"com.huangyuanlove.xuan\"</span> /&gt;</div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">activity</span></span></div><div class=\"line\">\t<span class=\"attr\">android:name</span>=<span class=\"string\">\".ui.ActivityThree\"</span> /&gt;</div></pre></td></tr></table></figure>\n<p>假如当前应用包名为<code>com.huangyuanlove.ipc</code>，当<code>ActivityOne</code>启动时，系统会为它创建一个单独的进程，进程名为<code>com.huangyuanlove.ipc:remote</code>，当<code>ActivityTwo</code>启动时，系统也会为它创建一个进程，进程名为：<code>com.huangyuanlove.xuan</code>，当然<code>ActivityThree</code>是运行在默认进程中，默认进程是包名。</p>\n<p><strong> :name 和 全限定名的区别 </strong></p>\n<ul>\n<li>“:”的含义是在当前进程名的前面附加上包名(ActivityOne)，全限定名并不会附加包名。</li>\n<li>以”:”开头的进程属于当前应用的私有进程，其他应用的组件不可以和它跑在同一个进程中，其他不以”:”开头的进程属于全局进程，其他应用通过ShareUID方式可以和它跑在同一个进程中。</li>\n</ul>\n<p>​     Android会为每一个应用分配一个UID，具有相同UID的应用才能共享数据，需要注意的是，两个应用通过ShareUID跑在同一个进程中是有要求的，需要这两个应用有相同的ShareUID并且签名相同才可以。这种情况下，他们可以互相访问对方的私有数据，还可以共享内存数据，或者说它们看起来就像是一个应用的两个部分。</p>\n<h6 id=\"带来的问题\"><a href=\"#带来的问题\" class=\"headerlink\" title=\"带来的问题\"></a>带来的问题</h6><ul>\n<li>静态成员和单例模式凉凉</li>\n<li>线程同步锁机制凉凉</li>\n<li>SharedPreferences可靠性凉凉</li>\n<li>Application会创建多次</li>\n</ul>\n<p>因为开启多进程之后，就不再是同一个内存区域，所以带来第一个问题，第二个问题也是同样，不在同一个内存区域，无论是对象锁还是全局锁可靠性基本就凉了。第三个问题和多进程写sp一样，第四个问题也是显而易见的，系统在创建新进程的时候会同时分配独立的虚拟机，所以这个过程就是启动一个应用的过程。</p>\n<h6 id=\"Parcelable-和-Serializable\"><a href=\"#Parcelable-和-Serializable\" class=\"headerlink\" title=\"Parcelable 和 Serializable\"></a>Parcelable 和 Serializable</h6><p>这个自己玩</p>\n<h6 id=\"Binder\"><a href=\"#Binder\" class=\"headerlink\" title=\"Binder\"></a>Binder</h6><p>直观的讲，Binder是Android中的一个类，它继承了IBinder接口。从IPC角度来说，Binder是Android中的一种跨进程通信方式，从Android Framework角度来说，Binder是ServiceManager连接各种Manager(ActivityManager、WindowManager，等等)和相应ManagerService的桥梁；从Android应用层来说，Binder是客户端和服务端进行通信的媒介。</p>\n<p><strong> 创建AIDL示例 </strong><br>创建一个Book类，实现Parcelable接口。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Book</span> <span class=\"keyword\">implements</span> <span class=\"title\">Parcelable</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">int</span> bookId;</div><div class=\"line\">    <span class=\"keyword\">private</span> String bookName;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">Book</span><span class=\"params\">(<span class=\"keyword\">int</span> bookId, String bookName)</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">this</span>.bookId = bookId;</div><div class=\"line\">        <span class=\"keyword\">this</span>.bookName = bookName;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"meta\">@Override</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">describeContents</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"meta\">@Override</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">writeToParcel</span><span class=\"params\">(Parcel dest, <span class=\"keyword\">int</span> flags)</span> </span>&#123;</div><div class=\"line\">        dest.writeInt(<span class=\"keyword\">this</span>.bookId);</div><div class=\"line\">        dest.writeString(<span class=\"keyword\">this</span>.bookName);</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"title\">Book</span><span class=\"params\">(Parcel in)</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">this</span>.bookId = in.readInt();</div><div class=\"line\">        <span class=\"keyword\">this</span>.bookName = in.readString();</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> Creator&lt;Book&gt; CREATOR = <span class=\"keyword\">new</span> Creator&lt;Book&gt;() &#123;</div><div class=\"line\">        <span class=\"meta\">@Override</span></div><div class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> Book <span class=\"title\">createFromParcel</span><span class=\"params\">(Parcel source)</span> </span>&#123;</div><div class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> Book(source);</div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\">        <span class=\"meta\">@Override</span></div><div class=\"line\">        <span class=\"keyword\">public</span> Book[] newArray(<span class=\"keyword\">int</span> size) &#123;</div><div class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> Book[size];</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>创建<code>IBookManager.aidl</code>文件，需要注意的是，在AndroidStudio中，右键创建aidl文件时候，IDE会自动创建一个和java平级的aidl文件夹，我们创建的aidl文件就在这里面。<br><img src=\"/image/Android/IPC/create_aidl.png\" alt=\"create_aidl_file\"><br><strong> Book.aidl </strong><br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">package</span> com.example.huangyuan.testandroid;</div><div class=\"line\">parcelable Book;</div></pre></td></tr></table></figure></p>\n<p><code>Book.aidl</code>是<code>Book.java</code>类在AIDL中的声明。</p>\n<p><strong> IBookManager.aidl </strong><br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// IBookManager.aidl</span></div><div class=\"line\"><span class=\"keyword\">package</span> com.example.huangyuan.testandroid;</div><div class=\"line\"><span class=\"keyword\">import</span> com.example.huangyuan.testandroid.Book;</div><div class=\"line\"><span class=\"comment\">// Declare any non-default types here with import statements</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">interface</span> <span class=\"title\">IBookManager</span> </span>&#123;</div><div class=\"line\">    <span class=\"comment\">/**</span></div><div class=\"line\">     * Demonstrates some basic types that you can use as parameters</div><div class=\"line\">     * and return values in AIDL.</div><div class=\"line\">     */</div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">basicTypes</span><span class=\"params\">(<span class=\"keyword\">int</span> anInt, <span class=\"keyword\">long</span> aLong, <span class=\"keyword\">boolean</span> aBoolean, <span class=\"keyword\">float</span> aFloat,</span></span></div><div class=\"line\">            <span class=\"keyword\">double</span> aDouble, String aString);</div><div class=\"line\"></div><div class=\"line\">     <span class=\"function\">List&lt;Book&gt; <span class=\"title\">getBookList</span><span class=\"params\">()</span></span>;</div><div class=\"line\">     <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">addBook</span><span class=\"params\">(in Book book)</span></span>;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>其中 <code>basicTypes</code>是IDE自动生成的，我们自己添加 <code>getBookList()</code> 和 <code>addBook</code> 两个方法<br>尽管Book类和IBookManager的包名相同，但是在IBookManager中仍要导入Book类。下面看一下IDE生成的<code>IBookManager.java</code>类，该类在<code>app/build/generated/source/aidl/debug/packageName</code>包下。<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div><div class=\"line\">71</div><div class=\"line\">72</div><div class=\"line\">73</div><div class=\"line\">74</div><div class=\"line\">75</div><div class=\"line\">76</div><div class=\"line\">77</div><div class=\"line\">78</div><div class=\"line\">79</div><div class=\"line\">80</div><div class=\"line\">81</div><div class=\"line\">82</div><div class=\"line\">83</div><div class=\"line\">84</div><div class=\"line\">85</div><div class=\"line\">86</div><div class=\"line\">87</div><div class=\"line\">88</div><div class=\"line\">89</div><div class=\"line\">90</div><div class=\"line\">91</div><div class=\"line\">92</div><div class=\"line\">93</div><div class=\"line\">94</div><div class=\"line\">95</div><div class=\"line\">96</div><div class=\"line\">97</div><div class=\"line\">98</div><div class=\"line\">99</div><div class=\"line\">100</div><div class=\"line\">101</div><div class=\"line\">102</div><div class=\"line\">103</div><div class=\"line\">104</div><div class=\"line\">105</div><div class=\"line\">106</div><div class=\"line\">107</div><div class=\"line\">108</div><div class=\"line\">109</div><div class=\"line\">110</div><div class=\"line\">111</div><div class=\"line\">112</div><div class=\"line\">113</div><div class=\"line\">114</div><div class=\"line\">115</div><div class=\"line\">116</div><div class=\"line\">117</div><div class=\"line\">118</div><div class=\"line\">119</div><div class=\"line\">120</div><div class=\"line\">121</div><div class=\"line\">122</div><div class=\"line\">123</div><div class=\"line\">124</div><div class=\"line\">125</div><div class=\"line\">126</div><div class=\"line\">127</div><div class=\"line\">128</div><div class=\"line\">129</div><div class=\"line\">130</div><div class=\"line\">131</div><div class=\"line\">132</div><div class=\"line\">133</div><div class=\"line\">134</div><div class=\"line\">135</div><div class=\"line\">136</div><div class=\"line\">137</div><div class=\"line\">138</div><div class=\"line\">139</div><div class=\"line\">140</div><div class=\"line\">141</div><div class=\"line\">142</div><div class=\"line\">143</div><div class=\"line\">144</div><div class=\"line\">145</div><div class=\"line\">146</div><div class=\"line\">147</div><div class=\"line\">148</div><div class=\"line\">149</div><div class=\"line\">150</div><div class=\"line\">151</div><div class=\"line\">152</div><div class=\"line\">153</div><div class=\"line\">154</div><div class=\"line\">155</div><div class=\"line\">156</div><div class=\"line\">157</div><div class=\"line\">158</div><div class=\"line\">159</div><div class=\"line\">160</div><div class=\"line\">161</div><div class=\"line\">162</div><div class=\"line\">163</div><div class=\"line\">164</div><div class=\"line\">165</div><div class=\"line\">166</div><div class=\"line\">167</div><div class=\"line\">168</div><div class=\"line\">169</div><div class=\"line\">170</div><div class=\"line\">171</div><div class=\"line\">172</div><div class=\"line\">173</div><div class=\"line\">174</div><div class=\"line\">175</div><div class=\"line\">176</div><div class=\"line\">177</div><div class=\"line\">178</div><div class=\"line\">179</div><div class=\"line\">180</div><div class=\"line\">181</div><div class=\"line\">182</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">/*</span></div><div class=\"line\"> * This file is auto-generated.  DO NOT MODIFY.</div><div class=\"line\"> * Original file: /Users/huangyuan/AndroidStudioProjects/TestAndroid/app/src/main/aidl/com/example/huangyuan/testandroid/IBookManager.aidl</div><div class=\"line\"> */</div><div class=\"line\"><span class=\"keyword\">package</span> com.example.huangyuan.testandroid;</div><div class=\"line\"><span class=\"comment\">// Declare any non-default types here with import statements</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">interface</span> <span class=\"title\">IBookManager</span> <span class=\"keyword\">extends</span> <span class=\"title\">android</span>.<span class=\"title\">os</span>.<span class=\"title\">IInterface</span> </span>&#123;</div><div class=\"line\">    <span class=\"comment\">/**</span></div><div class=\"line\">     * Local-side IPC implementation stub class.</div><div class=\"line\">     */</div><div class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">abstract</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Stub</span> <span class=\"keyword\">extends</span> <span class=\"title\">android</span>.<span class=\"title\">os</span>.<span class=\"title\">Binder</span> <span class=\"keyword\">implements</span> <span class=\"title\">com</span>.<span class=\"title\">example</span>.<span class=\"title\">huangyuan</span>.<span class=\"title\">testandroid</span>.<span class=\"title\">IBookManager</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> java.lang.String DESCRIPTOR = <span class=\"string\">\"com.example.huangyuan.testandroid.IBookManager\"</span>;</div><div class=\"line\"></div><div class=\"line\">        <span class=\"comment\">/**</span></div><div class=\"line\">         * Construct the stub at attach it to the interface.</div><div class=\"line\">         */</div><div class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">Stub</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">            <span class=\"keyword\">this</span>.attachInterface(<span class=\"keyword\">this</span>, DESCRIPTOR);</div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\">        <span class=\"comment\">/**</span></div><div class=\"line\">         * Cast an IBinder object into an com.example.huangyuan.testandroid.IBookManager interface,</div><div class=\"line\">         * generating a proxy if needed.</div><div class=\"line\">         */</div><div class=\"line\">        <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> com.example.huangyuan.testandroid.<span class=\"function\">IBookManager <span class=\"title\">asInterface</span><span class=\"params\">(android.os.IBinder obj)</span> </span>&#123;</div><div class=\"line\">            <span class=\"keyword\">if</span> ((obj == <span class=\"keyword\">null</span>)) &#123;</div><div class=\"line\">                <span class=\"keyword\">return</span> <span class=\"keyword\">null</span>;</div><div class=\"line\">            &#125;</div><div class=\"line\">            android.os.IInterface iin = obj.queryLocalInterface(DESCRIPTOR);</div><div class=\"line\">            <span class=\"keyword\">if</span> (((iin != <span class=\"keyword\">null</span>) &amp;&amp; (iin <span class=\"keyword\">instanceof</span> com.example.huangyuan.testandroid.IBookManager))) &#123;</div><div class=\"line\">                <span class=\"keyword\">return</span> ((com.example.huangyuan.testandroid.IBookManager) iin);</div><div class=\"line\">            &#125;</div><div class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> com.example.huangyuan.testandroid.IBookManager.Stub.Proxy(obj);</div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\">        <span class=\"meta\">@Override</span></div><div class=\"line\">        <span class=\"keyword\">public</span> android.os.<span class=\"function\">IBinder <span class=\"title\">asBinder</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>;</div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\">        <span class=\"meta\">@Override</span></div><div class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">onTransact</span><span class=\"params\">(<span class=\"keyword\">int</span> code, android.os.Parcel data, android.os.Parcel reply, <span class=\"keyword\">int</span> flags)</span> <span class=\"keyword\">throws</span> android.os.RemoteException </span>&#123;</div><div class=\"line\">            <span class=\"keyword\">switch</span> (code) &#123;</div><div class=\"line\">                <span class=\"keyword\">case</span> INTERFACE_TRANSACTION: &#123;</div><div class=\"line\">                    reply.writeString(DESCRIPTOR);</div><div class=\"line\">                    <span class=\"keyword\">return</span> <span class=\"keyword\">true</span>;</div><div class=\"line\">                &#125;</div><div class=\"line\">                <span class=\"keyword\">case</span> TRANSACTION_basicTypes: &#123;</div><div class=\"line\">                    data.enforceInterface(DESCRIPTOR);</div><div class=\"line\">                    <span class=\"keyword\">int</span> _arg0;</div><div class=\"line\">                    _arg0 = data.readInt();</div><div class=\"line\">                    <span class=\"keyword\">long</span> _arg1;</div><div class=\"line\">                    _arg1 = data.readLong();</div><div class=\"line\">                    <span class=\"keyword\">boolean</span> _arg2;</div><div class=\"line\">                    _arg2 = (<span class=\"number\">0</span> != data.readInt());</div><div class=\"line\">                    <span class=\"keyword\">float</span> _arg3;</div><div class=\"line\">                    _arg3 = data.readFloat();</div><div class=\"line\">                    <span class=\"keyword\">double</span> _arg4;</div><div class=\"line\">                    _arg4 = data.readDouble();</div><div class=\"line\">                    java.lang.String _arg5;</div><div class=\"line\">                    _arg5 = data.readString();</div><div class=\"line\">                    <span class=\"keyword\">this</span>.basicTypes(_arg0, _arg1, _arg2, _arg3, _arg4, _arg5);</div><div class=\"line\">                    reply.writeNoException();</div><div class=\"line\">                    <span class=\"keyword\">return</span> <span class=\"keyword\">true</span>;</div><div class=\"line\">                &#125;</div><div class=\"line\">                <span class=\"keyword\">case</span> TRANSACTION_getBookList: &#123;</div><div class=\"line\">                    data.enforceInterface(DESCRIPTOR);</div><div class=\"line\">                    java.util.List&lt;com.example.huangyuan.testandroid.Book&gt; _result = <span class=\"keyword\">this</span>.getBookList();</div><div class=\"line\">                    reply.writeNoException();</div><div class=\"line\">                    reply.writeTypedList(_result);</div><div class=\"line\">                    <span class=\"keyword\">return</span> <span class=\"keyword\">true</span>;</div><div class=\"line\">                &#125;</div><div class=\"line\">                <span class=\"keyword\">case</span> TRANSACTION_addBook: &#123;</div><div class=\"line\">                    data.enforceInterface(DESCRIPTOR);</div><div class=\"line\">                    com.example.huangyuan.testandroid.Book _arg0;</div><div class=\"line\">                    <span class=\"keyword\">if</span> ((<span class=\"number\">0</span> != data.readInt())) &#123;</div><div class=\"line\">                        _arg0 = com.example.huangyuan.testandroid.Book.CREATOR.createFromParcel(data);</div><div class=\"line\">                    &#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">                        _arg0 = <span class=\"keyword\">null</span>;</div><div class=\"line\">                    &#125;</div><div class=\"line\">                    <span class=\"keyword\">this</span>.addBook(_arg0);</div><div class=\"line\">                    reply.writeNoException();</div><div class=\"line\">                    <span class=\"keyword\">return</span> <span class=\"keyword\">true</span>;</div><div class=\"line\">                &#125;</div><div class=\"line\">            &#125;</div><div class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">super</span>.onTransact(code, data, reply, flags);</div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\">        <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Proxy</span> <span class=\"keyword\">implements</span> <span class=\"title\">com</span>.<span class=\"title\">example</span>.<span class=\"title\">huangyuan</span>.<span class=\"title\">testandroid</span>.<span class=\"title\">IBookManager</span> </span>&#123;</div><div class=\"line\">            <span class=\"keyword\">private</span> android.os.IBinder mRemote;</div><div class=\"line\"></div><div class=\"line\">            Proxy(android.os.IBinder remote) &#123;</div><div class=\"line\">                mRemote = remote;</div><div class=\"line\">            &#125;</div><div class=\"line\"></div><div class=\"line\">            <span class=\"meta\">@Override</span></div><div class=\"line\">            <span class=\"keyword\">public</span> android.os.<span class=\"function\">IBinder <span class=\"title\">asBinder</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">                <span class=\"keyword\">return</span> mRemote;</div><div class=\"line\">            &#125;</div><div class=\"line\"></div><div class=\"line\">            <span class=\"keyword\">public</span> java.lang.<span class=\"function\">String <span class=\"title\">getInterfaceDescriptor</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">                <span class=\"keyword\">return</span> DESCRIPTOR;</div><div class=\"line\">            &#125;</div><div class=\"line\"></div><div class=\"line\">            <span class=\"comment\">/**</span></div><div class=\"line\">             * Demonstrates some basic types that you can use as parameters</div><div class=\"line\">             * and return values in AIDL.</div><div class=\"line\">             */</div><div class=\"line\">            <span class=\"meta\">@Override</span></div><div class=\"line\">            <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">basicTypes</span><span class=\"params\">(<span class=\"keyword\">int</span> anInt, <span class=\"keyword\">long</span> aLong, <span class=\"keyword\">boolean</span> aBoolean, <span class=\"keyword\">float</span> aFloat, <span class=\"keyword\">double</span> aDouble, java.lang.String aString)</span> <span class=\"keyword\">throws</span> android.os.RemoteException </span>&#123;</div><div class=\"line\">                android.os.Parcel _data = android.os.Parcel.obtain();</div><div class=\"line\">                android.os.Parcel _reply = android.os.Parcel.obtain();</div><div class=\"line\">                <span class=\"keyword\">try</span> &#123;</div><div class=\"line\">                    _data.writeInterfaceToken(DESCRIPTOR);</div><div class=\"line\">                    _data.writeInt(anInt);</div><div class=\"line\">                    _data.writeLong(aLong);</div><div class=\"line\">                    _data.writeInt(((aBoolean) ? (<span class=\"number\">1</span>) : (<span class=\"number\">0</span>)));</div><div class=\"line\">                    _data.writeFloat(aFloat);</div><div class=\"line\">                    _data.writeDouble(aDouble);</div><div class=\"line\">                    _data.writeString(aString);</div><div class=\"line\">                    mRemote.transact(Stub.TRANSACTION_basicTypes, _data, _reply, <span class=\"number\">0</span>);</div><div class=\"line\">                    _reply.readException();</div><div class=\"line\">                &#125; <span class=\"keyword\">finally</span> &#123;</div><div class=\"line\">                    _reply.recycle();</div><div class=\"line\">                    _data.recycle();</div><div class=\"line\">                &#125;</div><div class=\"line\">            &#125;</div><div class=\"line\"></div><div class=\"line\">            <span class=\"meta\">@Override</span></div><div class=\"line\">            <span class=\"keyword\">public</span> java.util.List&lt;com.example.huangyuan.testandroid.Book&gt; getBookList() <span class=\"keyword\">throws</span> android.os.RemoteException &#123;</div><div class=\"line\">                android.os.Parcel _data = android.os.Parcel.obtain();</div><div class=\"line\">                android.os.Parcel _reply = android.os.Parcel.obtain();</div><div class=\"line\">                java.util.List&lt;com.example.huangyuan.testandroid.Book&gt; _result;</div><div class=\"line\">                <span class=\"keyword\">try</span> &#123;</div><div class=\"line\">                    _data.writeInterfaceToken(DESCRIPTOR);</div><div class=\"line\">                    mRemote.transact(Stub.TRANSACTION_getBookList, _data, _reply, <span class=\"number\">0</span>);</div><div class=\"line\">                    _reply.readException();</div><div class=\"line\">                    _result = _reply.createTypedArrayList(com.example.huangyuan.testandroid.Book.CREATOR);</div><div class=\"line\">                &#125; <span class=\"keyword\">finally</span> &#123;</div><div class=\"line\">                    _reply.recycle();</div><div class=\"line\">                    _data.recycle();</div><div class=\"line\">                &#125;</div><div class=\"line\">                <span class=\"keyword\">return</span> _result;</div><div class=\"line\">            &#125;</div><div class=\"line\"></div><div class=\"line\">            <span class=\"meta\">@Override</span></div><div class=\"line\">            <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">addBook</span><span class=\"params\">(com.example.huangyuan.testandroid.Book book)</span> <span class=\"keyword\">throws</span> android.os.RemoteException </span>&#123;</div><div class=\"line\">                android.os.Parcel _data = android.os.Parcel.obtain();</div><div class=\"line\">                android.os.Parcel _reply = android.os.Parcel.obtain();</div><div class=\"line\">                <span class=\"keyword\">try</span> &#123;</div><div class=\"line\">                    _data.writeInterfaceToken(DESCRIPTOR);</div><div class=\"line\">                    <span class=\"keyword\">if</span> ((book != <span class=\"keyword\">null</span>)) &#123;</div><div class=\"line\">                        _data.writeInt(<span class=\"number\">1</span>);</div><div class=\"line\">                        book.writeToParcel(_data, <span class=\"number\">0</span>);</div><div class=\"line\">                    &#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">                        _data.writeInt(<span class=\"number\">0</span>);</div><div class=\"line\">                    &#125;</div><div class=\"line\">                    mRemote.transact(Stub.TRANSACTION_addBook, _data, _reply, <span class=\"number\">0</span>);</div><div class=\"line\">                    _reply.readException();</div><div class=\"line\">                &#125; <span class=\"keyword\">finally</span> &#123;</div><div class=\"line\">                    _reply.recycle();</div><div class=\"line\">                    _data.recycle();</div><div class=\"line\">                &#125;</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\">        <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> TRANSACTION_basicTypes = (android.os.IBinder.FIRST_CALL_TRANSACTION + <span class=\"number\">0</span>);</div><div class=\"line\">        <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> TRANSACTION_getBookList = (android.os.IBinder.FIRST_CALL_TRANSACTION + <span class=\"number\">1</span>);</div><div class=\"line\">        <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> TRANSACTION_addBook = (android.os.IBinder.FIRST_CALL_TRANSACTION + <span class=\"number\">2</span>);</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">/**</span></div><div class=\"line\">     * Demonstrates some basic types that you can use as parameters</div><div class=\"line\">     * and return values in AIDL.</div><div class=\"line\">     */</div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">basicTypes</span><span class=\"params\">(<span class=\"keyword\">int</span> anInt, <span class=\"keyword\">long</span> aLong, <span class=\"keyword\">boolean</span> aBoolean, <span class=\"keyword\">float</span> aFloat, <span class=\"keyword\">double</span> aDouble, java.lang.String aString)</span> <span class=\"keyword\">throws</span> android.os.RemoteException</span>;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">public</span> java.util.List&lt;com.example.huangyuan.testandroid.Book&gt; getBookList() <span class=\"keyword\">throws</span> android.os.RemoteException;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">addBook</span><span class=\"params\">(com.example.huangyuan.testandroid.Book book)</span> <span class=\"keyword\">throws</span> android.os.RemoteException</span>;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>结构比较简单，最外面是IBookManager接口，<br>其中声明了一个抽象内部类Stub，在该类中，声明了一个Proxy代理类。还声明了三个静态变量来标志aidl文件中的三个方法。这个Stub就是一个Binder类，当客户端和服务端都位于同一个进程时，方法调用不会走跨进程的transact过程，而当两者位于不同进程时，方法调用需要走transact过程，这个逻辑由内部Proxy类来完成。<br>最后，声明了aidl文件中的三个方法。<br>下面详细介绍：<br><strong> DESCRIPTOR </strong><br>Binder的唯一标示，一般用当前Binder的类名标示</p>\n<p><strong> asInterface(android.os.IBinder obj) </strong><br>用于将服务端的BInder对象转换成客户端所需的AIDL借口类型的对象，这种转换过程是区分进程的，如果客户端和服务端位于同一进程，那么此方法返回的就是服务端的Stub对象本身，否则返回的是系统封装后的Stub.proxy对象。</p>\n<p><strong> asBinder </strong><br>用于返回当前Binder对象</p>\n<p><strong> onTransact </strong><br>这个方法运行在服务端中的Binder线程池中，当客户端发起跨进程请求时，远程请求会通过系统底层封装后交由此方法来处理。该方法的原型为public Boolean onTransact(int code,android.os. Parcel data,android.os.Parcel reply,int flags)。服务端通过code可以确定客户端所请求的目标方法是什么，接着从data中取出目标方法所需的参数(如果目标方法有参数的话)，然后执行目标方法。当目标方法执行完毕后，就向reply中写入返回值(如果目标方法有返回值的话)，onTransact方 法的执行过程就是这样的。需要注意的是，如果此方法返回false,那么客户端的请求会失败，因此我们可以利用这个特性来做权限验证，毕竟我们也不希望随便-一个进程都能远程调用我们的服务。</p>\n<p><strong> Proxy#getBookList </strong><br>这个方法运行在客户端，当客户端远程调用此方法时，它的内部实现是这样的:首先创建该方法所需要的输入型Parcel对象<em>data、 输出型Parcel对象</em> reply和返回值对象List;然后把该方法的参数信息写入_data中(如果有参数的话);接着调用transact方法来发起RPC (远程过程调用)请求，同时当前线程挂起;然后服务端的onTransact方法会被调用，直到RPC过程返回后，当前线程继续执行，并从_reply中 取出RPC过程的返回结果;最后返回_reply中的数据。</p>\n<p><strong> Proxy#addBook </strong><br>这个方法运行在客户端，它的执行过程和getBookList是一样的，addBook没有返回值，所以它不需要从_replay中取出返回值。</p>\n<p>接下来，我们介绍Binder的两个很重要的方法linkToDeath和unlinkToDeath。我们知道，Binder运行在服务端进程，如果服务端进程由于某种原因异常终止，这个时候我们到服务端的Binder连接断裂(称之为Binder死亡)，会导致我们的远程调用失败。更为关键的是，如果我们不知道Binder连接已经断裂，那么客户端的功能就会受到影响。为了解决这个问题，Binder中提供 了两个配对的方法linkToDeath和unlinkToDeath,通过linkToDeath我们可以给Binder设置- - 个死亡代理，当Binder死亡时， 我们就会收到通知，这个时候我们就可以重新发起连接请求从而恢复连接。那么到底如何给Binder设置死亡代理呢?也很简单。<br>首先，声明一个DeathRecipient对象。DeathRecipient是一个接口，其内部只有一个方法binderDied,我们需要实现这个方法，当Binder死亡的时 候，系统就会回调binderDied方法，然后我们就可以移出之前绑定的binder代理并重新绑定远程服务:<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">private</span> IBinder .DeathRecipient mDeathRecipient = <span class=\"keyword\">new</span> IBinder.DeathRecipient() &#123;</div><div class=\"line\">\t<span class=\"meta\">@Override</span></div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">binderDied</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">if</span> ( mBookManager ==<span class=\"keyword\">null</span>)</div><div class=\"line\">\t\t\t\t<span class=\"keyword\">return</span>;</div><div class=\"line\"></div><div class=\"line\">\t\tmBookManager.asBinder().unlinkToDeath(mDeathRecipient <span class=\"number\">0</span>);</div><div class=\"line\">\t\tmBookManager = <span class=\"keyword\">null</span>;</div><div class=\"line\">\t&#125;</div><div class=\"line\">);</div></pre></td></tr></table></figure></p>\n<p>其次，在客户端绑定远程服务成功后，给binder设置死亡代理。<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">mService = IMessageBoxManager.Stub.asInterface(binder);</div><div class=\"line\">binder.linkToDeath(mDeathRecipient,<span class=\"number\">0</span>);</div></pre></td></tr></table></figure></p>\n<p>其中linkToDeath的第二个参数是个标记位，我们直接设为0即可。经过上面两个步骤，就给我们的Binder设置了死亡代理，当Binder死 亡的时候我们就可以收到通知了。另外，通过Binder的 方法isBinderAlive也可以判断Binder是否死亡。</p>\n<h2 id=\"这一篇全部都是抄的《Android开发艺术探索》第2-3-3Binder-章节上的内容，毕竟一直带着书也不现实\"><a href=\"#这一篇全部都是抄的《Android开发艺术探索》第2-3-3Binder-章节上的内容，毕竟一直带着书也不现实\" class=\"headerlink\" title=\" 这一篇全部都是抄的《Android开发艺术探索》第2.3.3Binder 章节上的内容，毕竟一直带着书也不现实 \"></a><strong> 这一篇全部都是抄的《Android开发艺术探索》第2.3.3Binder 章节上的内容，毕竟一直带着书也不现实 </strong></h2><p>以上</p>\n","excerpt":"<p>Reference：《Android开发艺术探索》，作者：任玉刚<br>多进程基础以及一些名词<br>","more":"</p>\n<h6 id=\"IPC\"><a href=\"#IPC\" class=\"headerlink\" title=\"IPC\"></a>IPC</h6><p>进程间通信或者跨进程通信，全称：Inter-Process Communication。<br>在操作系统中，线程是CPU调度的最小单元，同时线程是一种有限的系统资源。而进程一般指一个执行单元。一个进程可以包含做个线程。最简单的情况下，一个进程中可以只有一个线程，即主线程，在Android中，主线程也叫UI线程。<br>IPC不是Android中所独有的，任何一个操作系统都需要有相应的IPC机制，比如windows上可以通过剪贴板、管道和邮槽等来进行进程间通信；linux上可以通过命名管道、共享内容、信号量等来进行进程间通信。Android是基于Linux内核的移动操作系统，它的进程间通信方式没有完全继承自linux，在Android中可以通过Binder轻松实现进程间通信。除了Binder，Android还支持Socket。</p>\n<h6 id=\"开启多进程\"><a href=\"#开启多进程\" class=\"headerlink\" title=\"开启多进程\"></a>开启多进程</h6><p><strong> 指定process属性 </strong></p>\n<p>正常情况下，在Android中多进程是指一个应用中存在多个进程的情况，因此先忽略多个应用多进程的情况。首先在Android中使用多进程只有一种方式：在AndroidMenifest文件中指定<code>android:process</code>属性，除此之外还有一种非常规的方式，通过JNI在native层fork一个新的进程。也就是说我们无法给一个线程或者一个实体类指定其运行时所在的进程。</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">activity</span></div><div class=\"line\">\t<span class=\"attr\">android:name</span>=<span class=\"string\">\".ui.ActivityOne\"</span></div><div class=\"line\">\t<span class=\"attr\">android:process</span>=<span class=\"string\">\":remote\"</span> /&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">activity</span></div><div class=\"line\">\t<span class=\"attr\">android:name</span>=<span class=\"string\">\".ui.ActivityTwo\"</span></div><div class=\"line\">\t<span class=\"attr\">android:process</span>=<span class=\"string\">\"com.huangyuanlove.xuan\"</span> /&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">activity</span></div><div class=\"line\">\t<span class=\"attr\">android:name</span>=<span class=\"string\">\".ui.ActivityThree\"</span> /&gt;</span></div></pre></td></tr></table></figure>\n<p>假如当前应用包名为<code>com.huangyuanlove.ipc</code>，当<code>ActivityOne</code>启动时，系统会为它创建一个单独的进程，进程名为<code>com.huangyuanlove.ipc:remote</code>，当<code>ActivityTwo</code>启动时，系统也会为它创建一个进程，进程名为：<code>com.huangyuanlove.xuan</code>，当然<code>ActivityThree</code>是运行在默认进程中，默认进程是包名。</p>\n<p><strong> :name 和 全限定名的区别 </strong></p>\n<ul>\n<li>“:”的含义是在当前进程名的前面附加上包名(ActivityOne)，全限定名并不会附加包名。</li>\n<li>以”:”开头的进程属于当前应用的私有进程，其他应用的组件不可以和它跑在同一个进程中，其他不以”:”开头的进程属于全局进程，其他应用通过ShareUID方式可以和它跑在同一个进程中。</li>\n</ul>\n<p>​     Android会为每一个应用分配一个UID，具有相同UID的应用才能共享数据，需要注意的是，两个应用通过ShareUID跑在同一个进程中是有要求的，需要这两个应用有相同的ShareUID并且签名相同才可以。这种情况下，他们可以互相访问对方的私有数据，还可以共享内存数据，或者说它们看起来就像是一个应用的两个部分。</p>\n<h6 id=\"带来的问题\"><a href=\"#带来的问题\" class=\"headerlink\" title=\"带来的问题\"></a>带来的问题</h6><ul>\n<li>静态成员和单例模式凉凉</li>\n<li>线程同步锁机制凉凉</li>\n<li>SharedPreferences可靠性凉凉</li>\n<li>Application会创建多次</li>\n</ul>\n<p>因为开启多进程之后，就不再是同一个内存区域，所以带来第一个问题，第二个问题也是同样，不在同一个内存区域，无论是对象锁还是全局锁可靠性基本就凉了。第三个问题和多进程写sp一样，第四个问题也是显而易见的，系统在创建新进程的时候会同时分配独立的虚拟机，所以这个过程就是启动一个应用的过程。</p>\n<h6 id=\"Parcelable-和-Serializable\"><a href=\"#Parcelable-和-Serializable\" class=\"headerlink\" title=\"Parcelable 和 Serializable\"></a>Parcelable 和 Serializable</h6><p>这个自己玩</p>\n<h6 id=\"Binder\"><a href=\"#Binder\" class=\"headerlink\" title=\"Binder\"></a>Binder</h6><p>直观的讲，Binder是Android中的一个类，它继承了IBinder接口。从IPC角度来说，Binder是Android中的一种跨进程通信方式，从Android Framework角度来说，Binder是ServiceManager连接各种Manager(ActivityManager、WindowManager，等等)和相应ManagerService的桥梁；从Android应用层来说，Binder是客户端和服务端进行通信的媒介。</p>\n<p><strong> 创建AIDL示例 </strong><br>创建一个Book类，实现Parcelable接口。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Book</span> <span class=\"keyword\">implements</span> <span class=\"title\">Parcelable</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">int</span> bookId;</div><div class=\"line\">    <span class=\"keyword\">private</span> String bookName;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">Book</span><span class=\"params\">(<span class=\"keyword\">int</span> bookId, String bookName)</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">this</span>.bookId = bookId;</div><div class=\"line\">        <span class=\"keyword\">this</span>.bookName = bookName;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"meta\">@Override</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">describeContents</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"meta\">@Override</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">writeToParcel</span><span class=\"params\">(Parcel dest, <span class=\"keyword\">int</span> flags)</span> </span>&#123;</div><div class=\"line\">        dest.writeInt(<span class=\"keyword\">this</span>.bookId);</div><div class=\"line\">        dest.writeString(<span class=\"keyword\">this</span>.bookName);</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"title\">Book</span><span class=\"params\">(Parcel in)</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">this</span>.bookId = in.readInt();</div><div class=\"line\">        <span class=\"keyword\">this</span>.bookName = in.readString();</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> Creator&lt;Book&gt; CREATOR = <span class=\"keyword\">new</span> Creator&lt;Book&gt;() &#123;</div><div class=\"line\">        <span class=\"meta\">@Override</span></div><div class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> Book <span class=\"title\">createFromParcel</span><span class=\"params\">(Parcel source)</span> </span>&#123;</div><div class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> Book(source);</div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\">        <span class=\"meta\">@Override</span></div><div class=\"line\">        <span class=\"keyword\">public</span> Book[] newArray(<span class=\"keyword\">int</span> size) &#123;</div><div class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> Book[size];</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>创建<code>IBookManager.aidl</code>文件，需要注意的是，在AndroidStudio中，右键创建aidl文件时候，IDE会自动创建一个和java平级的aidl文件夹，我们创建的aidl文件就在这里面。<br><img src=\"/image/Android/IPC/create_aidl.png\" alt=\"create_aidl_file\"><br><strong> Book.aidl </strong><br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">package</span> com.example.huangyuan.testandroid;</div><div class=\"line\">parcelable Book;</div></pre></td></tr></table></figure></p>\n<p><code>Book.aidl</code>是<code>Book.java</code>类在AIDL中的声明。</p>\n<p><strong> IBookManager.aidl </strong><br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// IBookManager.aidl</span></div><div class=\"line\"><span class=\"keyword\">package</span> com.example.huangyuan.testandroid;</div><div class=\"line\"><span class=\"keyword\">import</span> com.example.huangyuan.testandroid.Book;</div><div class=\"line\"><span class=\"comment\">// Declare any non-default types here with import statements</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">interface</span> <span class=\"title\">IBookManager</span> </span>&#123;</div><div class=\"line\">    <span class=\"comment\">/**</div><div class=\"line\">     * Demonstrates some basic types that you can use as parameters</div><div class=\"line\">     * and return values in AIDL.</div><div class=\"line\">     */</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">basicTypes</span><span class=\"params\">(<span class=\"keyword\">int</span> anInt, <span class=\"keyword\">long</span> aLong, <span class=\"keyword\">boolean</span> aBoolean, <span class=\"keyword\">float</span> aFloat,</div><div class=\"line\">            <span class=\"keyword\">double</span> aDouble, String aString)</span></span>;</div><div class=\"line\"></div><div class=\"line\">     <span class=\"function\">List&lt;Book&gt; <span class=\"title\">getBookList</span><span class=\"params\">()</span></span>;</div><div class=\"line\">     <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">addBook</span><span class=\"params\">(in Book book)</span></span>;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>其中 <code>basicTypes</code>是IDE自动生成的，我们自己添加 <code>getBookList()</code> 和 <code>addBook</code> 两个方法<br>尽管Book类和IBookManager的包名相同，但是在IBookManager中仍要导入Book类。下面看一下IDE生成的<code>IBookManager.java</code>类，该类在<code>app/build/generated/source/aidl/debug/packageName</code>包下。<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div><div class=\"line\">71</div><div class=\"line\">72</div><div class=\"line\">73</div><div class=\"line\">74</div><div class=\"line\">75</div><div class=\"line\">76</div><div class=\"line\">77</div><div class=\"line\">78</div><div class=\"line\">79</div><div class=\"line\">80</div><div class=\"line\">81</div><div class=\"line\">82</div><div class=\"line\">83</div><div class=\"line\">84</div><div class=\"line\">85</div><div class=\"line\">86</div><div class=\"line\">87</div><div class=\"line\">88</div><div class=\"line\">89</div><div class=\"line\">90</div><div class=\"line\">91</div><div class=\"line\">92</div><div class=\"line\">93</div><div class=\"line\">94</div><div class=\"line\">95</div><div class=\"line\">96</div><div class=\"line\">97</div><div class=\"line\">98</div><div class=\"line\">99</div><div class=\"line\">100</div><div class=\"line\">101</div><div class=\"line\">102</div><div class=\"line\">103</div><div class=\"line\">104</div><div class=\"line\">105</div><div class=\"line\">106</div><div class=\"line\">107</div><div class=\"line\">108</div><div class=\"line\">109</div><div class=\"line\">110</div><div class=\"line\">111</div><div class=\"line\">112</div><div class=\"line\">113</div><div class=\"line\">114</div><div class=\"line\">115</div><div class=\"line\">116</div><div class=\"line\">117</div><div class=\"line\">118</div><div class=\"line\">119</div><div class=\"line\">120</div><div class=\"line\">121</div><div class=\"line\">122</div><div class=\"line\">123</div><div class=\"line\">124</div><div class=\"line\">125</div><div class=\"line\">126</div><div class=\"line\">127</div><div class=\"line\">128</div><div class=\"line\">129</div><div class=\"line\">130</div><div class=\"line\">131</div><div class=\"line\">132</div><div class=\"line\">133</div><div class=\"line\">134</div><div class=\"line\">135</div><div class=\"line\">136</div><div class=\"line\">137</div><div class=\"line\">138</div><div class=\"line\">139</div><div class=\"line\">140</div><div class=\"line\">141</div><div class=\"line\">142</div><div class=\"line\">143</div><div class=\"line\">144</div><div class=\"line\">145</div><div class=\"line\">146</div><div class=\"line\">147</div><div class=\"line\">148</div><div class=\"line\">149</div><div class=\"line\">150</div><div class=\"line\">151</div><div class=\"line\">152</div><div class=\"line\">153</div><div class=\"line\">154</div><div class=\"line\">155</div><div class=\"line\">156</div><div class=\"line\">157</div><div class=\"line\">158</div><div class=\"line\">159</div><div class=\"line\">160</div><div class=\"line\">161</div><div class=\"line\">162</div><div class=\"line\">163</div><div class=\"line\">164</div><div class=\"line\">165</div><div class=\"line\">166</div><div class=\"line\">167</div><div class=\"line\">168</div><div class=\"line\">169</div><div class=\"line\">170</div><div class=\"line\">171</div><div class=\"line\">172</div><div class=\"line\">173</div><div class=\"line\">174</div><div class=\"line\">175</div><div class=\"line\">176</div><div class=\"line\">177</div><div class=\"line\">178</div><div class=\"line\">179</div><div class=\"line\">180</div><div class=\"line\">181</div><div class=\"line\">182</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">/*</div><div class=\"line\"> * This file is auto-generated.  DO NOT MODIFY.</div><div class=\"line\"> * Original file: /Users/huangyuan/AndroidStudioProjects/TestAndroid/app/src/main/aidl/com/example/huangyuan/testandroid/IBookManager.aidl</div><div class=\"line\"> */</span></div><div class=\"line\"><span class=\"keyword\">package</span> com.example.huangyuan.testandroid;</div><div class=\"line\"><span class=\"comment\">// Declare any non-default types here with import statements</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">interface</span> <span class=\"title\">IBookManager</span> <span class=\"keyword\">extends</span> <span class=\"title\">android</span>.<span class=\"title\">os</span>.<span class=\"title\">IInterface</span> </span>&#123;</div><div class=\"line\">    <span class=\"comment\">/**</div><div class=\"line\">     * Local-side IPC implementation stub class.</div><div class=\"line\">     */</span></div><div class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">abstract</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Stub</span> <span class=\"keyword\">extends</span> <span class=\"title\">android</span>.<span class=\"title\">os</span>.<span class=\"title\">Binder</span> <span class=\"keyword\">implements</span> <span class=\"title\">com</span>.<span class=\"title\">example</span>.<span class=\"title\">huangyuan</span>.<span class=\"title\">testandroid</span>.<span class=\"title\">IBookManager</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> java.lang.String DESCRIPTOR = <span class=\"string\">\"com.example.huangyuan.testandroid.IBookManager\"</span>;</div><div class=\"line\"></div><div class=\"line\">        <span class=\"comment\">/**</div><div class=\"line\">         * Construct the stub at attach it to the interface.</div><div class=\"line\">         */</span></div><div class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">Stub</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">            <span class=\"keyword\">this</span>.attachInterface(<span class=\"keyword\">this</span>, DESCRIPTOR);</div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\">        <span class=\"comment\">/**</div><div class=\"line\">         * Cast an IBinder object into an com.example.huangyuan.testandroid.IBookManager interface,</div><div class=\"line\">         * generating a proxy if needed.</div><div class=\"line\">         */</span></div><div class=\"line\">        <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> com.example.huangyuan.testandroid.<span class=\"function\">IBookManager <span class=\"title\">asInterface</span><span class=\"params\">(android.os.IBinder obj)</span> </span>&#123;</div><div class=\"line\">            <span class=\"keyword\">if</span> ((obj == <span class=\"keyword\">null</span>)) &#123;</div><div class=\"line\">                <span class=\"keyword\">return</span> <span class=\"keyword\">null</span>;</div><div class=\"line\">            &#125;</div><div class=\"line\">            android.os.IInterface iin = obj.queryLocalInterface(DESCRIPTOR);</div><div class=\"line\">            <span class=\"keyword\">if</span> (((iin != <span class=\"keyword\">null</span>) &amp;&amp; (iin <span class=\"keyword\">instanceof</span> com.example.huangyuan.testandroid.IBookManager))) &#123;</div><div class=\"line\">                <span class=\"keyword\">return</span> ((com.example.huangyuan.testandroid.IBookManager) iin);</div><div class=\"line\">            &#125;</div><div class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> com.example.huangyuan.testandroid.IBookManager.Stub.Proxy(obj);</div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\">        <span class=\"meta\">@Override</span></div><div class=\"line\">        <span class=\"keyword\">public</span> android.os.<span class=\"function\">IBinder <span class=\"title\">asBinder</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>;</div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\">        <span class=\"meta\">@Override</span></div><div class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">onTransact</span><span class=\"params\">(<span class=\"keyword\">int</span> code, android.os.Parcel data, android.os.Parcel reply, <span class=\"keyword\">int</span> flags)</span> <span class=\"keyword\">throws</span> android.os.RemoteException </span>&#123;</div><div class=\"line\">            <span class=\"keyword\">switch</span> (code) &#123;</div><div class=\"line\">                <span class=\"keyword\">case</span> INTERFACE_TRANSACTION: &#123;</div><div class=\"line\">                    reply.writeString(DESCRIPTOR);</div><div class=\"line\">                    <span class=\"keyword\">return</span> <span class=\"keyword\">true</span>;</div><div class=\"line\">                &#125;</div><div class=\"line\">                <span class=\"keyword\">case</span> TRANSACTION_basicTypes: &#123;</div><div class=\"line\">                    data.enforceInterface(DESCRIPTOR);</div><div class=\"line\">                    <span class=\"keyword\">int</span> _arg0;</div><div class=\"line\">                    _arg0 = data.readInt();</div><div class=\"line\">                    <span class=\"keyword\">long</span> _arg1;</div><div class=\"line\">                    _arg1 = data.readLong();</div><div class=\"line\">                    <span class=\"keyword\">boolean</span> _arg2;</div><div class=\"line\">                    _arg2 = (<span class=\"number\">0</span> != data.readInt());</div><div class=\"line\">                    <span class=\"keyword\">float</span> _arg3;</div><div class=\"line\">                    _arg3 = data.readFloat();</div><div class=\"line\">                    <span class=\"keyword\">double</span> _arg4;</div><div class=\"line\">                    _arg4 = data.readDouble();</div><div class=\"line\">                    java.lang.String _arg5;</div><div class=\"line\">                    _arg5 = data.readString();</div><div class=\"line\">                    <span class=\"keyword\">this</span>.basicTypes(_arg0, _arg1, _arg2, _arg3, _arg4, _arg5);</div><div class=\"line\">                    reply.writeNoException();</div><div class=\"line\">                    <span class=\"keyword\">return</span> <span class=\"keyword\">true</span>;</div><div class=\"line\">                &#125;</div><div class=\"line\">                <span class=\"keyword\">case</span> TRANSACTION_getBookList: &#123;</div><div class=\"line\">                    data.enforceInterface(DESCRIPTOR);</div><div class=\"line\">                    java.util.List&lt;com.example.huangyuan.testandroid.Book&gt; _result = <span class=\"keyword\">this</span>.getBookList();</div><div class=\"line\">                    reply.writeNoException();</div><div class=\"line\">                    reply.writeTypedList(_result);</div><div class=\"line\">                    <span class=\"keyword\">return</span> <span class=\"keyword\">true</span>;</div><div class=\"line\">                &#125;</div><div class=\"line\">                <span class=\"keyword\">case</span> TRANSACTION_addBook: &#123;</div><div class=\"line\">                    data.enforceInterface(DESCRIPTOR);</div><div class=\"line\">                    com.example.huangyuan.testandroid.Book _arg0;</div><div class=\"line\">                    <span class=\"keyword\">if</span> ((<span class=\"number\">0</span> != data.readInt())) &#123;</div><div class=\"line\">                        _arg0 = com.example.huangyuan.testandroid.Book.CREATOR.createFromParcel(data);</div><div class=\"line\">                    &#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">                        _arg0 = <span class=\"keyword\">null</span>;</div><div class=\"line\">                    &#125;</div><div class=\"line\">                    <span class=\"keyword\">this</span>.addBook(_arg0);</div><div class=\"line\">                    reply.writeNoException();</div><div class=\"line\">                    <span class=\"keyword\">return</span> <span class=\"keyword\">true</span>;</div><div class=\"line\">                &#125;</div><div class=\"line\">            &#125;</div><div class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">super</span>.onTransact(code, data, reply, flags);</div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\">        <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Proxy</span> <span class=\"keyword\">implements</span> <span class=\"title\">com</span>.<span class=\"title\">example</span>.<span class=\"title\">huangyuan</span>.<span class=\"title\">testandroid</span>.<span class=\"title\">IBookManager</span> </span>&#123;</div><div class=\"line\">            <span class=\"keyword\">private</span> android.os.IBinder mRemote;</div><div class=\"line\"></div><div class=\"line\">            Proxy(android.os.IBinder remote) &#123;</div><div class=\"line\">                mRemote = remote;</div><div class=\"line\">            &#125;</div><div class=\"line\"></div><div class=\"line\">            <span class=\"meta\">@Override</span></div><div class=\"line\">            <span class=\"keyword\">public</span> android.os.<span class=\"function\">IBinder <span class=\"title\">asBinder</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">                <span class=\"keyword\">return</span> mRemote;</div><div class=\"line\">            &#125;</div><div class=\"line\"></div><div class=\"line\">            <span class=\"keyword\">public</span> java.lang.<span class=\"function\">String <span class=\"title\">getInterfaceDescriptor</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">                <span class=\"keyword\">return</span> DESCRIPTOR;</div><div class=\"line\">            &#125;</div><div class=\"line\"></div><div class=\"line\">            <span class=\"comment\">/**</div><div class=\"line\">             * Demonstrates some basic types that you can use as parameters</div><div class=\"line\">             * and return values in AIDL.</div><div class=\"line\">             */</span></div><div class=\"line\">            <span class=\"meta\">@Override</span></div><div class=\"line\">            <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">basicTypes</span><span class=\"params\">(<span class=\"keyword\">int</span> anInt, <span class=\"keyword\">long</span> aLong, <span class=\"keyword\">boolean</span> aBoolean, <span class=\"keyword\">float</span> aFloat, <span class=\"keyword\">double</span> aDouble, java.lang.String aString)</span> <span class=\"keyword\">throws</span> android.os.RemoteException </span>&#123;</div><div class=\"line\">                android.os.Parcel _data = android.os.Parcel.obtain();</div><div class=\"line\">                android.os.Parcel _reply = android.os.Parcel.obtain();</div><div class=\"line\">                <span class=\"keyword\">try</span> &#123;</div><div class=\"line\">                    _data.writeInterfaceToken(DESCRIPTOR);</div><div class=\"line\">                    _data.writeInt(anInt);</div><div class=\"line\">                    _data.writeLong(aLong);</div><div class=\"line\">                    _data.writeInt(((aBoolean) ? (<span class=\"number\">1</span>) : (<span class=\"number\">0</span>)));</div><div class=\"line\">                    _data.writeFloat(aFloat);</div><div class=\"line\">                    _data.writeDouble(aDouble);</div><div class=\"line\">                    _data.writeString(aString);</div><div class=\"line\">                    mRemote.transact(Stub.TRANSACTION_basicTypes, _data, _reply, <span class=\"number\">0</span>);</div><div class=\"line\">                    _reply.readException();</div><div class=\"line\">                &#125; <span class=\"keyword\">finally</span> &#123;</div><div class=\"line\">                    _reply.recycle();</div><div class=\"line\">                    _data.recycle();</div><div class=\"line\">                &#125;</div><div class=\"line\">            &#125;</div><div class=\"line\"></div><div class=\"line\">            <span class=\"meta\">@Override</span></div><div class=\"line\">            <span class=\"keyword\">public</span> java.util.List&lt;com.example.huangyuan.testandroid.Book&gt; getBookList() <span class=\"keyword\">throws</span> android.os.RemoteException &#123;</div><div class=\"line\">                android.os.Parcel _data = android.os.Parcel.obtain();</div><div class=\"line\">                android.os.Parcel _reply = android.os.Parcel.obtain();</div><div class=\"line\">                java.util.List&lt;com.example.huangyuan.testandroid.Book&gt; _result;</div><div class=\"line\">                <span class=\"keyword\">try</span> &#123;</div><div class=\"line\">                    _data.writeInterfaceToken(DESCRIPTOR);</div><div class=\"line\">                    mRemote.transact(Stub.TRANSACTION_getBookList, _data, _reply, <span class=\"number\">0</span>);</div><div class=\"line\">                    _reply.readException();</div><div class=\"line\">                    _result = _reply.createTypedArrayList(com.example.huangyuan.testandroid.Book.CREATOR);</div><div class=\"line\">                &#125; <span class=\"keyword\">finally</span> &#123;</div><div class=\"line\">                    _reply.recycle();</div><div class=\"line\">                    _data.recycle();</div><div class=\"line\">                &#125;</div><div class=\"line\">                <span class=\"keyword\">return</span> _result;</div><div class=\"line\">            &#125;</div><div class=\"line\"></div><div class=\"line\">            <span class=\"meta\">@Override</span></div><div class=\"line\">            <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">addBook</span><span class=\"params\">(com.example.huangyuan.testandroid.Book book)</span> <span class=\"keyword\">throws</span> android.os.RemoteException </span>&#123;</div><div class=\"line\">                android.os.Parcel _data = android.os.Parcel.obtain();</div><div class=\"line\">                android.os.Parcel _reply = android.os.Parcel.obtain();</div><div class=\"line\">                <span class=\"keyword\">try</span> &#123;</div><div class=\"line\">                    _data.writeInterfaceToken(DESCRIPTOR);</div><div class=\"line\">                    <span class=\"keyword\">if</span> ((book != <span class=\"keyword\">null</span>)) &#123;</div><div class=\"line\">                        _data.writeInt(<span class=\"number\">1</span>);</div><div class=\"line\">                        book.writeToParcel(_data, <span class=\"number\">0</span>);</div><div class=\"line\">                    &#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">                        _data.writeInt(<span class=\"number\">0</span>);</div><div class=\"line\">                    &#125;</div><div class=\"line\">                    mRemote.transact(Stub.TRANSACTION_addBook, _data, _reply, <span class=\"number\">0</span>);</div><div class=\"line\">                    _reply.readException();</div><div class=\"line\">                &#125; <span class=\"keyword\">finally</span> &#123;</div><div class=\"line\">                    _reply.recycle();</div><div class=\"line\">                    _data.recycle();</div><div class=\"line\">                &#125;</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\">        <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> TRANSACTION_basicTypes = (android.os.IBinder.FIRST_CALL_TRANSACTION + <span class=\"number\">0</span>);</div><div class=\"line\">        <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> TRANSACTION_getBookList = (android.os.IBinder.FIRST_CALL_TRANSACTION + <span class=\"number\">1</span>);</div><div class=\"line\">        <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> TRANSACTION_addBook = (android.os.IBinder.FIRST_CALL_TRANSACTION + <span class=\"number\">2</span>);</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">/**</div><div class=\"line\">     * Demonstrates some basic types that you can use as parameters</div><div class=\"line\">     * and return values in AIDL.</div><div class=\"line\">     */</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">basicTypes</span><span class=\"params\">(<span class=\"keyword\">int</span> anInt, <span class=\"keyword\">long</span> aLong, <span class=\"keyword\">boolean</span> aBoolean, <span class=\"keyword\">float</span> aFloat, <span class=\"keyword\">double</span> aDouble, java.lang.String aString)</span> <span class=\"keyword\">throws</span> android.os.RemoteException</span>;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">public</span> java.util.List&lt;com.example.huangyuan.testandroid.Book&gt; getBookList() <span class=\"keyword\">throws</span> android.os.RemoteException;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">addBook</span><span class=\"params\">(com.example.huangyuan.testandroid.Book book)</span> <span class=\"keyword\">throws</span> android.os.RemoteException</span>;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>结构比较简单，最外面是IBookManager接口，<br>其中声明了一个抽象内部类Stub，在该类中，声明了一个Proxy代理类。还声明了三个静态变量来标志aidl文件中的三个方法。这个Stub就是一个Binder类，当客户端和服务端都位于同一个进程时，方法调用不会走跨进程的transact过程，而当两者位于不同进程时，方法调用需要走transact过程，这个逻辑由内部Proxy类来完成。<br>最后，声明了aidl文件中的三个方法。<br>下面详细介绍：<br><strong> DESCRIPTOR </strong><br>Binder的唯一标示，一般用当前Binder的类名标示</p>\n<p><strong> asInterface(android.os.IBinder obj) </strong><br>用于将服务端的BInder对象转换成客户端所需的AIDL借口类型的对象，这种转换过程是区分进程的，如果客户端和服务端位于同一进程，那么此方法返回的就是服务端的Stub对象本身，否则返回的是系统封装后的Stub.proxy对象。</p>\n<p><strong> asBinder </strong><br>用于返回当前Binder对象</p>\n<p><strong> onTransact </strong><br>这个方法运行在服务端中的Binder线程池中，当客户端发起跨进程请求时，远程请求会通过系统底层封装后交由此方法来处理。该方法的原型为public Boolean onTransact(int code,android.os. Parcel data,android.os.Parcel reply,int flags)。服务端通过code可以确定客户端所请求的目标方法是什么，接着从data中取出目标方法所需的参数(如果目标方法有参数的话)，然后执行目标方法。当目标方法执行完毕后，就向reply中写入返回值(如果目标方法有返回值的话)，onTransact方 法的执行过程就是这样的。需要注意的是，如果此方法返回false,那么客户端的请求会失败，因此我们可以利用这个特性来做权限验证，毕竟我们也不希望随便-一个进程都能远程调用我们的服务。</p>\n<p><strong> Proxy#getBookList </strong><br>这个方法运行在客户端，当客户端远程调用此方法时，它的内部实现是这样的:首先创建该方法所需要的输入型Parcel对象<em>data、 输出型Parcel对象</em> reply和返回值对象List;然后把该方法的参数信息写入_data中(如果有参数的话);接着调用transact方法来发起RPC (远程过程调用)请求，同时当前线程挂起;然后服务端的onTransact方法会被调用，直到RPC过程返回后，当前线程继续执行，并从_reply中 取出RPC过程的返回结果;最后返回_reply中的数据。</p>\n<p><strong> Proxy#addBook </strong><br>这个方法运行在客户端，它的执行过程和getBookList是一样的，addBook没有返回值，所以它不需要从_replay中取出返回值。</p>\n<p>接下来，我们介绍Binder的两个很重要的方法linkToDeath和unlinkToDeath。我们知道，Binder运行在服务端进程，如果服务端进程由于某种原因异常终止，这个时候我们到服务端的Binder连接断裂(称之为Binder死亡)，会导致我们的远程调用失败。更为关键的是，如果我们不知道Binder连接已经断裂，那么客户端的功能就会受到影响。为了解决这个问题，Binder中提供 了两个配对的方法linkToDeath和unlinkToDeath,通过linkToDeath我们可以给Binder设置- - 个死亡代理，当Binder死亡时， 我们就会收到通知，这个时候我们就可以重新发起连接请求从而恢复连接。那么到底如何给Binder设置死亡代理呢?也很简单。<br>首先，声明一个DeathRecipient对象。DeathRecipient是一个接口，其内部只有一个方法binderDied,我们需要实现这个方法，当Binder死亡的时 候，系统就会回调binderDied方法，然后我们就可以移出之前绑定的binder代理并重新绑定远程服务:<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">private</span> IBinder .DeathRecipient mDeathRecipient = <span class=\"keyword\">new</span> IBinder.DeathRecipient() &#123;</div><div class=\"line\">\t<span class=\"meta\">@Override</span></div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">binderDied</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">if</span> ( mBookManager ==<span class=\"keyword\">null</span>)</div><div class=\"line\">\t\t\t\t<span class=\"keyword\">return</span>;</div><div class=\"line\"></div><div class=\"line\">\t\tmBookManager.asBinder().unlinkToDeath(mDeathRecipient <span class=\"number\">0</span>);</div><div class=\"line\">\t\tmBookManager = <span class=\"keyword\">null</span>;</div><div class=\"line\">\t&#125;</div><div class=\"line\">);</div></pre></td></tr></table></figure></p>\n<p>其次，在客户端绑定远程服务成功后，给binder设置死亡代理。<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">mService = IMessageBoxManager.Stub.asInterface(binder);</div><div class=\"line\">binder.linkToDeath(mDeathRecipient,<span class=\"number\">0</span>);</div></pre></td></tr></table></figure></p>\n<p>其中linkToDeath的第二个参数是个标记位，我们直接设为0即可。经过上面两个步骤，就给我们的Binder设置了死亡代理，当Binder死 亡的时候我们就可以收到通知了。另外，通过Binder的 方法isBinderAlive也可以判断Binder是否死亡。</p>\n<h2 id=\"这一篇全部都是抄的《Android开发艺术探索》第2-3-3Binder-章节上的内容，毕竟一直带着书也不现实\"><a href=\"#这一篇全部都是抄的《Android开发艺术探索》第2-3-3Binder-章节上的内容，毕竟一直带着书也不现实\" class=\"headerlink\" title=\" 这一篇全部都是抄的《Android开发艺术探索》第2.3.3Binder 章节上的内容，毕竟一直带着书也不现实 \"></a><strong> 这一篇全部都是抄的《Android开发艺术探索》第2.3.3Binder 章节上的内容，毕竟一直带着书也不现实 </strong></h2><p>以上</p>"},{"title":"Android多进程三","date":"2018-07-23T09:38:39.000Z","keywords":"Android多进程实现","_content":"Android中中IPC方式有很多，比如使用Bundle，使用文件共享，使用Messenger，使用AIDL，使用ContentProvider，使用Socket等。前两种方式比较简单，自己玩。\n下面主要是抄的《Android开发艺术探索》2.4.4章节，看过书的就不用看了。\n<!-- more -->\n上一篇主要抄了Messenger来进行进程间通信的方法，可以发现Messenger是以串行的方式处理客户端发来的消息，如果大量的消息同时发送到服务端，服务端仍然只能一个个处理，如果有大量的并发请求，那么用Messenger就不太合适了。同时，Messenger的作用主要是为了传递消息，很多时候我们可能需要跨进程调用服务端的方法，这种情形用Messenger就无法做到了，但是我们可以使用AIDL来实现跨进程的方法调用。AIDL也是Messenger的底层实现，因此Messenger本质上也是AIDL，只不过系统为我们做了封装从而方便上层的调用而已。在上一节中，我们介绍了Binder的概念，大家对Binder也有了一定的了解，在Binder的基础上我们可以更加容易地理解AIDL。这里先介绍使用AIDL来进行进程间通信的流程，分为服务端和客户端两个方面。\n##### 服务端\n服务端首先要创建一个Service用来监听客户端的连接请求，然后创建一个AIDL文件，将暴露给客户端的接口在这个AIDL文件中声明，最后在Service中实现这个AIDL接口即可。\n##### 客户端\n客户端所要做事情就稍微简单一些，首先需要绑定服务端的Service，绑定成功后，将服务端返回的Binder对象转成AIDL接口所属的类型，接着就可以调用AIDL中的方法了。\n\n##### 具体实现方式\n###### AIDL接口的创建\n收看看AIDL接口的创建，如下所示创建了一个后缀为AIDL的文件，在里面声明了一个接口和两个方法。创建AIDL文件的方式可以看这个[Android多进程(一)](http://blog.huangyuanlove.com/2018/06/21/Android%E5%A4%9A%E8%BF%9B%E7%A8%8B-%E4%B8%80/#more)\n\n``` java\n// IBookManager.aidl\npackage com.huangyuanlove.testandroid;\n\n// Declare any non-default types here with import statements\nimport com.huangyuanlove.testandroid.Book;\ninterface IBookManager {\n    /**\n     * Demonstrates some basic types that you can use as parameters\n     * and return values in AIDL.\n     */\n    void basicTypes(int anInt, long aLong, boolean aBoolean, float aFloat,\n            double aDouble, String aString);\n            List<Book> getBookList();\n            void addBook(in Book book);\n}\n```\n在AIDL文件中，并不是所有的数据类型都是可以使用的，只支持如下几种类型：\n* 基本数据类型（int、long、char、boolean、double等）；\n* String和CharSequence；\n* List：只支持ArrayList，里面每个元素都必须能够被AIDL支持；\n* Map：只支持HashMap，里面的每个元素都必须被AIDL支持，包括key和value；\n* Parcelable：所有实现了Parcelable接口的对象；\n* AIDL：所有的AIDL接口本身也可以在AIDL文件中使用。\n\n以上6种数据类型就是AIDL所支持的所有类型，其中自定义的Parcelable对象和AIDL对象必须要显式import进来，不管它们是否和当前的AIDL文件位于同一个包内。比如IBookManager.aidl这个文件，里面用到了Book这个类，这个类实现了Parcelable接口并且和IBookManager.aidl位于同一个包中，但是遵守AIDL的规范，我们仍然需要显式地import进来：com.huangyuanlove.testandroid.Book。\n另外一个需要注意的地方是，如果AIDL文件中用到了自定义的Parcelable对象，那么必须新建一个和它同名的AIDL文件，并在其中声明它为Parcelable类型。在上面的IBookManager.aidl中，我们用到了Book这个类，所以，我们必须要创建Book.aidl，然后在里面添加如下内容：\n``` java\npackage com.huangyuanlove.testandroid;\nparcelable Book;\n```\n\n###### 远程服务端Service的实现\n上面讲述了如何定义AIDL接口，接下来实现这个接口。先创建一个service，代码如下：\n``` java\npackage com.huangyuanlove.testandroid;\n\nimport android.app.Service;\nimport android.content.Intent;\nimport android.os.Binder;\nimport android.os.IBinder;\nimport android.os.RemoteException;\nimport android.support.annotation.Nullable;\n\nimport java.util.List;\nimport java.util.concurrent.CopyOnWriteArrayList;\n\npublic class BookManagerService extends Service {\n\n    private CopyOnWriteArrayList<Book> mBookList = new CopyOnWriteArrayList<>();\n\n    private Binder mBinder = new IBookManager.Stub() {\n        @Override\n        public void basicTypes(int anInt, long aLong, boolean aBoolean, float aFloat, double aDouble, String aString) throws RemoteException {\n        }\n\n        @Override\n        public List<Book> getBookList() throws RemoteException {\n            return mBookList;\n        }\n\n        @Override\n        public void addBook(Book book) throws RemoteException {\n            mBookList.add(book);\n        }\n    };\n\n    @Override\n    public void onCreate() {\n        super.onCreate();\n        mBookList.add(new Book(1,\"Android\"));\n        mBookList.add(new Book(2,\"IOS\"));\n    }\n\n    @Nullable\n    @Override\n    public IBinder onBind(Intent intent) {\n        return mBinder;\n    }\n}\n```\n上面是一个服务端Service的典型实现，首先在onCreate中初始化添加了两本图书的信息，然后创建了一个Binder对象并在onBind中返回它，这个对象继承`IBookManager.Stub`并实现了它内部的AIDL方法，注意这里采用了CopyOnWriteArrayList，这个CopyOnWriteArrayList支持并发读/写。在前面\n我们提到，AIDL方法是在服务端的Binder线程池中执行的，因此当多个客户端同时连接的时候，会存在多个线程同时访问的情形，所以我们要在AIDL方法中处理线程同步，而我们这里直接使用CopyOnWriteArrayList来进行自动的线程同步。AIDL中所支持的是抽象的List，而List只是一个接口，因此虽然服务端返回的是CopyOnWriteArrayList，但是在Binder中会按照List的规范去访问数据并最终形成一个新的ArrayList传递给客户端。所以，我们在服务端采用CopyOnWriteArrayList是完全可以的。和此类似的还有ConcurrentHashMap，然后我们需要在XML中注册这个Service:\n``` xml\n<service android:name=\".BookManagerService\"\n            android:process=\":remote\"/>\n```\n###### 客户端的实现\n客户端的实现就比较简单了，首先要绑定远程服务，绑定成功后将服务端返回的Binder对象转换成AIDL接口，然后就可以通过这个接口去调用服务端的远程方法了，代码如下所示：\n``` java\npublic class MainActivity extends AppCompatActivity {\n\n    private ServiceConnection mConnection = new ServiceConnection() {\n        @Override\n        public void onServiceConnected(ComponentName name, IBinder service) {\n            IBookManager bookManager= IBookManager.Stub.asInterface(service);\n            try {\n                List<Book> list = bookManager.getBookList();\n                Log.d(\"xuan\",\"bookManager.getBookList()-->\" + list.size());\n                bookManager.addBook(new Book(3,\"java\"));\n                List<Book> newList = bookManager.getBookList();\n                Log.d(\"xuan\",\"bookManager.getBookList()-->\" + newList.size());\n            }catch (RemoteException e){\n                e.printStackTrace();\n            }\n        }\n\n        @Override\n        public void onServiceDisconnected(ComponentName name) {\n\n        }\n    };\n\n    @Override\n    protected void onCreate(Bundle savedInstanceState) {\n        super.onCreate(savedInstanceState);\n        setContentView(R.layout.activity_main);\n        Intent intent = new Intent(this,BookManagerService.class);\n        bindService(intent,mConnection, Context.BIND_AUTO_CREATE);\n    }\n\n    @Override\n    protected void onDestroy() {\n        unbindService(mConnection);\n        super.onDestroy();\n\n    }\n}\n```\n绑定成功以后，会通过bookManager去调用getBookList方法，然后打印出所获取的图书信息。需要注意的是，服务端的方法有可能需要很久才能执行完毕，这个时候下面的代码就会导致ANR，这一点是需要注意的，后面会再介绍这种情况，接着再调用一下另外一个接口addBook，我们在客户端给服务端添加一本书，然后再获取一次。\n现在我们考虑一种情况，假设有一种需求：用户不想时不时地去查询图书列表了，太累了，于是，他去问图书馆，“当有新书时能不能把书的信息告诉我呢？”。这就是一种典型的观察者模式。\n首先，我们需要提供一个AIDL接口，每个用户都需要实现这个接口并且向图书馆申请新书的提醒功能，当然用户也可以随时取消这种提醒。之所以选择AIDL\n接口而不是普通接口，是因为AIDL中无法使用普通接口。这里我们创建一个IOnNewBookArrivedListener.aidl文件，我们所期望的情况是：当服务端有新书到来时，就会通知每一个已经申请提醒功能的用户。从程序上来说就是调用所有IOnNewBookArrivedListener对象中的onNewBookArrived方法，并把新书的对象通过参数传递给客户端，内容如下所示：\n``` java\n// IOnNewBookArrivedListener.aidl\npackage com.huangyuanlove.testandroid;\n\n// Declare any non-default types here with import statements\nimport com.huangyuanlove.testandroid.Book;\ninterface IOnNewBookArrivedListener {\n    /**\n     * Demonstrates some basic types that you can use as parameters\n     * and return values in AIDL.\n     */\n    void basicTypes(int anInt, long aLong, boolean aBoolean, float aFloat,\n            double aDouble, String aString);\n    void onNewBookArrived(in Book newBook);\n}\n```\nAIDL中除了基本数据类型，其他类型的参数必须标上方向：in、out或者inout，in表示输入型参数，out表示输出型参数，inout表示输入输出型参数，至于它们具体的区别，官网是这么说的：\n>All non-primitive parameters require a directional tag indicating which way the data goes . Either in , out , or inout . Primitives are in by default , and connot be otherwise .\n\n>所有的非基本参数都需要一个定向tag来指出数据的流向，不管是 in , out , 还是 inout 。基本参数的定向tag默认是并且只能是 in 。\n\n我们要根据实际需要去指定参数类型，不能一概使用out或者inout，因为这在底层实现是有开销的。最后，AIDL接口中只支持方法，不支持声明静态常量，这一点区别于传统的接口。\n除了要新增加一个AIDL接口，还需要在原有的接口中添加两个新方法，代码如下：\n``` java\npackage com.huangyuanlove.testandroid;\n\nimport com.huangyuanlove.testandroid.Book;\nimport com.huangyuanlove.testandroid.IOnNewBookArrivedListener;\ninterface IBookManager {\n    void basicTypes(int anInt, long aLong, boolean aBoolean, float aFloat,\n            double aDouble, String aString);\n    List<Book> getBookList();\n    void addBook(in Book book);\n    void registerListener(IOnNewBookArrivedListener listener);\n    void unRegisterListener(IOnNewBookArrivedListener listener);\n}\n\n```\n接着，服务端中的Service的实现也需要修改一下，主要是Service中的IBookManager.Stub的实现，需要实现新增加的两个方法(IDE没有提示的话可以make一下)。同时，在BookManagerService中还开启了一个线程，每隔5s就向书库中增加一本新书并通知所有感兴趣的用户，整个代码如下所示：\n``` java\n\npublic class BookManagerService extends Service {\n    private AtomicBoolean mIsServiceDestroyed = new AtomicBoolean(false);\n    private CopyOnWriteArrayList<Book> mBookList = new CopyOnWriteArrayList<>();\n    private CopyOnWriteArrayList<IOnNewBookArrivedListener> mListenerList\n            = new CopyOnWriteArrayList<>();\n\n    private Binder mBinder = new IBookManager.Stub() {\n        @Override\n        public void basicTypes(int anInt, long aLong, boolean aBoolean, float aFloat, double aDouble, String aString) throws RemoteException {\n\n        }\n\n        @Override\n        public List<Book> getBookList() throws RemoteException {\n            return mBookList;\n        }\n\n        @Override\n        public void addBook(Book book) throws RemoteException {\n            mBookList.add(book);\n        }\n\n        @Override\n        public void registerListener(IOnNewBookArrivedListener listener) throws RemoteException {\n            if (!mListenerList.contains(listener)) {\n                mListenerList.add(listener);\n            } else {\n                Log.d(\"xuan\", \"already exists.\");\n            }\n            Log.d(\"xuan\", \"registerListener,size:\" + mListenerList.size());\n        }\n\n        @Override\n        public void unRegisterListener(IOnNewBookArrivedListener listener) throws RemoteException {\n            if (mListenerList.contains(listener)) {\n                mListenerList.remove(listener);\n                Log.d(\"xuan\", \"unregister listener succeed.\");\n            } else {\n                Log.d(\"xuan\", \"not found,can not unregister.\");\n            }\n            Log.d(\"xuan\", \"unregisterListener,current size:\" + mListenerList.size());\n        }\n    };\n\n\n    @Override\n    public void onCreate() {\n        super.onCreate();\n\n        mBookList.add(new Book(1, \"Android\"));\n        mBookList.add(new Book(2, \"IOS\"));\n        new Thread(new ServiceWorker()).start();\n    }\n\n    @Nullable\n    @Override\n    public IBinder onBind(Intent intent) {\n        return mBinder;\n    }\n\n    @Override\n    public void onDestroy() {\n        mIsServiceDestroyed.set(true);\n        super.onDestroy();\n    }\n\n\n    private void onNewBookArrived(Book book) throws RemoteException {\n        mBookList.add(book);\n        Log.d(\"xuan\", \"onNewBookArrived,notify listeners:\" + mListenerList.\n                size());\n        for (int i = 0; i < mListenerList.size(); i++) {\n            IOnNewBookArrivedListener listener = mListenerList.get(i);\n            Log.d(\"xuan\", \"onNewBookArrived,notify listener:\" + listener);\n            listener.onNewBookArrived(book);\n        }\n    }\n\n    private class ServiceWorker implements Runnable {\n        @Override\n        public void run() {\n            while (!mIsServiceDestroyed.get()) {\n                try {\n                    Thread.sleep(5000);\n                } catch (InterruptedException e) {\n                    e.printStackTrace();\n                }\n                int bookId = mBookList.size() + 1;\n                Book newBook = new Book(bookId, \"new book#\" + bookId);\n                try {\n                    onNewBookArrived(newBook);\n                } catch (RemoteException e) {\n                    e.printStackTrace();\n                }\n            }\n        }\n    }\n}\n\n```\n最后还需要修改一下客户端的代码，主要有两方面：首先客户端要注册IOnNewBookArrivedListener到远程服务端，这样当有新书时服务端才能通知当前客户端，同时我们要在Activity退出时解除这个注册；另一方面，当有新书时，服务端会回调客户端的IOnNewBookArrivedListener对象中的onNewBookArrived方法，但是这个方法是在客户端的Binder线程池中执行的，因此，为了便于进行UI操作，我们需要有一个Handler可以将其切换到客户端的主线程中去执行，代码如下：\n``` java\npublic class MainActivity extends AppCompatActivity {\n\n    private static final int MESSAGE_NEW_BOOK_ARRIVED = 1;\n    private IBookManager mRemoteBookManager;\n\n    private Handler mHandler = new Handler() {\n        @Override\n        public void handleMessage(Message msg) {\n            switch (msg.what) {\n                case MESSAGE_NEW_BOOK_ARRIVED:\n                    Log.d(\"MainActivity\",\"receive new book :\" + msg.obj);\n                    break;\n                default:\n                    super.handleMessage(msg);\n            }\n        }\n    };\n\n    private ServiceConnection mConnection = new ServiceConnection() {\n        @Override\n        public void onServiceConnected(ComponentName name, IBinder service) {\n            IBookManager bookManager= IBookManager.Stub.asInterface(service);\n            try {\n                mRemoteBookManager = bookManager;\n                List<Book> list = bookManager.getBookList();\n                Log.d(\"MainActivity\",\"bookManager.getBookList()-->\" + list.size() +\">> \" + list.toString());\n                bookManager.addBook(new Book(3,\"java\"));\n                List<Book> newList = bookManager.getBookList();\n                Log.d(\"MainActivity\",\"bookManager.getBookList()-->\" + newList.size()+\">> \" + newList.toString());\n                bookManager.registerListener(mOnNewBookArrivedListener);\n            }catch (RemoteException e){\n                e.printStackTrace();\n            }\n        }\n\n        @Override\n        public void onServiceDisconnected(ComponentName name) {\n            mRemoteBookManager = null;\n            Log.e(\"MainActivity\",\"binder died.\");\n        }\n    };\n\n\n    private IOnNewBookArrivedListener mOnNewBookArrivedListener = new IOnNewBookArrivedListener.Stub() {\n        @Override\n        public void basicTypes(int anInt, long aLong, boolean aBoolean, float aFloat, double aDouble, String aString) throws RemoteException {\n\n        }\n\n        @Override\n        public void onNewBookArrived(Book newBook) throws RemoteException {\n            mHandler.obtainMessage(MESSAGE_NEW_BOOK_ARRIVED,newBook)\n                    .sendToTarget();\n        }\n    };\n\n    @Override\n    protected void onCreate(Bundle savedInstanceState) {\n        super.onCreate(savedInstanceState);\n        setContentView(R.layout.activity_main);\n        Intent intent = new Intent(this,BookManagerService.class);\n        bindService(intent,mConnection, Context.BIND_AUTO_CREATE);\n    }\n\n    @Override\n    protected void onDestroy() {\n        if (mRemoteBookManager != null\n                && mRemoteBookManager.asBinder().isBinderAlive()) {\n            try {\n                Log.d(\"MainActivity\",\"unregister listener:\" + mOnNewBookArrivedListener);\n                mRemoteBookManager.unRegisterListener(mOnNewBookArrivedListener);\n            } catch (RemoteException e) {\n                e.printStackTrace();\n            }\n        }\n        unbindService(mConnection);\n        super.onDestroy();\n    }\n}\n```\n从上面的代码可以看出，当BookManagerActivity关闭时，我们会在onDestroy中去解除已经注册到服务端的listener，这就相当于我们不想再接收图书馆的新书提醒了，所以我\n们可以随时取消这个提醒服务。按back键退出BookManagerActivity,下面是打印出的log\n``` log\n07-23 14:56:55.493 16905-16918/com.huangyuanlove.testandroid:remote D/BookManagerService: not found,can not unregister.\n07-23 14:56:57.185 16905-16918/com.huangyuanlove.testandroid:remote D/BookManagerService: unregisterListener,current size:1\n```\n从上面的log可以看出，程序没有像我们所预期的那样执行。在解注册的过程中，服务端竟然无法找到我们之前注册的那个listener，其实，这是必然的，这种解注册的处理方式在日常开发过程中时常使用到，但是放到多进程中却无法奏效，因为Binder会把客户端传递过来的对象重新转化并生成一个新的对象。虽然我们在注册和解注册过程中使用的是同一个客户端对象，但是通过Binder传递到服务端后，却会产生两个全新的对象。别忘了对象是不能跨进程直接传输的，对象的跨进程传输本质上都是反序列化的过程，这就是为什么AIDL中的自定义对象都必须要实现Parcelable接口的原因。可以使用`RemoteCallbackList`。\nRemoteCallbackList是系统专门提供的用于删除跨进程listener的接口。 RemoteCallbackList是一个泛型， 支持管理任意的AIDL接口， 这点从它的声明就可以看出，因为所有的AIDL接口都继承自IInterface接口\n> public class RemoteCallbackList<E extends IInterface>\n\n它的工作原理很简单， 在它的内部有一个Map结构专门用来保存所有的AIDL回调，这个Map的key是IBinder类型， value是Callback类型， 如下所示:\n> ArrayMap<IBinder,Callback> mCallbacks = new ArrayMap<IBinder,Callback>();\n\n其中Callback中封装了真正的远程listener。 当客户端注册listener的时候，它会把这个listener的信息存入mCallbacks中， 其中key和value分别通过下面的方式获得：\n> IBinder key= listener.asBinder()\n> Callback value = new Callback(listener,cookie)\n\n虽然说多次跨进程传输客户端的同一个对象会在服务端生成不同的对象，但是这些新生成的对象有一个共同点，那就是它们底层的Binder对象是同一个， 利用这个特性，就可以实现上面我们无法实现的功能。当客户端解注册的时候，我们只要遍历服务端所有的listener， 找出那个和解注册listener具有相同Binder对象的服务端listener并把它删掉即可，这就是RemoteCallbackList为我们做的事情。同时RemoteCallbackList还有一个很有用的功能， 那就是当客户端进程终止后，它能够自动移除客户端所注册的listener。另外，RemoteCallbackList内部自动实现了线程同步的功能，所以我们使用它来注册和解注册时，不需要做额外的线程同步工作。\nRemoteCallbackList使用起来很简单，我们要对BookManagerService做一些修改，首先要创建一个RemoteCallbackList对象来替代之前的CopyOnWriteArrayList，如下所示:\n``` java\nprivate RemoteCallbackList<IOnNewBookArrivedListener> mListenerList = new RemoteCallbackList<IOnNewBookArrivedListener>();\n```\n然后修改registerListener和unregisterListener这两个接口的实现， 如下所示:\n``` java\n@Override\npublic void registerListener(IOnNewBookArrivedIistener listener) throws RemoteException {\n    mListenerList.register(listener);\n}\n@Override\npublic void unRegisterListener(IOnNewBookArrivedIistener listener) throws RemoteException {\n    mListenerList.unregister(listener);\n}\n```\n接着要修改onNewBookArrived方法，当有新书时，我们就要通知所有已注册的listener，如下所示:\n``` java\nprivate void onNewBookArrived(Book book) throws RemoteException {\n        books.add(book);\n       final int N  =mListenerList.beginBroadcast();\n       for(int i = 0 ; i < N;i++){\n           IOnNewBookArrivedIistener iOnNewBookArrivedIistener = mListenerList.getBroadcastItem(i);\n           if(iOnNewBookArrivedIistener!=null){\n               iOnNewBookArrivedIistener.onNewBookArrived(book);\n           }\n       }\n       mListenerList.finishBroadcast();\n    }\n```\n使用RemoteCallbackList，有一点需要注意，我们无法像操作List一样去操作它，尽管它的名字中也带个List，但是它并不是一个List。遍历RemoteCallbackList，必须要按照下面的方式进行，其中beginBroadcast和beginBroadcast必须要配对使用，哪怕我们仅仅是想要获取RemoteCallbackList中的元素个数，这是必须要注意的地方。\n另外还有几点需要说明一下：\n* 客户端调用远程服务的方法，被调用的方法运行在服务端的Binder线程池中，同时客户端线程会被挂起，这个时候如果服务端方法执行比较耗时，就会导致客户端线程长时间地阻塞在这里，而如果这个客户端线程是UI线程的话，就会导致客户端ANR。因此，如果我们明确知道某个远程方法是耗时的，那么就要避免在客户端的UI线程中去访问远程方法。由于客户端的`onServiceConnected`和`onServiceDisconnected`方法都运行在UI线程中，所以也不可以在它们里面直接调用服务端的耗时方法，这点要尤其注意。\n* 由于服务端的方法本身就运行在服务端的Binder线程池中，所以服务端方法本身就可以执行大量耗时操作，这个时候切记不要在服务端方法中开线程去进行异步任务，除非你明确知道自己在干什么，否则不建议这么做。\n* 同理，当远程服务端需要调用客户端的listener中的方法时，被调用的方法也运行在Binder线程池中，只不过是客户端的线程池。所以，我们同样不可以在服务端中调用客户端的耗时方法。比如针对BookManagerService的onNewBookArrived方法。在它内部调用了客户端的IOnNewBookArrivedListener中的onNewBookArrived方法，如果客户端的这个onNewBookArrived方法比较耗时的话，那么请确保BookManagerService中的onNewBookArrived运行在非UI线程中，否则将导致服务端无法响应。\n* 权限验证，第一种方法，我们可以在onBind中进行验证，验证不通过就直接返回null，这样验证失败的客户端直接无法绑定服务，至于验证方式可以有多种， 比如使用permission验证。第二种方法，我们可以在服务端的onTransact方法中进行权限验证，如果验证失败就直接返回false，这样服务端就不会终止执行AIDL中的方法从而达到保护服务端的效果。\n\n----\n以上","source":"_posts/Android多进程三.md","raw":"---\ntitle: Android多进程三\ndate: 2018-07-23 17:38:39\ntags: [Android]\nkeywords: Android多进程实现\n---\nAndroid中中IPC方式有很多，比如使用Bundle，使用文件共享，使用Messenger，使用AIDL，使用ContentProvider，使用Socket等。前两种方式比较简单，自己玩。\n下面主要是抄的《Android开发艺术探索》2.4.4章节，看过书的就不用看了。\n<!-- more -->\n上一篇主要抄了Messenger来进行进程间通信的方法，可以发现Messenger是以串行的方式处理客户端发来的消息，如果大量的消息同时发送到服务端，服务端仍然只能一个个处理，如果有大量的并发请求，那么用Messenger就不太合适了。同时，Messenger的作用主要是为了传递消息，很多时候我们可能需要跨进程调用服务端的方法，这种情形用Messenger就无法做到了，但是我们可以使用AIDL来实现跨进程的方法调用。AIDL也是Messenger的底层实现，因此Messenger本质上也是AIDL，只不过系统为我们做了封装从而方便上层的调用而已。在上一节中，我们介绍了Binder的概念，大家对Binder也有了一定的了解，在Binder的基础上我们可以更加容易地理解AIDL。这里先介绍使用AIDL来进行进程间通信的流程，分为服务端和客户端两个方面。\n##### 服务端\n服务端首先要创建一个Service用来监听客户端的连接请求，然后创建一个AIDL文件，将暴露给客户端的接口在这个AIDL文件中声明，最后在Service中实现这个AIDL接口即可。\n##### 客户端\n客户端所要做事情就稍微简单一些，首先需要绑定服务端的Service，绑定成功后，将服务端返回的Binder对象转成AIDL接口所属的类型，接着就可以调用AIDL中的方法了。\n\n##### 具体实现方式\n###### AIDL接口的创建\n收看看AIDL接口的创建，如下所示创建了一个后缀为AIDL的文件，在里面声明了一个接口和两个方法。创建AIDL文件的方式可以看这个[Android多进程(一)](http://blog.huangyuanlove.com/2018/06/21/Android%E5%A4%9A%E8%BF%9B%E7%A8%8B-%E4%B8%80/#more)\n\n``` java\n// IBookManager.aidl\npackage com.huangyuanlove.testandroid;\n\n// Declare any non-default types here with import statements\nimport com.huangyuanlove.testandroid.Book;\ninterface IBookManager {\n    /**\n     * Demonstrates some basic types that you can use as parameters\n     * and return values in AIDL.\n     */\n    void basicTypes(int anInt, long aLong, boolean aBoolean, float aFloat,\n            double aDouble, String aString);\n            List<Book> getBookList();\n            void addBook(in Book book);\n}\n```\n在AIDL文件中，并不是所有的数据类型都是可以使用的，只支持如下几种类型：\n* 基本数据类型（int、long、char、boolean、double等）；\n* String和CharSequence；\n* List：只支持ArrayList，里面每个元素都必须能够被AIDL支持；\n* Map：只支持HashMap，里面的每个元素都必须被AIDL支持，包括key和value；\n* Parcelable：所有实现了Parcelable接口的对象；\n* AIDL：所有的AIDL接口本身也可以在AIDL文件中使用。\n\n以上6种数据类型就是AIDL所支持的所有类型，其中自定义的Parcelable对象和AIDL对象必须要显式import进来，不管它们是否和当前的AIDL文件位于同一个包内。比如IBookManager.aidl这个文件，里面用到了Book这个类，这个类实现了Parcelable接口并且和IBookManager.aidl位于同一个包中，但是遵守AIDL的规范，我们仍然需要显式地import进来：com.huangyuanlove.testandroid.Book。\n另外一个需要注意的地方是，如果AIDL文件中用到了自定义的Parcelable对象，那么必须新建一个和它同名的AIDL文件，并在其中声明它为Parcelable类型。在上面的IBookManager.aidl中，我们用到了Book这个类，所以，我们必须要创建Book.aidl，然后在里面添加如下内容：\n``` java\npackage com.huangyuanlove.testandroid;\nparcelable Book;\n```\n\n###### 远程服务端Service的实现\n上面讲述了如何定义AIDL接口，接下来实现这个接口。先创建一个service，代码如下：\n``` java\npackage com.huangyuanlove.testandroid;\n\nimport android.app.Service;\nimport android.content.Intent;\nimport android.os.Binder;\nimport android.os.IBinder;\nimport android.os.RemoteException;\nimport android.support.annotation.Nullable;\n\nimport java.util.List;\nimport java.util.concurrent.CopyOnWriteArrayList;\n\npublic class BookManagerService extends Service {\n\n    private CopyOnWriteArrayList<Book> mBookList = new CopyOnWriteArrayList<>();\n\n    private Binder mBinder = new IBookManager.Stub() {\n        @Override\n        public void basicTypes(int anInt, long aLong, boolean aBoolean, float aFloat, double aDouble, String aString) throws RemoteException {\n        }\n\n        @Override\n        public List<Book> getBookList() throws RemoteException {\n            return mBookList;\n        }\n\n        @Override\n        public void addBook(Book book) throws RemoteException {\n            mBookList.add(book);\n        }\n    };\n\n    @Override\n    public void onCreate() {\n        super.onCreate();\n        mBookList.add(new Book(1,\"Android\"));\n        mBookList.add(new Book(2,\"IOS\"));\n    }\n\n    @Nullable\n    @Override\n    public IBinder onBind(Intent intent) {\n        return mBinder;\n    }\n}\n```\n上面是一个服务端Service的典型实现，首先在onCreate中初始化添加了两本图书的信息，然后创建了一个Binder对象并在onBind中返回它，这个对象继承`IBookManager.Stub`并实现了它内部的AIDL方法，注意这里采用了CopyOnWriteArrayList，这个CopyOnWriteArrayList支持并发读/写。在前面\n我们提到，AIDL方法是在服务端的Binder线程池中执行的，因此当多个客户端同时连接的时候，会存在多个线程同时访问的情形，所以我们要在AIDL方法中处理线程同步，而我们这里直接使用CopyOnWriteArrayList来进行自动的线程同步。AIDL中所支持的是抽象的List，而List只是一个接口，因此虽然服务端返回的是CopyOnWriteArrayList，但是在Binder中会按照List的规范去访问数据并最终形成一个新的ArrayList传递给客户端。所以，我们在服务端采用CopyOnWriteArrayList是完全可以的。和此类似的还有ConcurrentHashMap，然后我们需要在XML中注册这个Service:\n``` xml\n<service android:name=\".BookManagerService\"\n            android:process=\":remote\"/>\n```\n###### 客户端的实现\n客户端的实现就比较简单了，首先要绑定远程服务，绑定成功后将服务端返回的Binder对象转换成AIDL接口，然后就可以通过这个接口去调用服务端的远程方法了，代码如下所示：\n``` java\npublic class MainActivity extends AppCompatActivity {\n\n    private ServiceConnection mConnection = new ServiceConnection() {\n        @Override\n        public void onServiceConnected(ComponentName name, IBinder service) {\n            IBookManager bookManager= IBookManager.Stub.asInterface(service);\n            try {\n                List<Book> list = bookManager.getBookList();\n                Log.d(\"xuan\",\"bookManager.getBookList()-->\" + list.size());\n                bookManager.addBook(new Book(3,\"java\"));\n                List<Book> newList = bookManager.getBookList();\n                Log.d(\"xuan\",\"bookManager.getBookList()-->\" + newList.size());\n            }catch (RemoteException e){\n                e.printStackTrace();\n            }\n        }\n\n        @Override\n        public void onServiceDisconnected(ComponentName name) {\n\n        }\n    };\n\n    @Override\n    protected void onCreate(Bundle savedInstanceState) {\n        super.onCreate(savedInstanceState);\n        setContentView(R.layout.activity_main);\n        Intent intent = new Intent(this,BookManagerService.class);\n        bindService(intent,mConnection, Context.BIND_AUTO_CREATE);\n    }\n\n    @Override\n    protected void onDestroy() {\n        unbindService(mConnection);\n        super.onDestroy();\n\n    }\n}\n```\n绑定成功以后，会通过bookManager去调用getBookList方法，然后打印出所获取的图书信息。需要注意的是，服务端的方法有可能需要很久才能执行完毕，这个时候下面的代码就会导致ANR，这一点是需要注意的，后面会再介绍这种情况，接着再调用一下另外一个接口addBook，我们在客户端给服务端添加一本书，然后再获取一次。\n现在我们考虑一种情况，假设有一种需求：用户不想时不时地去查询图书列表了，太累了，于是，他去问图书馆，“当有新书时能不能把书的信息告诉我呢？”。这就是一种典型的观察者模式。\n首先，我们需要提供一个AIDL接口，每个用户都需要实现这个接口并且向图书馆申请新书的提醒功能，当然用户也可以随时取消这种提醒。之所以选择AIDL\n接口而不是普通接口，是因为AIDL中无法使用普通接口。这里我们创建一个IOnNewBookArrivedListener.aidl文件，我们所期望的情况是：当服务端有新书到来时，就会通知每一个已经申请提醒功能的用户。从程序上来说就是调用所有IOnNewBookArrivedListener对象中的onNewBookArrived方法，并把新书的对象通过参数传递给客户端，内容如下所示：\n``` java\n// IOnNewBookArrivedListener.aidl\npackage com.huangyuanlove.testandroid;\n\n// Declare any non-default types here with import statements\nimport com.huangyuanlove.testandroid.Book;\ninterface IOnNewBookArrivedListener {\n    /**\n     * Demonstrates some basic types that you can use as parameters\n     * and return values in AIDL.\n     */\n    void basicTypes(int anInt, long aLong, boolean aBoolean, float aFloat,\n            double aDouble, String aString);\n    void onNewBookArrived(in Book newBook);\n}\n```\nAIDL中除了基本数据类型，其他类型的参数必须标上方向：in、out或者inout，in表示输入型参数，out表示输出型参数，inout表示输入输出型参数，至于它们具体的区别，官网是这么说的：\n>All non-primitive parameters require a directional tag indicating which way the data goes . Either in , out , or inout . Primitives are in by default , and connot be otherwise .\n\n>所有的非基本参数都需要一个定向tag来指出数据的流向，不管是 in , out , 还是 inout 。基本参数的定向tag默认是并且只能是 in 。\n\n我们要根据实际需要去指定参数类型，不能一概使用out或者inout，因为这在底层实现是有开销的。最后，AIDL接口中只支持方法，不支持声明静态常量，这一点区别于传统的接口。\n除了要新增加一个AIDL接口，还需要在原有的接口中添加两个新方法，代码如下：\n``` java\npackage com.huangyuanlove.testandroid;\n\nimport com.huangyuanlove.testandroid.Book;\nimport com.huangyuanlove.testandroid.IOnNewBookArrivedListener;\ninterface IBookManager {\n    void basicTypes(int anInt, long aLong, boolean aBoolean, float aFloat,\n            double aDouble, String aString);\n    List<Book> getBookList();\n    void addBook(in Book book);\n    void registerListener(IOnNewBookArrivedListener listener);\n    void unRegisterListener(IOnNewBookArrivedListener listener);\n}\n\n```\n接着，服务端中的Service的实现也需要修改一下，主要是Service中的IBookManager.Stub的实现，需要实现新增加的两个方法(IDE没有提示的话可以make一下)。同时，在BookManagerService中还开启了一个线程，每隔5s就向书库中增加一本新书并通知所有感兴趣的用户，整个代码如下所示：\n``` java\n\npublic class BookManagerService extends Service {\n    private AtomicBoolean mIsServiceDestroyed = new AtomicBoolean(false);\n    private CopyOnWriteArrayList<Book> mBookList = new CopyOnWriteArrayList<>();\n    private CopyOnWriteArrayList<IOnNewBookArrivedListener> mListenerList\n            = new CopyOnWriteArrayList<>();\n\n    private Binder mBinder = new IBookManager.Stub() {\n        @Override\n        public void basicTypes(int anInt, long aLong, boolean aBoolean, float aFloat, double aDouble, String aString) throws RemoteException {\n\n        }\n\n        @Override\n        public List<Book> getBookList() throws RemoteException {\n            return mBookList;\n        }\n\n        @Override\n        public void addBook(Book book) throws RemoteException {\n            mBookList.add(book);\n        }\n\n        @Override\n        public void registerListener(IOnNewBookArrivedListener listener) throws RemoteException {\n            if (!mListenerList.contains(listener)) {\n                mListenerList.add(listener);\n            } else {\n                Log.d(\"xuan\", \"already exists.\");\n            }\n            Log.d(\"xuan\", \"registerListener,size:\" + mListenerList.size());\n        }\n\n        @Override\n        public void unRegisterListener(IOnNewBookArrivedListener listener) throws RemoteException {\n            if (mListenerList.contains(listener)) {\n                mListenerList.remove(listener);\n                Log.d(\"xuan\", \"unregister listener succeed.\");\n            } else {\n                Log.d(\"xuan\", \"not found,can not unregister.\");\n            }\n            Log.d(\"xuan\", \"unregisterListener,current size:\" + mListenerList.size());\n        }\n    };\n\n\n    @Override\n    public void onCreate() {\n        super.onCreate();\n\n        mBookList.add(new Book(1, \"Android\"));\n        mBookList.add(new Book(2, \"IOS\"));\n        new Thread(new ServiceWorker()).start();\n    }\n\n    @Nullable\n    @Override\n    public IBinder onBind(Intent intent) {\n        return mBinder;\n    }\n\n    @Override\n    public void onDestroy() {\n        mIsServiceDestroyed.set(true);\n        super.onDestroy();\n    }\n\n\n    private void onNewBookArrived(Book book) throws RemoteException {\n        mBookList.add(book);\n        Log.d(\"xuan\", \"onNewBookArrived,notify listeners:\" + mListenerList.\n                size());\n        for (int i = 0; i < mListenerList.size(); i++) {\n            IOnNewBookArrivedListener listener = mListenerList.get(i);\n            Log.d(\"xuan\", \"onNewBookArrived,notify listener:\" + listener);\n            listener.onNewBookArrived(book);\n        }\n    }\n\n    private class ServiceWorker implements Runnable {\n        @Override\n        public void run() {\n            while (!mIsServiceDestroyed.get()) {\n                try {\n                    Thread.sleep(5000);\n                } catch (InterruptedException e) {\n                    e.printStackTrace();\n                }\n                int bookId = mBookList.size() + 1;\n                Book newBook = new Book(bookId, \"new book#\" + bookId);\n                try {\n                    onNewBookArrived(newBook);\n                } catch (RemoteException e) {\n                    e.printStackTrace();\n                }\n            }\n        }\n    }\n}\n\n```\n最后还需要修改一下客户端的代码，主要有两方面：首先客户端要注册IOnNewBookArrivedListener到远程服务端，这样当有新书时服务端才能通知当前客户端，同时我们要在Activity退出时解除这个注册；另一方面，当有新书时，服务端会回调客户端的IOnNewBookArrivedListener对象中的onNewBookArrived方法，但是这个方法是在客户端的Binder线程池中执行的，因此，为了便于进行UI操作，我们需要有一个Handler可以将其切换到客户端的主线程中去执行，代码如下：\n``` java\npublic class MainActivity extends AppCompatActivity {\n\n    private static final int MESSAGE_NEW_BOOK_ARRIVED = 1;\n    private IBookManager mRemoteBookManager;\n\n    private Handler mHandler = new Handler() {\n        @Override\n        public void handleMessage(Message msg) {\n            switch (msg.what) {\n                case MESSAGE_NEW_BOOK_ARRIVED:\n                    Log.d(\"MainActivity\",\"receive new book :\" + msg.obj);\n                    break;\n                default:\n                    super.handleMessage(msg);\n            }\n        }\n    };\n\n    private ServiceConnection mConnection = new ServiceConnection() {\n        @Override\n        public void onServiceConnected(ComponentName name, IBinder service) {\n            IBookManager bookManager= IBookManager.Stub.asInterface(service);\n            try {\n                mRemoteBookManager = bookManager;\n                List<Book> list = bookManager.getBookList();\n                Log.d(\"MainActivity\",\"bookManager.getBookList()-->\" + list.size() +\">> \" + list.toString());\n                bookManager.addBook(new Book(3,\"java\"));\n                List<Book> newList = bookManager.getBookList();\n                Log.d(\"MainActivity\",\"bookManager.getBookList()-->\" + newList.size()+\">> \" + newList.toString());\n                bookManager.registerListener(mOnNewBookArrivedListener);\n            }catch (RemoteException e){\n                e.printStackTrace();\n            }\n        }\n\n        @Override\n        public void onServiceDisconnected(ComponentName name) {\n            mRemoteBookManager = null;\n            Log.e(\"MainActivity\",\"binder died.\");\n        }\n    };\n\n\n    private IOnNewBookArrivedListener mOnNewBookArrivedListener = new IOnNewBookArrivedListener.Stub() {\n        @Override\n        public void basicTypes(int anInt, long aLong, boolean aBoolean, float aFloat, double aDouble, String aString) throws RemoteException {\n\n        }\n\n        @Override\n        public void onNewBookArrived(Book newBook) throws RemoteException {\n            mHandler.obtainMessage(MESSAGE_NEW_BOOK_ARRIVED,newBook)\n                    .sendToTarget();\n        }\n    };\n\n    @Override\n    protected void onCreate(Bundle savedInstanceState) {\n        super.onCreate(savedInstanceState);\n        setContentView(R.layout.activity_main);\n        Intent intent = new Intent(this,BookManagerService.class);\n        bindService(intent,mConnection, Context.BIND_AUTO_CREATE);\n    }\n\n    @Override\n    protected void onDestroy() {\n        if (mRemoteBookManager != null\n                && mRemoteBookManager.asBinder().isBinderAlive()) {\n            try {\n                Log.d(\"MainActivity\",\"unregister listener:\" + mOnNewBookArrivedListener);\n                mRemoteBookManager.unRegisterListener(mOnNewBookArrivedListener);\n            } catch (RemoteException e) {\n                e.printStackTrace();\n            }\n        }\n        unbindService(mConnection);\n        super.onDestroy();\n    }\n}\n```\n从上面的代码可以看出，当BookManagerActivity关闭时，我们会在onDestroy中去解除已经注册到服务端的listener，这就相当于我们不想再接收图书馆的新书提醒了，所以我\n们可以随时取消这个提醒服务。按back键退出BookManagerActivity,下面是打印出的log\n``` log\n07-23 14:56:55.493 16905-16918/com.huangyuanlove.testandroid:remote D/BookManagerService: not found,can not unregister.\n07-23 14:56:57.185 16905-16918/com.huangyuanlove.testandroid:remote D/BookManagerService: unregisterListener,current size:1\n```\n从上面的log可以看出，程序没有像我们所预期的那样执行。在解注册的过程中，服务端竟然无法找到我们之前注册的那个listener，其实，这是必然的，这种解注册的处理方式在日常开发过程中时常使用到，但是放到多进程中却无法奏效，因为Binder会把客户端传递过来的对象重新转化并生成一个新的对象。虽然我们在注册和解注册过程中使用的是同一个客户端对象，但是通过Binder传递到服务端后，却会产生两个全新的对象。别忘了对象是不能跨进程直接传输的，对象的跨进程传输本质上都是反序列化的过程，这就是为什么AIDL中的自定义对象都必须要实现Parcelable接口的原因。可以使用`RemoteCallbackList`。\nRemoteCallbackList是系统专门提供的用于删除跨进程listener的接口。 RemoteCallbackList是一个泛型， 支持管理任意的AIDL接口， 这点从它的声明就可以看出，因为所有的AIDL接口都继承自IInterface接口\n> public class RemoteCallbackList<E extends IInterface>\n\n它的工作原理很简单， 在它的内部有一个Map结构专门用来保存所有的AIDL回调，这个Map的key是IBinder类型， value是Callback类型， 如下所示:\n> ArrayMap<IBinder,Callback> mCallbacks = new ArrayMap<IBinder,Callback>();\n\n其中Callback中封装了真正的远程listener。 当客户端注册listener的时候，它会把这个listener的信息存入mCallbacks中， 其中key和value分别通过下面的方式获得：\n> IBinder key= listener.asBinder()\n> Callback value = new Callback(listener,cookie)\n\n虽然说多次跨进程传输客户端的同一个对象会在服务端生成不同的对象，但是这些新生成的对象有一个共同点，那就是它们底层的Binder对象是同一个， 利用这个特性，就可以实现上面我们无法实现的功能。当客户端解注册的时候，我们只要遍历服务端所有的listener， 找出那个和解注册listener具有相同Binder对象的服务端listener并把它删掉即可，这就是RemoteCallbackList为我们做的事情。同时RemoteCallbackList还有一个很有用的功能， 那就是当客户端进程终止后，它能够自动移除客户端所注册的listener。另外，RemoteCallbackList内部自动实现了线程同步的功能，所以我们使用它来注册和解注册时，不需要做额外的线程同步工作。\nRemoteCallbackList使用起来很简单，我们要对BookManagerService做一些修改，首先要创建一个RemoteCallbackList对象来替代之前的CopyOnWriteArrayList，如下所示:\n``` java\nprivate RemoteCallbackList<IOnNewBookArrivedListener> mListenerList = new RemoteCallbackList<IOnNewBookArrivedListener>();\n```\n然后修改registerListener和unregisterListener这两个接口的实现， 如下所示:\n``` java\n@Override\npublic void registerListener(IOnNewBookArrivedIistener listener) throws RemoteException {\n    mListenerList.register(listener);\n}\n@Override\npublic void unRegisterListener(IOnNewBookArrivedIistener listener) throws RemoteException {\n    mListenerList.unregister(listener);\n}\n```\n接着要修改onNewBookArrived方法，当有新书时，我们就要通知所有已注册的listener，如下所示:\n``` java\nprivate void onNewBookArrived(Book book) throws RemoteException {\n        books.add(book);\n       final int N  =mListenerList.beginBroadcast();\n       for(int i = 0 ; i < N;i++){\n           IOnNewBookArrivedIistener iOnNewBookArrivedIistener = mListenerList.getBroadcastItem(i);\n           if(iOnNewBookArrivedIistener!=null){\n               iOnNewBookArrivedIistener.onNewBookArrived(book);\n           }\n       }\n       mListenerList.finishBroadcast();\n    }\n```\n使用RemoteCallbackList，有一点需要注意，我们无法像操作List一样去操作它，尽管它的名字中也带个List，但是它并不是一个List。遍历RemoteCallbackList，必须要按照下面的方式进行，其中beginBroadcast和beginBroadcast必须要配对使用，哪怕我们仅仅是想要获取RemoteCallbackList中的元素个数，这是必须要注意的地方。\n另外还有几点需要说明一下：\n* 客户端调用远程服务的方法，被调用的方法运行在服务端的Binder线程池中，同时客户端线程会被挂起，这个时候如果服务端方法执行比较耗时，就会导致客户端线程长时间地阻塞在这里，而如果这个客户端线程是UI线程的话，就会导致客户端ANR。因此，如果我们明确知道某个远程方法是耗时的，那么就要避免在客户端的UI线程中去访问远程方法。由于客户端的`onServiceConnected`和`onServiceDisconnected`方法都运行在UI线程中，所以也不可以在它们里面直接调用服务端的耗时方法，这点要尤其注意。\n* 由于服务端的方法本身就运行在服务端的Binder线程池中，所以服务端方法本身就可以执行大量耗时操作，这个时候切记不要在服务端方法中开线程去进行异步任务，除非你明确知道自己在干什么，否则不建议这么做。\n* 同理，当远程服务端需要调用客户端的listener中的方法时，被调用的方法也运行在Binder线程池中，只不过是客户端的线程池。所以，我们同样不可以在服务端中调用客户端的耗时方法。比如针对BookManagerService的onNewBookArrived方法。在它内部调用了客户端的IOnNewBookArrivedListener中的onNewBookArrived方法，如果客户端的这个onNewBookArrived方法比较耗时的话，那么请确保BookManagerService中的onNewBookArrived运行在非UI线程中，否则将导致服务端无法响应。\n* 权限验证，第一种方法，我们可以在onBind中进行验证，验证不通过就直接返回null，这样验证失败的客户端直接无法绑定服务，至于验证方式可以有多种， 比如使用permission验证。第二种方法，我们可以在服务端的onTransact方法中进行权限验证，如果验证失败就直接返回false，这样服务端就不会终止执行AIDL中的方法从而达到保护服务端的效果。\n\n----\n以上","slug":"Android多进程三","published":1,"updated":"2018-08-04T04:47:53.768Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjl3vbtqc000risdg73rx3pu7","content":"<p>Android中中IPC方式有很多，比如使用Bundle，使用文件共享，使用Messenger，使用AIDL，使用ContentProvider，使用Socket等。前两种方式比较简单，自己玩。<br>下面主要是抄的《Android开发艺术探索》2.4.4章节，看过书的就不用看了。<br><a id=\"more\"></a><br>上一篇主要抄了Messenger来进行进程间通信的方法，可以发现Messenger是以串行的方式处理客户端发来的消息，如果大量的消息同时发送到服务端，服务端仍然只能一个个处理，如果有大量的并发请求，那么用Messenger就不太合适了。同时，Messenger的作用主要是为了传递消息，很多时候我们可能需要跨进程调用服务端的方法，这种情形用Messenger就无法做到了，但是我们可以使用AIDL来实现跨进程的方法调用。AIDL也是Messenger的底层实现，因此Messenger本质上也是AIDL，只不过系统为我们做了封装从而方便上层的调用而已。在上一节中，我们介绍了Binder的概念，大家对Binder也有了一定的了解，在Binder的基础上我们可以更加容易地理解AIDL。这里先介绍使用AIDL来进行进程间通信的流程，分为服务端和客户端两个方面。</p>\n<h5 id=\"服务端\"><a href=\"#服务端\" class=\"headerlink\" title=\"服务端\"></a>服务端</h5><p>服务端首先要创建一个Service用来监听客户端的连接请求，然后创建一个AIDL文件，将暴露给客户端的接口在这个AIDL文件中声明，最后在Service中实现这个AIDL接口即可。</p>\n<h5 id=\"客户端\"><a href=\"#客户端\" class=\"headerlink\" title=\"客户端\"></a>客户端</h5><p>客户端所要做事情就稍微简单一些，首先需要绑定服务端的Service，绑定成功后，将服务端返回的Binder对象转成AIDL接口所属的类型，接着就可以调用AIDL中的方法了。</p>\n<h5 id=\"具体实现方式\"><a href=\"#具体实现方式\" class=\"headerlink\" title=\"具体实现方式\"></a>具体实现方式</h5><h6 id=\"AIDL接口的创建\"><a href=\"#AIDL接口的创建\" class=\"headerlink\" title=\"AIDL接口的创建\"></a>AIDL接口的创建</h6><p>收看看AIDL接口的创建，如下所示创建了一个后缀为AIDL的文件，在里面声明了一个接口和两个方法。创建AIDL文件的方式可以看这个<a href=\"http://blog.huangyuanlove.com/2018/06/21/Android%E5%A4%9A%E8%BF%9B%E7%A8%8B-%E4%B8%80/#more\">Android多进程(一)</a></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// IBookManager.aidl</span></div><div class=\"line\"><span class=\"keyword\">package</span> com.huangyuanlove.testandroid;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// Declare any non-default types here with import statements</span></div><div class=\"line\"><span class=\"keyword\">import</span> com.huangyuanlove.testandroid.Book;</div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">interface</span> <span class=\"title\">IBookManager</span> </span>&#123;</div><div class=\"line\">    <span class=\"comment\">/**</span></div><div class=\"line\">     * Demonstrates some basic types that you can use as parameters</div><div class=\"line\">     * and return values in AIDL.</div><div class=\"line\">     */</div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">basicTypes</span><span class=\"params\">(<span class=\"keyword\">int</span> anInt, <span class=\"keyword\">long</span> aLong, <span class=\"keyword\">boolean</span> aBoolean, <span class=\"keyword\">float</span> aFloat,</span></span></div><div class=\"line\">            <span class=\"keyword\">double</span> aDouble, String aString);</div><div class=\"line\">            <span class=\"function\">List&lt;Book&gt; <span class=\"title\">getBookList</span><span class=\"params\">()</span></span>;</div><div class=\"line\">            <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">addBook</span><span class=\"params\">(in Book book)</span></span>;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>在AIDL文件中，并不是所有的数据类型都是可以使用的，只支持如下几种类型：</p>\n<ul>\n<li>基本数据类型（int、long、char、boolean、double等）；</li>\n<li>String和CharSequence；</li>\n<li>List：只支持ArrayList，里面每个元素都必须能够被AIDL支持；</li>\n<li>Map：只支持HashMap，里面的每个元素都必须被AIDL支持，包括key和value；</li>\n<li>Parcelable：所有实现了Parcelable接口的对象；</li>\n<li>AIDL：所有的AIDL接口本身也可以在AIDL文件中使用。</li>\n</ul>\n<p>以上6种数据类型就是AIDL所支持的所有类型，其中自定义的Parcelable对象和AIDL对象必须要显式import进来，不管它们是否和当前的AIDL文件位于同一个包内。比如IBookManager.aidl这个文件，里面用到了Book这个类，这个类实现了Parcelable接口并且和IBookManager.aidl位于同一个包中，但是遵守AIDL的规范，我们仍然需要显式地import进来：com.huangyuanlove.testandroid.Book。<br>另外一个需要注意的地方是，如果AIDL文件中用到了自定义的Parcelable对象，那么必须新建一个和它同名的AIDL文件，并在其中声明它为Parcelable类型。在上面的IBookManager.aidl中，我们用到了Book这个类，所以，我们必须要创建Book.aidl，然后在里面添加如下内容：<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">package</span> com.huangyuanlove.testandroid;</div><div class=\"line\">parcelable Book;</div></pre></td></tr></table></figure></p>\n<h6 id=\"远程服务端Service的实现\"><a href=\"#远程服务端Service的实现\" class=\"headerlink\" title=\"远程服务端Service的实现\"></a>远程服务端Service的实现</h6><p>上面讲述了如何定义AIDL接口，接下来实现这个接口。先创建一个service，代码如下：<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">package</span> com.huangyuanlove.testandroid;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">import</span> android.app.Service;</div><div class=\"line\"><span class=\"keyword\">import</span> android.content.Intent;</div><div class=\"line\"><span class=\"keyword\">import</span> android.os.Binder;</div><div class=\"line\"><span class=\"keyword\">import</span> android.os.IBinder;</div><div class=\"line\"><span class=\"keyword\">import</span> android.os.RemoteException;</div><div class=\"line\"><span class=\"keyword\">import</span> android.support.annotation.Nullable;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">import</span> java.util.List;</div><div class=\"line\"><span class=\"keyword\">import</span> java.util.concurrent.CopyOnWriteArrayList;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">BookManagerService</span> <span class=\"keyword\">extends</span> <span class=\"title\">Service</span> </span>&#123;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">private</span> CopyOnWriteArrayList&lt;Book&gt; mBookList = <span class=\"keyword\">new</span> CopyOnWriteArrayList&lt;&gt;();</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">private</span> Binder mBinder = <span class=\"keyword\">new</span> IBookManager.Stub() &#123;</div><div class=\"line\">        <span class=\"meta\">@Override</span></div><div class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">basicTypes</span><span class=\"params\">(<span class=\"keyword\">int</span> anInt, <span class=\"keyword\">long</span> aLong, <span class=\"keyword\">boolean</span> aBoolean, <span class=\"keyword\">float</span> aFloat, <span class=\"keyword\">double</span> aDouble, String aString)</span> <span class=\"keyword\">throws</span> RemoteException </span>&#123;</div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\">        <span class=\"meta\">@Override</span></div><div class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> List&lt;Book&gt; <span class=\"title\">getBookList</span><span class=\"params\">()</span> <span class=\"keyword\">throws</span> RemoteException </span>&#123;</div><div class=\"line\">            <span class=\"keyword\">return</span> mBookList;</div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\">        <span class=\"meta\">@Override</span></div><div class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">addBook</span><span class=\"params\">(Book book)</span> <span class=\"keyword\">throws</span> RemoteException </span>&#123;</div><div class=\"line\">            mBookList.add(book);</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"meta\">@Override</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onCreate</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">super</span>.onCreate();</div><div class=\"line\">        mBookList.add(<span class=\"keyword\">new</span> Book(<span class=\"number\">1</span>,<span class=\"string\">\"Android\"</span>));</div><div class=\"line\">        mBookList.add(<span class=\"keyword\">new</span> Book(<span class=\"number\">2</span>,<span class=\"string\">\"IOS\"</span>));</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"meta\">@Nullable</span></div><div class=\"line\">    <span class=\"meta\">@Override</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> IBinder <span class=\"title\">onBind</span><span class=\"params\">(Intent intent)</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> mBinder;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>上面是一个服务端Service的典型实现，首先在onCreate中初始化添加了两本图书的信息，然后创建了一个Binder对象并在onBind中返回它，这个对象继承<code>IBookManager.Stub</code>并实现了它内部的AIDL方法，注意这里采用了CopyOnWriteArrayList，这个CopyOnWriteArrayList支持并发读/写。在前面<br>我们提到，AIDL方法是在服务端的Binder线程池中执行的，因此当多个客户端同时连接的时候，会存在多个线程同时访问的情形，所以我们要在AIDL方法中处理线程同步，而我们这里直接使用CopyOnWriteArrayList来进行自动的线程同步。AIDL中所支持的是抽象的List，而List只是一个接口，因此虽然服务端返回的是CopyOnWriteArrayList，但是在Binder中会按照List的规范去访问数据并最终形成一个新的ArrayList传递给客户端。所以，我们在服务端采用CopyOnWriteArrayList是完全可以的。和此类似的还有ConcurrentHashMap，然后我们需要在XML中注册这个Service:<br><figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">service</span> <span class=\"attr\">android:name</span>=<span class=\"string\">\".BookManagerService\"</span></span></div><div class=\"line\">            <span class=\"attr\">android:process</span>=<span class=\"string\">\":remote\"</span>/&gt;</div></pre></td></tr></table></figure></p>\n<h6 id=\"客户端的实现\"><a href=\"#客户端的实现\" class=\"headerlink\" title=\"客户端的实现\"></a>客户端的实现</h6><p>客户端的实现就比较简单了，首先要绑定远程服务，绑定成功后将服务端返回的Binder对象转换成AIDL接口，然后就可以通过这个接口去调用服务端的远程方法了，代码如下所示：<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MainActivity</span> <span class=\"keyword\">extends</span> <span class=\"title\">AppCompatActivity</span> </span>&#123;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">private</span> ServiceConnection mConnection = <span class=\"keyword\">new</span> ServiceConnection() &#123;</div><div class=\"line\">        <span class=\"meta\">@Override</span></div><div class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onServiceConnected</span><span class=\"params\">(ComponentName name, IBinder service)</span> </span>&#123;</div><div class=\"line\">            IBookManager bookManager= IBookManager.Stub.asInterface(service);</div><div class=\"line\">            <span class=\"keyword\">try</span> &#123;</div><div class=\"line\">                List&lt;Book&gt; list = bookManager.getBookList();</div><div class=\"line\">                Log.d(<span class=\"string\">\"xuan\"</span>,<span class=\"string\">\"bookManager.getBookList()--&gt;\"</span> + list.size());</div><div class=\"line\">                bookManager.addBook(<span class=\"keyword\">new</span> Book(<span class=\"number\">3</span>,<span class=\"string\">\"java\"</span>));</div><div class=\"line\">                List&lt;Book&gt; newList = bookManager.getBookList();</div><div class=\"line\">                Log.d(<span class=\"string\">\"xuan\"</span>,<span class=\"string\">\"bookManager.getBookList()--&gt;\"</span> + newList.size());</div><div class=\"line\">            &#125;<span class=\"keyword\">catch</span> (RemoteException e)&#123;</div><div class=\"line\">                e.printStackTrace();</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\">        <span class=\"meta\">@Override</span></div><div class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onServiceDisconnected</span><span class=\"params\">(ComponentName name)</span> </span>&#123;</div><div class=\"line\"></div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"meta\">@Override</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title\">onCreate</span><span class=\"params\">(Bundle savedInstanceState)</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">super</span>.onCreate(savedInstanceState);</div><div class=\"line\">        setContentView(R.layout.activity_main);</div><div class=\"line\">        Intent intent = <span class=\"keyword\">new</span> Intent(<span class=\"keyword\">this</span>,BookManagerService.class);</div><div class=\"line\">        bindService(intent,mConnection, Context.BIND_AUTO_CREATE);</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"meta\">@Override</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title\">onDestroy</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">        unbindService(mConnection);</div><div class=\"line\">        <span class=\"keyword\">super</span>.onDestroy();</div><div class=\"line\"></div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>绑定成功以后，会通过bookManager去调用getBookList方法，然后打印出所获取的图书信息。需要注意的是，服务端的方法有可能需要很久才能执行完毕，这个时候下面的代码就会导致ANR，这一点是需要注意的，后面会再介绍这种情况，接着再调用一下另外一个接口addBook，我们在客户端给服务端添加一本书，然后再获取一次。<br>现在我们考虑一种情况，假设有一种需求：用户不想时不时地去查询图书列表了，太累了，于是，他去问图书馆，“当有新书时能不能把书的信息告诉我呢？”。这就是一种典型的观察者模式。<br>首先，我们需要提供一个AIDL接口，每个用户都需要实现这个接口并且向图书馆申请新书的提醒功能，当然用户也可以随时取消这种提醒。之所以选择AIDL<br>接口而不是普通接口，是因为AIDL中无法使用普通接口。这里我们创建一个IOnNewBookArrivedListener.aidl文件，我们所期望的情况是：当服务端有新书到来时，就会通知每一个已经申请提醒功能的用户。从程序上来说就是调用所有IOnNewBookArrivedListener对象中的onNewBookArrived方法，并把新书的对象通过参数传递给客户端，内容如下所示：<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// IOnNewBookArrivedListener.aidl</span></div><div class=\"line\"><span class=\"keyword\">package</span> com.huangyuanlove.testandroid;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// Declare any non-default types here with import statements</span></div><div class=\"line\"><span class=\"keyword\">import</span> com.huangyuanlove.testandroid.Book;</div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">interface</span> <span class=\"title\">IOnNewBookArrivedListener</span> </span>&#123;</div><div class=\"line\">    <span class=\"comment\">/**</span></div><div class=\"line\">     * Demonstrates some basic types that you can use as parameters</div><div class=\"line\">     * and return values in AIDL.</div><div class=\"line\">     */</div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">basicTypes</span><span class=\"params\">(<span class=\"keyword\">int</span> anInt, <span class=\"keyword\">long</span> aLong, <span class=\"keyword\">boolean</span> aBoolean, <span class=\"keyword\">float</span> aFloat,</span></span></div><div class=\"line\">            <span class=\"keyword\">double</span> aDouble, String aString);</div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">onNewBookArrived</span><span class=\"params\">(in Book newBook)</span></span>;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>AIDL中除了基本数据类型，其他类型的参数必须标上方向：in、out或者inout，in表示输入型参数，out表示输出型参数，inout表示输入输出型参数，至于它们具体的区别，官网是这么说的：</p>\n<blockquote>\n<p>All non-primitive parameters require a directional tag indicating which way the data goes . Either in , out , or inout . Primitives are in by default , and connot be otherwise .</p>\n<p>所有的非基本参数都需要一个定向tag来指出数据的流向，不管是 in , out , 还是 inout 。基本参数的定向tag默认是并且只能是 in 。</p>\n</blockquote>\n<p>我们要根据实际需要去指定参数类型，不能一概使用out或者inout，因为这在底层实现是有开销的。最后，AIDL接口中只支持方法，不支持声明静态常量，这一点区别于传统的接口。<br>除了要新增加一个AIDL接口，还需要在原有的接口中添加两个新方法，代码如下：<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">package</span> com.huangyuanlove.testandroid;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">import</span> com.huangyuanlove.testandroid.Book;</div><div class=\"line\"><span class=\"keyword\">import</span> com.huangyuanlove.testandroid.IOnNewBookArrivedListener;</div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">interface</span> <span class=\"title\">IBookManager</span> </span>&#123;</div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">basicTypes</span><span class=\"params\">(<span class=\"keyword\">int</span> anInt, <span class=\"keyword\">long</span> aLong, <span class=\"keyword\">boolean</span> aBoolean, <span class=\"keyword\">float</span> aFloat,</span></span></div><div class=\"line\">            <span class=\"keyword\">double</span> aDouble, String aString);</div><div class=\"line\">    <span class=\"function\">List&lt;Book&gt; <span class=\"title\">getBookList</span><span class=\"params\">()</span></span>;</div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">addBook</span><span class=\"params\">(in Book book)</span></span>;</div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">registerListener</span><span class=\"params\">(IOnNewBookArrivedListener listener)</span></span>;</div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">unRegisterListener</span><span class=\"params\">(IOnNewBookArrivedListener listener)</span></span>;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>接着，服务端中的Service的实现也需要修改一下，主要是Service中的IBookManager.Stub的实现，需要实现新增加的两个方法(IDE没有提示的话可以make一下)。同时，在BookManagerService中还开启了一个线程，每隔5s就向书库中增加一本新书并通知所有感兴趣的用户，整个代码如下所示：<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div><div class=\"line\">71</div><div class=\"line\">72</div><div class=\"line\">73</div><div class=\"line\">74</div><div class=\"line\">75</div><div class=\"line\">76</div><div class=\"line\">77</div><div class=\"line\">78</div><div class=\"line\">79</div><div class=\"line\">80</div><div class=\"line\">81</div><div class=\"line\">82</div><div class=\"line\">83</div><div class=\"line\">84</div><div class=\"line\">85</div><div class=\"line\">86</div><div class=\"line\">87</div><div class=\"line\">88</div><div class=\"line\">89</div><div class=\"line\">90</div><div class=\"line\">91</div><div class=\"line\">92</div><div class=\"line\">93</div><div class=\"line\">94</div><div class=\"line\">95</div><div class=\"line\">96</div><div class=\"line\">97</div><div class=\"line\">98</div><div class=\"line\">99</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">BookManagerService</span> <span class=\"keyword\">extends</span> <span class=\"title\">Service</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">private</span> AtomicBoolean mIsServiceDestroyed = <span class=\"keyword\">new</span> AtomicBoolean(<span class=\"keyword\">false</span>);</div><div class=\"line\">    <span class=\"keyword\">private</span> CopyOnWriteArrayList&lt;Book&gt; mBookList = <span class=\"keyword\">new</span> CopyOnWriteArrayList&lt;&gt;();</div><div class=\"line\">    <span class=\"keyword\">private</span> CopyOnWriteArrayList&lt;IOnNewBookArrivedListener&gt; mListenerList</div><div class=\"line\">            = <span class=\"keyword\">new</span> CopyOnWriteArrayList&lt;&gt;();</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">private</span> Binder mBinder = <span class=\"keyword\">new</span> IBookManager.Stub() &#123;</div><div class=\"line\">        <span class=\"meta\">@Override</span></div><div class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">basicTypes</span><span class=\"params\">(<span class=\"keyword\">int</span> anInt, <span class=\"keyword\">long</span> aLong, <span class=\"keyword\">boolean</span> aBoolean, <span class=\"keyword\">float</span> aFloat, <span class=\"keyword\">double</span> aDouble, String aString)</span> <span class=\"keyword\">throws</span> RemoteException </span>&#123;</div><div class=\"line\"></div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\">        <span class=\"meta\">@Override</span></div><div class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> List&lt;Book&gt; <span class=\"title\">getBookList</span><span class=\"params\">()</span> <span class=\"keyword\">throws</span> RemoteException </span>&#123;</div><div class=\"line\">            <span class=\"keyword\">return</span> mBookList;</div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\">        <span class=\"meta\">@Override</span></div><div class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">addBook</span><span class=\"params\">(Book book)</span> <span class=\"keyword\">throws</span> RemoteException </span>&#123;</div><div class=\"line\">            mBookList.add(book);</div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\">        <span class=\"meta\">@Override</span></div><div class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">registerListener</span><span class=\"params\">(IOnNewBookArrivedListener listener)</span> <span class=\"keyword\">throws</span> RemoteException </span>&#123;</div><div class=\"line\">            <span class=\"keyword\">if</span> (!mListenerList.contains(listener)) &#123;</div><div class=\"line\">                mListenerList.add(listener);</div><div class=\"line\">            &#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">                Log.d(<span class=\"string\">\"xuan\"</span>, <span class=\"string\">\"already exists.\"</span>);</div><div class=\"line\">            &#125;</div><div class=\"line\">            Log.d(<span class=\"string\">\"xuan\"</span>, <span class=\"string\">\"registerListener,size:\"</span> + mListenerList.size());</div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\">        <span class=\"meta\">@Override</span></div><div class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">unRegisterListener</span><span class=\"params\">(IOnNewBookArrivedListener listener)</span> <span class=\"keyword\">throws</span> RemoteException </span>&#123;</div><div class=\"line\">            <span class=\"keyword\">if</span> (mListenerList.contains(listener)) &#123;</div><div class=\"line\">                mListenerList.remove(listener);</div><div class=\"line\">                Log.d(<span class=\"string\">\"xuan\"</span>, <span class=\"string\">\"unregister listener succeed.\"</span>);</div><div class=\"line\">            &#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">                Log.d(<span class=\"string\">\"xuan\"</span>, <span class=\"string\">\"not found,can not unregister.\"</span>);</div><div class=\"line\">            &#125;</div><div class=\"line\">            Log.d(<span class=\"string\">\"xuan\"</span>, <span class=\"string\">\"unregisterListener,current size:\"</span> + mListenerList.size());</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;;</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">    <span class=\"meta\">@Override</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onCreate</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">super</span>.onCreate();</div><div class=\"line\"></div><div class=\"line\">        mBookList.add(<span class=\"keyword\">new</span> Book(<span class=\"number\">1</span>, <span class=\"string\">\"Android\"</span>));</div><div class=\"line\">        mBookList.add(<span class=\"keyword\">new</span> Book(<span class=\"number\">2</span>, <span class=\"string\">\"IOS\"</span>));</div><div class=\"line\">        <span class=\"keyword\">new</span> Thread(<span class=\"keyword\">new</span> ServiceWorker()).start();</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"meta\">@Nullable</span></div><div class=\"line\">    <span class=\"meta\">@Override</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> IBinder <span class=\"title\">onBind</span><span class=\"params\">(Intent intent)</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> mBinder;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"meta\">@Override</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onDestroy</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">        mIsServiceDestroyed.set(<span class=\"keyword\">true</span>);</div><div class=\"line\">        <span class=\"keyword\">super</span>.onDestroy();</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">onNewBookArrived</span><span class=\"params\">(Book book)</span> <span class=\"keyword\">throws</span> RemoteException </span>&#123;</div><div class=\"line\">        mBookList.add(book);</div><div class=\"line\">        Log.d(<span class=\"string\">\"xuan\"</span>, <span class=\"string\">\"onNewBookArrived,notify listeners:\"</span> + mListenerList.</div><div class=\"line\">                size());</div><div class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; mListenerList.size(); i++) &#123;</div><div class=\"line\">            IOnNewBookArrivedListener listener = mListenerList.get(i);</div><div class=\"line\">            Log.d(<span class=\"string\">\"xuan\"</span>, <span class=\"string\">\"onNewBookArrived,notify listener:\"</span> + listener);</div><div class=\"line\">            listener.onNewBookArrived(book);</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">private</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ServiceWorker</span> <span class=\"keyword\">implements</span> <span class=\"title\">Runnable</span> </span>&#123;</div><div class=\"line\">        <span class=\"meta\">@Override</span></div><div class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">run</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">            <span class=\"keyword\">while</span> (!mIsServiceDestroyed.get()) &#123;</div><div class=\"line\">                <span class=\"keyword\">try</span> &#123;</div><div class=\"line\">                    Thread.sleep(<span class=\"number\">5000</span>);</div><div class=\"line\">                &#125; <span class=\"keyword\">catch</span> (InterruptedException e) &#123;</div><div class=\"line\">                    e.printStackTrace();</div><div class=\"line\">                &#125;</div><div class=\"line\">                <span class=\"keyword\">int</span> bookId = mBookList.size() + <span class=\"number\">1</span>;</div><div class=\"line\">                Book newBook = <span class=\"keyword\">new</span> Book(bookId, <span class=\"string\">\"new book#\"</span> + bookId);</div><div class=\"line\">                <span class=\"keyword\">try</span> &#123;</div><div class=\"line\">                    onNewBookArrived(newBook);</div><div class=\"line\">                &#125; <span class=\"keyword\">catch</span> (RemoteException e) &#123;</div><div class=\"line\">                    e.printStackTrace();</div><div class=\"line\">                &#125;</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>最后还需要修改一下客户端的代码，主要有两方面：首先客户端要注册IOnNewBookArrivedListener到远程服务端，这样当有新书时服务端才能通知当前客户端，同时我们要在Activity退出时解除这个注册；另一方面，当有新书时，服务端会回调客户端的IOnNewBookArrivedListener对象中的onNewBookArrived方法，但是这个方法是在客户端的Binder线程池中执行的，因此，为了便于进行UI操作，我们需要有一个Handler可以将其切换到客户端的主线程中去执行，代码如下：<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div><div class=\"line\">71</div><div class=\"line\">72</div><div class=\"line\">73</div><div class=\"line\">74</div><div class=\"line\">75</div><div class=\"line\">76</div><div class=\"line\">77</div><div class=\"line\">78</div><div class=\"line\">79</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MainActivity</span> <span class=\"keyword\">extends</span> <span class=\"title\">AppCompatActivity</span> </span>&#123;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> MESSAGE_NEW_BOOK_ARRIVED = <span class=\"number\">1</span>;</div><div class=\"line\">    <span class=\"keyword\">private</span> IBookManager mRemoteBookManager;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">private</span> Handler mHandler = <span class=\"keyword\">new</span> Handler() &#123;</div><div class=\"line\">        <span class=\"meta\">@Override</span></div><div class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">handleMessage</span><span class=\"params\">(Message msg)</span> </span>&#123;</div><div class=\"line\">            <span class=\"keyword\">switch</span> (msg.what) &#123;</div><div class=\"line\">                <span class=\"keyword\">case</span> MESSAGE_NEW_BOOK_ARRIVED:</div><div class=\"line\">                    Log.d(<span class=\"string\">\"MainActivity\"</span>,<span class=\"string\">\"receive new book :\"</span> + msg.obj);</div><div class=\"line\">                    <span class=\"keyword\">break</span>;</div><div class=\"line\">                <span class=\"keyword\">default</span>:</div><div class=\"line\">                    <span class=\"keyword\">super</span>.handleMessage(msg);</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">private</span> ServiceConnection mConnection = <span class=\"keyword\">new</span> ServiceConnection() &#123;</div><div class=\"line\">        <span class=\"meta\">@Override</span></div><div class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onServiceConnected</span><span class=\"params\">(ComponentName name, IBinder service)</span> </span>&#123;</div><div class=\"line\">            IBookManager bookManager= IBookManager.Stub.asInterface(service);</div><div class=\"line\">            <span class=\"keyword\">try</span> &#123;</div><div class=\"line\">                mRemoteBookManager = bookManager;</div><div class=\"line\">                List&lt;Book&gt; list = bookManager.getBookList();</div><div class=\"line\">                Log.d(<span class=\"string\">\"MainActivity\"</span>,<span class=\"string\">\"bookManager.getBookList()--&gt;\"</span> + list.size() +<span class=\"string\">\"&gt;&gt; \"</span> + list.toString());</div><div class=\"line\">                bookManager.addBook(<span class=\"keyword\">new</span> Book(<span class=\"number\">3</span>,<span class=\"string\">\"java\"</span>));</div><div class=\"line\">                List&lt;Book&gt; newList = bookManager.getBookList();</div><div class=\"line\">                Log.d(<span class=\"string\">\"MainActivity\"</span>,<span class=\"string\">\"bookManager.getBookList()--&gt;\"</span> + newList.size()+<span class=\"string\">\"&gt;&gt; \"</span> + newList.toString());</div><div class=\"line\">                bookManager.registerListener(mOnNewBookArrivedListener);</div><div class=\"line\">            &#125;<span class=\"keyword\">catch</span> (RemoteException e)&#123;</div><div class=\"line\">                e.printStackTrace();</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\">        <span class=\"meta\">@Override</span></div><div class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onServiceDisconnected</span><span class=\"params\">(ComponentName name)</span> </span>&#123;</div><div class=\"line\">            mRemoteBookManager = <span class=\"keyword\">null</span>;</div><div class=\"line\">            Log.e(<span class=\"string\">\"MainActivity\"</span>,<span class=\"string\">\"binder died.\"</span>);</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;;</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">private</span> IOnNewBookArrivedListener mOnNewBookArrivedListener = <span class=\"keyword\">new</span> IOnNewBookArrivedListener.Stub() &#123;</div><div class=\"line\">        <span class=\"meta\">@Override</span></div><div class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">basicTypes</span><span class=\"params\">(<span class=\"keyword\">int</span> anInt, <span class=\"keyword\">long</span> aLong, <span class=\"keyword\">boolean</span> aBoolean, <span class=\"keyword\">float</span> aFloat, <span class=\"keyword\">double</span> aDouble, String aString)</span> <span class=\"keyword\">throws</span> RemoteException </span>&#123;</div><div class=\"line\"></div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\">        <span class=\"meta\">@Override</span></div><div class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onNewBookArrived</span><span class=\"params\">(Book newBook)</span> <span class=\"keyword\">throws</span> RemoteException </span>&#123;</div><div class=\"line\">            mHandler.obtainMessage(MESSAGE_NEW_BOOK_ARRIVED,newBook)</div><div class=\"line\">                    .sendToTarget();</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"meta\">@Override</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title\">onCreate</span><span class=\"params\">(Bundle savedInstanceState)</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">super</span>.onCreate(savedInstanceState);</div><div class=\"line\">        setContentView(R.layout.activity_main);</div><div class=\"line\">        Intent intent = <span class=\"keyword\">new</span> Intent(<span class=\"keyword\">this</span>,BookManagerService.class);</div><div class=\"line\">        bindService(intent,mConnection, Context.BIND_AUTO_CREATE);</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"meta\">@Override</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title\">onDestroy</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">if</span> (mRemoteBookManager != <span class=\"keyword\">null</span></div><div class=\"line\">                &amp;&amp; mRemoteBookManager.asBinder().isBinderAlive()) &#123;</div><div class=\"line\">            <span class=\"keyword\">try</span> &#123;</div><div class=\"line\">                Log.d(<span class=\"string\">\"MainActivity\"</span>,<span class=\"string\">\"unregister listener:\"</span> + mOnNewBookArrivedListener);</div><div class=\"line\">                mRemoteBookManager.unRegisterListener(mOnNewBookArrivedListener);</div><div class=\"line\">            &#125; <span class=\"keyword\">catch</span> (RemoteException e) &#123;</div><div class=\"line\">                e.printStackTrace();</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;</div><div class=\"line\">        unbindService(mConnection);</div><div class=\"line\">        <span class=\"keyword\">super</span>.onDestroy();</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>从上面的代码可以看出，当BookManagerActivity关闭时，我们会在onDestroy中去解除已经注册到服务端的listener，这就相当于我们不想再接收图书馆的新书提醒了，所以我<br>们可以随时取消这个提醒服务。按back键退出BookManagerActivity,下面是打印出的log<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">07-23 14:56:55.493 16905-16918/com.huangyuanlove.testandroid:remote D/BookManagerService: not found,can not unregister.</div><div class=\"line\">07-23 14:56:57.185 16905-16918/com.huangyuanlove.testandroid:remote D/BookManagerService: unregisterListener,current size:1</div></pre></td></tr></table></figure></p>\n<p>从上面的log可以看出，程序没有像我们所预期的那样执行。在解注册的过程中，服务端竟然无法找到我们之前注册的那个listener，其实，这是必然的，这种解注册的处理方式在日常开发过程中时常使用到，但是放到多进程中却无法奏效，因为Binder会把客户端传递过来的对象重新转化并生成一个新的对象。虽然我们在注册和解注册过程中使用的是同一个客户端对象，但是通过Binder传递到服务端后，却会产生两个全新的对象。别忘了对象是不能跨进程直接传输的，对象的跨进程传输本质上都是反序列化的过程，这就是为什么AIDL中的自定义对象都必须要实现Parcelable接口的原因。可以使用<code>RemoteCallbackList</code>。<br>RemoteCallbackList是系统专门提供的用于删除跨进程listener的接口。 RemoteCallbackList是一个泛型， 支持管理任意的AIDL接口， 这点从它的声明就可以看出，因为所有的AIDL接口都继承自IInterface接口</p>\n<blockquote>\n<p>public class RemoteCallbackList<e extends=\"\" iinterface=\"\"></e></p>\n</blockquote>\n<p>它的工作原理很简单， 在它的内部有一个Map结构专门用来保存所有的AIDL回调，这个Map的key是IBinder类型， value是Callback类型， 如下所示:</p>\n<blockquote>\n<p>ArrayMap<ibinder,callback> mCallbacks = new ArrayMap<ibinder,callback>();</ibinder,callback></ibinder,callback></p>\n</blockquote>\n<p>其中Callback中封装了真正的远程listener。 当客户端注册listener的时候，它会把这个listener的信息存入mCallbacks中， 其中key和value分别通过下面的方式获得：</p>\n<blockquote>\n<p>IBinder key= listener.asBinder()<br>Callback value = new Callback(listener,cookie)</p>\n</blockquote>\n<p>虽然说多次跨进程传输客户端的同一个对象会在服务端生成不同的对象，但是这些新生成的对象有一个共同点，那就是它们底层的Binder对象是同一个， 利用这个特性，就可以实现上面我们无法实现的功能。当客户端解注册的时候，我们只要遍历服务端所有的listener， 找出那个和解注册listener具有相同Binder对象的服务端listener并把它删掉即可，这就是RemoteCallbackList为我们做的事情。同时RemoteCallbackList还有一个很有用的功能， 那就是当客户端进程终止后，它能够自动移除客户端所注册的listener。另外，RemoteCallbackList内部自动实现了线程同步的功能，所以我们使用它来注册和解注册时，不需要做额外的线程同步工作。<br>RemoteCallbackList使用起来很简单，我们要对BookManagerService做一些修改，首先要创建一个RemoteCallbackList对象来替代之前的CopyOnWriteArrayList，如下所示:<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">private</span> RemoteCallbackList&lt;IOnNewBookArrivedListener&gt; mListenerList = <span class=\"keyword\">new</span> RemoteCallbackList&lt;IOnNewBookArrivedListener&gt;();</div></pre></td></tr></table></figure></p>\n<p>然后修改registerListener和unregisterListener这两个接口的实现， 如下所示:<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">@Override</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">registerListener</span><span class=\"params\">(IOnNewBookArrivedIistener listener)</span> <span class=\"keyword\">throws</span> RemoteException </span>&#123;</div><div class=\"line\">    mListenerList.register(listener);</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"meta\">@Override</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">unRegisterListener</span><span class=\"params\">(IOnNewBookArrivedIistener listener)</span> <span class=\"keyword\">throws</span> RemoteException </span>&#123;</div><div class=\"line\">    mListenerList.unregister(listener);</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>接着要修改onNewBookArrived方法，当有新书时，我们就要通知所有已注册的listener，如下所示:<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">onNewBookArrived</span><span class=\"params\">(Book book)</span> <span class=\"keyword\">throws</span> RemoteException </span>&#123;</div><div class=\"line\">        books.add(book);</div><div class=\"line\">       <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> N  =mListenerList.beginBroadcast();</div><div class=\"line\">       <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">0</span> ; i &lt; N;i++)&#123;</div><div class=\"line\">           IOnNewBookArrivedIistener iOnNewBookArrivedIistener = mListenerList.getBroadcastItem(i);</div><div class=\"line\">           <span class=\"keyword\">if</span>(iOnNewBookArrivedIistener!=<span class=\"keyword\">null</span>)&#123;</div><div class=\"line\">               iOnNewBookArrivedIistener.onNewBookArrived(book);</div><div class=\"line\">           &#125;</div><div class=\"line\">       &#125;</div><div class=\"line\">       mListenerList.finishBroadcast();</div><div class=\"line\">    &#125;</div></pre></td></tr></table></figure></p>\n<p>使用RemoteCallbackList，有一点需要注意，我们无法像操作List一样去操作它，尽管它的名字中也带个List，但是它并不是一个List。遍历RemoteCallbackList，必须要按照下面的方式进行，其中beginBroadcast和beginBroadcast必须要配对使用，哪怕我们仅仅是想要获取RemoteCallbackList中的元素个数，这是必须要注意的地方。<br>另外还有几点需要说明一下：</p>\n<ul>\n<li>客户端调用远程服务的方法，被调用的方法运行在服务端的Binder线程池中，同时客户端线程会被挂起，这个时候如果服务端方法执行比较耗时，就会导致客户端线程长时间地阻塞在这里，而如果这个客户端线程是UI线程的话，就会导致客户端ANR。因此，如果我们明确知道某个远程方法是耗时的，那么就要避免在客户端的UI线程中去访问远程方法。由于客户端的<code>onServiceConnected</code>和<code>onServiceDisconnected</code>方法都运行在UI线程中，所以也不可以在它们里面直接调用服务端的耗时方法，这点要尤其注意。</li>\n<li>由于服务端的方法本身就运行在服务端的Binder线程池中，所以服务端方法本身就可以执行大量耗时操作，这个时候切记不要在服务端方法中开线程去进行异步任务，除非你明确知道自己在干什么，否则不建议这么做。</li>\n<li>同理，当远程服务端需要调用客户端的listener中的方法时，被调用的方法也运行在Binder线程池中，只不过是客户端的线程池。所以，我们同样不可以在服务端中调用客户端的耗时方法。比如针对BookManagerService的onNewBookArrived方法。在它内部调用了客户端的IOnNewBookArrivedListener中的onNewBookArrived方法，如果客户端的这个onNewBookArrived方法比较耗时的话，那么请确保BookManagerService中的onNewBookArrived运行在非UI线程中，否则将导致服务端无法响应。</li>\n<li>权限验证，第一种方法，我们可以在onBind中进行验证，验证不通过就直接返回null，这样验证失败的客户端直接无法绑定服务，至于验证方式可以有多种， 比如使用permission验证。第二种方法，我们可以在服务端的onTransact方法中进行权限验证，如果验证失败就直接返回false，这样服务端就不会终止执行AIDL中的方法从而达到保护服务端的效果。</li>\n</ul>\n<hr>\n<p>以上</p>\n","excerpt":"<p>Android中中IPC方式有很多，比如使用Bundle，使用文件共享，使用Messenger，使用AIDL，使用ContentProvider，使用Socket等。前两种方式比较简单，自己玩。<br>下面主要是抄的《Android开发艺术探索》2.4.4章节，看过书的就不用看了。<br>","more":"<br>上一篇主要抄了Messenger来进行进程间通信的方法，可以发现Messenger是以串行的方式处理客户端发来的消息，如果大量的消息同时发送到服务端，服务端仍然只能一个个处理，如果有大量的并发请求，那么用Messenger就不太合适了。同时，Messenger的作用主要是为了传递消息，很多时候我们可能需要跨进程调用服务端的方法，这种情形用Messenger就无法做到了，但是我们可以使用AIDL来实现跨进程的方法调用。AIDL也是Messenger的底层实现，因此Messenger本质上也是AIDL，只不过系统为我们做了封装从而方便上层的调用而已。在上一节中，我们介绍了Binder的概念，大家对Binder也有了一定的了解，在Binder的基础上我们可以更加容易地理解AIDL。这里先介绍使用AIDL来进行进程间通信的流程，分为服务端和客户端两个方面。</p>\n<h5 id=\"服务端\"><a href=\"#服务端\" class=\"headerlink\" title=\"服务端\"></a>服务端</h5><p>服务端首先要创建一个Service用来监听客户端的连接请求，然后创建一个AIDL文件，将暴露给客户端的接口在这个AIDL文件中声明，最后在Service中实现这个AIDL接口即可。</p>\n<h5 id=\"客户端\"><a href=\"#客户端\" class=\"headerlink\" title=\"客户端\"></a>客户端</h5><p>客户端所要做事情就稍微简单一些，首先需要绑定服务端的Service，绑定成功后，将服务端返回的Binder对象转成AIDL接口所属的类型，接着就可以调用AIDL中的方法了。</p>\n<h5 id=\"具体实现方式\"><a href=\"#具体实现方式\" class=\"headerlink\" title=\"具体实现方式\"></a>具体实现方式</h5><h6 id=\"AIDL接口的创建\"><a href=\"#AIDL接口的创建\" class=\"headerlink\" title=\"AIDL接口的创建\"></a>AIDL接口的创建</h6><p>收看看AIDL接口的创建，如下所示创建了一个后缀为AIDL的文件，在里面声明了一个接口和两个方法。创建AIDL文件的方式可以看这个<a href=\"http://blog.huangyuanlove.com/2018/06/21/Android%E5%A4%9A%E8%BF%9B%E7%A8%8B-%E4%B8%80/#more\">Android多进程(一)</a></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// IBookManager.aidl</span></div><div class=\"line\"><span class=\"keyword\">package</span> com.huangyuanlove.testandroid;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// Declare any non-default types here with import statements</span></div><div class=\"line\"><span class=\"keyword\">import</span> com.huangyuanlove.testandroid.Book;</div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">interface</span> <span class=\"title\">IBookManager</span> </span>&#123;</div><div class=\"line\">    <span class=\"comment\">/**</div><div class=\"line\">     * Demonstrates some basic types that you can use as parameters</div><div class=\"line\">     * and return values in AIDL.</div><div class=\"line\">     */</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">basicTypes</span><span class=\"params\">(<span class=\"keyword\">int</span> anInt, <span class=\"keyword\">long</span> aLong, <span class=\"keyword\">boolean</span> aBoolean, <span class=\"keyword\">float</span> aFloat,</div><div class=\"line\">            <span class=\"keyword\">double</span> aDouble, String aString)</span></span>;</div><div class=\"line\">            <span class=\"function\">List&lt;Book&gt; <span class=\"title\">getBookList</span><span class=\"params\">()</span></span>;</div><div class=\"line\">            <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">addBook</span><span class=\"params\">(in Book book)</span></span>;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>在AIDL文件中，并不是所有的数据类型都是可以使用的，只支持如下几种类型：</p>\n<ul>\n<li>基本数据类型（int、long、char、boolean、double等）；</li>\n<li>String和CharSequence；</li>\n<li>List：只支持ArrayList，里面每个元素都必须能够被AIDL支持；</li>\n<li>Map：只支持HashMap，里面的每个元素都必须被AIDL支持，包括key和value；</li>\n<li>Parcelable：所有实现了Parcelable接口的对象；</li>\n<li>AIDL：所有的AIDL接口本身也可以在AIDL文件中使用。</li>\n</ul>\n<p>以上6种数据类型就是AIDL所支持的所有类型，其中自定义的Parcelable对象和AIDL对象必须要显式import进来，不管它们是否和当前的AIDL文件位于同一个包内。比如IBookManager.aidl这个文件，里面用到了Book这个类，这个类实现了Parcelable接口并且和IBookManager.aidl位于同一个包中，但是遵守AIDL的规范，我们仍然需要显式地import进来：com.huangyuanlove.testandroid.Book。<br>另外一个需要注意的地方是，如果AIDL文件中用到了自定义的Parcelable对象，那么必须新建一个和它同名的AIDL文件，并在其中声明它为Parcelable类型。在上面的IBookManager.aidl中，我们用到了Book这个类，所以，我们必须要创建Book.aidl，然后在里面添加如下内容：<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">package</span> com.huangyuanlove.testandroid;</div><div class=\"line\">parcelable Book;</div></pre></td></tr></table></figure></p>\n<h6 id=\"远程服务端Service的实现\"><a href=\"#远程服务端Service的实现\" class=\"headerlink\" title=\"远程服务端Service的实现\"></a>远程服务端Service的实现</h6><p>上面讲述了如何定义AIDL接口，接下来实现这个接口。先创建一个service，代码如下：<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">package</span> com.huangyuanlove.testandroid;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">import</span> android.app.Service;</div><div class=\"line\"><span class=\"keyword\">import</span> android.content.Intent;</div><div class=\"line\"><span class=\"keyword\">import</span> android.os.Binder;</div><div class=\"line\"><span class=\"keyword\">import</span> android.os.IBinder;</div><div class=\"line\"><span class=\"keyword\">import</span> android.os.RemoteException;</div><div class=\"line\"><span class=\"keyword\">import</span> android.support.annotation.Nullable;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">import</span> java.util.List;</div><div class=\"line\"><span class=\"keyword\">import</span> java.util.concurrent.CopyOnWriteArrayList;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">BookManagerService</span> <span class=\"keyword\">extends</span> <span class=\"title\">Service</span> </span>&#123;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">private</span> CopyOnWriteArrayList&lt;Book&gt; mBookList = <span class=\"keyword\">new</span> CopyOnWriteArrayList&lt;&gt;();</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">private</span> Binder mBinder = <span class=\"keyword\">new</span> IBookManager.Stub() &#123;</div><div class=\"line\">        <span class=\"meta\">@Override</span></div><div class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">basicTypes</span><span class=\"params\">(<span class=\"keyword\">int</span> anInt, <span class=\"keyword\">long</span> aLong, <span class=\"keyword\">boolean</span> aBoolean, <span class=\"keyword\">float</span> aFloat, <span class=\"keyword\">double</span> aDouble, String aString)</span> <span class=\"keyword\">throws</span> RemoteException </span>&#123;</div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\">        <span class=\"meta\">@Override</span></div><div class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> List&lt;Book&gt; <span class=\"title\">getBookList</span><span class=\"params\">()</span> <span class=\"keyword\">throws</span> RemoteException </span>&#123;</div><div class=\"line\">            <span class=\"keyword\">return</span> mBookList;</div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\">        <span class=\"meta\">@Override</span></div><div class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">addBook</span><span class=\"params\">(Book book)</span> <span class=\"keyword\">throws</span> RemoteException </span>&#123;</div><div class=\"line\">            mBookList.add(book);</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"meta\">@Override</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onCreate</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">super</span>.onCreate();</div><div class=\"line\">        mBookList.add(<span class=\"keyword\">new</span> Book(<span class=\"number\">1</span>,<span class=\"string\">\"Android\"</span>));</div><div class=\"line\">        mBookList.add(<span class=\"keyword\">new</span> Book(<span class=\"number\">2</span>,<span class=\"string\">\"IOS\"</span>));</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"meta\">@Nullable</span></div><div class=\"line\">    <span class=\"meta\">@Override</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> IBinder <span class=\"title\">onBind</span><span class=\"params\">(Intent intent)</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> mBinder;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>上面是一个服务端Service的典型实现，首先在onCreate中初始化添加了两本图书的信息，然后创建了一个Binder对象并在onBind中返回它，这个对象继承<code>IBookManager.Stub</code>并实现了它内部的AIDL方法，注意这里采用了CopyOnWriteArrayList，这个CopyOnWriteArrayList支持并发读/写。在前面<br>我们提到，AIDL方法是在服务端的Binder线程池中执行的，因此当多个客户端同时连接的时候，会存在多个线程同时访问的情形，所以我们要在AIDL方法中处理线程同步，而我们这里直接使用CopyOnWriteArrayList来进行自动的线程同步。AIDL中所支持的是抽象的List，而List只是一个接口，因此虽然服务端返回的是CopyOnWriteArrayList，但是在Binder中会按照List的规范去访问数据并最终形成一个新的ArrayList传递给客户端。所以，我们在服务端采用CopyOnWriteArrayList是完全可以的。和此类似的还有ConcurrentHashMap，然后我们需要在XML中注册这个Service:<br><figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">service</span> <span class=\"attr\">android:name</span>=<span class=\"string\">\".BookManagerService\"</span></div><div class=\"line\">            <span class=\"attr\">android:process</span>=<span class=\"string\">\":remote\"</span>/&gt;</span></div></pre></td></tr></table></figure></p>\n<h6 id=\"客户端的实现\"><a href=\"#客户端的实现\" class=\"headerlink\" title=\"客户端的实现\"></a>客户端的实现</h6><p>客户端的实现就比较简单了，首先要绑定远程服务，绑定成功后将服务端返回的Binder对象转换成AIDL接口，然后就可以通过这个接口去调用服务端的远程方法了，代码如下所示：<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MainActivity</span> <span class=\"keyword\">extends</span> <span class=\"title\">AppCompatActivity</span> </span>&#123;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">private</span> ServiceConnection mConnection = <span class=\"keyword\">new</span> ServiceConnection() &#123;</div><div class=\"line\">        <span class=\"meta\">@Override</span></div><div class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onServiceConnected</span><span class=\"params\">(ComponentName name, IBinder service)</span> </span>&#123;</div><div class=\"line\">            IBookManager bookManager= IBookManager.Stub.asInterface(service);</div><div class=\"line\">            <span class=\"keyword\">try</span> &#123;</div><div class=\"line\">                List&lt;Book&gt; list = bookManager.getBookList();</div><div class=\"line\">                Log.d(<span class=\"string\">\"xuan\"</span>,<span class=\"string\">\"bookManager.getBookList()--&gt;\"</span> + list.size());</div><div class=\"line\">                bookManager.addBook(<span class=\"keyword\">new</span> Book(<span class=\"number\">3</span>,<span class=\"string\">\"java\"</span>));</div><div class=\"line\">                List&lt;Book&gt; newList = bookManager.getBookList();</div><div class=\"line\">                Log.d(<span class=\"string\">\"xuan\"</span>,<span class=\"string\">\"bookManager.getBookList()--&gt;\"</span> + newList.size());</div><div class=\"line\">            &#125;<span class=\"keyword\">catch</span> (RemoteException e)&#123;</div><div class=\"line\">                e.printStackTrace();</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\">        <span class=\"meta\">@Override</span></div><div class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onServiceDisconnected</span><span class=\"params\">(ComponentName name)</span> </span>&#123;</div><div class=\"line\"></div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"meta\">@Override</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title\">onCreate</span><span class=\"params\">(Bundle savedInstanceState)</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">super</span>.onCreate(savedInstanceState);</div><div class=\"line\">        setContentView(R.layout.activity_main);</div><div class=\"line\">        Intent intent = <span class=\"keyword\">new</span> Intent(<span class=\"keyword\">this</span>,BookManagerService.class);</div><div class=\"line\">        bindService(intent,mConnection, Context.BIND_AUTO_CREATE);</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"meta\">@Override</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title\">onDestroy</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">        unbindService(mConnection);</div><div class=\"line\">        <span class=\"keyword\">super</span>.onDestroy();</div><div class=\"line\"></div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>绑定成功以后，会通过bookManager去调用getBookList方法，然后打印出所获取的图书信息。需要注意的是，服务端的方法有可能需要很久才能执行完毕，这个时候下面的代码就会导致ANR，这一点是需要注意的，后面会再介绍这种情况，接着再调用一下另外一个接口addBook，我们在客户端给服务端添加一本书，然后再获取一次。<br>现在我们考虑一种情况，假设有一种需求：用户不想时不时地去查询图书列表了，太累了，于是，他去问图书馆，“当有新书时能不能把书的信息告诉我呢？”。这就是一种典型的观察者模式。<br>首先，我们需要提供一个AIDL接口，每个用户都需要实现这个接口并且向图书馆申请新书的提醒功能，当然用户也可以随时取消这种提醒。之所以选择AIDL<br>接口而不是普通接口，是因为AIDL中无法使用普通接口。这里我们创建一个IOnNewBookArrivedListener.aidl文件，我们所期望的情况是：当服务端有新书到来时，就会通知每一个已经申请提醒功能的用户。从程序上来说就是调用所有IOnNewBookArrivedListener对象中的onNewBookArrived方法，并把新书的对象通过参数传递给客户端，内容如下所示：<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// IOnNewBookArrivedListener.aidl</span></div><div class=\"line\"><span class=\"keyword\">package</span> com.huangyuanlove.testandroid;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// Declare any non-default types here with import statements</span></div><div class=\"line\"><span class=\"keyword\">import</span> com.huangyuanlove.testandroid.Book;</div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">interface</span> <span class=\"title\">IOnNewBookArrivedListener</span> </span>&#123;</div><div class=\"line\">    <span class=\"comment\">/**</div><div class=\"line\">     * Demonstrates some basic types that you can use as parameters</div><div class=\"line\">     * and return values in AIDL.</div><div class=\"line\">     */</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">basicTypes</span><span class=\"params\">(<span class=\"keyword\">int</span> anInt, <span class=\"keyword\">long</span> aLong, <span class=\"keyword\">boolean</span> aBoolean, <span class=\"keyword\">float</span> aFloat,</div><div class=\"line\">            <span class=\"keyword\">double</span> aDouble, String aString)</span></span>;</div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">onNewBookArrived</span><span class=\"params\">(in Book newBook)</span></span>;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>AIDL中除了基本数据类型，其他类型的参数必须标上方向：in、out或者inout，in表示输入型参数，out表示输出型参数，inout表示输入输出型参数，至于它们具体的区别，官网是这么说的：</p>\n<blockquote>\n<p>All non-primitive parameters require a directional tag indicating which way the data goes . Either in , out , or inout . Primitives are in by default , and connot be otherwise .</p>\n<p>所有的非基本参数都需要一个定向tag来指出数据的流向，不管是 in , out , 还是 inout 。基本参数的定向tag默认是并且只能是 in 。</p>\n</blockquote>\n<p>我们要根据实际需要去指定参数类型，不能一概使用out或者inout，因为这在底层实现是有开销的。最后，AIDL接口中只支持方法，不支持声明静态常量，这一点区别于传统的接口。<br>除了要新增加一个AIDL接口，还需要在原有的接口中添加两个新方法，代码如下：<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">package</span> com.huangyuanlove.testandroid;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">import</span> com.huangyuanlove.testandroid.Book;</div><div class=\"line\"><span class=\"keyword\">import</span> com.huangyuanlove.testandroid.IOnNewBookArrivedListener;</div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">interface</span> <span class=\"title\">IBookManager</span> </span>&#123;</div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">basicTypes</span><span class=\"params\">(<span class=\"keyword\">int</span> anInt, <span class=\"keyword\">long</span> aLong, <span class=\"keyword\">boolean</span> aBoolean, <span class=\"keyword\">float</span> aFloat,</div><div class=\"line\">            <span class=\"keyword\">double</span> aDouble, String aString)</span></span>;</div><div class=\"line\">    <span class=\"function\">List&lt;Book&gt; <span class=\"title\">getBookList</span><span class=\"params\">()</span></span>;</div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">addBook</span><span class=\"params\">(in Book book)</span></span>;</div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">registerListener</span><span class=\"params\">(IOnNewBookArrivedListener listener)</span></span>;</div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">unRegisterListener</span><span class=\"params\">(IOnNewBookArrivedListener listener)</span></span>;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>接着，服务端中的Service的实现也需要修改一下，主要是Service中的IBookManager.Stub的实现，需要实现新增加的两个方法(IDE没有提示的话可以make一下)。同时，在BookManagerService中还开启了一个线程，每隔5s就向书库中增加一本新书并通知所有感兴趣的用户，整个代码如下所示：<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div><div class=\"line\">71</div><div class=\"line\">72</div><div class=\"line\">73</div><div class=\"line\">74</div><div class=\"line\">75</div><div class=\"line\">76</div><div class=\"line\">77</div><div class=\"line\">78</div><div class=\"line\">79</div><div class=\"line\">80</div><div class=\"line\">81</div><div class=\"line\">82</div><div class=\"line\">83</div><div class=\"line\">84</div><div class=\"line\">85</div><div class=\"line\">86</div><div class=\"line\">87</div><div class=\"line\">88</div><div class=\"line\">89</div><div class=\"line\">90</div><div class=\"line\">91</div><div class=\"line\">92</div><div class=\"line\">93</div><div class=\"line\">94</div><div class=\"line\">95</div><div class=\"line\">96</div><div class=\"line\">97</div><div class=\"line\">98</div><div class=\"line\">99</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">BookManagerService</span> <span class=\"keyword\">extends</span> <span class=\"title\">Service</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">private</span> AtomicBoolean mIsServiceDestroyed = <span class=\"keyword\">new</span> AtomicBoolean(<span class=\"keyword\">false</span>);</div><div class=\"line\">    <span class=\"keyword\">private</span> CopyOnWriteArrayList&lt;Book&gt; mBookList = <span class=\"keyword\">new</span> CopyOnWriteArrayList&lt;&gt;();</div><div class=\"line\">    <span class=\"keyword\">private</span> CopyOnWriteArrayList&lt;IOnNewBookArrivedListener&gt; mListenerList</div><div class=\"line\">            = <span class=\"keyword\">new</span> CopyOnWriteArrayList&lt;&gt;();</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">private</span> Binder mBinder = <span class=\"keyword\">new</span> IBookManager.Stub() &#123;</div><div class=\"line\">        <span class=\"meta\">@Override</span></div><div class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">basicTypes</span><span class=\"params\">(<span class=\"keyword\">int</span> anInt, <span class=\"keyword\">long</span> aLong, <span class=\"keyword\">boolean</span> aBoolean, <span class=\"keyword\">float</span> aFloat, <span class=\"keyword\">double</span> aDouble, String aString)</span> <span class=\"keyword\">throws</span> RemoteException </span>&#123;</div><div class=\"line\"></div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\">        <span class=\"meta\">@Override</span></div><div class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> List&lt;Book&gt; <span class=\"title\">getBookList</span><span class=\"params\">()</span> <span class=\"keyword\">throws</span> RemoteException </span>&#123;</div><div class=\"line\">            <span class=\"keyword\">return</span> mBookList;</div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\">        <span class=\"meta\">@Override</span></div><div class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">addBook</span><span class=\"params\">(Book book)</span> <span class=\"keyword\">throws</span> RemoteException </span>&#123;</div><div class=\"line\">            mBookList.add(book);</div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\">        <span class=\"meta\">@Override</span></div><div class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">registerListener</span><span class=\"params\">(IOnNewBookArrivedListener listener)</span> <span class=\"keyword\">throws</span> RemoteException </span>&#123;</div><div class=\"line\">            <span class=\"keyword\">if</span> (!mListenerList.contains(listener)) &#123;</div><div class=\"line\">                mListenerList.add(listener);</div><div class=\"line\">            &#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">                Log.d(<span class=\"string\">\"xuan\"</span>, <span class=\"string\">\"already exists.\"</span>);</div><div class=\"line\">            &#125;</div><div class=\"line\">            Log.d(<span class=\"string\">\"xuan\"</span>, <span class=\"string\">\"registerListener,size:\"</span> + mListenerList.size());</div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\">        <span class=\"meta\">@Override</span></div><div class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">unRegisterListener</span><span class=\"params\">(IOnNewBookArrivedListener listener)</span> <span class=\"keyword\">throws</span> RemoteException </span>&#123;</div><div class=\"line\">            <span class=\"keyword\">if</span> (mListenerList.contains(listener)) &#123;</div><div class=\"line\">                mListenerList.remove(listener);</div><div class=\"line\">                Log.d(<span class=\"string\">\"xuan\"</span>, <span class=\"string\">\"unregister listener succeed.\"</span>);</div><div class=\"line\">            &#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">                Log.d(<span class=\"string\">\"xuan\"</span>, <span class=\"string\">\"not found,can not unregister.\"</span>);</div><div class=\"line\">            &#125;</div><div class=\"line\">            Log.d(<span class=\"string\">\"xuan\"</span>, <span class=\"string\">\"unregisterListener,current size:\"</span> + mListenerList.size());</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;;</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">    <span class=\"meta\">@Override</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onCreate</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">super</span>.onCreate();</div><div class=\"line\"></div><div class=\"line\">        mBookList.add(<span class=\"keyword\">new</span> Book(<span class=\"number\">1</span>, <span class=\"string\">\"Android\"</span>));</div><div class=\"line\">        mBookList.add(<span class=\"keyword\">new</span> Book(<span class=\"number\">2</span>, <span class=\"string\">\"IOS\"</span>));</div><div class=\"line\">        <span class=\"keyword\">new</span> Thread(<span class=\"keyword\">new</span> ServiceWorker()).start();</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"meta\">@Nullable</span></div><div class=\"line\">    <span class=\"meta\">@Override</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> IBinder <span class=\"title\">onBind</span><span class=\"params\">(Intent intent)</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> mBinder;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"meta\">@Override</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onDestroy</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">        mIsServiceDestroyed.set(<span class=\"keyword\">true</span>);</div><div class=\"line\">        <span class=\"keyword\">super</span>.onDestroy();</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">onNewBookArrived</span><span class=\"params\">(Book book)</span> <span class=\"keyword\">throws</span> RemoteException </span>&#123;</div><div class=\"line\">        mBookList.add(book);</div><div class=\"line\">        Log.d(<span class=\"string\">\"xuan\"</span>, <span class=\"string\">\"onNewBookArrived,notify listeners:\"</span> + mListenerList.</div><div class=\"line\">                size());</div><div class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; mListenerList.size(); i++) &#123;</div><div class=\"line\">            IOnNewBookArrivedListener listener = mListenerList.get(i);</div><div class=\"line\">            Log.d(<span class=\"string\">\"xuan\"</span>, <span class=\"string\">\"onNewBookArrived,notify listener:\"</span> + listener);</div><div class=\"line\">            listener.onNewBookArrived(book);</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">private</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ServiceWorker</span> <span class=\"keyword\">implements</span> <span class=\"title\">Runnable</span> </span>&#123;</div><div class=\"line\">        <span class=\"meta\">@Override</span></div><div class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">run</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">            <span class=\"keyword\">while</span> (!mIsServiceDestroyed.get()) &#123;</div><div class=\"line\">                <span class=\"keyword\">try</span> &#123;</div><div class=\"line\">                    Thread.sleep(<span class=\"number\">5000</span>);</div><div class=\"line\">                &#125; <span class=\"keyword\">catch</span> (InterruptedException e) &#123;</div><div class=\"line\">                    e.printStackTrace();</div><div class=\"line\">                &#125;</div><div class=\"line\">                <span class=\"keyword\">int</span> bookId = mBookList.size() + <span class=\"number\">1</span>;</div><div class=\"line\">                Book newBook = <span class=\"keyword\">new</span> Book(bookId, <span class=\"string\">\"new book#\"</span> + bookId);</div><div class=\"line\">                <span class=\"keyword\">try</span> &#123;</div><div class=\"line\">                    onNewBookArrived(newBook);</div><div class=\"line\">                &#125; <span class=\"keyword\">catch</span> (RemoteException e) &#123;</div><div class=\"line\">                    e.printStackTrace();</div><div class=\"line\">                &#125;</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>最后还需要修改一下客户端的代码，主要有两方面：首先客户端要注册IOnNewBookArrivedListener到远程服务端，这样当有新书时服务端才能通知当前客户端，同时我们要在Activity退出时解除这个注册；另一方面，当有新书时，服务端会回调客户端的IOnNewBookArrivedListener对象中的onNewBookArrived方法，但是这个方法是在客户端的Binder线程池中执行的，因此，为了便于进行UI操作，我们需要有一个Handler可以将其切换到客户端的主线程中去执行，代码如下：<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div><div class=\"line\">71</div><div class=\"line\">72</div><div class=\"line\">73</div><div class=\"line\">74</div><div class=\"line\">75</div><div class=\"line\">76</div><div class=\"line\">77</div><div class=\"line\">78</div><div class=\"line\">79</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MainActivity</span> <span class=\"keyword\">extends</span> <span class=\"title\">AppCompatActivity</span> </span>&#123;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> MESSAGE_NEW_BOOK_ARRIVED = <span class=\"number\">1</span>;</div><div class=\"line\">    <span class=\"keyword\">private</span> IBookManager mRemoteBookManager;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">private</span> Handler mHandler = <span class=\"keyword\">new</span> Handler() &#123;</div><div class=\"line\">        <span class=\"meta\">@Override</span></div><div class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">handleMessage</span><span class=\"params\">(Message msg)</span> </span>&#123;</div><div class=\"line\">            <span class=\"keyword\">switch</span> (msg.what) &#123;</div><div class=\"line\">                <span class=\"keyword\">case</span> MESSAGE_NEW_BOOK_ARRIVED:</div><div class=\"line\">                    Log.d(<span class=\"string\">\"MainActivity\"</span>,<span class=\"string\">\"receive new book :\"</span> + msg.obj);</div><div class=\"line\">                    <span class=\"keyword\">break</span>;</div><div class=\"line\">                <span class=\"keyword\">default</span>:</div><div class=\"line\">                    <span class=\"keyword\">super</span>.handleMessage(msg);</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">private</span> ServiceConnection mConnection = <span class=\"keyword\">new</span> ServiceConnection() &#123;</div><div class=\"line\">        <span class=\"meta\">@Override</span></div><div class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onServiceConnected</span><span class=\"params\">(ComponentName name, IBinder service)</span> </span>&#123;</div><div class=\"line\">            IBookManager bookManager= IBookManager.Stub.asInterface(service);</div><div class=\"line\">            <span class=\"keyword\">try</span> &#123;</div><div class=\"line\">                mRemoteBookManager = bookManager;</div><div class=\"line\">                List&lt;Book&gt; list = bookManager.getBookList();</div><div class=\"line\">                Log.d(<span class=\"string\">\"MainActivity\"</span>,<span class=\"string\">\"bookManager.getBookList()--&gt;\"</span> + list.size() +<span class=\"string\">\"&gt;&gt; \"</span> + list.toString());</div><div class=\"line\">                bookManager.addBook(<span class=\"keyword\">new</span> Book(<span class=\"number\">3</span>,<span class=\"string\">\"java\"</span>));</div><div class=\"line\">                List&lt;Book&gt; newList = bookManager.getBookList();</div><div class=\"line\">                Log.d(<span class=\"string\">\"MainActivity\"</span>,<span class=\"string\">\"bookManager.getBookList()--&gt;\"</span> + newList.size()+<span class=\"string\">\"&gt;&gt; \"</span> + newList.toString());</div><div class=\"line\">                bookManager.registerListener(mOnNewBookArrivedListener);</div><div class=\"line\">            &#125;<span class=\"keyword\">catch</span> (RemoteException e)&#123;</div><div class=\"line\">                e.printStackTrace();</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\">        <span class=\"meta\">@Override</span></div><div class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onServiceDisconnected</span><span class=\"params\">(ComponentName name)</span> </span>&#123;</div><div class=\"line\">            mRemoteBookManager = <span class=\"keyword\">null</span>;</div><div class=\"line\">            Log.e(<span class=\"string\">\"MainActivity\"</span>,<span class=\"string\">\"binder died.\"</span>);</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;;</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">private</span> IOnNewBookArrivedListener mOnNewBookArrivedListener = <span class=\"keyword\">new</span> IOnNewBookArrivedListener.Stub() &#123;</div><div class=\"line\">        <span class=\"meta\">@Override</span></div><div class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">basicTypes</span><span class=\"params\">(<span class=\"keyword\">int</span> anInt, <span class=\"keyword\">long</span> aLong, <span class=\"keyword\">boolean</span> aBoolean, <span class=\"keyword\">float</span> aFloat, <span class=\"keyword\">double</span> aDouble, String aString)</span> <span class=\"keyword\">throws</span> RemoteException </span>&#123;</div><div class=\"line\"></div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\">        <span class=\"meta\">@Override</span></div><div class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onNewBookArrived</span><span class=\"params\">(Book newBook)</span> <span class=\"keyword\">throws</span> RemoteException </span>&#123;</div><div class=\"line\">            mHandler.obtainMessage(MESSAGE_NEW_BOOK_ARRIVED,newBook)</div><div class=\"line\">                    .sendToTarget();</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"meta\">@Override</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title\">onCreate</span><span class=\"params\">(Bundle savedInstanceState)</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">super</span>.onCreate(savedInstanceState);</div><div class=\"line\">        setContentView(R.layout.activity_main);</div><div class=\"line\">        Intent intent = <span class=\"keyword\">new</span> Intent(<span class=\"keyword\">this</span>,BookManagerService.class);</div><div class=\"line\">        bindService(intent,mConnection, Context.BIND_AUTO_CREATE);</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"meta\">@Override</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title\">onDestroy</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">if</span> (mRemoteBookManager != <span class=\"keyword\">null</span></div><div class=\"line\">                &amp;&amp; mRemoteBookManager.asBinder().isBinderAlive()) &#123;</div><div class=\"line\">            <span class=\"keyword\">try</span> &#123;</div><div class=\"line\">                Log.d(<span class=\"string\">\"MainActivity\"</span>,<span class=\"string\">\"unregister listener:\"</span> + mOnNewBookArrivedListener);</div><div class=\"line\">                mRemoteBookManager.unRegisterListener(mOnNewBookArrivedListener);</div><div class=\"line\">            &#125; <span class=\"keyword\">catch</span> (RemoteException e) &#123;</div><div class=\"line\">                e.printStackTrace();</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;</div><div class=\"line\">        unbindService(mConnection);</div><div class=\"line\">        <span class=\"keyword\">super</span>.onDestroy();</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>从上面的代码可以看出，当BookManagerActivity关闭时，我们会在onDestroy中去解除已经注册到服务端的listener，这就相当于我们不想再接收图书馆的新书提醒了，所以我<br>们可以随时取消这个提醒服务。按back键退出BookManagerActivity,下面是打印出的log<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">07-23 14:56:55.493 16905-16918/com.huangyuanlove.testandroid:remote D/BookManagerService: not found,can not unregister.</div><div class=\"line\">07-23 14:56:57.185 16905-16918/com.huangyuanlove.testandroid:remote D/BookManagerService: unregisterListener,current size:1</div></pre></td></tr></table></figure></p>\n<p>从上面的log可以看出，程序没有像我们所预期的那样执行。在解注册的过程中，服务端竟然无法找到我们之前注册的那个listener，其实，这是必然的，这种解注册的处理方式在日常开发过程中时常使用到，但是放到多进程中却无法奏效，因为Binder会把客户端传递过来的对象重新转化并生成一个新的对象。虽然我们在注册和解注册过程中使用的是同一个客户端对象，但是通过Binder传递到服务端后，却会产生两个全新的对象。别忘了对象是不能跨进程直接传输的，对象的跨进程传输本质上都是反序列化的过程，这就是为什么AIDL中的自定义对象都必须要实现Parcelable接口的原因。可以使用<code>RemoteCallbackList</code>。<br>RemoteCallbackList是系统专门提供的用于删除跨进程listener的接口。 RemoteCallbackList是一个泛型， 支持管理任意的AIDL接口， 这点从它的声明就可以看出，因为所有的AIDL接口都继承自IInterface接口</p>\n<blockquote>\n<p>public class RemoteCallbackList<E extends IInterface></p>\n</blockquote>\n<p>它的工作原理很简单， 在它的内部有一个Map结构专门用来保存所有的AIDL回调，这个Map的key是IBinder类型， value是Callback类型， 如下所示:</p>\n<blockquote>\n<p>ArrayMap<IBinder,Callback> mCallbacks = new ArrayMap<IBinder,Callback>();</p>\n</blockquote>\n<p>其中Callback中封装了真正的远程listener。 当客户端注册listener的时候，它会把这个listener的信息存入mCallbacks中， 其中key和value分别通过下面的方式获得：</p>\n<blockquote>\n<p>IBinder key= listener.asBinder()<br>Callback value = new Callback(listener,cookie)</p>\n</blockquote>\n<p>虽然说多次跨进程传输客户端的同一个对象会在服务端生成不同的对象，但是这些新生成的对象有一个共同点，那就是它们底层的Binder对象是同一个， 利用这个特性，就可以实现上面我们无法实现的功能。当客户端解注册的时候，我们只要遍历服务端所有的listener， 找出那个和解注册listener具有相同Binder对象的服务端listener并把它删掉即可，这就是RemoteCallbackList为我们做的事情。同时RemoteCallbackList还有一个很有用的功能， 那就是当客户端进程终止后，它能够自动移除客户端所注册的listener。另外，RemoteCallbackList内部自动实现了线程同步的功能，所以我们使用它来注册和解注册时，不需要做额外的线程同步工作。<br>RemoteCallbackList使用起来很简单，我们要对BookManagerService做一些修改，首先要创建一个RemoteCallbackList对象来替代之前的CopyOnWriteArrayList，如下所示:<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">private</span> RemoteCallbackList&lt;IOnNewBookArrivedListener&gt; mListenerList = <span class=\"keyword\">new</span> RemoteCallbackList&lt;IOnNewBookArrivedListener&gt;();</div></pre></td></tr></table></figure></p>\n<p>然后修改registerListener和unregisterListener这两个接口的实现， 如下所示:<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">@Override</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">registerListener</span><span class=\"params\">(IOnNewBookArrivedIistener listener)</span> <span class=\"keyword\">throws</span> RemoteException </span>&#123;</div><div class=\"line\">    mListenerList.register(listener);</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"meta\">@Override</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">unRegisterListener</span><span class=\"params\">(IOnNewBookArrivedIistener listener)</span> <span class=\"keyword\">throws</span> RemoteException </span>&#123;</div><div class=\"line\">    mListenerList.unregister(listener);</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>接着要修改onNewBookArrived方法，当有新书时，我们就要通知所有已注册的listener，如下所示:<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">onNewBookArrived</span><span class=\"params\">(Book book)</span> <span class=\"keyword\">throws</span> RemoteException </span>&#123;</div><div class=\"line\">        books.add(book);</div><div class=\"line\">       <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> N  =mListenerList.beginBroadcast();</div><div class=\"line\">       <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">0</span> ; i &lt; N;i++)&#123;</div><div class=\"line\">           IOnNewBookArrivedIistener iOnNewBookArrivedIistener = mListenerList.getBroadcastItem(i);</div><div class=\"line\">           <span class=\"keyword\">if</span>(iOnNewBookArrivedIistener!=<span class=\"keyword\">null</span>)&#123;</div><div class=\"line\">               iOnNewBookArrivedIistener.onNewBookArrived(book);</div><div class=\"line\">           &#125;</div><div class=\"line\">       &#125;</div><div class=\"line\">       mListenerList.finishBroadcast();</div><div class=\"line\">    &#125;</div></pre></td></tr></table></figure></p>\n<p>使用RemoteCallbackList，有一点需要注意，我们无法像操作List一样去操作它，尽管它的名字中也带个List，但是它并不是一个List。遍历RemoteCallbackList，必须要按照下面的方式进行，其中beginBroadcast和beginBroadcast必须要配对使用，哪怕我们仅仅是想要获取RemoteCallbackList中的元素个数，这是必须要注意的地方。<br>另外还有几点需要说明一下：</p>\n<ul>\n<li>客户端调用远程服务的方法，被调用的方法运行在服务端的Binder线程池中，同时客户端线程会被挂起，这个时候如果服务端方法执行比较耗时，就会导致客户端线程长时间地阻塞在这里，而如果这个客户端线程是UI线程的话，就会导致客户端ANR。因此，如果我们明确知道某个远程方法是耗时的，那么就要避免在客户端的UI线程中去访问远程方法。由于客户端的<code>onServiceConnected</code>和<code>onServiceDisconnected</code>方法都运行在UI线程中，所以也不可以在它们里面直接调用服务端的耗时方法，这点要尤其注意。</li>\n<li>由于服务端的方法本身就运行在服务端的Binder线程池中，所以服务端方法本身就可以执行大量耗时操作，这个时候切记不要在服务端方法中开线程去进行异步任务，除非你明确知道自己在干什么，否则不建议这么做。</li>\n<li>同理，当远程服务端需要调用客户端的listener中的方法时，被调用的方法也运行在Binder线程池中，只不过是客户端的线程池。所以，我们同样不可以在服务端中调用客户端的耗时方法。比如针对BookManagerService的onNewBookArrived方法。在它内部调用了客户端的IOnNewBookArrivedListener中的onNewBookArrived方法，如果客户端的这个onNewBookArrived方法比较耗时的话，那么请确保BookManagerService中的onNewBookArrived运行在非UI线程中，否则将导致服务端无法响应。</li>\n<li>权限验证，第一种方法，我们可以在onBind中进行验证，验证不通过就直接返回null，这样验证失败的客户端直接无法绑定服务，至于验证方式可以有多种， 比如使用permission验证。第二种方法，我们可以在服务端的onTransact方法中进行权限验证，如果验证失败就直接返回false，这样服务端就不会终止执行AIDL中的方法从而达到保护服务端的效果。</li>\n</ul>\n<hr>\n<p>以上</p>"},{"title":"Coordinatorlayout","date":"2018-08-20T15:16:18.000Z","keywords":"Coordinatorlayout","photos":["/image/Android/Coordinatorlayout/Coordinatorlayout.gif"],"_content":"上图的动画其实挺简单的，如果你知道的话，就不要继续往下看了，那是在浪费时间。\n<!--more-->","source":"_posts/Coordinatorlayout.md","raw":"---\ntitle: Coordinatorlayout\ndate: 2018-08-20 23:16:18\ntags: [Android]\nkeywords: Coordinatorlayout\nphotos: \n  - /image/Android/Coordinatorlayout/Coordinatorlayout.gif\n\n---\n上图的动画其实挺简单的，如果你知道的话，就不要继续往下看了，那是在浪费时间。\n<!--more-->","slug":"Coordinatorlayout","published":1,"updated":"2018-08-21T15:32:31.951Z","comments":1,"layout":"post","link":"","_id":"cjl3vbtql000tisdgx7oi5t3u","content":"<p>上图的动画其实挺简单的，如果你知道的话，就不要继续往下看了，那是在浪费时间。<br><a id=\"more\"></a></p>\n","excerpt":"<p>上图的动画其实挺简单的，如果你知道的话，就不要继续往下看了，那是在浪费时间。<br>","more":"</p>"},{"title":"JVM-内存分配与回收策略","date":"2017-04-07T07:27:46.000Z","keywords":"jvm内存","_content":"　　Java技术体系中所提倡的自动内存管理最终可以归结为自动化的解决了两个问题：给对象分配内存以及回收分配给对象的内存。对象的内存分配，往大方向讲，就是在堆上分配(但也可能经过JIT编译后被拆散为标量类型并间接地栈上分配)，对象主要分配在新生代的Eden区上，如果启动了本地线程分配缓冲，将按线程优先在TLAB上分配。少数情况下也可能会直接分配在老年代中，分配的规则并不是百分百固定的，其细节取决于当前使用的是哪一种垃圾回收器组合，还有虚拟机中与内存相关的参数设置。\n<!--more-->\n### 对象优先在Eden分配\n　　大多数情况下，对象在新生代Eden区中分配，当Eden区没有足够空间进行分配时，虚拟机将发起一次Minor GC。虚拟机提供了-XX：+PrintGCDetails这个收集器日志参数，告诉虚拟机在发生垃圾收集行为时打印内存回收日志，并且在进程退出的时候输出当前的内存各区域分配情况。\n　　新生代GC(Minor GC):指发生在新生代的垃圾收集动作，因为Java对象大多都具备朝生夕灭的特性，所以Minor GC非常频繁，一般回收速度也比较快。\n　　老年代GC(Major GC/Full GC):指发生在老年代的GC，出现了Major GC，经常会伴随至少一次的Minor GC，(但非绝对的，在Parallel Scavenge收集器的手机策略里就有直接进行Major GC的策略选择过程)。Major GC的速度一般会比Minor GC慢10倍以上。\n### 大对象直接进入老年代\n　　所谓的大对象是指，需要大量连续内存空间的Java对象，最典型的大对象就是那种很长的字符串以及数组，大对象对虚拟机的内存分配来说就是一个坏消息，经常出现大对象容易导致内存还有不少空间时就提前出发垃圾收集以获取足够的连续空间来\"安置\"它们。\n### 长期存活的对象将进入老年代\n　　既然虚拟机采用了分代收集的思想来管理内存，那么内存回收时就必须能识别哪些对象应放在新生代，哪些对象应放在老年代中。为了做到这点，虚拟机给每个对象定义了一个对象年龄(Age)计数器。如果对象在Eden出生并经过第一个Minor GC后仍然存活，并且能被Survivor容纳的话，将被移动到Survivor空间中，并且对象年龄设为1。对象在Survivor区中每经过一个Minor GC，年龄就增加1岁，当它的年龄增加到一定程度(默认是15岁)，就会被晋升到老年代中。对象晋升老年代的年龄阈值，可以通过参数-XX：\nMaxTenuringThreshold设置。\n### 动态对象年龄判定\n　　为了能更好的适应不同程序的内存状况，虚拟机并不是永远的要求对象的年龄必须达到了MaxTenuringThreshold才能晋升到老年代，如果Survivor空间中相同的年龄所有对象大小的总和大于Survivor空间的一般，年龄大于或等于改年龄的对象就可以直接进入老年代，无序等到MaxTenuringThreshold中要求的年龄。\n### 空间分配担保\n　　在发生Minor GC之前，虚拟机会先检查老年代最大可用的连续空间是否大于新生代所有对象总空间，如果这个条件成立，那么Minor GC可以确保是安全的。如果不成立，则虚拟机会查看HandlePromotionFailure设置值是否允许担保失败。如果允许，那么会继续检查老年代最大可用的连续空间是否大于历次晋升到老年代对象的平均大小，如果大于，将尝试着进行一次Minor GC，尽管这次Minor GC是有风险的；如果小于，或者HandlePromotionFailure设置不允许冒险，那这时也要改为进行一次Full GC。\n新生代使用复制收集算法，但为了内存利用率，只使用其中一个Survivor空间来作为轮换备份，因此当出现大量对象在Minor GC后仍然存活的情况(最极端的情况就是内存回收后新生代中所有对象都存活)，就需要老年代进行分配担保，把Survivor无法容纳的对象直接进入老年代。 与生活中的贷款担保类似，老年代要进行这样的担保，前提是老年代本身还有容纳这些对象的剩余空间，一共有多少对象会活下来在实际完成内存回收之前是无法明确知道的，所以只好取之前每一次回收晋升到老年代对象容量的平均大小值作为经验值，与老年代的剩余空间进行比较，决定是否进行Full GC来让老年代腾出更多空间。\n取平均值进行比较其实仍然是一种动态概率的手段，也就是说，如果某次Minor GC存活后的对象突增，远远高于平均值的话，依然会导致担保失败(Handle Promotion Failure)。如果出现了HandlePromotionFailure失败，那就只好在失败后重新发起一次Full GC。 虽然担保失败时绕的圈子是最大的，但大部分情况下都还是会将HandlePromotionFailure开关打开，避免Full GC过于频繁。\n\n----\n以上\n","source":"_posts/JVM-内存分配与回收策略.md","raw":"---\ntitle: JVM-内存分配与回收策略\ndate: 2017-04-07 15:27:46\ntags: [JVM]\nkeywords: jvm内存\n---\n　　Java技术体系中所提倡的自动内存管理最终可以归结为自动化的解决了两个问题：给对象分配内存以及回收分配给对象的内存。对象的内存分配，往大方向讲，就是在堆上分配(但也可能经过JIT编译后被拆散为标量类型并间接地栈上分配)，对象主要分配在新生代的Eden区上，如果启动了本地线程分配缓冲，将按线程优先在TLAB上分配。少数情况下也可能会直接分配在老年代中，分配的规则并不是百分百固定的，其细节取决于当前使用的是哪一种垃圾回收器组合，还有虚拟机中与内存相关的参数设置。\n<!--more-->\n### 对象优先在Eden分配\n　　大多数情况下，对象在新生代Eden区中分配，当Eden区没有足够空间进行分配时，虚拟机将发起一次Minor GC。虚拟机提供了-XX：+PrintGCDetails这个收集器日志参数，告诉虚拟机在发生垃圾收集行为时打印内存回收日志，并且在进程退出的时候输出当前的内存各区域分配情况。\n　　新生代GC(Minor GC):指发生在新生代的垃圾收集动作，因为Java对象大多都具备朝生夕灭的特性，所以Minor GC非常频繁，一般回收速度也比较快。\n　　老年代GC(Major GC/Full GC):指发生在老年代的GC，出现了Major GC，经常会伴随至少一次的Minor GC，(但非绝对的，在Parallel Scavenge收集器的手机策略里就有直接进行Major GC的策略选择过程)。Major GC的速度一般会比Minor GC慢10倍以上。\n### 大对象直接进入老年代\n　　所谓的大对象是指，需要大量连续内存空间的Java对象，最典型的大对象就是那种很长的字符串以及数组，大对象对虚拟机的内存分配来说就是一个坏消息，经常出现大对象容易导致内存还有不少空间时就提前出发垃圾收集以获取足够的连续空间来\"安置\"它们。\n### 长期存活的对象将进入老年代\n　　既然虚拟机采用了分代收集的思想来管理内存，那么内存回收时就必须能识别哪些对象应放在新生代，哪些对象应放在老年代中。为了做到这点，虚拟机给每个对象定义了一个对象年龄(Age)计数器。如果对象在Eden出生并经过第一个Minor GC后仍然存活，并且能被Survivor容纳的话，将被移动到Survivor空间中，并且对象年龄设为1。对象在Survivor区中每经过一个Minor GC，年龄就增加1岁，当它的年龄增加到一定程度(默认是15岁)，就会被晋升到老年代中。对象晋升老年代的年龄阈值，可以通过参数-XX：\nMaxTenuringThreshold设置。\n### 动态对象年龄判定\n　　为了能更好的适应不同程序的内存状况，虚拟机并不是永远的要求对象的年龄必须达到了MaxTenuringThreshold才能晋升到老年代，如果Survivor空间中相同的年龄所有对象大小的总和大于Survivor空间的一般，年龄大于或等于改年龄的对象就可以直接进入老年代，无序等到MaxTenuringThreshold中要求的年龄。\n### 空间分配担保\n　　在发生Minor GC之前，虚拟机会先检查老年代最大可用的连续空间是否大于新生代所有对象总空间，如果这个条件成立，那么Minor GC可以确保是安全的。如果不成立，则虚拟机会查看HandlePromotionFailure设置值是否允许担保失败。如果允许，那么会继续检查老年代最大可用的连续空间是否大于历次晋升到老年代对象的平均大小，如果大于，将尝试着进行一次Minor GC，尽管这次Minor GC是有风险的；如果小于，或者HandlePromotionFailure设置不允许冒险，那这时也要改为进行一次Full GC。\n新生代使用复制收集算法，但为了内存利用率，只使用其中一个Survivor空间来作为轮换备份，因此当出现大量对象在Minor GC后仍然存活的情况(最极端的情况就是内存回收后新生代中所有对象都存活)，就需要老年代进行分配担保，把Survivor无法容纳的对象直接进入老年代。 与生活中的贷款担保类似，老年代要进行这样的担保，前提是老年代本身还有容纳这些对象的剩余空间，一共有多少对象会活下来在实际完成内存回收之前是无法明确知道的，所以只好取之前每一次回收晋升到老年代对象容量的平均大小值作为经验值，与老年代的剩余空间进行比较，决定是否进行Full GC来让老年代腾出更多空间。\n取平均值进行比较其实仍然是一种动态概率的手段，也就是说，如果某次Minor GC存活后的对象突增，远远高于平均值的话，依然会导致担保失败(Handle Promotion Failure)。如果出现了HandlePromotionFailure失败，那就只好在失败后重新发起一次Full GC。 虽然担保失败时绕的圈子是最大的，但大部分情况下都还是会将HandlePromotionFailure开关打开，避免Full GC过于频繁。\n\n----\n以上\n","slug":"JVM-内存分配与回收策略","published":1,"updated":"2018-08-04T05:04:36.981Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjl3vbtqn000wisdgelo9d0dq","content":"<p>　　Java技术体系中所提倡的自动内存管理最终可以归结为自动化的解决了两个问题：给对象分配内存以及回收分配给对象的内存。对象的内存分配，往大方向讲，就是在堆上分配(但也可能经过JIT编译后被拆散为标量类型并间接地栈上分配)，对象主要分配在新生代的Eden区上，如果启动了本地线程分配缓冲，将按线程优先在TLAB上分配。少数情况下也可能会直接分配在老年代中，分配的规则并不是百分百固定的，其细节取决于当前使用的是哪一种垃圾回收器组合，还有虚拟机中与内存相关的参数设置。<br><a id=\"more\"></a></p>\n<h3 id=\"对象优先在Eden分配\"><a href=\"#对象优先在Eden分配\" class=\"headerlink\" title=\"对象优先在Eden分配\"></a>对象优先在Eden分配</h3><p>　　大多数情况下，对象在新生代Eden区中分配，当Eden区没有足够空间进行分配时，虚拟机将发起一次Minor GC。虚拟机提供了-XX：+PrintGCDetails这个收集器日志参数，告诉虚拟机在发生垃圾收集行为时打印内存回收日志，并且在进程退出的时候输出当前的内存各区域分配情况。<br>　　新生代GC(Minor GC):指发生在新生代的垃圾收集动作，因为Java对象大多都具备朝生夕灭的特性，所以Minor GC非常频繁，一般回收速度也比较快。<br>　　老年代GC(Major GC/Full GC):指发生在老年代的GC，出现了Major GC，经常会伴随至少一次的Minor GC，(但非绝对的，在Parallel Scavenge收集器的手机策略里就有直接进行Major GC的策略选择过程)。Major GC的速度一般会比Minor GC慢10倍以上。</p>\n<h3 id=\"大对象直接进入老年代\"><a href=\"#大对象直接进入老年代\" class=\"headerlink\" title=\"大对象直接进入老年代\"></a>大对象直接进入老年代</h3><p>　　所谓的大对象是指，需要大量连续内存空间的Java对象，最典型的大对象就是那种很长的字符串以及数组，大对象对虚拟机的内存分配来说就是一个坏消息，经常出现大对象容易导致内存还有不少空间时就提前出发垃圾收集以获取足够的连续空间来”安置”它们。</p>\n<h3 id=\"长期存活的对象将进入老年代\"><a href=\"#长期存活的对象将进入老年代\" class=\"headerlink\" title=\"长期存活的对象将进入老年代\"></a>长期存活的对象将进入老年代</h3><p>　　既然虚拟机采用了分代收集的思想来管理内存，那么内存回收时就必须能识别哪些对象应放在新生代，哪些对象应放在老年代中。为了做到这点，虚拟机给每个对象定义了一个对象年龄(Age)计数器。如果对象在Eden出生并经过第一个Minor GC后仍然存活，并且能被Survivor容纳的话，将被移动到Survivor空间中，并且对象年龄设为1。对象在Survivor区中每经过一个Minor GC，年龄就增加1岁，当它的年龄增加到一定程度(默认是15岁)，就会被晋升到老年代中。对象晋升老年代的年龄阈值，可以通过参数-XX：<br>MaxTenuringThreshold设置。</p>\n<h3 id=\"动态对象年龄判定\"><a href=\"#动态对象年龄判定\" class=\"headerlink\" title=\"动态对象年龄判定\"></a>动态对象年龄判定</h3><p>　　为了能更好的适应不同程序的内存状况，虚拟机并不是永远的要求对象的年龄必须达到了MaxTenuringThreshold才能晋升到老年代，如果Survivor空间中相同的年龄所有对象大小的总和大于Survivor空间的一般，年龄大于或等于改年龄的对象就可以直接进入老年代，无序等到MaxTenuringThreshold中要求的年龄。</p>\n<h3 id=\"空间分配担保\"><a href=\"#空间分配担保\" class=\"headerlink\" title=\"空间分配担保\"></a>空间分配担保</h3><p>　　在发生Minor GC之前，虚拟机会先检查老年代最大可用的连续空间是否大于新生代所有对象总空间，如果这个条件成立，那么Minor GC可以确保是安全的。如果不成立，则虚拟机会查看HandlePromotionFailure设置值是否允许担保失败。如果允许，那么会继续检查老年代最大可用的连续空间是否大于历次晋升到老年代对象的平均大小，如果大于，将尝试着进行一次Minor GC，尽管这次Minor GC是有风险的；如果小于，或者HandlePromotionFailure设置不允许冒险，那这时也要改为进行一次Full GC。<br>新生代使用复制收集算法，但为了内存利用率，只使用其中一个Survivor空间来作为轮换备份，因此当出现大量对象在Minor GC后仍然存活的情况(最极端的情况就是内存回收后新生代中所有对象都存活)，就需要老年代进行分配担保，把Survivor无法容纳的对象直接进入老年代。 与生活中的贷款担保类似，老年代要进行这样的担保，前提是老年代本身还有容纳这些对象的剩余空间，一共有多少对象会活下来在实际完成内存回收之前是无法明确知道的，所以只好取之前每一次回收晋升到老年代对象容量的平均大小值作为经验值，与老年代的剩余空间进行比较，决定是否进行Full GC来让老年代腾出更多空间。<br>取平均值进行比较其实仍然是一种动态概率的手段，也就是说，如果某次Minor GC存活后的对象突增，远远高于平均值的话，依然会导致担保失败(Handle Promotion Failure)。如果出现了HandlePromotionFailure失败，那就只好在失败后重新发起一次Full GC。 虽然担保失败时绕的圈子是最大的，但大部分情况下都还是会将HandlePromotionFailure开关打开，避免Full GC过于频繁。</p>\n<hr>\n<p>以上</p>\n","excerpt":"<p>　　Java技术体系中所提倡的自动内存管理最终可以归结为自动化的解决了两个问题：给对象分配内存以及回收分配给对象的内存。对象的内存分配，往大方向讲，就是在堆上分配(但也可能经过JIT编译后被拆散为标量类型并间接地栈上分配)，对象主要分配在新生代的Eden区上，如果启动了本地线程分配缓冲，将按线程优先在TLAB上分配。少数情况下也可能会直接分配在老年代中，分配的规则并不是百分百固定的，其细节取决于当前使用的是哪一种垃圾回收器组合，还有虚拟机中与内存相关的参数设置。<br>","more":"</p>\n<h3 id=\"对象优先在Eden分配\"><a href=\"#对象优先在Eden分配\" class=\"headerlink\" title=\"对象优先在Eden分配\"></a>对象优先在Eden分配</h3><p>　　大多数情况下，对象在新生代Eden区中分配，当Eden区没有足够空间进行分配时，虚拟机将发起一次Minor GC。虚拟机提供了-XX：+PrintGCDetails这个收集器日志参数，告诉虚拟机在发生垃圾收集行为时打印内存回收日志，并且在进程退出的时候输出当前的内存各区域分配情况。<br>　　新生代GC(Minor GC):指发生在新生代的垃圾收集动作，因为Java对象大多都具备朝生夕灭的特性，所以Minor GC非常频繁，一般回收速度也比较快。<br>　　老年代GC(Major GC/Full GC):指发生在老年代的GC，出现了Major GC，经常会伴随至少一次的Minor GC，(但非绝对的，在Parallel Scavenge收集器的手机策略里就有直接进行Major GC的策略选择过程)。Major GC的速度一般会比Minor GC慢10倍以上。</p>\n<h3 id=\"大对象直接进入老年代\"><a href=\"#大对象直接进入老年代\" class=\"headerlink\" title=\"大对象直接进入老年代\"></a>大对象直接进入老年代</h3><p>　　所谓的大对象是指，需要大量连续内存空间的Java对象，最典型的大对象就是那种很长的字符串以及数组，大对象对虚拟机的内存分配来说就是一个坏消息，经常出现大对象容易导致内存还有不少空间时就提前出发垃圾收集以获取足够的连续空间来”安置”它们。</p>\n<h3 id=\"长期存活的对象将进入老年代\"><a href=\"#长期存活的对象将进入老年代\" class=\"headerlink\" title=\"长期存活的对象将进入老年代\"></a>长期存活的对象将进入老年代</h3><p>　　既然虚拟机采用了分代收集的思想来管理内存，那么内存回收时就必须能识别哪些对象应放在新生代，哪些对象应放在老年代中。为了做到这点，虚拟机给每个对象定义了一个对象年龄(Age)计数器。如果对象在Eden出生并经过第一个Minor GC后仍然存活，并且能被Survivor容纳的话，将被移动到Survivor空间中，并且对象年龄设为1。对象在Survivor区中每经过一个Minor GC，年龄就增加1岁，当它的年龄增加到一定程度(默认是15岁)，就会被晋升到老年代中。对象晋升老年代的年龄阈值，可以通过参数-XX：<br>MaxTenuringThreshold设置。</p>\n<h3 id=\"动态对象年龄判定\"><a href=\"#动态对象年龄判定\" class=\"headerlink\" title=\"动态对象年龄判定\"></a>动态对象年龄判定</h3><p>　　为了能更好的适应不同程序的内存状况，虚拟机并不是永远的要求对象的年龄必须达到了MaxTenuringThreshold才能晋升到老年代，如果Survivor空间中相同的年龄所有对象大小的总和大于Survivor空间的一般，年龄大于或等于改年龄的对象就可以直接进入老年代，无序等到MaxTenuringThreshold中要求的年龄。</p>\n<h3 id=\"空间分配担保\"><a href=\"#空间分配担保\" class=\"headerlink\" title=\"空间分配担保\"></a>空间分配担保</h3><p>　　在发生Minor GC之前，虚拟机会先检查老年代最大可用的连续空间是否大于新生代所有对象总空间，如果这个条件成立，那么Minor GC可以确保是安全的。如果不成立，则虚拟机会查看HandlePromotionFailure设置值是否允许担保失败。如果允许，那么会继续检查老年代最大可用的连续空间是否大于历次晋升到老年代对象的平均大小，如果大于，将尝试着进行一次Minor GC，尽管这次Minor GC是有风险的；如果小于，或者HandlePromotionFailure设置不允许冒险，那这时也要改为进行一次Full GC。<br>新生代使用复制收集算法，但为了内存利用率，只使用其中一个Survivor空间来作为轮换备份，因此当出现大量对象在Minor GC后仍然存活的情况(最极端的情况就是内存回收后新生代中所有对象都存活)，就需要老年代进行分配担保，把Survivor无法容纳的对象直接进入老年代。 与生活中的贷款担保类似，老年代要进行这样的担保，前提是老年代本身还有容纳这些对象的剩余空间，一共有多少对象会活下来在实际完成内存回收之前是无法明确知道的，所以只好取之前每一次回收晋升到老年代对象容量的平均大小值作为经验值，与老年代的剩余空间进行比较，决定是否进行Full GC来让老年代腾出更多空间。<br>取平均值进行比较其实仍然是一种动态概率的手段，也就是说，如果某次Minor GC存活后的对象突增，远远高于平均值的话，依然会导致担保失败(Handle Promotion Failure)。如果出现了HandlePromotionFailure失败，那就只好在失败后重新发起一次Full GC。 虽然担保失败时绕的圈子是最大的，但大部分情况下都还是会将HandlePromotionFailure开关打开，避免Full GC过于频繁。</p>\n<hr>\n<p>以上</p>"},{"title":"ConstraintLayout","date":"2018-08-09T02:40:53.000Z","keywords":"ConstraintLayout","photos":["/image/Android/ConstraintLayout/class_summary.png"],"_content":"https://developer.android.google.cn/reference/android/support/constraint/ConstraintLayout\nA ConstraintLayout is a ViewGroup which allows you to position and size widgets in a flexible way.\n\n<!--more-->\n### 版本支持\nConstraintLayout是一个支持库，向前兼容到Android9，以后还会添加更多的新特性。现在公司的产品的最低版本支持都在2.3之上，部分产品最低版本支持保持在4.4之上。这就意味着我们不需要关心最低版本支持的事情。\n\n### 新特性\n在使用新特性的时候是不能有循环依赖的，比如相对定位，不能A依赖于B的位置，B依赖C的位置，而C又依赖A的位置\n#### Relative positioning\n相对定位是ConstraintLayout中最基本的构建方式，也就是一个空间相对于另外一个空间进行位置确定，可以在横向和竖向上进行约束：\n> Horizontal Axis: left, right, start and end sides\n  Vertical Axis: top, bottom sides and text baseline\n\n如果我们需要让ButtonB在ButtonA的右侧，如下图：\n![Relative Positioning Example](/image/Android/ConstraintLayout/relative_positioning_example.png)\n\n在布局文件中只需要：\n``` xml\n    <Button android:id=\"@+id/buttonA\" ... />\n    <Button android:id=\"@+id/buttonB\" ...\n            app:layout_constraintLeft_toRightOf=\"@+id/buttonA\" />\n```\n这就告诉系统 让buttonB的左边约束于buttonA的右边\n下面列出了所有可用的约束方式：\n\n* layout_constraintLeft_toLeftOf\n* layout_constraintLeft_toRightOf\n* layout_constraintRight_toLeftOf\n* layout_constraintRight_toRightOf\n* layout_constraintTop_toTopOf\n* layout_constraintTop_toBottomOf\n* layout_constraintBottom_toTopOf\n* layout_constraintBottom_toBottomOf\n* layout_constraintBaseline_toBaselineOf\n* layout_constraintStart_toEndOf\n* layout_constraintStart_toStartOf\n* layout_constraintEnd_toStartOf\n* layout_constraintEnd_toEndOf\n  \n各约束位置如下：\n![relative_position_constraint](/image/Android/ConstraintLayout/relative_position_constraint.png)\n上面这些约束关系全部都是本身相对于另外一个控件(使用@id方式引用另外控件)或者父布局(使用parent方式引用父控件)进行约束\n\n#### Margins\n\n![Relative Positioning Margins](/image/Android/ConstraintLayout/relative_positioning_margins.png)\n这里的外边距和其他布局方式的外边距一样，不能是负数，属性如下：\n* android:layout_marginStart\n* android:layout_marginEnd\n* android:layout_marginLeft\n* android:layout_marginTop\n* android:layout_marginRight\n* android:layout_marginBottom\n\n添加的一个新属性是 `maiginGone`,当一个约束目标的可见性为GONE的时候(View.GONE)，可以改变当前控件的外边距，比如B是相对于A进行约束，当A不可见的时候，可以改变B的外边距，也就是B的外边距可以根据Ade可见性设置不同的值，属性如下\n* layout_goneMarginStart\n* layout_goneMarginEnd\n* layout_goneMarginLeft\n* layout_goneMarginTop\n* layout_goneMarginRight\n* layout_goneMarginBottom\n\n#### Centering positioning and bias\n** Centering Positioning **\n如果对一个控件的左右(上下)都添加的约束，那么ConstraintLayout的表现就像有两个大小相等方向相反的力在拉这个控件一个样，比如\n``` xml\n<android.support.constraint.ConstraintLayout ...>\n    <Button android:id=\"@+id/button\" ...\n        app:layout_constraintLeft_toLeftOf=\"parent\"\n        app:layout_constraintRight_toRightOf=\"parent/>\n</>\n```\n表现如下：\n![Centering Positioning](/image/Android/ConstraintLayout/centering_positioning.png)\n这样就会产生居中效果，如果子控件和父控件的尺寸相同，这写属性就没有意义了\n\n** bias **\n当遇到上面这种约束的时候，我们可以使用`bias`属性让控件偏向于哪一个方向,属性如下：\n* layout_constraintHorizontal_bias\n* layout_constraintVertical_bias\n例如，如下代码：\n``` xml\n<android.support.constraint.ConstraintLayout ...>\n    <Button android:id=\"@+id/button\" ...\n        app:layout_constraintHorizontal_bias=\"0.3\"\n        app:layout_constraintLeft_toLeftOf=\"parent\"\n        app:layout_constraintRight_toRightOf=\"parent/>\n</>\n```\n表现如下：\n![Centering Positioning with Bias](/image/Android/ConstraintLayout/centering_positioning_with_bias.png)\n\n\n\n#### Circular positioning (Added in 1.1)\n这个属性是1.1版本添加进去的，可以使用`angle`和`distance`来约束一个控件的中心点和另外一个空间的中心点的位置关系，这样就可以把空间定位在一个圆上，可用属性如下：\n\n* **layout_constraintCircle ** : references another widget id\n* **layout_constraintCircleRadius ** : the distance to the other widget center\n* **layout_constraintCircleAngle ** : which angle the widget should be at (in degrees, from 0 to 360)\n\n示例如下：\n``` xml\n<Button android:id=\"@+id/buttonA\" ... />\n<Button android:id=\"@+id/buttonB\" ...\n      app:layout_constraintCircle=\"@+id/buttonA\"\n      app:layout_constraintCircleRadius=\"100dp\"\n      app:layout_constraintCircleAngle=\"45\" />\n```\n表现如下：\n![Circular Positioning](/image/Android/ConstraintLayout/circular_positioning.png)\n\n#### Visibility behavior\nConstraintLayout对于被标记为GONE的控件有特殊的处理。一般布局中，GONE控件是不会展示在界面上并且不再属于布局的一部分，但是在布局计算上，ConstraintLayout和传统布局有很大的区别\n1. 传统布局下，GONE控件会被认为大小是0，也就是一个点\n2. 在ConstraintLayout中其大小仍然按照可见大小计算，但是其外边距为0\n\n![Visibility Behavior](/image/Android/ConstraintLayout/visibility_behavior.png)\n\n\n#### Dimension constraints\n##### Minimum dimensions on ConstraintLayout\n可以像普通控件一样设置最小最大尺寸,属性如下：\n* ** android:minWidth ** set the minimum width for the layout\n* ** android:minHeight ** set the minimum height for the layout\n* ** android:maxWidth ** set the maximum width for the layout\n* ** android:maxHeight ** set the maximum height for the layout\n\n这些属性当ConstraintLayout的宽高为`WRAP_CONTENT`时有效。\n\n##### Widgets dimension constraints\n可以通过`android:layout_width`和`android:layout_height`设置控件的尺寸，有三种方式：\n* 固定值\n* WRAP_CONTENT\n* 0dp, 相当于`MATCH_CONSTRAINT`\n\n前两种方式和普通布局表现出来的行为一样。最后一种会通过约束来重新设置控件尺寸，如果设置了margin，在布局计算的时候也会被考虑进去。\n ![Dimension Constraints](/image/Android/ConstraintLayout/dimension_constraints.png)\n上图中的a是wrap_content,b是0dp，c是设置了margin的0dp。需要注意的是，在ConstraintLayout中，MATCH_PARENT是不推荐使用的。\n\n##### WRAP_CONTENT:enforcing constraints (Added in 1.1)\n如果控件实际尺寸超过了约束的尺寸，那么约束就会失效，这时候可以添加如下属性来限制：\n* app:layout_constrainedWidth=”true|false”\n* app:layout_constrainedHeight=”true|false”\n\n将B控件约束于A控件和父控件的中间，尺寸都为`wrap_content`\n![enforcing constraints](/image/Android/ConstraintLayout/wrap_content_enforcing_constraints1.png)\n这时候如果将B控件填充很长的文件，那么B控件的左侧则会突破约束，和A控件的中心对齐，如果我们不想要这种方式，还是要求B的左侧和Ade右侧对齐，则可以天剑\n`layout_constrainedWidth=\"true\"`属性进行约束，实例如下：\n![约束失效](/image/Android/ConstraintLayout/wrap_content_enforcing_constraints2.png)\n![添加强制约束属性](/image/Android/ConstraintLayout/wrap_content_enforcing_constraints3.png)\n\n##### MATCH_CONSTRAINT dimensions (Added in 1.1)\n\n当控件的尺寸被设置为`MATCH_CONSTRAINT`时，默认的行为是占据所有的剩余空间，可以使用如下属性来更改此行为：\n* ** layout_constraintWidth_min ** 和 ** layout_constraintHeight_min ** : will set the minimum size for this dimension\n* ** layout_constraintWidth_max ** 和 ** layout_constraintHeight_max ** : will set the maximum size for this dimension\n* ** layout_constraintWidth_percent ** 和 ** layout_constraintHeight_percent ** : will set the size of this dimension as a percentage of the parent\n\n##### Percent dimension\n\nTo use percent, you need to set the following:\n想要使用百分比布局，需要设置如下属性：\n1. 控件宽高设置为 `MATCH_CONSTRAINT` (0dp)\n2. `app:layout_constraintWidth_default`属性值设置为`percent` \n3. 设置 `layout_constraintWidth_percent`或者`layout_constraintHeight_percent`属性值(0-1之间)\n\n下面的TextView控件将占据剩余宽度的50%和剩余高度的50%,示例：\n``` xml\n<TextView\n        android:id=\"@+id/textView6\"\n        android:layout_width=\"0dp\"\n        android:layout_height=\"0dp\"\n        android:background=\"@color/colorAccent\"\n        app:layout_constraintHeight_default=\"percent\"\n        app:layout_constraintHeight_percent=\"0.5\"\n        app:layout_constraintWidth_default=\"percent\"\n        app:layout_constraintWidth_percent=\"0.5\" />\n```\n##### Ratio\n\n可以设置控件的宽高比例，为了实现这种方式，需要让控件的宽或者高设置为0dp(MATCH_CONSTRAINT)，如下：\n\n``` xml\n<Button android:layout_width=\"wrap_content\"\n        android:layout_height=\"0dp\"\n        app:layout_constraintDimensionRatio=\"1:1\" />\n```\n这样的话，高度会随着宽度的改变而改变，并且大小和宽度一致。设置宽高比的方式有两种：\n1. 一个浮点数，`受约束的一方的尺寸/另一方尺寸`得到的数字\n2. 宽度:高度\n\n如果宽高两个方向同时设置了0dp(MATCH_CONSTRAINT)，系统会设置满足比例的最大尺寸，这种情况下还要保持宽高比例，需要在比例前面添加W或者H以确定受约束的是高还是宽。\n> You can also use ratio if both dimensions are set to MATCH_CONSTRAINT (0dp). In this case the system sets the largest dimensions the satisfies all constraints and maintains the    aspect ratio specified. To constrain one specific side based on the dimensions of another, you can pre append W,\" or H, to constrain the width or height respectively. For          example, If one dimension is constrained by two targets (e.g. width is 0dp and centered on parent) you can indicate which side should be constrained, by adding the letter W (for   constraining the width) or H (for constraining the height) in front of the ratio, separated by a comma:\n  ``` xml\n    <Button android:layout_width=\"0dp\"\n            android:layout_height=\"0dp\"\n            app:layout_constraintDimensionRatio=\"H,16:9\"\n            app:layout_constraintBottom_toBottomOf=\"parent\"\n            app:layout_constraintTop_toTopOf=\"parent\"/>\n  ```\n> will set the height of the button following a 16:9 ratio, while the width of the button will match the constraints to parent.\n\n#### Chains\nChains 在单轴（水平或垂直）上提供类似组的行为。另一个轴可以独立地约束。\n\n##### Creating a chain\n如果一组小部件通过双向连接链接在一起，则它们被视为链（参见下图，显示最小链，具有两个小部件）。\n![chain](/image/Android/ConstraintLayout/chain.png)\n\n##### Chain heads\n横向上，Chain头部是Chain最左边的控件；纵向上，Chain头部是Chain最顶部的控件。\n![chain head](/image/Android/ConstraintLayout/chain_head.png)\n\n##### Margins in chains\n如果连接时定义了外边距，Chain就会发生变化。在SPREAD CHAIN中，外边距会从已经分配好的空间中去掉。原文如下：\n> If margins are specified on connections, they will be taken in account. In the case of spread chains, margins will be deducted from the allocated space.\n\n##### Chain Style\n当对Chain的第一个元素设置layout_constraintHorizontal_chainStyle或layout_constraintVertical_chainStyle属性，Chain就会根据特定的样式（默认样式为CHAIN_SPREAD）进行相应变化，样式类型如下：\n\n* CHAIN_SPREAD -- 元素呗分散开 (默认样式) \n* Weighted chain -- 在 CHAIN_SPREAD mo样式中,如果某些控件设置了`MATCH_CONSTRAINT`属性, 他们将平分剩余空间 \n* CHAIN_SPREAD_INSIDE -- Chain的头尾元素紧贴父容器\n* CHAIN_PACKED -- Chain中的所有控件合并在一起后在剩余的空间中居中\n\n图示如下：\n![chain styles](/image/Android/ConstraintLayout/chain_styles.png)\n\n##### Weighted chains\n默认的Chain会在空间里平均散开。如果其中有一个或多个元素使用了MATCH_CONSTRAINT属性，那么他们会将剩余的空间平均填满。属性layout_constraintHorizontal_height和layout_constraintVertical_weight控制使用MATCH_CONSTRAINT的元素如何均分空间。 例如，一个Chain中包含两个使用MATCH_CONSTRAINT的元素，第一个元素使用的权重为2，第二个元素使用的权重为1，那么被第一个元素占用的空间是第二个元素的2倍。\n\n##### Margins and chains (in 1.1)\n在chain中是可以使用margin属性的，例如，在一个水平的chain中，一个元素定义了right_magin=10dp,下一个元素定义了margin_left=5dp，那么两者之间的间距就是15dp.\n\n#### Virtual Helpers objects\n\n##### Guideline\n`Guideline`是只能用在`ConstraintLayout`布局里面的一个工具类，用于辅助布局，类似为辅助线，可以设置`android:orientation`属性来确定是横向的还是纵向的。 \n* 当设置为vertical的时候，Guideline的宽度为0，高度是parent也就是ConstraintLayout的高度 \n* 同样设置为horizontal的时候，高度为0，宽度是parent的宽度\n\n定位Guideline有三种方式，这三种方式只能选择一个\n* 指定距离左侧或顶部的固定距离（layout_constraintGuide_begin） \n* 指定距离右侧或底部的固定距离（layout_constraintGuide_end） \n* 指定在父控件中的宽度或高度的百分比（layout_constraintGuide_percent）\n\n示例如下：\n``` xml\n<android.support.constraint.Guideline\n        android:id=\"@+id/vertical_guideline\"\n        android:layout_width=\"wrap_content\"\n        android:layout_height=\"wrap_content\"\n        android:orientation=\"vertical\"\n        app:layout_constraintGuide_percent=\"0.5\" />\n\n\n    <android.support.constraint.Guideline\n        android:id=\"@+id/horizontal_guideline\"\n        android:layout_width=\"wrap_content\"\n        android:layout_height=\"wrap_content\"\n        android:orientation=\"horizontal\"\n        app:layout_constraintGuide_percent=\"0.5\" />\n```\n声明了一个垂直居中，一个水平居中的GuideLine，效果如下，这两个控件在View上是不可见的。\n![guideline declaration](/image/Android/ConstraintLayout/guideLine_declaration.png)\n\n接着就可以根据这两条辅助线来定位其他控件了\n``` xml\n<Button\n    android:text=\"top_left\"\n    android:id=\"@+id/top_left_button\"\n    android:layout_width=\"wrap_content\"\n    android:layout_height=\"wrap_content\"\n    app:layout_constraintBottom_toBottomOf=\"@id/horizontal_guideline\"\n    app:layout_constraintLeft_toLeftOf=\"parent\"\n    app:layout_constraintRight_toLeftOf=\"@id/vertical_guideline\"\n    app:layout_constraintTop_toTopOf=\"parent\" />\n\n<Button\n    android:text=\"top_right\"\n    android:id=\"@+id/top_right_button\"\n    android:layout_width=\"wrap_content\"\n    android:layout_height=\"wrap_content\"\n    app:layout_constraintBottom_toBottomOf=\"@id/horizontal_guideline\"\n    app:layout_constraintLeft_toLeftOf=\"@id/vertical_guideline\"\n    app:layout_constraintRight_toRightOf=\"parent\"\n    app:layout_constraintTop_toTopOf=\"parent\" />\n\n<Button\n    android:text=\"bottom_right\"\n    android:id=\"@+id/bottom_right_button\"\n    android:layout_width=\"wrap_content\"\n    android:layout_height=\"wrap_content\"\n    app:layout_constraintBottom_toBottomOf=\"parent\"\n    app:layout_constraintLeft_toLeftOf=\"@id/vertical_guideline\"\n    app:layout_constraintRight_toRightOf=\"parent\"\n    app:layout_constraintTop_toTopOf=\"@id/horizontal_guideline\" />\n\n<Button\n    android:text=\"bottom_left\"\n    android:id=\"@+id/bottom_left_button\"\n    android:layout_width=\"wrap_content\"\n    android:layout_height=\"wrap_content\"\n    app:layout_constraintBottom_toBottomOf=\"parent\"\n    app:layout_constraintLeft_toLeftOf=\"parent\"\n    app:layout_constraintRight_toRightOf=\"@id/vertical_guideline\"\n    app:layout_constraintTop_toTopOf=\"@id/horizontal_guideline\" />\n\n```\n效果如下：\n![guideline_relative](/image/Android/ConstraintLayout/guideline_relative.png)\n\n##### Barrier\nBarrier可以引用多个控件，根据他们之中最大的宽高来创建一个虚拟的guideline，\n假设我们有两个按钮，`@id/button1`和`@id/button2`,让Barrier的constraint_referenced_ids属性引用这两个id，如下：\n``` xml\n<android.support.constraint.Barrier\n    android:id=\"@+id/barrier\"\n    android:layout_width=\"wrap_content\"\n    android:layout_height=\"wrap_content\"\n    app:barrierDirection=\"end\"\n    app:constraint_referenced_ids=\"button1,button2\" />\n```\n示例如下：\n![barrier](/image/Android/ConstraintLayout/barrier1.png)\n图中蓝色的线就是`Barrier`，`Barrier`所在问的方位由`barrierDirection`确定，可以设置为`start`,`end`,`top`,`bottom`,`right`,`left`\n这时候我们改变一个两个按钮的宽度，让button2的宽度小于button1，则效果如下：\n![barrier](/image/Android/ConstraintLayout/barrier2.png)\n这样我们就可以把其他控件约束于barrier的右侧，使得button1和button2不会覆盖(被覆盖)其他控件\n\n##### Group\nGroup可以包含多个对其他控件的引用，这样我们操作这个group就相当于操作引用的控件\n``` xml\n<android.support.constraint.Group\n        android:visibility=\"gone\"\n        android:id=\"@+id/button_group\"\n        app:constraint_referenced_ids=\"login,register,modify_password\"\n        android:layout_width=\"wrap_content\"\n        android:layout_height=\"wrap_content\" />\n```\n像上面这样，只要操作Group的`visibility`属性，就相当于同时操作`@id/login`,`@id/register`,`@id/modify_password`这三个控件的`visibility`属性。\n\n##### Placeholders\n顾名思义就是一个用来占位的东西，对于样式相同，功能不同的界面，可以把样式做成style或者使用PlaceHolders来做：\n``` xml\n<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<merge xmlns:android=\"http://schemas.android.com/apk/res/android\"\n    xmlns:app=\"http://schemas.android.com/apk/res-auto\"\n    xmlns:tools=\"http://schemas.android.com/tools\"\n    android:layout_width=\"match_parent\"\n    android:layout_height=\"match_parent\"\n    tools:layout_editor_absoluteX=\"0dp\"\n    tools:layout_editor_absoluteY=\"81dp\"\n    tools:parentTag=\"android.support.constraint.ConstraintLayout\">\n \n    <android.support.constraint.Placeholder\n        android:id=\"@+id/template_main_image\"\n        android:layout_width=\"0dp\"\n        android:layout_height=\"0dp\"\n        android:layout_marginTop=\"16dp\"\n        app:content=\"@+id/top_image\"\n        app:layout_constraintDimensionRatio=\"16:9\"\n        app:layout_constraintLeft_toLeftOf=\"parent\"\n        app:layout_constraintRight_toRightOf=\"parent\" />\n \n    <android.support.constraint.Placeholder\n        android:id=\"@+id/template_save\"\n        android:layout_width=\"48dp\"\n        android:layout_height=\"48dp\"\n        app:content=\"@+id/save\"\n        app:layout_constraintEnd_toStartOf=\"@+id/template_delete\"\n        app:layout_constraintHorizontal_bias=\"0.5\"\n        app:layout_constraintStart_toStartOf=\"parent\"\n        tools:layout_editor_absoluteY=\"460dp\" />\n \n    <android.support.constraint.Placeholder\n        android:id=\"@+id/template_delete\"\n        android:layout_width=\"48dp\"\n        android:layout_height=\"48dp\"\n        app:content=\"@+id/delete\"\n        app:layout_constraintEnd_toStartOf=\"@+id/template_cancel\"\n        app:layout_constraintHorizontal_bias=\"0.5\"\n        app:layout_constraintStart_toEndOf=\"@+id/template_save\"\n        tools:layout_editor_absoluteY=\"460dp\" />\n \n    <android.support.constraint.Placeholder\n        android:id=\"@+id/template_cancel\"\n        android:layout_width=\"48dp\"\n        android:layout_height=\"48dp\"\n        app:content=\"@+id/cancel\"\n        app:layout_constraintEnd_toStartOf=\"@+id/template_edit\"\n        app:layout_constraintHorizontal_bias=\"0.5\"\n        app:layout_constraintStart_toEndOf=\"@+id/template_delete\"\n        tools:layout_editor_absoluteY=\"460dp\" />\n \n    <android.support.constraint.Placeholder\n        android:id=\"@+id/template_edit\"\n        android:layout_width=\"48dp\"\n        android:layout_height=\"48dp\"\n        app:content=\"@+id/edit\"\n        app:layout_constraintEnd_toEndOf=\"parent\"\n        app:layout_constraintHorizontal_bias=\"0.5\"\n        app:layout_constraintStart_toEndOf=\"@+id/template_cancel\"\n        tools:layout_editor_absoluteY=\"460dp\" />\n \n</merge>\n```\n如果想要在预览界面看起来像是在ConstraintLayout里面的话就加上`tools:parentTag=\"android.support.constraint.ConstraintLayout\"`\n预览如下：\n![constraintLayout placeholder preview](/image/Android/ConstraintLayout/constraint_layout_placeholder_preview.png)\n在上面的布局文件中，每一个Placeholder都添加了`app:content`属性，表示要用这个属性指定的id对应的控件来替换`Placeholder`，\n在其他布局文件中：\n``` xml\n<android.support.constraint.ConstraintLayout\n    android:layout_width=\"match_parent\"\n    android:layout_height=\"match_parent\">\n    <include android:id=\"@+id/root\" layout=\"@layout/constraint_layout_placeholder\"/>\n    <ImageButton\n        android:id=\"@+id/main_title_image\"\n        android:src=\"@drawable/main_title_image\"\n        android:layout_width=\"wrap_content\"\n        android:layout_height=\"wrap_content\" />\n\n\n    <ImageButton\n        android:id=\"@+id/save\"\n        android:layout_width=\"wrap_content\"\n        android:layout_height=\"wrap_content\"\n        android:layout_marginBottom=\"16dp\"\n        app:layout_constraintBottom_toBottomOf=\"parent\"\n        app:srcCompat=\"@drawable/ic_save_black_24dp\" />\n\n    <ImageButton\n        android:id=\"@+id/edit\"\n        android:layout_width=\"wrap_content\"\n        android:layout_height=\"wrap_content\"\n        app:srcCompat=\"@drawable/ic_edit_black_24dp\" />\n\n    <ImageButton\n        android:id=\"@+id/cancel\"\n        android:layout_width=\"wrap_content\"\n        android:layout_height=\"wrap_content\"\n        android:layout_marginBottom=\"16dp\"\n\n        app:srcCompat=\"@drawable/ic_cancel_black_24dp\" />\n\n    <ImageButton\n        android:id=\"@+id/delete\"\n        android:layout_width=\"wrap_content\"\n        android:layout_height=\"wrap_content\"\n        android:layout_marginBottom=\"16dp\"\n\n        app:srcCompat=\"@drawable/ic_delete_black_24dp\" />\n</android.support.constraint.ConstraintLayout>\n```\n首先使用`include`标签将模板包含进来，然后创建其他需要替换的控件：\n![merge constraintLayout placeholder preview](/image/Android/ConstraintLayout/merge_constraint_layout_placeholder_preview.png)\n当然也可以在代码中调用`Placeholder.setContent(id)`动态替换，配合`CoordinatorLayout`可以做出比较好玩的动画效果：\n![constraintLayout placeholder + CoordinatorLayout](/image/Android/ConstraintLayout/constraintLayout_placeholderand_CoordinatorLayout.gif)\n代码在这里\nhttps://github.com/Thumar/Placeholder\n\n`ConstraintLayout` 1.1版本之后的东西常用的差不多就这些了\n\n----\n\n以上","source":"_posts/ConstraintLayout.md","raw":"---\ntitle: ConstraintLayout\ndate: 2018-08-09 10:40:53\ntags: [Android]\nkeywords: ConstraintLayout\nphotos: \n  - /image/Android/ConstraintLayout/class_summary.png\n---\nhttps://developer.android.google.cn/reference/android/support/constraint/ConstraintLayout\nA ConstraintLayout is a ViewGroup which allows you to position and size widgets in a flexible way.\n\n<!--more-->\n### 版本支持\nConstraintLayout是一个支持库，向前兼容到Android9，以后还会添加更多的新特性。现在公司的产品的最低版本支持都在2.3之上，部分产品最低版本支持保持在4.4之上。这就意味着我们不需要关心最低版本支持的事情。\n\n### 新特性\n在使用新特性的时候是不能有循环依赖的，比如相对定位，不能A依赖于B的位置，B依赖C的位置，而C又依赖A的位置\n#### Relative positioning\n相对定位是ConstraintLayout中最基本的构建方式，也就是一个空间相对于另外一个空间进行位置确定，可以在横向和竖向上进行约束：\n> Horizontal Axis: left, right, start and end sides\n  Vertical Axis: top, bottom sides and text baseline\n\n如果我们需要让ButtonB在ButtonA的右侧，如下图：\n![Relative Positioning Example](/image/Android/ConstraintLayout/relative_positioning_example.png)\n\n在布局文件中只需要：\n``` xml\n    <Button android:id=\"@+id/buttonA\" ... />\n    <Button android:id=\"@+id/buttonB\" ...\n            app:layout_constraintLeft_toRightOf=\"@+id/buttonA\" />\n```\n这就告诉系统 让buttonB的左边约束于buttonA的右边\n下面列出了所有可用的约束方式：\n\n* layout_constraintLeft_toLeftOf\n* layout_constraintLeft_toRightOf\n* layout_constraintRight_toLeftOf\n* layout_constraintRight_toRightOf\n* layout_constraintTop_toTopOf\n* layout_constraintTop_toBottomOf\n* layout_constraintBottom_toTopOf\n* layout_constraintBottom_toBottomOf\n* layout_constraintBaseline_toBaselineOf\n* layout_constraintStart_toEndOf\n* layout_constraintStart_toStartOf\n* layout_constraintEnd_toStartOf\n* layout_constraintEnd_toEndOf\n  \n各约束位置如下：\n![relative_position_constraint](/image/Android/ConstraintLayout/relative_position_constraint.png)\n上面这些约束关系全部都是本身相对于另外一个控件(使用@id方式引用另外控件)或者父布局(使用parent方式引用父控件)进行约束\n\n#### Margins\n\n![Relative Positioning Margins](/image/Android/ConstraintLayout/relative_positioning_margins.png)\n这里的外边距和其他布局方式的外边距一样，不能是负数，属性如下：\n* android:layout_marginStart\n* android:layout_marginEnd\n* android:layout_marginLeft\n* android:layout_marginTop\n* android:layout_marginRight\n* android:layout_marginBottom\n\n添加的一个新属性是 `maiginGone`,当一个约束目标的可见性为GONE的时候(View.GONE)，可以改变当前控件的外边距，比如B是相对于A进行约束，当A不可见的时候，可以改变B的外边距，也就是B的外边距可以根据Ade可见性设置不同的值，属性如下\n* layout_goneMarginStart\n* layout_goneMarginEnd\n* layout_goneMarginLeft\n* layout_goneMarginTop\n* layout_goneMarginRight\n* layout_goneMarginBottom\n\n#### Centering positioning and bias\n** Centering Positioning **\n如果对一个控件的左右(上下)都添加的约束，那么ConstraintLayout的表现就像有两个大小相等方向相反的力在拉这个控件一个样，比如\n``` xml\n<android.support.constraint.ConstraintLayout ...>\n    <Button android:id=\"@+id/button\" ...\n        app:layout_constraintLeft_toLeftOf=\"parent\"\n        app:layout_constraintRight_toRightOf=\"parent/>\n</>\n```\n表现如下：\n![Centering Positioning](/image/Android/ConstraintLayout/centering_positioning.png)\n这样就会产生居中效果，如果子控件和父控件的尺寸相同，这写属性就没有意义了\n\n** bias **\n当遇到上面这种约束的时候，我们可以使用`bias`属性让控件偏向于哪一个方向,属性如下：\n* layout_constraintHorizontal_bias\n* layout_constraintVertical_bias\n例如，如下代码：\n``` xml\n<android.support.constraint.ConstraintLayout ...>\n    <Button android:id=\"@+id/button\" ...\n        app:layout_constraintHorizontal_bias=\"0.3\"\n        app:layout_constraintLeft_toLeftOf=\"parent\"\n        app:layout_constraintRight_toRightOf=\"parent/>\n</>\n```\n表现如下：\n![Centering Positioning with Bias](/image/Android/ConstraintLayout/centering_positioning_with_bias.png)\n\n\n\n#### Circular positioning (Added in 1.1)\n这个属性是1.1版本添加进去的，可以使用`angle`和`distance`来约束一个控件的中心点和另外一个空间的中心点的位置关系，这样就可以把空间定位在一个圆上，可用属性如下：\n\n* **layout_constraintCircle ** : references another widget id\n* **layout_constraintCircleRadius ** : the distance to the other widget center\n* **layout_constraintCircleAngle ** : which angle the widget should be at (in degrees, from 0 to 360)\n\n示例如下：\n``` xml\n<Button android:id=\"@+id/buttonA\" ... />\n<Button android:id=\"@+id/buttonB\" ...\n      app:layout_constraintCircle=\"@+id/buttonA\"\n      app:layout_constraintCircleRadius=\"100dp\"\n      app:layout_constraintCircleAngle=\"45\" />\n```\n表现如下：\n![Circular Positioning](/image/Android/ConstraintLayout/circular_positioning.png)\n\n#### Visibility behavior\nConstraintLayout对于被标记为GONE的控件有特殊的处理。一般布局中，GONE控件是不会展示在界面上并且不再属于布局的一部分，但是在布局计算上，ConstraintLayout和传统布局有很大的区别\n1. 传统布局下，GONE控件会被认为大小是0，也就是一个点\n2. 在ConstraintLayout中其大小仍然按照可见大小计算，但是其外边距为0\n\n![Visibility Behavior](/image/Android/ConstraintLayout/visibility_behavior.png)\n\n\n#### Dimension constraints\n##### Minimum dimensions on ConstraintLayout\n可以像普通控件一样设置最小最大尺寸,属性如下：\n* ** android:minWidth ** set the minimum width for the layout\n* ** android:minHeight ** set the minimum height for the layout\n* ** android:maxWidth ** set the maximum width for the layout\n* ** android:maxHeight ** set the maximum height for the layout\n\n这些属性当ConstraintLayout的宽高为`WRAP_CONTENT`时有效。\n\n##### Widgets dimension constraints\n可以通过`android:layout_width`和`android:layout_height`设置控件的尺寸，有三种方式：\n* 固定值\n* WRAP_CONTENT\n* 0dp, 相当于`MATCH_CONSTRAINT`\n\n前两种方式和普通布局表现出来的行为一样。最后一种会通过约束来重新设置控件尺寸，如果设置了margin，在布局计算的时候也会被考虑进去。\n ![Dimension Constraints](/image/Android/ConstraintLayout/dimension_constraints.png)\n上图中的a是wrap_content,b是0dp，c是设置了margin的0dp。需要注意的是，在ConstraintLayout中，MATCH_PARENT是不推荐使用的。\n\n##### WRAP_CONTENT:enforcing constraints (Added in 1.1)\n如果控件实际尺寸超过了约束的尺寸，那么约束就会失效，这时候可以添加如下属性来限制：\n* app:layout_constrainedWidth=”true|false”\n* app:layout_constrainedHeight=”true|false”\n\n将B控件约束于A控件和父控件的中间，尺寸都为`wrap_content`\n![enforcing constraints](/image/Android/ConstraintLayout/wrap_content_enforcing_constraints1.png)\n这时候如果将B控件填充很长的文件，那么B控件的左侧则会突破约束，和A控件的中心对齐，如果我们不想要这种方式，还是要求B的左侧和Ade右侧对齐，则可以天剑\n`layout_constrainedWidth=\"true\"`属性进行约束，实例如下：\n![约束失效](/image/Android/ConstraintLayout/wrap_content_enforcing_constraints2.png)\n![添加强制约束属性](/image/Android/ConstraintLayout/wrap_content_enforcing_constraints3.png)\n\n##### MATCH_CONSTRAINT dimensions (Added in 1.1)\n\n当控件的尺寸被设置为`MATCH_CONSTRAINT`时，默认的行为是占据所有的剩余空间，可以使用如下属性来更改此行为：\n* ** layout_constraintWidth_min ** 和 ** layout_constraintHeight_min ** : will set the minimum size for this dimension\n* ** layout_constraintWidth_max ** 和 ** layout_constraintHeight_max ** : will set the maximum size for this dimension\n* ** layout_constraintWidth_percent ** 和 ** layout_constraintHeight_percent ** : will set the size of this dimension as a percentage of the parent\n\n##### Percent dimension\n\nTo use percent, you need to set the following:\n想要使用百分比布局，需要设置如下属性：\n1. 控件宽高设置为 `MATCH_CONSTRAINT` (0dp)\n2. `app:layout_constraintWidth_default`属性值设置为`percent` \n3. 设置 `layout_constraintWidth_percent`或者`layout_constraintHeight_percent`属性值(0-1之间)\n\n下面的TextView控件将占据剩余宽度的50%和剩余高度的50%,示例：\n``` xml\n<TextView\n        android:id=\"@+id/textView6\"\n        android:layout_width=\"0dp\"\n        android:layout_height=\"0dp\"\n        android:background=\"@color/colorAccent\"\n        app:layout_constraintHeight_default=\"percent\"\n        app:layout_constraintHeight_percent=\"0.5\"\n        app:layout_constraintWidth_default=\"percent\"\n        app:layout_constraintWidth_percent=\"0.5\" />\n```\n##### Ratio\n\n可以设置控件的宽高比例，为了实现这种方式，需要让控件的宽或者高设置为0dp(MATCH_CONSTRAINT)，如下：\n\n``` xml\n<Button android:layout_width=\"wrap_content\"\n        android:layout_height=\"0dp\"\n        app:layout_constraintDimensionRatio=\"1:1\" />\n```\n这样的话，高度会随着宽度的改变而改变，并且大小和宽度一致。设置宽高比的方式有两种：\n1. 一个浮点数，`受约束的一方的尺寸/另一方尺寸`得到的数字\n2. 宽度:高度\n\n如果宽高两个方向同时设置了0dp(MATCH_CONSTRAINT)，系统会设置满足比例的最大尺寸，这种情况下还要保持宽高比例，需要在比例前面添加W或者H以确定受约束的是高还是宽。\n> You can also use ratio if both dimensions are set to MATCH_CONSTRAINT (0dp). In this case the system sets the largest dimensions the satisfies all constraints and maintains the    aspect ratio specified. To constrain one specific side based on the dimensions of another, you can pre append W,\" or H, to constrain the width or height respectively. For          example, If one dimension is constrained by two targets (e.g. width is 0dp and centered on parent) you can indicate which side should be constrained, by adding the letter W (for   constraining the width) or H (for constraining the height) in front of the ratio, separated by a comma:\n  ``` xml\n    <Button android:layout_width=\"0dp\"\n            android:layout_height=\"0dp\"\n            app:layout_constraintDimensionRatio=\"H,16:9\"\n            app:layout_constraintBottom_toBottomOf=\"parent\"\n            app:layout_constraintTop_toTopOf=\"parent\"/>\n  ```\n> will set the height of the button following a 16:9 ratio, while the width of the button will match the constraints to parent.\n\n#### Chains\nChains 在单轴（水平或垂直）上提供类似组的行为。另一个轴可以独立地约束。\n\n##### Creating a chain\n如果一组小部件通过双向连接链接在一起，则它们被视为链（参见下图，显示最小链，具有两个小部件）。\n![chain](/image/Android/ConstraintLayout/chain.png)\n\n##### Chain heads\n横向上，Chain头部是Chain最左边的控件；纵向上，Chain头部是Chain最顶部的控件。\n![chain head](/image/Android/ConstraintLayout/chain_head.png)\n\n##### Margins in chains\n如果连接时定义了外边距，Chain就会发生变化。在SPREAD CHAIN中，外边距会从已经分配好的空间中去掉。原文如下：\n> If margins are specified on connections, they will be taken in account. In the case of spread chains, margins will be deducted from the allocated space.\n\n##### Chain Style\n当对Chain的第一个元素设置layout_constraintHorizontal_chainStyle或layout_constraintVertical_chainStyle属性，Chain就会根据特定的样式（默认样式为CHAIN_SPREAD）进行相应变化，样式类型如下：\n\n* CHAIN_SPREAD -- 元素呗分散开 (默认样式) \n* Weighted chain -- 在 CHAIN_SPREAD mo样式中,如果某些控件设置了`MATCH_CONSTRAINT`属性, 他们将平分剩余空间 \n* CHAIN_SPREAD_INSIDE -- Chain的头尾元素紧贴父容器\n* CHAIN_PACKED -- Chain中的所有控件合并在一起后在剩余的空间中居中\n\n图示如下：\n![chain styles](/image/Android/ConstraintLayout/chain_styles.png)\n\n##### Weighted chains\n默认的Chain会在空间里平均散开。如果其中有一个或多个元素使用了MATCH_CONSTRAINT属性，那么他们会将剩余的空间平均填满。属性layout_constraintHorizontal_height和layout_constraintVertical_weight控制使用MATCH_CONSTRAINT的元素如何均分空间。 例如，一个Chain中包含两个使用MATCH_CONSTRAINT的元素，第一个元素使用的权重为2，第二个元素使用的权重为1，那么被第一个元素占用的空间是第二个元素的2倍。\n\n##### Margins and chains (in 1.1)\n在chain中是可以使用margin属性的，例如，在一个水平的chain中，一个元素定义了right_magin=10dp,下一个元素定义了margin_left=5dp，那么两者之间的间距就是15dp.\n\n#### Virtual Helpers objects\n\n##### Guideline\n`Guideline`是只能用在`ConstraintLayout`布局里面的一个工具类，用于辅助布局，类似为辅助线，可以设置`android:orientation`属性来确定是横向的还是纵向的。 \n* 当设置为vertical的时候，Guideline的宽度为0，高度是parent也就是ConstraintLayout的高度 \n* 同样设置为horizontal的时候，高度为0，宽度是parent的宽度\n\n定位Guideline有三种方式，这三种方式只能选择一个\n* 指定距离左侧或顶部的固定距离（layout_constraintGuide_begin） \n* 指定距离右侧或底部的固定距离（layout_constraintGuide_end） \n* 指定在父控件中的宽度或高度的百分比（layout_constraintGuide_percent）\n\n示例如下：\n``` xml\n<android.support.constraint.Guideline\n        android:id=\"@+id/vertical_guideline\"\n        android:layout_width=\"wrap_content\"\n        android:layout_height=\"wrap_content\"\n        android:orientation=\"vertical\"\n        app:layout_constraintGuide_percent=\"0.5\" />\n\n\n    <android.support.constraint.Guideline\n        android:id=\"@+id/horizontal_guideline\"\n        android:layout_width=\"wrap_content\"\n        android:layout_height=\"wrap_content\"\n        android:orientation=\"horizontal\"\n        app:layout_constraintGuide_percent=\"0.5\" />\n```\n声明了一个垂直居中，一个水平居中的GuideLine，效果如下，这两个控件在View上是不可见的。\n![guideline declaration](/image/Android/ConstraintLayout/guideLine_declaration.png)\n\n接着就可以根据这两条辅助线来定位其他控件了\n``` xml\n<Button\n    android:text=\"top_left\"\n    android:id=\"@+id/top_left_button\"\n    android:layout_width=\"wrap_content\"\n    android:layout_height=\"wrap_content\"\n    app:layout_constraintBottom_toBottomOf=\"@id/horizontal_guideline\"\n    app:layout_constraintLeft_toLeftOf=\"parent\"\n    app:layout_constraintRight_toLeftOf=\"@id/vertical_guideline\"\n    app:layout_constraintTop_toTopOf=\"parent\" />\n\n<Button\n    android:text=\"top_right\"\n    android:id=\"@+id/top_right_button\"\n    android:layout_width=\"wrap_content\"\n    android:layout_height=\"wrap_content\"\n    app:layout_constraintBottom_toBottomOf=\"@id/horizontal_guideline\"\n    app:layout_constraintLeft_toLeftOf=\"@id/vertical_guideline\"\n    app:layout_constraintRight_toRightOf=\"parent\"\n    app:layout_constraintTop_toTopOf=\"parent\" />\n\n<Button\n    android:text=\"bottom_right\"\n    android:id=\"@+id/bottom_right_button\"\n    android:layout_width=\"wrap_content\"\n    android:layout_height=\"wrap_content\"\n    app:layout_constraintBottom_toBottomOf=\"parent\"\n    app:layout_constraintLeft_toLeftOf=\"@id/vertical_guideline\"\n    app:layout_constraintRight_toRightOf=\"parent\"\n    app:layout_constraintTop_toTopOf=\"@id/horizontal_guideline\" />\n\n<Button\n    android:text=\"bottom_left\"\n    android:id=\"@+id/bottom_left_button\"\n    android:layout_width=\"wrap_content\"\n    android:layout_height=\"wrap_content\"\n    app:layout_constraintBottom_toBottomOf=\"parent\"\n    app:layout_constraintLeft_toLeftOf=\"parent\"\n    app:layout_constraintRight_toRightOf=\"@id/vertical_guideline\"\n    app:layout_constraintTop_toTopOf=\"@id/horizontal_guideline\" />\n\n```\n效果如下：\n![guideline_relative](/image/Android/ConstraintLayout/guideline_relative.png)\n\n##### Barrier\nBarrier可以引用多个控件，根据他们之中最大的宽高来创建一个虚拟的guideline，\n假设我们有两个按钮，`@id/button1`和`@id/button2`,让Barrier的constraint_referenced_ids属性引用这两个id，如下：\n``` xml\n<android.support.constraint.Barrier\n    android:id=\"@+id/barrier\"\n    android:layout_width=\"wrap_content\"\n    android:layout_height=\"wrap_content\"\n    app:barrierDirection=\"end\"\n    app:constraint_referenced_ids=\"button1,button2\" />\n```\n示例如下：\n![barrier](/image/Android/ConstraintLayout/barrier1.png)\n图中蓝色的线就是`Barrier`，`Barrier`所在问的方位由`barrierDirection`确定，可以设置为`start`,`end`,`top`,`bottom`,`right`,`left`\n这时候我们改变一个两个按钮的宽度，让button2的宽度小于button1，则效果如下：\n![barrier](/image/Android/ConstraintLayout/barrier2.png)\n这样我们就可以把其他控件约束于barrier的右侧，使得button1和button2不会覆盖(被覆盖)其他控件\n\n##### Group\nGroup可以包含多个对其他控件的引用，这样我们操作这个group就相当于操作引用的控件\n``` xml\n<android.support.constraint.Group\n        android:visibility=\"gone\"\n        android:id=\"@+id/button_group\"\n        app:constraint_referenced_ids=\"login,register,modify_password\"\n        android:layout_width=\"wrap_content\"\n        android:layout_height=\"wrap_content\" />\n```\n像上面这样，只要操作Group的`visibility`属性，就相当于同时操作`@id/login`,`@id/register`,`@id/modify_password`这三个控件的`visibility`属性。\n\n##### Placeholders\n顾名思义就是一个用来占位的东西，对于样式相同，功能不同的界面，可以把样式做成style或者使用PlaceHolders来做：\n``` xml\n<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<merge xmlns:android=\"http://schemas.android.com/apk/res/android\"\n    xmlns:app=\"http://schemas.android.com/apk/res-auto\"\n    xmlns:tools=\"http://schemas.android.com/tools\"\n    android:layout_width=\"match_parent\"\n    android:layout_height=\"match_parent\"\n    tools:layout_editor_absoluteX=\"0dp\"\n    tools:layout_editor_absoluteY=\"81dp\"\n    tools:parentTag=\"android.support.constraint.ConstraintLayout\">\n \n    <android.support.constraint.Placeholder\n        android:id=\"@+id/template_main_image\"\n        android:layout_width=\"0dp\"\n        android:layout_height=\"0dp\"\n        android:layout_marginTop=\"16dp\"\n        app:content=\"@+id/top_image\"\n        app:layout_constraintDimensionRatio=\"16:9\"\n        app:layout_constraintLeft_toLeftOf=\"parent\"\n        app:layout_constraintRight_toRightOf=\"parent\" />\n \n    <android.support.constraint.Placeholder\n        android:id=\"@+id/template_save\"\n        android:layout_width=\"48dp\"\n        android:layout_height=\"48dp\"\n        app:content=\"@+id/save\"\n        app:layout_constraintEnd_toStartOf=\"@+id/template_delete\"\n        app:layout_constraintHorizontal_bias=\"0.5\"\n        app:layout_constraintStart_toStartOf=\"parent\"\n        tools:layout_editor_absoluteY=\"460dp\" />\n \n    <android.support.constraint.Placeholder\n        android:id=\"@+id/template_delete\"\n        android:layout_width=\"48dp\"\n        android:layout_height=\"48dp\"\n        app:content=\"@+id/delete\"\n        app:layout_constraintEnd_toStartOf=\"@+id/template_cancel\"\n        app:layout_constraintHorizontal_bias=\"0.5\"\n        app:layout_constraintStart_toEndOf=\"@+id/template_save\"\n        tools:layout_editor_absoluteY=\"460dp\" />\n \n    <android.support.constraint.Placeholder\n        android:id=\"@+id/template_cancel\"\n        android:layout_width=\"48dp\"\n        android:layout_height=\"48dp\"\n        app:content=\"@+id/cancel\"\n        app:layout_constraintEnd_toStartOf=\"@+id/template_edit\"\n        app:layout_constraintHorizontal_bias=\"0.5\"\n        app:layout_constraintStart_toEndOf=\"@+id/template_delete\"\n        tools:layout_editor_absoluteY=\"460dp\" />\n \n    <android.support.constraint.Placeholder\n        android:id=\"@+id/template_edit\"\n        android:layout_width=\"48dp\"\n        android:layout_height=\"48dp\"\n        app:content=\"@+id/edit\"\n        app:layout_constraintEnd_toEndOf=\"parent\"\n        app:layout_constraintHorizontal_bias=\"0.5\"\n        app:layout_constraintStart_toEndOf=\"@+id/template_cancel\"\n        tools:layout_editor_absoluteY=\"460dp\" />\n \n</merge>\n```\n如果想要在预览界面看起来像是在ConstraintLayout里面的话就加上`tools:parentTag=\"android.support.constraint.ConstraintLayout\"`\n预览如下：\n![constraintLayout placeholder preview](/image/Android/ConstraintLayout/constraint_layout_placeholder_preview.png)\n在上面的布局文件中，每一个Placeholder都添加了`app:content`属性，表示要用这个属性指定的id对应的控件来替换`Placeholder`，\n在其他布局文件中：\n``` xml\n<android.support.constraint.ConstraintLayout\n    android:layout_width=\"match_parent\"\n    android:layout_height=\"match_parent\">\n    <include android:id=\"@+id/root\" layout=\"@layout/constraint_layout_placeholder\"/>\n    <ImageButton\n        android:id=\"@+id/main_title_image\"\n        android:src=\"@drawable/main_title_image\"\n        android:layout_width=\"wrap_content\"\n        android:layout_height=\"wrap_content\" />\n\n\n    <ImageButton\n        android:id=\"@+id/save\"\n        android:layout_width=\"wrap_content\"\n        android:layout_height=\"wrap_content\"\n        android:layout_marginBottom=\"16dp\"\n        app:layout_constraintBottom_toBottomOf=\"parent\"\n        app:srcCompat=\"@drawable/ic_save_black_24dp\" />\n\n    <ImageButton\n        android:id=\"@+id/edit\"\n        android:layout_width=\"wrap_content\"\n        android:layout_height=\"wrap_content\"\n        app:srcCompat=\"@drawable/ic_edit_black_24dp\" />\n\n    <ImageButton\n        android:id=\"@+id/cancel\"\n        android:layout_width=\"wrap_content\"\n        android:layout_height=\"wrap_content\"\n        android:layout_marginBottom=\"16dp\"\n\n        app:srcCompat=\"@drawable/ic_cancel_black_24dp\" />\n\n    <ImageButton\n        android:id=\"@+id/delete\"\n        android:layout_width=\"wrap_content\"\n        android:layout_height=\"wrap_content\"\n        android:layout_marginBottom=\"16dp\"\n\n        app:srcCompat=\"@drawable/ic_delete_black_24dp\" />\n</android.support.constraint.ConstraintLayout>\n```\n首先使用`include`标签将模板包含进来，然后创建其他需要替换的控件：\n![merge constraintLayout placeholder preview](/image/Android/ConstraintLayout/merge_constraint_layout_placeholder_preview.png)\n当然也可以在代码中调用`Placeholder.setContent(id)`动态替换，配合`CoordinatorLayout`可以做出比较好玩的动画效果：\n![constraintLayout placeholder + CoordinatorLayout](/image/Android/ConstraintLayout/constraintLayout_placeholderand_CoordinatorLayout.gif)\n代码在这里\nhttps://github.com/Thumar/Placeholder\n\n`ConstraintLayout` 1.1版本之后的东西常用的差不多就这些了\n\n----\n\n以上","slug":"ConstraintLayout","published":1,"updated":"2018-08-10T13:24:06.745Z","comments":1,"layout":"post","link":"","_id":"cjl3vbtqo000yisdgc38t3tc3","content":"<p><a href=\"https://developer.android.google.cn/reference/android/support/constraint/ConstraintLayout\" target=\"_blank\" rel=\"external\">https://developer.android.google.cn/reference/android/support/constraint/ConstraintLayout</a><br>A ConstraintLayout is a ViewGroup which allows you to position and size widgets in a flexible way.</p>\n<a id=\"more\"></a>\n<h3 id=\"版本支持\"><a href=\"#版本支持\" class=\"headerlink\" title=\"版本支持\"></a>版本支持</h3><p>ConstraintLayout是一个支持库，向前兼容到Android9，以后还会添加更多的新特性。现在公司的产品的最低版本支持都在2.3之上，部分产品最低版本支持保持在4.4之上。这就意味着我们不需要关心最低版本支持的事情。</p>\n<h3 id=\"新特性\"><a href=\"#新特性\" class=\"headerlink\" title=\"新特性\"></a>新特性</h3><p>在使用新特性的时候是不能有循环依赖的，比如相对定位，不能A依赖于B的位置，B依赖C的位置，而C又依赖A的位置</p>\n<h4 id=\"Relative-positioning\"><a href=\"#Relative-positioning\" class=\"headerlink\" title=\"Relative positioning\"></a>Relative positioning</h4><p>相对定位是ConstraintLayout中最基本的构建方式，也就是一个空间相对于另外一个空间进行位置确定，可以在横向和竖向上进行约束：</p>\n<blockquote>\n<p>Horizontal Axis: left, right, start and end sides<br>  Vertical Axis: top, bottom sides and text baseline</p>\n</blockquote>\n<p>如果我们需要让ButtonB在ButtonA的右侧，如下图：<br><img src=\"/image/Android/ConstraintLayout/relative_positioning_example.png\" alt=\"Relative Positioning Example\"></p>\n<p>在布局文件中只需要：<br><figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">Button</span> <span class=\"attr\">android:id</span>=<span class=\"string\">\"@+id/buttonA\"</span> <span class=\"attr\">...</span> /&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">Button</span> <span class=\"attr\">android:id</span>=<span class=\"string\">\"@+id/buttonB\"</span> <span class=\"attr\">...</span></span></div><div class=\"line\">        <span class=\"attr\">app:layout_constraintLeft_toRightOf</span>=<span class=\"string\">\"@+id/buttonA\"</span> /&gt;</div></pre></td></tr></table></figure></p>\n<p>这就告诉系统 让buttonB的左边约束于buttonA的右边<br>下面列出了所有可用的约束方式：</p>\n<ul>\n<li>layout_constraintLeft_toLeftOf</li>\n<li>layout_constraintLeft_toRightOf</li>\n<li>layout_constraintRight_toLeftOf</li>\n<li>layout_constraintRight_toRightOf</li>\n<li>layout_constraintTop_toTopOf</li>\n<li>layout_constraintTop_toBottomOf</li>\n<li>layout_constraintBottom_toTopOf</li>\n<li>layout_constraintBottom_toBottomOf</li>\n<li>layout_constraintBaseline_toBaselineOf</li>\n<li>layout_constraintStart_toEndOf</li>\n<li>layout_constraintStart_toStartOf</li>\n<li>layout_constraintEnd_toStartOf</li>\n<li>layout_constraintEnd_toEndOf</li>\n</ul>\n<p>各约束位置如下：<br><img src=\"/image/Android/ConstraintLayout/relative_position_constraint.png\" alt=\"relative_position_constraint\"><br>上面这些约束关系全部都是本身相对于另外一个控件(使用@id方式引用另外控件)或者父布局(使用parent方式引用父控件)进行约束</p>\n<h4 id=\"Margins\"><a href=\"#Margins\" class=\"headerlink\" title=\"Margins\"></a>Margins</h4><p><img src=\"/image/Android/ConstraintLayout/relative_positioning_margins.png\" alt=\"Relative Positioning Margins\"><br>这里的外边距和其他布局方式的外边距一样，不能是负数，属性如下：</p>\n<ul>\n<li>android:layout_marginStart</li>\n<li>android:layout_marginEnd</li>\n<li>android:layout_marginLeft</li>\n<li>android:layout_marginTop</li>\n<li>android:layout_marginRight</li>\n<li>android:layout_marginBottom</li>\n</ul>\n<p>添加的一个新属性是 <code>maiginGone</code>,当一个约束目标的可见性为GONE的时候(View.GONE)，可以改变当前控件的外边距，比如B是相对于A进行约束，当A不可见的时候，可以改变B的外边距，也就是B的外边距可以根据Ade可见性设置不同的值，属性如下</p>\n<ul>\n<li>layout_goneMarginStart</li>\n<li>layout_goneMarginEnd</li>\n<li>layout_goneMarginLeft</li>\n<li>layout_goneMarginTop</li>\n<li>layout_goneMarginRight</li>\n<li>layout_goneMarginBottom</li>\n</ul>\n<h4 id=\"Centering-positioning-and-bias\"><a href=\"#Centering-positioning-and-bias\" class=\"headerlink\" title=\"Centering positioning and bias\"></a>Centering positioning and bias</h4><p><strong> Centering Positioning </strong><br>如果对一个控件的左右(上下)都添加的约束，那么ConstraintLayout的表现就像有两个大小相等方向相反的力在拉这个控件一个样，比如<br><figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">android.support.constraint.ConstraintLayout</span> <span class=\"attr\">...</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">Button</span> <span class=\"attr\">android:id</span>=<span class=\"string\">\"@+id/button\"</span> <span class=\"attr\">...</span></span></div><div class=\"line\">        <span class=\"attr\">app:layout_constraintLeft_toLeftOf</span>=<span class=\"string\">\"parent\"</span></div><div class=\"line\">        <span class=\"attr\">app:layout_constraintRight_toRightOf</span>=<span class=\"string\">\"parent/&gt;</span></div><div class=\"line\">&lt;/&gt;</div></pre></td></tr></table></figure></p>\n<p>表现如下：<br><img src=\"/image/Android/ConstraintLayout/centering_positioning.png\" alt=\"Centering Positioning\"><br>这样就会产生居中效果，如果子控件和父控件的尺寸相同，这写属性就没有意义了</p>\n<p><strong> bias </strong><br>当遇到上面这种约束的时候，我们可以使用<code>bias</code>属性让控件偏向于哪一个方向,属性如下：</p>\n<ul>\n<li>layout_constraintHorizontal_bias</li>\n<li>layout_constraintVertical_bias<br>例如，如下代码：<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">android.support.constraint.ConstraintLayout</span> <span class=\"attr\">...</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">Button</span> <span class=\"attr\">android:id</span>=<span class=\"string\">\"@+id/button\"</span> <span class=\"attr\">...</span></span></div><div class=\"line\">        <span class=\"attr\">app:layout_constraintHorizontal_bias</span>=<span class=\"string\">\"0.3\"</span></div><div class=\"line\">        <span class=\"attr\">app:layout_constraintLeft_toLeftOf</span>=<span class=\"string\">\"parent\"</span></div><div class=\"line\">        <span class=\"attr\">app:layout_constraintRight_toRightOf</span>=<span class=\"string\">\"parent/&gt;</span></div><div class=\"line\">&lt;/&gt;</div></pre></td></tr></table></figure>\n</li>\n</ul>\n<p>表现如下：<br><img src=\"/image/Android/ConstraintLayout/centering_positioning_with_bias.png\" alt=\"Centering Positioning with Bias\"></p>\n<h4 id=\"Circular-positioning-Added-in-1-1\"><a href=\"#Circular-positioning-Added-in-1-1\" class=\"headerlink\" title=\"Circular positioning (Added in 1.1)\"></a>Circular positioning (Added in 1.1)</h4><p>这个属性是1.1版本添加进去的，可以使用<code>angle</code>和<code>distance</code>来约束一个控件的中心点和另外一个空间的中心点的位置关系，这样就可以把空间定位在一个圆上，可用属性如下：</p>\n<ul>\n<li><strong>layout_constraintCircle </strong> : references another widget id</li>\n<li><strong>layout_constraintCircleRadius </strong> : the distance to the other widget center</li>\n<li><strong>layout_constraintCircleAngle </strong> : which angle the widget should be at (in degrees, from 0 to 360)</li>\n</ul>\n<p>示例如下：<br><figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">Button</span> <span class=\"attr\">android:id</span>=<span class=\"string\">\"@+id/buttonA\"</span> <span class=\"attr\">...</span> /&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">Button</span> <span class=\"attr\">android:id</span>=<span class=\"string\">\"@+id/buttonB\"</span> <span class=\"attr\">...</span></span></div><div class=\"line\">      <span class=\"attr\">app:layout_constraintCircle</span>=<span class=\"string\">\"@+id/buttonA\"</span></div><div class=\"line\">      <span class=\"attr\">app:layout_constraintCircleRadius</span>=<span class=\"string\">\"100dp\"</span></div><div class=\"line\">      <span class=\"attr\">app:layout_constraintCircleAngle</span>=<span class=\"string\">\"45\"</span> /&gt;</div></pre></td></tr></table></figure></p>\n<p>表现如下：<br><img src=\"/image/Android/ConstraintLayout/circular_positioning.png\" alt=\"Circular Positioning\"></p>\n<h4 id=\"Visibility-behavior\"><a href=\"#Visibility-behavior\" class=\"headerlink\" title=\"Visibility behavior\"></a>Visibility behavior</h4><p>ConstraintLayout对于被标记为GONE的控件有特殊的处理。一般布局中，GONE控件是不会展示在界面上并且不再属于布局的一部分，但是在布局计算上，ConstraintLayout和传统布局有很大的区别</p>\n<ol>\n<li>传统布局下，GONE控件会被认为大小是0，也就是一个点</li>\n<li>在ConstraintLayout中其大小仍然按照可见大小计算，但是其外边距为0</li>\n</ol>\n<p><img src=\"/image/Android/ConstraintLayout/visibility_behavior.png\" alt=\"Visibility Behavior\"></p>\n<h4 id=\"Dimension-constraints\"><a href=\"#Dimension-constraints\" class=\"headerlink\" title=\"Dimension constraints\"></a>Dimension constraints</h4><h5 id=\"Minimum-dimensions-on-ConstraintLayout\"><a href=\"#Minimum-dimensions-on-ConstraintLayout\" class=\"headerlink\" title=\"Minimum dimensions on ConstraintLayout\"></a>Minimum dimensions on ConstraintLayout</h5><p>可以像普通控件一样设置最小最大尺寸,属性如下：</p>\n<ul>\n<li><strong> android:minWidth </strong> set the minimum width for the layout</li>\n<li><strong> android:minHeight </strong> set the minimum height for the layout</li>\n<li><strong> android:maxWidth </strong> set the maximum width for the layout</li>\n<li><strong> android:maxHeight </strong> set the maximum height for the layout</li>\n</ul>\n<p>这些属性当ConstraintLayout的宽高为<code>WRAP_CONTENT</code>时有效。</p>\n<h5 id=\"Widgets-dimension-constraints\"><a href=\"#Widgets-dimension-constraints\" class=\"headerlink\" title=\"Widgets dimension constraints\"></a>Widgets dimension constraints</h5><p>可以通过<code>android:layout_width</code>和<code>android:layout_height</code>设置控件的尺寸，有三种方式：</p>\n<ul>\n<li>固定值</li>\n<li>WRAP_CONTENT</li>\n<li>0dp, 相当于<code>MATCH_CONSTRAINT</code></li>\n</ul>\n<p>前两种方式和普通布局表现出来的行为一样。最后一种会通过约束来重新设置控件尺寸，如果设置了margin，在布局计算的时候也会被考虑进去。<br> <img src=\"/image/Android/ConstraintLayout/dimension_constraints.png\" alt=\"Dimension Constraints\"><br>上图中的a是wrap_content,b是0dp，c是设置了margin的0dp。需要注意的是，在ConstraintLayout中，MATCH_PARENT是不推荐使用的。</p>\n<h5 id=\"WRAP-CONTENT-enforcing-constraints-Added-in-1-1\"><a href=\"#WRAP-CONTENT-enforcing-constraints-Added-in-1-1\" class=\"headerlink\" title=\"WRAP_CONTENT:enforcing constraints (Added in 1.1)\"></a>WRAP_CONTENT:enforcing constraints (Added in 1.1)</h5><p>如果控件实际尺寸超过了约束的尺寸，那么约束就会失效，这时候可以添加如下属性来限制：</p>\n<ul>\n<li>app:layout_constrainedWidth=”true|false”</li>\n<li>app:layout_constrainedHeight=”true|false”</li>\n</ul>\n<p>将B控件约束于A控件和父控件的中间，尺寸都为<code>wrap_content</code><br><img src=\"/image/Android/ConstraintLayout/wrap_content_enforcing_constraints1.png\" alt=\"enforcing constraints\"><br>这时候如果将B控件填充很长的文件，那么B控件的左侧则会突破约束，和A控件的中心对齐，如果我们不想要这种方式，还是要求B的左侧和Ade右侧对齐，则可以天剑<br><code>layout_constrainedWidth=&quot;true&quot;</code>属性进行约束，实例如下：<br><img src=\"/image/Android/ConstraintLayout/wrap_content_enforcing_constraints2.png\" alt=\"约束失效\"><br><img src=\"/image/Android/ConstraintLayout/wrap_content_enforcing_constraints3.png\" alt=\"添加强制约束属性\"></p>\n<h5 id=\"MATCH-CONSTRAINT-dimensions-Added-in-1-1\"><a href=\"#MATCH-CONSTRAINT-dimensions-Added-in-1-1\" class=\"headerlink\" title=\"MATCH_CONSTRAINT dimensions (Added in 1.1)\"></a>MATCH_CONSTRAINT dimensions (Added in 1.1)</h5><p>当控件的尺寸被设置为<code>MATCH_CONSTRAINT</code>时，默认的行为是占据所有的剩余空间，可以使用如下属性来更改此行为：</p>\n<ul>\n<li><strong> layout_constraintWidth_min </strong> 和 <strong> layout_constraintHeight_min </strong> : will set the minimum size for this dimension</li>\n<li><strong> layout_constraintWidth_max </strong> 和 <strong> layout_constraintHeight_max </strong> : will set the maximum size for this dimension</li>\n<li><strong> layout_constraintWidth_percent </strong> 和 <strong> layout_constraintHeight_percent </strong> : will set the size of this dimension as a percentage of the parent</li>\n</ul>\n<h5 id=\"Percent-dimension\"><a href=\"#Percent-dimension\" class=\"headerlink\" title=\"Percent dimension\"></a>Percent dimension</h5><p>To use percent, you need to set the following:<br>想要使用百分比布局，需要设置如下属性：</p>\n<ol>\n<li>控件宽高设置为 <code>MATCH_CONSTRAINT</code> (0dp)</li>\n<li><code>app:layout_constraintWidth_default</code>属性值设置为<code>percent</code> </li>\n<li>设置 <code>layout_constraintWidth_percent</code>或者<code>layout_constraintHeight_percent</code>属性值(0-1之间)</li>\n</ol>\n<p>下面的TextView控件将占据剩余宽度的50%和剩余高度的50%,示例：<br><figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">TextView</span></span></div><div class=\"line\">        <span class=\"attr\">android:id</span>=<span class=\"string\">\"@+id/textView6\"</span></div><div class=\"line\">        <span class=\"attr\">android:layout_width</span>=<span class=\"string\">\"0dp\"</span></div><div class=\"line\">        <span class=\"attr\">android:layout_height</span>=<span class=\"string\">\"0dp\"</span></div><div class=\"line\">        <span class=\"attr\">android:background</span>=<span class=\"string\">\"@color/colorAccent\"</span></div><div class=\"line\">        <span class=\"attr\">app:layout_constraintHeight_default</span>=<span class=\"string\">\"percent\"</span></div><div class=\"line\">        <span class=\"attr\">app:layout_constraintHeight_percent</span>=<span class=\"string\">\"0.5\"</span></div><div class=\"line\">        <span class=\"attr\">app:layout_constraintWidth_default</span>=<span class=\"string\">\"percent\"</span></div><div class=\"line\">        <span class=\"attr\">app:layout_constraintWidth_percent</span>=<span class=\"string\">\"0.5\"</span> /&gt;</div></pre></td></tr></table></figure></p>\n<h5 id=\"Ratio\"><a href=\"#Ratio\" class=\"headerlink\" title=\"Ratio\"></a>Ratio</h5><p>可以设置控件的宽高比例，为了实现这种方式，需要让控件的宽或者高设置为0dp(MATCH_CONSTRAINT)，如下：</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">Button</span> <span class=\"attr\">android:layout_width</span>=<span class=\"string\">\"wrap_content\"</span></span></div><div class=\"line\">        <span class=\"attr\">android:layout_height</span>=<span class=\"string\">\"0dp\"</span></div><div class=\"line\">        <span class=\"attr\">app:layout_constraintDimensionRatio</span>=<span class=\"string\">\"1:1\"</span> /&gt;</div></pre></td></tr></table></figure>\n<p>这样的话，高度会随着宽度的改变而改变，并且大小和宽度一致。设置宽高比的方式有两种：</p>\n<ol>\n<li>一个浮点数，<code>受约束的一方的尺寸/另一方尺寸</code>得到的数字</li>\n<li>宽度:高度</li>\n</ol>\n<p>如果宽高两个方向同时设置了0dp(MATCH_CONSTRAINT)，系统会设置满足比例的最大尺寸，这种情况下还要保持宽高比例，需要在比例前面添加W或者H以确定受约束的是高还是宽。</p>\n<blockquote>\n<p>You can also use ratio if both dimensions are set to MATCH_CONSTRAINT (0dp). In this case the system sets the largest dimensions the satisfies all constraints and maintains the    aspect ratio specified. To constrain one specific side based on the dimensions of another, you can pre append W,” or H, to constrain the width or height respectively. For          example, If one dimension is constrained by two targets (e.g. width is 0dp and centered on parent) you can indicate which side should be constrained, by adding the letter W (for   constraining the width) or H (for constraining the height) in front of the ratio, separated by a comma:<br>  <figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">Button</span> <span class=\"attr\">android:layout_width</span>=<span class=\"string\">\"0dp\"</span></span></div><div class=\"line\">        <span class=\"attr\">android:layout_height</span>=<span class=\"string\">\"0dp\"</span></div><div class=\"line\">        <span class=\"attr\">app:layout_constraintDimensionRatio</span>=<span class=\"string\">\"H,16:9\"</span></div><div class=\"line\">        <span class=\"attr\">app:layout_constraintBottom_toBottomOf</span>=<span class=\"string\">\"parent\"</span></div><div class=\"line\">        <span class=\"attr\">app:layout_constraintTop_toTopOf</span>=<span class=\"string\">\"parent\"</span>/&gt;</div></pre></td></tr></table></figure></p>\n<p>will set the height of the button following a 16:9 ratio, while the width of the button will match the constraints to parent.</p>\n</blockquote>\n<h4 id=\"Chains\"><a href=\"#Chains\" class=\"headerlink\" title=\"Chains\"></a>Chains</h4><p>Chains 在单轴（水平或垂直）上提供类似组的行为。另一个轴可以独立地约束。</p>\n<h5 id=\"Creating-a-chain\"><a href=\"#Creating-a-chain\" class=\"headerlink\" title=\"Creating a chain\"></a>Creating a chain</h5><p>如果一组小部件通过双向连接链接在一起，则它们被视为链（参见下图，显示最小链，具有两个小部件）。<br><img src=\"/image/Android/ConstraintLayout/chain.png\" alt=\"chain\"></p>\n<h5 id=\"Chain-heads\"><a href=\"#Chain-heads\" class=\"headerlink\" title=\"Chain heads\"></a>Chain heads</h5><p>横向上，Chain头部是Chain最左边的控件；纵向上，Chain头部是Chain最顶部的控件。<br><img src=\"/image/Android/ConstraintLayout/chain_head.png\" alt=\"chain head\"></p>\n<h5 id=\"Margins-in-chains\"><a href=\"#Margins-in-chains\" class=\"headerlink\" title=\"Margins in chains\"></a>Margins in chains</h5><p>如果连接时定义了外边距，Chain就会发生变化。在SPREAD CHAIN中，外边距会从已经分配好的空间中去掉。原文如下：</p>\n<blockquote>\n<p>If margins are specified on connections, they will be taken in account. In the case of spread chains, margins will be deducted from the allocated space.</p>\n</blockquote>\n<h5 id=\"Chain-Style\"><a href=\"#Chain-Style\" class=\"headerlink\" title=\"Chain Style\"></a>Chain Style</h5><p>当对Chain的第一个元素设置layout_constraintHorizontal_chainStyle或layout_constraintVertical_chainStyle属性，Chain就会根据特定的样式（默认样式为CHAIN_SPREAD）进行相应变化，样式类型如下：</p>\n<ul>\n<li>CHAIN_SPREAD – 元素呗分散开 (默认样式) </li>\n<li>Weighted chain – 在 CHAIN_SPREAD mo样式中,如果某些控件设置了<code>MATCH_CONSTRAINT</code>属性, 他们将平分剩余空间 </li>\n<li>CHAIN_SPREAD_INSIDE – Chain的头尾元素紧贴父容器</li>\n<li>CHAIN_PACKED – Chain中的所有控件合并在一起后在剩余的空间中居中</li>\n</ul>\n<p>图示如下：<br><img src=\"/image/Android/ConstraintLayout/chain_styles.png\" alt=\"chain styles\"></p>\n<h5 id=\"Weighted-chains\"><a href=\"#Weighted-chains\" class=\"headerlink\" title=\"Weighted chains\"></a>Weighted chains</h5><p>默认的Chain会在空间里平均散开。如果其中有一个或多个元素使用了MATCH_CONSTRAINT属性，那么他们会将剩余的空间平均填满。属性layout_constraintHorizontal_height和layout_constraintVertical_weight控制使用MATCH_CONSTRAINT的元素如何均分空间。 例如，一个Chain中包含两个使用MATCH_CONSTRAINT的元素，第一个元素使用的权重为2，第二个元素使用的权重为1，那么被第一个元素占用的空间是第二个元素的2倍。</p>\n<h5 id=\"Margins-and-chains-in-1-1\"><a href=\"#Margins-and-chains-in-1-1\" class=\"headerlink\" title=\"Margins and chains (in 1.1)\"></a>Margins and chains (in 1.1)</h5><p>在chain中是可以使用margin属性的，例如，在一个水平的chain中，一个元素定义了right_magin=10dp,下一个元素定义了margin_left=5dp，那么两者之间的间距就是15dp.</p>\n<h4 id=\"Virtual-Helpers-objects\"><a href=\"#Virtual-Helpers-objects\" class=\"headerlink\" title=\"Virtual Helpers objects\"></a>Virtual Helpers objects</h4><h5 id=\"Guideline\"><a href=\"#Guideline\" class=\"headerlink\" title=\"Guideline\"></a>Guideline</h5><p><code>Guideline</code>是只能用在<code>ConstraintLayout</code>布局里面的一个工具类，用于辅助布局，类似为辅助线，可以设置<code>android:orientation</code>属性来确定是横向的还是纵向的。 </p>\n<ul>\n<li>当设置为vertical的时候，Guideline的宽度为0，高度是parent也就是ConstraintLayout的高度 </li>\n<li>同样设置为horizontal的时候，高度为0，宽度是parent的宽度</li>\n</ul>\n<p>定位Guideline有三种方式，这三种方式只能选择一个</p>\n<ul>\n<li>指定距离左侧或顶部的固定距离（layout_constraintGuide_begin） </li>\n<li>指定距离右侧或底部的固定距离（layout_constraintGuide_end） </li>\n<li>指定在父控件中的宽度或高度的百分比（layout_constraintGuide_percent）</li>\n</ul>\n<p>示例如下：<br><figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">android.support.constraint.Guideline</span></span></div><div class=\"line\">        <span class=\"attr\">android:id</span>=<span class=\"string\">\"@+id/vertical_guideline\"</span></div><div class=\"line\">        <span class=\"attr\">android:layout_width</span>=<span class=\"string\">\"wrap_content\"</span></div><div class=\"line\">        <span class=\"attr\">android:layout_height</span>=<span class=\"string\">\"wrap_content\"</span></div><div class=\"line\">        <span class=\"attr\">android:orientation</span>=<span class=\"string\">\"vertical\"</span></div><div class=\"line\">        <span class=\"attr\">app:layout_constraintGuide_percent</span>=<span class=\"string\">\"0.5\"</span> /&gt;</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">android.support.constraint.Guideline</span></span></div><div class=\"line\">        <span class=\"attr\">android:id</span>=<span class=\"string\">\"@+id/horizontal_guideline\"</span></div><div class=\"line\">        <span class=\"attr\">android:layout_width</span>=<span class=\"string\">\"wrap_content\"</span></div><div class=\"line\">        <span class=\"attr\">android:layout_height</span>=<span class=\"string\">\"wrap_content\"</span></div><div class=\"line\">        <span class=\"attr\">android:orientation</span>=<span class=\"string\">\"horizontal\"</span></div><div class=\"line\">        <span class=\"attr\">app:layout_constraintGuide_percent</span>=<span class=\"string\">\"0.5\"</span> /&gt;</div></pre></td></tr></table></figure></p>\n<p>声明了一个垂直居中，一个水平居中的GuideLine，效果如下，这两个控件在View上是不可见的。<br><img src=\"/image/Android/ConstraintLayout/guideLine_declaration.png\" alt=\"guideline declaration\"></p>\n<p>接着就可以根据这两条辅助线来定位其他控件了<br><figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">Button</span></span></div><div class=\"line\">    <span class=\"attr\">android:text</span>=<span class=\"string\">\"top_left\"</span></div><div class=\"line\">    <span class=\"attr\">android:id</span>=<span class=\"string\">\"@+id/top_left_button\"</span></div><div class=\"line\">    <span class=\"attr\">android:layout_width</span>=<span class=\"string\">\"wrap_content\"</span></div><div class=\"line\">    <span class=\"attr\">android:layout_height</span>=<span class=\"string\">\"wrap_content\"</span></div><div class=\"line\">    <span class=\"attr\">app:layout_constraintBottom_toBottomOf</span>=<span class=\"string\">\"@id/horizontal_guideline\"</span></div><div class=\"line\">    <span class=\"attr\">app:layout_constraintLeft_toLeftOf</span>=<span class=\"string\">\"parent\"</span></div><div class=\"line\">    <span class=\"attr\">app:layout_constraintRight_toLeftOf</span>=<span class=\"string\">\"@id/vertical_guideline\"</span></div><div class=\"line\">    <span class=\"attr\">app:layout_constraintTop_toTopOf</span>=<span class=\"string\">\"parent\"</span> /&gt;</div><div class=\"line\"></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">Button</span></span></div><div class=\"line\">    <span class=\"attr\">android:text</span>=<span class=\"string\">\"top_right\"</span></div><div class=\"line\">    <span class=\"attr\">android:id</span>=<span class=\"string\">\"@+id/top_right_button\"</span></div><div class=\"line\">    <span class=\"attr\">android:layout_width</span>=<span class=\"string\">\"wrap_content\"</span></div><div class=\"line\">    <span class=\"attr\">android:layout_height</span>=<span class=\"string\">\"wrap_content\"</span></div><div class=\"line\">    <span class=\"attr\">app:layout_constraintBottom_toBottomOf</span>=<span class=\"string\">\"@id/horizontal_guideline\"</span></div><div class=\"line\">    <span class=\"attr\">app:layout_constraintLeft_toLeftOf</span>=<span class=\"string\">\"@id/vertical_guideline\"</span></div><div class=\"line\">    <span class=\"attr\">app:layout_constraintRight_toRightOf</span>=<span class=\"string\">\"parent\"</span></div><div class=\"line\">    <span class=\"attr\">app:layout_constraintTop_toTopOf</span>=<span class=\"string\">\"parent\"</span> /&gt;</div><div class=\"line\"></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">Button</span></span></div><div class=\"line\">    <span class=\"attr\">android:text</span>=<span class=\"string\">\"bottom_right\"</span></div><div class=\"line\">    <span class=\"attr\">android:id</span>=<span class=\"string\">\"@+id/bottom_right_button\"</span></div><div class=\"line\">    <span class=\"attr\">android:layout_width</span>=<span class=\"string\">\"wrap_content\"</span></div><div class=\"line\">    <span class=\"attr\">android:layout_height</span>=<span class=\"string\">\"wrap_content\"</span></div><div class=\"line\">    <span class=\"attr\">app:layout_constraintBottom_toBottomOf</span>=<span class=\"string\">\"parent\"</span></div><div class=\"line\">    <span class=\"attr\">app:layout_constraintLeft_toLeftOf</span>=<span class=\"string\">\"@id/vertical_guideline\"</span></div><div class=\"line\">    <span class=\"attr\">app:layout_constraintRight_toRightOf</span>=<span class=\"string\">\"parent\"</span></div><div class=\"line\">    <span class=\"attr\">app:layout_constraintTop_toTopOf</span>=<span class=\"string\">\"@id/horizontal_guideline\"</span> /&gt;</div><div class=\"line\"></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">Button</span></span></div><div class=\"line\">    <span class=\"attr\">android:text</span>=<span class=\"string\">\"bottom_left\"</span></div><div class=\"line\">    <span class=\"attr\">android:id</span>=<span class=\"string\">\"@+id/bottom_left_button\"</span></div><div class=\"line\">    <span class=\"attr\">android:layout_width</span>=<span class=\"string\">\"wrap_content\"</span></div><div class=\"line\">    <span class=\"attr\">android:layout_height</span>=<span class=\"string\">\"wrap_content\"</span></div><div class=\"line\">    <span class=\"attr\">app:layout_constraintBottom_toBottomOf</span>=<span class=\"string\">\"parent\"</span></div><div class=\"line\">    <span class=\"attr\">app:layout_constraintLeft_toLeftOf</span>=<span class=\"string\">\"parent\"</span></div><div class=\"line\">    <span class=\"attr\">app:layout_constraintRight_toRightOf</span>=<span class=\"string\">\"@id/vertical_guideline\"</span></div><div class=\"line\">    <span class=\"attr\">app:layout_constraintTop_toTopOf</span>=<span class=\"string\">\"@id/horizontal_guideline\"</span> /&gt;</div></pre></td></tr></table></figure></p>\n<p>效果如下：<br><img src=\"/image/Android/ConstraintLayout/guideline_relative.png\" alt=\"guideline_relative\"></p>\n<h5 id=\"Barrier\"><a href=\"#Barrier\" class=\"headerlink\" title=\"Barrier\"></a>Barrier</h5><p>Barrier可以引用多个控件，根据他们之中最大的宽高来创建一个虚拟的guideline，<br>假设我们有两个按钮，<code>@id/button1</code>和<code>@id/button2</code>,让Barrier的constraint_referenced_ids属性引用这两个id，如下：<br><figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">android.support.constraint.Barrier</span></span></div><div class=\"line\">    <span class=\"attr\">android:id</span>=<span class=\"string\">\"@+id/barrier\"</span></div><div class=\"line\">    <span class=\"attr\">android:layout_width</span>=<span class=\"string\">\"wrap_content\"</span></div><div class=\"line\">    <span class=\"attr\">android:layout_height</span>=<span class=\"string\">\"wrap_content\"</span></div><div class=\"line\">    <span class=\"attr\">app:barrierDirection</span>=<span class=\"string\">\"end\"</span></div><div class=\"line\">    <span class=\"attr\">app:constraint_referenced_ids</span>=<span class=\"string\">\"button1,button2\"</span> /&gt;</div></pre></td></tr></table></figure></p>\n<p>示例如下：<br><img src=\"/image/Android/ConstraintLayout/barrier1.png\" alt=\"barrier\"><br>图中蓝色的线就是<code>Barrier</code>，<code>Barrier</code>所在问的方位由<code>barrierDirection</code>确定，可以设置为<code>start</code>,<code>end</code>,<code>top</code>,<code>bottom</code>,<code>right</code>,<code>left</code><br>这时候我们改变一个两个按钮的宽度，让button2的宽度小于button1，则效果如下：<br><img src=\"/image/Android/ConstraintLayout/barrier2.png\" alt=\"barrier\"><br>这样我们就可以把其他控件约束于barrier的右侧，使得button1和button2不会覆盖(被覆盖)其他控件</p>\n<h5 id=\"Group\"><a href=\"#Group\" class=\"headerlink\" title=\"Group\"></a>Group</h5><p>Group可以包含多个对其他控件的引用，这样我们操作这个group就相当于操作引用的控件<br><figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">android.support.constraint.Group</span></span></div><div class=\"line\">        <span class=\"attr\">android:visibility</span>=<span class=\"string\">\"gone\"</span></div><div class=\"line\">        <span class=\"attr\">android:id</span>=<span class=\"string\">\"@+id/button_group\"</span></div><div class=\"line\">        <span class=\"attr\">app:constraint_referenced_ids</span>=<span class=\"string\">\"login,register,modify_password\"</span></div><div class=\"line\">        <span class=\"attr\">android:layout_width</span>=<span class=\"string\">\"wrap_content\"</span></div><div class=\"line\">        <span class=\"attr\">android:layout_height</span>=<span class=\"string\">\"wrap_content\"</span> /&gt;</div></pre></td></tr></table></figure></p>\n<p>像上面这样，只要操作Group的<code>visibility</code>属性，就相当于同时操作<code>@id/login</code>,<code>@id/register</code>,<code>@id/modify_password</code>这三个控件的<code>visibility</code>属性。</p>\n<h5 id=\"Placeholders\"><a href=\"#Placeholders\" class=\"headerlink\" title=\"Placeholders\"></a>Placeholders</h5><p>顾名思义就是一个用来占位的东西，对于样式相同，功能不同的界面，可以把样式做成style或者使用PlaceHolders来做：<br><figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;?xml version=\"1.0\" encoding=\"utf-8\"?&gt;</div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">merge</span> <span class=\"attr\">xmlns:android</span>=<span class=\"string\">\"http://schemas.android.com/apk/res/android\"</span></span></div><div class=\"line\">    <span class=\"attr\">xmlns:app</span>=<span class=\"string\">\"http://schemas.android.com/apk/res-auto\"</span></div><div class=\"line\">    <span class=\"attr\">xmlns:tools</span>=<span class=\"string\">\"http://schemas.android.com/tools\"</span></div><div class=\"line\">    <span class=\"attr\">android:layout_width</span>=<span class=\"string\">\"match_parent\"</span></div><div class=\"line\">    <span class=\"attr\">android:layout_height</span>=<span class=\"string\">\"match_parent\"</span></div><div class=\"line\">    <span class=\"attr\">tools:layout_editor_absoluteX</span>=<span class=\"string\">\"0dp\"</span></div><div class=\"line\">    <span class=\"attr\">tools:layout_editor_absoluteY</span>=<span class=\"string\">\"81dp\"</span></div><div class=\"line\">    <span class=\"attr\">tools:parentTag</span>=<span class=\"string\">\"android.support.constraint.ConstraintLayout\"</span>&gt;</div><div class=\"line\"> </div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">android.support.constraint.Placeholder</span></span></div><div class=\"line\">        <span class=\"attr\">android:id</span>=<span class=\"string\">\"@+id/template_main_image\"</span></div><div class=\"line\">        <span class=\"attr\">android:layout_width</span>=<span class=\"string\">\"0dp\"</span></div><div class=\"line\">        <span class=\"attr\">android:layout_height</span>=<span class=\"string\">\"0dp\"</span></div><div class=\"line\">        <span class=\"attr\">android:layout_marginTop</span>=<span class=\"string\">\"16dp\"</span></div><div class=\"line\">        <span class=\"attr\">app:content</span>=<span class=\"string\">\"@+id/top_image\"</span></div><div class=\"line\">        <span class=\"attr\">app:layout_constraintDimensionRatio</span>=<span class=\"string\">\"16:9\"</span></div><div class=\"line\">        <span class=\"attr\">app:layout_constraintLeft_toLeftOf</span>=<span class=\"string\">\"parent\"</span></div><div class=\"line\">        <span class=\"attr\">app:layout_constraintRight_toRightOf</span>=<span class=\"string\">\"parent\"</span> /&gt;</div><div class=\"line\"> </div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">android.support.constraint.Placeholder</span></span></div><div class=\"line\">        <span class=\"attr\">android:id</span>=<span class=\"string\">\"@+id/template_save\"</span></div><div class=\"line\">        <span class=\"attr\">android:layout_width</span>=<span class=\"string\">\"48dp\"</span></div><div class=\"line\">        <span class=\"attr\">android:layout_height</span>=<span class=\"string\">\"48dp\"</span></div><div class=\"line\">        <span class=\"attr\">app:content</span>=<span class=\"string\">\"@+id/save\"</span></div><div class=\"line\">        <span class=\"attr\">app:layout_constraintEnd_toStartOf</span>=<span class=\"string\">\"@+id/template_delete\"</span></div><div class=\"line\">        <span class=\"attr\">app:layout_constraintHorizontal_bias</span>=<span class=\"string\">\"0.5\"</span></div><div class=\"line\">        <span class=\"attr\">app:layout_constraintStart_toStartOf</span>=<span class=\"string\">\"parent\"</span></div><div class=\"line\">        <span class=\"attr\">tools:layout_editor_absoluteY</span>=<span class=\"string\">\"460dp\"</span> /&gt;</div><div class=\"line\"> </div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">android.support.constraint.Placeholder</span></span></div><div class=\"line\">        <span class=\"attr\">android:id</span>=<span class=\"string\">\"@+id/template_delete\"</span></div><div class=\"line\">        <span class=\"attr\">android:layout_width</span>=<span class=\"string\">\"48dp\"</span></div><div class=\"line\">        <span class=\"attr\">android:layout_height</span>=<span class=\"string\">\"48dp\"</span></div><div class=\"line\">        <span class=\"attr\">app:content</span>=<span class=\"string\">\"@+id/delete\"</span></div><div class=\"line\">        <span class=\"attr\">app:layout_constraintEnd_toStartOf</span>=<span class=\"string\">\"@+id/template_cancel\"</span></div><div class=\"line\">        <span class=\"attr\">app:layout_constraintHorizontal_bias</span>=<span class=\"string\">\"0.5\"</span></div><div class=\"line\">        <span class=\"attr\">app:layout_constraintStart_toEndOf</span>=<span class=\"string\">\"@+id/template_save\"</span></div><div class=\"line\">        <span class=\"attr\">tools:layout_editor_absoluteY</span>=<span class=\"string\">\"460dp\"</span> /&gt;</div><div class=\"line\"> </div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">android.support.constraint.Placeholder</span></span></div><div class=\"line\">        <span class=\"attr\">android:id</span>=<span class=\"string\">\"@+id/template_cancel\"</span></div><div class=\"line\">        <span class=\"attr\">android:layout_width</span>=<span class=\"string\">\"48dp\"</span></div><div class=\"line\">        <span class=\"attr\">android:layout_height</span>=<span class=\"string\">\"48dp\"</span></div><div class=\"line\">        <span class=\"attr\">app:content</span>=<span class=\"string\">\"@+id/cancel\"</span></div><div class=\"line\">        <span class=\"attr\">app:layout_constraintEnd_toStartOf</span>=<span class=\"string\">\"@+id/template_edit\"</span></div><div class=\"line\">        <span class=\"attr\">app:layout_constraintHorizontal_bias</span>=<span class=\"string\">\"0.5\"</span></div><div class=\"line\">        <span class=\"attr\">app:layout_constraintStart_toEndOf</span>=<span class=\"string\">\"@+id/template_delete\"</span></div><div class=\"line\">        <span class=\"attr\">tools:layout_editor_absoluteY</span>=<span class=\"string\">\"460dp\"</span> /&gt;</div><div class=\"line\"> </div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">android.support.constraint.Placeholder</span></span></div><div class=\"line\">        <span class=\"attr\">android:id</span>=<span class=\"string\">\"@+id/template_edit\"</span></div><div class=\"line\">        <span class=\"attr\">android:layout_width</span>=<span class=\"string\">\"48dp\"</span></div><div class=\"line\">        <span class=\"attr\">android:layout_height</span>=<span class=\"string\">\"48dp\"</span></div><div class=\"line\">        <span class=\"attr\">app:content</span>=<span class=\"string\">\"@+id/edit\"</span></div><div class=\"line\">        <span class=\"attr\">app:layout_constraintEnd_toEndOf</span>=<span class=\"string\">\"parent\"</span></div><div class=\"line\">        <span class=\"attr\">app:layout_constraintHorizontal_bias</span>=<span class=\"string\">\"0.5\"</span></div><div class=\"line\">        <span class=\"attr\">app:layout_constraintStart_toEndOf</span>=<span class=\"string\">\"@+id/template_cancel\"</span></div><div class=\"line\">        <span class=\"attr\">tools:layout_editor_absoluteY</span>=<span class=\"string\">\"460dp\"</span> /&gt;</div><div class=\"line\"> </div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">merge</span>&gt;</span></div></pre></td></tr></table></figure></p>\n<p>如果想要在预览界面看起来像是在ConstraintLayout里面的话就加上<code>tools:parentTag=&quot;android.support.constraint.ConstraintLayout&quot;</code><br>预览如下：<br><img src=\"/image/Android/ConstraintLayout/constraint_layout_placeholder_preview.png\" alt=\"constraintLayout placeholder preview\"><br>在上面的布局文件中，每一个Placeholder都添加了<code>app:content</code>属性，表示要用这个属性指定的id对应的控件来替换<code>Placeholder</code>，<br>在其他布局文件中：<br><figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">android.support.constraint.ConstraintLayout</span></span></div><div class=\"line\">    <span class=\"attr\">android:layout_width</span>=<span class=\"string\">\"match_parent\"</span></div><div class=\"line\">    <span class=\"attr\">android:layout_height</span>=<span class=\"string\">\"match_parent\"</span>&gt;</div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">include</span> <span class=\"attr\">android:id</span>=<span class=\"string\">\"@+id/root\"</span> <span class=\"attr\">layout</span>=<span class=\"string\">\"@layout/constraint_layout_placeholder\"</span>/&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">ImageButton</span></span></div><div class=\"line\">        <span class=\"attr\">android:id</span>=<span class=\"string\">\"@+id/main_title_image\"</span></div><div class=\"line\">        <span class=\"attr\">android:src</span>=<span class=\"string\">\"@drawable/main_title_image\"</span></div><div class=\"line\">        <span class=\"attr\">android:layout_width</span>=<span class=\"string\">\"wrap_content\"</span></div><div class=\"line\">        <span class=\"attr\">android:layout_height</span>=<span class=\"string\">\"wrap_content\"</span> /&gt;</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">ImageButton</span></span></div><div class=\"line\">        <span class=\"attr\">android:id</span>=<span class=\"string\">\"@+id/save\"</span></div><div class=\"line\">        <span class=\"attr\">android:layout_width</span>=<span class=\"string\">\"wrap_content\"</span></div><div class=\"line\">        <span class=\"attr\">android:layout_height</span>=<span class=\"string\">\"wrap_content\"</span></div><div class=\"line\">        <span class=\"attr\">android:layout_marginBottom</span>=<span class=\"string\">\"16dp\"</span></div><div class=\"line\">        <span class=\"attr\">app:layout_constraintBottom_toBottomOf</span>=<span class=\"string\">\"parent\"</span></div><div class=\"line\">        <span class=\"attr\">app:srcCompat</span>=<span class=\"string\">\"@drawable/ic_save_black_24dp\"</span> /&gt;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">ImageButton</span></span></div><div class=\"line\">        <span class=\"attr\">android:id</span>=<span class=\"string\">\"@+id/edit\"</span></div><div class=\"line\">        <span class=\"attr\">android:layout_width</span>=<span class=\"string\">\"wrap_content\"</span></div><div class=\"line\">        <span class=\"attr\">android:layout_height</span>=<span class=\"string\">\"wrap_content\"</span></div><div class=\"line\">        <span class=\"attr\">app:srcCompat</span>=<span class=\"string\">\"@drawable/ic_edit_black_24dp\"</span> /&gt;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">ImageButton</span></span></div><div class=\"line\">        <span class=\"attr\">android:id</span>=<span class=\"string\">\"@+id/cancel\"</span></div><div class=\"line\">        <span class=\"attr\">android:layout_width</span>=<span class=\"string\">\"wrap_content\"</span></div><div class=\"line\">        <span class=\"attr\">android:layout_height</span>=<span class=\"string\">\"wrap_content\"</span></div><div class=\"line\">        <span class=\"attr\">android:layout_marginBottom</span>=<span class=\"string\">\"16dp\"</span></div><div class=\"line\"></div><div class=\"line\">        <span class=\"attr\">app:srcCompat</span>=<span class=\"string\">\"@drawable/ic_cancel_black_24dp\"</span> /&gt;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">ImageButton</span></span></div><div class=\"line\">        <span class=\"attr\">android:id</span>=<span class=\"string\">\"@+id/delete\"</span></div><div class=\"line\">        <span class=\"attr\">android:layout_width</span>=<span class=\"string\">\"wrap_content\"</span></div><div class=\"line\">        <span class=\"attr\">android:layout_height</span>=<span class=\"string\">\"wrap_content\"</span></div><div class=\"line\">        <span class=\"attr\">android:layout_marginBottom</span>=<span class=\"string\">\"16dp\"</span></div><div class=\"line\"></div><div class=\"line\">        <span class=\"attr\">app:srcCompat</span>=<span class=\"string\">\"@drawable/ic_delete_black_24dp\"</span> /&gt;</div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">android.support.constraint.ConstraintLayout</span>&gt;</span></div></pre></td></tr></table></figure></p>\n<p>首先使用<code>include</code>标签将模板包含进来，然后创建其他需要替换的控件：<br><img src=\"/image/Android/ConstraintLayout/merge_constraint_layout_placeholder_preview.png\" alt=\"merge constraintLayout placeholder preview\"><br>当然也可以在代码中调用<code>Placeholder.setContent(id)</code>动态替换，配合<code>CoordinatorLayout</code>可以做出比较好玩的动画效果：<br><img src=\"/image/Android/ConstraintLayout/constraintLayout_placeholderand_CoordinatorLayout.gif\" alt=\"constraintLayout placeholder + CoordinatorLayout\"><br>代码在这里<br><a href=\"https://github.com/Thumar/Placeholder\" target=\"_blank\" rel=\"external\">https://github.com/Thumar/Placeholder</a></p>\n<p><code>ConstraintLayout</code> 1.1版本之后的东西常用的差不多就这些了</p>\n<hr>\n<p>以上</p>\n","excerpt":"<p><a href=\"https://developer.android.google.cn/reference/android/support/constraint/ConstraintLayout\">https://developer.android.google.cn/reference/android/support/constraint/ConstraintLayout</a><br>A ConstraintLayout is a ViewGroup which allows you to position and size widgets in a flexible way.</p>","more":"<h3 id=\"版本支持\"><a href=\"#版本支持\" class=\"headerlink\" title=\"版本支持\"></a>版本支持</h3><p>ConstraintLayout是一个支持库，向前兼容到Android9，以后还会添加更多的新特性。现在公司的产品的最低版本支持都在2.3之上，部分产品最低版本支持保持在4.4之上。这就意味着我们不需要关心最低版本支持的事情。</p>\n<h3 id=\"新特性\"><a href=\"#新特性\" class=\"headerlink\" title=\"新特性\"></a>新特性</h3><p>在使用新特性的时候是不能有循环依赖的，比如相对定位，不能A依赖于B的位置，B依赖C的位置，而C又依赖A的位置</p>\n<h4 id=\"Relative-positioning\"><a href=\"#Relative-positioning\" class=\"headerlink\" title=\"Relative positioning\"></a>Relative positioning</h4><p>相对定位是ConstraintLayout中最基本的构建方式，也就是一个空间相对于另外一个空间进行位置确定，可以在横向和竖向上进行约束：</p>\n<blockquote>\n<p>Horizontal Axis: left, right, start and end sides<br>  Vertical Axis: top, bottom sides and text baseline</p>\n</blockquote>\n<p>如果我们需要让ButtonB在ButtonA的右侧，如下图：<br><img src=\"/image/Android/ConstraintLayout/relative_positioning_example.png\" alt=\"Relative Positioning Example\"></p>\n<p>在布局文件中只需要：<br><figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">Button</span> <span class=\"attr\">android:id</span>=<span class=\"string\">\"@+id/buttonA\"</span> <span class=\"attr\">...</span> /&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">Button</span> <span class=\"attr\">android:id</span>=<span class=\"string\">\"@+id/buttonB\"</span> <span class=\"attr\">...</span></div><div class=\"line\">        <span class=\"attr\">app:layout_constraintLeft_toRightOf</span>=<span class=\"string\">\"@+id/buttonA\"</span> /&gt;</span></div></pre></td></tr></table></figure></p>\n<p>这就告诉系统 让buttonB的左边约束于buttonA的右边<br>下面列出了所有可用的约束方式：</p>\n<ul>\n<li>layout_constraintLeft_toLeftOf</li>\n<li>layout_constraintLeft_toRightOf</li>\n<li>layout_constraintRight_toLeftOf</li>\n<li>layout_constraintRight_toRightOf</li>\n<li>layout_constraintTop_toTopOf</li>\n<li>layout_constraintTop_toBottomOf</li>\n<li>layout_constraintBottom_toTopOf</li>\n<li>layout_constraintBottom_toBottomOf</li>\n<li>layout_constraintBaseline_toBaselineOf</li>\n<li>layout_constraintStart_toEndOf</li>\n<li>layout_constraintStart_toStartOf</li>\n<li>layout_constraintEnd_toStartOf</li>\n<li>layout_constraintEnd_toEndOf</li>\n</ul>\n<p>各约束位置如下：<br><img src=\"/image/Android/ConstraintLayout/relative_position_constraint.png\" alt=\"relative_position_constraint\"><br>上面这些约束关系全部都是本身相对于另外一个控件(使用@id方式引用另外控件)或者父布局(使用parent方式引用父控件)进行约束</p>\n<h4 id=\"Margins\"><a href=\"#Margins\" class=\"headerlink\" title=\"Margins\"></a>Margins</h4><p><img src=\"/image/Android/ConstraintLayout/relative_positioning_margins.png\" alt=\"Relative Positioning Margins\"><br>这里的外边距和其他布局方式的外边距一样，不能是负数，属性如下：</p>\n<ul>\n<li>android:layout_marginStart</li>\n<li>android:layout_marginEnd</li>\n<li>android:layout_marginLeft</li>\n<li>android:layout_marginTop</li>\n<li>android:layout_marginRight</li>\n<li>android:layout_marginBottom</li>\n</ul>\n<p>添加的一个新属性是 <code>maiginGone</code>,当一个约束目标的可见性为GONE的时候(View.GONE)，可以改变当前控件的外边距，比如B是相对于A进行约束，当A不可见的时候，可以改变B的外边距，也就是B的外边距可以根据Ade可见性设置不同的值，属性如下</p>\n<ul>\n<li>layout_goneMarginStart</li>\n<li>layout_goneMarginEnd</li>\n<li>layout_goneMarginLeft</li>\n<li>layout_goneMarginTop</li>\n<li>layout_goneMarginRight</li>\n<li>layout_goneMarginBottom</li>\n</ul>\n<h4 id=\"Centering-positioning-and-bias\"><a href=\"#Centering-positioning-and-bias\" class=\"headerlink\" title=\"Centering positioning and bias\"></a>Centering positioning and bias</h4><p><strong> Centering Positioning </strong><br>如果对一个控件的左右(上下)都添加的约束，那么ConstraintLayout的表现就像有两个大小相等方向相反的力在拉这个控件一个样，比如<br><figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">android.support.constraint.ConstraintLayout</span> <span class=\"attr\">...</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">Button</span> <span class=\"attr\">android:id</span>=<span class=\"string\">\"@+id/button\"</span> <span class=\"attr\">...</span></div><div class=\"line\">        <span class=\"attr\">app:layout_constraintLeft_toLeftOf</span>=<span class=\"string\">\"parent\"</span></div><div class=\"line\">        <span class=\"attr\">app:layout_constraintRight_toRightOf</span>=<span class=\"string\">\"parent/&gt;</div><div class=\"line\">&lt;/&gt;</span></span></div></pre></td></tr></table></figure></p>\n<p>表现如下：<br><img src=\"/image/Android/ConstraintLayout/centering_positioning.png\" alt=\"Centering Positioning\"><br>这样就会产生居中效果，如果子控件和父控件的尺寸相同，这写属性就没有意义了</p>\n<p><strong> bias </strong><br>当遇到上面这种约束的时候，我们可以使用<code>bias</code>属性让控件偏向于哪一个方向,属性如下：</p>\n<ul>\n<li>layout_constraintHorizontal_bias</li>\n<li>layout_constraintVertical_bias<br>例如，如下代码：<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">android.support.constraint.ConstraintLayout</span> <span class=\"attr\">...</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">Button</span> <span class=\"attr\">android:id</span>=<span class=\"string\">\"@+id/button\"</span> <span class=\"attr\">...</span></div><div class=\"line\">        <span class=\"attr\">app:layout_constraintHorizontal_bias</span>=<span class=\"string\">\"0.3\"</span></div><div class=\"line\">        <span class=\"attr\">app:layout_constraintLeft_toLeftOf</span>=<span class=\"string\">\"parent\"</span></div><div class=\"line\">        <span class=\"attr\">app:layout_constraintRight_toRightOf</span>=<span class=\"string\">\"parent/&gt;</div><div class=\"line\">&lt;/&gt;</span></span></div></pre></td></tr></table></figure>\n</li>\n</ul>\n<p>表现如下：<br><img src=\"/image/Android/ConstraintLayout/centering_positioning_with_bias.png\" alt=\"Centering Positioning with Bias\"></p>\n<h4 id=\"Circular-positioning-Added-in-1-1\"><a href=\"#Circular-positioning-Added-in-1-1\" class=\"headerlink\" title=\"Circular positioning (Added in 1.1)\"></a>Circular positioning (Added in 1.1)</h4><p>这个属性是1.1版本添加进去的，可以使用<code>angle</code>和<code>distance</code>来约束一个控件的中心点和另外一个空间的中心点的位置关系，这样就可以把空间定位在一个圆上，可用属性如下：</p>\n<ul>\n<li><strong>layout_constraintCircle </strong> : references another widget id</li>\n<li><strong>layout_constraintCircleRadius </strong> : the distance to the other widget center</li>\n<li><strong>layout_constraintCircleAngle </strong> : which angle the widget should be at (in degrees, from 0 to 360)</li>\n</ul>\n<p>示例如下：<br><figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">Button</span> <span class=\"attr\">android:id</span>=<span class=\"string\">\"@+id/buttonA\"</span> <span class=\"attr\">...</span> /&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">Button</span> <span class=\"attr\">android:id</span>=<span class=\"string\">\"@+id/buttonB\"</span> <span class=\"attr\">...</span></div><div class=\"line\">      <span class=\"attr\">app:layout_constraintCircle</span>=<span class=\"string\">\"@+id/buttonA\"</span></div><div class=\"line\">      <span class=\"attr\">app:layout_constraintCircleRadius</span>=<span class=\"string\">\"100dp\"</span></div><div class=\"line\">      <span class=\"attr\">app:layout_constraintCircleAngle</span>=<span class=\"string\">\"45\"</span> /&gt;</span></div></pre></td></tr></table></figure></p>\n<p>表现如下：<br><img src=\"/image/Android/ConstraintLayout/circular_positioning.png\" alt=\"Circular Positioning\"></p>\n<h4 id=\"Visibility-behavior\"><a href=\"#Visibility-behavior\" class=\"headerlink\" title=\"Visibility behavior\"></a>Visibility behavior</h4><p>ConstraintLayout对于被标记为GONE的控件有特殊的处理。一般布局中，GONE控件是不会展示在界面上并且不再属于布局的一部分，但是在布局计算上，ConstraintLayout和传统布局有很大的区别</p>\n<ol>\n<li>传统布局下，GONE控件会被认为大小是0，也就是一个点</li>\n<li>在ConstraintLayout中其大小仍然按照可见大小计算，但是其外边距为0</li>\n</ol>\n<p><img src=\"/image/Android/ConstraintLayout/visibility_behavior.png\" alt=\"Visibility Behavior\"></p>\n<h4 id=\"Dimension-constraints\"><a href=\"#Dimension-constraints\" class=\"headerlink\" title=\"Dimension constraints\"></a>Dimension constraints</h4><h5 id=\"Minimum-dimensions-on-ConstraintLayout\"><a href=\"#Minimum-dimensions-on-ConstraintLayout\" class=\"headerlink\" title=\"Minimum dimensions on ConstraintLayout\"></a>Minimum dimensions on ConstraintLayout</h5><p>可以像普通控件一样设置最小最大尺寸,属性如下：</p>\n<ul>\n<li><strong> android:minWidth </strong> set the minimum width for the layout</li>\n<li><strong> android:minHeight </strong> set the minimum height for the layout</li>\n<li><strong> android:maxWidth </strong> set the maximum width for the layout</li>\n<li><strong> android:maxHeight </strong> set the maximum height for the layout</li>\n</ul>\n<p>这些属性当ConstraintLayout的宽高为<code>WRAP_CONTENT</code>时有效。</p>\n<h5 id=\"Widgets-dimension-constraints\"><a href=\"#Widgets-dimension-constraints\" class=\"headerlink\" title=\"Widgets dimension constraints\"></a>Widgets dimension constraints</h5><p>可以通过<code>android:layout_width</code>和<code>android:layout_height</code>设置控件的尺寸，有三种方式：</p>\n<ul>\n<li>固定值</li>\n<li>WRAP_CONTENT</li>\n<li>0dp, 相当于<code>MATCH_CONSTRAINT</code></li>\n</ul>\n<p>前两种方式和普通布局表现出来的行为一样。最后一种会通过约束来重新设置控件尺寸，如果设置了margin，在布局计算的时候也会被考虑进去。<br> <img src=\"/image/Android/ConstraintLayout/dimension_constraints.png\" alt=\"Dimension Constraints\"><br>上图中的a是wrap_content,b是0dp，c是设置了margin的0dp。需要注意的是，在ConstraintLayout中，MATCH_PARENT是不推荐使用的。</p>\n<h5 id=\"WRAP-CONTENT-enforcing-constraints-Added-in-1-1\"><a href=\"#WRAP-CONTENT-enforcing-constraints-Added-in-1-1\" class=\"headerlink\" title=\"WRAP_CONTENT:enforcing constraints (Added in 1.1)\"></a>WRAP_CONTENT:enforcing constraints (Added in 1.1)</h5><p>如果控件实际尺寸超过了约束的尺寸，那么约束就会失效，这时候可以添加如下属性来限制：</p>\n<ul>\n<li>app:layout_constrainedWidth=”true|false”</li>\n<li>app:layout_constrainedHeight=”true|false”</li>\n</ul>\n<p>将B控件约束于A控件和父控件的中间，尺寸都为<code>wrap_content</code><br><img src=\"/image/Android/ConstraintLayout/wrap_content_enforcing_constraints1.png\" alt=\"enforcing constraints\"><br>这时候如果将B控件填充很长的文件，那么B控件的左侧则会突破约束，和A控件的中心对齐，如果我们不想要这种方式，还是要求B的左侧和Ade右侧对齐，则可以天剑<br><code>layout_constrainedWidth=&quot;true&quot;</code>属性进行约束，实例如下：<br><img src=\"/image/Android/ConstraintLayout/wrap_content_enforcing_constraints2.png\" alt=\"约束失效\"><br><img src=\"/image/Android/ConstraintLayout/wrap_content_enforcing_constraints3.png\" alt=\"添加强制约束属性\"></p>\n<h5 id=\"MATCH-CONSTRAINT-dimensions-Added-in-1-1\"><a href=\"#MATCH-CONSTRAINT-dimensions-Added-in-1-1\" class=\"headerlink\" title=\"MATCH_CONSTRAINT dimensions (Added in 1.1)\"></a>MATCH_CONSTRAINT dimensions (Added in 1.1)</h5><p>当控件的尺寸被设置为<code>MATCH_CONSTRAINT</code>时，默认的行为是占据所有的剩余空间，可以使用如下属性来更改此行为：</p>\n<ul>\n<li><strong> layout_constraintWidth_min </strong> 和 <strong> layout_constraintHeight_min </strong> : will set the minimum size for this dimension</li>\n<li><strong> layout_constraintWidth_max </strong> 和 <strong> layout_constraintHeight_max </strong> : will set the maximum size for this dimension</li>\n<li><strong> layout_constraintWidth_percent </strong> 和 <strong> layout_constraintHeight_percent </strong> : will set the size of this dimension as a percentage of the parent</li>\n</ul>\n<h5 id=\"Percent-dimension\"><a href=\"#Percent-dimension\" class=\"headerlink\" title=\"Percent dimension\"></a>Percent dimension</h5><p>To use percent, you need to set the following:<br>想要使用百分比布局，需要设置如下属性：</p>\n<ol>\n<li>控件宽高设置为 <code>MATCH_CONSTRAINT</code> (0dp)</li>\n<li><code>app:layout_constraintWidth_default</code>属性值设置为<code>percent</code> </li>\n<li>设置 <code>layout_constraintWidth_percent</code>或者<code>layout_constraintHeight_percent</code>属性值(0-1之间)</li>\n</ol>\n<p>下面的TextView控件将占据剩余宽度的50%和剩余高度的50%,示例：<br><figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">TextView</span></div><div class=\"line\">        <span class=\"attr\">android:id</span>=<span class=\"string\">\"@+id/textView6\"</span></div><div class=\"line\">        <span class=\"attr\">android:layout_width</span>=<span class=\"string\">\"0dp\"</span></div><div class=\"line\">        <span class=\"attr\">android:layout_height</span>=<span class=\"string\">\"0dp\"</span></div><div class=\"line\">        <span class=\"attr\">android:background</span>=<span class=\"string\">\"@color/colorAccent\"</span></div><div class=\"line\">        <span class=\"attr\">app:layout_constraintHeight_default</span>=<span class=\"string\">\"percent\"</span></div><div class=\"line\">        <span class=\"attr\">app:layout_constraintHeight_percent</span>=<span class=\"string\">\"0.5\"</span></div><div class=\"line\">        <span class=\"attr\">app:layout_constraintWidth_default</span>=<span class=\"string\">\"percent\"</span></div><div class=\"line\">        <span class=\"attr\">app:layout_constraintWidth_percent</span>=<span class=\"string\">\"0.5\"</span> /&gt;</span></div></pre></td></tr></table></figure></p>\n<h5 id=\"Ratio\"><a href=\"#Ratio\" class=\"headerlink\" title=\"Ratio\"></a>Ratio</h5><p>可以设置控件的宽高比例，为了实现这种方式，需要让控件的宽或者高设置为0dp(MATCH_CONSTRAINT)，如下：</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">Button</span> <span class=\"attr\">android:layout_width</span>=<span class=\"string\">\"wrap_content\"</span></div><div class=\"line\">        <span class=\"attr\">android:layout_height</span>=<span class=\"string\">\"0dp\"</span></div><div class=\"line\">        <span class=\"attr\">app:layout_constraintDimensionRatio</span>=<span class=\"string\">\"1:1\"</span> /&gt;</span></div></pre></td></tr></table></figure>\n<p>这样的话，高度会随着宽度的改变而改变，并且大小和宽度一致。设置宽高比的方式有两种：</p>\n<ol>\n<li>一个浮点数，<code>受约束的一方的尺寸/另一方尺寸</code>得到的数字</li>\n<li>宽度:高度</li>\n</ol>\n<p>如果宽高两个方向同时设置了0dp(MATCH_CONSTRAINT)，系统会设置满足比例的最大尺寸，这种情况下还要保持宽高比例，需要在比例前面添加W或者H以确定受约束的是高还是宽。</p>\n<blockquote>\n<p>You can also use ratio if both dimensions are set to MATCH_CONSTRAINT (0dp). In this case the system sets the largest dimensions the satisfies all constraints and maintains the    aspect ratio specified. To constrain one specific side based on the dimensions of another, you can pre append W,” or H, to constrain the width or height respectively. For          example, If one dimension is constrained by two targets (e.g. width is 0dp and centered on parent) you can indicate which side should be constrained, by adding the letter W (for   constraining the width) or H (for constraining the height) in front of the ratio, separated by a comma:<br>  <figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">Button</span> <span class=\"attr\">android:layout_width</span>=<span class=\"string\">\"0dp\"</span></div><div class=\"line\">        <span class=\"attr\">android:layout_height</span>=<span class=\"string\">\"0dp\"</span></div><div class=\"line\">        <span class=\"attr\">app:layout_constraintDimensionRatio</span>=<span class=\"string\">\"H,16:9\"</span></div><div class=\"line\">        <span class=\"attr\">app:layout_constraintBottom_toBottomOf</span>=<span class=\"string\">\"parent\"</span></div><div class=\"line\">        <span class=\"attr\">app:layout_constraintTop_toTopOf</span>=<span class=\"string\">\"parent\"</span>/&gt;</span></div></pre></td></tr></table></figure></p>\n<p>will set the height of the button following a 16:9 ratio, while the width of the button will match the constraints to parent.</p>\n</blockquote>\n<h4 id=\"Chains\"><a href=\"#Chains\" class=\"headerlink\" title=\"Chains\"></a>Chains</h4><p>Chains 在单轴（水平或垂直）上提供类似组的行为。另一个轴可以独立地约束。</p>\n<h5 id=\"Creating-a-chain\"><a href=\"#Creating-a-chain\" class=\"headerlink\" title=\"Creating a chain\"></a>Creating a chain</h5><p>如果一组小部件通过双向连接链接在一起，则它们被视为链（参见下图，显示最小链，具有两个小部件）。<br><img src=\"/image/Android/ConstraintLayout/chain.png\" alt=\"chain\"></p>\n<h5 id=\"Chain-heads\"><a href=\"#Chain-heads\" class=\"headerlink\" title=\"Chain heads\"></a>Chain heads</h5><p>横向上，Chain头部是Chain最左边的控件；纵向上，Chain头部是Chain最顶部的控件。<br><img src=\"/image/Android/ConstraintLayout/chain_head.png\" alt=\"chain head\"></p>\n<h5 id=\"Margins-in-chains\"><a href=\"#Margins-in-chains\" class=\"headerlink\" title=\"Margins in chains\"></a>Margins in chains</h5><p>如果连接时定义了外边距，Chain就会发生变化。在SPREAD CHAIN中，外边距会从已经分配好的空间中去掉。原文如下：</p>\n<blockquote>\n<p>If margins are specified on connections, they will be taken in account. In the case of spread chains, margins will be deducted from the allocated space.</p>\n</blockquote>\n<h5 id=\"Chain-Style\"><a href=\"#Chain-Style\" class=\"headerlink\" title=\"Chain Style\"></a>Chain Style</h5><p>当对Chain的第一个元素设置layout_constraintHorizontal_chainStyle或layout_constraintVertical_chainStyle属性，Chain就会根据特定的样式（默认样式为CHAIN_SPREAD）进行相应变化，样式类型如下：</p>\n<ul>\n<li>CHAIN_SPREAD – 元素呗分散开 (默认样式) </li>\n<li>Weighted chain – 在 CHAIN_SPREAD mo样式中,如果某些控件设置了<code>MATCH_CONSTRAINT</code>属性, 他们将平分剩余空间 </li>\n<li>CHAIN_SPREAD_INSIDE – Chain的头尾元素紧贴父容器</li>\n<li>CHAIN_PACKED – Chain中的所有控件合并在一起后在剩余的空间中居中</li>\n</ul>\n<p>图示如下：<br><img src=\"/image/Android/ConstraintLayout/chain_styles.png\" alt=\"chain styles\"></p>\n<h5 id=\"Weighted-chains\"><a href=\"#Weighted-chains\" class=\"headerlink\" title=\"Weighted chains\"></a>Weighted chains</h5><p>默认的Chain会在空间里平均散开。如果其中有一个或多个元素使用了MATCH_CONSTRAINT属性，那么他们会将剩余的空间平均填满。属性layout_constraintHorizontal_height和layout_constraintVertical_weight控制使用MATCH_CONSTRAINT的元素如何均分空间。 例如，一个Chain中包含两个使用MATCH_CONSTRAINT的元素，第一个元素使用的权重为2，第二个元素使用的权重为1，那么被第一个元素占用的空间是第二个元素的2倍。</p>\n<h5 id=\"Margins-and-chains-in-1-1\"><a href=\"#Margins-and-chains-in-1-1\" class=\"headerlink\" title=\"Margins and chains (in 1.1)\"></a>Margins and chains (in 1.1)</h5><p>在chain中是可以使用margin属性的，例如，在一个水平的chain中，一个元素定义了right_magin=10dp,下一个元素定义了margin_left=5dp，那么两者之间的间距就是15dp.</p>\n<h4 id=\"Virtual-Helpers-objects\"><a href=\"#Virtual-Helpers-objects\" class=\"headerlink\" title=\"Virtual Helpers objects\"></a>Virtual Helpers objects</h4><h5 id=\"Guideline\"><a href=\"#Guideline\" class=\"headerlink\" title=\"Guideline\"></a>Guideline</h5><p><code>Guideline</code>是只能用在<code>ConstraintLayout</code>布局里面的一个工具类，用于辅助布局，类似为辅助线，可以设置<code>android:orientation</code>属性来确定是横向的还是纵向的。 </p>\n<ul>\n<li>当设置为vertical的时候，Guideline的宽度为0，高度是parent也就是ConstraintLayout的高度 </li>\n<li>同样设置为horizontal的时候，高度为0，宽度是parent的宽度</li>\n</ul>\n<p>定位Guideline有三种方式，这三种方式只能选择一个</p>\n<ul>\n<li>指定距离左侧或顶部的固定距离（layout_constraintGuide_begin） </li>\n<li>指定距离右侧或底部的固定距离（layout_constraintGuide_end） </li>\n<li>指定在父控件中的宽度或高度的百分比（layout_constraintGuide_percent）</li>\n</ul>\n<p>示例如下：<br><figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">android.support.constraint.Guideline</span></div><div class=\"line\">        <span class=\"attr\">android:id</span>=<span class=\"string\">\"@+id/vertical_guideline\"</span></div><div class=\"line\">        <span class=\"attr\">android:layout_width</span>=<span class=\"string\">\"wrap_content\"</span></div><div class=\"line\">        <span class=\"attr\">android:layout_height</span>=<span class=\"string\">\"wrap_content\"</span></div><div class=\"line\">        <span class=\"attr\">android:orientation</span>=<span class=\"string\">\"vertical\"</span></div><div class=\"line\">        <span class=\"attr\">app:layout_constraintGuide_percent</span>=<span class=\"string\">\"0.5\"</span> /&gt;</span></div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">android.support.constraint.Guideline</span></div><div class=\"line\">        <span class=\"attr\">android:id</span>=<span class=\"string\">\"@+id/horizontal_guideline\"</span></div><div class=\"line\">        <span class=\"attr\">android:layout_width</span>=<span class=\"string\">\"wrap_content\"</span></div><div class=\"line\">        <span class=\"attr\">android:layout_height</span>=<span class=\"string\">\"wrap_content\"</span></div><div class=\"line\">        <span class=\"attr\">android:orientation</span>=<span class=\"string\">\"horizontal\"</span></div><div class=\"line\">        <span class=\"attr\">app:layout_constraintGuide_percent</span>=<span class=\"string\">\"0.5\"</span> /&gt;</span></div></pre></td></tr></table></figure></p>\n<p>声明了一个垂直居中，一个水平居中的GuideLine，效果如下，这两个控件在View上是不可见的。<br><img src=\"/image/Android/ConstraintLayout/guideLine_declaration.png\" alt=\"guideline declaration\"></p>\n<p>接着就可以根据这两条辅助线来定位其他控件了<br><figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">Button</span></div><div class=\"line\">    <span class=\"attr\">android:text</span>=<span class=\"string\">\"top_left\"</span></div><div class=\"line\">    <span class=\"attr\">android:id</span>=<span class=\"string\">\"@+id/top_left_button\"</span></div><div class=\"line\">    <span class=\"attr\">android:layout_width</span>=<span class=\"string\">\"wrap_content\"</span></div><div class=\"line\">    <span class=\"attr\">android:layout_height</span>=<span class=\"string\">\"wrap_content\"</span></div><div class=\"line\">    <span class=\"attr\">app:layout_constraintBottom_toBottomOf</span>=<span class=\"string\">\"@id/horizontal_guideline\"</span></div><div class=\"line\">    <span class=\"attr\">app:layout_constraintLeft_toLeftOf</span>=<span class=\"string\">\"parent\"</span></div><div class=\"line\">    <span class=\"attr\">app:layout_constraintRight_toLeftOf</span>=<span class=\"string\">\"@id/vertical_guideline\"</span></div><div class=\"line\">    <span class=\"attr\">app:layout_constraintTop_toTopOf</span>=<span class=\"string\">\"parent\"</span> /&gt;</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">Button</span></div><div class=\"line\">    <span class=\"attr\">android:text</span>=<span class=\"string\">\"top_right\"</span></div><div class=\"line\">    <span class=\"attr\">android:id</span>=<span class=\"string\">\"@+id/top_right_button\"</span></div><div class=\"line\">    <span class=\"attr\">android:layout_width</span>=<span class=\"string\">\"wrap_content\"</span></div><div class=\"line\">    <span class=\"attr\">android:layout_height</span>=<span class=\"string\">\"wrap_content\"</span></div><div class=\"line\">    <span class=\"attr\">app:layout_constraintBottom_toBottomOf</span>=<span class=\"string\">\"@id/horizontal_guideline\"</span></div><div class=\"line\">    <span class=\"attr\">app:layout_constraintLeft_toLeftOf</span>=<span class=\"string\">\"@id/vertical_guideline\"</span></div><div class=\"line\">    <span class=\"attr\">app:layout_constraintRight_toRightOf</span>=<span class=\"string\">\"parent\"</span></div><div class=\"line\">    <span class=\"attr\">app:layout_constraintTop_toTopOf</span>=<span class=\"string\">\"parent\"</span> /&gt;</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">Button</span></div><div class=\"line\">    <span class=\"attr\">android:text</span>=<span class=\"string\">\"bottom_right\"</span></div><div class=\"line\">    <span class=\"attr\">android:id</span>=<span class=\"string\">\"@+id/bottom_right_button\"</span></div><div class=\"line\">    <span class=\"attr\">android:layout_width</span>=<span class=\"string\">\"wrap_content\"</span></div><div class=\"line\">    <span class=\"attr\">android:layout_height</span>=<span class=\"string\">\"wrap_content\"</span></div><div class=\"line\">    <span class=\"attr\">app:layout_constraintBottom_toBottomOf</span>=<span class=\"string\">\"parent\"</span></div><div class=\"line\">    <span class=\"attr\">app:layout_constraintLeft_toLeftOf</span>=<span class=\"string\">\"@id/vertical_guideline\"</span></div><div class=\"line\">    <span class=\"attr\">app:layout_constraintRight_toRightOf</span>=<span class=\"string\">\"parent\"</span></div><div class=\"line\">    <span class=\"attr\">app:layout_constraintTop_toTopOf</span>=<span class=\"string\">\"@id/horizontal_guideline\"</span> /&gt;</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">Button</span></div><div class=\"line\">    <span class=\"attr\">android:text</span>=<span class=\"string\">\"bottom_left\"</span></div><div class=\"line\">    <span class=\"attr\">android:id</span>=<span class=\"string\">\"@+id/bottom_left_button\"</span></div><div class=\"line\">    <span class=\"attr\">android:layout_width</span>=<span class=\"string\">\"wrap_content\"</span></div><div class=\"line\">    <span class=\"attr\">android:layout_height</span>=<span class=\"string\">\"wrap_content\"</span></div><div class=\"line\">    <span class=\"attr\">app:layout_constraintBottom_toBottomOf</span>=<span class=\"string\">\"parent\"</span></div><div class=\"line\">    <span class=\"attr\">app:layout_constraintLeft_toLeftOf</span>=<span class=\"string\">\"parent\"</span></div><div class=\"line\">    <span class=\"attr\">app:layout_constraintRight_toRightOf</span>=<span class=\"string\">\"@id/vertical_guideline\"</span></div><div class=\"line\">    <span class=\"attr\">app:layout_constraintTop_toTopOf</span>=<span class=\"string\">\"@id/horizontal_guideline\"</span> /&gt;</span></div></pre></td></tr></table></figure></p>\n<p>效果如下：<br><img src=\"/image/Android/ConstraintLayout/guideline_relative.png\" alt=\"guideline_relative\"></p>\n<h5 id=\"Barrier\"><a href=\"#Barrier\" class=\"headerlink\" title=\"Barrier\"></a>Barrier</h5><p>Barrier可以引用多个控件，根据他们之中最大的宽高来创建一个虚拟的guideline，<br>假设我们有两个按钮，<code>@id/button1</code>和<code>@id/button2</code>,让Barrier的constraint_referenced_ids属性引用这两个id，如下：<br><figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">android.support.constraint.Barrier</span></div><div class=\"line\">    <span class=\"attr\">android:id</span>=<span class=\"string\">\"@+id/barrier\"</span></div><div class=\"line\">    <span class=\"attr\">android:layout_width</span>=<span class=\"string\">\"wrap_content\"</span></div><div class=\"line\">    <span class=\"attr\">android:layout_height</span>=<span class=\"string\">\"wrap_content\"</span></div><div class=\"line\">    <span class=\"attr\">app:barrierDirection</span>=<span class=\"string\">\"end\"</span></div><div class=\"line\">    <span class=\"attr\">app:constraint_referenced_ids</span>=<span class=\"string\">\"button1,button2\"</span> /&gt;</span></div></pre></td></tr></table></figure></p>\n<p>示例如下：<br><img src=\"/image/Android/ConstraintLayout/barrier1.png\" alt=\"barrier\"><br>图中蓝色的线就是<code>Barrier</code>，<code>Barrier</code>所在问的方位由<code>barrierDirection</code>确定，可以设置为<code>start</code>,<code>end</code>,<code>top</code>,<code>bottom</code>,<code>right</code>,<code>left</code><br>这时候我们改变一个两个按钮的宽度，让button2的宽度小于button1，则效果如下：<br><img src=\"/image/Android/ConstraintLayout/barrier2.png\" alt=\"barrier\"><br>这样我们就可以把其他控件约束于barrier的右侧，使得button1和button2不会覆盖(被覆盖)其他控件</p>\n<h5 id=\"Group\"><a href=\"#Group\" class=\"headerlink\" title=\"Group\"></a>Group</h5><p>Group可以包含多个对其他控件的引用，这样我们操作这个group就相当于操作引用的控件<br><figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">android.support.constraint.Group</span></div><div class=\"line\">        <span class=\"attr\">android:visibility</span>=<span class=\"string\">\"gone\"</span></div><div class=\"line\">        <span class=\"attr\">android:id</span>=<span class=\"string\">\"@+id/button_group\"</span></div><div class=\"line\">        <span class=\"attr\">app:constraint_referenced_ids</span>=<span class=\"string\">\"login,register,modify_password\"</span></div><div class=\"line\">        <span class=\"attr\">android:layout_width</span>=<span class=\"string\">\"wrap_content\"</span></div><div class=\"line\">        <span class=\"attr\">android:layout_height</span>=<span class=\"string\">\"wrap_content\"</span> /&gt;</span></div></pre></td></tr></table></figure></p>\n<p>像上面这样，只要操作Group的<code>visibility</code>属性，就相当于同时操作<code>@id/login</code>,<code>@id/register</code>,<code>@id/modify_password</code>这三个控件的<code>visibility</code>属性。</p>\n<h5 id=\"Placeholders\"><a href=\"#Placeholders\" class=\"headerlink\" title=\"Placeholders\"></a>Placeholders</h5><p>顾名思义就是一个用来占位的东西，对于样式相同，功能不同的界面，可以把样式做成style或者使用PlaceHolders来做：<br><figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;?xml version=\"1.0\" encoding=\"utf-8\"?&gt;</div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">merge</span> <span class=\"attr\">xmlns:android</span>=<span class=\"string\">\"http://schemas.android.com/apk/res/android\"</span></div><div class=\"line\">    <span class=\"attr\">xmlns:app</span>=<span class=\"string\">\"http://schemas.android.com/apk/res-auto\"</span></div><div class=\"line\">    <span class=\"attr\">xmlns:tools</span>=<span class=\"string\">\"http://schemas.android.com/tools\"</span></div><div class=\"line\">    <span class=\"attr\">android:layout_width</span>=<span class=\"string\">\"match_parent\"</span></div><div class=\"line\">    <span class=\"attr\">android:layout_height</span>=<span class=\"string\">\"match_parent\"</span></div><div class=\"line\">    <span class=\"attr\">tools:layout_editor_absoluteX</span>=<span class=\"string\">\"0dp\"</span></div><div class=\"line\">    <span class=\"attr\">tools:layout_editor_absoluteY</span>=<span class=\"string\">\"81dp\"</span></div><div class=\"line\">    <span class=\"attr\">tools:parentTag</span>=<span class=\"string\">\"android.support.constraint.ConstraintLayout\"</span>&gt;</span></div><div class=\"line\"> </div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">android.support.constraint.Placeholder</span></div><div class=\"line\">        <span class=\"attr\">android:id</span>=<span class=\"string\">\"@+id/template_main_image\"</span></div><div class=\"line\">        <span class=\"attr\">android:layout_width</span>=<span class=\"string\">\"0dp\"</span></div><div class=\"line\">        <span class=\"attr\">android:layout_height</span>=<span class=\"string\">\"0dp\"</span></div><div class=\"line\">        <span class=\"attr\">android:layout_marginTop</span>=<span class=\"string\">\"16dp\"</span></div><div class=\"line\">        <span class=\"attr\">app:content</span>=<span class=\"string\">\"@+id/top_image\"</span></div><div class=\"line\">        <span class=\"attr\">app:layout_constraintDimensionRatio</span>=<span class=\"string\">\"16:9\"</span></div><div class=\"line\">        <span class=\"attr\">app:layout_constraintLeft_toLeftOf</span>=<span class=\"string\">\"parent\"</span></div><div class=\"line\">        <span class=\"attr\">app:layout_constraintRight_toRightOf</span>=<span class=\"string\">\"parent\"</span> /&gt;</span></div><div class=\"line\"> </div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">android.support.constraint.Placeholder</span></div><div class=\"line\">        <span class=\"attr\">android:id</span>=<span class=\"string\">\"@+id/template_save\"</span></div><div class=\"line\">        <span class=\"attr\">android:layout_width</span>=<span class=\"string\">\"48dp\"</span></div><div class=\"line\">        <span class=\"attr\">android:layout_height</span>=<span class=\"string\">\"48dp\"</span></div><div class=\"line\">        <span class=\"attr\">app:content</span>=<span class=\"string\">\"@+id/save\"</span></div><div class=\"line\">        <span class=\"attr\">app:layout_constraintEnd_toStartOf</span>=<span class=\"string\">\"@+id/template_delete\"</span></div><div class=\"line\">        <span class=\"attr\">app:layout_constraintHorizontal_bias</span>=<span class=\"string\">\"0.5\"</span></div><div class=\"line\">        <span class=\"attr\">app:layout_constraintStart_toStartOf</span>=<span class=\"string\">\"parent\"</span></div><div class=\"line\">        <span class=\"attr\">tools:layout_editor_absoluteY</span>=<span class=\"string\">\"460dp\"</span> /&gt;</span></div><div class=\"line\"> </div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">android.support.constraint.Placeholder</span></div><div class=\"line\">        <span class=\"attr\">android:id</span>=<span class=\"string\">\"@+id/template_delete\"</span></div><div class=\"line\">        <span class=\"attr\">android:layout_width</span>=<span class=\"string\">\"48dp\"</span></div><div class=\"line\">        <span class=\"attr\">android:layout_height</span>=<span class=\"string\">\"48dp\"</span></div><div class=\"line\">        <span class=\"attr\">app:content</span>=<span class=\"string\">\"@+id/delete\"</span></div><div class=\"line\">        <span class=\"attr\">app:layout_constraintEnd_toStartOf</span>=<span class=\"string\">\"@+id/template_cancel\"</span></div><div class=\"line\">        <span class=\"attr\">app:layout_constraintHorizontal_bias</span>=<span class=\"string\">\"0.5\"</span></div><div class=\"line\">        <span class=\"attr\">app:layout_constraintStart_toEndOf</span>=<span class=\"string\">\"@+id/template_save\"</span></div><div class=\"line\">        <span class=\"attr\">tools:layout_editor_absoluteY</span>=<span class=\"string\">\"460dp\"</span> /&gt;</span></div><div class=\"line\"> </div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">android.support.constraint.Placeholder</span></div><div class=\"line\">        <span class=\"attr\">android:id</span>=<span class=\"string\">\"@+id/template_cancel\"</span></div><div class=\"line\">        <span class=\"attr\">android:layout_width</span>=<span class=\"string\">\"48dp\"</span></div><div class=\"line\">        <span class=\"attr\">android:layout_height</span>=<span class=\"string\">\"48dp\"</span></div><div class=\"line\">        <span class=\"attr\">app:content</span>=<span class=\"string\">\"@+id/cancel\"</span></div><div class=\"line\">        <span class=\"attr\">app:layout_constraintEnd_toStartOf</span>=<span class=\"string\">\"@+id/template_edit\"</span></div><div class=\"line\">        <span class=\"attr\">app:layout_constraintHorizontal_bias</span>=<span class=\"string\">\"0.5\"</span></div><div class=\"line\">        <span class=\"attr\">app:layout_constraintStart_toEndOf</span>=<span class=\"string\">\"@+id/template_delete\"</span></div><div class=\"line\">        <span class=\"attr\">tools:layout_editor_absoluteY</span>=<span class=\"string\">\"460dp\"</span> /&gt;</span></div><div class=\"line\"> </div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">android.support.constraint.Placeholder</span></div><div class=\"line\">        <span class=\"attr\">android:id</span>=<span class=\"string\">\"@+id/template_edit\"</span></div><div class=\"line\">        <span class=\"attr\">android:layout_width</span>=<span class=\"string\">\"48dp\"</span></div><div class=\"line\">        <span class=\"attr\">android:layout_height</span>=<span class=\"string\">\"48dp\"</span></div><div class=\"line\">        <span class=\"attr\">app:content</span>=<span class=\"string\">\"@+id/edit\"</span></div><div class=\"line\">        <span class=\"attr\">app:layout_constraintEnd_toEndOf</span>=<span class=\"string\">\"parent\"</span></div><div class=\"line\">        <span class=\"attr\">app:layout_constraintHorizontal_bias</span>=<span class=\"string\">\"0.5\"</span></div><div class=\"line\">        <span class=\"attr\">app:layout_constraintStart_toEndOf</span>=<span class=\"string\">\"@+id/template_cancel\"</span></div><div class=\"line\">        <span class=\"attr\">tools:layout_editor_absoluteY</span>=<span class=\"string\">\"460dp\"</span> /&gt;</span></div><div class=\"line\"> </div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">merge</span>&gt;</span></div></pre></td></tr></table></figure></p>\n<p>如果想要在预览界面看起来像是在ConstraintLayout里面的话就加上<code>tools:parentTag=&quot;android.support.constraint.ConstraintLayout&quot;</code><br>预览如下：<br><img src=\"/image/Android/ConstraintLayout/constraint_layout_placeholder_preview.png\" alt=\"constraintLayout placeholder preview\"><br>在上面的布局文件中，每一个Placeholder都添加了<code>app:content</code>属性，表示要用这个属性指定的id对应的控件来替换<code>Placeholder</code>，<br>在其他布局文件中：<br><figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">android.support.constraint.ConstraintLayout</span></div><div class=\"line\">    <span class=\"attr\">android:layout_width</span>=<span class=\"string\">\"match_parent\"</span></div><div class=\"line\">    <span class=\"attr\">android:layout_height</span>=<span class=\"string\">\"match_parent\"</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">include</span> <span class=\"attr\">android:id</span>=<span class=\"string\">\"@+id/root\"</span> <span class=\"attr\">layout</span>=<span class=\"string\">\"@layout/constraint_layout_placeholder\"</span>/&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">ImageButton</span></div><div class=\"line\">        <span class=\"attr\">android:id</span>=<span class=\"string\">\"@+id/main_title_image\"</span></div><div class=\"line\">        <span class=\"attr\">android:src</span>=<span class=\"string\">\"@drawable/main_title_image\"</span></div><div class=\"line\">        <span class=\"attr\">android:layout_width</span>=<span class=\"string\">\"wrap_content\"</span></div><div class=\"line\">        <span class=\"attr\">android:layout_height</span>=<span class=\"string\">\"wrap_content\"</span> /&gt;</span></div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">ImageButton</span></div><div class=\"line\">        <span class=\"attr\">android:id</span>=<span class=\"string\">\"@+id/save\"</span></div><div class=\"line\">        <span class=\"attr\">android:layout_width</span>=<span class=\"string\">\"wrap_content\"</span></div><div class=\"line\">        <span class=\"attr\">android:layout_height</span>=<span class=\"string\">\"wrap_content\"</span></div><div class=\"line\">        <span class=\"attr\">android:layout_marginBottom</span>=<span class=\"string\">\"16dp\"</span></div><div class=\"line\">        <span class=\"attr\">app:layout_constraintBottom_toBottomOf</span>=<span class=\"string\">\"parent\"</span></div><div class=\"line\">        <span class=\"attr\">app:srcCompat</span>=<span class=\"string\">\"@drawable/ic_save_black_24dp\"</span> /&gt;</span></div><div class=\"line\"></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">ImageButton</span></div><div class=\"line\">        <span class=\"attr\">android:id</span>=<span class=\"string\">\"@+id/edit\"</span></div><div class=\"line\">        <span class=\"attr\">android:layout_width</span>=<span class=\"string\">\"wrap_content\"</span></div><div class=\"line\">        <span class=\"attr\">android:layout_height</span>=<span class=\"string\">\"wrap_content\"</span></div><div class=\"line\">        <span class=\"attr\">app:srcCompat</span>=<span class=\"string\">\"@drawable/ic_edit_black_24dp\"</span> /&gt;</span></div><div class=\"line\"></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">ImageButton</span></div><div class=\"line\">        <span class=\"attr\">android:id</span>=<span class=\"string\">\"@+id/cancel\"</span></div><div class=\"line\">        <span class=\"attr\">android:layout_width</span>=<span class=\"string\">\"wrap_content\"</span></div><div class=\"line\">        <span class=\"attr\">android:layout_height</span>=<span class=\"string\">\"wrap_content\"</span></div><div class=\"line\">        <span class=\"attr\">android:layout_marginBottom</span>=<span class=\"string\">\"16dp\"</span></div><div class=\"line\"></div><div class=\"line\">        <span class=\"attr\">app:srcCompat</span>=<span class=\"string\">\"@drawable/ic_cancel_black_24dp\"</span> /&gt;</span></div><div class=\"line\"></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">ImageButton</span></div><div class=\"line\">        <span class=\"attr\">android:id</span>=<span class=\"string\">\"@+id/delete\"</span></div><div class=\"line\">        <span class=\"attr\">android:layout_width</span>=<span class=\"string\">\"wrap_content\"</span></div><div class=\"line\">        <span class=\"attr\">android:layout_height</span>=<span class=\"string\">\"wrap_content\"</span></div><div class=\"line\">        <span class=\"attr\">android:layout_marginBottom</span>=<span class=\"string\">\"16dp\"</span></div><div class=\"line\"></div><div class=\"line\">        <span class=\"attr\">app:srcCompat</span>=<span class=\"string\">\"@drawable/ic_delete_black_24dp\"</span> /&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">android.support.constraint.ConstraintLayout</span>&gt;</span></div></pre></td></tr></table></figure></p>\n<p>首先使用<code>include</code>标签将模板包含进来，然后创建其他需要替换的控件：<br><img src=\"/image/Android/ConstraintLayout/merge_constraint_layout_placeholder_preview.png\" alt=\"merge constraintLayout placeholder preview\"><br>当然也可以在代码中调用<code>Placeholder.setContent(id)</code>动态替换，配合<code>CoordinatorLayout</code>可以做出比较好玩的动画效果：<br><img src=\"/image/Android/ConstraintLayout/constraintLayout_placeholderand_CoordinatorLayout.gif\" alt=\"constraintLayout placeholder + CoordinatorLayout\"><br>代码在这里<br><a href=\"https://github.com/Thumar/Placeholder\">https://github.com/Thumar/Placeholder</a></p>\n<p><code>ConstraintLayout</code> 1.1版本之后的东西常用的差不多就这些了</p>\n<hr>\n<p>以上</p>"},{"title":"JVM-垃圾收集算法与实现","date":"2017-03-30T02:27:05.000Z","keywords":"jvm垃圾收集算法","_content":"　　由于垃圾收集算法的实现涉及大量的程序细节，而且各个平台的虚拟机操作内存的方法又各不相同，这里只是介绍几种算法的思想及其发展过程。\n<!--more-->\n### 垃圾收集算法\n#### 标记-清除算法\n　　最基础的算法是\"标记-清除\"(Mark-Sweep)算法，算法分为'标记'和'清除'两个阶段：首先标记处所有需要回收的对象，在标记后统一回收所有被标记的对象。它的主要不足有两个：一个事效率问题，标记和清除两个过程的效率都不高；另外一个事空间问题，标记清除之后会产生大量不连续的内存碎片，空间碎片太多可能会导致以后再程序运行过程中需要分配较大对象时，无法找到足够的连续内存而不得不提前触发另一次垃圾收集动作。\n#### 1. 复制算法\n　　它将可用内存按容量划分为大小相等的两块，每次只使用其中的一块，当这一块的内存用完了，就将还存活着的对象复制到另外一块上面，然后把已经使用过的内存空间一次清理掉。这样使得每次都是对整个半区进行内存回收，内存分配时也就不用考虑内存碎片等复杂情况。只要移动堆顶指针，按顺序分配内存即可，实现简单，运行高效，只是这种算法的代价是将内存缩小为了原来的一般，代价太高。\n现在的商业虚拟机都采用这种手机算法回收新生代，IBM公司的专门研究表明，新生代中的对象98%是朝生夕死的，所以并不需要按照1:1的比例来划分内存空间，而是将内存分为一块较大的Eden空间和两块较小的Survivor空间，每次使用Eden和其中一块Survivor空间上，最后清理掉Eden和刚才用过的Survivor中还存活着的对象一次性复制到另外一块Survivor空间上，最后清理掉Eden和刚才用过的Survivor空间。\n#### 2. 标记-整理算法\n　　复制收集短发在对象存活率较高时就要进行较多的复制操作，效率将会变低。更关键的是，如果不想浪费一半的空间，就需要额外的控件进行分配担保，以应对被使用的的内存中所有对象都100%存活的极端情况，所以在老年代一半不能直接选用这种算法。\n根据老年代的特点，有人提出了另外一种\"标记-整理\"(Mark-Compact)算法，标记过程任然与\"标记-清除\"算法一样，但后续步骤不是直接对可回收对象进行清理，而是让所有存活的对象都向一端移动，然后直接清理掉端便捷以外的内存。\n#### 3. 分代收集算法\n　　当前商业虚拟机的垃圾收集都采用\"分代收集\"(Generational Collection)算法，这种算法并没有什么新的思想，只是根据对象的存货周期的不同将内存划分为几块，一般是把Java堆分为新生代和老年代，这样就可以根据各个年代的特点采用最适当的收集算法。在新生代中，每次垃圾收集时都发现有大批对象死去，只有少量存活，那就选用复制算法，只需要付出少量存活对象的复制成本就可以完成收集。而老年代中因为对象存活率高、没有额外空间对它进行分配担保，就必须使用\"标记-清理\"或者\"标记-整理\"算法来进行回收。\n### HotSpot算法实现\n#### 枚举根节点\n　　从可达性分析中从GC Roots节点引用链这个操作为例，可作为GC Roots的节点主要在全局性的引用(例如常量或类静态属性)与执行上下文(例如栈帧中的本地变量表)中，现在很多应用仅仅方法区就有数百兆，如果要逐个检查这里面的引用，那么必然会消耗很多时间。\n另外，可达性分析对执行时间的敏感还体现在GC停顿上，因为这项分析工作必须在一个能确保一致性的快照中进行----这里`一致性`的意思是指在这个分析期间整个执行系统看起来就像被冻结在某个时间点上，不可以出现分析过程中对象引用关系还在不断变化的情况，该点不满足的话分析结果准确性就无法得到抱枕。这点是导致GC进行时必须停顿所有Java执行线程(Sun将这件事情称为\"Stop The World\")的其中一个重要原因，即使是在号称几乎不会发生停顿的CMS收集器中，枚举根节点时也是必须要停顿的。\n由于目前的主流java虚拟机使用的都是准确式GC，所以当执行系统停顿下来后，并不需要一个不漏的检查完所有执行上下文和全局引用位置，虚拟机应当是有办法直接得知哪些地方存放着对象引用。在HotSpot的实现中，是使用一组称为OopMap的数据结构来达到这个目的的，在类加载完成的时候，HotSpot就把对象内什么偏移量上是什么类型的数据计算出来，在JIT编译过程中，也会在特定的位置记录下栈和寄存器中哪些位置是引用，这样，GC在扫描时就可以直接得知这些信息了。\n#### 安全点\n　　在OopMap的协助下，HotSpot可以快速且准确地完成GC Roots枚举，但一个很现实的问题随之而来：可能导致引用关系变化，或者说OopMap内容变化的指令非常多，如果为每一条指令都生成对应的OopMap，那将会需要大量的额外空间，这样GC的空间成本将会变得很高。实际上，HotSpot也的确没有为每条指令都生成OopMap，前面已经提到，只是在“特定的位置”记录了这些信息，这些位置称为安全点（Safepoint），即程序执行时并非在所有地方都能停顿下来开始GC，只有在到达安全点时才能暂停。 Safepoint的选定既不能太少以致于让GC等待时间太长，也不能过于频繁以致于过分增大运行时的负荷。 所以，安全点的选定基本上是以程序“是否具有让程序长时间执行的特征”为标准进行选定的——因为每条指令执行的时间都非常短暂，程序不太可能因为指令流长度太长这个原因而过长时间运行，“长时间执行”的最明显特征就是指令序列复用，例如方法调用、循环跳转、 异常跳转等，所以具有这些功能的指令才会产生Safepoint。\n对于Sefepoint，另一个需要考虑的问题是如何在GC发生时让所有线程（这里不包括执行JNI调用的线程）都“跑”到最近的安全点上再停顿下来。 这里有两种方案可供选择：抢先式中断（Preemptive Suspension）和主动式中断（Voluntary Suspension），其中抢先式中断不需要线程的执行代码主动去配合，在GC发生时，首先把所有线程全部中断，如果发现有线程中断的地方不在安全点上，就恢复线程，让它“跑”到安全点上。 现在几乎没有虚拟机实现采用抢先式中断来暂停线程从而响应GC事件。\n而主动式中断的思想是当GC需要中断线程的时候，不直接对线程操作，仅仅简单地设置一个标志，各个线程执行时主动去轮询这个标志，发现中断标志为真时就自己中断挂起。轮询标志的地方和安全点是重合的，另外再加上创建对象需要分配内存的地方。\n#### 安全区域\n　　使用Safepoint似乎已经完美地解决了如何进入GC的问题，但实际情况却并不一定。Safepoint机制保证了程序执行时，在不太长的时间内就会遇到可进入GC的Safepoint。但是，程序“不执行”的时候呢？所谓的程序不执行就是没有分配CPU时间，典型的例子就是线程处于Sleep状态或者Blocked状态，这时候线程无法响应JVM的中断请求，“走”到安全的地方去中断挂起，JVM也显然不太可能等待线程重新被分配CPU时间。 对于这种情况，就需要安全区域（Safe Region）来解决。\n安全区域是指在一段代码片段之中，引用关系不会发生变化。 在这个区域中的任意地方开始GC都是安全的。 我们也可以把Safe Region看做是被扩展了的Safepoint。\n在线程执行到Safe Region中的代码时，首先标识自己已经进入了Safe Region，那样，当在这段时间里JVM要发起GC时，就不用管标识自己为Safe Region状态的线程了。在线程要离开Safe Region时，它要检查系统是否已经完成了根节点枚举（或者是整个GC过程），如果完成了，那线程就继续执行，否则它就必须等待直到收到可以安全离开Safe Region的信号为止。\n----\n以上","source":"_posts/JVM-垃圾收集算法.md","raw":"---\ntitle: JVM-垃圾收集算法与实现\ndate: 2017-03-30 10:27:05\ntags: [JVM]\nkeywords: jvm垃圾收集算法\n---\n　　由于垃圾收集算法的实现涉及大量的程序细节，而且各个平台的虚拟机操作内存的方法又各不相同，这里只是介绍几种算法的思想及其发展过程。\n<!--more-->\n### 垃圾收集算法\n#### 标记-清除算法\n　　最基础的算法是\"标记-清除\"(Mark-Sweep)算法，算法分为'标记'和'清除'两个阶段：首先标记处所有需要回收的对象，在标记后统一回收所有被标记的对象。它的主要不足有两个：一个事效率问题，标记和清除两个过程的效率都不高；另外一个事空间问题，标记清除之后会产生大量不连续的内存碎片，空间碎片太多可能会导致以后再程序运行过程中需要分配较大对象时，无法找到足够的连续内存而不得不提前触发另一次垃圾收集动作。\n#### 1. 复制算法\n　　它将可用内存按容量划分为大小相等的两块，每次只使用其中的一块，当这一块的内存用完了，就将还存活着的对象复制到另外一块上面，然后把已经使用过的内存空间一次清理掉。这样使得每次都是对整个半区进行内存回收，内存分配时也就不用考虑内存碎片等复杂情况。只要移动堆顶指针，按顺序分配内存即可，实现简单，运行高效，只是这种算法的代价是将内存缩小为了原来的一般，代价太高。\n现在的商业虚拟机都采用这种手机算法回收新生代，IBM公司的专门研究表明，新生代中的对象98%是朝生夕死的，所以并不需要按照1:1的比例来划分内存空间，而是将内存分为一块较大的Eden空间和两块较小的Survivor空间，每次使用Eden和其中一块Survivor空间上，最后清理掉Eden和刚才用过的Survivor中还存活着的对象一次性复制到另外一块Survivor空间上，最后清理掉Eden和刚才用过的Survivor空间。\n#### 2. 标记-整理算法\n　　复制收集短发在对象存活率较高时就要进行较多的复制操作，效率将会变低。更关键的是，如果不想浪费一半的空间，就需要额外的控件进行分配担保，以应对被使用的的内存中所有对象都100%存活的极端情况，所以在老年代一半不能直接选用这种算法。\n根据老年代的特点，有人提出了另外一种\"标记-整理\"(Mark-Compact)算法，标记过程任然与\"标记-清除\"算法一样，但后续步骤不是直接对可回收对象进行清理，而是让所有存活的对象都向一端移动，然后直接清理掉端便捷以外的内存。\n#### 3. 分代收集算法\n　　当前商业虚拟机的垃圾收集都采用\"分代收集\"(Generational Collection)算法，这种算法并没有什么新的思想，只是根据对象的存货周期的不同将内存划分为几块，一般是把Java堆分为新生代和老年代，这样就可以根据各个年代的特点采用最适当的收集算法。在新生代中，每次垃圾收集时都发现有大批对象死去，只有少量存活，那就选用复制算法，只需要付出少量存活对象的复制成本就可以完成收集。而老年代中因为对象存活率高、没有额外空间对它进行分配担保，就必须使用\"标记-清理\"或者\"标记-整理\"算法来进行回收。\n### HotSpot算法实现\n#### 枚举根节点\n　　从可达性分析中从GC Roots节点引用链这个操作为例，可作为GC Roots的节点主要在全局性的引用(例如常量或类静态属性)与执行上下文(例如栈帧中的本地变量表)中，现在很多应用仅仅方法区就有数百兆，如果要逐个检查这里面的引用，那么必然会消耗很多时间。\n另外，可达性分析对执行时间的敏感还体现在GC停顿上，因为这项分析工作必须在一个能确保一致性的快照中进行----这里`一致性`的意思是指在这个分析期间整个执行系统看起来就像被冻结在某个时间点上，不可以出现分析过程中对象引用关系还在不断变化的情况，该点不满足的话分析结果准确性就无法得到抱枕。这点是导致GC进行时必须停顿所有Java执行线程(Sun将这件事情称为\"Stop The World\")的其中一个重要原因，即使是在号称几乎不会发生停顿的CMS收集器中，枚举根节点时也是必须要停顿的。\n由于目前的主流java虚拟机使用的都是准确式GC，所以当执行系统停顿下来后，并不需要一个不漏的检查完所有执行上下文和全局引用位置，虚拟机应当是有办法直接得知哪些地方存放着对象引用。在HotSpot的实现中，是使用一组称为OopMap的数据结构来达到这个目的的，在类加载完成的时候，HotSpot就把对象内什么偏移量上是什么类型的数据计算出来，在JIT编译过程中，也会在特定的位置记录下栈和寄存器中哪些位置是引用，这样，GC在扫描时就可以直接得知这些信息了。\n#### 安全点\n　　在OopMap的协助下，HotSpot可以快速且准确地完成GC Roots枚举，但一个很现实的问题随之而来：可能导致引用关系变化，或者说OopMap内容变化的指令非常多，如果为每一条指令都生成对应的OopMap，那将会需要大量的额外空间，这样GC的空间成本将会变得很高。实际上，HotSpot也的确没有为每条指令都生成OopMap，前面已经提到，只是在“特定的位置”记录了这些信息，这些位置称为安全点（Safepoint），即程序执行时并非在所有地方都能停顿下来开始GC，只有在到达安全点时才能暂停。 Safepoint的选定既不能太少以致于让GC等待时间太长，也不能过于频繁以致于过分增大运行时的负荷。 所以，安全点的选定基本上是以程序“是否具有让程序长时间执行的特征”为标准进行选定的——因为每条指令执行的时间都非常短暂，程序不太可能因为指令流长度太长这个原因而过长时间运行，“长时间执行”的最明显特征就是指令序列复用，例如方法调用、循环跳转、 异常跳转等，所以具有这些功能的指令才会产生Safepoint。\n对于Sefepoint，另一个需要考虑的问题是如何在GC发生时让所有线程（这里不包括执行JNI调用的线程）都“跑”到最近的安全点上再停顿下来。 这里有两种方案可供选择：抢先式中断（Preemptive Suspension）和主动式中断（Voluntary Suspension），其中抢先式中断不需要线程的执行代码主动去配合，在GC发生时，首先把所有线程全部中断，如果发现有线程中断的地方不在安全点上，就恢复线程，让它“跑”到安全点上。 现在几乎没有虚拟机实现采用抢先式中断来暂停线程从而响应GC事件。\n而主动式中断的思想是当GC需要中断线程的时候，不直接对线程操作，仅仅简单地设置一个标志，各个线程执行时主动去轮询这个标志，发现中断标志为真时就自己中断挂起。轮询标志的地方和安全点是重合的，另外再加上创建对象需要分配内存的地方。\n#### 安全区域\n　　使用Safepoint似乎已经完美地解决了如何进入GC的问题，但实际情况却并不一定。Safepoint机制保证了程序执行时，在不太长的时间内就会遇到可进入GC的Safepoint。但是，程序“不执行”的时候呢？所谓的程序不执行就是没有分配CPU时间，典型的例子就是线程处于Sleep状态或者Blocked状态，这时候线程无法响应JVM的中断请求，“走”到安全的地方去中断挂起，JVM也显然不太可能等待线程重新被分配CPU时间。 对于这种情况，就需要安全区域（Safe Region）来解决。\n安全区域是指在一段代码片段之中，引用关系不会发生变化。 在这个区域中的任意地方开始GC都是安全的。 我们也可以把Safe Region看做是被扩展了的Safepoint。\n在线程执行到Safe Region中的代码时，首先标识自己已经进入了Safe Region，那样，当在这段时间里JVM要发起GC时，就不用管标识自己为Safe Region状态的线程了。在线程要离开Safe Region时，它要检查系统是否已经完成了根节点枚举（或者是整个GC过程），如果完成了，那线程就继续执行，否则它就必须等待直到收到可以安全离开Safe Region的信号为止。\n----\n以上","slug":"JVM-垃圾收集算法","published":1,"updated":"2018-08-04T05:04:49.330Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjl3vbtqp0011isdg0e4vvrhw","content":"<p>　　由于垃圾收集算法的实现涉及大量的程序细节，而且各个平台的虚拟机操作内存的方法又各不相同，这里只是介绍几种算法的思想及其发展过程。<br><a id=\"more\"></a></p>\n<h3 id=\"垃圾收集算法\"><a href=\"#垃圾收集算法\" class=\"headerlink\" title=\"垃圾收集算法\"></a>垃圾收集算法</h3><h4 id=\"标记-清除算法\"><a href=\"#标记-清除算法\" class=\"headerlink\" title=\"标记-清除算法\"></a>标记-清除算法</h4><p>　　最基础的算法是”标记-清除”(Mark-Sweep)算法，算法分为’标记’和’清除’两个阶段：首先标记处所有需要回收的对象，在标记后统一回收所有被标记的对象。它的主要不足有两个：一个事效率问题，标记和清除两个过程的效率都不高；另外一个事空间问题，标记清除之后会产生大量不连续的内存碎片，空间碎片太多可能会导致以后再程序运行过程中需要分配较大对象时，无法找到足够的连续内存而不得不提前触发另一次垃圾收集动作。</p>\n<h4 id=\"1-复制算法\"><a href=\"#1-复制算法\" class=\"headerlink\" title=\"1. 复制算法\"></a>1. 复制算法</h4><p>　　它将可用内存按容量划分为大小相等的两块，每次只使用其中的一块，当这一块的内存用完了，就将还存活着的对象复制到另外一块上面，然后把已经使用过的内存空间一次清理掉。这样使得每次都是对整个半区进行内存回收，内存分配时也就不用考虑内存碎片等复杂情况。只要移动堆顶指针，按顺序分配内存即可，实现简单，运行高效，只是这种算法的代价是将内存缩小为了原来的一般，代价太高。<br>现在的商业虚拟机都采用这种手机算法回收新生代，IBM公司的专门研究表明，新生代中的对象98%是朝生夕死的，所以并不需要按照1:1的比例来划分内存空间，而是将内存分为一块较大的Eden空间和两块较小的Survivor空间，每次使用Eden和其中一块Survivor空间上，最后清理掉Eden和刚才用过的Survivor中还存活着的对象一次性复制到另外一块Survivor空间上，最后清理掉Eden和刚才用过的Survivor空间。</p>\n<h4 id=\"2-标记-整理算法\"><a href=\"#2-标记-整理算法\" class=\"headerlink\" title=\"2. 标记-整理算法\"></a>2. 标记-整理算法</h4><p>　　复制收集短发在对象存活率较高时就要进行较多的复制操作，效率将会变低。更关键的是，如果不想浪费一半的空间，就需要额外的控件进行分配担保，以应对被使用的的内存中所有对象都100%存活的极端情况，所以在老年代一半不能直接选用这种算法。<br>根据老年代的特点，有人提出了另外一种”标记-整理”(Mark-Compact)算法，标记过程任然与”标记-清除”算法一样，但后续步骤不是直接对可回收对象进行清理，而是让所有存活的对象都向一端移动，然后直接清理掉端便捷以外的内存。</p>\n<h4 id=\"3-分代收集算法\"><a href=\"#3-分代收集算法\" class=\"headerlink\" title=\"3. 分代收集算法\"></a>3. 分代收集算法</h4><p>　　当前商业虚拟机的垃圾收集都采用”分代收集”(Generational Collection)算法，这种算法并没有什么新的思想，只是根据对象的存货周期的不同将内存划分为几块，一般是把Java堆分为新生代和老年代，这样就可以根据各个年代的特点采用最适当的收集算法。在新生代中，每次垃圾收集时都发现有大批对象死去，只有少量存活，那就选用复制算法，只需要付出少量存活对象的复制成本就可以完成收集。而老年代中因为对象存活率高、没有额外空间对它进行分配担保，就必须使用”标记-清理”或者”标记-整理”算法来进行回收。</p>\n<h3 id=\"HotSpot算法实现\"><a href=\"#HotSpot算法实现\" class=\"headerlink\" title=\"HotSpot算法实现\"></a>HotSpot算法实现</h3><h4 id=\"枚举根节点\"><a href=\"#枚举根节点\" class=\"headerlink\" title=\"枚举根节点\"></a>枚举根节点</h4><p>　　从可达性分析中从GC Roots节点引用链这个操作为例，可作为GC Roots的节点主要在全局性的引用(例如常量或类静态属性)与执行上下文(例如栈帧中的本地变量表)中，现在很多应用仅仅方法区就有数百兆，如果要逐个检查这里面的引用，那么必然会消耗很多时间。<br>另外，可达性分析对执行时间的敏感还体现在GC停顿上，因为这项分析工作必须在一个能确保一致性的快照中进行—-这里<code>一致性</code>的意思是指在这个分析期间整个执行系统看起来就像被冻结在某个时间点上，不可以出现分析过程中对象引用关系还在不断变化的情况，该点不满足的话分析结果准确性就无法得到抱枕。这点是导致GC进行时必须停顿所有Java执行线程(Sun将这件事情称为”Stop The World”)的其中一个重要原因，即使是在号称几乎不会发生停顿的CMS收集器中，枚举根节点时也是必须要停顿的。<br>由于目前的主流java虚拟机使用的都是准确式GC，所以当执行系统停顿下来后，并不需要一个不漏的检查完所有执行上下文和全局引用位置，虚拟机应当是有办法直接得知哪些地方存放着对象引用。在HotSpot的实现中，是使用一组称为OopMap的数据结构来达到这个目的的，在类加载完成的时候，HotSpot就把对象内什么偏移量上是什么类型的数据计算出来，在JIT编译过程中，也会在特定的位置记录下栈和寄存器中哪些位置是引用，这样，GC在扫描时就可以直接得知这些信息了。</p>\n<h4 id=\"安全点\"><a href=\"#安全点\" class=\"headerlink\" title=\"安全点\"></a>安全点</h4><p>　　在OopMap的协助下，HotSpot可以快速且准确地完成GC Roots枚举，但一个很现实的问题随之而来：可能导致引用关系变化，或者说OopMap内容变化的指令非常多，如果为每一条指令都生成对应的OopMap，那将会需要大量的额外空间，这样GC的空间成本将会变得很高。实际上，HotSpot也的确没有为每条指令都生成OopMap，前面已经提到，只是在“特定的位置”记录了这些信息，这些位置称为安全点（Safepoint），即程序执行时并非在所有地方都能停顿下来开始GC，只有在到达安全点时才能暂停。 Safepoint的选定既不能太少以致于让GC等待时间太长，也不能过于频繁以致于过分增大运行时的负荷。 所以，安全点的选定基本上是以程序“是否具有让程序长时间执行的特征”为标准进行选定的——因为每条指令执行的时间都非常短暂，程序不太可能因为指令流长度太长这个原因而过长时间运行，“长时间执行”的最明显特征就是指令序列复用，例如方法调用、循环跳转、 异常跳转等，所以具有这些功能的指令才会产生Safepoint。<br>对于Sefepoint，另一个需要考虑的问题是如何在GC发生时让所有线程（这里不包括执行JNI调用的线程）都“跑”到最近的安全点上再停顿下来。 这里有两种方案可供选择：抢先式中断（Preemptive Suspension）和主动式中断（Voluntary Suspension），其中抢先式中断不需要线程的执行代码主动去配合，在GC发生时，首先把所有线程全部中断，如果发现有线程中断的地方不在安全点上，就恢复线程，让它“跑”到安全点上。 现在几乎没有虚拟机实现采用抢先式中断来暂停线程从而响应GC事件。<br>而主动式中断的思想是当GC需要中断线程的时候，不直接对线程操作，仅仅简单地设置一个标志，各个线程执行时主动去轮询这个标志，发现中断标志为真时就自己中断挂起。轮询标志的地方和安全点是重合的，另外再加上创建对象需要分配内存的地方。</p>\n<h4 id=\"安全区域\"><a href=\"#安全区域\" class=\"headerlink\" title=\"安全区域\"></a>安全区域</h4><p>　　使用Safepoint似乎已经完美地解决了如何进入GC的问题，但实际情况却并不一定。Safepoint机制保证了程序执行时，在不太长的时间内就会遇到可进入GC的Safepoint。但是，程序“不执行”的时候呢？所谓的程序不执行就是没有分配CPU时间，典型的例子就是线程处于Sleep状态或者Blocked状态，这时候线程无法响应JVM的中断请求，“走”到安全的地方去中断挂起，JVM也显然不太可能等待线程重新被分配CPU时间。 对于这种情况，就需要安全区域（Safe Region）来解决。<br>安全区域是指在一段代码片段之中，引用关系不会发生变化。 在这个区域中的任意地方开始GC都是安全的。 我们也可以把Safe Region看做是被扩展了的Safepoint。</p>\n<h2 id=\"在线程执行到Safe-Region中的代码时，首先标识自己已经进入了Safe-Region，那样，当在这段时间里JVM要发起GC时，就不用管标识自己为Safe-Region状态的线程了。在线程要离开Safe-Region时，它要检查系统是否已经完成了根节点枚举（或者是整个GC过程），如果完成了，那线程就继续执行，否则它就必须等待直到收到可以安全离开Safe-Region的信号为止。\"><a href=\"#在线程执行到Safe-Region中的代码时，首先标识自己已经进入了Safe-Region，那样，当在这段时间里JVM要发起GC时，就不用管标识自己为Safe-Region状态的线程了。在线程要离开Safe-Region时，它要检查系统是否已经完成了根节点枚举（或者是整个GC过程），如果完成了，那线程就继续执行，否则它就必须等待直到收到可以安全离开Safe-Region的信号为止。\" class=\"headerlink\" title=\"在线程执行到Safe Region中的代码时，首先标识自己已经进入了Safe Region，那样，当在这段时间里JVM要发起GC时，就不用管标识自己为Safe Region状态的线程了。在线程要离开Safe Region时，它要检查系统是否已经完成了根节点枚举（或者是整个GC过程），如果完成了，那线程就继续执行，否则它就必须等待直到收到可以安全离开Safe Region的信号为止。\"></a>在线程执行到Safe Region中的代码时，首先标识自己已经进入了Safe Region，那样，当在这段时间里JVM要发起GC时，就不用管标识自己为Safe Region状态的线程了。在线程要离开Safe Region时，它要检查系统是否已经完成了根节点枚举（或者是整个GC过程），如果完成了，那线程就继续执行，否则它就必须等待直到收到可以安全离开Safe Region的信号为止。</h2><p>以上</p>\n","excerpt":"<p>　　由于垃圾收集算法的实现涉及大量的程序细节，而且各个平台的虚拟机操作内存的方法又各不相同，这里只是介绍几种算法的思想及其发展过程。<br>","more":"</p>\n<h3 id=\"垃圾收集算法\"><a href=\"#垃圾收集算法\" class=\"headerlink\" title=\"垃圾收集算法\"></a>垃圾收集算法</h3><h4 id=\"标记-清除算法\"><a href=\"#标记-清除算法\" class=\"headerlink\" title=\"标记-清除算法\"></a>标记-清除算法</h4><p>　　最基础的算法是”标记-清除”(Mark-Sweep)算法，算法分为’标记’和’清除’两个阶段：首先标记处所有需要回收的对象，在标记后统一回收所有被标记的对象。它的主要不足有两个：一个事效率问题，标记和清除两个过程的效率都不高；另外一个事空间问题，标记清除之后会产生大量不连续的内存碎片，空间碎片太多可能会导致以后再程序运行过程中需要分配较大对象时，无法找到足够的连续内存而不得不提前触发另一次垃圾收集动作。</p>\n<h4 id=\"1-复制算法\"><a href=\"#1-复制算法\" class=\"headerlink\" title=\"1. 复制算法\"></a>1. 复制算法</h4><p>　　它将可用内存按容量划分为大小相等的两块，每次只使用其中的一块，当这一块的内存用完了，就将还存活着的对象复制到另外一块上面，然后把已经使用过的内存空间一次清理掉。这样使得每次都是对整个半区进行内存回收，内存分配时也就不用考虑内存碎片等复杂情况。只要移动堆顶指针，按顺序分配内存即可，实现简单，运行高效，只是这种算法的代价是将内存缩小为了原来的一般，代价太高。<br>现在的商业虚拟机都采用这种手机算法回收新生代，IBM公司的专门研究表明，新生代中的对象98%是朝生夕死的，所以并不需要按照1:1的比例来划分内存空间，而是将内存分为一块较大的Eden空间和两块较小的Survivor空间，每次使用Eden和其中一块Survivor空间上，最后清理掉Eden和刚才用过的Survivor中还存活着的对象一次性复制到另外一块Survivor空间上，最后清理掉Eden和刚才用过的Survivor空间。</p>\n<h4 id=\"2-标记-整理算法\"><a href=\"#2-标记-整理算法\" class=\"headerlink\" title=\"2. 标记-整理算法\"></a>2. 标记-整理算法</h4><p>　　复制收集短发在对象存活率较高时就要进行较多的复制操作，效率将会变低。更关键的是，如果不想浪费一半的空间，就需要额外的控件进行分配担保，以应对被使用的的内存中所有对象都100%存活的极端情况，所以在老年代一半不能直接选用这种算法。<br>根据老年代的特点，有人提出了另外一种”标记-整理”(Mark-Compact)算法，标记过程任然与”标记-清除”算法一样，但后续步骤不是直接对可回收对象进行清理，而是让所有存活的对象都向一端移动，然后直接清理掉端便捷以外的内存。</p>\n<h4 id=\"3-分代收集算法\"><a href=\"#3-分代收集算法\" class=\"headerlink\" title=\"3. 分代收集算法\"></a>3. 分代收集算法</h4><p>　　当前商业虚拟机的垃圾收集都采用”分代收集”(Generational Collection)算法，这种算法并没有什么新的思想，只是根据对象的存货周期的不同将内存划分为几块，一般是把Java堆分为新生代和老年代，这样就可以根据各个年代的特点采用最适当的收集算法。在新生代中，每次垃圾收集时都发现有大批对象死去，只有少量存活，那就选用复制算法，只需要付出少量存活对象的复制成本就可以完成收集。而老年代中因为对象存活率高、没有额外空间对它进行分配担保，就必须使用”标记-清理”或者”标记-整理”算法来进行回收。</p>\n<h3 id=\"HotSpot算法实现\"><a href=\"#HotSpot算法实现\" class=\"headerlink\" title=\"HotSpot算法实现\"></a>HotSpot算法实现</h3><h4 id=\"枚举根节点\"><a href=\"#枚举根节点\" class=\"headerlink\" title=\"枚举根节点\"></a>枚举根节点</h4><p>　　从可达性分析中从GC Roots节点引用链这个操作为例，可作为GC Roots的节点主要在全局性的引用(例如常量或类静态属性)与执行上下文(例如栈帧中的本地变量表)中，现在很多应用仅仅方法区就有数百兆，如果要逐个检查这里面的引用，那么必然会消耗很多时间。<br>另外，可达性分析对执行时间的敏感还体现在GC停顿上，因为这项分析工作必须在一个能确保一致性的快照中进行—-这里<code>一致性</code>的意思是指在这个分析期间整个执行系统看起来就像被冻结在某个时间点上，不可以出现分析过程中对象引用关系还在不断变化的情况，该点不满足的话分析结果准确性就无法得到抱枕。这点是导致GC进行时必须停顿所有Java执行线程(Sun将这件事情称为”Stop The World”)的其中一个重要原因，即使是在号称几乎不会发生停顿的CMS收集器中，枚举根节点时也是必须要停顿的。<br>由于目前的主流java虚拟机使用的都是准确式GC，所以当执行系统停顿下来后，并不需要一个不漏的检查完所有执行上下文和全局引用位置，虚拟机应当是有办法直接得知哪些地方存放着对象引用。在HotSpot的实现中，是使用一组称为OopMap的数据结构来达到这个目的的，在类加载完成的时候，HotSpot就把对象内什么偏移量上是什么类型的数据计算出来，在JIT编译过程中，也会在特定的位置记录下栈和寄存器中哪些位置是引用，这样，GC在扫描时就可以直接得知这些信息了。</p>\n<h4 id=\"安全点\"><a href=\"#安全点\" class=\"headerlink\" title=\"安全点\"></a>安全点</h4><p>　　在OopMap的协助下，HotSpot可以快速且准确地完成GC Roots枚举，但一个很现实的问题随之而来：可能导致引用关系变化，或者说OopMap内容变化的指令非常多，如果为每一条指令都生成对应的OopMap，那将会需要大量的额外空间，这样GC的空间成本将会变得很高。实际上，HotSpot也的确没有为每条指令都生成OopMap，前面已经提到，只是在“特定的位置”记录了这些信息，这些位置称为安全点（Safepoint），即程序执行时并非在所有地方都能停顿下来开始GC，只有在到达安全点时才能暂停。 Safepoint的选定既不能太少以致于让GC等待时间太长，也不能过于频繁以致于过分增大运行时的负荷。 所以，安全点的选定基本上是以程序“是否具有让程序长时间执行的特征”为标准进行选定的——因为每条指令执行的时间都非常短暂，程序不太可能因为指令流长度太长这个原因而过长时间运行，“长时间执行”的最明显特征就是指令序列复用，例如方法调用、循环跳转、 异常跳转等，所以具有这些功能的指令才会产生Safepoint。<br>对于Sefepoint，另一个需要考虑的问题是如何在GC发生时让所有线程（这里不包括执行JNI调用的线程）都“跑”到最近的安全点上再停顿下来。 这里有两种方案可供选择：抢先式中断（Preemptive Suspension）和主动式中断（Voluntary Suspension），其中抢先式中断不需要线程的执行代码主动去配合，在GC发生时，首先把所有线程全部中断，如果发现有线程中断的地方不在安全点上，就恢复线程，让它“跑”到安全点上。 现在几乎没有虚拟机实现采用抢先式中断来暂停线程从而响应GC事件。<br>而主动式中断的思想是当GC需要中断线程的时候，不直接对线程操作，仅仅简单地设置一个标志，各个线程执行时主动去轮询这个标志，发现中断标志为真时就自己中断挂起。轮询标志的地方和安全点是重合的，另外再加上创建对象需要分配内存的地方。</p>\n<h4 id=\"安全区域\"><a href=\"#安全区域\" class=\"headerlink\" title=\"安全区域\"></a>安全区域</h4><p>　　使用Safepoint似乎已经完美地解决了如何进入GC的问题，但实际情况却并不一定。Safepoint机制保证了程序执行时，在不太长的时间内就会遇到可进入GC的Safepoint。但是，程序“不执行”的时候呢？所谓的程序不执行就是没有分配CPU时间，典型的例子就是线程处于Sleep状态或者Blocked状态，这时候线程无法响应JVM的中断请求，“走”到安全的地方去中断挂起，JVM也显然不太可能等待线程重新被分配CPU时间。 对于这种情况，就需要安全区域（Safe Region）来解决。<br>安全区域是指在一段代码片段之中，引用关系不会发生变化。 在这个区域中的任意地方开始GC都是安全的。 我们也可以把Safe Region看做是被扩展了的Safepoint。</p>\n<h2 id=\"在线程执行到Safe-Region中的代码时，首先标识自己已经进入了Safe-Region，那样，当在这段时间里JVM要发起GC时，就不用管标识自己为Safe-Region状态的线程了。在线程要离开Safe-Region时，它要检查系统是否已经完成了根节点枚举（或者是整个GC过程），如果完成了，那线程就继续执行，否则它就必须等待直到收到可以安全离开Safe-Region的信号为止。\"><a href=\"#在线程执行到Safe-Region中的代码时，首先标识自己已经进入了Safe-Region，那样，当在这段时间里JVM要发起GC时，就不用管标识自己为Safe-Region状态的线程了。在线程要离开Safe-Region时，它要检查系统是否已经完成了根节点枚举（或者是整个GC过程），如果完成了，那线程就继续执行，否则它就必须等待直到收到可以安全离开Safe-Region的信号为止。\" class=\"headerlink\" title=\"在线程执行到Safe Region中的代码时，首先标识自己已经进入了Safe Region，那样，当在这段时间里JVM要发起GC时，就不用管标识自己为Safe Region状态的线程了。在线程要离开Safe Region时，它要检查系统是否已经完成了根节点枚举（或者是整个GC过程），如果完成了，那线程就继续执行，否则它就必须等待直到收到可以安全离开Safe Region的信号为止。\"></a>在线程执行到Safe Region中的代码时，首先标识自己已经进入了Safe Region，那样，当在这段时间里JVM要发起GC时，就不用管标识自己为Safe Region状态的线程了。在线程要离开Safe Region时，它要检查系统是否已经完成了根节点枚举（或者是整个GC过程），如果完成了，那线程就继续执行，否则它就必须等待直到收到可以安全离开Safe Region的信号为止。</h2><p>以上</p>"},{"title":"Android的消息机制","date":"2017-03-23T06:00:09.000Z","keywords":"Handler","_content":"　　Android消息机制主要是指Handler的运行机制，Handler的运行需要底层的MessageQueue和Looper的支撑。MessageQueue的中文翻译是消息队列，它的内部存储了一组消息，以队列的形式对外提供插入和删除的工作。虽然叫消息队列，但是它的内部存储结构并不是真正的队列，而是采用单链表的数据结构来存储消息队列。Looper可以理解为消息循环。由于MessageQueue只是一个消息的存储单元，它不能去处理消息，而Looper就填补了这个功能，Looper会以无限循环的形式去查找是否有新消息，如果有的话就处理消息，否则就等待。Looper中还有一个特殊的概念：ThreadLocal，ThreadLocal并不是线程，它的作用是可以在每个线程中存储数据。Handler创建的时候会采用当前线程的Looper来构造消息循环系统，ThreadLocal可以在不同的线程中互不干扰的存储并提供数据，Handler可以通过ThreadLocal轻松获取每个线程的Looper。需要注意的是，线程默认是没有Looper的，如果需要使用Handler就必须为现成创建Looper，我们经常提到的主线程，也叫UI线程，它就是ActivityThread，ActivityThread被创建时就会初始化Looper，这也是在主线程中默认可以使用Handler的原因。\n<!--more-->\n\n### ThreadLocal的工作原理\nThreadLocal是一个线程内部的数据存储类，通过它可以在指定的线程中存储数据，数据存储以后，只能在指定的线程中才可以获取到存储的数据，对于其他线程来说则无法获取到，我们在使用的时候：\n``` java\n final ThreadLocal<Boolean> mBooleanThreadLocal = new ThreadLocal<>();\n        new Thread(\"Thread#1\"){\n            @Override\n            public void run() {\n                mBooleanThreadLocal.set(false);\n                Log.d(\"huangyuan\",\"Thread#1\" + mBooleanThreadLocal.get());\n            }\n        }.start();\n\n        new Thread(\"Thread#2\"){\n\n            @Override\n            public void run() {\n                mBooleanThreadLocal.set(true);\n                Log.d(\"huangyuan\",\"Thread#2\" + mBooleanThreadLocal.get());\n            }\n        }.start();\n```\n　　这样，我们虽然在不同的线程中访问的是同一个ThreadLocal对象，但是他们的值却是不一样的。这是因为不同的线程访问同一个ThreadLocal的get方法，ThreadLocal内部会从各自的线程中取出一个数组，然后再从数组中根据当前ThreadLocal的索引去查找出对应的value值。\nThreadLocal是一个泛型类，定义为`public class ThreadLocal<T>`,首先看ThreadLocal的set方法，如下：\n``` java\n public void set(T value) {\n        Thread t = Thread.currentThread();\n        ThreadLocalMap map = getMap(t);\n        if (map != null)\n            map.set(this, value);\n        else\n            createMap(t, value);\n    }\n```\n　　上面的方法中，首先会通过getMap方法获取ThreadLocalMap（存储线程的ThreadLocal数据），ThreadLocalMap是ThreadLocal类的静态内部类，其内部包含了一个静态内部类Entry，声明如下`static class Entry extends WeakReference<ThreadLocal>`,ThreadLocalMap类中有一个Entry类型的数组`private Entry[] table;`,下面是set方法的具体实现：\n``` java\n  private void set(ThreadLocal key, Object value) {\n\n            // We don't use a fast path as with get() because it is at\n            // least as common to use set() to create new entries as\n            // it is to replace existing ones, in which case, a fast\n            // path would fail more often than not.\n\n            Entry[] tab = table;\n            int len = tab.length;\n            int i = key.threadLocalHashCode & (len-1);\n\n            for (Entry e = tab[i];\n                 e != null;\n                 e = tab[i = nextIndex(i, len)]) {\n                ThreadLocal k = e.get();\n\n                if (k == key) {\n                    e.value = value;\n                    return;\n                }\n\n                if (k == null) {\n                    replaceStaleEntry(key, value, i);\n                    return;\n                }\n            }\n\n            tab[i] = new Entry(key, value);\n            int sz = ++size;\n            if (!cleanSomeSlots(i, sz) && sz >= threshold)\n                rehash();\n        }\n```\nThreadLocal的get方法如下：\n``` java\npublic T get() {\n        Thread t = Thread.currentThread();\n        ThreadLocalMap map = getMap(t);\n        if (map != null) {\n            ThreadLocalMap.Entry e = map.getEntry(this);\n            if (e != null)\n                return (T)e.value;\n        }\n        return setInitialValue();\n    } \n```\n　　从ThreadLocal的set和get方法可以看出，他们所操作的对象都是当前线程的ThreadLocalMap对象的table数组，因此在不同线程中访问同一个ThreadLocal的set和get方法，他们对ThreadLocal所做的读写操作仅限于各自线程的内部，这就是为什么ThreadLocal可以在多个线程中互不干扰的存储和修改数据。\n### 消息队列的工作原理\n　　消息队列在Android中指的是MessageQueue，MessageQueue主要包含两个操作，插入和读取。读取操作本身会伴随着删除操作，插入和读取对应的方法分别为enqueueMessage和next，其中enqueueMessage的作用是往消息队列中插入一跳消息，而next的作用是从消息队列中取出一条消息并将其从消息队列中移除，尽管MessageQueue叫消息队列，但是它的内部实现并不是用的队列，实际上它是通过一个单链表的数据结构来维护消息列表，单链表在插入和删除上比较有优势。下面是enqueueMessage的实现：\n``` java\nboolean enqueueMessage(Message msg, long when) {\n        if (msg.target == null) {\n            throw new IllegalArgumentException(\"Message must have a target.\");\n        }\n        if (msg.isInUse()) {\n            throw new IllegalStateException(msg + \" This message is already in use.\");\n        }\n\n        synchronized (this) {\n            if (mQuitting) {\n                IllegalStateException e = new IllegalStateException(\n                        msg.target + \" sending message to a Handler on a dead thread\");\n                Log.w(TAG, e.getMessage(), e);\n                msg.recycle();\n                return false;\n            }\n\n            msg.markInUse();\n            msg.when = when;\n            Message p = mMessages;\n            boolean needWake;\n            if (p == null || when == 0 || when < p.when) {\n                // New head, wake up the event queue if blocked.\n                msg.next = p;\n                mMessages = msg;\n                needWake = mBlocked;\n            } else {\n                // Inserted within the middle of the queue.  Usually we don't have to wake\n                // up the event queue unless there is a barrier at the head of the queue\n                // and the message is the earliest asynchronous message in the queue.\n                needWake = mBlocked && p.target == null && msg.isAsynchronous();\n                Message prev;\n                for (;;) {\n                    prev = p;\n                    p = p.next;\n                    if (p == null || when < p.when) {\n                        break;\n                    }\n                    if (needWake && p.isAsynchronous()) {\n                        needWake = false;\n                    }\n                }\n                msg.next = p; // invariant: p == prev.next\n                prev.next = msg;\n            }\n\n            // We can assume mPtr != 0 because mQuitting is false.\n            if (needWake) {\n                nativeWake(mPtr);\n            }\n        }\n        return true;\n    }\n```\n从其实现来安，主要操作其实就是单链表的插入操作。\nnext的实现如下：\n``` java\nMessage next() {\n        // Return here if the message loop has already quit and been disposed.\n        // This can happen if the application tries to restart a looper after quit\n        // which is not supported.\n        final long ptr = mPtr;\n        if (ptr == 0) {\n            return null;\n        }\n\n        int pendingIdleHandlerCount = -1; // -1 only during first iteration\n        int nextPollTimeoutMillis = 0;\n        for (;;) {\n            if (nextPollTimeoutMillis != 0) {\n                Binder.flushPendingCommands();\n            }\n\n            nativePollOnce(ptr, nextPollTimeoutMillis);\n\n            synchronized (this) {\n                // Try to retrieve the next message.  Return if found.\n                final long now = SystemClock.uptimeMillis();\n                Message prevMsg = null;\n                Message msg = mMessages;\n                if (msg != null && msg.target == null) {\n                    // Stalled by a barrier.  Find the next asynchronous message in the queue.\n                    do {\n                        prevMsg = msg;\n                        msg = msg.next;\n                    } while (msg != null && !msg.isAsynchronous());\n                }\n                if (msg != null) {\n                    if (now < msg.when) {\n                        // Next message is not ready.  Set a timeout to wake up when it is ready.\n                        nextPollTimeoutMillis = (int) Math.min(msg.when - now, Integer.MAX_VALUE);\n                    } else {\n                        // Got a message.\n                        mBlocked = false;\n                        if (prevMsg != null) {\n                            prevMsg.next = msg.next;\n                        } else {\n                            mMessages = msg.next;\n                        }\n                        msg.next = null;\n                        if (DEBUG) Log.v(TAG, \"Returning message: \" + msg);\n                        msg.markInUse();\n                        return msg;\n                    }\n                } else {\n                    // No more messages.\n                    nextPollTimeoutMillis = -1;\n                }\n\n                // Process the quit message now that all pending messages have been handled.\n                if (mQuitting) {\n                    dispose();\n                    return null;\n                }\n\n                // If first time idle, then get the number of idlers to run.\n                // Idle handles only run if the queue is empty or if the first message\n                // in the queue (possibly a barrier) is due to be handled in the future.\n                if (pendingIdleHandlerCount < 0\n                        && (mMessages == null || now < mMessages.when)) {\n                    pendingIdleHandlerCount = mIdleHandlers.size();\n                }\n                if (pendingIdleHandlerCount <= 0) {\n                    // No idle handlers to run.  Loop and wait some more.\n                    mBlocked = true;\n                    continue;\n                }\n\n                if (mPendingIdleHandlers == null) {\n                    mPendingIdleHandlers = new IdleHandler[Math.max(pendingIdleHandlerCount, 4)];\n                }\n                mPendingIdleHandlers = mIdleHandlers.toArray(mPendingIdleHandlers);\n            }\n\n            // Run the idle handlers.\n            // We only ever reach this code block during the first iteration.\n            for (int i = 0; i < pendingIdleHandlerCount; i++) {\n                final IdleHandler idler = mPendingIdleHandlers[i];\n                mPendingIdleHandlers[i] = null; // release the reference to the handler\n\n                boolean keep = false;\n                try {\n                    keep = idler.queueIdle();\n                } catch (Throwable t) {\n                    Log.wtf(TAG, \"IdleHandler threw exception\", t);\n                }\n\n                if (!keep) {\n                    synchronized (this) {\n                        mIdleHandlers.remove(idler);\n                    }\n                }\n            }\n\n            // Reset the idle handler count to 0 so we do not run them again.\n            pendingIdleHandlerCount = 0;\n\n            // While calling an idle handler, a new message could have been delivered\n            // so go back and look again for a pending message without waiting.\n            nextPollTimeoutMillis = 0;\n        }\n    }\n```\n可以返现next方法是一个无限循环的方法，如果消息队列为空，那么next方法会一直阻塞在这里，当有消息到来时，next方法会返回这条消息并将其从单链表中移除\n### Looper的工作原理\n　　Looper在Android的消息机制中扮演者消息循环的角色，具体来说就是它会不停地从MessageQueue中查看是否有新消息，如果有新消息就会立刻处理，否则就一直阻塞在那里。首先看一下它的构造方法，在构造中它会创建一个MessageQueue也就是消息队列，然后将当前线程的对象保存起来，如下：\n``` java\n  private Looper(boolean quitAllowed) {\n        mQueue = new MessageQueue(quitAllowed);\n        mThread = Thread.currentThread();\n    }\n```\n　　Handler的工作需要Looper，没有Looper的线程就会报错，我们可以通过Looper.prepare()即可为当前线程创建一个Looper，接着通过Looper.loop()来开启消息循环。Looper除了prepare方法外，还提供了prepareMainLoop方法，这个方法主要是给主线程也就是ActivityThread创建Looper使用的，其本质也是通过prepare方法来实现的。由于主线程的Looper比较特殊，所以Looper提供了一个getMainLooper方法，通过它可以在任何地方获取到主线程的Looper。Looper也是可以退出的，Looper提供了quit和quitSafely来退出一个Looper，二者的区别是：quit会直接突出Looper，而quitSafely只是设定一个退出标记，然后把消息队列中的已有消息处理完毕后才安全的退出。Looper退出后，通过Handler发送的消息会失败，这个时候Handler的send方法会返回false。在子线程中，如果手动为其创建了Looper，那么在所有的事情完成以后应该调用quit方法来总之消息循环，否则这个子线程就会一直处于等待的状态，而如果退出Looper以后，这个线程就会立刻终止，因此建议不需要的时候终止Looper。\n Looper最重要的一个方法是loop方法，只有调用了loop后，消息循环系统才会真正的起作用，实现如下：\n ``` java\n  /**\n     * Run the message queue in this thread. Be sure to call\n     * {@link #quit()} to end the loop.\n     */\n    public static void loop() {\n        final Looper me = myLooper();\n        if (me == null) {\n            throw new RuntimeException(\"No Looper; Looper.prepare() wasn't called on this thread.\");\n        }\n        final MessageQueue queue = me.mQueue;\n\n        // Make sure the identity of this thread is that of the local process,\n        // and keep track of what that identity token actually is.\n        Binder.clearCallingIdentity();\n        final long ident = Binder.clearCallingIdentity();\n\n        for (;;) {\n            Message msg = queue.next(); // might block\n            if (msg == null) {\n                // No message indicates that the message queue is quitting.\n                return;\n            }\n\n            // This must be in a local variable, in case a UI event sets the logger\n            final Printer logging = me.mLogging;\n            if (logging != null) {\n                logging.println(\">>>>> Dispatching to \" + msg.target + \" \" +\n                        msg.callback + \": \" + msg.what);\n            }\n\n            final long traceTag = me.mTraceTag;\n            if (traceTag != 0) {\n                Trace.traceBegin(traceTag, msg.target.getTraceName(msg));\n            }\n            try {\n                msg.target.dispatchMessage(msg);\n            } finally {\n                if (traceTag != 0) {\n                    Trace.traceEnd(traceTag);\n                }\n            }\n\n            if (logging != null) {\n                logging.println(\"<<<<< Finished to \" + msg.target + \" \" + msg.callback);\n            }\n\n            // Make sure that during the course of dispatching the\n            // identity of the thread wasn't corrupted.\n            final long newIdent = Binder.clearCallingIdentity();\n            if (ident != newIdent) {\n                Log.wtf(TAG, \"Thread identity changed from 0x\"\n                        + Long.toHexString(ident) + \" to 0x\"\n                        + Long.toHexString(newIdent) + \" while dispatching to \"\n                        + msg.target.getClass().getName() + \" \"\n                        + msg.callback + \" what=\" + msg.what);\n            }\n\n            msg.recycleUnchecked();\n        }\n    }\n ```\n 　　loop方法是一个死循环，唯一跳出循环的方式是MessageQueue的next方法返回了null，当Looper的quit方法被调用时，Looper就会通知消息队列退出，当消息队列被标记为退出状态时，它的next方法就会返回null，也就是说，Looper必须退出，否则loop方法就会无限循环下去，loop方法会调用MessageQueue的next方法来获取新消息，而next方法是一个阻塞操作，当没有消息时，next方法会一直阻塞在那里，这也导致loop方法一直阻塞在那里，如果MessageQueue的next方法返回了新消息，Looper就会处理这条消息，  msg.target.dispatchMessage(msg)，这里的  msg.target是发送这条消息的handler对象，这样Handler发送的消息最终又交个它的  dispatchMessage(msg);方法来处理了，但是这里不同的是，Handler的dispatchMessage方法是在创建Handler时所使用的Looper中执行的，这样就成功的将代码逻辑切换到指定的线程中去执行了。\n ### Handler的工作原理\n Handler的工作主要包含消息的发送和接收过程。消息的发送可以通过post的一系列方法以及send的一系列方法来实现，post的一系列方法最终是通过send的一列方法来实现的。发送一条消息的典型过程如下：\n ``` java\n  public final boolean sendMessage(Message msg)\n    {\n        return sendMessageDelayed(msg, 0);\n    }\n\tpublic final boolean sendMessageDelayed(Message msg, long delayMillis)\n    {\n        if (delayMillis < 0) {\n            delayMillis = 0;\n        }\n        return sendMessageAtTime(msg, SystemClock.uptimeMillis() + delayMillis);\n    }\n\tpublic boolean sendMessageAtTime(Message msg, long uptimeMillis) {\n        MessageQueue queue = mQueue;\n        if (queue == null) {\n            RuntimeException e = new RuntimeException(\n                    this + \" sendMessageAtTime() called with no mQueue\");\n            Log.w(\"Looper\", e.getMessage(), e);\n            return false;\n        }\n        return enqueueMessage(queue, msg, uptimeMillis);\n    }\n\tprivate boolean enqueueMessage(MessageQueue queue, Message msg, long uptimeMillis) {\n        msg.target = this;\n        if (mAsynchronous) {\n            msg.setAsynchronous(true);\n        }\n        return queue.enqueueMessage(msg, uptimeMillis);\n    }\n ```\n 　　可以发现，Handler发送消息的过程仅仅是向消息队列中插入了一条消息，MessageQueue的next方法就会返回这条消息给Looper，Looper收到消息后就开始处理了，最终消息由Looper交由Handler处理，即Handler的dispatchMessage方法会被调用，这时Handler就是进入了处理消息的阶段。dispatchMessage的实现如下：\n ``` java\n    public void dispatchMessage(Message msg) {\n        if (msg.callback != null) {\n            handleCallback(msg);\n        } else {\n            if (mCallback != null) {\n                if (mCallback.handleMessage(msg)) {\n                    return;\n                }\n            }\n            handleMessage(msg);\n        }\n    }\n ```\n Handler处理消息的过程如下：\n 1. 检查Message的callback是否为null，不为null就通过handleCallback来处理消息，Message的callback是一个Runnable对象，实际上就是Handler的post方法所传递的Runnable参数。handleCallback的逻辑如下：\n ``` java\n private static void handleCallback(Message message) {\n        message.callback.run();\n    }\n ```\n 2. 其次，检查mCallback是否为null，不为null就调用没CallBack的HandlerMessage方法来处理消息，Callback是个接口，它的定义如下：\n \n ``` java\n\t/**\n     * Callback interface you can use when instantiating a Handler to avoid\n     * having to implement your own subclass of Handler.\n     *\n     * @param msg A {@link android.os.Message Message} object\n     * @return True if no further handling is desired\n     */\n    public interface Callback {\n        public boolean handleMessage(Message msg);\n    }\n``` \n通过Callback可以采用如下方式来创建Handler对象：Handler handler = new Handler(callback)。\n\n3. 最后，调用Handler的handleMessahe方法来处理消息。\n***\n以上","source":"_posts/Android的消息机制.md","raw":"---\ntitle: Android的消息机制\ndate: 2017-03-23 14:00:09\ntags: [Android]\nkeywords: Handler\n---\n　　Android消息机制主要是指Handler的运行机制，Handler的运行需要底层的MessageQueue和Looper的支撑。MessageQueue的中文翻译是消息队列，它的内部存储了一组消息，以队列的形式对外提供插入和删除的工作。虽然叫消息队列，但是它的内部存储结构并不是真正的队列，而是采用单链表的数据结构来存储消息队列。Looper可以理解为消息循环。由于MessageQueue只是一个消息的存储单元，它不能去处理消息，而Looper就填补了这个功能，Looper会以无限循环的形式去查找是否有新消息，如果有的话就处理消息，否则就等待。Looper中还有一个特殊的概念：ThreadLocal，ThreadLocal并不是线程，它的作用是可以在每个线程中存储数据。Handler创建的时候会采用当前线程的Looper来构造消息循环系统，ThreadLocal可以在不同的线程中互不干扰的存储并提供数据，Handler可以通过ThreadLocal轻松获取每个线程的Looper。需要注意的是，线程默认是没有Looper的，如果需要使用Handler就必须为现成创建Looper，我们经常提到的主线程，也叫UI线程，它就是ActivityThread，ActivityThread被创建时就会初始化Looper，这也是在主线程中默认可以使用Handler的原因。\n<!--more-->\n\n### ThreadLocal的工作原理\nThreadLocal是一个线程内部的数据存储类，通过它可以在指定的线程中存储数据，数据存储以后，只能在指定的线程中才可以获取到存储的数据，对于其他线程来说则无法获取到，我们在使用的时候：\n``` java\n final ThreadLocal<Boolean> mBooleanThreadLocal = new ThreadLocal<>();\n        new Thread(\"Thread#1\"){\n            @Override\n            public void run() {\n                mBooleanThreadLocal.set(false);\n                Log.d(\"huangyuan\",\"Thread#1\" + mBooleanThreadLocal.get());\n            }\n        }.start();\n\n        new Thread(\"Thread#2\"){\n\n            @Override\n            public void run() {\n                mBooleanThreadLocal.set(true);\n                Log.d(\"huangyuan\",\"Thread#2\" + mBooleanThreadLocal.get());\n            }\n        }.start();\n```\n　　这样，我们虽然在不同的线程中访问的是同一个ThreadLocal对象，但是他们的值却是不一样的。这是因为不同的线程访问同一个ThreadLocal的get方法，ThreadLocal内部会从各自的线程中取出一个数组，然后再从数组中根据当前ThreadLocal的索引去查找出对应的value值。\nThreadLocal是一个泛型类，定义为`public class ThreadLocal<T>`,首先看ThreadLocal的set方法，如下：\n``` java\n public void set(T value) {\n        Thread t = Thread.currentThread();\n        ThreadLocalMap map = getMap(t);\n        if (map != null)\n            map.set(this, value);\n        else\n            createMap(t, value);\n    }\n```\n　　上面的方法中，首先会通过getMap方法获取ThreadLocalMap（存储线程的ThreadLocal数据），ThreadLocalMap是ThreadLocal类的静态内部类，其内部包含了一个静态内部类Entry，声明如下`static class Entry extends WeakReference<ThreadLocal>`,ThreadLocalMap类中有一个Entry类型的数组`private Entry[] table;`,下面是set方法的具体实现：\n``` java\n  private void set(ThreadLocal key, Object value) {\n\n            // We don't use a fast path as with get() because it is at\n            // least as common to use set() to create new entries as\n            // it is to replace existing ones, in which case, a fast\n            // path would fail more often than not.\n\n            Entry[] tab = table;\n            int len = tab.length;\n            int i = key.threadLocalHashCode & (len-1);\n\n            for (Entry e = tab[i];\n                 e != null;\n                 e = tab[i = nextIndex(i, len)]) {\n                ThreadLocal k = e.get();\n\n                if (k == key) {\n                    e.value = value;\n                    return;\n                }\n\n                if (k == null) {\n                    replaceStaleEntry(key, value, i);\n                    return;\n                }\n            }\n\n            tab[i] = new Entry(key, value);\n            int sz = ++size;\n            if (!cleanSomeSlots(i, sz) && sz >= threshold)\n                rehash();\n        }\n```\nThreadLocal的get方法如下：\n``` java\npublic T get() {\n        Thread t = Thread.currentThread();\n        ThreadLocalMap map = getMap(t);\n        if (map != null) {\n            ThreadLocalMap.Entry e = map.getEntry(this);\n            if (e != null)\n                return (T)e.value;\n        }\n        return setInitialValue();\n    } \n```\n　　从ThreadLocal的set和get方法可以看出，他们所操作的对象都是当前线程的ThreadLocalMap对象的table数组，因此在不同线程中访问同一个ThreadLocal的set和get方法，他们对ThreadLocal所做的读写操作仅限于各自线程的内部，这就是为什么ThreadLocal可以在多个线程中互不干扰的存储和修改数据。\n### 消息队列的工作原理\n　　消息队列在Android中指的是MessageQueue，MessageQueue主要包含两个操作，插入和读取。读取操作本身会伴随着删除操作，插入和读取对应的方法分别为enqueueMessage和next，其中enqueueMessage的作用是往消息队列中插入一跳消息，而next的作用是从消息队列中取出一条消息并将其从消息队列中移除，尽管MessageQueue叫消息队列，但是它的内部实现并不是用的队列，实际上它是通过一个单链表的数据结构来维护消息列表，单链表在插入和删除上比较有优势。下面是enqueueMessage的实现：\n``` java\nboolean enqueueMessage(Message msg, long when) {\n        if (msg.target == null) {\n            throw new IllegalArgumentException(\"Message must have a target.\");\n        }\n        if (msg.isInUse()) {\n            throw new IllegalStateException(msg + \" This message is already in use.\");\n        }\n\n        synchronized (this) {\n            if (mQuitting) {\n                IllegalStateException e = new IllegalStateException(\n                        msg.target + \" sending message to a Handler on a dead thread\");\n                Log.w(TAG, e.getMessage(), e);\n                msg.recycle();\n                return false;\n            }\n\n            msg.markInUse();\n            msg.when = when;\n            Message p = mMessages;\n            boolean needWake;\n            if (p == null || when == 0 || when < p.when) {\n                // New head, wake up the event queue if blocked.\n                msg.next = p;\n                mMessages = msg;\n                needWake = mBlocked;\n            } else {\n                // Inserted within the middle of the queue.  Usually we don't have to wake\n                // up the event queue unless there is a barrier at the head of the queue\n                // and the message is the earliest asynchronous message in the queue.\n                needWake = mBlocked && p.target == null && msg.isAsynchronous();\n                Message prev;\n                for (;;) {\n                    prev = p;\n                    p = p.next;\n                    if (p == null || when < p.when) {\n                        break;\n                    }\n                    if (needWake && p.isAsynchronous()) {\n                        needWake = false;\n                    }\n                }\n                msg.next = p; // invariant: p == prev.next\n                prev.next = msg;\n            }\n\n            // We can assume mPtr != 0 because mQuitting is false.\n            if (needWake) {\n                nativeWake(mPtr);\n            }\n        }\n        return true;\n    }\n```\n从其实现来安，主要操作其实就是单链表的插入操作。\nnext的实现如下：\n``` java\nMessage next() {\n        // Return here if the message loop has already quit and been disposed.\n        // This can happen if the application tries to restart a looper after quit\n        // which is not supported.\n        final long ptr = mPtr;\n        if (ptr == 0) {\n            return null;\n        }\n\n        int pendingIdleHandlerCount = -1; // -1 only during first iteration\n        int nextPollTimeoutMillis = 0;\n        for (;;) {\n            if (nextPollTimeoutMillis != 0) {\n                Binder.flushPendingCommands();\n            }\n\n            nativePollOnce(ptr, nextPollTimeoutMillis);\n\n            synchronized (this) {\n                // Try to retrieve the next message.  Return if found.\n                final long now = SystemClock.uptimeMillis();\n                Message prevMsg = null;\n                Message msg = mMessages;\n                if (msg != null && msg.target == null) {\n                    // Stalled by a barrier.  Find the next asynchronous message in the queue.\n                    do {\n                        prevMsg = msg;\n                        msg = msg.next;\n                    } while (msg != null && !msg.isAsynchronous());\n                }\n                if (msg != null) {\n                    if (now < msg.when) {\n                        // Next message is not ready.  Set a timeout to wake up when it is ready.\n                        nextPollTimeoutMillis = (int) Math.min(msg.when - now, Integer.MAX_VALUE);\n                    } else {\n                        // Got a message.\n                        mBlocked = false;\n                        if (prevMsg != null) {\n                            prevMsg.next = msg.next;\n                        } else {\n                            mMessages = msg.next;\n                        }\n                        msg.next = null;\n                        if (DEBUG) Log.v(TAG, \"Returning message: \" + msg);\n                        msg.markInUse();\n                        return msg;\n                    }\n                } else {\n                    // No more messages.\n                    nextPollTimeoutMillis = -1;\n                }\n\n                // Process the quit message now that all pending messages have been handled.\n                if (mQuitting) {\n                    dispose();\n                    return null;\n                }\n\n                // If first time idle, then get the number of idlers to run.\n                // Idle handles only run if the queue is empty or if the first message\n                // in the queue (possibly a barrier) is due to be handled in the future.\n                if (pendingIdleHandlerCount < 0\n                        && (mMessages == null || now < mMessages.when)) {\n                    pendingIdleHandlerCount = mIdleHandlers.size();\n                }\n                if (pendingIdleHandlerCount <= 0) {\n                    // No idle handlers to run.  Loop and wait some more.\n                    mBlocked = true;\n                    continue;\n                }\n\n                if (mPendingIdleHandlers == null) {\n                    mPendingIdleHandlers = new IdleHandler[Math.max(pendingIdleHandlerCount, 4)];\n                }\n                mPendingIdleHandlers = mIdleHandlers.toArray(mPendingIdleHandlers);\n            }\n\n            // Run the idle handlers.\n            // We only ever reach this code block during the first iteration.\n            for (int i = 0; i < pendingIdleHandlerCount; i++) {\n                final IdleHandler idler = mPendingIdleHandlers[i];\n                mPendingIdleHandlers[i] = null; // release the reference to the handler\n\n                boolean keep = false;\n                try {\n                    keep = idler.queueIdle();\n                } catch (Throwable t) {\n                    Log.wtf(TAG, \"IdleHandler threw exception\", t);\n                }\n\n                if (!keep) {\n                    synchronized (this) {\n                        mIdleHandlers.remove(idler);\n                    }\n                }\n            }\n\n            // Reset the idle handler count to 0 so we do not run them again.\n            pendingIdleHandlerCount = 0;\n\n            // While calling an idle handler, a new message could have been delivered\n            // so go back and look again for a pending message without waiting.\n            nextPollTimeoutMillis = 0;\n        }\n    }\n```\n可以返现next方法是一个无限循环的方法，如果消息队列为空，那么next方法会一直阻塞在这里，当有消息到来时，next方法会返回这条消息并将其从单链表中移除\n### Looper的工作原理\n　　Looper在Android的消息机制中扮演者消息循环的角色，具体来说就是它会不停地从MessageQueue中查看是否有新消息，如果有新消息就会立刻处理，否则就一直阻塞在那里。首先看一下它的构造方法，在构造中它会创建一个MessageQueue也就是消息队列，然后将当前线程的对象保存起来，如下：\n``` java\n  private Looper(boolean quitAllowed) {\n        mQueue = new MessageQueue(quitAllowed);\n        mThread = Thread.currentThread();\n    }\n```\n　　Handler的工作需要Looper，没有Looper的线程就会报错，我们可以通过Looper.prepare()即可为当前线程创建一个Looper，接着通过Looper.loop()来开启消息循环。Looper除了prepare方法外，还提供了prepareMainLoop方法，这个方法主要是给主线程也就是ActivityThread创建Looper使用的，其本质也是通过prepare方法来实现的。由于主线程的Looper比较特殊，所以Looper提供了一个getMainLooper方法，通过它可以在任何地方获取到主线程的Looper。Looper也是可以退出的，Looper提供了quit和quitSafely来退出一个Looper，二者的区别是：quit会直接突出Looper，而quitSafely只是设定一个退出标记，然后把消息队列中的已有消息处理完毕后才安全的退出。Looper退出后，通过Handler发送的消息会失败，这个时候Handler的send方法会返回false。在子线程中，如果手动为其创建了Looper，那么在所有的事情完成以后应该调用quit方法来总之消息循环，否则这个子线程就会一直处于等待的状态，而如果退出Looper以后，这个线程就会立刻终止，因此建议不需要的时候终止Looper。\n Looper最重要的一个方法是loop方法，只有调用了loop后，消息循环系统才会真正的起作用，实现如下：\n ``` java\n  /**\n     * Run the message queue in this thread. Be sure to call\n     * {@link #quit()} to end the loop.\n     */\n    public static void loop() {\n        final Looper me = myLooper();\n        if (me == null) {\n            throw new RuntimeException(\"No Looper; Looper.prepare() wasn't called on this thread.\");\n        }\n        final MessageQueue queue = me.mQueue;\n\n        // Make sure the identity of this thread is that of the local process,\n        // and keep track of what that identity token actually is.\n        Binder.clearCallingIdentity();\n        final long ident = Binder.clearCallingIdentity();\n\n        for (;;) {\n            Message msg = queue.next(); // might block\n            if (msg == null) {\n                // No message indicates that the message queue is quitting.\n                return;\n            }\n\n            // This must be in a local variable, in case a UI event sets the logger\n            final Printer logging = me.mLogging;\n            if (logging != null) {\n                logging.println(\">>>>> Dispatching to \" + msg.target + \" \" +\n                        msg.callback + \": \" + msg.what);\n            }\n\n            final long traceTag = me.mTraceTag;\n            if (traceTag != 0) {\n                Trace.traceBegin(traceTag, msg.target.getTraceName(msg));\n            }\n            try {\n                msg.target.dispatchMessage(msg);\n            } finally {\n                if (traceTag != 0) {\n                    Trace.traceEnd(traceTag);\n                }\n            }\n\n            if (logging != null) {\n                logging.println(\"<<<<< Finished to \" + msg.target + \" \" + msg.callback);\n            }\n\n            // Make sure that during the course of dispatching the\n            // identity of the thread wasn't corrupted.\n            final long newIdent = Binder.clearCallingIdentity();\n            if (ident != newIdent) {\n                Log.wtf(TAG, \"Thread identity changed from 0x\"\n                        + Long.toHexString(ident) + \" to 0x\"\n                        + Long.toHexString(newIdent) + \" while dispatching to \"\n                        + msg.target.getClass().getName() + \" \"\n                        + msg.callback + \" what=\" + msg.what);\n            }\n\n            msg.recycleUnchecked();\n        }\n    }\n ```\n 　　loop方法是一个死循环，唯一跳出循环的方式是MessageQueue的next方法返回了null，当Looper的quit方法被调用时，Looper就会通知消息队列退出，当消息队列被标记为退出状态时，它的next方法就会返回null，也就是说，Looper必须退出，否则loop方法就会无限循环下去，loop方法会调用MessageQueue的next方法来获取新消息，而next方法是一个阻塞操作，当没有消息时，next方法会一直阻塞在那里，这也导致loop方法一直阻塞在那里，如果MessageQueue的next方法返回了新消息，Looper就会处理这条消息，  msg.target.dispatchMessage(msg)，这里的  msg.target是发送这条消息的handler对象，这样Handler发送的消息最终又交个它的  dispatchMessage(msg);方法来处理了，但是这里不同的是，Handler的dispatchMessage方法是在创建Handler时所使用的Looper中执行的，这样就成功的将代码逻辑切换到指定的线程中去执行了。\n ### Handler的工作原理\n Handler的工作主要包含消息的发送和接收过程。消息的发送可以通过post的一系列方法以及send的一系列方法来实现，post的一系列方法最终是通过send的一列方法来实现的。发送一条消息的典型过程如下：\n ``` java\n  public final boolean sendMessage(Message msg)\n    {\n        return sendMessageDelayed(msg, 0);\n    }\n\tpublic final boolean sendMessageDelayed(Message msg, long delayMillis)\n    {\n        if (delayMillis < 0) {\n            delayMillis = 0;\n        }\n        return sendMessageAtTime(msg, SystemClock.uptimeMillis() + delayMillis);\n    }\n\tpublic boolean sendMessageAtTime(Message msg, long uptimeMillis) {\n        MessageQueue queue = mQueue;\n        if (queue == null) {\n            RuntimeException e = new RuntimeException(\n                    this + \" sendMessageAtTime() called with no mQueue\");\n            Log.w(\"Looper\", e.getMessage(), e);\n            return false;\n        }\n        return enqueueMessage(queue, msg, uptimeMillis);\n    }\n\tprivate boolean enqueueMessage(MessageQueue queue, Message msg, long uptimeMillis) {\n        msg.target = this;\n        if (mAsynchronous) {\n            msg.setAsynchronous(true);\n        }\n        return queue.enqueueMessage(msg, uptimeMillis);\n    }\n ```\n 　　可以发现，Handler发送消息的过程仅仅是向消息队列中插入了一条消息，MessageQueue的next方法就会返回这条消息给Looper，Looper收到消息后就开始处理了，最终消息由Looper交由Handler处理，即Handler的dispatchMessage方法会被调用，这时Handler就是进入了处理消息的阶段。dispatchMessage的实现如下：\n ``` java\n    public void dispatchMessage(Message msg) {\n        if (msg.callback != null) {\n            handleCallback(msg);\n        } else {\n            if (mCallback != null) {\n                if (mCallback.handleMessage(msg)) {\n                    return;\n                }\n            }\n            handleMessage(msg);\n        }\n    }\n ```\n Handler处理消息的过程如下：\n 1. 检查Message的callback是否为null，不为null就通过handleCallback来处理消息，Message的callback是一个Runnable对象，实际上就是Handler的post方法所传递的Runnable参数。handleCallback的逻辑如下：\n ``` java\n private static void handleCallback(Message message) {\n        message.callback.run();\n    }\n ```\n 2. 其次，检查mCallback是否为null，不为null就调用没CallBack的HandlerMessage方法来处理消息，Callback是个接口，它的定义如下：\n \n ``` java\n\t/**\n     * Callback interface you can use when instantiating a Handler to avoid\n     * having to implement your own subclass of Handler.\n     *\n     * @param msg A {@link android.os.Message Message} object\n     * @return True if no further handling is desired\n     */\n    public interface Callback {\n        public boolean handleMessage(Message msg);\n    }\n``` \n通过Callback可以采用如下方式来创建Handler对象：Handler handler = new Handler(callback)。\n\n3. 最后，调用Handler的handleMessahe方法来处理消息。\n***\n以上","slug":"Android的消息机制","published":1,"updated":"2018-08-04T04:50:06.309Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjl3vbtqq0013isdgibc0rs4h","content":"<p>　　Android消息机制主要是指Handler的运行机制，Handler的运行需要底层的MessageQueue和Looper的支撑。MessageQueue的中文翻译是消息队列，它的内部存储了一组消息，以队列的形式对外提供插入和删除的工作。虽然叫消息队列，但是它的内部存储结构并不是真正的队列，而是采用单链表的数据结构来存储消息队列。Looper可以理解为消息循环。由于MessageQueue只是一个消息的存储单元，它不能去处理消息，而Looper就填补了这个功能，Looper会以无限循环的形式去查找是否有新消息，如果有的话就处理消息，否则就等待。Looper中还有一个特殊的概念：ThreadLocal，ThreadLocal并不是线程，它的作用是可以在每个线程中存储数据。Handler创建的时候会采用当前线程的Looper来构造消息循环系统，ThreadLocal可以在不同的线程中互不干扰的存储并提供数据，Handler可以通过ThreadLocal轻松获取每个线程的Looper。需要注意的是，线程默认是没有Looper的，如果需要使用Handler就必须为现成创建Looper，我们经常提到的主线程，也叫UI线程，它就是ActivityThread，ActivityThread被创建时就会初始化Looper，这也是在主线程中默认可以使用Handler的原因。<br><a id=\"more\"></a></p>\n<h3 id=\"ThreadLocal的工作原理\"><a href=\"#ThreadLocal的工作原理\" class=\"headerlink\" title=\"ThreadLocal的工作原理\"></a>ThreadLocal的工作原理</h3><p>ThreadLocal是一个线程内部的数据存储类，通过它可以在指定的线程中存储数据，数据存储以后，只能在指定的线程中才可以获取到存储的数据，对于其他线程来说则无法获取到，我们在使用的时候：<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">final</span> ThreadLocal&lt;Boolean&gt; mBooleanThreadLocal = <span class=\"keyword\">new</span> ThreadLocal&lt;&gt;();</div><div class=\"line\">       <span class=\"keyword\">new</span> Thread(<span class=\"string\">\"Thread#1\"</span>)&#123;</div><div class=\"line\">           <span class=\"meta\">@Override</span></div><div class=\"line\">           <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">run</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">               mBooleanThreadLocal.set(<span class=\"keyword\">false</span>);</div><div class=\"line\">               Log.d(<span class=\"string\">\"huangyuan\"</span>,<span class=\"string\">\"Thread#1\"</span> + mBooleanThreadLocal.get());</div><div class=\"line\">           &#125;</div><div class=\"line\">       &#125;.start();</div><div class=\"line\"></div><div class=\"line\">       <span class=\"keyword\">new</span> Thread(<span class=\"string\">\"Thread#2\"</span>)&#123;</div><div class=\"line\"></div><div class=\"line\">           <span class=\"meta\">@Override</span></div><div class=\"line\">           <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">run</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">               mBooleanThreadLocal.set(<span class=\"keyword\">true</span>);</div><div class=\"line\">               Log.d(<span class=\"string\">\"huangyuan\"</span>,<span class=\"string\">\"Thread#2\"</span> + mBooleanThreadLocal.get());</div><div class=\"line\">           &#125;</div><div class=\"line\">       &#125;.start();</div></pre></td></tr></table></figure></p>\n<p>　　这样，我们虽然在不同的线程中访问的是同一个ThreadLocal对象，但是他们的值却是不一样的。这是因为不同的线程访问同一个ThreadLocal的get方法，ThreadLocal内部会从各自的线程中取出一个数组，然后再从数组中根据当前ThreadLocal的索引去查找出对应的value值。<br>ThreadLocal是一个泛型类，定义为<code>public class ThreadLocal&lt;T&gt;</code>,首先看ThreadLocal的set方法，如下：<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">set</span><span class=\"params\">(T value)</span> </span>&#123;</div><div class=\"line\">       Thread t = Thread.currentThread();</div><div class=\"line\">       ThreadLocalMap map = getMap(t);</div><div class=\"line\">       <span class=\"keyword\">if</span> (map != <span class=\"keyword\">null</span>)</div><div class=\"line\">           map.set(<span class=\"keyword\">this</span>, value);</div><div class=\"line\">       <span class=\"keyword\">else</span></div><div class=\"line\">           createMap(t, value);</div><div class=\"line\">   &#125;</div></pre></td></tr></table></figure></p>\n<p>　　上面的方法中，首先会通过getMap方法获取ThreadLocalMap（存储线程的ThreadLocal数据），ThreadLocalMap是ThreadLocal类的静态内部类，其内部包含了一个静态内部类Entry，声明如下<code>static class Entry extends WeakReference&lt;ThreadLocal&gt;</code>,ThreadLocalMap类中有一个Entry类型的数组<code>private Entry[] table;</code>,下面是set方法的具体实现：<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">set</span><span class=\"params\">(ThreadLocal key, Object value)</span> </span>&#123;</div><div class=\"line\"></div><div class=\"line\">          <span class=\"comment\">// We don't use a fast path as with get() because it is at</span></div><div class=\"line\">          <span class=\"comment\">// least as common to use set() to create new entries as</span></div><div class=\"line\">          <span class=\"comment\">// it is to replace existing ones, in which case, a fast</span></div><div class=\"line\">          <span class=\"comment\">// path would fail more often than not.</span></div><div class=\"line\"></div><div class=\"line\">          Entry[] tab = table;</div><div class=\"line\">          <span class=\"keyword\">int</span> len = tab.length;</div><div class=\"line\">          <span class=\"keyword\">int</span> i = key.threadLocalHashCode &amp; (len-<span class=\"number\">1</span>);</div><div class=\"line\"></div><div class=\"line\">          <span class=\"keyword\">for</span> (Entry e = tab[i];</div><div class=\"line\">               e != <span class=\"keyword\">null</span>;</div><div class=\"line\">               e = tab[i = nextIndex(i, len)]) &#123;</div><div class=\"line\">              ThreadLocal k = e.get();</div><div class=\"line\"></div><div class=\"line\">              <span class=\"keyword\">if</span> (k == key) &#123;</div><div class=\"line\">                  e.value = value;</div><div class=\"line\">                  <span class=\"keyword\">return</span>;</div><div class=\"line\">              &#125;</div><div class=\"line\"></div><div class=\"line\">              <span class=\"keyword\">if</span> (k == <span class=\"keyword\">null</span>) &#123;</div><div class=\"line\">                  replaceStaleEntry(key, value, i);</div><div class=\"line\">                  <span class=\"keyword\">return</span>;</div><div class=\"line\">              &#125;</div><div class=\"line\">          &#125;</div><div class=\"line\"></div><div class=\"line\">          tab[i] = <span class=\"keyword\">new</span> Entry(key, value);</div><div class=\"line\">          <span class=\"keyword\">int</span> sz = ++size;</div><div class=\"line\">          <span class=\"keyword\">if</span> (!cleanSomeSlots(i, sz) &amp;&amp; sz &gt;= threshold)</div><div class=\"line\">              rehash();</div><div class=\"line\">      &#125;</div></pre></td></tr></table></figure></p>\n<p>ThreadLocal的get方法如下：<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> T <span class=\"title\">get</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">        Thread t = Thread.currentThread();</div><div class=\"line\">        ThreadLocalMap map = getMap(t);</div><div class=\"line\">        <span class=\"keyword\">if</span> (map != <span class=\"keyword\">null</span>) &#123;</div><div class=\"line\">            ThreadLocalMap.Entry e = map.getEntry(<span class=\"keyword\">this</span>);</div><div class=\"line\">            <span class=\"keyword\">if</span> (e != <span class=\"keyword\">null</span>)</div><div class=\"line\">                <span class=\"keyword\">return</span> (T)e.value;</div><div class=\"line\">        &#125;</div><div class=\"line\">        <span class=\"keyword\">return</span> setInitialValue();</div><div class=\"line\">    &#125;</div></pre></td></tr></table></figure></p>\n<p>　　从ThreadLocal的set和get方法可以看出，他们所操作的对象都是当前线程的ThreadLocalMap对象的table数组，因此在不同线程中访问同一个ThreadLocal的set和get方法，他们对ThreadLocal所做的读写操作仅限于各自线程的内部，这就是为什么ThreadLocal可以在多个线程中互不干扰的存储和修改数据。</p>\n<h3 id=\"消息队列的工作原理\"><a href=\"#消息队列的工作原理\" class=\"headerlink\" title=\"消息队列的工作原理\"></a>消息队列的工作原理</h3><p>　　消息队列在Android中指的是MessageQueue，MessageQueue主要包含两个操作，插入和读取。读取操作本身会伴随着删除操作，插入和读取对应的方法分别为enqueueMessage和next，其中enqueueMessage的作用是往消息队列中插入一跳消息，而next的作用是从消息队列中取出一条消息并将其从消息队列中移除，尽管MessageQueue叫消息队列，但是它的内部实现并不是用的队列，实际上它是通过一个单链表的数据结构来维护消息列表，单链表在插入和删除上比较有优势。下面是enqueueMessage的实现：<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">boolean</span> <span class=\"title\">enqueueMessage</span><span class=\"params\">(Message msg, <span class=\"keyword\">long</span> when)</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">if</span> (msg.target == <span class=\"keyword\">null</span>) &#123;</div><div class=\"line\">            <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> IllegalArgumentException(<span class=\"string\">\"Message must have a target.\"</span>);</div><div class=\"line\">        &#125;</div><div class=\"line\">        <span class=\"keyword\">if</span> (msg.isInUse()) &#123;</div><div class=\"line\">            <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> IllegalStateException(msg + <span class=\"string\">\" This message is already in use.\"</span>);</div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\">        <span class=\"keyword\">synchronized</span> (<span class=\"keyword\">this</span>) &#123;</div><div class=\"line\">            <span class=\"keyword\">if</span> (mQuitting) &#123;</div><div class=\"line\">                IllegalStateException e = <span class=\"keyword\">new</span> IllegalStateException(</div><div class=\"line\">                        msg.target + <span class=\"string\">\" sending message to a Handler on a dead thread\"</span>);</div><div class=\"line\">                Log.w(TAG, e.getMessage(), e);</div><div class=\"line\">                msg.recycle();</div><div class=\"line\">                <span class=\"keyword\">return</span> <span class=\"keyword\">false</span>;</div><div class=\"line\">            &#125;</div><div class=\"line\"></div><div class=\"line\">            msg.markInUse();</div><div class=\"line\">            msg.when = when;</div><div class=\"line\">            Message p = mMessages;</div><div class=\"line\">            <span class=\"keyword\">boolean</span> needWake;</div><div class=\"line\">            <span class=\"keyword\">if</span> (p == <span class=\"keyword\">null</span> || when == <span class=\"number\">0</span> || when &lt; p.when) &#123;</div><div class=\"line\">                <span class=\"comment\">// New head, wake up the event queue if blocked.</span></div><div class=\"line\">                msg.next = p;</div><div class=\"line\">                mMessages = msg;</div><div class=\"line\">                needWake = mBlocked;</div><div class=\"line\">            &#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">                <span class=\"comment\">// Inserted within the middle of the queue.  Usually we don't have to wake</span></div><div class=\"line\">                <span class=\"comment\">// up the event queue unless there is a barrier at the head of the queue</span></div><div class=\"line\">                <span class=\"comment\">// and the message is the earliest asynchronous message in the queue.</span></div><div class=\"line\">                needWake = mBlocked &amp;&amp; p.target == <span class=\"keyword\">null</span> &amp;&amp; msg.isAsynchronous();</div><div class=\"line\">                Message prev;</div><div class=\"line\">                <span class=\"keyword\">for</span> (;;) &#123;</div><div class=\"line\">                    prev = p;</div><div class=\"line\">                    p = p.next;</div><div class=\"line\">                    <span class=\"keyword\">if</span> (p == <span class=\"keyword\">null</span> || when &lt; p.when) &#123;</div><div class=\"line\">                        <span class=\"keyword\">break</span>;</div><div class=\"line\">                    &#125;</div><div class=\"line\">                    <span class=\"keyword\">if</span> (needWake &amp;&amp; p.isAsynchronous()) &#123;</div><div class=\"line\">                        needWake = <span class=\"keyword\">false</span>;</div><div class=\"line\">                    &#125;</div><div class=\"line\">                &#125;</div><div class=\"line\">                msg.next = p; <span class=\"comment\">// invariant: p == prev.next</span></div><div class=\"line\">                prev.next = msg;</div><div class=\"line\">            &#125;</div><div class=\"line\"></div><div class=\"line\">            <span class=\"comment\">// We can assume mPtr != 0 because mQuitting is false.</span></div><div class=\"line\">            <span class=\"keyword\">if</span> (needWake) &#123;</div><div class=\"line\">                nativeWake(mPtr);</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;</div><div class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">true</span>;</div><div class=\"line\">    &#125;</div></pre></td></tr></table></figure></p>\n<p>从其实现来安，主要操作其实就是单链表的插入操作。<br>next的实现如下：<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div><div class=\"line\">71</div><div class=\"line\">72</div><div class=\"line\">73</div><div class=\"line\">74</div><div class=\"line\">75</div><div class=\"line\">76</div><div class=\"line\">77</div><div class=\"line\">78</div><div class=\"line\">79</div><div class=\"line\">80</div><div class=\"line\">81</div><div class=\"line\">82</div><div class=\"line\">83</div><div class=\"line\">84</div><div class=\"line\">85</div><div class=\"line\">86</div><div class=\"line\">87</div><div class=\"line\">88</div><div class=\"line\">89</div><div class=\"line\">90</div><div class=\"line\">91</div><div class=\"line\">92</div><div class=\"line\">93</div><div class=\"line\">94</div><div class=\"line\">95</div><div class=\"line\">96</div><div class=\"line\">97</div><div class=\"line\">98</div><div class=\"line\">99</div><div class=\"line\">100</div><div class=\"line\">101</div><div class=\"line\">102</div><div class=\"line\">103</div><div class=\"line\">104</div><div class=\"line\">105</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\">Message <span class=\"title\">next</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">        <span class=\"comment\">// Return here if the message loop has already quit and been disposed.</span></div><div class=\"line\">        <span class=\"comment\">// This can happen if the application tries to restart a looper after quit</span></div><div class=\"line\">        <span class=\"comment\">// which is not supported.</span></div><div class=\"line\">        <span class=\"keyword\">final</span> <span class=\"keyword\">long</span> ptr = mPtr;</div><div class=\"line\">        <span class=\"keyword\">if</span> (ptr == <span class=\"number\">0</span>) &#123;</div><div class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">null</span>;</div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\">        <span class=\"keyword\">int</span> pendingIdleHandlerCount = -<span class=\"number\">1</span>; <span class=\"comment\">// -1 only during first iteration</span></div><div class=\"line\">        <span class=\"keyword\">int</span> nextPollTimeoutMillis = <span class=\"number\">0</span>;</div><div class=\"line\">        <span class=\"keyword\">for</span> (;;) &#123;</div><div class=\"line\">            <span class=\"keyword\">if</span> (nextPollTimeoutMillis != <span class=\"number\">0</span>) &#123;</div><div class=\"line\">                Binder.flushPendingCommands();</div><div class=\"line\">            &#125;</div><div class=\"line\"></div><div class=\"line\">            nativePollOnce(ptr, nextPollTimeoutMillis);</div><div class=\"line\"></div><div class=\"line\">            <span class=\"keyword\">synchronized</span> (<span class=\"keyword\">this</span>) &#123;</div><div class=\"line\">                <span class=\"comment\">// Try to retrieve the next message.  Return if found.</span></div><div class=\"line\">                <span class=\"keyword\">final</span> <span class=\"keyword\">long</span> now = SystemClock.uptimeMillis();</div><div class=\"line\">                Message prevMsg = <span class=\"keyword\">null</span>;</div><div class=\"line\">                Message msg = mMessages;</div><div class=\"line\">                <span class=\"keyword\">if</span> (msg != <span class=\"keyword\">null</span> &amp;&amp; msg.target == <span class=\"keyword\">null</span>) &#123;</div><div class=\"line\">                    <span class=\"comment\">// Stalled by a barrier.  Find the next asynchronous message in the queue.</span></div><div class=\"line\">                    do &#123;</div><div class=\"line\">                        prevMsg = msg;</div><div class=\"line\">                        msg = msg.next;</div><div class=\"line\">                    &#125; <span class=\"keyword\">while</span> (msg != <span class=\"keyword\">null</span> &amp;&amp; !msg.isAsynchronous());</div><div class=\"line\">                &#125;</div><div class=\"line\">                <span class=\"keyword\">if</span> (msg != <span class=\"keyword\">null</span>) &#123;</div><div class=\"line\">                    <span class=\"keyword\">if</span> (now &lt; msg.when) &#123;</div><div class=\"line\">                        <span class=\"comment\">// Next message is not ready.  Set a timeout to wake up when it is ready.</span></div><div class=\"line\">                        nextPollTimeoutMillis = (<span class=\"keyword\">int</span>) Math.min(msg.when - now, Integer.MAX_VALUE);</div><div class=\"line\">                    &#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">                        <span class=\"comment\">// Got a message.</span></div><div class=\"line\">                        mBlocked = <span class=\"keyword\">false</span>;</div><div class=\"line\">                        <span class=\"keyword\">if</span> (prevMsg != <span class=\"keyword\">null</span>) &#123;</div><div class=\"line\">                            prevMsg.next = msg.next;</div><div class=\"line\">                        &#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">                            mMessages = msg.next;</div><div class=\"line\">                        &#125;</div><div class=\"line\">                        msg.next = <span class=\"keyword\">null</span>;</div><div class=\"line\">                        <span class=\"keyword\">if</span> (DEBUG) Log.v(TAG, <span class=\"string\">\"Returning message: \"</span> + msg);</div><div class=\"line\">                        msg.markInUse();</div><div class=\"line\">                        <span class=\"keyword\">return</span> msg;</div><div class=\"line\">                    &#125;</div><div class=\"line\">                &#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">                    <span class=\"comment\">// No more messages.</span></div><div class=\"line\">                    nextPollTimeoutMillis = -<span class=\"number\">1</span>;</div><div class=\"line\">                &#125;</div><div class=\"line\"></div><div class=\"line\">                <span class=\"comment\">// Process the quit message now that all pending messages have been handled.</span></div><div class=\"line\">                <span class=\"keyword\">if</span> (mQuitting) &#123;</div><div class=\"line\">                    dispose();</div><div class=\"line\">                    <span class=\"keyword\">return</span> <span class=\"keyword\">null</span>;</div><div class=\"line\">                &#125;</div><div class=\"line\"></div><div class=\"line\">                <span class=\"comment\">// If first time idle, then get the number of idlers to run.</span></div><div class=\"line\">                <span class=\"comment\">// Idle handles only run if the queue is empty or if the first message</span></div><div class=\"line\">                <span class=\"comment\">// in the queue (possibly a barrier) is due to be handled in the future.</span></div><div class=\"line\">                <span class=\"keyword\">if</span> (pendingIdleHandlerCount &lt; <span class=\"number\">0</span></div><div class=\"line\">                        &amp;&amp; (mMessages == <span class=\"keyword\">null</span> || now &lt; mMessages.when)) &#123;</div><div class=\"line\">                    pendingIdleHandlerCount = mIdleHandlers.size();</div><div class=\"line\">                &#125;</div><div class=\"line\">                <span class=\"keyword\">if</span> (pendingIdleHandlerCount &lt;= <span class=\"number\">0</span>) &#123;</div><div class=\"line\">                    <span class=\"comment\">// No idle handlers to run.  Loop and wait some more.</span></div><div class=\"line\">                    mBlocked = <span class=\"keyword\">true</span>;</div><div class=\"line\">                    <span class=\"keyword\">continue</span>;</div><div class=\"line\">                &#125;</div><div class=\"line\"></div><div class=\"line\">                <span class=\"keyword\">if</span> (mPendingIdleHandlers == <span class=\"keyword\">null</span>) &#123;</div><div class=\"line\">                    mPendingIdleHandlers = <span class=\"keyword\">new</span> IdleHandler[Math.max(pendingIdleHandlerCount, <span class=\"number\">4</span>)];</div><div class=\"line\">                &#125;</div><div class=\"line\">                mPendingIdleHandlers = mIdleHandlers.toArray(mPendingIdleHandlers);</div><div class=\"line\">            &#125;</div><div class=\"line\"></div><div class=\"line\">            <span class=\"comment\">// Run the idle handlers.</span></div><div class=\"line\">            <span class=\"comment\">// We only ever reach this code block during the first iteration.</span></div><div class=\"line\">            <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; pendingIdleHandlerCount; i++) &#123;</div><div class=\"line\">                <span class=\"keyword\">final</span> IdleHandler idler = mPendingIdleHandlers[i];</div><div class=\"line\">                mPendingIdleHandlers[i] = <span class=\"keyword\">null</span>; <span class=\"comment\">// release the reference to the handler</span></div><div class=\"line\"></div><div class=\"line\">                <span class=\"keyword\">boolean</span> keep = <span class=\"keyword\">false</span>;</div><div class=\"line\">                <span class=\"keyword\">try</span> &#123;</div><div class=\"line\">                    keep = idler.queueIdle();</div><div class=\"line\">                &#125; <span class=\"keyword\">catch</span> (Throwable t) &#123;</div><div class=\"line\">                    Log.wtf(TAG, <span class=\"string\">\"IdleHandler threw exception\"</span>, t);</div><div class=\"line\">                &#125;</div><div class=\"line\"></div><div class=\"line\">                <span class=\"keyword\">if</span> (!keep) &#123;</div><div class=\"line\">                    <span class=\"keyword\">synchronized</span> (<span class=\"keyword\">this</span>) &#123;</div><div class=\"line\">                        mIdleHandlers.remove(idler);</div><div class=\"line\">                    &#125;</div><div class=\"line\">                &#125;</div><div class=\"line\">            &#125;</div><div class=\"line\"></div><div class=\"line\">            <span class=\"comment\">// Reset the idle handler count to 0 so we do not run them again.</span></div><div class=\"line\">            pendingIdleHandlerCount = <span class=\"number\">0</span>;</div><div class=\"line\"></div><div class=\"line\">            <span class=\"comment\">// While calling an idle handler, a new message could have been delivered</span></div><div class=\"line\">            <span class=\"comment\">// so go back and look again for a pending message without waiting.</span></div><div class=\"line\">            nextPollTimeoutMillis = <span class=\"number\">0</span>;</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div></pre></td></tr></table></figure></p>\n<p>可以返现next方法是一个无限循环的方法，如果消息队列为空，那么next方法会一直阻塞在这里，当有消息到来时，next方法会返回这条消息并将其从单链表中移除</p>\n<h3 id=\"Looper的工作原理\"><a href=\"#Looper的工作原理\" class=\"headerlink\" title=\"Looper的工作原理\"></a>Looper的工作原理</h3><p>　　Looper在Android的消息机制中扮演者消息循环的角色，具体来说就是它会不停地从MessageQueue中查看是否有新消息，如果有新消息就会立刻处理，否则就一直阻塞在那里。首先看一下它的构造方法，在构造中它会创建一个MessageQueue也就是消息队列，然后将当前线程的对象保存起来，如下：<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> <span class=\"title\">Looper</span><span class=\"params\">(<span class=\"keyword\">boolean</span> quitAllowed)</span> </span>&#123;</div><div class=\"line\">      mQueue = <span class=\"keyword\">new</span> MessageQueue(quitAllowed);</div><div class=\"line\">      mThread = Thread.currentThread();</div><div class=\"line\">  &#125;</div></pre></td></tr></table></figure></p>\n<p>　　Handler的工作需要Looper，没有Looper的线程就会报错，我们可以通过Looper.prepare()即可为当前线程创建一个Looper，接着通过Looper.loop()来开启消息循环。Looper除了prepare方法外，还提供了prepareMainLoop方法，这个方法主要是给主线程也就是ActivityThread创建Looper使用的，其本质也是通过prepare方法来实现的。由于主线程的Looper比较特殊，所以Looper提供了一个getMainLooper方法，通过它可以在任何地方获取到主线程的Looper。Looper也是可以退出的，Looper提供了quit和quitSafely来退出一个Looper，二者的区别是：quit会直接突出Looper，而quitSafely只是设定一个退出标记，然后把消息队列中的已有消息处理完毕后才安全的退出。Looper退出后，通过Handler发送的消息会失败，这个时候Handler的send方法会返回false。在子线程中，如果手动为其创建了Looper，那么在所有的事情完成以后应该调用quit方法来总之消息循环，否则这个子线程就会一直处于等待的状态，而如果退出Looper以后，这个线程就会立刻终止，因此建议不需要的时候终止Looper。<br> Looper最重要的一个方法是loop方法，只有调用了loop后，消息循环系统才会真正的起作用，实现如下：<br> <figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">/**</span></div><div class=\"line\">   * Run the message queue in this thread. Be sure to call</div><div class=\"line\">   * &#123;<span class=\"doctag\">@link</span> #quit()&#125; to end the loop.</div><div class=\"line\">   */</div><div class=\"line\">  <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">loop</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">      <span class=\"keyword\">final</span> Looper me = myLooper();</div><div class=\"line\">      <span class=\"keyword\">if</span> (me == <span class=\"keyword\">null</span>) &#123;</div><div class=\"line\">          <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> RuntimeException(<span class=\"string\">\"No Looper; Looper.prepare() wasn't called on this thread.\"</span>);</div><div class=\"line\">      &#125;</div><div class=\"line\">      <span class=\"keyword\">final</span> MessageQueue queue = me.mQueue;</div><div class=\"line\"></div><div class=\"line\">      <span class=\"comment\">// Make sure the identity of this thread is that of the local process,</span></div><div class=\"line\">      <span class=\"comment\">// and keep track of what that identity token actually is.</span></div><div class=\"line\">      Binder.clearCallingIdentity();</div><div class=\"line\">      <span class=\"keyword\">final</span> <span class=\"keyword\">long</span> ident = Binder.clearCallingIdentity();</div><div class=\"line\"></div><div class=\"line\">      <span class=\"keyword\">for</span> (;;) &#123;</div><div class=\"line\">          Message msg = queue.next(); <span class=\"comment\">// might block</span></div><div class=\"line\">          <span class=\"keyword\">if</span> (msg == <span class=\"keyword\">null</span>) &#123;</div><div class=\"line\">              <span class=\"comment\">// No message indicates that the message queue is quitting.</span></div><div class=\"line\">              <span class=\"keyword\">return</span>;</div><div class=\"line\">          &#125;</div><div class=\"line\"></div><div class=\"line\">          <span class=\"comment\">// This must be in a local variable, in case a UI event sets the logger</span></div><div class=\"line\">          <span class=\"keyword\">final</span> Printer logging = me.mLogging;</div><div class=\"line\">          <span class=\"keyword\">if</span> (logging != <span class=\"keyword\">null</span>) &#123;</div><div class=\"line\">              logging.println(<span class=\"string\">\"&gt;&gt;&gt;&gt;&gt; Dispatching to \"</span> + msg.target + <span class=\"string\">\" \"</span> +</div><div class=\"line\">                      msg.callback + <span class=\"string\">\": \"</span> + msg.what);</div><div class=\"line\">          &#125;</div><div class=\"line\"></div><div class=\"line\">          <span class=\"keyword\">final</span> <span class=\"keyword\">long</span> traceTag = me.mTraceTag;</div><div class=\"line\">          <span class=\"keyword\">if</span> (traceTag != <span class=\"number\">0</span>) &#123;</div><div class=\"line\">              Trace.traceBegin(traceTag, msg.target.getTraceName(msg));</div><div class=\"line\">          &#125;</div><div class=\"line\">          <span class=\"keyword\">try</span> &#123;</div><div class=\"line\">              msg.target.dispatchMessage(msg);</div><div class=\"line\">          &#125; <span class=\"keyword\">finally</span> &#123;</div><div class=\"line\">              <span class=\"keyword\">if</span> (traceTag != <span class=\"number\">0</span>) &#123;</div><div class=\"line\">                  Trace.traceEnd(traceTag);</div><div class=\"line\">              &#125;</div><div class=\"line\">          &#125;</div><div class=\"line\"></div><div class=\"line\">          <span class=\"keyword\">if</span> (logging != <span class=\"keyword\">null</span>) &#123;</div><div class=\"line\">              logging.println(<span class=\"string\">\"&lt;&lt;&lt;&lt;&lt; Finished to \"</span> + msg.target + <span class=\"string\">\" \"</span> + msg.callback);</div><div class=\"line\">          &#125;</div><div class=\"line\"></div><div class=\"line\">          <span class=\"comment\">// Make sure that during the course of dispatching the</span></div><div class=\"line\">          <span class=\"comment\">// identity of the thread wasn't corrupted.</span></div><div class=\"line\">          <span class=\"keyword\">final</span> <span class=\"keyword\">long</span> newIdent = Binder.clearCallingIdentity();</div><div class=\"line\">          <span class=\"keyword\">if</span> (ident != newIdent) &#123;</div><div class=\"line\">              Log.wtf(TAG, <span class=\"string\">\"Thread identity changed from 0x\"</span></div><div class=\"line\">                      + Long.toHexString(ident) + <span class=\"string\">\" to 0x\"</span></div><div class=\"line\">                      + Long.toHexString(newIdent) + <span class=\"string\">\" while dispatching to \"</span></div><div class=\"line\">                      + msg.target.getClass().getName() + <span class=\"string\">\" \"</span></div><div class=\"line\">                      + msg.callback + <span class=\"string\">\" what=\"</span> + msg.what);</div><div class=\"line\">          &#125;</div><div class=\"line\"></div><div class=\"line\">          msg.recycleUnchecked();</div><div class=\"line\">      &#125;</div><div class=\"line\">  &#125;</div></pre></td></tr></table></figure></p>\n<p> 　　loop方法是一个死循环，唯一跳出循环的方式是MessageQueue的next方法返回了null，当Looper的quit方法被调用时，Looper就会通知消息队列退出，当消息队列被标记为退出状态时，它的next方法就会返回null，也就是说，Looper必须退出，否则loop方法就会无限循环下去，loop方法会调用MessageQueue的next方法来获取新消息，而next方法是一个阻塞操作，当没有消息时，next方法会一直阻塞在那里，这也导致loop方法一直阻塞在那里，如果MessageQueue的next方法返回了新消息，Looper就会处理这条消息，  msg.target.dispatchMessage(msg)，这里的  msg.target是发送这条消息的handler对象，这样Handler发送的消息最终又交个它的  dispatchMessage(msg);方法来处理了，但是这里不同的是，Handler的dispatchMessage方法是在创建Handler时所使用的Looper中执行的，这样就成功的将代码逻辑切换到指定的线程中去执行了。</p>\n<h3 id=\"Handler的工作原理\"><a href=\"#Handler的工作原理\" class=\"headerlink\" title=\"Handler的工作原理\"></a>Handler的工作原理</h3><p> Handler的工作主要包含消息的发送和接收过程。消息的发送可以通过post的一系列方法以及send的一系列方法来实现，post的一系列方法最终是通过send的一列方法来实现的。发送一条消息的典型过程如下：<br> <figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div></pre></td><td class=\"code\"><pre><div class=\"line\"> <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">final</span> <span class=\"keyword\">boolean</span> <span class=\"title\">sendMessage</span><span class=\"params\">(Message msg)</span></span></div><div class=\"line\">   &#123;</div><div class=\"line\">       <span class=\"keyword\">return</span> sendMessageDelayed(msg, <span class=\"number\">0</span>);</div><div class=\"line\">   &#125;</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">final</span> <span class=\"keyword\">boolean</span> <span class=\"title\">sendMessageDelayed</span><span class=\"params\">(Message msg, <span class=\"keyword\">long</span> delayMillis)</span></span></div><div class=\"line\">   &#123;</div><div class=\"line\">       <span class=\"keyword\">if</span> (delayMillis &lt; <span class=\"number\">0</span>) &#123;</div><div class=\"line\">           delayMillis = <span class=\"number\">0</span>;</div><div class=\"line\">       &#125;</div><div class=\"line\">       <span class=\"keyword\">return</span> sendMessageAtTime(msg, SystemClock.uptimeMillis() + delayMillis);</div><div class=\"line\">   &#125;</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">sendMessageAtTime</span><span class=\"params\">(Message msg, <span class=\"keyword\">long</span> uptimeMillis)</span> </span>&#123;</div><div class=\"line\">       MessageQueue queue = mQueue;</div><div class=\"line\">       <span class=\"keyword\">if</span> (queue == <span class=\"keyword\">null</span>) &#123;</div><div class=\"line\">           RuntimeException e = <span class=\"keyword\">new</span> RuntimeException(</div><div class=\"line\">                   <span class=\"keyword\">this</span> + <span class=\"string\">\" sendMessageAtTime() called with no mQueue\"</span>);</div><div class=\"line\">           Log.w(<span class=\"string\">\"Looper\"</span>, e.getMessage(), e);</div><div class=\"line\">           <span class=\"keyword\">return</span> <span class=\"keyword\">false</span>;</div><div class=\"line\">       &#125;</div><div class=\"line\">       <span class=\"keyword\">return</span> enqueueMessage(queue, msg, uptimeMillis);</div><div class=\"line\">   &#125;</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">boolean</span> <span class=\"title\">enqueueMessage</span><span class=\"params\">(MessageQueue queue, Message msg, <span class=\"keyword\">long</span> uptimeMillis)</span> </span>&#123;</div><div class=\"line\">       msg.target = <span class=\"keyword\">this</span>;</div><div class=\"line\">       <span class=\"keyword\">if</span> (mAsynchronous) &#123;</div><div class=\"line\">           msg.setAsynchronous(<span class=\"keyword\">true</span>);</div><div class=\"line\">       &#125;</div><div class=\"line\">       <span class=\"keyword\">return</span> queue.enqueueMessage(msg, uptimeMillis);</div><div class=\"line\">   &#125;</div></pre></td></tr></table></figure></p>\n<p> 　　可以发现，Handler发送消息的过程仅仅是向消息队列中插入了一条消息，MessageQueue的next方法就会返回这条消息给Looper，Looper收到消息后就开始处理了，最终消息由Looper交由Handler处理，即Handler的dispatchMessage方法会被调用，这时Handler就是进入了处理消息的阶段。dispatchMessage的实现如下：<br> <figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">dispatchMessage</span><span class=\"params\">(Message msg)</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">if</span> (msg.callback != <span class=\"keyword\">null</span>) &#123;</div><div class=\"line\">        handleCallback(msg);</div><div class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">        <span class=\"keyword\">if</span> (mCallback != <span class=\"keyword\">null</span>) &#123;</div><div class=\"line\">            <span class=\"keyword\">if</span> (mCallback.handleMessage(msg)) &#123;</div><div class=\"line\">                <span class=\"keyword\">return</span>;</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;</div><div class=\"line\">        handleMessage(msg);</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p> Handler处理消息的过程如下：</p>\n<ol>\n<li><p>检查Message的callback是否为null，不为null就通过handleCallback来处理消息，Message的callback是一个Runnable对象，实际上就是Handler的post方法所传递的Runnable参数。handleCallback的逻辑如下：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">handleCallback</span><span class=\"params\">(Message message)</span> </span>&#123;</div><div class=\"line\">       message.callback.run();</div><div class=\"line\">   &#125;</div></pre></td></tr></table></figure>\n</li>\n<li><p>其次，检查mCallback是否为null，不为null就调用没CallBack的HandlerMessage方法来处理消息，Callback是个接口，它的定义如下：</p>\n<pre><code class=\"java\"><span class=\"comment\">/**\n * Callback interface you can use when instantiating a Handler to avoid\n * having to implement your own subclass of Handler.\n *\n * <span class=\"doctag\">@param</span> msg A {<span class=\"doctag\">@link</span> android.os.Message Message} object\n * <span class=\"doctag\">@return</span> True if no further handling is desired\n */</span>\n<span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">interface</span> <span class=\"title\">Callback</span> </span>{\n    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">handleMessage</span><span class=\"params\">(Message msg)</span></span>;\n}\n</code></pre>\n<p>通过Callback可以采用如下方式来创建Handler对象：Handler handler = new Handler(callback)。</p>\n</li>\n</ol>\n<ol>\n<li>最后，调用Handler的handleMessahe方法来处理消息。</li>\n</ol>\n<hr>\n<p>以上</p>\n","excerpt":"<p>　　Android消息机制主要是指Handler的运行机制，Handler的运行需要底层的MessageQueue和Looper的支撑。MessageQueue的中文翻译是消息队列，它的内部存储了一组消息，以队列的形式对外提供插入和删除的工作。虽然叫消息队列，但是它的内部存储结构并不是真正的队列，而是采用单链表的数据结构来存储消息队列。Looper可以理解为消息循环。由于MessageQueue只是一个消息的存储单元，它不能去处理消息，而Looper就填补了这个功能，Looper会以无限循环的形式去查找是否有新消息，如果有的话就处理消息，否则就等待。Looper中还有一个特殊的概念：ThreadLocal，ThreadLocal并不是线程，它的作用是可以在每个线程中存储数据。Handler创建的时候会采用当前线程的Looper来构造消息循环系统，ThreadLocal可以在不同的线程中互不干扰的存储并提供数据，Handler可以通过ThreadLocal轻松获取每个线程的Looper。需要注意的是，线程默认是没有Looper的，如果需要使用Handler就必须为现成创建Looper，我们经常提到的主线程，也叫UI线程，它就是ActivityThread，ActivityThread被创建时就会初始化Looper，这也是在主线程中默认可以使用Handler的原因。<br>","more":"</p>\n<h3 id=\"ThreadLocal的工作原理\"><a href=\"#ThreadLocal的工作原理\" class=\"headerlink\" title=\"ThreadLocal的工作原理\"></a>ThreadLocal的工作原理</h3><p>ThreadLocal是一个线程内部的数据存储类，通过它可以在指定的线程中存储数据，数据存储以后，只能在指定的线程中才可以获取到存储的数据，对于其他线程来说则无法获取到，我们在使用的时候：<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">final</span> ThreadLocal&lt;Boolean&gt; mBooleanThreadLocal = <span class=\"keyword\">new</span> ThreadLocal&lt;&gt;();</div><div class=\"line\">       <span class=\"keyword\">new</span> Thread(<span class=\"string\">\"Thread#1\"</span>)&#123;</div><div class=\"line\">           <span class=\"meta\">@Override</span></div><div class=\"line\">           <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">run</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">               mBooleanThreadLocal.set(<span class=\"keyword\">false</span>);</div><div class=\"line\">               Log.d(<span class=\"string\">\"huangyuan\"</span>,<span class=\"string\">\"Thread#1\"</span> + mBooleanThreadLocal.get());</div><div class=\"line\">           &#125;</div><div class=\"line\">       &#125;.start();</div><div class=\"line\"></div><div class=\"line\">       <span class=\"keyword\">new</span> Thread(<span class=\"string\">\"Thread#2\"</span>)&#123;</div><div class=\"line\"></div><div class=\"line\">           <span class=\"meta\">@Override</span></div><div class=\"line\">           <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">run</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">               mBooleanThreadLocal.set(<span class=\"keyword\">true</span>);</div><div class=\"line\">               Log.d(<span class=\"string\">\"huangyuan\"</span>,<span class=\"string\">\"Thread#2\"</span> + mBooleanThreadLocal.get());</div><div class=\"line\">           &#125;</div><div class=\"line\">       &#125;.start();</div></pre></td></tr></table></figure></p>\n<p>　　这样，我们虽然在不同的线程中访问的是同一个ThreadLocal对象，但是他们的值却是不一样的。这是因为不同的线程访问同一个ThreadLocal的get方法，ThreadLocal内部会从各自的线程中取出一个数组，然后再从数组中根据当前ThreadLocal的索引去查找出对应的value值。<br>ThreadLocal是一个泛型类，定义为<code>public class ThreadLocal&lt;T&gt;</code>,首先看ThreadLocal的set方法，如下：<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">set</span><span class=\"params\">(T value)</span> </span>&#123;</div><div class=\"line\">       Thread t = Thread.currentThread();</div><div class=\"line\">       ThreadLocalMap map = getMap(t);</div><div class=\"line\">       <span class=\"keyword\">if</span> (map != <span class=\"keyword\">null</span>)</div><div class=\"line\">           map.set(<span class=\"keyword\">this</span>, value);</div><div class=\"line\">       <span class=\"keyword\">else</span></div><div class=\"line\">           createMap(t, value);</div><div class=\"line\">   &#125;</div></pre></td></tr></table></figure></p>\n<p>　　上面的方法中，首先会通过getMap方法获取ThreadLocalMap（存储线程的ThreadLocal数据），ThreadLocalMap是ThreadLocal类的静态内部类，其内部包含了一个静态内部类Entry，声明如下<code>static class Entry extends WeakReference&lt;ThreadLocal&gt;</code>,ThreadLocalMap类中有一个Entry类型的数组<code>private Entry[] table;</code>,下面是set方法的具体实现：<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">set</span><span class=\"params\">(ThreadLocal key, Object value)</span> </span>&#123;</div><div class=\"line\"></div><div class=\"line\">          <span class=\"comment\">// We don't use a fast path as with get() because it is at</span></div><div class=\"line\">          <span class=\"comment\">// least as common to use set() to create new entries as</span></div><div class=\"line\">          <span class=\"comment\">// it is to replace existing ones, in which case, a fast</span></div><div class=\"line\">          <span class=\"comment\">// path would fail more often than not.</span></div><div class=\"line\"></div><div class=\"line\">          Entry[] tab = table;</div><div class=\"line\">          <span class=\"keyword\">int</span> len = tab.length;</div><div class=\"line\">          <span class=\"keyword\">int</span> i = key.threadLocalHashCode &amp; (len-<span class=\"number\">1</span>);</div><div class=\"line\"></div><div class=\"line\">          <span class=\"keyword\">for</span> (Entry e = tab[i];</div><div class=\"line\">               e != <span class=\"keyword\">null</span>;</div><div class=\"line\">               e = tab[i = nextIndex(i, len)]) &#123;</div><div class=\"line\">              ThreadLocal k = e.get();</div><div class=\"line\"></div><div class=\"line\">              <span class=\"keyword\">if</span> (k == key) &#123;</div><div class=\"line\">                  e.value = value;</div><div class=\"line\">                  <span class=\"keyword\">return</span>;</div><div class=\"line\">              &#125;</div><div class=\"line\"></div><div class=\"line\">              <span class=\"keyword\">if</span> (k == <span class=\"keyword\">null</span>) &#123;</div><div class=\"line\">                  replaceStaleEntry(key, value, i);</div><div class=\"line\">                  <span class=\"keyword\">return</span>;</div><div class=\"line\">              &#125;</div><div class=\"line\">          &#125;</div><div class=\"line\"></div><div class=\"line\">          tab[i] = <span class=\"keyword\">new</span> Entry(key, value);</div><div class=\"line\">          <span class=\"keyword\">int</span> sz = ++size;</div><div class=\"line\">          <span class=\"keyword\">if</span> (!cleanSomeSlots(i, sz) &amp;&amp; sz &gt;= threshold)</div><div class=\"line\">              rehash();</div><div class=\"line\">      &#125;</div></pre></td></tr></table></figure></p>\n<p>ThreadLocal的get方法如下：<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> T <span class=\"title\">get</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">        Thread t = Thread.currentThread();</div><div class=\"line\">        ThreadLocalMap map = getMap(t);</div><div class=\"line\">        <span class=\"keyword\">if</span> (map != <span class=\"keyword\">null</span>) &#123;</div><div class=\"line\">            ThreadLocalMap.Entry e = map.getEntry(<span class=\"keyword\">this</span>);</div><div class=\"line\">            <span class=\"keyword\">if</span> (e != <span class=\"keyword\">null</span>)</div><div class=\"line\">                <span class=\"keyword\">return</span> (T)e.value;</div><div class=\"line\">        &#125;</div><div class=\"line\">        <span class=\"keyword\">return</span> setInitialValue();</div><div class=\"line\">    &#125;</div></pre></td></tr></table></figure></p>\n<p>　　从ThreadLocal的set和get方法可以看出，他们所操作的对象都是当前线程的ThreadLocalMap对象的table数组，因此在不同线程中访问同一个ThreadLocal的set和get方法，他们对ThreadLocal所做的读写操作仅限于各自线程的内部，这就是为什么ThreadLocal可以在多个线程中互不干扰的存储和修改数据。</p>\n<h3 id=\"消息队列的工作原理\"><a href=\"#消息队列的工作原理\" class=\"headerlink\" title=\"消息队列的工作原理\"></a>消息队列的工作原理</h3><p>　　消息队列在Android中指的是MessageQueue，MessageQueue主要包含两个操作，插入和读取。读取操作本身会伴随着删除操作，插入和读取对应的方法分别为enqueueMessage和next，其中enqueueMessage的作用是往消息队列中插入一跳消息，而next的作用是从消息队列中取出一条消息并将其从消息队列中移除，尽管MessageQueue叫消息队列，但是它的内部实现并不是用的队列，实际上它是通过一个单链表的数据结构来维护消息列表，单链表在插入和删除上比较有优势。下面是enqueueMessage的实现：<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">boolean</span> <span class=\"title\">enqueueMessage</span><span class=\"params\">(Message msg, <span class=\"keyword\">long</span> when)</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">if</span> (msg.target == <span class=\"keyword\">null</span>) &#123;</div><div class=\"line\">            <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> IllegalArgumentException(<span class=\"string\">\"Message must have a target.\"</span>);</div><div class=\"line\">        &#125;</div><div class=\"line\">        <span class=\"keyword\">if</span> (msg.isInUse()) &#123;</div><div class=\"line\">            <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> IllegalStateException(msg + <span class=\"string\">\" This message is already in use.\"</span>);</div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\">        <span class=\"keyword\">synchronized</span> (<span class=\"keyword\">this</span>) &#123;</div><div class=\"line\">            <span class=\"keyword\">if</span> (mQuitting) &#123;</div><div class=\"line\">                IllegalStateException e = <span class=\"keyword\">new</span> IllegalStateException(</div><div class=\"line\">                        msg.target + <span class=\"string\">\" sending message to a Handler on a dead thread\"</span>);</div><div class=\"line\">                Log.w(TAG, e.getMessage(), e);</div><div class=\"line\">                msg.recycle();</div><div class=\"line\">                <span class=\"keyword\">return</span> <span class=\"keyword\">false</span>;</div><div class=\"line\">            &#125;</div><div class=\"line\"></div><div class=\"line\">            msg.markInUse();</div><div class=\"line\">            msg.when = when;</div><div class=\"line\">            Message p = mMessages;</div><div class=\"line\">            <span class=\"keyword\">boolean</span> needWake;</div><div class=\"line\">            <span class=\"keyword\">if</span> (p == <span class=\"keyword\">null</span> || when == <span class=\"number\">0</span> || when &lt; p.when) &#123;</div><div class=\"line\">                <span class=\"comment\">// New head, wake up the event queue if blocked.</span></div><div class=\"line\">                msg.next = p;</div><div class=\"line\">                mMessages = msg;</div><div class=\"line\">                needWake = mBlocked;</div><div class=\"line\">            &#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">                <span class=\"comment\">// Inserted within the middle of the queue.  Usually we don't have to wake</span></div><div class=\"line\">                <span class=\"comment\">// up the event queue unless there is a barrier at the head of the queue</span></div><div class=\"line\">                <span class=\"comment\">// and the message is the earliest asynchronous message in the queue.</span></div><div class=\"line\">                needWake = mBlocked &amp;&amp; p.target == <span class=\"keyword\">null</span> &amp;&amp; msg.isAsynchronous();</div><div class=\"line\">                Message prev;</div><div class=\"line\">                <span class=\"keyword\">for</span> (;;) &#123;</div><div class=\"line\">                    prev = p;</div><div class=\"line\">                    p = p.next;</div><div class=\"line\">                    <span class=\"keyword\">if</span> (p == <span class=\"keyword\">null</span> || when &lt; p.when) &#123;</div><div class=\"line\">                        <span class=\"keyword\">break</span>;</div><div class=\"line\">                    &#125;</div><div class=\"line\">                    <span class=\"keyword\">if</span> (needWake &amp;&amp; p.isAsynchronous()) &#123;</div><div class=\"line\">                        needWake = <span class=\"keyword\">false</span>;</div><div class=\"line\">                    &#125;</div><div class=\"line\">                &#125;</div><div class=\"line\">                msg.next = p; <span class=\"comment\">// invariant: p == prev.next</span></div><div class=\"line\">                prev.next = msg;</div><div class=\"line\">            &#125;</div><div class=\"line\"></div><div class=\"line\">            <span class=\"comment\">// We can assume mPtr != 0 because mQuitting is false.</span></div><div class=\"line\">            <span class=\"keyword\">if</span> (needWake) &#123;</div><div class=\"line\">                nativeWake(mPtr);</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;</div><div class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">true</span>;</div><div class=\"line\">    &#125;</div></pre></td></tr></table></figure></p>\n<p>从其实现来安，主要操作其实就是单链表的插入操作。<br>next的实现如下：<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div><div class=\"line\">71</div><div class=\"line\">72</div><div class=\"line\">73</div><div class=\"line\">74</div><div class=\"line\">75</div><div class=\"line\">76</div><div class=\"line\">77</div><div class=\"line\">78</div><div class=\"line\">79</div><div class=\"line\">80</div><div class=\"line\">81</div><div class=\"line\">82</div><div class=\"line\">83</div><div class=\"line\">84</div><div class=\"line\">85</div><div class=\"line\">86</div><div class=\"line\">87</div><div class=\"line\">88</div><div class=\"line\">89</div><div class=\"line\">90</div><div class=\"line\">91</div><div class=\"line\">92</div><div class=\"line\">93</div><div class=\"line\">94</div><div class=\"line\">95</div><div class=\"line\">96</div><div class=\"line\">97</div><div class=\"line\">98</div><div class=\"line\">99</div><div class=\"line\">100</div><div class=\"line\">101</div><div class=\"line\">102</div><div class=\"line\">103</div><div class=\"line\">104</div><div class=\"line\">105</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\">Message <span class=\"title\">next</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">        <span class=\"comment\">// Return here if the message loop has already quit and been disposed.</span></div><div class=\"line\">        <span class=\"comment\">// This can happen if the application tries to restart a looper after quit</span></div><div class=\"line\">        <span class=\"comment\">// which is not supported.</span></div><div class=\"line\">        <span class=\"keyword\">final</span> <span class=\"keyword\">long</span> ptr = mPtr;</div><div class=\"line\">        <span class=\"keyword\">if</span> (ptr == <span class=\"number\">0</span>) &#123;</div><div class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">null</span>;</div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\">        <span class=\"keyword\">int</span> pendingIdleHandlerCount = -<span class=\"number\">1</span>; <span class=\"comment\">// -1 only during first iteration</span></div><div class=\"line\">        <span class=\"keyword\">int</span> nextPollTimeoutMillis = <span class=\"number\">0</span>;</div><div class=\"line\">        <span class=\"keyword\">for</span> (;;) &#123;</div><div class=\"line\">            <span class=\"keyword\">if</span> (nextPollTimeoutMillis != <span class=\"number\">0</span>) &#123;</div><div class=\"line\">                Binder.flushPendingCommands();</div><div class=\"line\">            &#125;</div><div class=\"line\"></div><div class=\"line\">            nativePollOnce(ptr, nextPollTimeoutMillis);</div><div class=\"line\"></div><div class=\"line\">            <span class=\"keyword\">synchronized</span> (<span class=\"keyword\">this</span>) &#123;</div><div class=\"line\">                <span class=\"comment\">// Try to retrieve the next message.  Return if found.</span></div><div class=\"line\">                <span class=\"keyword\">final</span> <span class=\"keyword\">long</span> now = SystemClock.uptimeMillis();</div><div class=\"line\">                Message prevMsg = <span class=\"keyword\">null</span>;</div><div class=\"line\">                Message msg = mMessages;</div><div class=\"line\">                <span class=\"keyword\">if</span> (msg != <span class=\"keyword\">null</span> &amp;&amp; msg.target == <span class=\"keyword\">null</span>) &#123;</div><div class=\"line\">                    <span class=\"comment\">// Stalled by a barrier.  Find the next asynchronous message in the queue.</span></div><div class=\"line\">                    do &#123;</div><div class=\"line\">                        prevMsg = msg;</div><div class=\"line\">                        msg = msg.next;</div><div class=\"line\">                    &#125; <span class=\"keyword\">while</span> (msg != <span class=\"keyword\">null</span> &amp;&amp; !msg.isAsynchronous());</div><div class=\"line\">                &#125;</div><div class=\"line\">                <span class=\"keyword\">if</span> (msg != <span class=\"keyword\">null</span>) &#123;</div><div class=\"line\">                    <span class=\"keyword\">if</span> (now &lt; msg.when) &#123;</div><div class=\"line\">                        <span class=\"comment\">// Next message is not ready.  Set a timeout to wake up when it is ready.</span></div><div class=\"line\">                        nextPollTimeoutMillis = (<span class=\"keyword\">int</span>) Math.min(msg.when - now, Integer.MAX_VALUE);</div><div class=\"line\">                    &#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">                        <span class=\"comment\">// Got a message.</span></div><div class=\"line\">                        mBlocked = <span class=\"keyword\">false</span>;</div><div class=\"line\">                        <span class=\"keyword\">if</span> (prevMsg != <span class=\"keyword\">null</span>) &#123;</div><div class=\"line\">                            prevMsg.next = msg.next;</div><div class=\"line\">                        &#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">                            mMessages = msg.next;</div><div class=\"line\">                        &#125;</div><div class=\"line\">                        msg.next = <span class=\"keyword\">null</span>;</div><div class=\"line\">                        <span class=\"keyword\">if</span> (DEBUG) Log.v(TAG, <span class=\"string\">\"Returning message: \"</span> + msg);</div><div class=\"line\">                        msg.markInUse();</div><div class=\"line\">                        <span class=\"keyword\">return</span> msg;</div><div class=\"line\">                    &#125;</div><div class=\"line\">                &#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">                    <span class=\"comment\">// No more messages.</span></div><div class=\"line\">                    nextPollTimeoutMillis = -<span class=\"number\">1</span>;</div><div class=\"line\">                &#125;</div><div class=\"line\"></div><div class=\"line\">                <span class=\"comment\">// Process the quit message now that all pending messages have been handled.</span></div><div class=\"line\">                <span class=\"keyword\">if</span> (mQuitting) &#123;</div><div class=\"line\">                    dispose();</div><div class=\"line\">                    <span class=\"keyword\">return</span> <span class=\"keyword\">null</span>;</div><div class=\"line\">                &#125;</div><div class=\"line\"></div><div class=\"line\">                <span class=\"comment\">// If first time idle, then get the number of idlers to run.</span></div><div class=\"line\">                <span class=\"comment\">// Idle handles only run if the queue is empty or if the first message</span></div><div class=\"line\">                <span class=\"comment\">// in the queue (possibly a barrier) is due to be handled in the future.</span></div><div class=\"line\">                <span class=\"keyword\">if</span> (pendingIdleHandlerCount &lt; <span class=\"number\">0</span></div><div class=\"line\">                        &amp;&amp; (mMessages == <span class=\"keyword\">null</span> || now &lt; mMessages.when)) &#123;</div><div class=\"line\">                    pendingIdleHandlerCount = mIdleHandlers.size();</div><div class=\"line\">                &#125;</div><div class=\"line\">                <span class=\"keyword\">if</span> (pendingIdleHandlerCount &lt;= <span class=\"number\">0</span>) &#123;</div><div class=\"line\">                    <span class=\"comment\">// No idle handlers to run.  Loop and wait some more.</span></div><div class=\"line\">                    mBlocked = <span class=\"keyword\">true</span>;</div><div class=\"line\">                    <span class=\"keyword\">continue</span>;</div><div class=\"line\">                &#125;</div><div class=\"line\"></div><div class=\"line\">                <span class=\"keyword\">if</span> (mPendingIdleHandlers == <span class=\"keyword\">null</span>) &#123;</div><div class=\"line\">                    mPendingIdleHandlers = <span class=\"keyword\">new</span> IdleHandler[Math.max(pendingIdleHandlerCount, <span class=\"number\">4</span>)];</div><div class=\"line\">                &#125;</div><div class=\"line\">                mPendingIdleHandlers = mIdleHandlers.toArray(mPendingIdleHandlers);</div><div class=\"line\">            &#125;</div><div class=\"line\"></div><div class=\"line\">            <span class=\"comment\">// Run the idle handlers.</span></div><div class=\"line\">            <span class=\"comment\">// We only ever reach this code block during the first iteration.</span></div><div class=\"line\">            <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; pendingIdleHandlerCount; i++) &#123;</div><div class=\"line\">                <span class=\"keyword\">final</span> IdleHandler idler = mPendingIdleHandlers[i];</div><div class=\"line\">                mPendingIdleHandlers[i] = <span class=\"keyword\">null</span>; <span class=\"comment\">// release the reference to the handler</span></div><div class=\"line\"></div><div class=\"line\">                <span class=\"keyword\">boolean</span> keep = <span class=\"keyword\">false</span>;</div><div class=\"line\">                <span class=\"keyword\">try</span> &#123;</div><div class=\"line\">                    keep = idler.queueIdle();</div><div class=\"line\">                &#125; <span class=\"keyword\">catch</span> (Throwable t) &#123;</div><div class=\"line\">                    Log.wtf(TAG, <span class=\"string\">\"IdleHandler threw exception\"</span>, t);</div><div class=\"line\">                &#125;</div><div class=\"line\"></div><div class=\"line\">                <span class=\"keyword\">if</span> (!keep) &#123;</div><div class=\"line\">                    <span class=\"keyword\">synchronized</span> (<span class=\"keyword\">this</span>) &#123;</div><div class=\"line\">                        mIdleHandlers.remove(idler);</div><div class=\"line\">                    &#125;</div><div class=\"line\">                &#125;</div><div class=\"line\">            &#125;</div><div class=\"line\"></div><div class=\"line\">            <span class=\"comment\">// Reset the idle handler count to 0 so we do not run them again.</span></div><div class=\"line\">            pendingIdleHandlerCount = <span class=\"number\">0</span>;</div><div class=\"line\"></div><div class=\"line\">            <span class=\"comment\">// While calling an idle handler, a new message could have been delivered</span></div><div class=\"line\">            <span class=\"comment\">// so go back and look again for a pending message without waiting.</span></div><div class=\"line\">            nextPollTimeoutMillis = <span class=\"number\">0</span>;</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div></pre></td></tr></table></figure></p>\n<p>可以返现next方法是一个无限循环的方法，如果消息队列为空，那么next方法会一直阻塞在这里，当有消息到来时，next方法会返回这条消息并将其从单链表中移除</p>\n<h3 id=\"Looper的工作原理\"><a href=\"#Looper的工作原理\" class=\"headerlink\" title=\"Looper的工作原理\"></a>Looper的工作原理</h3><p>　　Looper在Android的消息机制中扮演者消息循环的角色，具体来说就是它会不停地从MessageQueue中查看是否有新消息，如果有新消息就会立刻处理，否则就一直阻塞在那里。首先看一下它的构造方法，在构造中它会创建一个MessageQueue也就是消息队列，然后将当前线程的对象保存起来，如下：<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> <span class=\"title\">Looper</span><span class=\"params\">(<span class=\"keyword\">boolean</span> quitAllowed)</span> </span>&#123;</div><div class=\"line\">      mQueue = <span class=\"keyword\">new</span> MessageQueue(quitAllowed);</div><div class=\"line\">      mThread = Thread.currentThread();</div><div class=\"line\">  &#125;</div></pre></td></tr></table></figure></p>\n<p>　　Handler的工作需要Looper，没有Looper的线程就会报错，我们可以通过Looper.prepare()即可为当前线程创建一个Looper，接着通过Looper.loop()来开启消息循环。Looper除了prepare方法外，还提供了prepareMainLoop方法，这个方法主要是给主线程也就是ActivityThread创建Looper使用的，其本质也是通过prepare方法来实现的。由于主线程的Looper比较特殊，所以Looper提供了一个getMainLooper方法，通过它可以在任何地方获取到主线程的Looper。Looper也是可以退出的，Looper提供了quit和quitSafely来退出一个Looper，二者的区别是：quit会直接突出Looper，而quitSafely只是设定一个退出标记，然后把消息队列中的已有消息处理完毕后才安全的退出。Looper退出后，通过Handler发送的消息会失败，这个时候Handler的send方法会返回false。在子线程中，如果手动为其创建了Looper，那么在所有的事情完成以后应该调用quit方法来总之消息循环，否则这个子线程就会一直处于等待的状态，而如果退出Looper以后，这个线程就会立刻终止，因此建议不需要的时候终止Looper。<br> Looper最重要的一个方法是loop方法，只有调用了loop后，消息循环系统才会真正的起作用，实现如下：<br> <figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">/**</div><div class=\"line\">   * Run the message queue in this thread. Be sure to call</div><div class=\"line\">   * &#123;<span class=\"doctag\">@link</span> #quit()&#125; to end the loop.</div><div class=\"line\">   */</span></div><div class=\"line\">  <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">loop</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">      <span class=\"keyword\">final</span> Looper me = myLooper();</div><div class=\"line\">      <span class=\"keyword\">if</span> (me == <span class=\"keyword\">null</span>) &#123;</div><div class=\"line\">          <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> RuntimeException(<span class=\"string\">\"No Looper; Looper.prepare() wasn't called on this thread.\"</span>);</div><div class=\"line\">      &#125;</div><div class=\"line\">      <span class=\"keyword\">final</span> MessageQueue queue = me.mQueue;</div><div class=\"line\"></div><div class=\"line\">      <span class=\"comment\">// Make sure the identity of this thread is that of the local process,</span></div><div class=\"line\">      <span class=\"comment\">// and keep track of what that identity token actually is.</span></div><div class=\"line\">      Binder.clearCallingIdentity();</div><div class=\"line\">      <span class=\"keyword\">final</span> <span class=\"keyword\">long</span> ident = Binder.clearCallingIdentity();</div><div class=\"line\"></div><div class=\"line\">      <span class=\"keyword\">for</span> (;;) &#123;</div><div class=\"line\">          Message msg = queue.next(); <span class=\"comment\">// might block</span></div><div class=\"line\">          <span class=\"keyword\">if</span> (msg == <span class=\"keyword\">null</span>) &#123;</div><div class=\"line\">              <span class=\"comment\">// No message indicates that the message queue is quitting.</span></div><div class=\"line\">              <span class=\"keyword\">return</span>;</div><div class=\"line\">          &#125;</div><div class=\"line\"></div><div class=\"line\">          <span class=\"comment\">// This must be in a local variable, in case a UI event sets the logger</span></div><div class=\"line\">          <span class=\"keyword\">final</span> Printer logging = me.mLogging;</div><div class=\"line\">          <span class=\"keyword\">if</span> (logging != <span class=\"keyword\">null</span>) &#123;</div><div class=\"line\">              logging.println(<span class=\"string\">\"&gt;&gt;&gt;&gt;&gt; Dispatching to \"</span> + msg.target + <span class=\"string\">\" \"</span> +</div><div class=\"line\">                      msg.callback + <span class=\"string\">\": \"</span> + msg.what);</div><div class=\"line\">          &#125;</div><div class=\"line\"></div><div class=\"line\">          <span class=\"keyword\">final</span> <span class=\"keyword\">long</span> traceTag = me.mTraceTag;</div><div class=\"line\">          <span class=\"keyword\">if</span> (traceTag != <span class=\"number\">0</span>) &#123;</div><div class=\"line\">              Trace.traceBegin(traceTag, msg.target.getTraceName(msg));</div><div class=\"line\">          &#125;</div><div class=\"line\">          <span class=\"keyword\">try</span> &#123;</div><div class=\"line\">              msg.target.dispatchMessage(msg);</div><div class=\"line\">          &#125; <span class=\"keyword\">finally</span> &#123;</div><div class=\"line\">              <span class=\"keyword\">if</span> (traceTag != <span class=\"number\">0</span>) &#123;</div><div class=\"line\">                  Trace.traceEnd(traceTag);</div><div class=\"line\">              &#125;</div><div class=\"line\">          &#125;</div><div class=\"line\"></div><div class=\"line\">          <span class=\"keyword\">if</span> (logging != <span class=\"keyword\">null</span>) &#123;</div><div class=\"line\">              logging.println(<span class=\"string\">\"&lt;&lt;&lt;&lt;&lt; Finished to \"</span> + msg.target + <span class=\"string\">\" \"</span> + msg.callback);</div><div class=\"line\">          &#125;</div><div class=\"line\"></div><div class=\"line\">          <span class=\"comment\">// Make sure that during the course of dispatching the</span></div><div class=\"line\">          <span class=\"comment\">// identity of the thread wasn't corrupted.</span></div><div class=\"line\">          <span class=\"keyword\">final</span> <span class=\"keyword\">long</span> newIdent = Binder.clearCallingIdentity();</div><div class=\"line\">          <span class=\"keyword\">if</span> (ident != newIdent) &#123;</div><div class=\"line\">              Log.wtf(TAG, <span class=\"string\">\"Thread identity changed from 0x\"</span></div><div class=\"line\">                      + Long.toHexString(ident) + <span class=\"string\">\" to 0x\"</span></div><div class=\"line\">                      + Long.toHexString(newIdent) + <span class=\"string\">\" while dispatching to \"</span></div><div class=\"line\">                      + msg.target.getClass().getName() + <span class=\"string\">\" \"</span></div><div class=\"line\">                      + msg.callback + <span class=\"string\">\" what=\"</span> + msg.what);</div><div class=\"line\">          &#125;</div><div class=\"line\"></div><div class=\"line\">          msg.recycleUnchecked();</div><div class=\"line\">      &#125;</div><div class=\"line\">  &#125;</div></pre></td></tr></table></figure></p>\n<p> 　　loop方法是一个死循环，唯一跳出循环的方式是MessageQueue的next方法返回了null，当Looper的quit方法被调用时，Looper就会通知消息队列退出，当消息队列被标记为退出状态时，它的next方法就会返回null，也就是说，Looper必须退出，否则loop方法就会无限循环下去，loop方法会调用MessageQueue的next方法来获取新消息，而next方法是一个阻塞操作，当没有消息时，next方法会一直阻塞在那里，这也导致loop方法一直阻塞在那里，如果MessageQueue的next方法返回了新消息，Looper就会处理这条消息，  msg.target.dispatchMessage(msg)，这里的  msg.target是发送这条消息的handler对象，这样Handler发送的消息最终又交个它的  dispatchMessage(msg);方法来处理了，但是这里不同的是，Handler的dispatchMessage方法是在创建Handler时所使用的Looper中执行的，这样就成功的将代码逻辑切换到指定的线程中去执行了。</p>\n<h3 id=\"Handler的工作原理\"><a href=\"#Handler的工作原理\" class=\"headerlink\" title=\"Handler的工作原理\"></a>Handler的工作原理</h3><p> Handler的工作主要包含消息的发送和接收过程。消息的发送可以通过post的一系列方法以及send的一系列方法来实现，post的一系列方法最终是通过send的一列方法来实现的。发送一条消息的典型过程如下：<br> <figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div></pre></td><td class=\"code\"><pre><div class=\"line\"> <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">final</span> <span class=\"keyword\">boolean</span> <span class=\"title\">sendMessage</span><span class=\"params\">(Message msg)</span></div><div class=\"line\">   </span>&#123;</div><div class=\"line\">       <span class=\"keyword\">return</span> sendMessageDelayed(msg, <span class=\"number\">0</span>);</div><div class=\"line\">   &#125;</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">final</span> <span class=\"keyword\">boolean</span> <span class=\"title\">sendMessageDelayed</span><span class=\"params\">(Message msg, <span class=\"keyword\">long</span> delayMillis)</span></div><div class=\"line\">   </span>&#123;</div><div class=\"line\">       <span class=\"keyword\">if</span> (delayMillis &lt; <span class=\"number\">0</span>) &#123;</div><div class=\"line\">           delayMillis = <span class=\"number\">0</span>;</div><div class=\"line\">       &#125;</div><div class=\"line\">       <span class=\"keyword\">return</span> sendMessageAtTime(msg, SystemClock.uptimeMillis() + delayMillis);</div><div class=\"line\">   &#125;</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">sendMessageAtTime</span><span class=\"params\">(Message msg, <span class=\"keyword\">long</span> uptimeMillis)</span> </span>&#123;</div><div class=\"line\">       MessageQueue queue = mQueue;</div><div class=\"line\">       <span class=\"keyword\">if</span> (queue == <span class=\"keyword\">null</span>) &#123;</div><div class=\"line\">           RuntimeException e = <span class=\"keyword\">new</span> RuntimeException(</div><div class=\"line\">                   <span class=\"keyword\">this</span> + <span class=\"string\">\" sendMessageAtTime() called with no mQueue\"</span>);</div><div class=\"line\">           Log.w(<span class=\"string\">\"Looper\"</span>, e.getMessage(), e);</div><div class=\"line\">           <span class=\"keyword\">return</span> <span class=\"keyword\">false</span>;</div><div class=\"line\">       &#125;</div><div class=\"line\">       <span class=\"keyword\">return</span> enqueueMessage(queue, msg, uptimeMillis);</div><div class=\"line\">   &#125;</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">boolean</span> <span class=\"title\">enqueueMessage</span><span class=\"params\">(MessageQueue queue, Message msg, <span class=\"keyword\">long</span> uptimeMillis)</span> </span>&#123;</div><div class=\"line\">       msg.target = <span class=\"keyword\">this</span>;</div><div class=\"line\">       <span class=\"keyword\">if</span> (mAsynchronous) &#123;</div><div class=\"line\">           msg.setAsynchronous(<span class=\"keyword\">true</span>);</div><div class=\"line\">       &#125;</div><div class=\"line\">       <span class=\"keyword\">return</span> queue.enqueueMessage(msg, uptimeMillis);</div><div class=\"line\">   &#125;</div></pre></td></tr></table></figure></p>\n<p> 　　可以发现，Handler发送消息的过程仅仅是向消息队列中插入了一条消息，MessageQueue的next方法就会返回这条消息给Looper，Looper收到消息后就开始处理了，最终消息由Looper交由Handler处理，即Handler的dispatchMessage方法会被调用，这时Handler就是进入了处理消息的阶段。dispatchMessage的实现如下：<br> <figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">dispatchMessage</span><span class=\"params\">(Message msg)</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">if</span> (msg.callback != <span class=\"keyword\">null</span>) &#123;</div><div class=\"line\">        handleCallback(msg);</div><div class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">        <span class=\"keyword\">if</span> (mCallback != <span class=\"keyword\">null</span>) &#123;</div><div class=\"line\">            <span class=\"keyword\">if</span> (mCallback.handleMessage(msg)) &#123;</div><div class=\"line\">                <span class=\"keyword\">return</span>;</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;</div><div class=\"line\">        handleMessage(msg);</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p> Handler处理消息的过程如下：</p>\n<ol>\n<li><p>检查Message的callback是否为null，不为null就通过handleCallback来处理消息，Message的callback是一个Runnable对象，实际上就是Handler的post方法所传递的Runnable参数。handleCallback的逻辑如下：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">handleCallback</span><span class=\"params\">(Message message)</span> </span>&#123;</div><div class=\"line\">       message.callback.run();</div><div class=\"line\">   &#125;</div></pre></td></tr></table></figure>\n</li>\n<li><p>其次，检查mCallback是否为null，不为null就调用没CallBack的HandlerMessage方法来处理消息，Callback是个接口，它的定义如下：</p>\n<pre><code class=\"java\"><span class=\"comment\">/**\n * Callback interface you can use when instantiating a Handler to avoid\n * having to implement your own subclass of Handler.\n *\n * <span class=\"doctag\">@param</span> msg A {<span class=\"doctag\">@link</span> android.os.Message Message} object\n * <span class=\"doctag\">@return</span> True if no further handling is desired\n */</span>\n<span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">interface</span> <span class=\"title\">Callback</span> </span>{\n    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">handleMessage</span><span class=\"params\">(Message msg)</span></span>;\n}\n</code></pre>\n<p>通过Callback可以采用如下方式来创建Handler对象：Handler handler = new Handler(callback)。</p>\n</li>\n</ol>\n<ol>\n<li>最后，调用Handler的handleMessahe方法来处理消息。</li>\n</ol>\n<hr>\n<p>以上</p>"},{"title":"JVM垃圾回收-对象已死？","date":"2017-03-29T09:23:36.000Z","keywords":"jvm判断对象是否回收","_content":"　　在堆里面存放着Java世界中几乎所有的对象实例，垃圾收集器在对堆进行回收前，第一件事情就是要确定这些对象之中哪些还`存活`着，哪些已经`死去`(即不能再被任何途径使用的对象)。\n<!--more-->\n### 引用计数算法\n　　很多教科书判断对象是否存活的算法是这样的：给对象中添加一个引用计数器，每当有一个地方引用它时，计数器值就加1;当引用失效时，计数器就减1；任何时刻计数器为0的对象就是不可能再被使用的。\n客观来讲，引用计数法(Reference Counting)的实现简单，判定效率也很高，在大部分情况下它都是一个不错的算法，但是，至少主流的Java虚拟机里面没有选用引用计数器算法来管理内存，其中主要的原因是它很难解决对象之间相互循环引用的问题。\n### 可达性分析算法\n　　在主流的商用程序语言的主流实现中，都是通过可达性分析(Reachability Analysis)来判定对象是否存活的。这个算吗的基本思路就是通过一系列的称为`GC Roots`的对象作为起始点，从这些节点开始向下搜索，搜索所走过的路径称为引用链(Reference Chain),当一个对象到GC Roots没有任何引用链相连时(在图论中，就是从GC Roots到这个对象不可达)，则证明此对象是不可用的。在Java语言中，可作为GC Roots的对象包括一下几种：\n* 虚拟机栈(栈帧中的本地变量表)中引用的对象。\n* 方法区中静态属性引用的对象。\n* 方法区中常量引用的对象。\n* 本地方法栈中JNI(一般说的Native方法)引用的对象\n\n### 生存还是死亡\n　　即使在可达性分析算法中不可达的对象，也并非是非死不可的，这时候他们暂时处于缓刑阶段，要真正宣告一个对象死亡，至少要经历两次标记过程：如果对象在进行可达性分析后发现没有与GC Roots相连接的引用链，那它将会被第一次标记并且进行一次筛选，筛选的条件是此对象是否有必要执行finalize()方法。当对象没有覆盖finalize()方法，或者finalize()方法已经被虚拟机调用过，虚拟机将这两种情况都视为\"没有必要执行\"。\n如果这个对象呗判定为有必要执行finalize()方法，那么这个对象将会放置在一个叫做`F-Queue`的队列之中，并在稍后由一个虚拟机自动建立的、优先级低的Finalizer线程去执行它。这里所谓的执行是指虚拟机会触发这个方法，但并不承诺会等待它运行结束，这样做的原因是：如果一个对象在finalize()方法中执行缓慢，或者发生了死循环，将很可能会导致`F-Queue`队列中其他对象永久处于等待，甚至导致整个内存回收系统崩溃。finalize()方法是对象 逃脱死亡命运的最后一次机会，稍后GC将对`F-Queue`中的对象进行第二次小规模的标记。\n### 回收方法区\n　　很多人认为方法区是没有垃圾收集的，Java虚拟机规范中确实说过可以不要求虚拟机方法区实现垃圾收集，而且在方法区中进行垃圾收集的性价比一般比较低：在堆中，尤其是在新生代中，常规应用进行一次垃圾收集一般可以回收70%-95%的空间，而永久代的垃圾收集效率远低于此。\n永久代的垃圾收集主要回收两部分内容：废弃常量和无用的类。回收废弃常量与回收Java堆中的对象非常类似。以常量池中字面量的回收为例：假如一个字符串\"ABC\"已经进入了常量池中，但是当前系统没有任何一个String对象是叫做\"ABC\"的，换句话说，就是没有任何String对象引用常量池中的\"ABC\"常量，也没有其他地方引用了这个字面量，如果这时繁盛内存回收，而且必要的话，这个\"ABC\"常量就会被系统清理出常量池，常量池中的其他类、方法、字段的符号引用也与此类似。\n判定一个常量是否是\"废弃常量\"比较简单，而要判定一个类是否是\"无用的类\"的条件则相对苛刻许多。类需要同时满足下面三个调教才能算是\"无用的类\"：\n* 该类所有的实例都已经被回收，也就是Java堆中不存在该类的任何实例。\n* 加载该类的ClassLoader已经被回收。\n* 该类对用的java.lang.Class对象没有在任何对方被引用，无法在任何地方通过反射访问该类的方法。\n　　虚拟机可以对满足上述3个条件的无用类进行回收，这里说的仅仅是“可以”，而并不是和对象一样，不使用了就必然会回收。 是否对类进行回收，HotSpot虚拟机提供了-Xnoclassgc参数进行控制，还可以使用-verbose：class以及-XX：+TraceClassLoading、 -XX：+TraceClassUnLoading查看类加载和卸载信息，其中-verbose：class和-XX：+TraceClassLoading可以在Product版的虚拟机中使用，-XX：+TraceClassUnLoading参数需要FastDebug版的虚拟机支持。在大量使用反射、 动态代理、 CGLib等ByteCode框架、 动态生成JSP以及OSGi这类频繁自定义ClassLoader的场景都需要虚拟机具备类卸载的功能，以保证永久代不会溢出。\n----\n以上\n","source":"_posts/JVM垃圾回收-对象已死？.md","raw":"---\ntitle: JVM垃圾回收-对象已死？\ndate: 2017-03-29 17:23:36\ntags: [JVM]\nkeywords: jvm判断对象是否回收\n---\n　　在堆里面存放着Java世界中几乎所有的对象实例，垃圾收集器在对堆进行回收前，第一件事情就是要确定这些对象之中哪些还`存活`着，哪些已经`死去`(即不能再被任何途径使用的对象)。\n<!--more-->\n### 引用计数算法\n　　很多教科书判断对象是否存活的算法是这样的：给对象中添加一个引用计数器，每当有一个地方引用它时，计数器值就加1;当引用失效时，计数器就减1；任何时刻计数器为0的对象就是不可能再被使用的。\n客观来讲，引用计数法(Reference Counting)的实现简单，判定效率也很高，在大部分情况下它都是一个不错的算法，但是，至少主流的Java虚拟机里面没有选用引用计数器算法来管理内存，其中主要的原因是它很难解决对象之间相互循环引用的问题。\n### 可达性分析算法\n　　在主流的商用程序语言的主流实现中，都是通过可达性分析(Reachability Analysis)来判定对象是否存活的。这个算吗的基本思路就是通过一系列的称为`GC Roots`的对象作为起始点，从这些节点开始向下搜索，搜索所走过的路径称为引用链(Reference Chain),当一个对象到GC Roots没有任何引用链相连时(在图论中，就是从GC Roots到这个对象不可达)，则证明此对象是不可用的。在Java语言中，可作为GC Roots的对象包括一下几种：\n* 虚拟机栈(栈帧中的本地变量表)中引用的对象。\n* 方法区中静态属性引用的对象。\n* 方法区中常量引用的对象。\n* 本地方法栈中JNI(一般说的Native方法)引用的对象\n\n### 生存还是死亡\n　　即使在可达性分析算法中不可达的对象，也并非是非死不可的，这时候他们暂时处于缓刑阶段，要真正宣告一个对象死亡，至少要经历两次标记过程：如果对象在进行可达性分析后发现没有与GC Roots相连接的引用链，那它将会被第一次标记并且进行一次筛选，筛选的条件是此对象是否有必要执行finalize()方法。当对象没有覆盖finalize()方法，或者finalize()方法已经被虚拟机调用过，虚拟机将这两种情况都视为\"没有必要执行\"。\n如果这个对象呗判定为有必要执行finalize()方法，那么这个对象将会放置在一个叫做`F-Queue`的队列之中，并在稍后由一个虚拟机自动建立的、优先级低的Finalizer线程去执行它。这里所谓的执行是指虚拟机会触发这个方法，但并不承诺会等待它运行结束，这样做的原因是：如果一个对象在finalize()方法中执行缓慢，或者发生了死循环，将很可能会导致`F-Queue`队列中其他对象永久处于等待，甚至导致整个内存回收系统崩溃。finalize()方法是对象 逃脱死亡命运的最后一次机会，稍后GC将对`F-Queue`中的对象进行第二次小规模的标记。\n### 回收方法区\n　　很多人认为方法区是没有垃圾收集的，Java虚拟机规范中确实说过可以不要求虚拟机方法区实现垃圾收集，而且在方法区中进行垃圾收集的性价比一般比较低：在堆中，尤其是在新生代中，常规应用进行一次垃圾收集一般可以回收70%-95%的空间，而永久代的垃圾收集效率远低于此。\n永久代的垃圾收集主要回收两部分内容：废弃常量和无用的类。回收废弃常量与回收Java堆中的对象非常类似。以常量池中字面量的回收为例：假如一个字符串\"ABC\"已经进入了常量池中，但是当前系统没有任何一个String对象是叫做\"ABC\"的，换句话说，就是没有任何String对象引用常量池中的\"ABC\"常量，也没有其他地方引用了这个字面量，如果这时繁盛内存回收，而且必要的话，这个\"ABC\"常量就会被系统清理出常量池，常量池中的其他类、方法、字段的符号引用也与此类似。\n判定一个常量是否是\"废弃常量\"比较简单，而要判定一个类是否是\"无用的类\"的条件则相对苛刻许多。类需要同时满足下面三个调教才能算是\"无用的类\"：\n* 该类所有的实例都已经被回收，也就是Java堆中不存在该类的任何实例。\n* 加载该类的ClassLoader已经被回收。\n* 该类对用的java.lang.Class对象没有在任何对方被引用，无法在任何地方通过反射访问该类的方法。\n　　虚拟机可以对满足上述3个条件的无用类进行回收，这里说的仅仅是“可以”，而并不是和对象一样，不使用了就必然会回收。 是否对类进行回收，HotSpot虚拟机提供了-Xnoclassgc参数进行控制，还可以使用-verbose：class以及-XX：+TraceClassLoading、 -XX：+TraceClassUnLoading查看类加载和卸载信息，其中-verbose：class和-XX：+TraceClassLoading可以在Product版的虚拟机中使用，-XX：+TraceClassUnLoading参数需要FastDebug版的虚拟机支持。在大量使用反射、 动态代理、 CGLib等ByteCode框架、 动态生成JSP以及OSGi这类频繁自定义ClassLoader的场景都需要虚拟机具备类卸载的功能，以保证永久代不会溢出。\n----\n以上\n","slug":"JVM垃圾回收-对象已死？","published":1,"updated":"2018-08-04T05:14:41.569Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjl3vbtqr0016isdgs7vkft9i","content":"<p>　　在堆里面存放着Java世界中几乎所有的对象实例，垃圾收集器在对堆进行回收前，第一件事情就是要确定这些对象之中哪些还<code>存活</code>着，哪些已经<code>死去</code>(即不能再被任何途径使用的对象)。<br><a id=\"more\"></a></p>\n<h3 id=\"引用计数算法\"><a href=\"#引用计数算法\" class=\"headerlink\" title=\"引用计数算法\"></a>引用计数算法</h3><p>　　很多教科书判断对象是否存活的算法是这样的：给对象中添加一个引用计数器，每当有一个地方引用它时，计数器值就加1;当引用失效时，计数器就减1；任何时刻计数器为0的对象就是不可能再被使用的。<br>客观来讲，引用计数法(Reference Counting)的实现简单，判定效率也很高，在大部分情况下它都是一个不错的算法，但是，至少主流的Java虚拟机里面没有选用引用计数器算法来管理内存，其中主要的原因是它很难解决对象之间相互循环引用的问题。</p>\n<h3 id=\"可达性分析算法\"><a href=\"#可达性分析算法\" class=\"headerlink\" title=\"可达性分析算法\"></a>可达性分析算法</h3><p>　　在主流的商用程序语言的主流实现中，都是通过可达性分析(Reachability Analysis)来判定对象是否存活的。这个算吗的基本思路就是通过一系列的称为<code>GC Roots</code>的对象作为起始点，从这些节点开始向下搜索，搜索所走过的路径称为引用链(Reference Chain),当一个对象到GC Roots没有任何引用链相连时(在图论中，就是从GC Roots到这个对象不可达)，则证明此对象是不可用的。在Java语言中，可作为GC Roots的对象包括一下几种：</p>\n<ul>\n<li>虚拟机栈(栈帧中的本地变量表)中引用的对象。</li>\n<li>方法区中静态属性引用的对象。</li>\n<li>方法区中常量引用的对象。</li>\n<li>本地方法栈中JNI(一般说的Native方法)引用的对象</li>\n</ul>\n<h3 id=\"生存还是死亡\"><a href=\"#生存还是死亡\" class=\"headerlink\" title=\"生存还是死亡\"></a>生存还是死亡</h3><p>　　即使在可达性分析算法中不可达的对象，也并非是非死不可的，这时候他们暂时处于缓刑阶段，要真正宣告一个对象死亡，至少要经历两次标记过程：如果对象在进行可达性分析后发现没有与GC Roots相连接的引用链，那它将会被第一次标记并且进行一次筛选，筛选的条件是此对象是否有必要执行finalize()方法。当对象没有覆盖finalize()方法，或者finalize()方法已经被虚拟机调用过，虚拟机将这两种情况都视为”没有必要执行”。<br>如果这个对象呗判定为有必要执行finalize()方法，那么这个对象将会放置在一个叫做<code>F-Queue</code>的队列之中，并在稍后由一个虚拟机自动建立的、优先级低的Finalizer线程去执行它。这里所谓的执行是指虚拟机会触发这个方法，但并不承诺会等待它运行结束，这样做的原因是：如果一个对象在finalize()方法中执行缓慢，或者发生了死循环，将很可能会导致<code>F-Queue</code>队列中其他对象永久处于等待，甚至导致整个内存回收系统崩溃。finalize()方法是对象 逃脱死亡命运的最后一次机会，稍后GC将对<code>F-Queue</code>中的对象进行第二次小规模的标记。</p>\n<h3 id=\"回收方法区\"><a href=\"#回收方法区\" class=\"headerlink\" title=\"回收方法区\"></a>回收方法区</h3><p>　　很多人认为方法区是没有垃圾收集的，Java虚拟机规范中确实说过可以不要求虚拟机方法区实现垃圾收集，而且在方法区中进行垃圾收集的性价比一般比较低：在堆中，尤其是在新生代中，常规应用进行一次垃圾收集一般可以回收70%-95%的空间，而永久代的垃圾收集效率远低于此。<br>永久代的垃圾收集主要回收两部分内容：废弃常量和无用的类。回收废弃常量与回收Java堆中的对象非常类似。以常量池中字面量的回收为例：假如一个字符串”ABC”已经进入了常量池中，但是当前系统没有任何一个String对象是叫做”ABC”的，换句话说，就是没有任何String对象引用常量池中的”ABC”常量，也没有其他地方引用了这个字面量，如果这时繁盛内存回收，而且必要的话，这个”ABC”常量就会被系统清理出常量池，常量池中的其他类、方法、字段的符号引用也与此类似。<br>判定一个常量是否是”废弃常量”比较简单，而要判定一个类是否是”无用的类”的条件则相对苛刻许多。类需要同时满足下面三个调教才能算是”无用的类”：</p>\n<ul>\n<li>该类所有的实例都已经被回收，也就是Java堆中不存在该类的任何实例。</li>\n<li>加载该类的ClassLoader已经被回收。</li>\n<li>该类对用的java.lang.Class对象没有在任何对方被引用，无法在任何地方通过反射访问该类的方法。<br>　　虚拟机可以对满足上述3个条件的无用类进行回收，这里说的仅仅是“可以”，而并不是和对象一样，不使用了就必然会回收。 是否对类进行回收，HotSpot虚拟机提供了-Xnoclassgc参数进行控制，还可以使用-verbose：class以及-XX：+TraceClassLoading、 -XX：+TraceClassUnLoading查看类加载和卸载信息，其中-verbose：class和-XX：+TraceClassLoading可以在Product版的虚拟机中使用，-XX：+TraceClassUnLoading参数需要FastDebug版的虚拟机支持。在大量使用反射、 动态代理、 CGLib等ByteCode框架、 动态生成JSP以及OSGi这类频繁自定义ClassLoader的场景都需要虚拟机具备类卸载的功能，以保证永久代不会溢出。</li>\n</ul>\n<hr>\n<p>以上</p>\n","excerpt":"<p>　　在堆里面存放着Java世界中几乎所有的对象实例，垃圾收集器在对堆进行回收前，第一件事情就是要确定这些对象之中哪些还<code>存活</code>着，哪些已经<code>死去</code>(即不能再被任何途径使用的对象)。<br>","more":"</p>\n<h3 id=\"引用计数算法\"><a href=\"#引用计数算法\" class=\"headerlink\" title=\"引用计数算法\"></a>引用计数算法</h3><p>　　很多教科书判断对象是否存活的算法是这样的：给对象中添加一个引用计数器，每当有一个地方引用它时，计数器值就加1;当引用失效时，计数器就减1；任何时刻计数器为0的对象就是不可能再被使用的。<br>客观来讲，引用计数法(Reference Counting)的实现简单，判定效率也很高，在大部分情况下它都是一个不错的算法，但是，至少主流的Java虚拟机里面没有选用引用计数器算法来管理内存，其中主要的原因是它很难解决对象之间相互循环引用的问题。</p>\n<h3 id=\"可达性分析算法\"><a href=\"#可达性分析算法\" class=\"headerlink\" title=\"可达性分析算法\"></a>可达性分析算法</h3><p>　　在主流的商用程序语言的主流实现中，都是通过可达性分析(Reachability Analysis)来判定对象是否存活的。这个算吗的基本思路就是通过一系列的称为<code>GC Roots</code>的对象作为起始点，从这些节点开始向下搜索，搜索所走过的路径称为引用链(Reference Chain),当一个对象到GC Roots没有任何引用链相连时(在图论中，就是从GC Roots到这个对象不可达)，则证明此对象是不可用的。在Java语言中，可作为GC Roots的对象包括一下几种：</p>\n<ul>\n<li>虚拟机栈(栈帧中的本地变量表)中引用的对象。</li>\n<li>方法区中静态属性引用的对象。</li>\n<li>方法区中常量引用的对象。</li>\n<li>本地方法栈中JNI(一般说的Native方法)引用的对象</li>\n</ul>\n<h3 id=\"生存还是死亡\"><a href=\"#生存还是死亡\" class=\"headerlink\" title=\"生存还是死亡\"></a>生存还是死亡</h3><p>　　即使在可达性分析算法中不可达的对象，也并非是非死不可的，这时候他们暂时处于缓刑阶段，要真正宣告一个对象死亡，至少要经历两次标记过程：如果对象在进行可达性分析后发现没有与GC Roots相连接的引用链，那它将会被第一次标记并且进行一次筛选，筛选的条件是此对象是否有必要执行finalize()方法。当对象没有覆盖finalize()方法，或者finalize()方法已经被虚拟机调用过，虚拟机将这两种情况都视为”没有必要执行”。<br>如果这个对象呗判定为有必要执行finalize()方法，那么这个对象将会放置在一个叫做<code>F-Queue</code>的队列之中，并在稍后由一个虚拟机自动建立的、优先级低的Finalizer线程去执行它。这里所谓的执行是指虚拟机会触发这个方法，但并不承诺会等待它运行结束，这样做的原因是：如果一个对象在finalize()方法中执行缓慢，或者发生了死循环，将很可能会导致<code>F-Queue</code>队列中其他对象永久处于等待，甚至导致整个内存回收系统崩溃。finalize()方法是对象 逃脱死亡命运的最后一次机会，稍后GC将对<code>F-Queue</code>中的对象进行第二次小规模的标记。</p>\n<h3 id=\"回收方法区\"><a href=\"#回收方法区\" class=\"headerlink\" title=\"回收方法区\"></a>回收方法区</h3><p>　　很多人认为方法区是没有垃圾收集的，Java虚拟机规范中确实说过可以不要求虚拟机方法区实现垃圾收集，而且在方法区中进行垃圾收集的性价比一般比较低：在堆中，尤其是在新生代中，常规应用进行一次垃圾收集一般可以回收70%-95%的空间，而永久代的垃圾收集效率远低于此。<br>永久代的垃圾收集主要回收两部分内容：废弃常量和无用的类。回收废弃常量与回收Java堆中的对象非常类似。以常量池中字面量的回收为例：假如一个字符串”ABC”已经进入了常量池中，但是当前系统没有任何一个String对象是叫做”ABC”的，换句话说，就是没有任何String对象引用常量池中的”ABC”常量，也没有其他地方引用了这个字面量，如果这时繁盛内存回收，而且必要的话，这个”ABC”常量就会被系统清理出常量池，常量池中的其他类、方法、字段的符号引用也与此类似。<br>判定一个常量是否是”废弃常量”比较简单，而要判定一个类是否是”无用的类”的条件则相对苛刻许多。类需要同时满足下面三个调教才能算是”无用的类”：</p>\n<ul>\n<li>该类所有的实例都已经被回收，也就是Java堆中不存在该类的任何实例。</li>\n<li>加载该类的ClassLoader已经被回收。</li>\n<li>该类对用的java.lang.Class对象没有在任何对方被引用，无法在任何地方通过反射访问该类的方法。<br>　　虚拟机可以对满足上述3个条件的无用类进行回收，这里说的仅仅是“可以”，而并不是和对象一样，不使用了就必然会回收。 是否对类进行回收，HotSpot虚拟机提供了-Xnoclassgc参数进行控制，还可以使用-verbose：class以及-XX：+TraceClassLoading、 -XX：+TraceClassUnLoading查看类加载和卸载信息，其中-verbose：class和-XX：+TraceClassLoading可以在Product版的虚拟机中使用，-XX：+TraceClassUnLoading参数需要FastDebug版的虚拟机支持。在大量使用反射、 动态代理、 CGLib等ByteCode框架、 动态生成JSP以及OSGi这类频繁自定义ClassLoader的场景都需要虚拟机具备类卸载的功能，以保证永久代不会溢出。</li>\n</ul>\n<hr>\n<p>以上</p>"},{"title":"LaTeX笔记(一)(准备工作)","date":"2018-01-18T13:21:41.000Z","keywords":"LaTeX","_content":"如果学习不是为了装逼，那一切都将毫无意义。\n没错，我又想学**LaTeX**了，作为世界上最好的排版系统(没有之一)，我也只是在写简历的时候用过(装上编译器，改模板而已)，没有怎么了解过。最近妹子有提到过说些毕业论文的时候可能要用，这就需要系统的学习一下了。\n#### 准备阶段\n本着实用至上的原则，LaTeX的历史以及光辉事迹就不在提了，想看的自己去搜\n1. **TexLive2017套装**：下载地址http://mirrors.tuna.tsinghua.edu.cn/CTAN/systems/texlive/Images/texlive2017-20170524.iso 这个是清华镜像站点。http://mirror.ctan.org/systems/texlive/Images/texlive2017.iso 这个是官方的镜像下载地址。\n不推荐使用**CTex**\n2. **TexWorks**：Tex文件编辑器，你也可以使用其他编辑器+插件：比如 VisualStudioCode，Sublime，Notepad++等。\n3. **JabRef**：下载地址 https://www.fosshub.com/JabRef.html 大部分用在写论文的引用文献上，只有使用LaTeX撰写科技论文的研究人员才能完全领略到JabRef的妙不可言。\n4. **学习资料**：LaTeX实在太庞大了，加上各种package，网上各种博客资料不是很全面，只照顾到一部分，推荐*刘海洋*的*LaTeX入门*。\n5. **建议**：多练习，就像学编程一样，把书上的例子都自己敲一遍。\n\n<!--more-->\n#### 安装软件\n将`TexLive2017套装`加载到光驱，\n* Windows 用户双击 install-tl-advanced.bat；\n* \\*nix 用户执行 install-tl。\n然后按照提示来安装就好了，最后将`texlive\\2017\\bin\\win32`加入环境变量，*nix用户自己找执行文件所在的路径加到环境变量里面。\n其他的东西可以参考这个网站 http://www.latexstudio.net/archives/10208\n\n#### Hello World\n老规矩，先跑个`Hello World`。\n1. 打开`TexWork`,在编辑区输入以下代码：\n``` Tex\n\\documentclass{article}\n\n\\begin{document}\n\nHello World!\n\n\\LaTeX\n\n\\end{document}\n```\n然后保存一下文件，注意一定要使用UTF-8编码(默认)，Tex文件的后缀名为`.tex`，编译过程会多出好多临时文件。\n2. 在下图红框处(界面左上角)选择`pafLaTeX`,然后点击绿色按钮进行编译，编译过程中绿色按钮会变成红叉，编译成功后又变成绿色按钮。你会在弹出的窗口看到\"Hello World LaTeX\"，并且在`tex`文件同级的文件夹下看到生成的`pdf`文件。\n如果没有编译成功，可以尝试选择不同的编译类型，也可以搜索控制台报错信息来解决。\n![TexWorks界面](/image/latex/latex_note_one_1.png)\n3. 如果你觉得编辑窗口的字体看着不舒服，可以在`编辑`-->`首选项`-->`编辑器`或者`格式`-->`字体`里面调整。\n4. 多说一句，`TexWorks`支持代码补全\n\n#### 说明\n`\\documentclass[UTF-8]{article}` 声明文档类型是一篇文章。\n`\\begin{document}` 和 `\\end{document}` 标识出正文的范围\n`\\LaTeX` 看结果就知道是表示结果中高低不平的LaTeX\n但是，当你把内容替换为汉字的时候，发现汉字并不能在pdf文件中展示，这是因为LaTeX原本是面向西文写作的，默认没有加载中文字体。我们可以通过替换文档类型来显示中文，将 `\\documentclass{article}` 替换为 `\\documentclass[UTF-8]{ctexart}` 就可以显示中文了。\n\n#### 下一个目标\n如下图，接下来我们来慢慢写出来图片所示的样式。\n![目标](/image/latex/latex_note_one_2.png)\n\n----\n以上。","source":"_posts/LaTeX笔记-一.md","raw":"---\ntitle: LaTeX笔记(一)(准备工作)\ndate: 2018-01-18 21:21:41\ntags: [LaTeX]\nkeywords: LaTeX\n---\n如果学习不是为了装逼，那一切都将毫无意义。\n没错，我又想学**LaTeX**了，作为世界上最好的排版系统(没有之一)，我也只是在写简历的时候用过(装上编译器，改模板而已)，没有怎么了解过。最近妹子有提到过说些毕业论文的时候可能要用，这就需要系统的学习一下了。\n#### 准备阶段\n本着实用至上的原则，LaTeX的历史以及光辉事迹就不在提了，想看的自己去搜\n1. **TexLive2017套装**：下载地址http://mirrors.tuna.tsinghua.edu.cn/CTAN/systems/texlive/Images/texlive2017-20170524.iso 这个是清华镜像站点。http://mirror.ctan.org/systems/texlive/Images/texlive2017.iso 这个是官方的镜像下载地址。\n不推荐使用**CTex**\n2. **TexWorks**：Tex文件编辑器，你也可以使用其他编辑器+插件：比如 VisualStudioCode，Sublime，Notepad++等。\n3. **JabRef**：下载地址 https://www.fosshub.com/JabRef.html 大部分用在写论文的引用文献上，只有使用LaTeX撰写科技论文的研究人员才能完全领略到JabRef的妙不可言。\n4. **学习资料**：LaTeX实在太庞大了，加上各种package，网上各种博客资料不是很全面，只照顾到一部分，推荐*刘海洋*的*LaTeX入门*。\n5. **建议**：多练习，就像学编程一样，把书上的例子都自己敲一遍。\n\n<!--more-->\n#### 安装软件\n将`TexLive2017套装`加载到光驱，\n* Windows 用户双击 install-tl-advanced.bat；\n* \\*nix 用户执行 install-tl。\n然后按照提示来安装就好了，最后将`texlive\\2017\\bin\\win32`加入环境变量，*nix用户自己找执行文件所在的路径加到环境变量里面。\n其他的东西可以参考这个网站 http://www.latexstudio.net/archives/10208\n\n#### Hello World\n老规矩，先跑个`Hello World`。\n1. 打开`TexWork`,在编辑区输入以下代码：\n``` Tex\n\\documentclass{article}\n\n\\begin{document}\n\nHello World!\n\n\\LaTeX\n\n\\end{document}\n```\n然后保存一下文件，注意一定要使用UTF-8编码(默认)，Tex文件的后缀名为`.tex`，编译过程会多出好多临时文件。\n2. 在下图红框处(界面左上角)选择`pafLaTeX`,然后点击绿色按钮进行编译，编译过程中绿色按钮会变成红叉，编译成功后又变成绿色按钮。你会在弹出的窗口看到\"Hello World LaTeX\"，并且在`tex`文件同级的文件夹下看到生成的`pdf`文件。\n如果没有编译成功，可以尝试选择不同的编译类型，也可以搜索控制台报错信息来解决。\n![TexWorks界面](/image/latex/latex_note_one_1.png)\n3. 如果你觉得编辑窗口的字体看着不舒服，可以在`编辑`-->`首选项`-->`编辑器`或者`格式`-->`字体`里面调整。\n4. 多说一句，`TexWorks`支持代码补全\n\n#### 说明\n`\\documentclass[UTF-8]{article}` 声明文档类型是一篇文章。\n`\\begin{document}` 和 `\\end{document}` 标识出正文的范围\n`\\LaTeX` 看结果就知道是表示结果中高低不平的LaTeX\n但是，当你把内容替换为汉字的时候，发现汉字并不能在pdf文件中展示，这是因为LaTeX原本是面向西文写作的，默认没有加载中文字体。我们可以通过替换文档类型来显示中文，将 `\\documentclass{article}` 替换为 `\\documentclass[UTF-8]{ctexart}` 就可以显示中文了。\n\n#### 下一个目标\n如下图，接下来我们来慢慢写出来图片所示的样式。\n![目标](/image/latex/latex_note_one_2.png)\n\n----\n以上。","slug":"LaTeX笔记-一","published":1,"updated":"2018-08-04T05:15:03.958Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjl3vbtqt0018isdga2ng3byc","content":"<p>如果学习不是为了装逼，那一切都将毫无意义。<br>没错，我又想学<strong>LaTeX</strong>了，作为世界上最好的排版系统(没有之一)，我也只是在写简历的时候用过(装上编译器，改模板而已)，没有怎么了解过。最近妹子有提到过说些毕业论文的时候可能要用，这就需要系统的学习一下了。</p>\n<h4 id=\"准备阶段\"><a href=\"#准备阶段\" class=\"headerlink\" title=\"准备阶段\"></a>准备阶段</h4><p>本着实用至上的原则，LaTeX的历史以及光辉事迹就不在提了，想看的自己去搜</p>\n<ol>\n<li><strong>TexLive2017套装</strong>：下载地址<a href=\"http://mirrors.tuna.tsinghua.edu.cn/CTAN/systems/texlive/Images/texlive2017-20170524.iso\" target=\"_blank\" rel=\"external\">http://mirrors.tuna.tsinghua.edu.cn/CTAN/systems/texlive/Images/texlive2017-20170524.iso</a> 这个是清华镜像站点。<a href=\"http://mirror.ctan.org/systems/texlive/Images/texlive2017.iso\" target=\"_blank\" rel=\"external\">http://mirror.ctan.org/systems/texlive/Images/texlive2017.iso</a> 这个是官方的镜像下载地址。<br>不推荐使用<strong>CTex</strong></li>\n<li><strong>TexWorks</strong>：Tex文件编辑器，你也可以使用其他编辑器+插件：比如 VisualStudioCode，Sublime，Notepad++等。</li>\n<li><strong>JabRef</strong>：下载地址 <a href=\"https://www.fosshub.com/JabRef.html\" target=\"_blank\" rel=\"external\">https://www.fosshub.com/JabRef.html</a> 大部分用在写论文的引用文献上，只有使用LaTeX撰写科技论文的研究人员才能完全领略到JabRef的妙不可言。</li>\n<li><strong>学习资料</strong>：LaTeX实在太庞大了，加上各种package，网上各种博客资料不是很全面，只照顾到一部分，推荐<em>刘海洋</em>的<em>LaTeX入门</em>。</li>\n<li><strong>建议</strong>：多练习，就像学编程一样，把书上的例子都自己敲一遍。</li>\n</ol>\n<a id=\"more\"></a>\n<h4 id=\"安装软件\"><a href=\"#安装软件\" class=\"headerlink\" title=\"安装软件\"></a>安装软件</h4><p>将<code>TexLive2017套装</code>加载到光驱，</p>\n<ul>\n<li>Windows 用户双击 install-tl-advanced.bat；</li>\n<li>*nix 用户执行 install-tl。<br>然后按照提示来安装就好了，最后将<code>texlive\\2017\\bin\\win32</code>加入环境变量，*nix用户自己找执行文件所在的路径加到环境变量里面。<br>其他的东西可以参考这个网站 <a href=\"http://www.latexstudio.net/archives/10208\" target=\"_blank\" rel=\"external\">http://www.latexstudio.net/archives/10208</a></li>\n</ul>\n<h4 id=\"Hello-World\"><a href=\"#Hello-World\" class=\"headerlink\" title=\"Hello World\"></a>Hello World</h4><p>老规矩，先跑个<code>Hello World</code>。</p>\n<ol>\n<li>打开<code>TexWork</code>,在编辑区输入以下代码：<figure class=\"highlight tex\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">\\<span class=\"name\">documentclass</span><span class=\"string\">&#123;article&#125;</span></span></div><div class=\"line\"></div><div class=\"line\"><span class=\"tag\">\\<span class=\"name\">begin</span><span class=\"string\">&#123;document&#125;</span></span></div><div class=\"line\"></div><div class=\"line\">Hello World!</div><div class=\"line\"></div><div class=\"line\"><span class=\"tag\">\\<span class=\"name\">LaTeX</span></span></div><div class=\"line\"></div><div class=\"line\"><span class=\"tag\">\\<span class=\"name\">end</span><span class=\"string\">&#123;document&#125;</span></span></div></pre></td></tr></table></figure>\n</li>\n</ol>\n<p>然后保存一下文件，注意一定要使用UTF-8编码(默认)，Tex文件的后缀名为<code>.tex</code>，编译过程会多出好多临时文件。</p>\n<ol>\n<li>在下图红框处(界面左上角)选择<code>pafLaTeX</code>,然后点击绿色按钮进行编译，编译过程中绿色按钮会变成红叉，编译成功后又变成绿色按钮。你会在弹出的窗口看到”Hello World LaTeX”，并且在<code>tex</code>文件同级的文件夹下看到生成的<code>pdf</code>文件。<br>如果没有编译成功，可以尝试选择不同的编译类型，也可以搜索控制台报错信息来解决。<br><img src=\"/image/latex/latex_note_one_1.png\" alt=\"TexWorks界面\"></li>\n<li>如果你觉得编辑窗口的字体看着不舒服，可以在<code>编辑</code>–&gt;<code>首选项</code>–&gt;<code>编辑器</code>或者<code>格式</code>–&gt;<code>字体</code>里面调整。</li>\n<li>多说一句，<code>TexWorks</code>支持代码补全</li>\n</ol>\n<h4 id=\"说明\"><a href=\"#说明\" class=\"headerlink\" title=\"说明\"></a>说明</h4><p><code>\\documentclass[UTF-8]{article}</code> 声明文档类型是一篇文章。<br><code>\\begin{document}</code> 和 <code>\\end{document}</code> 标识出正文的范围<br><code>\\LaTeX</code> 看结果就知道是表示结果中高低不平的LaTeX<br>但是，当你把内容替换为汉字的时候，发现汉字并不能在pdf文件中展示，这是因为LaTeX原本是面向西文写作的，默认没有加载中文字体。我们可以通过替换文档类型来显示中文，将 <code>\\documentclass{article}</code> 替换为 <code>\\documentclass[UTF-8]{ctexart}</code> 就可以显示中文了。</p>\n<h4 id=\"下一个目标\"><a href=\"#下一个目标\" class=\"headerlink\" title=\"下一个目标\"></a>下一个目标</h4><p>如下图，接下来我们来慢慢写出来图片所示的样式。<br><img src=\"/image/latex/latex_note_one_2.png\" alt=\"目标\"></p>\n<hr>\n<p>以上。</p>\n","excerpt":"<p>如果学习不是为了装逼，那一切都将毫无意义。<br>没错，我又想学<strong>LaTeX</strong>了，作为世界上最好的排版系统(没有之一)，我也只是在写简历的时候用过(装上编译器，改模板而已)，没有怎么了解过。最近妹子有提到过说些毕业论文的时候可能要用，这就需要系统的学习一下了。</p>\n<h4 id=\"准备阶段\"><a href=\"#准备阶段\" class=\"headerlink\" title=\"准备阶段\"></a>准备阶段</h4><p>本着实用至上的原则，LaTeX的历史以及光辉事迹就不在提了，想看的自己去搜</p>\n<ol>\n<li><strong>TexLive2017套装</strong>：下载地址<a href=\"http://mirrors.tuna.tsinghua.edu.cn/CTAN/systems/texlive/Images/texlive2017-20170524.iso\">http://mirrors.tuna.tsinghua.edu.cn/CTAN/systems/texlive/Images/texlive2017-20170524.iso</a> 这个是清华镜像站点。<a href=\"http://mirror.ctan.org/systems/texlive/Images/texlive2017.iso\">http://mirror.ctan.org/systems/texlive/Images/texlive2017.iso</a> 这个是官方的镜像下载地址。<br>不推荐使用<strong>CTex</strong></li>\n<li><strong>TexWorks</strong>：Tex文件编辑器，你也可以使用其他编辑器+插件：比如 VisualStudioCode，Sublime，Notepad++等。</li>\n<li><strong>JabRef</strong>：下载地址 <a href=\"https://www.fosshub.com/JabRef.html\">https://www.fosshub.com/JabRef.html</a> 大部分用在写论文的引用文献上，只有使用LaTeX撰写科技论文的研究人员才能完全领略到JabRef的妙不可言。</li>\n<li><strong>学习资料</strong>：LaTeX实在太庞大了，加上各种package，网上各种博客资料不是很全面，只照顾到一部分，推荐<em>刘海洋</em>的<em>LaTeX入门</em>。</li>\n<li><strong>建议</strong>：多练习，就像学编程一样，把书上的例子都自己敲一遍。</li>\n</ol>","more":"<h4 id=\"安装软件\"><a href=\"#安装软件\" class=\"headerlink\" title=\"安装软件\"></a>安装软件</h4><p>将<code>TexLive2017套装</code>加载到光驱，</p>\n<ul>\n<li>Windows 用户双击 install-tl-advanced.bat；</li>\n<li>*nix 用户执行 install-tl。<br>然后按照提示来安装就好了，最后将<code>texlive\\2017\\bin\\win32</code>加入环境变量，*nix用户自己找执行文件所在的路径加到环境变量里面。<br>其他的东西可以参考这个网站 <a href=\"http://www.latexstudio.net/archives/10208\">http://www.latexstudio.net/archives/10208</a></li>\n</ul>\n<h4 id=\"Hello-World\"><a href=\"#Hello-World\" class=\"headerlink\" title=\"Hello World\"></a>Hello World</h4><p>老规矩，先跑个<code>Hello World</code>。</p>\n<ol>\n<li>打开<code>TexWork</code>,在编辑区输入以下代码：<figure class=\"highlight tex\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">\\<span class=\"name\">documentclass</span><span class=\"string\">&#123;article&#125;</span></span></div><div class=\"line\"></div><div class=\"line\"><span class=\"tag\">\\<span class=\"name\">begin</span><span class=\"string\">&#123;document&#125;</span></span></div><div class=\"line\"></div><div class=\"line\">Hello World!</div><div class=\"line\"></div><div class=\"line\"><span class=\"tag\">\\<span class=\"name\">LaTeX</span></span></div><div class=\"line\"></div><div class=\"line\"><span class=\"tag\">\\<span class=\"name\">end</span><span class=\"string\">&#123;document&#125;</span></span></div></pre></td></tr></table></figure>\n</li>\n</ol>\n<p>然后保存一下文件，注意一定要使用UTF-8编码(默认)，Tex文件的后缀名为<code>.tex</code>，编译过程会多出好多临时文件。</p>\n<ol>\n<li>在下图红框处(界面左上角)选择<code>pafLaTeX</code>,然后点击绿色按钮进行编译，编译过程中绿色按钮会变成红叉，编译成功后又变成绿色按钮。你会在弹出的窗口看到”Hello World LaTeX”，并且在<code>tex</code>文件同级的文件夹下看到生成的<code>pdf</code>文件。<br>如果没有编译成功，可以尝试选择不同的编译类型，也可以搜索控制台报错信息来解决。<br><img src=\"/image/latex/latex_note_one_1.png\" alt=\"TexWorks界面\"></li>\n<li>如果你觉得编辑窗口的字体看着不舒服，可以在<code>编辑</code>–&gt;<code>首选项</code>–&gt;<code>编辑器</code>或者<code>格式</code>–&gt;<code>字体</code>里面调整。</li>\n<li>多说一句，<code>TexWorks</code>支持代码补全</li>\n</ol>\n<h4 id=\"说明\"><a href=\"#说明\" class=\"headerlink\" title=\"说明\"></a>说明</h4><p><code>\\documentclass[UTF-8]{article}</code> 声明文档类型是一篇文章。<br><code>\\begin{document}</code> 和 <code>\\end{document}</code> 标识出正文的范围<br><code>\\LaTeX</code> 看结果就知道是表示结果中高低不平的LaTeX<br>但是，当你把内容替换为汉字的时候，发现汉字并不能在pdf文件中展示，这是因为LaTeX原本是面向西文写作的，默认没有加载中文字体。我们可以通过替换文档类型来显示中文，将 <code>\\documentclass{article}</code> 替换为 <code>\\documentclass[UTF-8]{ctexart}</code> 就可以显示中文了。</p>\n<h4 id=\"下一个目标\"><a href=\"#下一个目标\" class=\"headerlink\" title=\"下一个目标\"></a>下一个目标</h4><p>如下图，接下来我们来慢慢写出来图片所示的样式。<br><img src=\"/image/latex/latex_note_one_2.png\" alt=\"目标\"></p>\n<hr>\n<p>以上。</p>"},{"title":"Android广播","date":"2018-07-31T07:16:25.000Z","keywords":"广播,BroadcastReceiver，广播过程","_content":"面试APUS的时候被问到广播：\n面试官：聊一下广播吧。\n我：广播啊，四大组件之一，自己创建个类继承自`BroadcastReceiver`，重写`onReceive()`方法，需要注意的是不要在这个方法中做耗时操作。注册的话可以在`AndroidManifest`文件中静态注册，也可以在代码中动态注册。都做完了之后就可以调用sendBroadCast()方法发送广播了。\n面试官：了解广播注册过程么？\n我：哈~！这个没怎么看过。\n面试官：了解怎么接收到的广播么？\n我：没有。。。。\n<!--more-->\n\n#### 广播的注册过程\n《Android开发艺术探索》9.4章\n广播的注册分为静态注册和动态注册，其中静态注册的广播在应用安装时由系统自动完成注册，具体来说是由PMS ( PackageManagerService)来完成整个注册过程的，除了广播以外，其他三大组件也都是在应用安装时由PMS解析并注册的。这里只分析广播的动态注册的过程，动态注册的过程是从ContextWrapper的registerReceiver方法开始的，和Activity以及Service一样 。ContextWrapper并 没有做实际的工作，而是将注册过程直接交给了ContextImpl来完成，如下所示：\n``` java\n    @Override\n    public Intent registerReceiver(BroadcastReceiver receiver, IntentFilter filter) {\n        return mBase.registerReceiver(receiver, filter);\n    }\n    @Override\n    public Intent registerReceiver(BroadcastReceiver receiver, IntentFilter filter,String broadcastPermission, Handler scheduler) {\n        return registerReceiverInternal(receiver, getUserId(),\n                filter, broadcastPermission, scheduler, getOuterContext(), 0);\n    }\n```\n这里的`registerReceiver`方法是重载方法，最终调用了`registerReceiverInternal`方法：\n``` java\nprivate Intent registerReceiverInternal(BroadcastReceiver receiver, int userId,\n            IntentFilter filter, String broadcastPermission,\n            Handler scheduler, Context context, int flags) {\n        IIntentReceiver rd = null;\n        if (receiver != null) {\n            if (mPackageInfo != null && context != null) {\n                if (scheduler == null) {\n                    scheduler = mMainThread.getHandler();\n                }\n                rd = mPackageInfo.getReceiverDispatcher(\n                    receiver, context, scheduler,\n                    mMainThread.getInstrumentation(), true);\n            } else {\n                if (scheduler == null) {\n                    scheduler = mMainThread.getHandler();\n                }\n                rd = new LoadedApk.ReceiverDispatcher(\n                        receiver, context, scheduler, null, true).getIIntentReceiver();\n            }\n        }\n        try {\n            final Intent intent = ActivityManager.getService().registerReceiver(\n                    mMainThread.getApplicationThread(), mBasePackageName, rd, filter,\n                    broadcastPermission, userId, flags);\n            if (intent != null) {\n                intent.setExtrasClassLoader(getClassLoader());\n                intent.prepareToEnterProcess();\n            }\n            return intent;\n        } catch (RemoteException e) {\n            throw e.rethrowFromSystemServer();\n        }\n    }\n```\n在上面的代码中，系统首先从`mPackageInfo`获取`IIntentReceiver`对象，然后再采用跨进程的方式向AMS发送广播注册的请求。之所以采用`IIntentReceiver`而不是直接采用`BroadcastReceiver` ,这是因为上述注册过程是一个进程间通信的过程，而`BroadcastReceiver`作为Android的一个组件是不能直接跨进程传递的，所以需要通过`IIntentReceiver`来中转一下。毫无疑问，`IIntentReceiver`必须是一个Binder接口，它的具体实现是`LoadedApk.ReceiverDispatcher.InnerReceiver`, `ReceiverDispatcher`的内部同时保存了`BroadcastReceiver`和`InnerReceiver`,这样当接收到广播时，`ReceiverDispatcher`可以很方便地调用`BroadcastReceiver`的`onReceive`方法。\n看一下`LoadedApk.getReceiverDispatcher`方法：\n``` java\npublic IIntentReceiver getReceiverDispatcher(BroadcastReceiver r,\n            Context context, Handler handler,\n            Instrumentation instrumentation, boolean registered) {\n        synchronized (mReceivers) {\n            LoadedApk.ReceiverDispatcher rd = null;\n            ArrayMap<BroadcastReceiver, LoadedApk.ReceiverDispatcher> map = null;\n            if (registered) {\n                map = mReceivers.get(context);\n                if (map != null) {\n                    rd = map.get(r);\n                }\n            }\n            if (rd == null) {\n                rd = new ReceiverDispatcher(r, context, handler,\n                        instrumentation, registered);\n                if (registered) {\n                    if (map == null) {\n                        map = new ArrayMap<BroadcastReceiver, LoadedApk.ReceiverDispatcher>();\n                        mReceivers.put(context, map);\n                    }\n                    map.put(r, rd);\n                }\n            } else {\n                rd.validate(context, handler);\n            }\n            rd.mForgotten = false;\n            return rd.getIIntentReceiver();\n        }\n    }\n```\n很显然，`getReceiverDispatcher`方法重新创建了一个`ReceiverDispatcher`对象并将其保存的`InnerReceiver`对象作为返回值返回，其中`InnerReceiver`对象和`BroadcastReceiver`都是在`ReceiverDispatcher`的构造方法中被保存起来的。\n由于注册广播的真正实现过程是在AMS中，因此我们需要看一下AMS的具体实现。AMS的`registerReceiver`方法看起来很长，其实关键点就只有下面一部分，最终会把远程的`InnerReceiver`对象以及`IntentFilter`对象存储起来，这样整个广播的注册过程就完成了，代码如下所示。\n``` java\npublic Intent registerReceiver(IApplicationThread caller, String callerPackage,IIntentReceiver receiver, IntentFilter filter, String permission, int userId) {\n    // The first sticky in the list is returned directly back to the client.\n    Intent sticky = allSticky != null ? allSticky.get(0) : null;\n    ReceiverList rl = mRegisteredReceivers.get(receiver.asBinder());\n    BroadcastFilter bf = new BroadcastFilter(filter, rl, callerPackage,permission, callingUid, userId);\n    rl.add(bf);\n    mReceiverResolver.addFilter(bf);\n    return sticky;\n}\n```\n\n#### 广播的发送过程\n\n当通过send方法来发送广播时，AMS会查找出匹配的广播接收者并将广播发送给它们处理。广播的发送有几种类型:普通广播、有序广播和粘性广播，有序广播和粘性广播与普通广播相比具有不同的特性，但是它们的发送/接收过程的流程是类似的，因此这里只分析普通厂播的实现。广播的发送和接收，其本质是一个过程的两个阶段。这里从广播的发送可以说起，广播的发送仍然开始于`ContextWrapper`的`sendBroadcast`方法，之所以不是`Context`,那是因为`Context`的`sendBroadcast`是-一个抽象方法。和广播的注册过程一样，`ContextWrapper`的`sendBroadcast`方法仍然什么都不做，只是把事情交给`ContextImpl`去处理，`ContextImpl的sendBroadcast`方法的源码如下所示。\n``` java\n@Override\n    public void sendBroadcast(Intent intent) {\n        warnIfCallingFromSystemProcess();\n        String resolvedType = intent.resolveTypeIfNeeded(getContentResolver());\n        try {\n            intent.prepareToLeaveProcess(this);\n            ActivityManager.getService().broadcastIntent(\n                    mMainThread.getApplicationThread(), intent, resolvedType, null,\n                    Activity.RESULT_OK, null, null, null, AppOpsManager.OP_NONE, null, false, false,\n                    getUserId());\n        } catch (RemoteException e) {\n            throw e.rethrowFromSystemServer();\n        }\n    }\n```\n从_上面的代码来看，`ContextImpl`也是几乎什么事都没干，它直接向AMS发起了一个异步请求用于发送广播。因此，下面直接看AMS对广播发送过程的处理，AMS的`broadcastIntent`方法又调用了`broadcastIntentLocked`,在这个方法的开始有这么一行：\n``` java\n// By default broadcasts do not go to stopped apps.\nintent.addFlags(Intent.FLAG_EXCLUDE_STOPPED_PACKAGES);\n```\n从Android3.1开始广播默认情况下广播不会发送给已经停止的应用。这是因为系统在Android3.1中为Intent添加了两个标记位，分别是`FLAG_INCLUDE_STOPPED_PACKAGES`和`FLAG_EXCLUDE_STOPPED_PACKAGES`，用来控制广播是否要对处于停止状态的应用起作用，它们的含义如下所示。\n** FLAG_INCLUDE_STOPPED_PACKAGES **\n表示包含已经停止的应用，这个时候广播会发送给已经停止的应用。\n** FLAG_EXCLUDE_STOPPED_PACKAGES **\n表示不包含已经停止的应用，这个时候广播不会发送给已经停止的应用。\n\n从Android3.1开始，系统为所有广播默认添加了`FLAG_EXCLUDE_STOPPED_PACKAGES`标志，这样做是为了防止广播无意间或者在不必要的时候调起已经停止运行的应用。如果的确需要调起未启动的应用，那么只需要为广播的Intent添加`FLAG_INCLUDE_STOPPED_PACKAGES`标记即可。当`FLAG_EXCLUDE_STOPPED_PACKAGES`和`FLAG_INCLUDE_STOPPED_PACKAGES`两种标记位共存时,以`FLAG_INCLUDE_STOPPED_PACKAGES`为准。这里需要补充一下，一个应用处于停止状态分为两种情形:\n第一种是应用安装后未运行，\n第二种是应用被手动或者其他应用强停了。\nAndroid3.1中广播的这个特性同样会影响开机广播，从Android3.1开始，处于停止状态的应用同样无法接收到开机广播，而在Android 3.1之前，处于停止状态的应用是可以收到开机广播的。\n在`broadcastIntentLocked`的内部，会根据`intent-filter`查找出匹配的广播接收者并经过一系列的条件过滤，最终会将满足条件的广播接收者添加到`BroadcastQueue`中，接着`BroadcastQueue`就会将广播发送给相应的广播接收者，这个过程的源码如下所示。\n``` java\nif ((receivers != null && receivers.size() > 0)\n                || resultTo != null) {\n            BroadcastQueue queue = broadcastQueueForIntent(intent);\n            BroadcastRecord r = new BroadcastRecord(queue, intent, callerApp,\n                    callerPackage, callingPid, callingUid, resolvedType,\n                    requiredPermissions, appOp, brOptions, receivers, resultTo, resultCode,\n                    resultData, resultExtras, ordered, sticky, false, userId);\n\n            if (DEBUG_BROADCAST) Slog.v(TAG_BROADCAST, \"Enqueueing ordered broadcast \" + r\n                    + \": prev had \" + queue.mOrderedBroadcasts.size());\n            if (DEBUG_BROADCAST) Slog.i(TAG_BROADCAST,\n                    \"Enqueueing broadcast \" + r.intent.getAction());\n\n            boolean replaced = replacePending && queue.replaceOrderedBroadcastLocked(r);\n            if (!replaced) {\n                queue.enqueueOrderedBroadcastLocked(r);\n                queue.scheduleBroadcastsLocked();\n            }\n        } else {\n            // There was nobody interested in the broadcast, but we still want to record\n            // that it happened.\n            if (intent.getComponent() == null && intent.getPackage() == null\n                    && (intent.getFlags()&Intent.FLAG_RECEIVER_REGISTERED_ONLY) == 0) {\n                // This was an implicit broadcast... let's record it for posterity.\n                addBroadcastStatLocked(intent.getAction(), callerPackage, 0, 0, 0);\n            }\n        }\n```\n将广播添加到`BroadCastQueue`之后，接着调用了`scheduleBroadcastsLocked`方法：\n``` java\n public void scheduleBroadcastsLocked() {\n        if (DEBUG_BROADCAST) Slog.v(TAG_BROADCAST, \"Schedule broadcasts [\"\n                + mQueueName + \"]: current=\"\n                + mBroadcastsScheduled);\n\n        if (mBroadcastsScheduled) {\n            return;\n        }\n        mHandler.sendMessage(mHandler.obtainMessage(BROADCAST_INTENT_MSG, this));\n        mBroadcastsScheduled = true;\n    }\n```\n方法内发送了一个`BROADCAST_INTENT_MSG`消息，handler接到消息后，调用了`processNextBroadcast`方法\n\n``` java\n private final class BroadcastHandler extends Handler {\n        public BroadcastHandler(Looper looper) {\n            super(looper, null, true);\n        }\n\n        @Override\n        public void handleMessage(Message msg) {\n            switch (msg.what) {\n                case BROADCAST_INTENT_MSG: {\n                    if (DEBUG_BROADCAST) Slog.v(TAG_BROADCAST, \"Received BROADCAST_INTENT_MSG\");\n                    processNextBroadcast(true);\n                } break;\n                case BROADCAST_TIMEOUT_MSG: {\n                    synchronized (mService) {\n                        broadcastTimeoutLocked(true);\n                    }\n                } break;\n                case SCHEDULE_TEMP_WHITELIST_MSG: {\n                    DeviceIdleController.LocalService dic = mService.mLocalDeviceIdleController;\n                    if (dic != null) {\n                        dic.addPowerSaveTempWhitelistAppDirect(UserHandle.getAppId(msg.arg1),msg.arg2, true, (String)msg.obj);\n                    }\n                } break;\n            }\n        }\n    }\n```\n收到消息后会调用`processNextBroadcast`方法，内容如下：\n``` java\n// First, deliver any non-serialized broadcasts right away.\n    while (mParallelBroadcasts.size() > 0) {\n        r = mParallelBroadcasts.remove(0);\n        r.dispatchTime = SystemClock.uptimeMillis();\n        r.dispatchClockTime = System.currentTimeMillis();\n\n        if (Trace.isTagEnabled(Trace.TRACE_TAG_ACTIVITY_MANAGER)) {\n            Trace.asyncTraceEnd(Trace.TRACE_TAG_ACTIVITY_MANAGER,\n                createBroadcastTraceTitle(r, BroadcastRecord.DELIVERY_PENDING),\n                System.identityHashCode(r));\n            Trace.asyncTraceBegin(Trace.TRACE_TAG_ACTIVITY_MANAGER,\n                createBroadcastTraceTitle(r, BroadcastRecord.DELIVERY_DELIVERED),\n                System.identityHashCode(r));\n        }\n\n        final int N = r.receivers.size();\n        \n        for (int i=0; i<N; i++) {\n            Object target = r.receivers.get(i);\n            if (DEBUG_BROADCAST)  Slog.v(TAG_BROADCAST,\n                    \"Delivering non-ordered on [\" + mQueueName + \"] to registered \"\n                    + target + \": \" + r);\n            deliverToRegisteredReceiverLocked(r, (BroadcastFilter)target, false, i);\n        }\n        addBroadcastToHistoryLocked(r);\n       \n    }\n```\n\n可以看到，无序广播存储在`mParallelBroadcasts`中，系统会遍历`mParallelBroadcasts`并将其中的广播发送给它们所有的接收者，具体的发送过程是通过`deliverToRegisteredReceiverLocked`方法来实现的。`deliverToRegisteredReceiverLocked`方法负责将一个广播发送给一个特定的接收者，它内部调用了`performReceiveLocked`方法来完成具体的发送过程:\n``` java\n performReceiveLocked(r.callerApp, r.resultTo,new Intent(r.intent), r.resultCode,r.resultData, r.resultExtras, false, false, r.userId);\n```\n`performReceiveLocked`方法的实现如下所示。由于接收广播会调起应用程序，因此app.thread不为null，根据前面的分析我们知道这里的`app.thread`仍然指`ApplicationThread`。\n``` java\nvoid performReceiveLocked(ProcessRecord app, IIntentReceiver receiver,Intent intent, int resultCode, String data, Bundle extras,boolean ordered, boolean sticky, int sendingUser) throws RemoteException {\n            \n            // Send the intent to the receiver asynchronously using one-way binder calls.\n    if (app != null) {\n        if (app.thread != null) {\n            // If we have an app thread, do the call through that so it is\n            // correctly ordered with other one-way calls.\n            try {\n                app.thread.scheduleRegisteredReceiver(receiver, intent, resultCode,\n                        data, extras, ordered, sticky, sendingUser, app.repProcState);\n            // TODO: Uncomment this when (b/28322359) is fixed and we aren't getting\n            // DeadObjectException when the process isn't actually dead.\n            //} catch (DeadObjectException ex) {\n            // Failed to call into the process.  It's dying so just let it die and move on.\n            //    throw ex;\n            } catch (RemoteException ex) {\n                // Failed to call into the process. It's either dying or wedged. Kill it gently.\n                synchronized (mService) {\n                    Slog.w(TAG, \"Can't deliver broadcast to \" + app.processName\n                            + \" (pid \" + app.pid + \"). Crashing it.\");\n                    app.scheduleCrash(\"can't deliver broadcast\");\n                }\n                throw ex;\n            }\n        } else {\n            // Application has died. Receiver doesn't exist.\n            throw new RemoteException(\"app.thread must not be null\");\n        }\n    } else {\n        receiver.performReceive(intent, resultCode, data, extras, ordered,\n                sticky, sendingUser);\n    }\n            \n}\n```\n`ApplicationThread`的`scheduleRegisteredReceiver`的实现比较简单，它通过`InnerReceiver`来实现广播的接收:\n``` java\n    // This function exists to make sure all receiver dispatching is\n    // correctly ordered, since these are one-way calls and the binder driver\n    // applies transaction ordering per object for such calls.\n    public void scheduleRegisteredReceiver(IIntentReceiver receiver, Intent intent,\n            int resultCode, String dataStr, Bundle extras, boolean ordered,\n            boolean sticky, int sendingUser, int processState) throws RemoteException {\n        updateProcessState(processState, false);\n        receiver.performReceive(intent, resultCode, dataStr, extras, ordered,\n                sticky, sendingUser);\n    }\n```\n`InnerReceiver`的`performReceive`方法会调用`LoadedApk.ReceiverDispatcher`的`performReceive`方法，`LoadedApk.ReceiverDispatcher`的`performReceive`方法的实现如下所示:\n``` java\npublic void performReceive(Intent intent, int resultCode, String data,Bundle extras, boolean ordered, boolean sticky, int sendingUser) {\n    final Args args = new Args(intent, resultCode, data, extras, ordered,\n            sticky, sendingUser);\n    if (intent == null) {\n        Log.wtf(TAG, \"Null intent received\");\n    } else {\n        if (ActivityThread.DEBUG_BROADCAST) {\n            int seq = intent.getIntExtra(\"seq\", -1);\n            Slog.i(ActivityThread.TAG, \"Enqueueing broadcast \" + intent.getAction()\n                    + \" seq=\" + seq + \" to \" + mReceiver);\n        }\n    }\n    if (intent == null || !mActivityThread.post(args.getRunnable())) {\n        if (mRegistered && ordered) {\n            IActivityManager mgr = ActivityManager.getService();\n            if (ActivityThread.DEBUG_BROADCAST) Slog.i(ActivityThread.TAG,\n                    \"Finishing sync broadcast to \" + mReceiver);\n            args.sendFinished(mgr);\n        }\n    }\n}\n```\n在上面的代码中，会创建一个Args对象并通过mActivityThread的post方法来执行Args中的逻辑，而Args实现了Runnable接口。mActivityThread是一个Handler，它其实就是ActivityThread中的mH，mH的类型是ActivityThread的内部类H。在Args的run方法中有如下几行代码:\n``` java\nfinal BroadcastReceiver receiver = mReceiver;\nfinal boolean ordered = mOrdered;\nreceiver.setPendingResult(this);\nreceiver.onReceive(mContext, intent);\n```\n这个时候BroadcastReceiver的onReceive方法被执行了，也就是说应用已经接收到广播了，同时onReceive方法是在广播接收者的主线程中被调用的。\n\n----\n以上","source":"_posts/Android广播.md","raw":"---\ntitle: Android广播\ndate: 2018-07-31 15:16:25\ntags: [Android]\nkeywords: 广播,BroadcastReceiver，广播过程\n---\n面试APUS的时候被问到广播：\n面试官：聊一下广播吧。\n我：广播啊，四大组件之一，自己创建个类继承自`BroadcastReceiver`，重写`onReceive()`方法，需要注意的是不要在这个方法中做耗时操作。注册的话可以在`AndroidManifest`文件中静态注册，也可以在代码中动态注册。都做完了之后就可以调用sendBroadCast()方法发送广播了。\n面试官：了解广播注册过程么？\n我：哈~！这个没怎么看过。\n面试官：了解怎么接收到的广播么？\n我：没有。。。。\n<!--more-->\n\n#### 广播的注册过程\n《Android开发艺术探索》9.4章\n广播的注册分为静态注册和动态注册，其中静态注册的广播在应用安装时由系统自动完成注册，具体来说是由PMS ( PackageManagerService)来完成整个注册过程的，除了广播以外，其他三大组件也都是在应用安装时由PMS解析并注册的。这里只分析广播的动态注册的过程，动态注册的过程是从ContextWrapper的registerReceiver方法开始的，和Activity以及Service一样 。ContextWrapper并 没有做实际的工作，而是将注册过程直接交给了ContextImpl来完成，如下所示：\n``` java\n    @Override\n    public Intent registerReceiver(BroadcastReceiver receiver, IntentFilter filter) {\n        return mBase.registerReceiver(receiver, filter);\n    }\n    @Override\n    public Intent registerReceiver(BroadcastReceiver receiver, IntentFilter filter,String broadcastPermission, Handler scheduler) {\n        return registerReceiverInternal(receiver, getUserId(),\n                filter, broadcastPermission, scheduler, getOuterContext(), 0);\n    }\n```\n这里的`registerReceiver`方法是重载方法，最终调用了`registerReceiverInternal`方法：\n``` java\nprivate Intent registerReceiverInternal(BroadcastReceiver receiver, int userId,\n            IntentFilter filter, String broadcastPermission,\n            Handler scheduler, Context context, int flags) {\n        IIntentReceiver rd = null;\n        if (receiver != null) {\n            if (mPackageInfo != null && context != null) {\n                if (scheduler == null) {\n                    scheduler = mMainThread.getHandler();\n                }\n                rd = mPackageInfo.getReceiverDispatcher(\n                    receiver, context, scheduler,\n                    mMainThread.getInstrumentation(), true);\n            } else {\n                if (scheduler == null) {\n                    scheduler = mMainThread.getHandler();\n                }\n                rd = new LoadedApk.ReceiverDispatcher(\n                        receiver, context, scheduler, null, true).getIIntentReceiver();\n            }\n        }\n        try {\n            final Intent intent = ActivityManager.getService().registerReceiver(\n                    mMainThread.getApplicationThread(), mBasePackageName, rd, filter,\n                    broadcastPermission, userId, flags);\n            if (intent != null) {\n                intent.setExtrasClassLoader(getClassLoader());\n                intent.prepareToEnterProcess();\n            }\n            return intent;\n        } catch (RemoteException e) {\n            throw e.rethrowFromSystemServer();\n        }\n    }\n```\n在上面的代码中，系统首先从`mPackageInfo`获取`IIntentReceiver`对象，然后再采用跨进程的方式向AMS发送广播注册的请求。之所以采用`IIntentReceiver`而不是直接采用`BroadcastReceiver` ,这是因为上述注册过程是一个进程间通信的过程，而`BroadcastReceiver`作为Android的一个组件是不能直接跨进程传递的，所以需要通过`IIntentReceiver`来中转一下。毫无疑问，`IIntentReceiver`必须是一个Binder接口，它的具体实现是`LoadedApk.ReceiverDispatcher.InnerReceiver`, `ReceiverDispatcher`的内部同时保存了`BroadcastReceiver`和`InnerReceiver`,这样当接收到广播时，`ReceiverDispatcher`可以很方便地调用`BroadcastReceiver`的`onReceive`方法。\n看一下`LoadedApk.getReceiverDispatcher`方法：\n``` java\npublic IIntentReceiver getReceiverDispatcher(BroadcastReceiver r,\n            Context context, Handler handler,\n            Instrumentation instrumentation, boolean registered) {\n        synchronized (mReceivers) {\n            LoadedApk.ReceiverDispatcher rd = null;\n            ArrayMap<BroadcastReceiver, LoadedApk.ReceiverDispatcher> map = null;\n            if (registered) {\n                map = mReceivers.get(context);\n                if (map != null) {\n                    rd = map.get(r);\n                }\n            }\n            if (rd == null) {\n                rd = new ReceiverDispatcher(r, context, handler,\n                        instrumentation, registered);\n                if (registered) {\n                    if (map == null) {\n                        map = new ArrayMap<BroadcastReceiver, LoadedApk.ReceiverDispatcher>();\n                        mReceivers.put(context, map);\n                    }\n                    map.put(r, rd);\n                }\n            } else {\n                rd.validate(context, handler);\n            }\n            rd.mForgotten = false;\n            return rd.getIIntentReceiver();\n        }\n    }\n```\n很显然，`getReceiverDispatcher`方法重新创建了一个`ReceiverDispatcher`对象并将其保存的`InnerReceiver`对象作为返回值返回，其中`InnerReceiver`对象和`BroadcastReceiver`都是在`ReceiverDispatcher`的构造方法中被保存起来的。\n由于注册广播的真正实现过程是在AMS中，因此我们需要看一下AMS的具体实现。AMS的`registerReceiver`方法看起来很长，其实关键点就只有下面一部分，最终会把远程的`InnerReceiver`对象以及`IntentFilter`对象存储起来，这样整个广播的注册过程就完成了，代码如下所示。\n``` java\npublic Intent registerReceiver(IApplicationThread caller, String callerPackage,IIntentReceiver receiver, IntentFilter filter, String permission, int userId) {\n    // The first sticky in the list is returned directly back to the client.\n    Intent sticky = allSticky != null ? allSticky.get(0) : null;\n    ReceiverList rl = mRegisteredReceivers.get(receiver.asBinder());\n    BroadcastFilter bf = new BroadcastFilter(filter, rl, callerPackage,permission, callingUid, userId);\n    rl.add(bf);\n    mReceiverResolver.addFilter(bf);\n    return sticky;\n}\n```\n\n#### 广播的发送过程\n\n当通过send方法来发送广播时，AMS会查找出匹配的广播接收者并将广播发送给它们处理。广播的发送有几种类型:普通广播、有序广播和粘性广播，有序广播和粘性广播与普通广播相比具有不同的特性，但是它们的发送/接收过程的流程是类似的，因此这里只分析普通厂播的实现。广播的发送和接收，其本质是一个过程的两个阶段。这里从广播的发送可以说起，广播的发送仍然开始于`ContextWrapper`的`sendBroadcast`方法，之所以不是`Context`,那是因为`Context`的`sendBroadcast`是-一个抽象方法。和广播的注册过程一样，`ContextWrapper`的`sendBroadcast`方法仍然什么都不做，只是把事情交给`ContextImpl`去处理，`ContextImpl的sendBroadcast`方法的源码如下所示。\n``` java\n@Override\n    public void sendBroadcast(Intent intent) {\n        warnIfCallingFromSystemProcess();\n        String resolvedType = intent.resolveTypeIfNeeded(getContentResolver());\n        try {\n            intent.prepareToLeaveProcess(this);\n            ActivityManager.getService().broadcastIntent(\n                    mMainThread.getApplicationThread(), intent, resolvedType, null,\n                    Activity.RESULT_OK, null, null, null, AppOpsManager.OP_NONE, null, false, false,\n                    getUserId());\n        } catch (RemoteException e) {\n            throw e.rethrowFromSystemServer();\n        }\n    }\n```\n从_上面的代码来看，`ContextImpl`也是几乎什么事都没干，它直接向AMS发起了一个异步请求用于发送广播。因此，下面直接看AMS对广播发送过程的处理，AMS的`broadcastIntent`方法又调用了`broadcastIntentLocked`,在这个方法的开始有这么一行：\n``` java\n// By default broadcasts do not go to stopped apps.\nintent.addFlags(Intent.FLAG_EXCLUDE_STOPPED_PACKAGES);\n```\n从Android3.1开始广播默认情况下广播不会发送给已经停止的应用。这是因为系统在Android3.1中为Intent添加了两个标记位，分别是`FLAG_INCLUDE_STOPPED_PACKAGES`和`FLAG_EXCLUDE_STOPPED_PACKAGES`，用来控制广播是否要对处于停止状态的应用起作用，它们的含义如下所示。\n** FLAG_INCLUDE_STOPPED_PACKAGES **\n表示包含已经停止的应用，这个时候广播会发送给已经停止的应用。\n** FLAG_EXCLUDE_STOPPED_PACKAGES **\n表示不包含已经停止的应用，这个时候广播不会发送给已经停止的应用。\n\n从Android3.1开始，系统为所有广播默认添加了`FLAG_EXCLUDE_STOPPED_PACKAGES`标志，这样做是为了防止广播无意间或者在不必要的时候调起已经停止运行的应用。如果的确需要调起未启动的应用，那么只需要为广播的Intent添加`FLAG_INCLUDE_STOPPED_PACKAGES`标记即可。当`FLAG_EXCLUDE_STOPPED_PACKAGES`和`FLAG_INCLUDE_STOPPED_PACKAGES`两种标记位共存时,以`FLAG_INCLUDE_STOPPED_PACKAGES`为准。这里需要补充一下，一个应用处于停止状态分为两种情形:\n第一种是应用安装后未运行，\n第二种是应用被手动或者其他应用强停了。\nAndroid3.1中广播的这个特性同样会影响开机广播，从Android3.1开始，处于停止状态的应用同样无法接收到开机广播，而在Android 3.1之前，处于停止状态的应用是可以收到开机广播的。\n在`broadcastIntentLocked`的内部，会根据`intent-filter`查找出匹配的广播接收者并经过一系列的条件过滤，最终会将满足条件的广播接收者添加到`BroadcastQueue`中，接着`BroadcastQueue`就会将广播发送给相应的广播接收者，这个过程的源码如下所示。\n``` java\nif ((receivers != null && receivers.size() > 0)\n                || resultTo != null) {\n            BroadcastQueue queue = broadcastQueueForIntent(intent);\n            BroadcastRecord r = new BroadcastRecord(queue, intent, callerApp,\n                    callerPackage, callingPid, callingUid, resolvedType,\n                    requiredPermissions, appOp, brOptions, receivers, resultTo, resultCode,\n                    resultData, resultExtras, ordered, sticky, false, userId);\n\n            if (DEBUG_BROADCAST) Slog.v(TAG_BROADCAST, \"Enqueueing ordered broadcast \" + r\n                    + \": prev had \" + queue.mOrderedBroadcasts.size());\n            if (DEBUG_BROADCAST) Slog.i(TAG_BROADCAST,\n                    \"Enqueueing broadcast \" + r.intent.getAction());\n\n            boolean replaced = replacePending && queue.replaceOrderedBroadcastLocked(r);\n            if (!replaced) {\n                queue.enqueueOrderedBroadcastLocked(r);\n                queue.scheduleBroadcastsLocked();\n            }\n        } else {\n            // There was nobody interested in the broadcast, but we still want to record\n            // that it happened.\n            if (intent.getComponent() == null && intent.getPackage() == null\n                    && (intent.getFlags()&Intent.FLAG_RECEIVER_REGISTERED_ONLY) == 0) {\n                // This was an implicit broadcast... let's record it for posterity.\n                addBroadcastStatLocked(intent.getAction(), callerPackage, 0, 0, 0);\n            }\n        }\n```\n将广播添加到`BroadCastQueue`之后，接着调用了`scheduleBroadcastsLocked`方法：\n``` java\n public void scheduleBroadcastsLocked() {\n        if (DEBUG_BROADCAST) Slog.v(TAG_BROADCAST, \"Schedule broadcasts [\"\n                + mQueueName + \"]: current=\"\n                + mBroadcastsScheduled);\n\n        if (mBroadcastsScheduled) {\n            return;\n        }\n        mHandler.sendMessage(mHandler.obtainMessage(BROADCAST_INTENT_MSG, this));\n        mBroadcastsScheduled = true;\n    }\n```\n方法内发送了一个`BROADCAST_INTENT_MSG`消息，handler接到消息后，调用了`processNextBroadcast`方法\n\n``` java\n private final class BroadcastHandler extends Handler {\n        public BroadcastHandler(Looper looper) {\n            super(looper, null, true);\n        }\n\n        @Override\n        public void handleMessage(Message msg) {\n            switch (msg.what) {\n                case BROADCAST_INTENT_MSG: {\n                    if (DEBUG_BROADCAST) Slog.v(TAG_BROADCAST, \"Received BROADCAST_INTENT_MSG\");\n                    processNextBroadcast(true);\n                } break;\n                case BROADCAST_TIMEOUT_MSG: {\n                    synchronized (mService) {\n                        broadcastTimeoutLocked(true);\n                    }\n                } break;\n                case SCHEDULE_TEMP_WHITELIST_MSG: {\n                    DeviceIdleController.LocalService dic = mService.mLocalDeviceIdleController;\n                    if (dic != null) {\n                        dic.addPowerSaveTempWhitelistAppDirect(UserHandle.getAppId(msg.arg1),msg.arg2, true, (String)msg.obj);\n                    }\n                } break;\n            }\n        }\n    }\n```\n收到消息后会调用`processNextBroadcast`方法，内容如下：\n``` java\n// First, deliver any non-serialized broadcasts right away.\n    while (mParallelBroadcasts.size() > 0) {\n        r = mParallelBroadcasts.remove(0);\n        r.dispatchTime = SystemClock.uptimeMillis();\n        r.dispatchClockTime = System.currentTimeMillis();\n\n        if (Trace.isTagEnabled(Trace.TRACE_TAG_ACTIVITY_MANAGER)) {\n            Trace.asyncTraceEnd(Trace.TRACE_TAG_ACTIVITY_MANAGER,\n                createBroadcastTraceTitle(r, BroadcastRecord.DELIVERY_PENDING),\n                System.identityHashCode(r));\n            Trace.asyncTraceBegin(Trace.TRACE_TAG_ACTIVITY_MANAGER,\n                createBroadcastTraceTitle(r, BroadcastRecord.DELIVERY_DELIVERED),\n                System.identityHashCode(r));\n        }\n\n        final int N = r.receivers.size();\n        \n        for (int i=0; i<N; i++) {\n            Object target = r.receivers.get(i);\n            if (DEBUG_BROADCAST)  Slog.v(TAG_BROADCAST,\n                    \"Delivering non-ordered on [\" + mQueueName + \"] to registered \"\n                    + target + \": \" + r);\n            deliverToRegisteredReceiverLocked(r, (BroadcastFilter)target, false, i);\n        }\n        addBroadcastToHistoryLocked(r);\n       \n    }\n```\n\n可以看到，无序广播存储在`mParallelBroadcasts`中，系统会遍历`mParallelBroadcasts`并将其中的广播发送给它们所有的接收者，具体的发送过程是通过`deliverToRegisteredReceiverLocked`方法来实现的。`deliverToRegisteredReceiverLocked`方法负责将一个广播发送给一个特定的接收者，它内部调用了`performReceiveLocked`方法来完成具体的发送过程:\n``` java\n performReceiveLocked(r.callerApp, r.resultTo,new Intent(r.intent), r.resultCode,r.resultData, r.resultExtras, false, false, r.userId);\n```\n`performReceiveLocked`方法的实现如下所示。由于接收广播会调起应用程序，因此app.thread不为null，根据前面的分析我们知道这里的`app.thread`仍然指`ApplicationThread`。\n``` java\nvoid performReceiveLocked(ProcessRecord app, IIntentReceiver receiver,Intent intent, int resultCode, String data, Bundle extras,boolean ordered, boolean sticky, int sendingUser) throws RemoteException {\n            \n            // Send the intent to the receiver asynchronously using one-way binder calls.\n    if (app != null) {\n        if (app.thread != null) {\n            // If we have an app thread, do the call through that so it is\n            // correctly ordered with other one-way calls.\n            try {\n                app.thread.scheduleRegisteredReceiver(receiver, intent, resultCode,\n                        data, extras, ordered, sticky, sendingUser, app.repProcState);\n            // TODO: Uncomment this when (b/28322359) is fixed and we aren't getting\n            // DeadObjectException when the process isn't actually dead.\n            //} catch (DeadObjectException ex) {\n            // Failed to call into the process.  It's dying so just let it die and move on.\n            //    throw ex;\n            } catch (RemoteException ex) {\n                // Failed to call into the process. It's either dying or wedged. Kill it gently.\n                synchronized (mService) {\n                    Slog.w(TAG, \"Can't deliver broadcast to \" + app.processName\n                            + \" (pid \" + app.pid + \"). Crashing it.\");\n                    app.scheduleCrash(\"can't deliver broadcast\");\n                }\n                throw ex;\n            }\n        } else {\n            // Application has died. Receiver doesn't exist.\n            throw new RemoteException(\"app.thread must not be null\");\n        }\n    } else {\n        receiver.performReceive(intent, resultCode, data, extras, ordered,\n                sticky, sendingUser);\n    }\n            \n}\n```\n`ApplicationThread`的`scheduleRegisteredReceiver`的实现比较简单，它通过`InnerReceiver`来实现广播的接收:\n``` java\n    // This function exists to make sure all receiver dispatching is\n    // correctly ordered, since these are one-way calls and the binder driver\n    // applies transaction ordering per object for such calls.\n    public void scheduleRegisteredReceiver(IIntentReceiver receiver, Intent intent,\n            int resultCode, String dataStr, Bundle extras, boolean ordered,\n            boolean sticky, int sendingUser, int processState) throws RemoteException {\n        updateProcessState(processState, false);\n        receiver.performReceive(intent, resultCode, dataStr, extras, ordered,\n                sticky, sendingUser);\n    }\n```\n`InnerReceiver`的`performReceive`方法会调用`LoadedApk.ReceiverDispatcher`的`performReceive`方法，`LoadedApk.ReceiverDispatcher`的`performReceive`方法的实现如下所示:\n``` java\npublic void performReceive(Intent intent, int resultCode, String data,Bundle extras, boolean ordered, boolean sticky, int sendingUser) {\n    final Args args = new Args(intent, resultCode, data, extras, ordered,\n            sticky, sendingUser);\n    if (intent == null) {\n        Log.wtf(TAG, \"Null intent received\");\n    } else {\n        if (ActivityThread.DEBUG_BROADCAST) {\n            int seq = intent.getIntExtra(\"seq\", -1);\n            Slog.i(ActivityThread.TAG, \"Enqueueing broadcast \" + intent.getAction()\n                    + \" seq=\" + seq + \" to \" + mReceiver);\n        }\n    }\n    if (intent == null || !mActivityThread.post(args.getRunnable())) {\n        if (mRegistered && ordered) {\n            IActivityManager mgr = ActivityManager.getService();\n            if (ActivityThread.DEBUG_BROADCAST) Slog.i(ActivityThread.TAG,\n                    \"Finishing sync broadcast to \" + mReceiver);\n            args.sendFinished(mgr);\n        }\n    }\n}\n```\n在上面的代码中，会创建一个Args对象并通过mActivityThread的post方法来执行Args中的逻辑，而Args实现了Runnable接口。mActivityThread是一个Handler，它其实就是ActivityThread中的mH，mH的类型是ActivityThread的内部类H。在Args的run方法中有如下几行代码:\n``` java\nfinal BroadcastReceiver receiver = mReceiver;\nfinal boolean ordered = mOrdered;\nreceiver.setPendingResult(this);\nreceiver.onReceive(mContext, intent);\n```\n这个时候BroadcastReceiver的onReceive方法被执行了，也就是说应用已经接收到广播了，同时onReceive方法是在广播接收者的主线程中被调用的。\n\n----\n以上","slug":"Android广播","published":1,"updated":"2018-08-04T04:49:08.149Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjl3vbtqu001aisdgce8ykvys","content":"<p>面试APUS的时候被问到广播：<br>面试官：聊一下广播吧。<br>我：广播啊，四大组件之一，自己创建个类继承自<code>BroadcastReceiver</code>，重写<code>onReceive()</code>方法，需要注意的是不要在这个方法中做耗时操作。注册的话可以在<code>AndroidManifest</code>文件中静态注册，也可以在代码中动态注册。都做完了之后就可以调用sendBroadCast()方法发送广播了。<br>面试官：了解广播注册过程么？<br>我：哈~！这个没怎么看过。<br>面试官：了解怎么接收到的广播么？<br>我：没有。。。。<br><a id=\"more\"></a></p>\n<h4 id=\"广播的注册过程\"><a href=\"#广播的注册过程\" class=\"headerlink\" title=\"广播的注册过程\"></a>广播的注册过程</h4><p>《Android开发艺术探索》9.4章<br>广播的注册分为静态注册和动态注册，其中静态注册的广播在应用安装时由系统自动完成注册，具体来说是由PMS ( PackageManagerService)来完成整个注册过程的，除了广播以外，其他三大组件也都是在应用安装时由PMS解析并注册的。这里只分析广播的动态注册的过程，动态注册的过程是从ContextWrapper的registerReceiver方法开始的，和Activity以及Service一样 。ContextWrapper并 没有做实际的工作，而是将注册过程直接交给了ContextImpl来完成，如下所示：<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">@Override</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> Intent <span class=\"title\">registerReceiver</span><span class=\"params\">(BroadcastReceiver receiver, IntentFilter filter)</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> mBase.registerReceiver(receiver, filter);</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"meta\">@Override</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> Intent <span class=\"title\">registerReceiver</span><span class=\"params\">(BroadcastReceiver receiver, IntentFilter filter,String broadcastPermission, Handler scheduler)</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> registerReceiverInternal(receiver, getUserId(),</div><div class=\"line\">            filter, broadcastPermission, scheduler, getOuterContext(), <span class=\"number\">0</span>);</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>这里的<code>registerReceiver</code>方法是重载方法，最终调用了<code>registerReceiverInternal</code>方法：<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> Intent <span class=\"title\">registerReceiverInternal</span><span class=\"params\">(BroadcastReceiver receiver, <span class=\"keyword\">int</span> userId,</span></span></div><div class=\"line\">            IntentFilter filter, String broadcastPermission,</div><div class=\"line\">            Handler scheduler, Context context, <span class=\"keyword\">int</span> flags) &#123;</div><div class=\"line\">        IIntentReceiver rd = <span class=\"keyword\">null</span>;</div><div class=\"line\">        <span class=\"keyword\">if</span> (receiver != <span class=\"keyword\">null</span>) &#123;</div><div class=\"line\">            <span class=\"keyword\">if</span> (mPackageInfo != <span class=\"keyword\">null</span> &amp;&amp; context != <span class=\"keyword\">null</span>) &#123;</div><div class=\"line\">                <span class=\"keyword\">if</span> (scheduler == <span class=\"keyword\">null</span>) &#123;</div><div class=\"line\">                    scheduler = mMainThread.getHandler();</div><div class=\"line\">                &#125;</div><div class=\"line\">                rd = mPackageInfo.getReceiverDispatcher(</div><div class=\"line\">                    receiver, context, scheduler,</div><div class=\"line\">                    mMainThread.getInstrumentation(), <span class=\"keyword\">true</span>);</div><div class=\"line\">            &#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">                <span class=\"keyword\">if</span> (scheduler == <span class=\"keyword\">null</span>) &#123;</div><div class=\"line\">                    scheduler = mMainThread.getHandler();</div><div class=\"line\">                &#125;</div><div class=\"line\">                rd = <span class=\"keyword\">new</span> LoadedApk.ReceiverDispatcher(</div><div class=\"line\">                        receiver, context, scheduler, <span class=\"keyword\">null</span>, <span class=\"keyword\">true</span>).getIIntentReceiver();</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;</div><div class=\"line\">        <span class=\"keyword\">try</span> &#123;</div><div class=\"line\">            <span class=\"keyword\">final</span> Intent intent = ActivityManager.getService().registerReceiver(</div><div class=\"line\">                    mMainThread.getApplicationThread(), mBasePackageName, rd, filter,</div><div class=\"line\">                    broadcastPermission, userId, flags);</div><div class=\"line\">            <span class=\"keyword\">if</span> (intent != <span class=\"keyword\">null</span>) &#123;</div><div class=\"line\">                intent.setExtrasClassLoader(getClassLoader());</div><div class=\"line\">                intent.prepareToEnterProcess();</div><div class=\"line\">            &#125;</div><div class=\"line\">            <span class=\"keyword\">return</span> intent;</div><div class=\"line\">        &#125; <span class=\"keyword\">catch</span> (RemoteException e) &#123;</div><div class=\"line\">            <span class=\"keyword\">throw</span> e.rethrowFromSystemServer();</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div></pre></td></tr></table></figure></p>\n<p>在上面的代码中，系统首先从<code>mPackageInfo</code>获取<code>IIntentReceiver</code>对象，然后再采用跨进程的方式向AMS发送广播注册的请求。之所以采用<code>IIntentReceiver</code>而不是直接采用<code>BroadcastReceiver</code> ,这是因为上述注册过程是一个进程间通信的过程，而<code>BroadcastReceiver</code>作为Android的一个组件是不能直接跨进程传递的，所以需要通过<code>IIntentReceiver</code>来中转一下。毫无疑问，<code>IIntentReceiver</code>必须是一个Binder接口，它的具体实现是<code>LoadedApk.ReceiverDispatcher.InnerReceiver</code>, <code>ReceiverDispatcher</code>的内部同时保存了<code>BroadcastReceiver</code>和<code>InnerReceiver</code>,这样当接收到广播时，<code>ReceiverDispatcher</code>可以很方便地调用<code>BroadcastReceiver</code>的<code>onReceive</code>方法。<br>看一下<code>LoadedApk.getReceiverDispatcher</code>方法：<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> IIntentReceiver <span class=\"title\">getReceiverDispatcher</span><span class=\"params\">(BroadcastReceiver r,</span></span></div><div class=\"line\">            Context context, Handler handler,</div><div class=\"line\">            Instrumentation instrumentation, <span class=\"keyword\">boolean</span> registered) &#123;</div><div class=\"line\">        <span class=\"keyword\">synchronized</span> (mReceivers) &#123;</div><div class=\"line\">            LoadedApk.ReceiverDispatcher rd = <span class=\"keyword\">null</span>;</div><div class=\"line\">            ArrayMap&lt;BroadcastReceiver, LoadedApk.ReceiverDispatcher&gt; map = <span class=\"keyword\">null</span>;</div><div class=\"line\">            <span class=\"keyword\">if</span> (registered) &#123;</div><div class=\"line\">                map = mReceivers.get(context);</div><div class=\"line\">                <span class=\"keyword\">if</span> (map != <span class=\"keyword\">null</span>) &#123;</div><div class=\"line\">                    rd = map.get(r);</div><div class=\"line\">                &#125;</div><div class=\"line\">            &#125;</div><div class=\"line\">            <span class=\"keyword\">if</span> (rd == <span class=\"keyword\">null</span>) &#123;</div><div class=\"line\">                rd = <span class=\"keyword\">new</span> ReceiverDispatcher(r, context, handler,</div><div class=\"line\">                        instrumentation, registered);</div><div class=\"line\">                <span class=\"keyword\">if</span> (registered) &#123;</div><div class=\"line\">                    <span class=\"keyword\">if</span> (map == <span class=\"keyword\">null</span>) &#123;</div><div class=\"line\">                        map = <span class=\"keyword\">new</span> ArrayMap&lt;BroadcastReceiver, LoadedApk.ReceiverDispatcher&gt;();</div><div class=\"line\">                        mReceivers.put(context, map);</div><div class=\"line\">                    &#125;</div><div class=\"line\">                    map.put(r, rd);</div><div class=\"line\">                &#125;</div><div class=\"line\">            &#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">                rd.validate(context, handler);</div><div class=\"line\">            &#125;</div><div class=\"line\">            rd.mForgotten = <span class=\"keyword\">false</span>;</div><div class=\"line\">            <span class=\"keyword\">return</span> rd.getIIntentReceiver();</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div></pre></td></tr></table></figure></p>\n<p>很显然，<code>getReceiverDispatcher</code>方法重新创建了一个<code>ReceiverDispatcher</code>对象并将其保存的<code>InnerReceiver</code>对象作为返回值返回，其中<code>InnerReceiver</code>对象和<code>BroadcastReceiver</code>都是在<code>ReceiverDispatcher</code>的构造方法中被保存起来的。<br>由于注册广播的真正实现过程是在AMS中，因此我们需要看一下AMS的具体实现。AMS的<code>registerReceiver</code>方法看起来很长，其实关键点就只有下面一部分，最终会把远程的<code>InnerReceiver</code>对象以及<code>IntentFilter</code>对象存储起来，这样整个广播的注册过程就完成了，代码如下所示。<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> Intent <span class=\"title\">registerReceiver</span><span class=\"params\">(IApplicationThread caller, String callerPackage,IIntentReceiver receiver, IntentFilter filter, String permission, <span class=\"keyword\">int</span> userId)</span> </span>&#123;</div><div class=\"line\">    <span class=\"comment\">// The first sticky in the list is returned directly back to the client.</span></div><div class=\"line\">    Intent sticky = allSticky != <span class=\"keyword\">null</span> ? allSticky.get(<span class=\"number\">0</span>) : <span class=\"keyword\">null</span>;</div><div class=\"line\">    ReceiverList rl = mRegisteredReceivers.get(receiver.asBinder());</div><div class=\"line\">    BroadcastFilter bf = <span class=\"keyword\">new</span> BroadcastFilter(filter, rl, callerPackage,permission, callingUid, userId);</div><div class=\"line\">    rl.add(bf);</div><div class=\"line\">    mReceiverResolver.addFilter(bf);</div><div class=\"line\">    <span class=\"keyword\">return</span> sticky;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<h4 id=\"广播的发送过程\"><a href=\"#广播的发送过程\" class=\"headerlink\" title=\"广播的发送过程\"></a>广播的发送过程</h4><p>当通过send方法来发送广播时，AMS会查找出匹配的广播接收者并将广播发送给它们处理。广播的发送有几种类型:普通广播、有序广播和粘性广播，有序广播和粘性广播与普通广播相比具有不同的特性，但是它们的发送/接收过程的流程是类似的，因此这里只分析普通厂播的实现。广播的发送和接收，其本质是一个过程的两个阶段。这里从广播的发送可以说起，广播的发送仍然开始于<code>ContextWrapper</code>的<code>sendBroadcast</code>方法，之所以不是<code>Context</code>,那是因为<code>Context</code>的<code>sendBroadcast</code>是-一个抽象方法。和广播的注册过程一样，<code>ContextWrapper</code>的<code>sendBroadcast</code>方法仍然什么都不做，只是把事情交给<code>ContextImpl</code>去处理，<code>ContextImpl的sendBroadcast</code>方法的源码如下所示。<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">@Override</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">sendBroadcast</span><span class=\"params\">(Intent intent)</span> </span>&#123;</div><div class=\"line\">        warnIfCallingFromSystemProcess();</div><div class=\"line\">        String resolvedType = intent.resolveTypeIfNeeded(getContentResolver());</div><div class=\"line\">        <span class=\"keyword\">try</span> &#123;</div><div class=\"line\">            intent.prepareToLeaveProcess(<span class=\"keyword\">this</span>);</div><div class=\"line\">            ActivityManager.getService().broadcastIntent(</div><div class=\"line\">                    mMainThread.getApplicationThread(), intent, resolvedType, <span class=\"keyword\">null</span>,</div><div class=\"line\">                    Activity.RESULT_OK, <span class=\"keyword\">null</span>, <span class=\"keyword\">null</span>, <span class=\"keyword\">null</span>, AppOpsManager.OP_NONE, <span class=\"keyword\">null</span>, <span class=\"keyword\">false</span>, <span class=\"keyword\">false</span>,</div><div class=\"line\">                    getUserId());</div><div class=\"line\">        &#125; <span class=\"keyword\">catch</span> (RemoteException e) &#123;</div><div class=\"line\">            <span class=\"keyword\">throw</span> e.rethrowFromSystemServer();</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div></pre></td></tr></table></figure></p>\n<p>从_上面的代码来看，<code>ContextImpl</code>也是几乎什么事都没干，它直接向AMS发起了一个异步请求用于发送广播。因此，下面直接看AMS对广播发送过程的处理，AMS的<code>broadcastIntent</code>方法又调用了<code>broadcastIntentLocked</code>,在这个方法的开始有这么一行：<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// By default broadcasts do not go to stopped apps.</span></div><div class=\"line\">intent.addFlags(Intent.FLAG_EXCLUDE_STOPPED_PACKAGES);</div></pre></td></tr></table></figure></p>\n<p>从Android3.1开始广播默认情况下广播不会发送给已经停止的应用。这是因为系统在Android3.1中为Intent添加了两个标记位，分别是<code>FLAG_INCLUDE_STOPPED_PACKAGES</code>和<code>FLAG_EXCLUDE_STOPPED_PACKAGES</code>，用来控制广播是否要对处于停止状态的应用起作用，它们的含义如下所示。<br><strong> FLAG_INCLUDE_STOPPED_PACKAGES </strong><br>表示包含已经停止的应用，这个时候广播会发送给已经停止的应用。<br><strong> FLAG_EXCLUDE_STOPPED_PACKAGES </strong><br>表示不包含已经停止的应用，这个时候广播不会发送给已经停止的应用。</p>\n<p>从Android3.1开始，系统为所有广播默认添加了<code>FLAG_EXCLUDE_STOPPED_PACKAGES</code>标志，这样做是为了防止广播无意间或者在不必要的时候调起已经停止运行的应用。如果的确需要调起未启动的应用，那么只需要为广播的Intent添加<code>FLAG_INCLUDE_STOPPED_PACKAGES</code>标记即可。当<code>FLAG_EXCLUDE_STOPPED_PACKAGES</code>和<code>FLAG_INCLUDE_STOPPED_PACKAGES</code>两种标记位共存时,以<code>FLAG_INCLUDE_STOPPED_PACKAGES</code>为准。这里需要补充一下，一个应用处于停止状态分为两种情形:<br>第一种是应用安装后未运行，<br>第二种是应用被手动或者其他应用强停了。<br>Android3.1中广播的这个特性同样会影响开机广播，从Android3.1开始，处于停止状态的应用同样无法接收到开机广播，而在Android 3.1之前，处于停止状态的应用是可以收到开机广播的。<br>在<code>broadcastIntentLocked</code>的内部，会根据<code>intent-filter</code>查找出匹配的广播接收者并经过一系列的条件过滤，最终会将满足条件的广播接收者添加到<code>BroadcastQueue</code>中，接着<code>BroadcastQueue</code>就会将广播发送给相应的广播接收者，这个过程的源码如下所示。<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">if</span> ((receivers != <span class=\"keyword\">null</span> &amp;&amp; receivers.size() &gt; <span class=\"number\">0</span>)</div><div class=\"line\">                || resultTo != <span class=\"keyword\">null</span>) &#123;</div><div class=\"line\">            BroadcastQueue queue = broadcastQueueForIntent(intent);</div><div class=\"line\">            BroadcastRecord r = <span class=\"keyword\">new</span> BroadcastRecord(queue, intent, callerApp,</div><div class=\"line\">                    callerPackage, callingPid, callingUid, resolvedType,</div><div class=\"line\">                    requiredPermissions, appOp, brOptions, receivers, resultTo, resultCode,</div><div class=\"line\">                    resultData, resultExtras, ordered, sticky, <span class=\"keyword\">false</span>, userId);</div><div class=\"line\"></div><div class=\"line\">            <span class=\"keyword\">if</span> (DEBUG_BROADCAST) Slog.v(TAG_BROADCAST, <span class=\"string\">\"Enqueueing ordered broadcast \"</span> + r</div><div class=\"line\">                    + <span class=\"string\">\": prev had \"</span> + queue.mOrderedBroadcasts.size());</div><div class=\"line\">            <span class=\"keyword\">if</span> (DEBUG_BROADCAST) Slog.i(TAG_BROADCAST,</div><div class=\"line\">                    <span class=\"string\">\"Enqueueing broadcast \"</span> + r.intent.getAction());</div><div class=\"line\"></div><div class=\"line\">            <span class=\"keyword\">boolean</span> replaced = replacePending &amp;&amp; queue.replaceOrderedBroadcastLocked(r);</div><div class=\"line\">            <span class=\"keyword\">if</span> (!replaced) &#123;</div><div class=\"line\">                queue.enqueueOrderedBroadcastLocked(r);</div><div class=\"line\">                queue.scheduleBroadcastsLocked();</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">            <span class=\"comment\">// There was nobody interested in the broadcast, but we still want to record</span></div><div class=\"line\">            <span class=\"comment\">// that it happened.</span></div><div class=\"line\">            <span class=\"keyword\">if</span> (intent.getComponent() == <span class=\"keyword\">null</span> &amp;&amp; intent.getPackage() == <span class=\"keyword\">null</span></div><div class=\"line\">                    &amp;&amp; (intent.getFlags()&amp;Intent.FLAG_RECEIVER_REGISTERED_ONLY) == <span class=\"number\">0</span>) &#123;</div><div class=\"line\">                <span class=\"comment\">// This was an implicit broadcast... let's record it for posterity.</span></div><div class=\"line\">                addBroadcastStatLocked(intent.getAction(), callerPackage, <span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>);</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;</div></pre></td></tr></table></figure></p>\n<p>将广播添加到<code>BroadCastQueue</code>之后，接着调用了<code>scheduleBroadcastsLocked</code>方法：<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">scheduleBroadcastsLocked</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">       <span class=\"keyword\">if</span> (DEBUG_BROADCAST) Slog.v(TAG_BROADCAST, <span class=\"string\">\"Schedule broadcasts [\"</span></div><div class=\"line\">               + mQueueName + <span class=\"string\">\"]: current=\"</span></div><div class=\"line\">               + mBroadcastsScheduled);</div><div class=\"line\"></div><div class=\"line\">       <span class=\"keyword\">if</span> (mBroadcastsScheduled) &#123;</div><div class=\"line\">           <span class=\"keyword\">return</span>;</div><div class=\"line\">       &#125;</div><div class=\"line\">       mHandler.sendMessage(mHandler.obtainMessage(BROADCAST_INTENT_MSG, <span class=\"keyword\">this</span>));</div><div class=\"line\">       mBroadcastsScheduled = <span class=\"keyword\">true</span>;</div><div class=\"line\">   &#125;</div></pre></td></tr></table></figure></p>\n<p>方法内发送了一个<code>BROADCAST_INTENT_MSG</code>消息，handler接到消息后，调用了<code>processNextBroadcast</code>方法</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">private</span> <span class=\"keyword\">final</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">BroadcastHandler</span> <span class=\"keyword\">extends</span> <span class=\"title\">Handler</span> </span>&#123;</div><div class=\"line\">       <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">BroadcastHandler</span><span class=\"params\">(Looper looper)</span> </span>&#123;</div><div class=\"line\">           <span class=\"keyword\">super</span>(looper, <span class=\"keyword\">null</span>, <span class=\"keyword\">true</span>);</div><div class=\"line\">       &#125;</div><div class=\"line\"></div><div class=\"line\">       <span class=\"meta\">@Override</span></div><div class=\"line\">       <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">handleMessage</span><span class=\"params\">(Message msg)</span> </span>&#123;</div><div class=\"line\">           <span class=\"keyword\">switch</span> (msg.what) &#123;</div><div class=\"line\">               <span class=\"keyword\">case</span> BROADCAST_INTENT_MSG: &#123;</div><div class=\"line\">                   <span class=\"keyword\">if</span> (DEBUG_BROADCAST) Slog.v(TAG_BROADCAST, <span class=\"string\">\"Received BROADCAST_INTENT_MSG\"</span>);</div><div class=\"line\">                   processNextBroadcast(<span class=\"keyword\">true</span>);</div><div class=\"line\">               &#125; <span class=\"keyword\">break</span>;</div><div class=\"line\">               <span class=\"keyword\">case</span> BROADCAST_TIMEOUT_MSG: &#123;</div><div class=\"line\">                   <span class=\"keyword\">synchronized</span> (mService) &#123;</div><div class=\"line\">                       broadcastTimeoutLocked(<span class=\"keyword\">true</span>);</div><div class=\"line\">                   &#125;</div><div class=\"line\">               &#125; <span class=\"keyword\">break</span>;</div><div class=\"line\">               <span class=\"keyword\">case</span> SCHEDULE_TEMP_WHITELIST_MSG: &#123;</div><div class=\"line\">                   DeviceIdleController.LocalService dic = mService.mLocalDeviceIdleController;</div><div class=\"line\">                   <span class=\"keyword\">if</span> (dic != <span class=\"keyword\">null</span>) &#123;</div><div class=\"line\">                       dic.addPowerSaveTempWhitelistAppDirect(UserHandle.getAppId(msg.arg1),msg.arg2, <span class=\"keyword\">true</span>, (String)msg.obj);</div><div class=\"line\">                   &#125;</div><div class=\"line\">               &#125; <span class=\"keyword\">break</span>;</div><div class=\"line\">           &#125;</div><div class=\"line\">       &#125;</div><div class=\"line\">   &#125;</div></pre></td></tr></table></figure>\n<p>收到消息后会调用<code>processNextBroadcast</code>方法，内容如下：<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// First, deliver any non-serialized broadcasts right away.</span></div><div class=\"line\">    <span class=\"keyword\">while</span> (mParallelBroadcasts.size() &gt; <span class=\"number\">0</span>) &#123;</div><div class=\"line\">        r = mParallelBroadcasts.remove(<span class=\"number\">0</span>);</div><div class=\"line\">        r.dispatchTime = SystemClock.uptimeMillis();</div><div class=\"line\">        r.dispatchClockTime = System.currentTimeMillis();</div><div class=\"line\"></div><div class=\"line\">        <span class=\"keyword\">if</span> (Trace.isTagEnabled(Trace.TRACE_TAG_ACTIVITY_MANAGER)) &#123;</div><div class=\"line\">            Trace.asyncTraceEnd(Trace.TRACE_TAG_ACTIVITY_MANAGER,</div><div class=\"line\">                createBroadcastTraceTitle(r, BroadcastRecord.DELIVERY_PENDING),</div><div class=\"line\">                System.identityHashCode(r));</div><div class=\"line\">            Trace.asyncTraceBegin(Trace.TRACE_TAG_ACTIVITY_MANAGER,</div><div class=\"line\">                createBroadcastTraceTitle(r, BroadcastRecord.DELIVERY_DELIVERED),</div><div class=\"line\">                System.identityHashCode(r));</div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\">        <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> N = r.receivers.size();</div><div class=\"line\">        </div><div class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i=<span class=\"number\">0</span>; i&lt;N; i++) &#123;</div><div class=\"line\">            Object target = r.receivers.get(i);</div><div class=\"line\">            <span class=\"keyword\">if</span> (DEBUG_BROADCAST)  Slog.v(TAG_BROADCAST,</div><div class=\"line\">                    <span class=\"string\">\"Delivering non-ordered on [\"</span> + mQueueName + <span class=\"string\">\"] to registered \"</span></div><div class=\"line\">                    + target + <span class=\"string\">\": \"</span> + r);</div><div class=\"line\">            deliverToRegisteredReceiverLocked(r, (BroadcastFilter)target, <span class=\"keyword\">false</span>, i);</div><div class=\"line\">        &#125;</div><div class=\"line\">        addBroadcastToHistoryLocked(r);</div><div class=\"line\">       </div><div class=\"line\">    &#125;</div></pre></td></tr></table></figure></p>\n<p>可以看到，无序广播存储在<code>mParallelBroadcasts</code>中，系统会遍历<code>mParallelBroadcasts</code>并将其中的广播发送给它们所有的接收者，具体的发送过程是通过<code>deliverToRegisteredReceiverLocked</code>方法来实现的。<code>deliverToRegisteredReceiverLocked</code>方法负责将一个广播发送给一个特定的接收者，它内部调用了<code>performReceiveLocked</code>方法来完成具体的发送过程:<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">performReceiveLocked(r.callerApp, r.resultTo,<span class=\"keyword\">new</span> Intent(r.intent), r.resultCode,r.resultData, r.resultExtras, <span class=\"keyword\">false</span>, <span class=\"keyword\">false</span>, r.userId);</div></pre></td></tr></table></figure></p>\n<p><code>performReceiveLocked</code>方法的实现如下所示。由于接收广播会调起应用程序，因此app.thread不为null，根据前面的分析我们知道这里的<code>app.thread</code>仍然指<code>ApplicationThread</code>。<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">performReceiveLocked</span><span class=\"params\">(ProcessRecord app, IIntentReceiver receiver,Intent intent, <span class=\"keyword\">int</span> resultCode, String data, Bundle extras,<span class=\"keyword\">boolean</span> ordered, <span class=\"keyword\">boolean</span> sticky, <span class=\"keyword\">int</span> sendingUser)</span> <span class=\"keyword\">throws</span> RemoteException </span>&#123;</div><div class=\"line\">            </div><div class=\"line\">            <span class=\"comment\">// Send the intent to the receiver asynchronously using one-way binder calls.</span></div><div class=\"line\">    <span class=\"keyword\">if</span> (app != <span class=\"keyword\">null</span>) &#123;</div><div class=\"line\">        <span class=\"keyword\">if</span> (app.thread != <span class=\"keyword\">null</span>) &#123;</div><div class=\"line\">            <span class=\"comment\">// If we have an app thread, do the call through that so it is</span></div><div class=\"line\">            <span class=\"comment\">// correctly ordered with other one-way calls.</span></div><div class=\"line\">            <span class=\"keyword\">try</span> &#123;</div><div class=\"line\">                app.thread.scheduleRegisteredReceiver(receiver, intent, resultCode,</div><div class=\"line\">                        data, extras, ordered, sticky, sendingUser, app.repProcState);</div><div class=\"line\">            <span class=\"comment\">// <span class=\"doctag\">TODO:</span> Uncomment this when (b/28322359) is fixed and we aren't getting</span></div><div class=\"line\">            <span class=\"comment\">// DeadObjectException when the process isn't actually dead.</span></div><div class=\"line\">            <span class=\"comment\">//&#125; catch (DeadObjectException ex) &#123;</span></div><div class=\"line\">            <span class=\"comment\">// Failed to call into the process.  It's dying so just let it die and move on.</span></div><div class=\"line\">            <span class=\"comment\">//    throw ex;</span></div><div class=\"line\">            &#125; <span class=\"keyword\">catch</span> (RemoteException ex) &#123;</div><div class=\"line\">                <span class=\"comment\">// Failed to call into the process. It's either dying or wedged. Kill it gently.</span></div><div class=\"line\">                <span class=\"keyword\">synchronized</span> (mService) &#123;</div><div class=\"line\">                    Slog.w(TAG, <span class=\"string\">\"Can't deliver broadcast to \"</span> + app.processName</div><div class=\"line\">                            + <span class=\"string\">\" (pid \"</span> + app.pid + <span class=\"string\">\"). Crashing it.\"</span>);</div><div class=\"line\">                    app.scheduleCrash(<span class=\"string\">\"can't deliver broadcast\"</span>);</div><div class=\"line\">                &#125;</div><div class=\"line\">                <span class=\"keyword\">throw</span> ex;</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">            <span class=\"comment\">// Application has died. Receiver doesn't exist.</span></div><div class=\"line\">            <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> RemoteException(<span class=\"string\">\"app.thread must not be null\"</span>);</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">        receiver.performReceive(intent, resultCode, data, extras, ordered,</div><div class=\"line\">                sticky, sendingUser);</div><div class=\"line\">    &#125;</div><div class=\"line\">            </div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p><code>ApplicationThread</code>的<code>scheduleRegisteredReceiver</code>的实现比较简单，它通过<code>InnerReceiver</code>来实现广播的接收:<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// This function exists to make sure all receiver dispatching is</span></div><div class=\"line\"><span class=\"comment\">// correctly ordered, since these are one-way calls and the binder driver</span></div><div class=\"line\"><span class=\"comment\">// applies transaction ordering per object for such calls.</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">scheduleRegisteredReceiver</span><span class=\"params\">(IIntentReceiver receiver, Intent intent,</span></span></div><div class=\"line\">        <span class=\"keyword\">int</span> resultCode, String dataStr, Bundle extras, <span class=\"keyword\">boolean</span> ordered,</div><div class=\"line\">        <span class=\"keyword\">boolean</span> sticky, <span class=\"keyword\">int</span> sendingUser, <span class=\"keyword\">int</span> processState) <span class=\"keyword\">throws</span> RemoteException &#123;</div><div class=\"line\">    updateProcessState(processState, <span class=\"keyword\">false</span>);</div><div class=\"line\">    receiver.performReceive(intent, resultCode, dataStr, extras, ordered,</div><div class=\"line\">            sticky, sendingUser);</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p><code>InnerReceiver</code>的<code>performReceive</code>方法会调用<code>LoadedApk.ReceiverDispatcher</code>的<code>performReceive</code>方法，<code>LoadedApk.ReceiverDispatcher</code>的<code>performReceive</code>方法的实现如下所示:<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">performReceive</span><span class=\"params\">(Intent intent, <span class=\"keyword\">int</span> resultCode, String data,Bundle extras, <span class=\"keyword\">boolean</span> ordered, <span class=\"keyword\">boolean</span> sticky, <span class=\"keyword\">int</span> sendingUser)</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">final</span> Args args = <span class=\"keyword\">new</span> Args(intent, resultCode, data, extras, ordered,</div><div class=\"line\">            sticky, sendingUser);</div><div class=\"line\">    <span class=\"keyword\">if</span> (intent == <span class=\"keyword\">null</span>) &#123;</div><div class=\"line\">        Log.wtf(TAG, <span class=\"string\">\"Null intent received\"</span>);</div><div class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">        <span class=\"keyword\">if</span> (ActivityThread.DEBUG_BROADCAST) &#123;</div><div class=\"line\">            <span class=\"keyword\">int</span> seq = intent.getIntExtra(<span class=\"string\">\"seq\"</span>, -<span class=\"number\">1</span>);</div><div class=\"line\">            Slog.i(ActivityThread.TAG, <span class=\"string\">\"Enqueueing broadcast \"</span> + intent.getAction()</div><div class=\"line\">                    + <span class=\"string\">\" seq=\"</span> + seq + <span class=\"string\">\" to \"</span> + mReceiver);</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">if</span> (intent == <span class=\"keyword\">null</span> || !mActivityThread.post(args.getRunnable())) &#123;</div><div class=\"line\">        <span class=\"keyword\">if</span> (mRegistered &amp;&amp; ordered) &#123;</div><div class=\"line\">            IActivityManager mgr = ActivityManager.getService();</div><div class=\"line\">            <span class=\"keyword\">if</span> (ActivityThread.DEBUG_BROADCAST) Slog.i(ActivityThread.TAG,</div><div class=\"line\">                    <span class=\"string\">\"Finishing sync broadcast to \"</span> + mReceiver);</div><div class=\"line\">            args.sendFinished(mgr);</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>在上面的代码中，会创建一个Args对象并通过mActivityThread的post方法来执行Args中的逻辑，而Args实现了Runnable接口。mActivityThread是一个Handler，它其实就是ActivityThread中的mH，mH的类型是ActivityThread的内部类H。在Args的run方法中有如下几行代码:<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">final</span> BroadcastReceiver receiver = mReceiver;</div><div class=\"line\"><span class=\"keyword\">final</span> <span class=\"keyword\">boolean</span> ordered = mOrdered;</div><div class=\"line\">receiver.setPendingResult(<span class=\"keyword\">this</span>);</div><div class=\"line\">receiver.onReceive(mContext, intent);</div></pre></td></tr></table></figure></p>\n<p>这个时候BroadcastReceiver的onReceive方法被执行了，也就是说应用已经接收到广播了，同时onReceive方法是在广播接收者的主线程中被调用的。</p>\n<hr>\n<p>以上</p>\n","excerpt":"<p>面试APUS的时候被问到广播：<br>面试官：聊一下广播吧。<br>我：广播啊，四大组件之一，自己创建个类继承自<code>BroadcastReceiver</code>，重写<code>onReceive()</code>方法，需要注意的是不要在这个方法中做耗时操作。注册的话可以在<code>AndroidManifest</code>文件中静态注册，也可以在代码中动态注册。都做完了之后就可以调用sendBroadCast()方法发送广播了。<br>面试官：了解广播注册过程么？<br>我：哈~！这个没怎么看过。<br>面试官：了解怎么接收到的广播么？<br>我：没有。。。。<br>","more":"</p>\n<h4 id=\"广播的注册过程\"><a href=\"#广播的注册过程\" class=\"headerlink\" title=\"广播的注册过程\"></a>广播的注册过程</h4><p>《Android开发艺术探索》9.4章<br>广播的注册分为静态注册和动态注册，其中静态注册的广播在应用安装时由系统自动完成注册，具体来说是由PMS ( PackageManagerService)来完成整个注册过程的，除了广播以外，其他三大组件也都是在应用安装时由PMS解析并注册的。这里只分析广播的动态注册的过程，动态注册的过程是从ContextWrapper的registerReceiver方法开始的，和Activity以及Service一样 。ContextWrapper并 没有做实际的工作，而是将注册过程直接交给了ContextImpl来完成，如下所示：<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">@Override</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> Intent <span class=\"title\">registerReceiver</span><span class=\"params\">(BroadcastReceiver receiver, IntentFilter filter)</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> mBase.registerReceiver(receiver, filter);</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"meta\">@Override</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> Intent <span class=\"title\">registerReceiver</span><span class=\"params\">(BroadcastReceiver receiver, IntentFilter filter,String broadcastPermission, Handler scheduler)</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> registerReceiverInternal(receiver, getUserId(),</div><div class=\"line\">            filter, broadcastPermission, scheduler, getOuterContext(), <span class=\"number\">0</span>);</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>这里的<code>registerReceiver</code>方法是重载方法，最终调用了<code>registerReceiverInternal</code>方法：<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> Intent <span class=\"title\">registerReceiverInternal</span><span class=\"params\">(BroadcastReceiver receiver, <span class=\"keyword\">int</span> userId,</div><div class=\"line\">            IntentFilter filter, String broadcastPermission,</div><div class=\"line\">            Handler scheduler, Context context, <span class=\"keyword\">int</span> flags)</span> </span>&#123;</div><div class=\"line\">        IIntentReceiver rd = <span class=\"keyword\">null</span>;</div><div class=\"line\">        <span class=\"keyword\">if</span> (receiver != <span class=\"keyword\">null</span>) &#123;</div><div class=\"line\">            <span class=\"keyword\">if</span> (mPackageInfo != <span class=\"keyword\">null</span> &amp;&amp; context != <span class=\"keyword\">null</span>) &#123;</div><div class=\"line\">                <span class=\"keyword\">if</span> (scheduler == <span class=\"keyword\">null</span>) &#123;</div><div class=\"line\">                    scheduler = mMainThread.getHandler();</div><div class=\"line\">                &#125;</div><div class=\"line\">                rd = mPackageInfo.getReceiverDispatcher(</div><div class=\"line\">                    receiver, context, scheduler,</div><div class=\"line\">                    mMainThread.getInstrumentation(), <span class=\"keyword\">true</span>);</div><div class=\"line\">            &#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">                <span class=\"keyword\">if</span> (scheduler == <span class=\"keyword\">null</span>) &#123;</div><div class=\"line\">                    scheduler = mMainThread.getHandler();</div><div class=\"line\">                &#125;</div><div class=\"line\">                rd = <span class=\"keyword\">new</span> LoadedApk.ReceiverDispatcher(</div><div class=\"line\">                        receiver, context, scheduler, <span class=\"keyword\">null</span>, <span class=\"keyword\">true</span>).getIIntentReceiver();</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;</div><div class=\"line\">        <span class=\"keyword\">try</span> &#123;</div><div class=\"line\">            <span class=\"keyword\">final</span> Intent intent = ActivityManager.getService().registerReceiver(</div><div class=\"line\">                    mMainThread.getApplicationThread(), mBasePackageName, rd, filter,</div><div class=\"line\">                    broadcastPermission, userId, flags);</div><div class=\"line\">            <span class=\"keyword\">if</span> (intent != <span class=\"keyword\">null</span>) &#123;</div><div class=\"line\">                intent.setExtrasClassLoader(getClassLoader());</div><div class=\"line\">                intent.prepareToEnterProcess();</div><div class=\"line\">            &#125;</div><div class=\"line\">            <span class=\"keyword\">return</span> intent;</div><div class=\"line\">        &#125; <span class=\"keyword\">catch</span> (RemoteException e) &#123;</div><div class=\"line\">            <span class=\"keyword\">throw</span> e.rethrowFromSystemServer();</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div></pre></td></tr></table></figure></p>\n<p>在上面的代码中，系统首先从<code>mPackageInfo</code>获取<code>IIntentReceiver</code>对象，然后再采用跨进程的方式向AMS发送广播注册的请求。之所以采用<code>IIntentReceiver</code>而不是直接采用<code>BroadcastReceiver</code> ,这是因为上述注册过程是一个进程间通信的过程，而<code>BroadcastReceiver</code>作为Android的一个组件是不能直接跨进程传递的，所以需要通过<code>IIntentReceiver</code>来中转一下。毫无疑问，<code>IIntentReceiver</code>必须是一个Binder接口，它的具体实现是<code>LoadedApk.ReceiverDispatcher.InnerReceiver</code>, <code>ReceiverDispatcher</code>的内部同时保存了<code>BroadcastReceiver</code>和<code>InnerReceiver</code>,这样当接收到广播时，<code>ReceiverDispatcher</code>可以很方便地调用<code>BroadcastReceiver</code>的<code>onReceive</code>方法。<br>看一下<code>LoadedApk.getReceiverDispatcher</code>方法：<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> IIntentReceiver <span class=\"title\">getReceiverDispatcher</span><span class=\"params\">(BroadcastReceiver r,</div><div class=\"line\">            Context context, Handler handler,</div><div class=\"line\">            Instrumentation instrumentation, <span class=\"keyword\">boolean</span> registered)</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">synchronized</span> (mReceivers) &#123;</div><div class=\"line\">            LoadedApk.ReceiverDispatcher rd = <span class=\"keyword\">null</span>;</div><div class=\"line\">            ArrayMap&lt;BroadcastReceiver, LoadedApk.ReceiverDispatcher&gt; map = <span class=\"keyword\">null</span>;</div><div class=\"line\">            <span class=\"keyword\">if</span> (registered) &#123;</div><div class=\"line\">                map = mReceivers.get(context);</div><div class=\"line\">                <span class=\"keyword\">if</span> (map != <span class=\"keyword\">null</span>) &#123;</div><div class=\"line\">                    rd = map.get(r);</div><div class=\"line\">                &#125;</div><div class=\"line\">            &#125;</div><div class=\"line\">            <span class=\"keyword\">if</span> (rd == <span class=\"keyword\">null</span>) &#123;</div><div class=\"line\">                rd = <span class=\"keyword\">new</span> ReceiverDispatcher(r, context, handler,</div><div class=\"line\">                        instrumentation, registered);</div><div class=\"line\">                <span class=\"keyword\">if</span> (registered) &#123;</div><div class=\"line\">                    <span class=\"keyword\">if</span> (map == <span class=\"keyword\">null</span>) &#123;</div><div class=\"line\">                        map = <span class=\"keyword\">new</span> ArrayMap&lt;BroadcastReceiver, LoadedApk.ReceiverDispatcher&gt;();</div><div class=\"line\">                        mReceivers.put(context, map);</div><div class=\"line\">                    &#125;</div><div class=\"line\">                    map.put(r, rd);</div><div class=\"line\">                &#125;</div><div class=\"line\">            &#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">                rd.validate(context, handler);</div><div class=\"line\">            &#125;</div><div class=\"line\">            rd.mForgotten = <span class=\"keyword\">false</span>;</div><div class=\"line\">            <span class=\"keyword\">return</span> rd.getIIntentReceiver();</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div></pre></td></tr></table></figure></p>\n<p>很显然，<code>getReceiverDispatcher</code>方法重新创建了一个<code>ReceiverDispatcher</code>对象并将其保存的<code>InnerReceiver</code>对象作为返回值返回，其中<code>InnerReceiver</code>对象和<code>BroadcastReceiver</code>都是在<code>ReceiverDispatcher</code>的构造方法中被保存起来的。<br>由于注册广播的真正实现过程是在AMS中，因此我们需要看一下AMS的具体实现。AMS的<code>registerReceiver</code>方法看起来很长，其实关键点就只有下面一部分，最终会把远程的<code>InnerReceiver</code>对象以及<code>IntentFilter</code>对象存储起来，这样整个广播的注册过程就完成了，代码如下所示。<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> Intent <span class=\"title\">registerReceiver</span><span class=\"params\">(IApplicationThread caller, String callerPackage,IIntentReceiver receiver, IntentFilter filter, String permission, <span class=\"keyword\">int</span> userId)</span> </span>&#123;</div><div class=\"line\">    <span class=\"comment\">// The first sticky in the list is returned directly back to the client.</span></div><div class=\"line\">    Intent sticky = allSticky != <span class=\"keyword\">null</span> ? allSticky.get(<span class=\"number\">0</span>) : <span class=\"keyword\">null</span>;</div><div class=\"line\">    ReceiverList rl = mRegisteredReceivers.get(receiver.asBinder());</div><div class=\"line\">    BroadcastFilter bf = <span class=\"keyword\">new</span> BroadcastFilter(filter, rl, callerPackage,permission, callingUid, userId);</div><div class=\"line\">    rl.add(bf);</div><div class=\"line\">    mReceiverResolver.addFilter(bf);</div><div class=\"line\">    <span class=\"keyword\">return</span> sticky;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<h4 id=\"广播的发送过程\"><a href=\"#广播的发送过程\" class=\"headerlink\" title=\"广播的发送过程\"></a>广播的发送过程</h4><p>当通过send方法来发送广播时，AMS会查找出匹配的广播接收者并将广播发送给它们处理。广播的发送有几种类型:普通广播、有序广播和粘性广播，有序广播和粘性广播与普通广播相比具有不同的特性，但是它们的发送/接收过程的流程是类似的，因此这里只分析普通厂播的实现。广播的发送和接收，其本质是一个过程的两个阶段。这里从广播的发送可以说起，广播的发送仍然开始于<code>ContextWrapper</code>的<code>sendBroadcast</code>方法，之所以不是<code>Context</code>,那是因为<code>Context</code>的<code>sendBroadcast</code>是-一个抽象方法。和广播的注册过程一样，<code>ContextWrapper</code>的<code>sendBroadcast</code>方法仍然什么都不做，只是把事情交给<code>ContextImpl</code>去处理，<code>ContextImpl的sendBroadcast</code>方法的源码如下所示。<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">@Override</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">sendBroadcast</span><span class=\"params\">(Intent intent)</span> </span>&#123;</div><div class=\"line\">        warnIfCallingFromSystemProcess();</div><div class=\"line\">        String resolvedType = intent.resolveTypeIfNeeded(getContentResolver());</div><div class=\"line\">        <span class=\"keyword\">try</span> &#123;</div><div class=\"line\">            intent.prepareToLeaveProcess(<span class=\"keyword\">this</span>);</div><div class=\"line\">            ActivityManager.getService().broadcastIntent(</div><div class=\"line\">                    mMainThread.getApplicationThread(), intent, resolvedType, <span class=\"keyword\">null</span>,</div><div class=\"line\">                    Activity.RESULT_OK, <span class=\"keyword\">null</span>, <span class=\"keyword\">null</span>, <span class=\"keyword\">null</span>, AppOpsManager.OP_NONE, <span class=\"keyword\">null</span>, <span class=\"keyword\">false</span>, <span class=\"keyword\">false</span>,</div><div class=\"line\">                    getUserId());</div><div class=\"line\">        &#125; <span class=\"keyword\">catch</span> (RemoteException e) &#123;</div><div class=\"line\">            <span class=\"keyword\">throw</span> e.rethrowFromSystemServer();</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div></pre></td></tr></table></figure></p>\n<p>从_上面的代码来看，<code>ContextImpl</code>也是几乎什么事都没干，它直接向AMS发起了一个异步请求用于发送广播。因此，下面直接看AMS对广播发送过程的处理，AMS的<code>broadcastIntent</code>方法又调用了<code>broadcastIntentLocked</code>,在这个方法的开始有这么一行：<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// By default broadcasts do not go to stopped apps.</span></div><div class=\"line\">intent.addFlags(Intent.FLAG_EXCLUDE_STOPPED_PACKAGES);</div></pre></td></tr></table></figure></p>\n<p>从Android3.1开始广播默认情况下广播不会发送给已经停止的应用。这是因为系统在Android3.1中为Intent添加了两个标记位，分别是<code>FLAG_INCLUDE_STOPPED_PACKAGES</code>和<code>FLAG_EXCLUDE_STOPPED_PACKAGES</code>，用来控制广播是否要对处于停止状态的应用起作用，它们的含义如下所示。<br><strong> FLAG_INCLUDE_STOPPED_PACKAGES </strong><br>表示包含已经停止的应用，这个时候广播会发送给已经停止的应用。<br><strong> FLAG_EXCLUDE_STOPPED_PACKAGES </strong><br>表示不包含已经停止的应用，这个时候广播不会发送给已经停止的应用。</p>\n<p>从Android3.1开始，系统为所有广播默认添加了<code>FLAG_EXCLUDE_STOPPED_PACKAGES</code>标志，这样做是为了防止广播无意间或者在不必要的时候调起已经停止运行的应用。如果的确需要调起未启动的应用，那么只需要为广播的Intent添加<code>FLAG_INCLUDE_STOPPED_PACKAGES</code>标记即可。当<code>FLAG_EXCLUDE_STOPPED_PACKAGES</code>和<code>FLAG_INCLUDE_STOPPED_PACKAGES</code>两种标记位共存时,以<code>FLAG_INCLUDE_STOPPED_PACKAGES</code>为准。这里需要补充一下，一个应用处于停止状态分为两种情形:<br>第一种是应用安装后未运行，<br>第二种是应用被手动或者其他应用强停了。<br>Android3.1中广播的这个特性同样会影响开机广播，从Android3.1开始，处于停止状态的应用同样无法接收到开机广播，而在Android 3.1之前，处于停止状态的应用是可以收到开机广播的。<br>在<code>broadcastIntentLocked</code>的内部，会根据<code>intent-filter</code>查找出匹配的广播接收者并经过一系列的条件过滤，最终会将满足条件的广播接收者添加到<code>BroadcastQueue</code>中，接着<code>BroadcastQueue</code>就会将广播发送给相应的广播接收者，这个过程的源码如下所示。<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">if</span> ((receivers != <span class=\"keyword\">null</span> &amp;&amp; receivers.size() &gt; <span class=\"number\">0</span>)</div><div class=\"line\">                || resultTo != <span class=\"keyword\">null</span>) &#123;</div><div class=\"line\">            BroadcastQueue queue = broadcastQueueForIntent(intent);</div><div class=\"line\">            BroadcastRecord r = <span class=\"keyword\">new</span> BroadcastRecord(queue, intent, callerApp,</div><div class=\"line\">                    callerPackage, callingPid, callingUid, resolvedType,</div><div class=\"line\">                    requiredPermissions, appOp, brOptions, receivers, resultTo, resultCode,</div><div class=\"line\">                    resultData, resultExtras, ordered, sticky, <span class=\"keyword\">false</span>, userId);</div><div class=\"line\"></div><div class=\"line\">            <span class=\"keyword\">if</span> (DEBUG_BROADCAST) Slog.v(TAG_BROADCAST, <span class=\"string\">\"Enqueueing ordered broadcast \"</span> + r</div><div class=\"line\">                    + <span class=\"string\">\": prev had \"</span> + queue.mOrderedBroadcasts.size());</div><div class=\"line\">            <span class=\"keyword\">if</span> (DEBUG_BROADCAST) Slog.i(TAG_BROADCAST,</div><div class=\"line\">                    <span class=\"string\">\"Enqueueing broadcast \"</span> + r.intent.getAction());</div><div class=\"line\"></div><div class=\"line\">            <span class=\"keyword\">boolean</span> replaced = replacePending &amp;&amp; queue.replaceOrderedBroadcastLocked(r);</div><div class=\"line\">            <span class=\"keyword\">if</span> (!replaced) &#123;</div><div class=\"line\">                queue.enqueueOrderedBroadcastLocked(r);</div><div class=\"line\">                queue.scheduleBroadcastsLocked();</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">            <span class=\"comment\">// There was nobody interested in the broadcast, but we still want to record</span></div><div class=\"line\">            <span class=\"comment\">// that it happened.</span></div><div class=\"line\">            <span class=\"keyword\">if</span> (intent.getComponent() == <span class=\"keyword\">null</span> &amp;&amp; intent.getPackage() == <span class=\"keyword\">null</span></div><div class=\"line\">                    &amp;&amp; (intent.getFlags()&amp;Intent.FLAG_RECEIVER_REGISTERED_ONLY) == <span class=\"number\">0</span>) &#123;</div><div class=\"line\">                <span class=\"comment\">// This was an implicit broadcast... let's record it for posterity.</span></div><div class=\"line\">                addBroadcastStatLocked(intent.getAction(), callerPackage, <span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>);</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;</div></pre></td></tr></table></figure></p>\n<p>将广播添加到<code>BroadCastQueue</code>之后，接着调用了<code>scheduleBroadcastsLocked</code>方法：<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">scheduleBroadcastsLocked</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">       <span class=\"keyword\">if</span> (DEBUG_BROADCAST) Slog.v(TAG_BROADCAST, <span class=\"string\">\"Schedule broadcasts [\"</span></div><div class=\"line\">               + mQueueName + <span class=\"string\">\"]: current=\"</span></div><div class=\"line\">               + mBroadcastsScheduled);</div><div class=\"line\"></div><div class=\"line\">       <span class=\"keyword\">if</span> (mBroadcastsScheduled) &#123;</div><div class=\"line\">           <span class=\"keyword\">return</span>;</div><div class=\"line\">       &#125;</div><div class=\"line\">       mHandler.sendMessage(mHandler.obtainMessage(BROADCAST_INTENT_MSG, <span class=\"keyword\">this</span>));</div><div class=\"line\">       mBroadcastsScheduled = <span class=\"keyword\">true</span>;</div><div class=\"line\">   &#125;</div></pre></td></tr></table></figure></p>\n<p>方法内发送了一个<code>BROADCAST_INTENT_MSG</code>消息，handler接到消息后，调用了<code>processNextBroadcast</code>方法</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">private</span> <span class=\"keyword\">final</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">BroadcastHandler</span> <span class=\"keyword\">extends</span> <span class=\"title\">Handler</span> </span>&#123;</div><div class=\"line\">       <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">BroadcastHandler</span><span class=\"params\">(Looper looper)</span> </span>&#123;</div><div class=\"line\">           <span class=\"keyword\">super</span>(looper, <span class=\"keyword\">null</span>, <span class=\"keyword\">true</span>);</div><div class=\"line\">       &#125;</div><div class=\"line\"></div><div class=\"line\">       <span class=\"meta\">@Override</span></div><div class=\"line\">       <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">handleMessage</span><span class=\"params\">(Message msg)</span> </span>&#123;</div><div class=\"line\">           <span class=\"keyword\">switch</span> (msg.what) &#123;</div><div class=\"line\">               <span class=\"keyword\">case</span> BROADCAST_INTENT_MSG: &#123;</div><div class=\"line\">                   <span class=\"keyword\">if</span> (DEBUG_BROADCAST) Slog.v(TAG_BROADCAST, <span class=\"string\">\"Received BROADCAST_INTENT_MSG\"</span>);</div><div class=\"line\">                   processNextBroadcast(<span class=\"keyword\">true</span>);</div><div class=\"line\">               &#125; <span class=\"keyword\">break</span>;</div><div class=\"line\">               <span class=\"keyword\">case</span> BROADCAST_TIMEOUT_MSG: &#123;</div><div class=\"line\">                   <span class=\"keyword\">synchronized</span> (mService) &#123;</div><div class=\"line\">                       broadcastTimeoutLocked(<span class=\"keyword\">true</span>);</div><div class=\"line\">                   &#125;</div><div class=\"line\">               &#125; <span class=\"keyword\">break</span>;</div><div class=\"line\">               <span class=\"keyword\">case</span> SCHEDULE_TEMP_WHITELIST_MSG: &#123;</div><div class=\"line\">                   DeviceIdleController.LocalService dic = mService.mLocalDeviceIdleController;</div><div class=\"line\">                   <span class=\"keyword\">if</span> (dic != <span class=\"keyword\">null</span>) &#123;</div><div class=\"line\">                       dic.addPowerSaveTempWhitelistAppDirect(UserHandle.getAppId(msg.arg1),msg.arg2, <span class=\"keyword\">true</span>, (String)msg.obj);</div><div class=\"line\">                   &#125;</div><div class=\"line\">               &#125; <span class=\"keyword\">break</span>;</div><div class=\"line\">           &#125;</div><div class=\"line\">       &#125;</div><div class=\"line\">   &#125;</div></pre></td></tr></table></figure>\n<p>收到消息后会调用<code>processNextBroadcast</code>方法，内容如下：<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// First, deliver any non-serialized broadcasts right away.</span></div><div class=\"line\">    <span class=\"keyword\">while</span> (mParallelBroadcasts.size() &gt; <span class=\"number\">0</span>) &#123;</div><div class=\"line\">        r = mParallelBroadcasts.remove(<span class=\"number\">0</span>);</div><div class=\"line\">        r.dispatchTime = SystemClock.uptimeMillis();</div><div class=\"line\">        r.dispatchClockTime = System.currentTimeMillis();</div><div class=\"line\"></div><div class=\"line\">        <span class=\"keyword\">if</span> (Trace.isTagEnabled(Trace.TRACE_TAG_ACTIVITY_MANAGER)) &#123;</div><div class=\"line\">            Trace.asyncTraceEnd(Trace.TRACE_TAG_ACTIVITY_MANAGER,</div><div class=\"line\">                createBroadcastTraceTitle(r, BroadcastRecord.DELIVERY_PENDING),</div><div class=\"line\">                System.identityHashCode(r));</div><div class=\"line\">            Trace.asyncTraceBegin(Trace.TRACE_TAG_ACTIVITY_MANAGER,</div><div class=\"line\">                createBroadcastTraceTitle(r, BroadcastRecord.DELIVERY_DELIVERED),</div><div class=\"line\">                System.identityHashCode(r));</div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\">        <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> N = r.receivers.size();</div><div class=\"line\">        </div><div class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i=<span class=\"number\">0</span>; i&lt;N; i++) &#123;</div><div class=\"line\">            Object target = r.receivers.get(i);</div><div class=\"line\">            <span class=\"keyword\">if</span> (DEBUG_BROADCAST)  Slog.v(TAG_BROADCAST,</div><div class=\"line\">                    <span class=\"string\">\"Delivering non-ordered on [\"</span> + mQueueName + <span class=\"string\">\"] to registered \"</span></div><div class=\"line\">                    + target + <span class=\"string\">\": \"</span> + r);</div><div class=\"line\">            deliverToRegisteredReceiverLocked(r, (BroadcastFilter)target, <span class=\"keyword\">false</span>, i);</div><div class=\"line\">        &#125;</div><div class=\"line\">        addBroadcastToHistoryLocked(r);</div><div class=\"line\">       </div><div class=\"line\">    &#125;</div></pre></td></tr></table></figure></p>\n<p>可以看到，无序广播存储在<code>mParallelBroadcasts</code>中，系统会遍历<code>mParallelBroadcasts</code>并将其中的广播发送给它们所有的接收者，具体的发送过程是通过<code>deliverToRegisteredReceiverLocked</code>方法来实现的。<code>deliverToRegisteredReceiverLocked</code>方法负责将一个广播发送给一个特定的接收者，它内部调用了<code>performReceiveLocked</code>方法来完成具体的发送过程:<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">performReceiveLocked(r.callerApp, r.resultTo,<span class=\"keyword\">new</span> Intent(r.intent), r.resultCode,r.resultData, r.resultExtras, <span class=\"keyword\">false</span>, <span class=\"keyword\">false</span>, r.userId);</div></pre></td></tr></table></figure></p>\n<p><code>performReceiveLocked</code>方法的实现如下所示。由于接收广播会调起应用程序，因此app.thread不为null，根据前面的分析我们知道这里的<code>app.thread</code>仍然指<code>ApplicationThread</code>。<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">performReceiveLocked</span><span class=\"params\">(ProcessRecord app, IIntentReceiver receiver,Intent intent, <span class=\"keyword\">int</span> resultCode, String data, Bundle extras,<span class=\"keyword\">boolean</span> ordered, <span class=\"keyword\">boolean</span> sticky, <span class=\"keyword\">int</span> sendingUser)</span> <span class=\"keyword\">throws</span> RemoteException </span>&#123;</div><div class=\"line\">            </div><div class=\"line\">            <span class=\"comment\">// Send the intent to the receiver asynchronously using one-way binder calls.</span></div><div class=\"line\">    <span class=\"keyword\">if</span> (app != <span class=\"keyword\">null</span>) &#123;</div><div class=\"line\">        <span class=\"keyword\">if</span> (app.thread != <span class=\"keyword\">null</span>) &#123;</div><div class=\"line\">            <span class=\"comment\">// If we have an app thread, do the call through that so it is</span></div><div class=\"line\">            <span class=\"comment\">// correctly ordered with other one-way calls.</span></div><div class=\"line\">            <span class=\"keyword\">try</span> &#123;</div><div class=\"line\">                app.thread.scheduleRegisteredReceiver(receiver, intent, resultCode,</div><div class=\"line\">                        data, extras, ordered, sticky, sendingUser, app.repProcState);</div><div class=\"line\">            <span class=\"comment\">// <span class=\"doctag\">TODO:</span> Uncomment this when (b/28322359) is fixed and we aren't getting</span></div><div class=\"line\">            <span class=\"comment\">// DeadObjectException when the process isn't actually dead.</span></div><div class=\"line\">            <span class=\"comment\">//&#125; catch (DeadObjectException ex) &#123;</span></div><div class=\"line\">            <span class=\"comment\">// Failed to call into the process.  It's dying so just let it die and move on.</span></div><div class=\"line\">            <span class=\"comment\">//    throw ex;</span></div><div class=\"line\">            &#125; <span class=\"keyword\">catch</span> (RemoteException ex) &#123;</div><div class=\"line\">                <span class=\"comment\">// Failed to call into the process. It's either dying or wedged. Kill it gently.</span></div><div class=\"line\">                <span class=\"keyword\">synchronized</span> (mService) &#123;</div><div class=\"line\">                    Slog.w(TAG, <span class=\"string\">\"Can't deliver broadcast to \"</span> + app.processName</div><div class=\"line\">                            + <span class=\"string\">\" (pid \"</span> + app.pid + <span class=\"string\">\"). Crashing it.\"</span>);</div><div class=\"line\">                    app.scheduleCrash(<span class=\"string\">\"can't deliver broadcast\"</span>);</div><div class=\"line\">                &#125;</div><div class=\"line\">                <span class=\"keyword\">throw</span> ex;</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">            <span class=\"comment\">// Application has died. Receiver doesn't exist.</span></div><div class=\"line\">            <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> RemoteException(<span class=\"string\">\"app.thread must not be null\"</span>);</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">        receiver.performReceive(intent, resultCode, data, extras, ordered,</div><div class=\"line\">                sticky, sendingUser);</div><div class=\"line\">    &#125;</div><div class=\"line\">            </div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p><code>ApplicationThread</code>的<code>scheduleRegisteredReceiver</code>的实现比较简单，它通过<code>InnerReceiver</code>来实现广播的接收:<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// This function exists to make sure all receiver dispatching is</span></div><div class=\"line\"><span class=\"comment\">// correctly ordered, since these are one-way calls and the binder driver</span></div><div class=\"line\"><span class=\"comment\">// applies transaction ordering per object for such calls.</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">scheduleRegisteredReceiver</span><span class=\"params\">(IIntentReceiver receiver, Intent intent,</div><div class=\"line\">        <span class=\"keyword\">int</span> resultCode, String dataStr, Bundle extras, <span class=\"keyword\">boolean</span> ordered,</div><div class=\"line\">        <span class=\"keyword\">boolean</span> sticky, <span class=\"keyword\">int</span> sendingUser, <span class=\"keyword\">int</span> processState)</span> <span class=\"keyword\">throws</span> RemoteException </span>&#123;</div><div class=\"line\">    updateProcessState(processState, <span class=\"keyword\">false</span>);</div><div class=\"line\">    receiver.performReceive(intent, resultCode, dataStr, extras, ordered,</div><div class=\"line\">            sticky, sendingUser);</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p><code>InnerReceiver</code>的<code>performReceive</code>方法会调用<code>LoadedApk.ReceiverDispatcher</code>的<code>performReceive</code>方法，<code>LoadedApk.ReceiverDispatcher</code>的<code>performReceive</code>方法的实现如下所示:<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">performReceive</span><span class=\"params\">(Intent intent, <span class=\"keyword\">int</span> resultCode, String data,Bundle extras, <span class=\"keyword\">boolean</span> ordered, <span class=\"keyword\">boolean</span> sticky, <span class=\"keyword\">int</span> sendingUser)</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">final</span> Args args = <span class=\"keyword\">new</span> Args(intent, resultCode, data, extras, ordered,</div><div class=\"line\">            sticky, sendingUser);</div><div class=\"line\">    <span class=\"keyword\">if</span> (intent == <span class=\"keyword\">null</span>) &#123;</div><div class=\"line\">        Log.wtf(TAG, <span class=\"string\">\"Null intent received\"</span>);</div><div class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">        <span class=\"keyword\">if</span> (ActivityThread.DEBUG_BROADCAST) &#123;</div><div class=\"line\">            <span class=\"keyword\">int</span> seq = intent.getIntExtra(<span class=\"string\">\"seq\"</span>, -<span class=\"number\">1</span>);</div><div class=\"line\">            Slog.i(ActivityThread.TAG, <span class=\"string\">\"Enqueueing broadcast \"</span> + intent.getAction()</div><div class=\"line\">                    + <span class=\"string\">\" seq=\"</span> + seq + <span class=\"string\">\" to \"</span> + mReceiver);</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">if</span> (intent == <span class=\"keyword\">null</span> || !mActivityThread.post(args.getRunnable())) &#123;</div><div class=\"line\">        <span class=\"keyword\">if</span> (mRegistered &amp;&amp; ordered) &#123;</div><div class=\"line\">            IActivityManager mgr = ActivityManager.getService();</div><div class=\"line\">            <span class=\"keyword\">if</span> (ActivityThread.DEBUG_BROADCAST) Slog.i(ActivityThread.TAG,</div><div class=\"line\">                    <span class=\"string\">\"Finishing sync broadcast to \"</span> + mReceiver);</div><div class=\"line\">            args.sendFinished(mgr);</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>在上面的代码中，会创建一个Args对象并通过mActivityThread的post方法来执行Args中的逻辑，而Args实现了Runnable接口。mActivityThread是一个Handler，它其实就是ActivityThread中的mH，mH的类型是ActivityThread的内部类H。在Args的run方法中有如下几行代码:<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">final</span> BroadcastReceiver receiver = mReceiver;</div><div class=\"line\"><span class=\"keyword\">final</span> <span class=\"keyword\">boolean</span> ordered = mOrdered;</div><div class=\"line\">receiver.setPendingResult(<span class=\"keyword\">this</span>);</div><div class=\"line\">receiver.onReceive(mContext, intent);</div></pre></td></tr></table></figure></p>\n<p>这个时候BroadcastReceiver的onReceive方法被执行了，也就是说应用已经接收到广播了，同时onReceive方法是在广播接收者的主线程中被调用的。</p>\n<hr>\n<p>以上</p>"},{"title":"Java并发多线程同步","date":"2018-03-20T02:43:39.000Z","keywords":"多线程同步类","_content":"最近遇到了多线程并发同步问题，找到了`java.util.concurrent`包下的`CountDownLatch`、`CyclicBarrier`、`Semaphore`这三个类。\n`CountDownLatch`可以实现类似计数器的功能，例如线程A需要等待B、C、D三个线程执行完成之后才可以执行。\n`CyclicBarrier`可以实现让一组(多个)线程等待至某个状态之后再全部同时执行，当所有线程都被释放以后，CyclicBarrier可以被重用。\n`Semaphore`可以控制同时访问的线程个数，通过`acquire()`获取一个许可，如果没有就等待，而`release()`释放一个许可。\n<!--more-->\n#### CountDownLatch\nCountDownLatch类只有一个构造方法：\n``` java\npublic CountDownLatch(int count) {\n        if (count < 0) throw new IllegalArgumentException(\"count < 0\");\n        this.sync = new Sync(count);\n    }\n```\n这里的count是一个计数值，表示要等待多少任务，每次调用该对象示例的`countDown()`方法，该值都会减1，当count为0时表示没有需要等待的任务。常用的方法如下：\n``` java\npublic void await() throws InterruptedException { };   //调用await()方法的线程会被挂起，它会等待直到count值为0才继续执行\npublic boolean await(long timeout, TimeUnit unit) throws InterruptedException { };  //和await()类似，只不过等待一定的时间后count值还没变为0的话就会继续执行\npublic void countDown() { };  //将count值减1\n```\n示例如下：\n``` java\npublic static void testCountDownLatch() {\n\tfinal CountDownLatch latch = new CountDownLatch(2);\n\tnew Thread(\"one\") {\n\t\tpublic void run() {\n\t\t\ttry {\n\t\t\t\tSystem.out.println(\"子线程\" + Thread.currentThread().getName() + \"正在执行\");\n\t\t\t\tThread.sleep(3000);\n\t\t\t\tSystem.out.println(\"子线程\" + Thread.currentThread().getName() + \"执行完毕\");\n\t\t\t\tlatch.countDown();\n\t\t\t} catch (InterruptedException e) {\n\t\t\t\te.printStackTrace();\n\t\t\t}\n\t\t};\n\t}.start();\n\tnew Thread(\"two\") {\n\t\tpublic void run() {\n\t\t\ttry {\n\t\t\t\tSystem.out.println(\"子线程\" + Thread.currentThread().getName() + \"正在执行\");\n\t\t\t\tThread.sleep(3000);\n\t\t\t\tSystem.out.println(\"子线程\" + Thread.currentThread().getName() + \"执行完毕\");\n\t\t\t\tlatch.countDown();\n\t\t\t} catch (InterruptedException e) {\n\t\t\t\te.printStackTrace();\n\t\t\t}\n\t\t};\n\t}.start();\n\n\ttry {\n\t\tSystem.out.println(\"等待2个线程执行完成\");\n\t\tlatch.await();\n\t\tSystem.out.println(\"子线程已经执行完毕\");\n\t} catch (InterruptedException e) {\n\t\te.printStackTrace();\n\t}\n}\n```\n#### CyclicBarrier\n该类有两个构造方法\n``` java\n public CyclicBarrier(int parties, Runnable barrierAction)\n public CyclicBarrier(int parties)\n```\n参数parties是指让多少个线程或者任务等待至barrier状态，参数barrierAction是当这些线程都到达barrier状态后会执行的内容。\n该类里面有两个比较重要的方法：\n``` java\npublic int await() throws InterruptedException, BrokenBarrierException { };\npublic int await(long timeout, TimeUnit unit)throws InterruptedException,BrokenBarrierException,TimeoutException { };\n```\n无参的方法比较常用，用来挂起当前线程，直到所有线程都达到barrier状态再同时执行后续任务。\n有参的方法是让线程等待一定时间，如果线程还没有达到barrier状态，就让到达barrier状态的线程执行后续任务。\n示例如下：\n``` java\n\nstatic void testCyclicBarrier() {\n//\tCyclicBarrier barrier = new CyclicBarrier(5);\n\tCyclicBarrier barrier = new CyclicBarrier(5,new Runnable() {\n\t\t\n\t\t@Override\n\tpublic void run() {\n\t\t\tSystem.out.println(\"所有线程执行完毕，随机挑选一个线程来执行打印\");\n\t\t\tSystem.out.println(\"挑选的线程为\" + Thread.currentThread().getName());\n\t\t\t\t\n\t\t}\n\t});\n\tfor (int i = 0; i < 5; i++) {\n\t\tnew Writer(barrier, \"thread:\" + i).start();\n\t}\n\n}\n\nstatic class Writer extends Thread {\n\tprivate CyclicBarrier cyclicBarrier;\n\n\tpublic Writer(CyclicBarrier cyclicBarrier, String threadName) {\n\t\tthis.cyclicBarrier = cyclicBarrier;\n\t\tif (threadName != null) {\n\t\t\tthis.setName(threadName);\n\t\t}\n\n\t}\n\n\t@Override\n\tpublic void run() {\n\n\t\ttry {\n\t\t\tSystem.out.println(\"线程\" + Thread.currentThread().getName() + \"正在作业中\");\n\t\t\tThread.sleep(5000);\n\t\t\tSystem.out.println(\"线程\" + Thread.currentThread().getName() + \"作业完成\");\n\t\t\tcyclicBarrier.await();\n\t\t\tSystem.out.println(\"所有线程作业完毕，线程\" + Thread.currentThread().getName() + \"继续理其他任务\");\n\n\t\t} catch (InterruptedException e) {\n\t\t\te.printStackTrace();\n\t\t} catch (BrokenBarrierException e) {\n\t\t\t\n\t\t\te.printStackTrace();\n\t\t}\n\n\t}\n\n}\n```\n值得注意的是，CyclicBarrier是可以**重用**的。\n#### Semaphore\n该类提供了两个构造器：\n``` java\npublic Semaphore(int permits) {          //参数permits表示许可数目，即同时可以允许多少线程进行访问\n    sync = new NonfairSync(permits);\n}\npublic Semaphore(int permits, boolean fair) {    //这个多了一个参数fair表示是否是公平的，即等待时间越久的越先获取许可\n    sync = (fair)? new FairSync(permits) : new NonfairSync(permits);\n}\n```\n下面是该类中比较重要的几个方法，首先是acquire()、release()：\n``` java\npublic void acquire() throws InterruptedException {  }     //获取一个许可\npublic void acquire(int permits) throws InterruptedException { }    //获取permits个许可\npublic void release() { }          //释放一个许可\npublic void release(int permits) { }    //释放permits个许可\n```\nacquire()用来获取一个许可，若无许可能够获得，则会一直等待，直到获得许可。\nrelease()用来释放许可。注意，在释放许可之前，必须先获获得许可。\n这4个方法都会被阻塞，如果想立即得到执行结果，可以使用下面几个方法：\n``` java\npublic boolean tryAcquire() { };    //尝试获取一个许可，若获取成功，则立即返回true，若获取失败，则立即返回false\npublic boolean tryAcquire(long timeout, TimeUnit unit) throws InterruptedException { };  //尝试获取一个许可，若在指定的时间内获取成功，则立即返回true，否则则立即返回false\npublic boolean tryAcquire(int permits) { }; //尝试获取permits个许可，若获取成功，则立即返回true，若获取失败，则立即返回false\npublic boolean tryAcquire(int permits, long timeout, TimeUnit unit) throws InterruptedException { }; //尝试获取permits个许可，若在指定的时间内获取成功，则立即返回true，否则则立即返回false\n```\n另外还可以通过availablePermits()方法得到可用的许可数目。\n假如5个线程要使用3个资源，示例如下：\n``` java\nstatic void testSemaphore() {\n\t\tint N = 5;            //线程数\n        Semaphore semaphore = new Semaphore(3); //资源数目\n        for(int i=0;i<N;i++)\n            new Worker(\"线程\" +i,semaphore).start();\n\t}\n\t\n\tstatic class Worker extends Thread {\n\n\t\tprivate Semaphore semaphore;\n\t\t\n\t\tpublic Worker(String name, Semaphore semaphore) {\n\t\t\tsuper();\n\t\t\tthis.setName(name);\n\t\t\tthis.semaphore = semaphore;\n\t\t}\n\n\t\t@Override\n\t\tpublic void run() {\n\t\t\ttry {\n\t\t\t\tsemaphore.acquire();\n\t\t\t\tSystem.out.println(\"线程：\" + Thread.currentThread().getName() + \"占用一个资源\");\n\t\t\t\tThread.sleep(3000);\n\t\t\t\tSystem.out.println(\"线程：\" + Thread.currentThread().getName() + \"释放一个资源\");\n\t\t\t\tsemaphore.release();\n\t\t\t} catch (InterruptedException e) {\n\t\t\t\te.printStackTrace();\n\t\t\t}\n\t\t}\n\n\t}\n```\nCountDownLatch和CyclicBarrier都能够实现线程之间的等待，只不过它们侧重点不同：\nCountDownLatch一般用于某个线程等待若干个其他线程执行完任务之后，它才执行；而CyclicBarrier一般用于一组线程互相等待至某个状态，然后这一组线程再同时执行；另外，CountDownLatch是不能够重用的，而CyclicBarrier是可以重用的。Semaphore其实和锁有点类似，它一般用于控制对某组资源的访问权限。\n\n----\n以上","source":"_posts/Java并发多线程同步.md","raw":"---\ntitle: Java并发多线程同步\ndate: 2018-03-20 10:43:39\ntags: [java]\nkeywords: 多线程同步类\n---\n最近遇到了多线程并发同步问题，找到了`java.util.concurrent`包下的`CountDownLatch`、`CyclicBarrier`、`Semaphore`这三个类。\n`CountDownLatch`可以实现类似计数器的功能，例如线程A需要等待B、C、D三个线程执行完成之后才可以执行。\n`CyclicBarrier`可以实现让一组(多个)线程等待至某个状态之后再全部同时执行，当所有线程都被释放以后，CyclicBarrier可以被重用。\n`Semaphore`可以控制同时访问的线程个数，通过`acquire()`获取一个许可，如果没有就等待，而`release()`释放一个许可。\n<!--more-->\n#### CountDownLatch\nCountDownLatch类只有一个构造方法：\n``` java\npublic CountDownLatch(int count) {\n        if (count < 0) throw new IllegalArgumentException(\"count < 0\");\n        this.sync = new Sync(count);\n    }\n```\n这里的count是一个计数值，表示要等待多少任务，每次调用该对象示例的`countDown()`方法，该值都会减1，当count为0时表示没有需要等待的任务。常用的方法如下：\n``` java\npublic void await() throws InterruptedException { };   //调用await()方法的线程会被挂起，它会等待直到count值为0才继续执行\npublic boolean await(long timeout, TimeUnit unit) throws InterruptedException { };  //和await()类似，只不过等待一定的时间后count值还没变为0的话就会继续执行\npublic void countDown() { };  //将count值减1\n```\n示例如下：\n``` java\npublic static void testCountDownLatch() {\n\tfinal CountDownLatch latch = new CountDownLatch(2);\n\tnew Thread(\"one\") {\n\t\tpublic void run() {\n\t\t\ttry {\n\t\t\t\tSystem.out.println(\"子线程\" + Thread.currentThread().getName() + \"正在执行\");\n\t\t\t\tThread.sleep(3000);\n\t\t\t\tSystem.out.println(\"子线程\" + Thread.currentThread().getName() + \"执行完毕\");\n\t\t\t\tlatch.countDown();\n\t\t\t} catch (InterruptedException e) {\n\t\t\t\te.printStackTrace();\n\t\t\t}\n\t\t};\n\t}.start();\n\tnew Thread(\"two\") {\n\t\tpublic void run() {\n\t\t\ttry {\n\t\t\t\tSystem.out.println(\"子线程\" + Thread.currentThread().getName() + \"正在执行\");\n\t\t\t\tThread.sleep(3000);\n\t\t\t\tSystem.out.println(\"子线程\" + Thread.currentThread().getName() + \"执行完毕\");\n\t\t\t\tlatch.countDown();\n\t\t\t} catch (InterruptedException e) {\n\t\t\t\te.printStackTrace();\n\t\t\t}\n\t\t};\n\t}.start();\n\n\ttry {\n\t\tSystem.out.println(\"等待2个线程执行完成\");\n\t\tlatch.await();\n\t\tSystem.out.println(\"子线程已经执行完毕\");\n\t} catch (InterruptedException e) {\n\t\te.printStackTrace();\n\t}\n}\n```\n#### CyclicBarrier\n该类有两个构造方法\n``` java\n public CyclicBarrier(int parties, Runnable barrierAction)\n public CyclicBarrier(int parties)\n```\n参数parties是指让多少个线程或者任务等待至barrier状态，参数barrierAction是当这些线程都到达barrier状态后会执行的内容。\n该类里面有两个比较重要的方法：\n``` java\npublic int await() throws InterruptedException, BrokenBarrierException { };\npublic int await(long timeout, TimeUnit unit)throws InterruptedException,BrokenBarrierException,TimeoutException { };\n```\n无参的方法比较常用，用来挂起当前线程，直到所有线程都达到barrier状态再同时执行后续任务。\n有参的方法是让线程等待一定时间，如果线程还没有达到barrier状态，就让到达barrier状态的线程执行后续任务。\n示例如下：\n``` java\n\nstatic void testCyclicBarrier() {\n//\tCyclicBarrier barrier = new CyclicBarrier(5);\n\tCyclicBarrier barrier = new CyclicBarrier(5,new Runnable() {\n\t\t\n\t\t@Override\n\tpublic void run() {\n\t\t\tSystem.out.println(\"所有线程执行完毕，随机挑选一个线程来执行打印\");\n\t\t\tSystem.out.println(\"挑选的线程为\" + Thread.currentThread().getName());\n\t\t\t\t\n\t\t}\n\t});\n\tfor (int i = 0; i < 5; i++) {\n\t\tnew Writer(barrier, \"thread:\" + i).start();\n\t}\n\n}\n\nstatic class Writer extends Thread {\n\tprivate CyclicBarrier cyclicBarrier;\n\n\tpublic Writer(CyclicBarrier cyclicBarrier, String threadName) {\n\t\tthis.cyclicBarrier = cyclicBarrier;\n\t\tif (threadName != null) {\n\t\t\tthis.setName(threadName);\n\t\t}\n\n\t}\n\n\t@Override\n\tpublic void run() {\n\n\t\ttry {\n\t\t\tSystem.out.println(\"线程\" + Thread.currentThread().getName() + \"正在作业中\");\n\t\t\tThread.sleep(5000);\n\t\t\tSystem.out.println(\"线程\" + Thread.currentThread().getName() + \"作业完成\");\n\t\t\tcyclicBarrier.await();\n\t\t\tSystem.out.println(\"所有线程作业完毕，线程\" + Thread.currentThread().getName() + \"继续理其他任务\");\n\n\t\t} catch (InterruptedException e) {\n\t\t\te.printStackTrace();\n\t\t} catch (BrokenBarrierException e) {\n\t\t\t\n\t\t\te.printStackTrace();\n\t\t}\n\n\t}\n\n}\n```\n值得注意的是，CyclicBarrier是可以**重用**的。\n#### Semaphore\n该类提供了两个构造器：\n``` java\npublic Semaphore(int permits) {          //参数permits表示许可数目，即同时可以允许多少线程进行访问\n    sync = new NonfairSync(permits);\n}\npublic Semaphore(int permits, boolean fair) {    //这个多了一个参数fair表示是否是公平的，即等待时间越久的越先获取许可\n    sync = (fair)? new FairSync(permits) : new NonfairSync(permits);\n}\n```\n下面是该类中比较重要的几个方法，首先是acquire()、release()：\n``` java\npublic void acquire() throws InterruptedException {  }     //获取一个许可\npublic void acquire(int permits) throws InterruptedException { }    //获取permits个许可\npublic void release() { }          //释放一个许可\npublic void release(int permits) { }    //释放permits个许可\n```\nacquire()用来获取一个许可，若无许可能够获得，则会一直等待，直到获得许可。\nrelease()用来释放许可。注意，在释放许可之前，必须先获获得许可。\n这4个方法都会被阻塞，如果想立即得到执行结果，可以使用下面几个方法：\n``` java\npublic boolean tryAcquire() { };    //尝试获取一个许可，若获取成功，则立即返回true，若获取失败，则立即返回false\npublic boolean tryAcquire(long timeout, TimeUnit unit) throws InterruptedException { };  //尝试获取一个许可，若在指定的时间内获取成功，则立即返回true，否则则立即返回false\npublic boolean tryAcquire(int permits) { }; //尝试获取permits个许可，若获取成功，则立即返回true，若获取失败，则立即返回false\npublic boolean tryAcquire(int permits, long timeout, TimeUnit unit) throws InterruptedException { }; //尝试获取permits个许可，若在指定的时间内获取成功，则立即返回true，否则则立即返回false\n```\n另外还可以通过availablePermits()方法得到可用的许可数目。\n假如5个线程要使用3个资源，示例如下：\n``` java\nstatic void testSemaphore() {\n\t\tint N = 5;            //线程数\n        Semaphore semaphore = new Semaphore(3); //资源数目\n        for(int i=0;i<N;i++)\n            new Worker(\"线程\" +i,semaphore).start();\n\t}\n\t\n\tstatic class Worker extends Thread {\n\n\t\tprivate Semaphore semaphore;\n\t\t\n\t\tpublic Worker(String name, Semaphore semaphore) {\n\t\t\tsuper();\n\t\t\tthis.setName(name);\n\t\t\tthis.semaphore = semaphore;\n\t\t}\n\n\t\t@Override\n\t\tpublic void run() {\n\t\t\ttry {\n\t\t\t\tsemaphore.acquire();\n\t\t\t\tSystem.out.println(\"线程：\" + Thread.currentThread().getName() + \"占用一个资源\");\n\t\t\t\tThread.sleep(3000);\n\t\t\t\tSystem.out.println(\"线程：\" + Thread.currentThread().getName() + \"释放一个资源\");\n\t\t\t\tsemaphore.release();\n\t\t\t} catch (InterruptedException e) {\n\t\t\t\te.printStackTrace();\n\t\t\t}\n\t\t}\n\n\t}\n```\nCountDownLatch和CyclicBarrier都能够实现线程之间的等待，只不过它们侧重点不同：\nCountDownLatch一般用于某个线程等待若干个其他线程执行完任务之后，它才执行；而CyclicBarrier一般用于一组线程互相等待至某个状态，然后这一组线程再同时执行；另外，CountDownLatch是不能够重用的，而CyclicBarrier是可以重用的。Semaphore其实和锁有点类似，它一般用于控制对某组资源的访问权限。\n\n----\n以上","slug":"Java并发多线程同步","published":1,"updated":"2018-08-04T04:54:44.541Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjl3vbtqx001disdgsmtdr08e","content":"<p>最近遇到了多线程并发同步问题，找到了<code>java.util.concurrent</code>包下的<code>CountDownLatch</code>、<code>CyclicBarrier</code>、<code>Semaphore</code>这三个类。<br><code>CountDownLatch</code>可以实现类似计数器的功能，例如线程A需要等待B、C、D三个线程执行完成之后才可以执行。<br><code>CyclicBarrier</code>可以实现让一组(多个)线程等待至某个状态之后再全部同时执行，当所有线程都被释放以后，CyclicBarrier可以被重用。<br><code>Semaphore</code>可以控制同时访问的线程个数，通过<code>acquire()</code>获取一个许可，如果没有就等待，而<code>release()</code>释放一个许可。<br><a id=\"more\"></a></p>\n<h4 id=\"CountDownLatch\"><a href=\"#CountDownLatch\" class=\"headerlink\" title=\"CountDownLatch\"></a>CountDownLatch</h4><p>CountDownLatch类只有一个构造方法：<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">CountDownLatch</span><span class=\"params\">(<span class=\"keyword\">int</span> count)</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">if</span> (count &lt; <span class=\"number\">0</span>) <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> IllegalArgumentException(<span class=\"string\">\"count &lt; 0\"</span>);</div><div class=\"line\">        <span class=\"keyword\">this</span>.sync = <span class=\"keyword\">new</span> Sync(count);</div><div class=\"line\">    &#125;</div></pre></td></tr></table></figure></p>\n<p>这里的count是一个计数值，表示要等待多少任务，每次调用该对象示例的<code>countDown()</code>方法，该值都会减1，当count为0时表示没有需要等待的任务。常用的方法如下：<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">await</span><span class=\"params\">()</span> <span class=\"keyword\">throws</span> InterruptedException </span>&#123; &#125;;   <span class=\"comment\">//调用await()方法的线程会被挂起，它会等待直到count值为0才继续执行</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">await</span><span class=\"params\">(<span class=\"keyword\">long</span> timeout, TimeUnit unit)</span> <span class=\"keyword\">throws</span> InterruptedException </span>&#123; &#125;;  <span class=\"comment\">//和await()类似，只不过等待一定的时间后count值还没变为0的话就会继续执行</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">countDown</span><span class=\"params\">()</span> </span>&#123; &#125;;  <span class=\"comment\">//将count值减1</span></div></pre></td></tr></table></figure></p>\n<p>示例如下：<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">testCountDownLatch</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">\t<span class=\"keyword\">final</span> CountDownLatch latch = <span class=\"keyword\">new</span> CountDownLatch(<span class=\"number\">2</span>);</div><div class=\"line\">\t<span class=\"keyword\">new</span> Thread(<span class=\"string\">\"one\"</span>) &#123;</div><div class=\"line\">\t\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">run</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">\t\t\t<span class=\"keyword\">try</span> &#123;</div><div class=\"line\">\t\t\t\tSystem.out.println(<span class=\"string\">\"子线程\"</span> + Thread.currentThread().getName() + <span class=\"string\">\"正在执行\"</span>);</div><div class=\"line\">\t\t\t\tThread.sleep(<span class=\"number\">3000</span>);</div><div class=\"line\">\t\t\t\tSystem.out.println(<span class=\"string\">\"子线程\"</span> + Thread.currentThread().getName() + <span class=\"string\">\"执行完毕\"</span>);</div><div class=\"line\">\t\t\t\tlatch.countDown();</div><div class=\"line\">\t\t\t&#125; <span class=\"keyword\">catch</span> (InterruptedException e) &#123;</div><div class=\"line\">\t\t\t\te.printStackTrace();</div><div class=\"line\">\t\t\t&#125;</div><div class=\"line\">\t\t&#125;;</div><div class=\"line\">\t&#125;.start();</div><div class=\"line\">\t<span class=\"keyword\">new</span> Thread(<span class=\"string\">\"two\"</span>) &#123;</div><div class=\"line\">\t\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">run</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">\t\t\t<span class=\"keyword\">try</span> &#123;</div><div class=\"line\">\t\t\t\tSystem.out.println(<span class=\"string\">\"子线程\"</span> + Thread.currentThread().getName() + <span class=\"string\">\"正在执行\"</span>);</div><div class=\"line\">\t\t\t\tThread.sleep(<span class=\"number\">3000</span>);</div><div class=\"line\">\t\t\t\tSystem.out.println(<span class=\"string\">\"子线程\"</span> + Thread.currentThread().getName() + <span class=\"string\">\"执行完毕\"</span>);</div><div class=\"line\">\t\t\t\tlatch.countDown();</div><div class=\"line\">\t\t\t&#125; <span class=\"keyword\">catch</span> (InterruptedException e) &#123;</div><div class=\"line\">\t\t\t\te.printStackTrace();</div><div class=\"line\">\t\t\t&#125;</div><div class=\"line\">\t\t&#125;;</div><div class=\"line\">\t&#125;.start();</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"keyword\">try</span> &#123;</div><div class=\"line\">\t\tSystem.out.println(<span class=\"string\">\"等待2个线程执行完成\"</span>);</div><div class=\"line\">\t\tlatch.await();</div><div class=\"line\">\t\tSystem.out.println(<span class=\"string\">\"子线程已经执行完毕\"</span>);</div><div class=\"line\">\t&#125; <span class=\"keyword\">catch</span> (InterruptedException e) &#123;</div><div class=\"line\">\t\te.printStackTrace();</div><div class=\"line\">\t&#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<h4 id=\"CyclicBarrier\"><a href=\"#CyclicBarrier\" class=\"headerlink\" title=\"CyclicBarrier\"></a>CyclicBarrier</h4><p>该类有两个构造方法<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">CyclicBarrier</span><span class=\"params\">(<span class=\"keyword\">int</span> parties, Runnable barrierAction)</span></span></div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"title\">CyclicBarrier</span><span class=\"params\">(<span class=\"keyword\">int</span> parties)</span></div></pre></td></tr></table></figure></p>\n<p>参数parties是指让多少个线程或者任务等待至barrier状态，参数barrierAction是当这些线程都到达barrier状态后会执行的内容。<br>该类里面有两个比较重要的方法：<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">await</span><span class=\"params\">()</span> <span class=\"keyword\">throws</span> InterruptedException, BrokenBarrierException </span>&#123; &#125;;</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">await</span><span class=\"params\">(<span class=\"keyword\">long</span> timeout, TimeUnit unit)</span><span class=\"keyword\">throws</span> InterruptedException,BrokenBarrierException,TimeoutException </span>&#123; &#125;;</div></pre></td></tr></table></figure></p>\n<p>无参的方法比较常用，用来挂起当前线程，直到所有线程都达到barrier状态再同时执行后续任务。<br>有参的方法是让线程等待一定时间，如果线程还没有达到barrier状态，就让到达barrier状态的线程执行后续任务。<br>示例如下：<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">testCyclicBarrier</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\"><span class=\"comment\">//\tCyclicBarrier barrier = new CyclicBarrier(5);</span></div><div class=\"line\">\tCyclicBarrier barrier = <span class=\"keyword\">new</span> CyclicBarrier(<span class=\"number\">5</span>,<span class=\"keyword\">new</span> Runnable() &#123;</div><div class=\"line\">\t\t</div><div class=\"line\">\t\t<span class=\"meta\">@Override</span></div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">run</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">\t\t\tSystem.out.println(<span class=\"string\">\"所有线程执行完毕，随机挑选一个线程来执行打印\"</span>);</div><div class=\"line\">\t\t\tSystem.out.println(<span class=\"string\">\"挑选的线程为\"</span> + Thread.currentThread().getName());</div><div class=\"line\">\t\t\t\t</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t&#125;);</div><div class=\"line\">\t<span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">5</span>; i++) &#123;</div><div class=\"line\">\t\t<span class=\"keyword\">new</span> Writer(barrier, <span class=\"string\">\"thread:\"</span> + i).start();</div><div class=\"line\">\t&#125;</div><div class=\"line\"></div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">static</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Writer</span> <span class=\"keyword\">extends</span> <span class=\"title\">Thread</span> </span>&#123;</div><div class=\"line\">\t<span class=\"keyword\">private</span> CyclicBarrier cyclicBarrier;</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">Writer</span><span class=\"params\">(CyclicBarrier cyclicBarrier, String threadName)</span> </span>&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">this</span>.cyclicBarrier = cyclicBarrier;</div><div class=\"line\">\t\t<span class=\"keyword\">if</span> (threadName != <span class=\"keyword\">null</span>) &#123;</div><div class=\"line\">\t\t\t<span class=\"keyword\">this</span>.setName(threadName);</div><div class=\"line\">\t\t&#125;</div><div class=\"line\"></div><div class=\"line\">\t&#125;</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"meta\">@Override</span></div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">run</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\"></div><div class=\"line\">\t\t<span class=\"keyword\">try</span> &#123;</div><div class=\"line\">\t\t\tSystem.out.println(<span class=\"string\">\"线程\"</span> + Thread.currentThread().getName() + <span class=\"string\">\"正在作业中\"</span>);</div><div class=\"line\">\t\t\tThread.sleep(<span class=\"number\">5000</span>);</div><div class=\"line\">\t\t\tSystem.out.println(<span class=\"string\">\"线程\"</span> + Thread.currentThread().getName() + <span class=\"string\">\"作业完成\"</span>);</div><div class=\"line\">\t\t\tcyclicBarrier.await();</div><div class=\"line\">\t\t\tSystem.out.println(<span class=\"string\">\"所有线程作业完毕，线程\"</span> + Thread.currentThread().getName() + <span class=\"string\">\"继续理其他任务\"</span>);</div><div class=\"line\"></div><div class=\"line\">\t\t&#125; <span class=\"keyword\">catch</span> (InterruptedException e) &#123;</div><div class=\"line\">\t\t\te.printStackTrace();</div><div class=\"line\">\t\t&#125; <span class=\"keyword\">catch</span> (BrokenBarrierException e) &#123;</div><div class=\"line\">\t\t\t</div><div class=\"line\">\t\t\te.printStackTrace();</div><div class=\"line\">\t\t&#125;</div><div class=\"line\"></div><div class=\"line\">\t&#125;</div><div class=\"line\"></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>值得注意的是，CyclicBarrier是可以<strong>重用</strong>的。</p>\n<h4 id=\"Semaphore\"><a href=\"#Semaphore\" class=\"headerlink\" title=\"Semaphore\"></a>Semaphore</h4><p>该类提供了两个构造器：<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">Semaphore</span><span class=\"params\">(<span class=\"keyword\">int</span> permits)</span> </span>&#123;          <span class=\"comment\">//参数permits表示许可数目，即同时可以允许多少线程进行访问</span></div><div class=\"line\">    sync = <span class=\"keyword\">new</span> NonfairSync(permits);</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">Semaphore</span><span class=\"params\">(<span class=\"keyword\">int</span> permits, <span class=\"keyword\">boolean</span> fair)</span> </span>&#123;    <span class=\"comment\">//这个多了一个参数fair表示是否是公平的，即等待时间越久的越先获取许可</span></div><div class=\"line\">    sync = (fair)? <span class=\"keyword\">new</span> FairSync(permits) : <span class=\"keyword\">new</span> NonfairSync(permits);</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>下面是该类中比较重要的几个方法，首先是acquire()、release()：<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">acquire</span><span class=\"params\">()</span> <span class=\"keyword\">throws</span> InterruptedException </span>&#123;  &#125;     <span class=\"comment\">//获取一个许可</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">acquire</span><span class=\"params\">(<span class=\"keyword\">int</span> permits)</span> <span class=\"keyword\">throws</span> InterruptedException </span>&#123; &#125;    <span class=\"comment\">//获取permits个许可</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">release</span><span class=\"params\">()</span> </span>&#123; &#125;          <span class=\"comment\">//释放一个许可</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">release</span><span class=\"params\">(<span class=\"keyword\">int</span> permits)</span> </span>&#123; &#125;    <span class=\"comment\">//释放permits个许可</span></div></pre></td></tr></table></figure></p>\n<p>acquire()用来获取一个许可，若无许可能够获得，则会一直等待，直到获得许可。<br>release()用来释放许可。注意，在释放许可之前，必须先获获得许可。<br>这4个方法都会被阻塞，如果想立即得到执行结果，可以使用下面几个方法：<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">tryAcquire</span><span class=\"params\">()</span> </span>&#123; &#125;;    <span class=\"comment\">//尝试获取一个许可，若获取成功，则立即返回true，若获取失败，则立即返回false</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">tryAcquire</span><span class=\"params\">(<span class=\"keyword\">long</span> timeout, TimeUnit unit)</span> <span class=\"keyword\">throws</span> InterruptedException </span>&#123; &#125;;  <span class=\"comment\">//尝试获取一个许可，若在指定的时间内获取成功，则立即返回true，否则则立即返回false</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">tryAcquire</span><span class=\"params\">(<span class=\"keyword\">int</span> permits)</span> </span>&#123; &#125;; <span class=\"comment\">//尝试获取permits个许可，若获取成功，则立即返回true，若获取失败，则立即返回false</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">tryAcquire</span><span class=\"params\">(<span class=\"keyword\">int</span> permits, <span class=\"keyword\">long</span> timeout, TimeUnit unit)</span> <span class=\"keyword\">throws</span> InterruptedException </span>&#123; &#125;; <span class=\"comment\">//尝试获取permits个许可，若在指定的时间内获取成功，则立即返回true，否则则立即返回false</span></div></pre></td></tr></table></figure></p>\n<p>另外还可以通过availablePermits()方法得到可用的许可数目。<br>假如5个线程要使用3个资源，示例如下：<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">testSemaphore</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">int</span> N = <span class=\"number\">5</span>;            <span class=\"comment\">//线程数</span></div><div class=\"line\">        Semaphore semaphore = <span class=\"keyword\">new</span> Semaphore(<span class=\"number\">3</span>); <span class=\"comment\">//资源数目</span></div><div class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i=<span class=\"number\">0</span>;i&lt;N;i++)</div><div class=\"line\">            <span class=\"keyword\">new</span> Worker(<span class=\"string\">\"线程\"</span> +i,semaphore).start();</div><div class=\"line\">\t&#125;</div><div class=\"line\">\t</div><div class=\"line\">\t<span class=\"keyword\">static</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Worker</span> <span class=\"keyword\">extends</span> <span class=\"title\">Thread</span> </span>&#123;</div><div class=\"line\"></div><div class=\"line\">\t\t<span class=\"keyword\">private</span> Semaphore semaphore;</div><div class=\"line\">\t\t</div><div class=\"line\">\t\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">Worker</span><span class=\"params\">(String name, Semaphore semaphore)</span> </span>&#123;</div><div class=\"line\">\t\t\t<span class=\"keyword\">super</span>();</div><div class=\"line\">\t\t\t<span class=\"keyword\">this</span>.setName(name);</div><div class=\"line\">\t\t\t<span class=\"keyword\">this</span>.semaphore = semaphore;</div><div class=\"line\">\t\t&#125;</div><div class=\"line\"></div><div class=\"line\">\t\t<span class=\"meta\">@Override</span></div><div class=\"line\">\t\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">run</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">\t\t\t<span class=\"keyword\">try</span> &#123;</div><div class=\"line\">\t\t\t\tsemaphore.acquire();</div><div class=\"line\">\t\t\t\tSystem.out.println(<span class=\"string\">\"线程：\"</span> + Thread.currentThread().getName() + <span class=\"string\">\"占用一个资源\"</span>);</div><div class=\"line\">\t\t\t\tThread.sleep(<span class=\"number\">3000</span>);</div><div class=\"line\">\t\t\t\tSystem.out.println(<span class=\"string\">\"线程：\"</span> + Thread.currentThread().getName() + <span class=\"string\">\"释放一个资源\"</span>);</div><div class=\"line\">\t\t\t\tsemaphore.release();</div><div class=\"line\">\t\t\t&#125; <span class=\"keyword\">catch</span> (InterruptedException e) &#123;</div><div class=\"line\">\t\t\t\te.printStackTrace();</div><div class=\"line\">\t\t\t&#125;</div><div class=\"line\">\t\t&#125;</div><div class=\"line\"></div><div class=\"line\">\t&#125;</div></pre></td></tr></table></figure></p>\n<p>CountDownLatch和CyclicBarrier都能够实现线程之间的等待，只不过它们侧重点不同：<br>CountDownLatch一般用于某个线程等待若干个其他线程执行完任务之后，它才执行；而CyclicBarrier一般用于一组线程互相等待至某个状态，然后这一组线程再同时执行；另外，CountDownLatch是不能够重用的，而CyclicBarrier是可以重用的。Semaphore其实和锁有点类似，它一般用于控制对某组资源的访问权限。</p>\n<hr>\n<p>以上</p>\n","excerpt":"<p>最近遇到了多线程并发同步问题，找到了<code>java.util.concurrent</code>包下的<code>CountDownLatch</code>、<code>CyclicBarrier</code>、<code>Semaphore</code>这三个类。<br><code>CountDownLatch</code>可以实现类似计数器的功能，例如线程A需要等待B、C、D三个线程执行完成之后才可以执行。<br><code>CyclicBarrier</code>可以实现让一组(多个)线程等待至某个状态之后再全部同时执行，当所有线程都被释放以后，CyclicBarrier可以被重用。<br><code>Semaphore</code>可以控制同时访问的线程个数，通过<code>acquire()</code>获取一个许可，如果没有就等待，而<code>release()</code>释放一个许可。<br>","more":"</p>\n<h4 id=\"CountDownLatch\"><a href=\"#CountDownLatch\" class=\"headerlink\" title=\"CountDownLatch\"></a>CountDownLatch</h4><p>CountDownLatch类只有一个构造方法：<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">CountDownLatch</span><span class=\"params\">(<span class=\"keyword\">int</span> count)</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">if</span> (count &lt; <span class=\"number\">0</span>) <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> IllegalArgumentException(<span class=\"string\">\"count &lt; 0\"</span>);</div><div class=\"line\">        <span class=\"keyword\">this</span>.sync = <span class=\"keyword\">new</span> Sync(count);</div><div class=\"line\">    &#125;</div></pre></td></tr></table></figure></p>\n<p>这里的count是一个计数值，表示要等待多少任务，每次调用该对象示例的<code>countDown()</code>方法，该值都会减1，当count为0时表示没有需要等待的任务。常用的方法如下：<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">await</span><span class=\"params\">()</span> <span class=\"keyword\">throws</span> InterruptedException </span>&#123; &#125;;   <span class=\"comment\">//调用await()方法的线程会被挂起，它会等待直到count值为0才继续执行</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">await</span><span class=\"params\">(<span class=\"keyword\">long</span> timeout, TimeUnit unit)</span> <span class=\"keyword\">throws</span> InterruptedException </span>&#123; &#125;;  <span class=\"comment\">//和await()类似，只不过等待一定的时间后count值还没变为0的话就会继续执行</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">countDown</span><span class=\"params\">()</span> </span>&#123; &#125;;  <span class=\"comment\">//将count值减1</span></div></pre></td></tr></table></figure></p>\n<p>示例如下：<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">testCountDownLatch</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">\t<span class=\"keyword\">final</span> CountDownLatch latch = <span class=\"keyword\">new</span> CountDownLatch(<span class=\"number\">2</span>);</div><div class=\"line\">\t<span class=\"keyword\">new</span> Thread(<span class=\"string\">\"one\"</span>) &#123;</div><div class=\"line\">\t\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">run</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">\t\t\t<span class=\"keyword\">try</span> &#123;</div><div class=\"line\">\t\t\t\tSystem.out.println(<span class=\"string\">\"子线程\"</span> + Thread.currentThread().getName() + <span class=\"string\">\"正在执行\"</span>);</div><div class=\"line\">\t\t\t\tThread.sleep(<span class=\"number\">3000</span>);</div><div class=\"line\">\t\t\t\tSystem.out.println(<span class=\"string\">\"子线程\"</span> + Thread.currentThread().getName() + <span class=\"string\">\"执行完毕\"</span>);</div><div class=\"line\">\t\t\t\tlatch.countDown();</div><div class=\"line\">\t\t\t&#125; <span class=\"keyword\">catch</span> (InterruptedException e) &#123;</div><div class=\"line\">\t\t\t\te.printStackTrace();</div><div class=\"line\">\t\t\t&#125;</div><div class=\"line\">\t\t&#125;;</div><div class=\"line\">\t&#125;.start();</div><div class=\"line\">\t<span class=\"keyword\">new</span> Thread(<span class=\"string\">\"two\"</span>) &#123;</div><div class=\"line\">\t\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">run</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">\t\t\t<span class=\"keyword\">try</span> &#123;</div><div class=\"line\">\t\t\t\tSystem.out.println(<span class=\"string\">\"子线程\"</span> + Thread.currentThread().getName() + <span class=\"string\">\"正在执行\"</span>);</div><div class=\"line\">\t\t\t\tThread.sleep(<span class=\"number\">3000</span>);</div><div class=\"line\">\t\t\t\tSystem.out.println(<span class=\"string\">\"子线程\"</span> + Thread.currentThread().getName() + <span class=\"string\">\"执行完毕\"</span>);</div><div class=\"line\">\t\t\t\tlatch.countDown();</div><div class=\"line\">\t\t\t&#125; <span class=\"keyword\">catch</span> (InterruptedException e) &#123;</div><div class=\"line\">\t\t\t\te.printStackTrace();</div><div class=\"line\">\t\t\t&#125;</div><div class=\"line\">\t\t&#125;;</div><div class=\"line\">\t&#125;.start();</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"keyword\">try</span> &#123;</div><div class=\"line\">\t\tSystem.out.println(<span class=\"string\">\"等待2个线程执行完成\"</span>);</div><div class=\"line\">\t\tlatch.await();</div><div class=\"line\">\t\tSystem.out.println(<span class=\"string\">\"子线程已经执行完毕\"</span>);</div><div class=\"line\">\t&#125; <span class=\"keyword\">catch</span> (InterruptedException e) &#123;</div><div class=\"line\">\t\te.printStackTrace();</div><div class=\"line\">\t&#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<h4 id=\"CyclicBarrier\"><a href=\"#CyclicBarrier\" class=\"headerlink\" title=\"CyclicBarrier\"></a>CyclicBarrier</h4><p>该类有两个构造方法<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">CyclicBarrier</span><span class=\"params\">(<span class=\"keyword\">int</span> parties, Runnable barrierAction)</span></div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"title\">CyclicBarrier</span><span class=\"params\">(<span class=\"keyword\">int</span> parties)</span></span></div></pre></td></tr></table></figure></p>\n<p>参数parties是指让多少个线程或者任务等待至barrier状态，参数barrierAction是当这些线程都到达barrier状态后会执行的内容。<br>该类里面有两个比较重要的方法：<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">await</span><span class=\"params\">()</span> <span class=\"keyword\">throws</span> InterruptedException, BrokenBarrierException </span>&#123; &#125;;</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">await</span><span class=\"params\">(<span class=\"keyword\">long</span> timeout, TimeUnit unit)</span><span class=\"keyword\">throws</span> InterruptedException,BrokenBarrierException,TimeoutException </span>&#123; &#125;;</div></pre></td></tr></table></figure></p>\n<p>无参的方法比较常用，用来挂起当前线程，直到所有线程都达到barrier状态再同时执行后续任务。<br>有参的方法是让线程等待一定时间，如果线程还没有达到barrier状态，就让到达barrier状态的线程执行后续任务。<br>示例如下：<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">testCyclicBarrier</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\"><span class=\"comment\">//\tCyclicBarrier barrier = new CyclicBarrier(5);</span></div><div class=\"line\">\tCyclicBarrier barrier = <span class=\"keyword\">new</span> CyclicBarrier(<span class=\"number\">5</span>,<span class=\"keyword\">new</span> Runnable() &#123;</div><div class=\"line\">\t\t</div><div class=\"line\">\t\t<span class=\"meta\">@Override</span></div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">run</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">\t\t\tSystem.out.println(<span class=\"string\">\"所有线程执行完毕，随机挑选一个线程来执行打印\"</span>);</div><div class=\"line\">\t\t\tSystem.out.println(<span class=\"string\">\"挑选的线程为\"</span> + Thread.currentThread().getName());</div><div class=\"line\">\t\t\t\t</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t&#125;);</div><div class=\"line\">\t<span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">5</span>; i++) &#123;</div><div class=\"line\">\t\t<span class=\"keyword\">new</span> Writer(barrier, <span class=\"string\">\"thread:\"</span> + i).start();</div><div class=\"line\">\t&#125;</div><div class=\"line\"></div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">static</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Writer</span> <span class=\"keyword\">extends</span> <span class=\"title\">Thread</span> </span>&#123;</div><div class=\"line\">\t<span class=\"keyword\">private</span> CyclicBarrier cyclicBarrier;</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">Writer</span><span class=\"params\">(CyclicBarrier cyclicBarrier, String threadName)</span> </span>&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">this</span>.cyclicBarrier = cyclicBarrier;</div><div class=\"line\">\t\t<span class=\"keyword\">if</span> (threadName != <span class=\"keyword\">null</span>) &#123;</div><div class=\"line\">\t\t\t<span class=\"keyword\">this</span>.setName(threadName);</div><div class=\"line\">\t\t&#125;</div><div class=\"line\"></div><div class=\"line\">\t&#125;</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"meta\">@Override</span></div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">run</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\"></div><div class=\"line\">\t\t<span class=\"keyword\">try</span> &#123;</div><div class=\"line\">\t\t\tSystem.out.println(<span class=\"string\">\"线程\"</span> + Thread.currentThread().getName() + <span class=\"string\">\"正在作业中\"</span>);</div><div class=\"line\">\t\t\tThread.sleep(<span class=\"number\">5000</span>);</div><div class=\"line\">\t\t\tSystem.out.println(<span class=\"string\">\"线程\"</span> + Thread.currentThread().getName() + <span class=\"string\">\"作业完成\"</span>);</div><div class=\"line\">\t\t\tcyclicBarrier.await();</div><div class=\"line\">\t\t\tSystem.out.println(<span class=\"string\">\"所有线程作业完毕，线程\"</span> + Thread.currentThread().getName() + <span class=\"string\">\"继续理其他任务\"</span>);</div><div class=\"line\"></div><div class=\"line\">\t\t&#125; <span class=\"keyword\">catch</span> (InterruptedException e) &#123;</div><div class=\"line\">\t\t\te.printStackTrace();</div><div class=\"line\">\t\t&#125; <span class=\"keyword\">catch</span> (BrokenBarrierException e) &#123;</div><div class=\"line\">\t\t\t</div><div class=\"line\">\t\t\te.printStackTrace();</div><div class=\"line\">\t\t&#125;</div><div class=\"line\"></div><div class=\"line\">\t&#125;</div><div class=\"line\"></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>值得注意的是，CyclicBarrier是可以<strong>重用</strong>的。</p>\n<h4 id=\"Semaphore\"><a href=\"#Semaphore\" class=\"headerlink\" title=\"Semaphore\"></a>Semaphore</h4><p>该类提供了两个构造器：<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">Semaphore</span><span class=\"params\">(<span class=\"keyword\">int</span> permits)</span> </span>&#123;          <span class=\"comment\">//参数permits表示许可数目，即同时可以允许多少线程进行访问</span></div><div class=\"line\">    sync = <span class=\"keyword\">new</span> NonfairSync(permits);</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">Semaphore</span><span class=\"params\">(<span class=\"keyword\">int</span> permits, <span class=\"keyword\">boolean</span> fair)</span> </span>&#123;    <span class=\"comment\">//这个多了一个参数fair表示是否是公平的，即等待时间越久的越先获取许可</span></div><div class=\"line\">    sync = (fair)? <span class=\"keyword\">new</span> FairSync(permits) : <span class=\"keyword\">new</span> NonfairSync(permits);</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>下面是该类中比较重要的几个方法，首先是acquire()、release()：<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">acquire</span><span class=\"params\">()</span> <span class=\"keyword\">throws</span> InterruptedException </span>&#123;  &#125;     <span class=\"comment\">//获取一个许可</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">acquire</span><span class=\"params\">(<span class=\"keyword\">int</span> permits)</span> <span class=\"keyword\">throws</span> InterruptedException </span>&#123; &#125;    <span class=\"comment\">//获取permits个许可</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">release</span><span class=\"params\">()</span> </span>&#123; &#125;          <span class=\"comment\">//释放一个许可</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">release</span><span class=\"params\">(<span class=\"keyword\">int</span> permits)</span> </span>&#123; &#125;    <span class=\"comment\">//释放permits个许可</span></div></pre></td></tr></table></figure></p>\n<p>acquire()用来获取一个许可，若无许可能够获得，则会一直等待，直到获得许可。<br>release()用来释放许可。注意，在释放许可之前，必须先获获得许可。<br>这4个方法都会被阻塞，如果想立即得到执行结果，可以使用下面几个方法：<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">tryAcquire</span><span class=\"params\">()</span> </span>&#123; &#125;;    <span class=\"comment\">//尝试获取一个许可，若获取成功，则立即返回true，若获取失败，则立即返回false</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">tryAcquire</span><span class=\"params\">(<span class=\"keyword\">long</span> timeout, TimeUnit unit)</span> <span class=\"keyword\">throws</span> InterruptedException </span>&#123; &#125;;  <span class=\"comment\">//尝试获取一个许可，若在指定的时间内获取成功，则立即返回true，否则则立即返回false</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">tryAcquire</span><span class=\"params\">(<span class=\"keyword\">int</span> permits)</span> </span>&#123; &#125;; <span class=\"comment\">//尝试获取permits个许可，若获取成功，则立即返回true，若获取失败，则立即返回false</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">tryAcquire</span><span class=\"params\">(<span class=\"keyword\">int</span> permits, <span class=\"keyword\">long</span> timeout, TimeUnit unit)</span> <span class=\"keyword\">throws</span> InterruptedException </span>&#123; &#125;; <span class=\"comment\">//尝试获取permits个许可，若在指定的时间内获取成功，则立即返回true，否则则立即返回false</span></div></pre></td></tr></table></figure></p>\n<p>另外还可以通过availablePermits()方法得到可用的许可数目。<br>假如5个线程要使用3个资源，示例如下：<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">testSemaphore</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">int</span> N = <span class=\"number\">5</span>;            <span class=\"comment\">//线程数</span></div><div class=\"line\">        Semaphore semaphore = <span class=\"keyword\">new</span> Semaphore(<span class=\"number\">3</span>); <span class=\"comment\">//资源数目</span></div><div class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i=<span class=\"number\">0</span>;i&lt;N;i++)</div><div class=\"line\">            <span class=\"keyword\">new</span> Worker(<span class=\"string\">\"线程\"</span> +i,semaphore).start();</div><div class=\"line\">\t&#125;</div><div class=\"line\">\t</div><div class=\"line\">\t<span class=\"keyword\">static</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Worker</span> <span class=\"keyword\">extends</span> <span class=\"title\">Thread</span> </span>&#123;</div><div class=\"line\"></div><div class=\"line\">\t\t<span class=\"keyword\">private</span> Semaphore semaphore;</div><div class=\"line\">\t\t</div><div class=\"line\">\t\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">Worker</span><span class=\"params\">(String name, Semaphore semaphore)</span> </span>&#123;</div><div class=\"line\">\t\t\t<span class=\"keyword\">super</span>();</div><div class=\"line\">\t\t\t<span class=\"keyword\">this</span>.setName(name);</div><div class=\"line\">\t\t\t<span class=\"keyword\">this</span>.semaphore = semaphore;</div><div class=\"line\">\t\t&#125;</div><div class=\"line\"></div><div class=\"line\">\t\t<span class=\"meta\">@Override</span></div><div class=\"line\">\t\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">run</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">\t\t\t<span class=\"keyword\">try</span> &#123;</div><div class=\"line\">\t\t\t\tsemaphore.acquire();</div><div class=\"line\">\t\t\t\tSystem.out.println(<span class=\"string\">\"线程：\"</span> + Thread.currentThread().getName() + <span class=\"string\">\"占用一个资源\"</span>);</div><div class=\"line\">\t\t\t\tThread.sleep(<span class=\"number\">3000</span>);</div><div class=\"line\">\t\t\t\tSystem.out.println(<span class=\"string\">\"线程：\"</span> + Thread.currentThread().getName() + <span class=\"string\">\"释放一个资源\"</span>);</div><div class=\"line\">\t\t\t\tsemaphore.release();</div><div class=\"line\">\t\t\t&#125; <span class=\"keyword\">catch</span> (InterruptedException e) &#123;</div><div class=\"line\">\t\t\t\te.printStackTrace();</div><div class=\"line\">\t\t\t&#125;</div><div class=\"line\">\t\t&#125;</div><div class=\"line\"></div><div class=\"line\">\t&#125;</div></pre></td></tr></table></figure></p>\n<p>CountDownLatch和CyclicBarrier都能够实现线程之间的等待，只不过它们侧重点不同：<br>CountDownLatch一般用于某个线程等待若干个其他线程执行完任务之后，它才执行；而CyclicBarrier一般用于一组线程互相等待至某个状态，然后这一组线程再同时执行；另外，CountDownLatch是不能够重用的，而CyclicBarrier是可以重用的。Semaphore其实和锁有点类似，它一般用于控制对某组资源的访问权限。</p>\n<hr>\n<p>以上</p>"},{"title":"JVM内存区域","date":"2017-03-27T10:00:21.000Z","keywords":"jvm内存区域","_content":"　　Java虚拟机在执行Java程序的过程中会把它所管理的内存划分为若干个不同的数据区域.这些区域都有各自的用途,以及创建和销毁的时间.有的区域随着虚拟机进程的启动而存在,有些区域则依赖用户线程的启动和结束而建立和销毁.根据《Java虚拟机规范(JavaSE 7版)》的规定,Java虚拟机所管理的内存将会包括以下几个运行时数据区域.如下所示:\n![JVM内存区域](/image/JVM/JVM_RunTime_Area.png)\n<!--more-->\n### 程序计数器\n　　`程序计数器`(Program Counter Register)是一块较小的内存空间,它可以看作是当前线程所执行的字节码的行号指示器.在虚拟机的概念模型里(仅是概念模型,各种虚拟机可能会通过一些更高效的方式去实现),字节码解释器工作时就是通过改变这个计数器的值来选取下一条需要执行的字节码指令,分支、循环、跳转、异常处理、线程恢复等基础功能都需要依赖这个计数器来完成.\n由于Java虚拟机的多线程是通过线程轮流切换并分配处理器执行时间的方式来实现的,在任何一个确定的时刻,一个处理器(对于多核处理器来说是一个内核)都只会执行一条线程中的指令.因此,为了线程切换后能恢复到正确的执行位置,每条线程都需要有一个独立的程序计数器,各条线程之间计数器互不影响,独立存储,我们称这类内存区域为\"线程私有\"的内存.如果线程正在执行的是一个Java方法,这个计数器记录的是正在执行的虚拟机字节码指令的地址;如果正在执行的是Native方法,这个计数器值则为空(Undefined).此内存区域是唯一一个在Java虚拟机规范中没有规定任何`OutOfMemoryError`情况的区域.\n\n### Java虚拟机栈\n　　与程序计数器一样,Java虚拟机栈(Java Virtual Machine Stacks)也是线程私有的,它的生命周期与线程相同.虚拟机栈描述的是Java方法执行的内存模型:每个方法在执行的同时都会创建一个栈帧(Stack Frame)用于存储局部变量表、操作数栈、动态链接、方法出口等信息.每一个方法从调用直至执行完成的过程,就对应着一个栈帧在虚拟机栈中入栈到出栈的过程.经常有人把Java内存区分为堆内存(Heap)和栈内存(Stack),这种分法比较粗糙,Java内存区域的划分实际上远比这复杂. 这种划分方式的流行只能说明大多数程序员最关注的、与对象内存分配关系最密切的内存区域是这两块.所指的\"栈\"就是现在讲的虚拟机栈,或者说是虚拟机栈中局部变量表部分.局部变量表存放了编译期可知的各种基本数据类型(boolean、byte、char、short、int、float、long、double)、对象引用(reference类型,它不等同于对象本身,可能是一个指向对象起始地址的引用指针,也可能是指向一个代表对象的句柄或其他与此对象相关的位置)和returnAddress类型(指向了一条字节码指令的地址).其中64位长度的long和double类型的数据会占用2个局部变量空间(Slot),其余的数据类型只占用1个. 局部变量表所需的内存空间在编译期间完成分配,当进入一个方法时,这个方法需要在帧中分配多大的局部变量空间是完全确定的,在方法运行期间不会改变局部变量表的大小.在Java虚拟机规范中,对这个区域规定了两种异常状况:如果线程请求的栈深度大于虚拟机所允许的深度,将抛出`StackOverflowError`异常;如果虚拟机栈可以动态扩展(当前大部分的Java虚拟机都可动态扩展,只不过Java虚拟机规范中也允许固定长度的虚拟机栈),如果扩展时无法申请到足够的内存,就会抛出`OutOfMemoryError`异常.\n### 本地方法栈\n　　本地方法栈(Native Method Stack)与虚拟机栈所发挥的作用是非常相似的,它们之间的区别不过是虚拟机栈为虚拟机执行Java方法(也就是字节码)服务,而本地方法栈则为虚拟机使用到的Native方法服务. 在虚拟机规范中对本地方法栈中方法使用的语言、 使用方式与数据结构并没有强制规定,因此具体的虚拟机可以自由实现它. 甚至有的虚拟机(譬如Sun HotSpot虚拟机)直接就把本地方法栈和虚拟机栈合二为一. 与虚拟机栈一样,本地方法栈区域也会抛出`StackOverflowError`和`OutOfMemoryError`异常.\n### Java堆\n　　对于大多数应用来说,Java堆(Java Heap)是Java虚拟机所管理的内存中最大的一块.Java堆是被所有线程共享的一块内存区域,在虚拟机启动时创建.此内存区域的唯一目的就是存放对象实例,几乎所有的对象实例都在这里分配内存.这一点在Java虚拟机规范中的描述是:所有的对象实例以及数组都要在堆上分配,但是随着JIT编译器的发展与逃逸分析技术逐渐成熟,栈上分配、标量替换优化技术将会导致一些微妙的变化发生,所有的对象都分配在堆上也渐渐变得不是那么\"绝对\"了.Java堆是垃圾收集器管理的主要区域,因此很多时候也被称做\"GC堆\"(Garbage Collected Heap).从内存回收的角度来看,由于现在收集器基本都采用分代收集算法,所以Java堆中还可以细分为:新生代和老年代;再细致一点的有Eden空间、From Survivor空间、To Survivor空间等.从内存分配的角度来看,线程共享的Java堆中可能划分出多个线程私有的分配缓冲区(Thread Local Allocation Buffer,TLAB).不过无论如何划分,都与存放内容无关,无论哪个区域,存储的都仍然是对象实例,进一步划分的目的是为了更好地回收内存,或者更快地分配内存.根据Java虚拟机规范的规定,Java堆可以处于物理上不连续的内存空间中,只要逻辑上是连续的即可,就像我们的磁盘空间一样.在实现时,既可以实现成固定大小的,也可以是可扩展的,不过当前主流的虚拟机都是按照可扩展来实现的(通过-Xmx和-Xms控制). 如果在堆中没有内存完成实例分配,并且堆也无法再扩展时,将会抛出`OutOfMemoryError`异常.\n### 方法区\n　　方法区(Method Area)与Java堆一样,是各个线程共享的内存区域,它用于存储已被虚拟机加载的类信息、常量、静态变量、即时编译器编译后的代码等数据.虽然Java虚拟机规范把方法区描述为堆的一个逻辑部分,但是它却有一个别名叫做Non-Heap(非堆),目的应该是与Java堆区分开来.对于习惯在HotSpot虚拟机上开发、 部署程序的开发者来说,很多人都更愿意把方法区称为\"永久代\"(Permanent Generation),本质上两者并不等价,仅仅是因为HotSpot虚拟机的设计团队选择把GC分代收集扩展至方法区,或者说使用永久代来实现方法区而已,这样HotSpot的垃圾收集器可以像管理Java堆一样管理这部分内存,能够省去专门为方法区编写内存管理代码的工作.对于其他虚拟机(如BEA JRockit、 IBM J9等)来说是不存在永久代的概念的.原则上,如何实现方法区属于虚拟机实现细节,不受虚拟机规范约束,但使用永久代来实现方法区,现在看来并不是一个好主意,因为这样更容易遇到内存溢出问题(永久代有-XX:MaxPermSize的上限,J9和JRockit只要没有触碰到进程可用内存的上限,例如32位系统中的4GB,就不会出现问题),而且有极少数方法(例如String.intern())会因这个原因导致不同虚拟机下有不同的表现. 因此,对于HotSpot虚拟机,根据官方发布的路线图信息,现在也有放弃永久代并逐步改为采用Native Memory来实现方法区的规划了,在目前已经发布的JDK1.7的HotSpot中,已经把原本放在永久代的字符串常量池移出.Java虚拟机规范对方法区的限制非常宽松,除了和Java堆一样不需要连续的内存和可以选择固定大小或者可扩展外,还可以选择不实现垃圾收集.相对而言,垃圾收集行为在这个区域是比较少出现的,但并非数据进入了方法区就如永久代的名字一样\"永久\"存在了.这区域的内存回收目标主要是针对常量池的回收和对类型的卸载,一般来说,这个区域的回收\"成绩\"比较难以令人满意,尤其是类型的卸载,条件相当苛刻,但是这部分区域的回收确实是必要的.根据Java虚拟机规范的规定,当方法区无法满足内存分配需求时,将抛出`OutOfMemoryError`异常.\n### 运行时常量池\n　　运行时常量池(Runtime Constant Pool)是方法区的一部分. Class文件中除了有类的版本、字段、方法、接口等描述信息外,还有一项信息是常量池(Constant Pool Table),用于存放编译期生成的各种字面量和符号引用,这部分内容将在类加载后进入方法区的运行时常量池中存放.Java虚拟机对Class文件每一部分(自然也包括常量池)的格式都有严格规定,每一个字节用于存储哪种数据都必须符合规范上的要求才会被虚拟机认可、装载和执行,但对于运行时常量池,Java虚拟机规范没有做任何细节的要求,不同的提供商实现的虚拟机可以按照自己的需要来实现这个内存区域.不过,一般来说,除了保存Class文件中描述的符号引用外,还会把翻译出来的直接引用也存储在运行时常量池中.运行时常量池相对于Class文件常量池的另外一个重要特征是具备动态性,Java语言并不要求常量一定只有编译期才能产生,也就是并非预置入Class文件中常量池的内容才能进入方法区运行时常量池,运行期间也可能将新的常量放入池中,这种特性被开发人员利用得比较多的便是String类的intern()方法.既然运行时常量池是方法区的一部分,自然受到方法区内存的限制,当常量池无法再申请到内存时会抛出`OutOfMemoryError`异常.\n### 直接内存\n　　直接内存(Direct Memory)并不是虚拟机运行时数据区的一部分,也不是Java虚拟机规范中定义的内存区域.但是这部分内存也被频繁地使用,而且也可能导致`OutOfMemoryError`异常出现,所以我们放到这里一起讲解.在JDK 1.4中新加入了NIO(New Input/Output)类,引入了一种基于通道(Channel)与缓冲区(Buffer)的I/O方式,它可以使用Native函数库直接分配堆外内存,然后通过一个存储在Java堆中的DirectByteBuffer对象作为这块内存的引用进行操作.这样能在一些场景中显著提高性能,因为避免了在Java堆和Native堆中来回复制数据.显然,本机直接内存的分配不会受到Java堆大小的限制,但是,既然是内存,肯定还是会受到本机总内存(包括RAM以及SWAP区或者分页文件)大小以及处理器寻址空间的限制.服务器管理员在配置虚拟机参数时,会根据实际内存设置-Xmx等参数信息,但经常忽略直接内存,使得各个内存区域总和大于物理内存限制(包括物理的和操作系统级的限制),从而导致动态扩展时出现`OutOfMemoryError`异常.\n***\n以上","source":"_posts/JVM内存区域.md","raw":"---\ntitle: JVM内存区域\ndate: 2017-03-27 18:00:21\ntags: [JVM]\nkeywords: jvm内存区域\n---\n　　Java虚拟机在执行Java程序的过程中会把它所管理的内存划分为若干个不同的数据区域.这些区域都有各自的用途,以及创建和销毁的时间.有的区域随着虚拟机进程的启动而存在,有些区域则依赖用户线程的启动和结束而建立和销毁.根据《Java虚拟机规范(JavaSE 7版)》的规定,Java虚拟机所管理的内存将会包括以下几个运行时数据区域.如下所示:\n![JVM内存区域](/image/JVM/JVM_RunTime_Area.png)\n<!--more-->\n### 程序计数器\n　　`程序计数器`(Program Counter Register)是一块较小的内存空间,它可以看作是当前线程所执行的字节码的行号指示器.在虚拟机的概念模型里(仅是概念模型,各种虚拟机可能会通过一些更高效的方式去实现),字节码解释器工作时就是通过改变这个计数器的值来选取下一条需要执行的字节码指令,分支、循环、跳转、异常处理、线程恢复等基础功能都需要依赖这个计数器来完成.\n由于Java虚拟机的多线程是通过线程轮流切换并分配处理器执行时间的方式来实现的,在任何一个确定的时刻,一个处理器(对于多核处理器来说是一个内核)都只会执行一条线程中的指令.因此,为了线程切换后能恢复到正确的执行位置,每条线程都需要有一个独立的程序计数器,各条线程之间计数器互不影响,独立存储,我们称这类内存区域为\"线程私有\"的内存.如果线程正在执行的是一个Java方法,这个计数器记录的是正在执行的虚拟机字节码指令的地址;如果正在执行的是Native方法,这个计数器值则为空(Undefined).此内存区域是唯一一个在Java虚拟机规范中没有规定任何`OutOfMemoryError`情况的区域.\n\n### Java虚拟机栈\n　　与程序计数器一样,Java虚拟机栈(Java Virtual Machine Stacks)也是线程私有的,它的生命周期与线程相同.虚拟机栈描述的是Java方法执行的内存模型:每个方法在执行的同时都会创建一个栈帧(Stack Frame)用于存储局部变量表、操作数栈、动态链接、方法出口等信息.每一个方法从调用直至执行完成的过程,就对应着一个栈帧在虚拟机栈中入栈到出栈的过程.经常有人把Java内存区分为堆内存(Heap)和栈内存(Stack),这种分法比较粗糙,Java内存区域的划分实际上远比这复杂. 这种划分方式的流行只能说明大多数程序员最关注的、与对象内存分配关系最密切的内存区域是这两块.所指的\"栈\"就是现在讲的虚拟机栈,或者说是虚拟机栈中局部变量表部分.局部变量表存放了编译期可知的各种基本数据类型(boolean、byte、char、short、int、float、long、double)、对象引用(reference类型,它不等同于对象本身,可能是一个指向对象起始地址的引用指针,也可能是指向一个代表对象的句柄或其他与此对象相关的位置)和returnAddress类型(指向了一条字节码指令的地址).其中64位长度的long和double类型的数据会占用2个局部变量空间(Slot),其余的数据类型只占用1个. 局部变量表所需的内存空间在编译期间完成分配,当进入一个方法时,这个方法需要在帧中分配多大的局部变量空间是完全确定的,在方法运行期间不会改变局部变量表的大小.在Java虚拟机规范中,对这个区域规定了两种异常状况:如果线程请求的栈深度大于虚拟机所允许的深度,将抛出`StackOverflowError`异常;如果虚拟机栈可以动态扩展(当前大部分的Java虚拟机都可动态扩展,只不过Java虚拟机规范中也允许固定长度的虚拟机栈),如果扩展时无法申请到足够的内存,就会抛出`OutOfMemoryError`异常.\n### 本地方法栈\n　　本地方法栈(Native Method Stack)与虚拟机栈所发挥的作用是非常相似的,它们之间的区别不过是虚拟机栈为虚拟机执行Java方法(也就是字节码)服务,而本地方法栈则为虚拟机使用到的Native方法服务. 在虚拟机规范中对本地方法栈中方法使用的语言、 使用方式与数据结构并没有强制规定,因此具体的虚拟机可以自由实现它. 甚至有的虚拟机(譬如Sun HotSpot虚拟机)直接就把本地方法栈和虚拟机栈合二为一. 与虚拟机栈一样,本地方法栈区域也会抛出`StackOverflowError`和`OutOfMemoryError`异常.\n### Java堆\n　　对于大多数应用来说,Java堆(Java Heap)是Java虚拟机所管理的内存中最大的一块.Java堆是被所有线程共享的一块内存区域,在虚拟机启动时创建.此内存区域的唯一目的就是存放对象实例,几乎所有的对象实例都在这里分配内存.这一点在Java虚拟机规范中的描述是:所有的对象实例以及数组都要在堆上分配,但是随着JIT编译器的发展与逃逸分析技术逐渐成熟,栈上分配、标量替换优化技术将会导致一些微妙的变化发生,所有的对象都分配在堆上也渐渐变得不是那么\"绝对\"了.Java堆是垃圾收集器管理的主要区域,因此很多时候也被称做\"GC堆\"(Garbage Collected Heap).从内存回收的角度来看,由于现在收集器基本都采用分代收集算法,所以Java堆中还可以细分为:新生代和老年代;再细致一点的有Eden空间、From Survivor空间、To Survivor空间等.从内存分配的角度来看,线程共享的Java堆中可能划分出多个线程私有的分配缓冲区(Thread Local Allocation Buffer,TLAB).不过无论如何划分,都与存放内容无关,无论哪个区域,存储的都仍然是对象实例,进一步划分的目的是为了更好地回收内存,或者更快地分配内存.根据Java虚拟机规范的规定,Java堆可以处于物理上不连续的内存空间中,只要逻辑上是连续的即可,就像我们的磁盘空间一样.在实现时,既可以实现成固定大小的,也可以是可扩展的,不过当前主流的虚拟机都是按照可扩展来实现的(通过-Xmx和-Xms控制). 如果在堆中没有内存完成实例分配,并且堆也无法再扩展时,将会抛出`OutOfMemoryError`异常.\n### 方法区\n　　方法区(Method Area)与Java堆一样,是各个线程共享的内存区域,它用于存储已被虚拟机加载的类信息、常量、静态变量、即时编译器编译后的代码等数据.虽然Java虚拟机规范把方法区描述为堆的一个逻辑部分,但是它却有一个别名叫做Non-Heap(非堆),目的应该是与Java堆区分开来.对于习惯在HotSpot虚拟机上开发、 部署程序的开发者来说,很多人都更愿意把方法区称为\"永久代\"(Permanent Generation),本质上两者并不等价,仅仅是因为HotSpot虚拟机的设计团队选择把GC分代收集扩展至方法区,或者说使用永久代来实现方法区而已,这样HotSpot的垃圾收集器可以像管理Java堆一样管理这部分内存,能够省去专门为方法区编写内存管理代码的工作.对于其他虚拟机(如BEA JRockit、 IBM J9等)来说是不存在永久代的概念的.原则上,如何实现方法区属于虚拟机实现细节,不受虚拟机规范约束,但使用永久代来实现方法区,现在看来并不是一个好主意,因为这样更容易遇到内存溢出问题(永久代有-XX:MaxPermSize的上限,J9和JRockit只要没有触碰到进程可用内存的上限,例如32位系统中的4GB,就不会出现问题),而且有极少数方法(例如String.intern())会因这个原因导致不同虚拟机下有不同的表现. 因此,对于HotSpot虚拟机,根据官方发布的路线图信息,现在也有放弃永久代并逐步改为采用Native Memory来实现方法区的规划了,在目前已经发布的JDK1.7的HotSpot中,已经把原本放在永久代的字符串常量池移出.Java虚拟机规范对方法区的限制非常宽松,除了和Java堆一样不需要连续的内存和可以选择固定大小或者可扩展外,还可以选择不实现垃圾收集.相对而言,垃圾收集行为在这个区域是比较少出现的,但并非数据进入了方法区就如永久代的名字一样\"永久\"存在了.这区域的内存回收目标主要是针对常量池的回收和对类型的卸载,一般来说,这个区域的回收\"成绩\"比较难以令人满意,尤其是类型的卸载,条件相当苛刻,但是这部分区域的回收确实是必要的.根据Java虚拟机规范的规定,当方法区无法满足内存分配需求时,将抛出`OutOfMemoryError`异常.\n### 运行时常量池\n　　运行时常量池(Runtime Constant Pool)是方法区的一部分. Class文件中除了有类的版本、字段、方法、接口等描述信息外,还有一项信息是常量池(Constant Pool Table),用于存放编译期生成的各种字面量和符号引用,这部分内容将在类加载后进入方法区的运行时常量池中存放.Java虚拟机对Class文件每一部分(自然也包括常量池)的格式都有严格规定,每一个字节用于存储哪种数据都必须符合规范上的要求才会被虚拟机认可、装载和执行,但对于运行时常量池,Java虚拟机规范没有做任何细节的要求,不同的提供商实现的虚拟机可以按照自己的需要来实现这个内存区域.不过,一般来说,除了保存Class文件中描述的符号引用外,还会把翻译出来的直接引用也存储在运行时常量池中.运行时常量池相对于Class文件常量池的另外一个重要特征是具备动态性,Java语言并不要求常量一定只有编译期才能产生,也就是并非预置入Class文件中常量池的内容才能进入方法区运行时常量池,运行期间也可能将新的常量放入池中,这种特性被开发人员利用得比较多的便是String类的intern()方法.既然运行时常量池是方法区的一部分,自然受到方法区内存的限制,当常量池无法再申请到内存时会抛出`OutOfMemoryError`异常.\n### 直接内存\n　　直接内存(Direct Memory)并不是虚拟机运行时数据区的一部分,也不是Java虚拟机规范中定义的内存区域.但是这部分内存也被频繁地使用,而且也可能导致`OutOfMemoryError`异常出现,所以我们放到这里一起讲解.在JDK 1.4中新加入了NIO(New Input/Output)类,引入了一种基于通道(Channel)与缓冲区(Buffer)的I/O方式,它可以使用Native函数库直接分配堆外内存,然后通过一个存储在Java堆中的DirectByteBuffer对象作为这块内存的引用进行操作.这样能在一些场景中显著提高性能,因为避免了在Java堆和Native堆中来回复制数据.显然,本机直接内存的分配不会受到Java堆大小的限制,但是,既然是内存,肯定还是会受到本机总内存(包括RAM以及SWAP区或者分页文件)大小以及处理器寻址空间的限制.服务器管理员在配置虚拟机参数时,会根据实际内存设置-Xmx等参数信息,但经常忽略直接内存,使得各个内存区域总和大于物理内存限制(包括物理的和操作系统级的限制),从而导致动态扩展时出现`OutOfMemoryError`异常.\n***\n以上","slug":"JVM内存区域","published":1,"updated":"2018-08-04T05:05:00.772Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjl3vbtqy001fisdgiklfbgdx","content":"<p>　　Java虚拟机在执行Java程序的过程中会把它所管理的内存划分为若干个不同的数据区域.这些区域都有各自的用途,以及创建和销毁的时间.有的区域随着虚拟机进程的启动而存在,有些区域则依赖用户线程的启动和结束而建立和销毁.根据《Java虚拟机规范(JavaSE 7版)》的规定,Java虚拟机所管理的内存将会包括以下几个运行时数据区域.如下所示:<br><img src=\"/image/JVM/JVM_RunTime_Area.png\" alt=\"JVM内存区域\"><br><a id=\"more\"></a></p>\n<h3 id=\"程序计数器\"><a href=\"#程序计数器\" class=\"headerlink\" title=\"程序计数器\"></a>程序计数器</h3><p>　　<code>程序计数器</code>(Program Counter Register)是一块较小的内存空间,它可以看作是当前线程所执行的字节码的行号指示器.在虚拟机的概念模型里(仅是概念模型,各种虚拟机可能会通过一些更高效的方式去实现),字节码解释器工作时就是通过改变这个计数器的值来选取下一条需要执行的字节码指令,分支、循环、跳转、异常处理、线程恢复等基础功能都需要依赖这个计数器来完成.<br>由于Java虚拟机的多线程是通过线程轮流切换并分配处理器执行时间的方式来实现的,在任何一个确定的时刻,一个处理器(对于多核处理器来说是一个内核)都只会执行一条线程中的指令.因此,为了线程切换后能恢复到正确的执行位置,每条线程都需要有一个独立的程序计数器,各条线程之间计数器互不影响,独立存储,我们称这类内存区域为”线程私有”的内存.如果线程正在执行的是一个Java方法,这个计数器记录的是正在执行的虚拟机字节码指令的地址;如果正在执行的是Native方法,这个计数器值则为空(Undefined).此内存区域是唯一一个在Java虚拟机规范中没有规定任何<code>OutOfMemoryError</code>情况的区域.</p>\n<h3 id=\"Java虚拟机栈\"><a href=\"#Java虚拟机栈\" class=\"headerlink\" title=\"Java虚拟机栈\"></a>Java虚拟机栈</h3><p>　　与程序计数器一样,Java虚拟机栈(Java Virtual Machine Stacks)也是线程私有的,它的生命周期与线程相同.虚拟机栈描述的是Java方法执行的内存模型:每个方法在执行的同时都会创建一个栈帧(Stack Frame)用于存储局部变量表、操作数栈、动态链接、方法出口等信息.每一个方法从调用直至执行完成的过程,就对应着一个栈帧在虚拟机栈中入栈到出栈的过程.经常有人把Java内存区分为堆内存(Heap)和栈内存(Stack),这种分法比较粗糙,Java内存区域的划分实际上远比这复杂. 这种划分方式的流行只能说明大多数程序员最关注的、与对象内存分配关系最密切的内存区域是这两块.所指的”栈”就是现在讲的虚拟机栈,或者说是虚拟机栈中局部变量表部分.局部变量表存放了编译期可知的各种基本数据类型(boolean、byte、char、short、int、float、long、double)、对象引用(reference类型,它不等同于对象本身,可能是一个指向对象起始地址的引用指针,也可能是指向一个代表对象的句柄或其他与此对象相关的位置)和returnAddress类型(指向了一条字节码指令的地址).其中64位长度的long和double类型的数据会占用2个局部变量空间(Slot),其余的数据类型只占用1个. 局部变量表所需的内存空间在编译期间完成分配,当进入一个方法时,这个方法需要在帧中分配多大的局部变量空间是完全确定的,在方法运行期间不会改变局部变量表的大小.在Java虚拟机规范中,对这个区域规定了两种异常状况:如果线程请求的栈深度大于虚拟机所允许的深度,将抛出<code>StackOverflowError</code>异常;如果虚拟机栈可以动态扩展(当前大部分的Java虚拟机都可动态扩展,只不过Java虚拟机规范中也允许固定长度的虚拟机栈),如果扩展时无法申请到足够的内存,就会抛出<code>OutOfMemoryError</code>异常.</p>\n<h3 id=\"本地方法栈\"><a href=\"#本地方法栈\" class=\"headerlink\" title=\"本地方法栈\"></a>本地方法栈</h3><p>　　本地方法栈(Native Method Stack)与虚拟机栈所发挥的作用是非常相似的,它们之间的区别不过是虚拟机栈为虚拟机执行Java方法(也就是字节码)服务,而本地方法栈则为虚拟机使用到的Native方法服务. 在虚拟机规范中对本地方法栈中方法使用的语言、 使用方式与数据结构并没有强制规定,因此具体的虚拟机可以自由实现它. 甚至有的虚拟机(譬如Sun HotSpot虚拟机)直接就把本地方法栈和虚拟机栈合二为一. 与虚拟机栈一样,本地方法栈区域也会抛出<code>StackOverflowError</code>和<code>OutOfMemoryError</code>异常.</p>\n<h3 id=\"Java堆\"><a href=\"#Java堆\" class=\"headerlink\" title=\"Java堆\"></a>Java堆</h3><p>　　对于大多数应用来说,Java堆(Java Heap)是Java虚拟机所管理的内存中最大的一块.Java堆是被所有线程共享的一块内存区域,在虚拟机启动时创建.此内存区域的唯一目的就是存放对象实例,几乎所有的对象实例都在这里分配内存.这一点在Java虚拟机规范中的描述是:所有的对象实例以及数组都要在堆上分配,但是随着JIT编译器的发展与逃逸分析技术逐渐成熟,栈上分配、标量替换优化技术将会导致一些微妙的变化发生,所有的对象都分配在堆上也渐渐变得不是那么”绝对”了.Java堆是垃圾收集器管理的主要区域,因此很多时候也被称做”GC堆”(Garbage Collected Heap).从内存回收的角度来看,由于现在收集器基本都采用分代收集算法,所以Java堆中还可以细分为:新生代和老年代;再细致一点的有Eden空间、From Survivor空间、To Survivor空间等.从内存分配的角度来看,线程共享的Java堆中可能划分出多个线程私有的分配缓冲区(Thread Local Allocation Buffer,TLAB).不过无论如何划分,都与存放内容无关,无论哪个区域,存储的都仍然是对象实例,进一步划分的目的是为了更好地回收内存,或者更快地分配内存.根据Java虚拟机规范的规定,Java堆可以处于物理上不连续的内存空间中,只要逻辑上是连续的即可,就像我们的磁盘空间一样.在实现时,既可以实现成固定大小的,也可以是可扩展的,不过当前主流的虚拟机都是按照可扩展来实现的(通过-Xmx和-Xms控制). 如果在堆中没有内存完成实例分配,并且堆也无法再扩展时,将会抛出<code>OutOfMemoryError</code>异常.</p>\n<h3 id=\"方法区\"><a href=\"#方法区\" class=\"headerlink\" title=\"方法区\"></a>方法区</h3><p>　　方法区(Method Area)与Java堆一样,是各个线程共享的内存区域,它用于存储已被虚拟机加载的类信息、常量、静态变量、即时编译器编译后的代码等数据.虽然Java虚拟机规范把方法区描述为堆的一个逻辑部分,但是它却有一个别名叫做Non-Heap(非堆),目的应该是与Java堆区分开来.对于习惯在HotSpot虚拟机上开发、 部署程序的开发者来说,很多人都更愿意把方法区称为”永久代”(Permanent Generation),本质上两者并不等价,仅仅是因为HotSpot虚拟机的设计团队选择把GC分代收集扩展至方法区,或者说使用永久代来实现方法区而已,这样HotSpot的垃圾收集器可以像管理Java堆一样管理这部分内存,能够省去专门为方法区编写内存管理代码的工作.对于其他虚拟机(如BEA JRockit、 IBM J9等)来说是不存在永久代的概念的.原则上,如何实现方法区属于虚拟机实现细节,不受虚拟机规范约束,但使用永久代来实现方法区,现在看来并不是一个好主意,因为这样更容易遇到内存溢出问题(永久代有-XX:MaxPermSize的上限,J9和JRockit只要没有触碰到进程可用内存的上限,例如32位系统中的4GB,就不会出现问题),而且有极少数方法(例如String.intern())会因这个原因导致不同虚拟机下有不同的表现. 因此,对于HotSpot虚拟机,根据官方发布的路线图信息,现在也有放弃永久代并逐步改为采用Native Memory来实现方法区的规划了,在目前已经发布的JDK1.7的HotSpot中,已经把原本放在永久代的字符串常量池移出.Java虚拟机规范对方法区的限制非常宽松,除了和Java堆一样不需要连续的内存和可以选择固定大小或者可扩展外,还可以选择不实现垃圾收集.相对而言,垃圾收集行为在这个区域是比较少出现的,但并非数据进入了方法区就如永久代的名字一样”永久”存在了.这区域的内存回收目标主要是针对常量池的回收和对类型的卸载,一般来说,这个区域的回收”成绩”比较难以令人满意,尤其是类型的卸载,条件相当苛刻,但是这部分区域的回收确实是必要的.根据Java虚拟机规范的规定,当方法区无法满足内存分配需求时,将抛出<code>OutOfMemoryError</code>异常.</p>\n<h3 id=\"运行时常量池\"><a href=\"#运行时常量池\" class=\"headerlink\" title=\"运行时常量池\"></a>运行时常量池</h3><p>　　运行时常量池(Runtime Constant Pool)是方法区的一部分. Class文件中除了有类的版本、字段、方法、接口等描述信息外,还有一项信息是常量池(Constant Pool Table),用于存放编译期生成的各种字面量和符号引用,这部分内容将在类加载后进入方法区的运行时常量池中存放.Java虚拟机对Class文件每一部分(自然也包括常量池)的格式都有严格规定,每一个字节用于存储哪种数据都必须符合规范上的要求才会被虚拟机认可、装载和执行,但对于运行时常量池,Java虚拟机规范没有做任何细节的要求,不同的提供商实现的虚拟机可以按照自己的需要来实现这个内存区域.不过,一般来说,除了保存Class文件中描述的符号引用外,还会把翻译出来的直接引用也存储在运行时常量池中.运行时常量池相对于Class文件常量池的另外一个重要特征是具备动态性,Java语言并不要求常量一定只有编译期才能产生,也就是并非预置入Class文件中常量池的内容才能进入方法区运行时常量池,运行期间也可能将新的常量放入池中,这种特性被开发人员利用得比较多的便是String类的intern()方法.既然运行时常量池是方法区的一部分,自然受到方法区内存的限制,当常量池无法再申请到内存时会抛出<code>OutOfMemoryError</code>异常.</p>\n<h3 id=\"直接内存\"><a href=\"#直接内存\" class=\"headerlink\" title=\"直接内存\"></a>直接内存</h3><p>　　直接内存(Direct Memory)并不是虚拟机运行时数据区的一部分,也不是Java虚拟机规范中定义的内存区域.但是这部分内存也被频繁地使用,而且也可能导致<code>OutOfMemoryError</code>异常出现,所以我们放到这里一起讲解.在JDK 1.4中新加入了NIO(New Input/Output)类,引入了一种基于通道(Channel)与缓冲区(Buffer)的I/O方式,它可以使用Native函数库直接分配堆外内存,然后通过一个存储在Java堆中的DirectByteBuffer对象作为这块内存的引用进行操作.这样能在一些场景中显著提高性能,因为避免了在Java堆和Native堆中来回复制数据.显然,本机直接内存的分配不会受到Java堆大小的限制,但是,既然是内存,肯定还是会受到本机总内存(包括RAM以及SWAP区或者分页文件)大小以及处理器寻址空间的限制.服务器管理员在配置虚拟机参数时,会根据实际内存设置-Xmx等参数信息,但经常忽略直接内存,使得各个内存区域总和大于物理内存限制(包括物理的和操作系统级的限制),从而导致动态扩展时出现<code>OutOfMemoryError</code>异常.</p>\n<hr>\n<p>以上</p>\n","excerpt":"<p>　　Java虚拟机在执行Java程序的过程中会把它所管理的内存划分为若干个不同的数据区域.这些区域都有各自的用途,以及创建和销毁的时间.有的区域随着虚拟机进程的启动而存在,有些区域则依赖用户线程的启动和结束而建立和销毁.根据《Java虚拟机规范(JavaSE 7版)》的规定,Java虚拟机所管理的内存将会包括以下几个运行时数据区域.如下所示:<br><img src=\"/image/JVM/JVM_RunTime_Area.png\" alt=\"JVM内存区域\"><br>","more":"</p>\n<h3 id=\"程序计数器\"><a href=\"#程序计数器\" class=\"headerlink\" title=\"程序计数器\"></a>程序计数器</h3><p>　　<code>程序计数器</code>(Program Counter Register)是一块较小的内存空间,它可以看作是当前线程所执行的字节码的行号指示器.在虚拟机的概念模型里(仅是概念模型,各种虚拟机可能会通过一些更高效的方式去实现),字节码解释器工作时就是通过改变这个计数器的值来选取下一条需要执行的字节码指令,分支、循环、跳转、异常处理、线程恢复等基础功能都需要依赖这个计数器来完成.<br>由于Java虚拟机的多线程是通过线程轮流切换并分配处理器执行时间的方式来实现的,在任何一个确定的时刻,一个处理器(对于多核处理器来说是一个内核)都只会执行一条线程中的指令.因此,为了线程切换后能恢复到正确的执行位置,每条线程都需要有一个独立的程序计数器,各条线程之间计数器互不影响,独立存储,我们称这类内存区域为”线程私有”的内存.如果线程正在执行的是一个Java方法,这个计数器记录的是正在执行的虚拟机字节码指令的地址;如果正在执行的是Native方法,这个计数器值则为空(Undefined).此内存区域是唯一一个在Java虚拟机规范中没有规定任何<code>OutOfMemoryError</code>情况的区域.</p>\n<h3 id=\"Java虚拟机栈\"><a href=\"#Java虚拟机栈\" class=\"headerlink\" title=\"Java虚拟机栈\"></a>Java虚拟机栈</h3><p>　　与程序计数器一样,Java虚拟机栈(Java Virtual Machine Stacks)也是线程私有的,它的生命周期与线程相同.虚拟机栈描述的是Java方法执行的内存模型:每个方法在执行的同时都会创建一个栈帧(Stack Frame)用于存储局部变量表、操作数栈、动态链接、方法出口等信息.每一个方法从调用直至执行完成的过程,就对应着一个栈帧在虚拟机栈中入栈到出栈的过程.经常有人把Java内存区分为堆内存(Heap)和栈内存(Stack),这种分法比较粗糙,Java内存区域的划分实际上远比这复杂. 这种划分方式的流行只能说明大多数程序员最关注的、与对象内存分配关系最密切的内存区域是这两块.所指的”栈”就是现在讲的虚拟机栈,或者说是虚拟机栈中局部变量表部分.局部变量表存放了编译期可知的各种基本数据类型(boolean、byte、char、short、int、float、long、double)、对象引用(reference类型,它不等同于对象本身,可能是一个指向对象起始地址的引用指针,也可能是指向一个代表对象的句柄或其他与此对象相关的位置)和returnAddress类型(指向了一条字节码指令的地址).其中64位长度的long和double类型的数据会占用2个局部变量空间(Slot),其余的数据类型只占用1个. 局部变量表所需的内存空间在编译期间完成分配,当进入一个方法时,这个方法需要在帧中分配多大的局部变量空间是完全确定的,在方法运行期间不会改变局部变量表的大小.在Java虚拟机规范中,对这个区域规定了两种异常状况:如果线程请求的栈深度大于虚拟机所允许的深度,将抛出<code>StackOverflowError</code>异常;如果虚拟机栈可以动态扩展(当前大部分的Java虚拟机都可动态扩展,只不过Java虚拟机规范中也允许固定长度的虚拟机栈),如果扩展时无法申请到足够的内存,就会抛出<code>OutOfMemoryError</code>异常.</p>\n<h3 id=\"本地方法栈\"><a href=\"#本地方法栈\" class=\"headerlink\" title=\"本地方法栈\"></a>本地方法栈</h3><p>　　本地方法栈(Native Method Stack)与虚拟机栈所发挥的作用是非常相似的,它们之间的区别不过是虚拟机栈为虚拟机执行Java方法(也就是字节码)服务,而本地方法栈则为虚拟机使用到的Native方法服务. 在虚拟机规范中对本地方法栈中方法使用的语言、 使用方式与数据结构并没有强制规定,因此具体的虚拟机可以自由实现它. 甚至有的虚拟机(譬如Sun HotSpot虚拟机)直接就把本地方法栈和虚拟机栈合二为一. 与虚拟机栈一样,本地方法栈区域也会抛出<code>StackOverflowError</code>和<code>OutOfMemoryError</code>异常.</p>\n<h3 id=\"Java堆\"><a href=\"#Java堆\" class=\"headerlink\" title=\"Java堆\"></a>Java堆</h3><p>　　对于大多数应用来说,Java堆(Java Heap)是Java虚拟机所管理的内存中最大的一块.Java堆是被所有线程共享的一块内存区域,在虚拟机启动时创建.此内存区域的唯一目的就是存放对象实例,几乎所有的对象实例都在这里分配内存.这一点在Java虚拟机规范中的描述是:所有的对象实例以及数组都要在堆上分配,但是随着JIT编译器的发展与逃逸分析技术逐渐成熟,栈上分配、标量替换优化技术将会导致一些微妙的变化发生,所有的对象都分配在堆上也渐渐变得不是那么”绝对”了.Java堆是垃圾收集器管理的主要区域,因此很多时候也被称做”GC堆”(Garbage Collected Heap).从内存回收的角度来看,由于现在收集器基本都采用分代收集算法,所以Java堆中还可以细分为:新生代和老年代;再细致一点的有Eden空间、From Survivor空间、To Survivor空间等.从内存分配的角度来看,线程共享的Java堆中可能划分出多个线程私有的分配缓冲区(Thread Local Allocation Buffer,TLAB).不过无论如何划分,都与存放内容无关,无论哪个区域,存储的都仍然是对象实例,进一步划分的目的是为了更好地回收内存,或者更快地分配内存.根据Java虚拟机规范的规定,Java堆可以处于物理上不连续的内存空间中,只要逻辑上是连续的即可,就像我们的磁盘空间一样.在实现时,既可以实现成固定大小的,也可以是可扩展的,不过当前主流的虚拟机都是按照可扩展来实现的(通过-Xmx和-Xms控制). 如果在堆中没有内存完成实例分配,并且堆也无法再扩展时,将会抛出<code>OutOfMemoryError</code>异常.</p>\n<h3 id=\"方法区\"><a href=\"#方法区\" class=\"headerlink\" title=\"方法区\"></a>方法区</h3><p>　　方法区(Method Area)与Java堆一样,是各个线程共享的内存区域,它用于存储已被虚拟机加载的类信息、常量、静态变量、即时编译器编译后的代码等数据.虽然Java虚拟机规范把方法区描述为堆的一个逻辑部分,但是它却有一个别名叫做Non-Heap(非堆),目的应该是与Java堆区分开来.对于习惯在HotSpot虚拟机上开发、 部署程序的开发者来说,很多人都更愿意把方法区称为”永久代”(Permanent Generation),本质上两者并不等价,仅仅是因为HotSpot虚拟机的设计团队选择把GC分代收集扩展至方法区,或者说使用永久代来实现方法区而已,这样HotSpot的垃圾收集器可以像管理Java堆一样管理这部分内存,能够省去专门为方法区编写内存管理代码的工作.对于其他虚拟机(如BEA JRockit、 IBM J9等)来说是不存在永久代的概念的.原则上,如何实现方法区属于虚拟机实现细节,不受虚拟机规范约束,但使用永久代来实现方法区,现在看来并不是一个好主意,因为这样更容易遇到内存溢出问题(永久代有-XX:MaxPermSize的上限,J9和JRockit只要没有触碰到进程可用内存的上限,例如32位系统中的4GB,就不会出现问题),而且有极少数方法(例如String.intern())会因这个原因导致不同虚拟机下有不同的表现. 因此,对于HotSpot虚拟机,根据官方发布的路线图信息,现在也有放弃永久代并逐步改为采用Native Memory来实现方法区的规划了,在目前已经发布的JDK1.7的HotSpot中,已经把原本放在永久代的字符串常量池移出.Java虚拟机规范对方法区的限制非常宽松,除了和Java堆一样不需要连续的内存和可以选择固定大小或者可扩展外,还可以选择不实现垃圾收集.相对而言,垃圾收集行为在这个区域是比较少出现的,但并非数据进入了方法区就如永久代的名字一样”永久”存在了.这区域的内存回收目标主要是针对常量池的回收和对类型的卸载,一般来说,这个区域的回收”成绩”比较难以令人满意,尤其是类型的卸载,条件相当苛刻,但是这部分区域的回收确实是必要的.根据Java虚拟机规范的规定,当方法区无法满足内存分配需求时,将抛出<code>OutOfMemoryError</code>异常.</p>\n<h3 id=\"运行时常量池\"><a href=\"#运行时常量池\" class=\"headerlink\" title=\"运行时常量池\"></a>运行时常量池</h3><p>　　运行时常量池(Runtime Constant Pool)是方法区的一部分. Class文件中除了有类的版本、字段、方法、接口等描述信息外,还有一项信息是常量池(Constant Pool Table),用于存放编译期生成的各种字面量和符号引用,这部分内容将在类加载后进入方法区的运行时常量池中存放.Java虚拟机对Class文件每一部分(自然也包括常量池)的格式都有严格规定,每一个字节用于存储哪种数据都必须符合规范上的要求才会被虚拟机认可、装载和执行,但对于运行时常量池,Java虚拟机规范没有做任何细节的要求,不同的提供商实现的虚拟机可以按照自己的需要来实现这个内存区域.不过,一般来说,除了保存Class文件中描述的符号引用外,还会把翻译出来的直接引用也存储在运行时常量池中.运行时常量池相对于Class文件常量池的另外一个重要特征是具备动态性,Java语言并不要求常量一定只有编译期才能产生,也就是并非预置入Class文件中常量池的内容才能进入方法区运行时常量池,运行期间也可能将新的常量放入池中,这种特性被开发人员利用得比较多的便是String类的intern()方法.既然运行时常量池是方法区的一部分,自然受到方法区内存的限制,当常量池无法再申请到内存时会抛出<code>OutOfMemoryError</code>异常.</p>\n<h3 id=\"直接内存\"><a href=\"#直接内存\" class=\"headerlink\" title=\"直接内存\"></a>直接内存</h3><p>　　直接内存(Direct Memory)并不是虚拟机运行时数据区的一部分,也不是Java虚拟机规范中定义的内存区域.但是这部分内存也被频繁地使用,而且也可能导致<code>OutOfMemoryError</code>异常出现,所以我们放到这里一起讲解.在JDK 1.4中新加入了NIO(New Input/Output)类,引入了一种基于通道(Channel)与缓冲区(Buffer)的I/O方式,它可以使用Native函数库直接分配堆外内存,然后通过一个存储在Java堆中的DirectByteBuffer对象作为这块内存的引用进行操作.这样能在一些场景中显著提高性能,因为避免了在Java堆和Native堆中来回复制数据.显然,本机直接内存的分配不会受到Java堆大小的限制,但是,既然是内存,肯定还是会受到本机总内存(包括RAM以及SWAP区或者分页文件)大小以及处理器寻址空间的限制.服务器管理员在配置虚拟机参数时,会根据实际内存设置-Xmx等参数信息,但经常忽略直接内存,使得各个内存区域总和大于物理内存限制(包括物理的和操作系统级的限制),从而导致动态扩展时出现<code>OutOfMemoryError</code>异常.</p>\n<hr>\n<p>以上</p>"},{"title":"Jenkins安装与使用","date":"2017-06-28T09:30:42.000Z","keywords":"jenkins搭建","_content":"公司需求，业务越来越多，服务器越来越多，后台部署项目麻烦的要死，于是上了`jenkins`这货。\n关于这货是干嘛的，请移步这里[https://jenkins.io/](https://jenkins.io/),下载请移步这里[https://jenkins.io/download/](https://jenkins.io/download/)\n安装环境：ubuntu 16.04、tomcat7(这个是因为Jenkins是个war包)、maven(这个是因为后台的项目是maven工程)、jdk8(这个是因为需要tomcat)、gradle(构建Android工程)、SDK(构建Android工程)\n<!--more-->\n#### Jenkins 环境\n安装JDK、Tomcat、MAVEN(如有需要)、gradle(构建Android工程)、SDK(构建Android工程)\n#### 安装Jenkins\n在上面的下载地址下载war，丢到tomcat的webapps文件夹下，然后启动tomcat，浏览器访问jenkin工程`127.0.0.1:8080/jenkins`如下图所示：\n![jenkins首次启动](/image/jenkins/jenkins_start.png)\n打开红字提示的文件，里面是首次进入时需要的密码,点击右下角continue。\n##### jenkins安装插件\n可以自定义也可以安装推荐的插件，我这里安装的是建议的插件.稍等一会，插件安装完成后会自动跳转到创建jenkins用户的界面\n##### 创建jenkins用户\n按照提示创建即可，点击右下角`Save and finish`\n##### 配置Jenkins\n以后再次访问jenkins的时候就不用再去使用初始密码，只需要使用上一步创建的账号即可，登录后首界面如下，\n![jenkins首页](/image/jenkins/jenkins_index.png)\n点击左侧的`系统管理`，在中间列出的工具里面点击`Global Tool Configuration`，指定JDK和MAVEN的路径，如下\n![jenkins配置JDK](/image/jenkins/jenkins_jdk.png)\n![jenkins配置MAVEN](/image/jenkins/jenkins_maven.png)\n然后Save保存\n#### 创建一个新的Maven工程\n点击左侧菜单栏`新建`,输入工程名字，然后选择`构建一个只有风格的软件项目`,然后`ok`\n![jenkins创建新工程](/image/jenkins/jenkins_create_new_project.png)\n#### 配置工程\n在新的界面可以配置项目的构建、源码管理等\n我的工程是存放在git上面的，所以就选择git\n![jenkins源码管理](/image/jenkins/jenkins_config_project.png)\n构建触发器可以配置在什么时间配置，我们暂时没有，需要手动点击构建才行\n构建环境没有配置\n构建一项选择 `Invoke top-level Maven target`,当然根据需求可以选择其他构建方式\n`Maven Version`是上面配置maven时选择的别名，`Goals`是需要执行的maven命令(前面不需要加maven)\n![jenkins构建项目](/image/jenkins/jenkins_project_build.png)\n点击左下角保存\n#### 开始构建\n点击左侧的立即构建，可以在构建历史中查看原来构建的个过程\n![jenkins构建](/image/jenkins/jenkins_start_build_project.png)\n点击构建历史列表里面对应构建历史的小圆点，可以查看控制台输出\n![jenkins构建历史](/image/jenkins/jenkins_build_history.png)\n![jenkins](/image/jenkins/jenkins_build_console_output.png)\nps：如果是普通用户启动的tomcat，使用git管理源码，则下载下来的工程源码在`/home/username/.jenkins/workspace`，如果是root用户，则在 `/root/.jenkins/workspace`下\npps:据说`jenkins`的包不需要tomcat也可以，执行`java -jar ***.war`即可","source":"_posts/Jenkins安装与使用.md","raw":"---\ntitle: Jenkins安装与使用\ndate: 2017-06-28 17:30:42\ntags: [jenkins,运维]\nkeywords: jenkins搭建\n---\n公司需求，业务越来越多，服务器越来越多，后台部署项目麻烦的要死，于是上了`jenkins`这货。\n关于这货是干嘛的，请移步这里[https://jenkins.io/](https://jenkins.io/),下载请移步这里[https://jenkins.io/download/](https://jenkins.io/download/)\n安装环境：ubuntu 16.04、tomcat7(这个是因为Jenkins是个war包)、maven(这个是因为后台的项目是maven工程)、jdk8(这个是因为需要tomcat)、gradle(构建Android工程)、SDK(构建Android工程)\n<!--more-->\n#### Jenkins 环境\n安装JDK、Tomcat、MAVEN(如有需要)、gradle(构建Android工程)、SDK(构建Android工程)\n#### 安装Jenkins\n在上面的下载地址下载war，丢到tomcat的webapps文件夹下，然后启动tomcat，浏览器访问jenkin工程`127.0.0.1:8080/jenkins`如下图所示：\n![jenkins首次启动](/image/jenkins/jenkins_start.png)\n打开红字提示的文件，里面是首次进入时需要的密码,点击右下角continue。\n##### jenkins安装插件\n可以自定义也可以安装推荐的插件，我这里安装的是建议的插件.稍等一会，插件安装完成后会自动跳转到创建jenkins用户的界面\n##### 创建jenkins用户\n按照提示创建即可，点击右下角`Save and finish`\n##### 配置Jenkins\n以后再次访问jenkins的时候就不用再去使用初始密码，只需要使用上一步创建的账号即可，登录后首界面如下，\n![jenkins首页](/image/jenkins/jenkins_index.png)\n点击左侧的`系统管理`，在中间列出的工具里面点击`Global Tool Configuration`，指定JDK和MAVEN的路径，如下\n![jenkins配置JDK](/image/jenkins/jenkins_jdk.png)\n![jenkins配置MAVEN](/image/jenkins/jenkins_maven.png)\n然后Save保存\n#### 创建一个新的Maven工程\n点击左侧菜单栏`新建`,输入工程名字，然后选择`构建一个只有风格的软件项目`,然后`ok`\n![jenkins创建新工程](/image/jenkins/jenkins_create_new_project.png)\n#### 配置工程\n在新的界面可以配置项目的构建、源码管理等\n我的工程是存放在git上面的，所以就选择git\n![jenkins源码管理](/image/jenkins/jenkins_config_project.png)\n构建触发器可以配置在什么时间配置，我们暂时没有，需要手动点击构建才行\n构建环境没有配置\n构建一项选择 `Invoke top-level Maven target`,当然根据需求可以选择其他构建方式\n`Maven Version`是上面配置maven时选择的别名，`Goals`是需要执行的maven命令(前面不需要加maven)\n![jenkins构建项目](/image/jenkins/jenkins_project_build.png)\n点击左下角保存\n#### 开始构建\n点击左侧的立即构建，可以在构建历史中查看原来构建的个过程\n![jenkins构建](/image/jenkins/jenkins_start_build_project.png)\n点击构建历史列表里面对应构建历史的小圆点，可以查看控制台输出\n![jenkins构建历史](/image/jenkins/jenkins_build_history.png)\n![jenkins](/image/jenkins/jenkins_build_console_output.png)\nps：如果是普通用户启动的tomcat，使用git管理源码，则下载下来的工程源码在`/home/username/.jenkins/workspace`，如果是root用户，则在 `/root/.jenkins/workspace`下\npps:据说`jenkins`的包不需要tomcat也可以，执行`java -jar ***.war`即可","slug":"Jenkins安装与使用","published":1,"updated":"2018-08-04T04:56:29.398Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjl3vbtqz001iisdg0zb6hvun","content":"<p>公司需求，业务越来越多，服务器越来越多，后台部署项目麻烦的要死，于是上了<code>jenkins</code>这货。<br>关于这货是干嘛的，请移步这里<a href=\"https://jenkins.io/\" target=\"_blank\" rel=\"external\">https://jenkins.io/</a>,下载请移步这里<a href=\"https://jenkins.io/download/\" target=\"_blank\" rel=\"external\">https://jenkins.io/download/</a><br>安装环境：ubuntu 16.04、tomcat7(这个是因为Jenkins是个war包)、maven(这个是因为后台的项目是maven工程)、jdk8(这个是因为需要tomcat)、gradle(构建Android工程)、SDK(构建Android工程)<br><a id=\"more\"></a></p>\n<h4 id=\"Jenkins-环境\"><a href=\"#Jenkins-环境\" class=\"headerlink\" title=\"Jenkins 环境\"></a>Jenkins 环境</h4><p>安装JDK、Tomcat、MAVEN(如有需要)、gradle(构建Android工程)、SDK(构建Android工程)</p>\n<h4 id=\"安装Jenkins\"><a href=\"#安装Jenkins\" class=\"headerlink\" title=\"安装Jenkins\"></a>安装Jenkins</h4><p>在上面的下载地址下载war，丢到tomcat的webapps文件夹下，然后启动tomcat，浏览器访问jenkin工程<code>127.0.0.1:8080/jenkins</code>如下图所示：<br><img src=\"/image/jenkins/jenkins_start.png\" alt=\"jenkins首次启动\"><br>打开红字提示的文件，里面是首次进入时需要的密码,点击右下角continue。</p>\n<h5 id=\"jenkins安装插件\"><a href=\"#jenkins安装插件\" class=\"headerlink\" title=\"jenkins安装插件\"></a>jenkins安装插件</h5><p>可以自定义也可以安装推荐的插件，我这里安装的是建议的插件.稍等一会，插件安装完成后会自动跳转到创建jenkins用户的界面</p>\n<h5 id=\"创建jenkins用户\"><a href=\"#创建jenkins用户\" class=\"headerlink\" title=\"创建jenkins用户\"></a>创建jenkins用户</h5><p>按照提示创建即可，点击右下角<code>Save and finish</code></p>\n<h5 id=\"配置Jenkins\"><a href=\"#配置Jenkins\" class=\"headerlink\" title=\"配置Jenkins\"></a>配置Jenkins</h5><p>以后再次访问jenkins的时候就不用再去使用初始密码，只需要使用上一步创建的账号即可，登录后首界面如下，<br><img src=\"/image/jenkins/jenkins_index.png\" alt=\"jenkins首页\"><br>点击左侧的<code>系统管理</code>，在中间列出的工具里面点击<code>Global Tool Configuration</code>，指定JDK和MAVEN的路径，如下<br><img src=\"/image/jenkins/jenkins_jdk.png\" alt=\"jenkins配置JDK\"><br><img src=\"/image/jenkins/jenkins_maven.png\" alt=\"jenkins配置MAVEN\"><br>然后Save保存</p>\n<h4 id=\"创建一个新的Maven工程\"><a href=\"#创建一个新的Maven工程\" class=\"headerlink\" title=\"创建一个新的Maven工程\"></a>创建一个新的Maven工程</h4><p>点击左侧菜单栏<code>新建</code>,输入工程名字，然后选择<code>构建一个只有风格的软件项目</code>,然后<code>ok</code><br><img src=\"/image/jenkins/jenkins_create_new_project.png\" alt=\"jenkins创建新工程\"></p>\n<h4 id=\"配置工程\"><a href=\"#配置工程\" class=\"headerlink\" title=\"配置工程\"></a>配置工程</h4><p>在新的界面可以配置项目的构建、源码管理等<br>我的工程是存放在git上面的，所以就选择git<br><img src=\"/image/jenkins/jenkins_config_project.png\" alt=\"jenkins源码管理\"><br>构建触发器可以配置在什么时间配置，我们暂时没有，需要手动点击构建才行<br>构建环境没有配置<br>构建一项选择 <code>Invoke top-level Maven target</code>,当然根据需求可以选择其他构建方式<br><code>Maven Version</code>是上面配置maven时选择的别名，<code>Goals</code>是需要执行的maven命令(前面不需要加maven)<br><img src=\"/image/jenkins/jenkins_project_build.png\" alt=\"jenkins构建项目\"><br>点击左下角保存</p>\n<h4 id=\"开始构建\"><a href=\"#开始构建\" class=\"headerlink\" title=\"开始构建\"></a>开始构建</h4><p>点击左侧的立即构建，可以在构建历史中查看原来构建的个过程<br><img src=\"/image/jenkins/jenkins_start_build_project.png\" alt=\"jenkins构建\"><br>点击构建历史列表里面对应构建历史的小圆点，可以查看控制台输出<br><img src=\"/image/jenkins/jenkins_build_history.png\" alt=\"jenkins构建历史\"><br><img src=\"/image/jenkins/jenkins_build_console_output.png\" alt=\"jenkins\"><br>ps：如果是普通用户启动的tomcat，使用git管理源码，则下载下来的工程源码在<code>/home/username/.jenkins/workspace</code>，如果是root用户，则在 <code>/root/.jenkins/workspace</code>下<br>pps:据说<code>jenkins</code>的包不需要tomcat也可以，执行<code>java -jar ***.war</code>即可</p>\n","excerpt":"<p>公司需求，业务越来越多，服务器越来越多，后台部署项目麻烦的要死，于是上了<code>jenkins</code>这货。<br>关于这货是干嘛的，请移步这里<a href=\"https://jenkins.io/\">https://jenkins.io/</a>,下载请移步这里<a href=\"https://jenkins.io/download/\">https://jenkins.io/download/</a><br>安装环境：ubuntu 16.04、tomcat7(这个是因为Jenkins是个war包)、maven(这个是因为后台的项目是maven工程)、jdk8(这个是因为需要tomcat)、gradle(构建Android工程)、SDK(构建Android工程)<br>","more":"</p>\n<h4 id=\"Jenkins-环境\"><a href=\"#Jenkins-环境\" class=\"headerlink\" title=\"Jenkins 环境\"></a>Jenkins 环境</h4><p>安装JDK、Tomcat、MAVEN(如有需要)、gradle(构建Android工程)、SDK(构建Android工程)</p>\n<h4 id=\"安装Jenkins\"><a href=\"#安装Jenkins\" class=\"headerlink\" title=\"安装Jenkins\"></a>安装Jenkins</h4><p>在上面的下载地址下载war，丢到tomcat的webapps文件夹下，然后启动tomcat，浏览器访问jenkin工程<code>127.0.0.1:8080/jenkins</code>如下图所示：<br><img src=\"/image/jenkins/jenkins_start.png\" alt=\"jenkins首次启动\"><br>打开红字提示的文件，里面是首次进入时需要的密码,点击右下角continue。</p>\n<h5 id=\"jenkins安装插件\"><a href=\"#jenkins安装插件\" class=\"headerlink\" title=\"jenkins安装插件\"></a>jenkins安装插件</h5><p>可以自定义也可以安装推荐的插件，我这里安装的是建议的插件.稍等一会，插件安装完成后会自动跳转到创建jenkins用户的界面</p>\n<h5 id=\"创建jenkins用户\"><a href=\"#创建jenkins用户\" class=\"headerlink\" title=\"创建jenkins用户\"></a>创建jenkins用户</h5><p>按照提示创建即可，点击右下角<code>Save and finish</code></p>\n<h5 id=\"配置Jenkins\"><a href=\"#配置Jenkins\" class=\"headerlink\" title=\"配置Jenkins\"></a>配置Jenkins</h5><p>以后再次访问jenkins的时候就不用再去使用初始密码，只需要使用上一步创建的账号即可，登录后首界面如下，<br><img src=\"/image/jenkins/jenkins_index.png\" alt=\"jenkins首页\"><br>点击左侧的<code>系统管理</code>，在中间列出的工具里面点击<code>Global Tool Configuration</code>，指定JDK和MAVEN的路径，如下<br><img src=\"/image/jenkins/jenkins_jdk.png\" alt=\"jenkins配置JDK\"><br><img src=\"/image/jenkins/jenkins_maven.png\" alt=\"jenkins配置MAVEN\"><br>然后Save保存</p>\n<h4 id=\"创建一个新的Maven工程\"><a href=\"#创建一个新的Maven工程\" class=\"headerlink\" title=\"创建一个新的Maven工程\"></a>创建一个新的Maven工程</h4><p>点击左侧菜单栏<code>新建</code>,输入工程名字，然后选择<code>构建一个只有风格的软件项目</code>,然后<code>ok</code><br><img src=\"/image/jenkins/jenkins_create_new_project.png\" alt=\"jenkins创建新工程\"></p>\n<h4 id=\"配置工程\"><a href=\"#配置工程\" class=\"headerlink\" title=\"配置工程\"></a>配置工程</h4><p>在新的界面可以配置项目的构建、源码管理等<br>我的工程是存放在git上面的，所以就选择git<br><img src=\"/image/jenkins/jenkins_config_project.png\" alt=\"jenkins源码管理\"><br>构建触发器可以配置在什么时间配置，我们暂时没有，需要手动点击构建才行<br>构建环境没有配置<br>构建一项选择 <code>Invoke top-level Maven target</code>,当然根据需求可以选择其他构建方式<br><code>Maven Version</code>是上面配置maven时选择的别名，<code>Goals</code>是需要执行的maven命令(前面不需要加maven)<br><img src=\"/image/jenkins/jenkins_project_build.png\" alt=\"jenkins构建项目\"><br>点击左下角保存</p>\n<h4 id=\"开始构建\"><a href=\"#开始构建\" class=\"headerlink\" title=\"开始构建\"></a>开始构建</h4><p>点击左侧的立即构建，可以在构建历史中查看原来构建的个过程<br><img src=\"/image/jenkins/jenkins_start_build_project.png\" alt=\"jenkins构建\"><br>点击构建历史列表里面对应构建历史的小圆点，可以查看控制台输出<br><img src=\"/image/jenkins/jenkins_build_history.png\" alt=\"jenkins构建历史\"><br><img src=\"/image/jenkins/jenkins_build_console_output.png\" alt=\"jenkins\"><br>ps：如果是普通用户启动的tomcat，使用git管理源码，则下载下来的工程源码在<code>/home/username/.jenkins/workspace</code>，如果是root用户，则在 <code>/root/.jenkins/workspace</code>下<br>pps:据说<code>jenkins</code>的包不需要tomcat也可以，执行<code>java -jar ***.war</code>即可</p>"},{"title":"LaTeX笔记(三)(杂)","date":"2018-02-11T08:25:02.000Z","keywords":"LaTeX","_content":"前两篇笔记记录下了写一篇小文章所需要的东西，这一片就记录下一些零零散散的东西，计算机专业的嘛，只关心中文和英文，像什么德语、法语之类的东西就不在考虑范围内了，用的时候再去查也是可以的。\n<!--more-->\n##### 标点\n* 在LaTeX中遇到单引号与双引号连续出现的情形，在中间使用`\\,`命令分开：\n``` tex\n``\\,`A' or `B'\\,'' he asked.\n``It's Knuth's book。'', he said。\n```\n这里`\\,`命令产生很小的间距，但是LaTex并不会忽略以符号命名的宏前后的空格，所以在它的前后都不要加多余的空格。符号`'`同时也是表示所有格和省字的撇好。\n* 除了在数学模式中表示减号，符号`-`在LaTeX正文中也有多种用途：单独使用它是连字符(hyphen);两个连用`--`是en dash,用来表示数字范围;三个连用`---`是 em dash，即破折号。不过在中文书写中，表示数学范围也常使用符号`~`(数学模式的符号$\\sim$)。\n* 西文的省略号(ellipsis)使用`\\ldots`或`\\dots`命令产生，相比直接输入三个句号，拉开的间距要合理的多。\n#### 水平间距\n在正文中可以使用下面的命令表示不可换行的水平间距\n不可换行的水平间距\n\n|命令|间距|\n|:----:|:----:|\n|`\\thinspace` 或`\\,` | 0.1667em|\n|`\\negthinspace` 或`\\!` | -0.1667em|\n|`\\enspace` | 0.5em|\n|`\\nobreakspace` 或`~` | 空格|\n\n可换行的水平间距\n\n|命令|间距|\n|:----:|:----:|\n|`\\quad` | 1em|\n|`\\qquad` 或`\\!` | 2em|\n|`\\enskip` | 0.5em|\n|`\\空格` | 空格|\n\n当上面的命令中没有合适的距离时，可以用`\\hspace{距离}`命令来产生指定的水平间距(这里的`\\,`用来分隔数字和单位)\n``` tex\nSpace\\hspace{1cm}1\\,cm\n```\n`\\hspace`命令产生的距离是可断行的，但是在某些情况下(强制断行的行首)，改命令产生的距离会被忽略，此时可以用带星号的命令`\\hspace*{距离}`阻止距离被忽略。\n#### 盒子\n盒子(box)是TeX中的基本处理单位。\n最简单的命令是`\\mbox{内容}`,它产生一个格子，内容以左右模式排列，可以用它表示不允许断行的内容。\n`\\makebox`与`\\mbox`类似，但可以带两个可选参数，指定盒子的宽度和对齐方式：\n`\\makebox[<宽度>][<位置>]{<内容>}`\n对齐参数可以取c(居中)、l、r、s(分散),默认居中。\n`\\fbox` 和 `\\framebox`产生带边框的盒子，语法和`\\mbox`、`\\makebox`类似\n#### 列表环境\n列表是常用的文本格式，LaTeX标准文档类提供了三种列表环境：带编号的`enumerate`环境、不编号的`itemize`环境和使用关键字的`description`环境。在列表内部使用`\\item`命令开始一个列表项，它可以带一个可选参数表示手动编号或关键字\n``` tex\n\\begin{enumerate}\n\\item 中文\n\\item English\n\\end{enumerate}\n\n\\begin{itemize}\n\\item 中文\n\\item English\n\\end{itemize}\n```\ndescription环境总是使用`\\item`命令的可选参数，把它作为条目的关键字加粗。\n``` tex\n\\begin{description}\n\\item[中文] 中文\n\\item[英文] English\n\\end{description}\n```\n上面三种列表环境可以嵌套使用(最多四层)\n#### 抄录和代码环境\n`\\verb`命令可用来表示杭温中的抄录，语法格式如下：\n`\\verb<符号><抄录内容><符号>`\n在`\\verb`后，两个符号相同，表示起始符号和末尾符号，两个符号之间的内容会原样输出。\n使用带星号的命令`\\verb*`则可以使输出的空格为可见的。\n大段的抄录可以使用`verbatim`环境：\n``` tex\n\\begin{verbatim}\n#! user/bin /env perl\n$name = ''guy'';\nprint ''Hello,$name!\\n''\n\\end{verbatim}\n```\n同样可以使用带星号的`verbatim*`环境输出可见空格。\n如果想在程序代码中增加语法高亮功能，可以使用**listings**宏包\n``` tex\n\\begin{lstlisting}[language=java]\nclass Test{\n\tpublic static void main(String ... args){\n\t\tSystem.out.println(''Hello Java'');\n\t}\n}\n\\end{lstlisting}\n```\n----\n\n以上\n","source":"_posts/LaTeX笔记-三.md","raw":"---\ntitle: LaTeX笔记(三)(杂)\ndate: 2018-02-11 16:25:02\ntags: [LaTeX]\nkeywords: LaTeX\n---\n前两篇笔记记录下了写一篇小文章所需要的东西，这一片就记录下一些零零散散的东西，计算机专业的嘛，只关心中文和英文，像什么德语、法语之类的东西就不在考虑范围内了，用的时候再去查也是可以的。\n<!--more-->\n##### 标点\n* 在LaTeX中遇到单引号与双引号连续出现的情形，在中间使用`\\,`命令分开：\n``` tex\n``\\,`A' or `B'\\,'' he asked.\n``It's Knuth's book。'', he said。\n```\n这里`\\,`命令产生很小的间距，但是LaTex并不会忽略以符号命名的宏前后的空格，所以在它的前后都不要加多余的空格。符号`'`同时也是表示所有格和省字的撇好。\n* 除了在数学模式中表示减号，符号`-`在LaTeX正文中也有多种用途：单独使用它是连字符(hyphen);两个连用`--`是en dash,用来表示数字范围;三个连用`---`是 em dash，即破折号。不过在中文书写中，表示数学范围也常使用符号`~`(数学模式的符号$\\sim$)。\n* 西文的省略号(ellipsis)使用`\\ldots`或`\\dots`命令产生，相比直接输入三个句号，拉开的间距要合理的多。\n#### 水平间距\n在正文中可以使用下面的命令表示不可换行的水平间距\n不可换行的水平间距\n\n|命令|间距|\n|:----:|:----:|\n|`\\thinspace` 或`\\,` | 0.1667em|\n|`\\negthinspace` 或`\\!` | -0.1667em|\n|`\\enspace` | 0.5em|\n|`\\nobreakspace` 或`~` | 空格|\n\n可换行的水平间距\n\n|命令|间距|\n|:----:|:----:|\n|`\\quad` | 1em|\n|`\\qquad` 或`\\!` | 2em|\n|`\\enskip` | 0.5em|\n|`\\空格` | 空格|\n\n当上面的命令中没有合适的距离时，可以用`\\hspace{距离}`命令来产生指定的水平间距(这里的`\\,`用来分隔数字和单位)\n``` tex\nSpace\\hspace{1cm}1\\,cm\n```\n`\\hspace`命令产生的距离是可断行的，但是在某些情况下(强制断行的行首)，改命令产生的距离会被忽略，此时可以用带星号的命令`\\hspace*{距离}`阻止距离被忽略。\n#### 盒子\n盒子(box)是TeX中的基本处理单位。\n最简单的命令是`\\mbox{内容}`,它产生一个格子，内容以左右模式排列，可以用它表示不允许断行的内容。\n`\\makebox`与`\\mbox`类似，但可以带两个可选参数，指定盒子的宽度和对齐方式：\n`\\makebox[<宽度>][<位置>]{<内容>}`\n对齐参数可以取c(居中)、l、r、s(分散),默认居中。\n`\\fbox` 和 `\\framebox`产生带边框的盒子，语法和`\\mbox`、`\\makebox`类似\n#### 列表环境\n列表是常用的文本格式，LaTeX标准文档类提供了三种列表环境：带编号的`enumerate`环境、不编号的`itemize`环境和使用关键字的`description`环境。在列表内部使用`\\item`命令开始一个列表项，它可以带一个可选参数表示手动编号或关键字\n``` tex\n\\begin{enumerate}\n\\item 中文\n\\item English\n\\end{enumerate}\n\n\\begin{itemize}\n\\item 中文\n\\item English\n\\end{itemize}\n```\ndescription环境总是使用`\\item`命令的可选参数，把它作为条目的关键字加粗。\n``` tex\n\\begin{description}\n\\item[中文] 中文\n\\item[英文] English\n\\end{description}\n```\n上面三种列表环境可以嵌套使用(最多四层)\n#### 抄录和代码环境\n`\\verb`命令可用来表示杭温中的抄录，语法格式如下：\n`\\verb<符号><抄录内容><符号>`\n在`\\verb`后，两个符号相同，表示起始符号和末尾符号，两个符号之间的内容会原样输出。\n使用带星号的命令`\\verb*`则可以使输出的空格为可见的。\n大段的抄录可以使用`verbatim`环境：\n``` tex\n\\begin{verbatim}\n#! user/bin /env perl\n$name = ''guy'';\nprint ''Hello,$name!\\n''\n\\end{verbatim}\n```\n同样可以使用带星号的`verbatim*`环境输出可见空格。\n如果想在程序代码中增加语法高亮功能，可以使用**listings**宏包\n``` tex\n\\begin{lstlisting}[language=java]\nclass Test{\n\tpublic static void main(String ... args){\n\t\tSystem.out.println(''Hello Java'');\n\t}\n}\n\\end{lstlisting}\n```\n----\n\n以上\n","slug":"LaTeX笔记-三","published":1,"updated":"2018-08-04T05:15:11.870Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjl3vbtr0001kisdgwkm6np88","content":"<p>前两篇笔记记录下了写一篇小文章所需要的东西，这一片就记录下一些零零散散的东西，计算机专业的嘛，只关心中文和英文，像什么德语、法语之类的东西就不在考虑范围内了，用的时候再去查也是可以的。<br><a id=\"more\"></a></p>\n<h5 id=\"标点\"><a href=\"#标点\" class=\"headerlink\" title=\"标点\"></a>标点</h5><ul>\n<li>在LaTeX中遇到单引号与双引号连续出现的情形，在中间使用<code>\\,</code>命令分开：<figure class=\"highlight tex\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">``<span class=\"tag\">\\<span class=\"name\">,</span></span>`A' or `B'<span class=\"tag\">\\<span class=\"name\">,</span></span>'' he asked.</div><div class=\"line\">``It's Knuth's book。'', he said。</div></pre></td></tr></table></figure>\n</li>\n</ul>\n<p>这里<code>\\,</code>命令产生很小的间距，但是LaTex并不会忽略以符号命名的宏前后的空格，所以在它的前后都不要加多余的空格。符号<code>&#39;</code>同时也是表示所有格和省字的撇好。</p>\n<ul>\n<li>除了在数学模式中表示减号，符号<code>-</code>在LaTeX正文中也有多种用途：单独使用它是连字符(hyphen);两个连用<code>--</code>是en dash,用来表示数字范围;三个连用<code>---</code>是 em dash，即破折号。不过在中文书写中，表示数学范围也常使用符号<code>~</code>(数学模式的符号$\\sim$)。</li>\n<li>西文的省略号(ellipsis)使用<code>\\ldots</code>或<code>\\dots</code>命令产生，相比直接输入三个句号，拉开的间距要合理的多。<h4 id=\"水平间距\"><a href=\"#水平间距\" class=\"headerlink\" title=\"水平间距\"></a>水平间距</h4>在正文中可以使用下面的命令表示不可换行的水平间距<br>不可换行的水平间距</li>\n</ul>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:center\">命令</th>\n<th style=\"text-align:center\">间距</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\"><code>\\thinspace</code> 或<code>\\,</code></td>\n<td style=\"text-align:center\">0.1667em</td>\n</tr>\n<tr>\n<td style=\"text-align:center\"><code>\\negthinspace</code> 或<code>\\!</code></td>\n<td style=\"text-align:center\">-0.1667em</td>\n</tr>\n<tr>\n<td style=\"text-align:center\"><code>\\enspace</code></td>\n<td style=\"text-align:center\">0.5em</td>\n</tr>\n<tr>\n<td style=\"text-align:center\"><code>\\nobreakspace</code> 或<code>~</code></td>\n<td style=\"text-align:center\">空格</td>\n</tr>\n</tbody>\n</table>\n<p>可换行的水平间距</p>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:center\">命令</th>\n<th style=\"text-align:center\">间距</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\"><code>\\quad</code></td>\n<td style=\"text-align:center\">1em</td>\n</tr>\n<tr>\n<td style=\"text-align:center\"><code>\\qquad</code> 或<code>\\!</code></td>\n<td style=\"text-align:center\">2em</td>\n</tr>\n<tr>\n<td style=\"text-align:center\"><code>\\enskip</code></td>\n<td style=\"text-align:center\">0.5em</td>\n</tr>\n<tr>\n<td style=\"text-align:center\"><code>\\空格</code></td>\n<td style=\"text-align:center\">空格</td>\n</tr>\n</tbody>\n</table>\n<p>当上面的命令中没有合适的距离时，可以用<code>\\hspace{距离}</code>命令来产生指定的水平间距(这里的<code>\\,</code>用来分隔数字和单位)<br><figure class=\"highlight tex\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">Space<span class=\"tag\">\\<span class=\"name\">hspace</span><span class=\"string\">&#123;1cm&#125;</span></span>1<span class=\"tag\">\\<span class=\"name\">,</span></span>cm</div></pre></td></tr></table></figure></p>\n<p><code>\\hspace</code>命令产生的距离是可断行的，但是在某些情况下(强制断行的行首)，改命令产生的距离会被忽略，此时可以用带星号的命令<code>\\hspace*{距离}</code>阻止距离被忽略。</p>\n<h4 id=\"盒子\"><a href=\"#盒子\" class=\"headerlink\" title=\"盒子\"></a>盒子</h4><p>盒子(box)是TeX中的基本处理单位。<br>最简单的命令是<code>\\mbox{内容}</code>,它产生一个格子，内容以左右模式排列，可以用它表示不允许断行的内容。<br><code>\\makebox</code>与<code>\\mbox</code>类似，但可以带两个可选参数，指定盒子的宽度和对齐方式：<br><code>\\makebox[&lt;宽度&gt;][&lt;位置&gt;]{&lt;内容&gt;}</code><br>对齐参数可以取c(居中)、l、r、s(分散),默认居中。<br><code>\\fbox</code> 和 <code>\\framebox</code>产生带边框的盒子，语法和<code>\\mbox</code>、<code>\\makebox</code>类似</p>\n<h4 id=\"列表环境\"><a href=\"#列表环境\" class=\"headerlink\" title=\"列表环境\"></a>列表环境</h4><p>列表是常用的文本格式，LaTeX标准文档类提供了三种列表环境：带编号的<code>enumerate</code>环境、不编号的<code>itemize</code>环境和使用关键字的<code>description</code>环境。在列表内部使用<code>\\item</code>命令开始一个列表项，它可以带一个可选参数表示手动编号或关键字<br><figure class=\"highlight tex\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">\\<span class=\"name\">begin</span><span class=\"string\">&#123;enumerate&#125;</span></span></div><div class=\"line\"><span class=\"tag\">\\<span class=\"name\">item</span></span> 中文</div><div class=\"line\"><span class=\"tag\">\\<span class=\"name\">item</span></span> English</div><div class=\"line\"><span class=\"tag\">\\<span class=\"name\">end</span><span class=\"string\">&#123;enumerate&#125;</span></span></div><div class=\"line\"></div><div class=\"line\"><span class=\"tag\">\\<span class=\"name\">begin</span><span class=\"string\">&#123;itemize&#125;</span></span></div><div class=\"line\"><span class=\"tag\">\\<span class=\"name\">item</span></span> 中文</div><div class=\"line\"><span class=\"tag\">\\<span class=\"name\">item</span></span> English</div><div class=\"line\"><span class=\"tag\">\\<span class=\"name\">end</span><span class=\"string\">&#123;itemize&#125;</span></span></div></pre></td></tr></table></figure></p>\n<p>description环境总是使用<code>\\item</code>命令的可选参数，把它作为条目的关键字加粗。<br><figure class=\"highlight tex\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">\\<span class=\"name\">begin</span><span class=\"string\">&#123;description&#125;</span></span></div><div class=\"line\"><span class=\"tag\">\\<span class=\"name\">item</span><span class=\"string\">[中文]</span></span> 中文</div><div class=\"line\"><span class=\"tag\">\\<span class=\"name\">item</span><span class=\"string\">[英文]</span></span> English</div><div class=\"line\"><span class=\"tag\">\\<span class=\"name\">end</span><span class=\"string\">&#123;description&#125;</span></span></div></pre></td></tr></table></figure></p>\n<p>上面三种列表环境可以嵌套使用(最多四层)</p>\n<h4 id=\"抄录和代码环境\"><a href=\"#抄录和代码环境\" class=\"headerlink\" title=\"抄录和代码环境\"></a>抄录和代码环境</h4><p><code>\\verb</code>命令可用来表示杭温中的抄录，语法格式如下：<br><code>\\verb&lt;符号&gt;&lt;抄录内容&gt;&lt;符号&gt;</code><br>在<code>\\verb</code>后，两个符号相同，表示起始符号和末尾符号，两个符号之间的内容会原样输出。<br>使用带星号的命令<code>\\verb*</code>则可以使输出的空格为可见的。<br>大段的抄录可以使用<code>verbatim</code>环境：<br><figure class=\"highlight tex\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">\\<span class=\"name\">begin</span><span class=\"string\">&#123;verbatim&#125;</span></span></div><div class=\"line\">#! user/bin /env perl</div><div class=\"line\"><span class=\"formula\">$name = ''guy'';</span></div><div class=\"line\">print ''Hello,$name!<span class=\"tag\">\\<span class=\"name\">n</span></span>''</div><div class=\"line\"><span class=\"tag\">\\<span class=\"name\">end</span><span class=\"string\">&#123;verbatim&#125;</span></span></div></pre></td></tr></table></figure></p>\n<p>同样可以使用带星号的<code>verbatim*</code>环境输出可见空格。<br>如果想在程序代码中增加语法高亮功能，可以使用<strong>listings</strong>宏包<br><figure class=\"highlight tex\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">\\<span class=\"name\">begin</span><span class=\"string\">&#123;lstlisting&#125;</span><span class=\"string\">[language=java]</span></span></div><div class=\"line\">class Test&#123;</div><div class=\"line\">\tpublic static void main(String ... args)&#123;</div><div class=\"line\">\t\tSystem.out.println(''Hello Java'');</div><div class=\"line\">\t&#125;</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"tag\">\\<span class=\"name\">end</span><span class=\"string\">&#123;lstlisting&#125;</span></span></div></pre></td></tr></table></figure></p>\n<hr>\n<p>以上</p>\n","excerpt":"<p>前两篇笔记记录下了写一篇小文章所需要的东西，这一片就记录下一些零零散散的东西，计算机专业的嘛，只关心中文和英文，像什么德语、法语之类的东西就不在考虑范围内了，用的时候再去查也是可以的。<br>","more":"</p>\n<h5 id=\"标点\"><a href=\"#标点\" class=\"headerlink\" title=\"标点\"></a>标点</h5><ul>\n<li>在LaTeX中遇到单引号与双引号连续出现的情形，在中间使用<code>\\,</code>命令分开：<figure class=\"highlight tex\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">``<span class=\"tag\">\\<span class=\"name\">,</span></span>`A' or `B'<span class=\"tag\">\\<span class=\"name\">,</span></span>'' he asked.</div><div class=\"line\">``It's Knuth's book。'', he said。</div></pre></td></tr></table></figure>\n</li>\n</ul>\n<p>这里<code>\\,</code>命令产生很小的间距，但是LaTex并不会忽略以符号命名的宏前后的空格，所以在它的前后都不要加多余的空格。符号<code>&#39;</code>同时也是表示所有格和省字的撇好。</p>\n<ul>\n<li>除了在数学模式中表示减号，符号<code>-</code>在LaTeX正文中也有多种用途：单独使用它是连字符(hyphen);两个连用<code>--</code>是en dash,用来表示数字范围;三个连用<code>---</code>是 em dash，即破折号。不过在中文书写中，表示数学范围也常使用符号<code>~</code>(数学模式的符号$\\sim$)。</li>\n<li>西文的省略号(ellipsis)使用<code>\\ldots</code>或<code>\\dots</code>命令产生，相比直接输入三个句号，拉开的间距要合理的多。<h4 id=\"水平间距\"><a href=\"#水平间距\" class=\"headerlink\" title=\"水平间距\"></a>水平间距</h4>在正文中可以使用下面的命令表示不可换行的水平间距<br>不可换行的水平间距</li>\n</ul>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:center\">命令</th>\n<th style=\"text-align:center\">间距</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\"><code>\\thinspace</code> 或<code>\\,</code></td>\n<td style=\"text-align:center\">0.1667em</td>\n</tr>\n<tr>\n<td style=\"text-align:center\"><code>\\negthinspace</code> 或<code>\\!</code></td>\n<td style=\"text-align:center\">-0.1667em</td>\n</tr>\n<tr>\n<td style=\"text-align:center\"><code>\\enspace</code></td>\n<td style=\"text-align:center\">0.5em</td>\n</tr>\n<tr>\n<td style=\"text-align:center\"><code>\\nobreakspace</code> 或<code>~</code></td>\n<td style=\"text-align:center\">空格</td>\n</tr>\n</tbody>\n</table>\n<p>可换行的水平间距</p>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:center\">命令</th>\n<th style=\"text-align:center\">间距</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\"><code>\\quad</code></td>\n<td style=\"text-align:center\">1em</td>\n</tr>\n<tr>\n<td style=\"text-align:center\"><code>\\qquad</code> 或<code>\\!</code></td>\n<td style=\"text-align:center\">2em</td>\n</tr>\n<tr>\n<td style=\"text-align:center\"><code>\\enskip</code></td>\n<td style=\"text-align:center\">0.5em</td>\n</tr>\n<tr>\n<td style=\"text-align:center\"><code>\\空格</code></td>\n<td style=\"text-align:center\">空格</td>\n</tr>\n</tbody>\n</table>\n<p>当上面的命令中没有合适的距离时，可以用<code>\\hspace{距离}</code>命令来产生指定的水平间距(这里的<code>\\,</code>用来分隔数字和单位)<br><figure class=\"highlight tex\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">Space<span class=\"tag\">\\<span class=\"name\">hspace</span><span class=\"string\">&#123;1cm&#125;</span></span>1<span class=\"tag\">\\<span class=\"name\">,</span></span>cm</div></pre></td></tr></table></figure></p>\n<p><code>\\hspace</code>命令产生的距离是可断行的，但是在某些情况下(强制断行的行首)，改命令产生的距离会被忽略，此时可以用带星号的命令<code>\\hspace*{距离}</code>阻止距离被忽略。</p>\n<h4 id=\"盒子\"><a href=\"#盒子\" class=\"headerlink\" title=\"盒子\"></a>盒子</h4><p>盒子(box)是TeX中的基本处理单位。<br>最简单的命令是<code>\\mbox{内容}</code>,它产生一个格子，内容以左右模式排列，可以用它表示不允许断行的内容。<br><code>\\makebox</code>与<code>\\mbox</code>类似，但可以带两个可选参数，指定盒子的宽度和对齐方式：<br><code>\\makebox[&lt;宽度&gt;][&lt;位置&gt;]{&lt;内容&gt;}</code><br>对齐参数可以取c(居中)、l、r、s(分散),默认居中。<br><code>\\fbox</code> 和 <code>\\framebox</code>产生带边框的盒子，语法和<code>\\mbox</code>、<code>\\makebox</code>类似</p>\n<h4 id=\"列表环境\"><a href=\"#列表环境\" class=\"headerlink\" title=\"列表环境\"></a>列表环境</h4><p>列表是常用的文本格式，LaTeX标准文档类提供了三种列表环境：带编号的<code>enumerate</code>环境、不编号的<code>itemize</code>环境和使用关键字的<code>description</code>环境。在列表内部使用<code>\\item</code>命令开始一个列表项，它可以带一个可选参数表示手动编号或关键字<br><figure class=\"highlight tex\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">\\<span class=\"name\">begin</span><span class=\"string\">&#123;enumerate&#125;</span></span></div><div class=\"line\"><span class=\"tag\">\\<span class=\"name\">item</span></span> 中文</div><div class=\"line\"><span class=\"tag\">\\<span class=\"name\">item</span></span> English</div><div class=\"line\"><span class=\"tag\">\\<span class=\"name\">end</span><span class=\"string\">&#123;enumerate&#125;</span></span></div><div class=\"line\"></div><div class=\"line\"><span class=\"tag\">\\<span class=\"name\">begin</span><span class=\"string\">&#123;itemize&#125;</span></span></div><div class=\"line\"><span class=\"tag\">\\<span class=\"name\">item</span></span> 中文</div><div class=\"line\"><span class=\"tag\">\\<span class=\"name\">item</span></span> English</div><div class=\"line\"><span class=\"tag\">\\<span class=\"name\">end</span><span class=\"string\">&#123;itemize&#125;</span></span></div></pre></td></tr></table></figure></p>\n<p>description环境总是使用<code>\\item</code>命令的可选参数，把它作为条目的关键字加粗。<br><figure class=\"highlight tex\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">\\<span class=\"name\">begin</span><span class=\"string\">&#123;description&#125;</span></span></div><div class=\"line\"><span class=\"tag\">\\<span class=\"name\">item</span><span class=\"string\">[中文]</span></span> 中文</div><div class=\"line\"><span class=\"tag\">\\<span class=\"name\">item</span><span class=\"string\">[英文]</span></span> English</div><div class=\"line\"><span class=\"tag\">\\<span class=\"name\">end</span><span class=\"string\">&#123;description&#125;</span></span></div></pre></td></tr></table></figure></p>\n<p>上面三种列表环境可以嵌套使用(最多四层)</p>\n<h4 id=\"抄录和代码环境\"><a href=\"#抄录和代码环境\" class=\"headerlink\" title=\"抄录和代码环境\"></a>抄录和代码环境</h4><p><code>\\verb</code>命令可用来表示杭温中的抄录，语法格式如下：<br><code>\\verb&lt;符号&gt;&lt;抄录内容&gt;&lt;符号&gt;</code><br>在<code>\\verb</code>后，两个符号相同，表示起始符号和末尾符号，两个符号之间的内容会原样输出。<br>使用带星号的命令<code>\\verb*</code>则可以使输出的空格为可见的。<br>大段的抄录可以使用<code>verbatim</code>环境：<br><figure class=\"highlight tex\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">\\<span class=\"name\">begin</span><span class=\"string\">&#123;verbatim&#125;</span></span></div><div class=\"line\">#! user/bin /env perl</div><div class=\"line\"><span class=\"formula\">$name = ''guy'';</div><div class=\"line\">print ''Hello,$</span>name!<span class=\"tag\">\\<span class=\"name\">n</span></span>''</div><div class=\"line\"><span class=\"tag\">\\<span class=\"name\">end</span><span class=\"string\">&#123;verbatim&#125;</span></span></div></pre></td></tr></table></figure></p>\n<p>同样可以使用带星号的<code>verbatim*</code>环境输出可见空格。<br>如果想在程序代码中增加语法高亮功能，可以使用<strong>listings</strong>宏包<br><figure class=\"highlight tex\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">\\<span class=\"name\">begin</span><span class=\"string\">&#123;lstlisting&#125;</span><span class=\"string\">[language=java]</span></span></div><div class=\"line\">class Test&#123;</div><div class=\"line\">\tpublic static void main(String ... args)&#123;</div><div class=\"line\">\t\tSystem.out.println(''Hello Java'');</div><div class=\"line\">\t&#125;</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"tag\">\\<span class=\"name\">end</span><span class=\"string\">&#123;lstlisting&#125;</span></span></div></pre></td></tr></table></figure></p>\n<hr>\n<p>以上</p>"},{"title":"LaTeX笔记(二)(开篇)","date":"2018-01-27T14:59:42.000Z","keywords":"LaTeX","_content":"接上篇，写好的tex文件在这 https://github.com/huangyuanlove/latex_practice/blob/master/latex(1)/chapter_one.tex\n##### 写个框架\n既然有目标了，我们先写个大概的框架，然后往里面填充内容\n``` tex \n% coding:UTF-8\n\n\n\\documentclass[UTF8]{ctexart}\n\n\\title{杂谈勾股定理}\n\\author{xuan}\n\\date{\\today}\n\n\\bibliographystyle{plain}\n\n\\begin{document}\n\n\\maketitle\n\\tableofcontents\n\\section{勾股定理在古代}\n\\section{勾股定理的近代形式}\n\\bibliography{math}\n\n\\end{document}\n```\n<!--more-->\n* 以 `%`开头的行是注释，源文件一行中百分号后面的内容都会被忽略。\n* 第**4**行是文档类，因为是中文的短文，所以用的是`ctexart`，并用[UTF8]选项说明编码方式。\n* 第**6-8**行声明了文章的标题、作者、日期。其中的`\\today`是当前日期。但是这些信息是通过**14**行的`\\maketitle`排版的。\n* 第**10**行的`\\bibliographystyle`声明参考文献的格式。\n以上在`\\begin{document}`之前的部分称为`导言区(preamble)`，导言区通常用来对文档的性质做一些设置，或自定义一些命令。\n* 第**12-20**行以`\\begin{document}`和`\\end{socument}`声明了一个document环境，里面是论文的正文部分，也就是直接输出的部分。\n* 第**14**行的`\\maketitle`输出论文标题。\n* 第**15**行的`\\tableofcontents`输出目录。\n* 第**16-17**行两个`\\section`开始新的一节。\n* 第**18**行的`\\bibliography{math}`则是从文献数据库math(这里的math文献数据库是我们自己编辑的一个文件)中获取文献信息，打印参考文献列表。\n> 为了格式清晰，源文件使用了一些空行作为分隔，在正文外的部分，空行不代表任何意义\n\n##### 填写正文\n自己把大段的文字先写上再说，自己试试查看排版之后格式。\n* 使用空行分段，\n* 段落的第一行缩进不需要自己打空格\n##### 命令与环境\n###### 脚注\n脚注是在正文**欧几里得**的后面用脚注命令`\\footnote`得到的。\n``` tex\n该定理的严格表述和证明则见于欧几里得\n\\footnote{欧几里得，约公元前330--275年。}\n```\n在这里，`\\footnote`后面花括号内的部分是命令的参数，也就是脚注的内容。\n注意一个细节，在表示起止年份时，用两个减号(--)，通常用来表示数字的范围。\n文中还使用`\\emph`命令改变字体的形状，表示强调的内容：\n``` tex\n的整数称为\\emph{勾股数}\n```\n一个LaTeX命令(宏)的格式为：\n无参数：`\\command`\n有n个参数:`\\command<arg1><arg2><arg3>`\n有可选参数:`\\command<arg——opt><arg2><arg3>`\n命令都一反斜线`\\`开头，后接命令名，可以带一些参数，必选参数使用花括号括起来，可选参数使用方括号括起来。\n引用的内容这是在正文中使用`quote`环境得到的。\n``` tex\n我国《周髀算经》载商高（约公元前12世纪）答周公问：\n\\begin{quote}\n勾广三，股修四，经隅五。\n\\end{quote}\n```\nquote环境即以`\\begin{quote}`和`\\end{quote}`为起止位置的部分，突出引用部分。但是quote环境不能改变引用内容的字体，因此还需要再使用改变字体的命令\n``` tex\n\\begin{quote}\n\\kaishu\\zihao{-5} 引用的内容\n\\end{quote}\n```\n这里`\\zihao`是一个有参数的命令，选择字号(-5就是小五号)，而`\\kaishu`则是没有参数的命令，把字体切换为楷书，注意用空格把命令和后面的文字分开。\n文章的摘要也是在`\\maketitle`之后用`abstract`环境生成的：\n``` tex\n\\begin{abstract}\n刚开始学\\LaTeX,如果学习不是为了装逼，那一切将毫无意义。\n\\end{abstract}\n```\n当然我们也可以自定义环境，比如上面的突出引用的环境：\n在导言区`\\maketitle`之后\n``` tex\n\\newenvironment{myquote}{\\begin{quote}\\kaishu\\zihao{-5}}{\\end{quote}}\n```\n之后我们在突出引用的时候就可以这么写：\n``` tex\n我国《周髀算经》载商高（约公元前12世纪）答周公问：\n\\begin{myquote}\n勾广三，股修四，经隅五。\n\\end{myquote}\n```\n文章第二节的定理，是用一类定理环境输出的，定理环境是一类环境，在使用前需要先在导言区做定义：\n``` tex\n\\newtheorem{thm}{定理}\n```\n这就定义了一个`thm`环境，定理环境可以有一个可选参数，就是定理的名字，所以文章中的勾股定义就可以由新定义的`thm`环境得到：\n``` tex\n\\begin{thm}[勾股定理]\n直角三角形斜边的平方等于两腰的平方和。\n\\end{thm}\n```\n###### 数学公式\n最简单的方式就是把公式用`$`符号括起来，比如`$a+b$`就可以得到斜体的*a+b*，这种夹在行文中的公式称为\"正文公式(in-text formula)\"或\"行内公式(inline formula)\"。为了方便引用，经常会给公式编号，这种公式被称为\"显式公式\"或\"列表公式(display formula)\",使用`equation`环境就可以方便地输入这种公式。\n``` tex\n\\begin{equation}\na(a+b) = ab + ac\n\\end{equation}\n```\n 键盘上没有的符号，就需要使用命令来输入，\"角\"符号\"∠\",就可以用`\\angle`输入(虽然有的输入法也提供了数学符号的选项，但是不建议这么做，可以自己试试有什么区别)。\n 数学公式还有上线标、分式、根式等，在勾股定理的表达中，就用到了上标表示乘方：\n``` tex\n \\begin{equation}\n AB^2 = BC^2 + AC^2\n \\end{equation}\n```\n 符号`^`用来引入一个上标，`_`医用一个下标，如果上下标识多个字符，则需要使用花括号分组：`2^{10}`。\n 所以90°怎么输入，在latex默认的字体中，并没有专用于表示角度的符号，输入角度的时候是通过上标输入的:`^\\circ`，其中`\\circ`通常用来表示函数符号的二元运算符`○`，我们把它的上标借用来表示角度。\n\n ###### 插入图片\n 使用图片有两种途径：一个是插入事先准备好的图片，二是使用latex代码直接在文档中画图。\n 插图功能不是由latex内核直接提供，而是有**graphicx**宏包提供的，要使用**graphicx**宏包的插图功能呢个，需要在导言区使用`\\usepackage`命令引入宏包：\n ``` tex\n \\documentclass{ctexart}\n \\usepackage{graphicx}\n ```\n 引入**graphicx**宏包后，就可以使用`\\includegraphics`命令插图了：\n ``` tex\n \\includegraphic[width=3cm]{gougu.png}\n ```\n\n这里`\\includegraphic`有两个参数，方括号中可选参数`width=3cm`设置图形在文档中显示的宽度为3cm，第二个参数则是图片的文件名(和源文件同级)，还有一些类似的参数如scale(缩放)、height等。\n除了一些很小的图标，我们很少进行图文混排，而是使用单独的环境列出，而且很大的图形如果位置是固定，会给分页造成困难，因此，通常都把图像放在一个可以变动相对位置的环境中，称为浮动体。在浮动体中还可以给图片加入说明性标题。\n``` tex\n\\begin{figure}[ht]\n  \\centering\n  \\includegraphics[width=3cm]{gougu.png}\n  \\caption {\\kaishu\\zihao{-5} 宋赵爽在《周髀算经》注中做的弦图（仿制），该图给出了勾股定理的一个极具对称美德证明。}\n  \\label{fig:gougu}\n\\end{figure}\n```\n在上面的代码中，第1行和第6行使用了`figure`环境，就是插图使用的浮动体环境，`figure`环境有可选参数`[ht]`，表示浮动体可以出现在环境周围的文本所在处和一页的顶部。`figure`环境内部相当于普通的段落(默认没有缩进)；第二行用生命`\\centering`表示后面的内容居中；第3行插入图片；第4行使用`\\caption`命令给插图加上自动编号和标题；第5行的`\\lable`命令则给图形定义一个标签，这个标签就可以在文章的其他地方引用`\\caption`产生的编号。\n###### 使用表格\n制作表格，需要确定是表格的行、列、对齐模式和表格线，这是由`tabular`环境完成的：\n``` tex\n\\begin{table}[h]\n\\begin{tabular}{|lcr|}\n\\hline\n直角边 $a$ & 直角边 $b$ & 斜边 $c$\\\\\n\\hline\n3 &  4 & 5\\\\\n5 &  12&  13\\\\\n\\hline\n\\end{tabular}%\n\\qquad\n($a^2 + b^2 = c^2$)\n\\end{table}\n```\n表格和插图一样，一般也放在浮动环境中，即`table`环境中，参数大致和`figure`差不多；\n`tabular`环境有一个参数，里面声明了表格中列的模式，在上面的表格中`|lcr|`表示第一列的内容左对齐，第二类居中对齐，第三列居中对齐，在第一列前面和第三列后面各有一条垂直的表格线。\n在`tabular`环境中，行与行之间用命令`\\\\`隔开，每一行内的表项使用符号`$`隔开，表格中的横线是用命令`\\hline`生成。\n这里并没有给表格加标题，也没有把内容居中，而是把表格个一个公式并排排开，中间使用一个`\\qquad`分割，这个命令产生长为2em(大约两个'M'的宽度)的空白。因为已经使用`\\qquad`生成足够长度的空格了，所以再用`\\end{tabular}`后的注释符取消换行产生的一个多余空格。又因为表格是和正文连在一起的，不允许再浮动了，所以在`table`环境中的表示位置参数处使用了`[H]`，但是这个参数是由**float**宏包提供的，所以还要在导言区使用`\\usepackage{float}`。\n\n###### 文献引用\n上面提到了引用文献，是在`math.bib`这个文件中指定的，下面是`math.bib`文件的内容\n``` bib\n% Encoding: UTF-8\n\n@Book{Shiye,\n  title  = {几何的有名定理},\n  year   = {1986},\n  author = {矢野健太郎},\n}\n\n@Book{Kline,\n  title  = {古今数学思想},\n  year   = {2002},\n  author = {克莱因},\n}\n\n@Book{quanjing,\n  title   = {商高、赵爽与刘徽关于勾股定理的证明},\n  year    = {1998},\n  author  = {曲安京},\n  volume  = {20},\n  number  = {3},\n  journal = {数学传播},\n}\n\n@Comment{jabref-meta: databaseType:bibtex;}\n```\n一个文献数据文件的格式并不复杂，每一个条目包括类型、引用标签、标题、年限、作者等信息，可以手工输入，也可以通过jabref制作。\n在实际应用中，BIBTEX数据并不需要我们自己录入，可以从相关的学科网站直接现在或是从其他类型的文献数据库转换得到。\nBIBTEX是一个专门用于处理LATEX文档文献列表的程序，使用BIBTEX处理文献时，编译源文件需要增加为四次运行程序(在TexWorks中点击四次按钮)\n`pdflatex ***.tex`\n`bibtex ***.aux`\n`pdflatex ***.tex`\n`pdflatex ***.tex`\n第一次运行为BIBTEX准备好辅助文件，确定数据库中的哪些文献将被列出来，然后bibtex处理辅助文件aux，从文献数据库中选取文件，按指定的格式生成文献列表的latex代码，后面两次再读入文献列表代码并生成正确的引用信息。\nlatex只选择被引用的文献，引用文献的方法是在正文中使用`\\cite`命令，如：\n``` tex\n将勾股定理的发现归功于公元前 6 世纪的毕达哥拉斯学派\\cite{Kline}。该学派得到了一个法则...\n...是我国古代对勾股定理的一种证明\\cite{quanjing}。 \n```\n`\\cite`命令的参数`Kline`和`quanjing`分别是其中两篇的引用标签，也就是在`math.bib`中每个条目第一行出现的星系，使用`\\cite`命令会在引用的文字显示文献在列表中的标号(它在第3次pdflatex编译后才能确定)，同时在辅助文件中说明某文献将被引用。如果要在列表中显示并不直接引用的文献，可以使用`\\nocite`命令，一般是把它放在`\\bibliography`之前：\n``` tex\n\\nocite{Shiye}\n\\bibliography{math}\n```\n目录也是自动从章节命令中提取并写入目录文件中的，在文章中我们就使用了`\\tableofcontents`命令，它将在第二次编译时生效。\n引用并不仅限于参考文献，图表、公式的编号，只要事先设定了标签，同样可以引用。基本的交叉引用命令是`\\ref`，它以标签问参数，得到被引用标号。比如在这篇文章中，在插入图片时是引用`\\label`命令为弦图定义了标签`\\label{fig:gougu}`，这样在正文中就可以使用\n``` tex\n图\\ref{fig:gougu}是我国古代对勾股定理的一种证明\\cite{quanjing}。\n```\n公式编号的引用也可照此做法，不过需要先在公式中定义标签：\n``` tex\n\\begin{equation} \\label{eq:gougu}\nAB^2 = BC^2 + AC^2\n\\end{equation}\n```\n引用数学公式的时候一般使用数学宏包`amsmath`就定义了`\\eqref`命令，专门用于公式的引用，并能产生括号：\n导言区引入包\n```tex\n\\usepackage{amsmath}\n```\n正文中引用公式：\n``` tex\n满足式\\eqref{eq:gougu}的整数称为\\emph{勾股数}。\n```\n\n----\n以上。","source":"_posts/LaTeX笔记-二.md","raw":"---\ntitle: LaTeX笔记(二)(开篇)\ndate: 2018-01-27 22:59:42\ntags: [LaTeX]\nkeywords: LaTeX\n---\n接上篇，写好的tex文件在这 https://github.com/huangyuanlove/latex_practice/blob/master/latex(1)/chapter_one.tex\n##### 写个框架\n既然有目标了，我们先写个大概的框架，然后往里面填充内容\n``` tex \n% coding:UTF-8\n\n\n\\documentclass[UTF8]{ctexart}\n\n\\title{杂谈勾股定理}\n\\author{xuan}\n\\date{\\today}\n\n\\bibliographystyle{plain}\n\n\\begin{document}\n\n\\maketitle\n\\tableofcontents\n\\section{勾股定理在古代}\n\\section{勾股定理的近代形式}\n\\bibliography{math}\n\n\\end{document}\n```\n<!--more-->\n* 以 `%`开头的行是注释，源文件一行中百分号后面的内容都会被忽略。\n* 第**4**行是文档类，因为是中文的短文，所以用的是`ctexart`，并用[UTF8]选项说明编码方式。\n* 第**6-8**行声明了文章的标题、作者、日期。其中的`\\today`是当前日期。但是这些信息是通过**14**行的`\\maketitle`排版的。\n* 第**10**行的`\\bibliographystyle`声明参考文献的格式。\n以上在`\\begin{document}`之前的部分称为`导言区(preamble)`，导言区通常用来对文档的性质做一些设置，或自定义一些命令。\n* 第**12-20**行以`\\begin{document}`和`\\end{socument}`声明了一个document环境，里面是论文的正文部分，也就是直接输出的部分。\n* 第**14**行的`\\maketitle`输出论文标题。\n* 第**15**行的`\\tableofcontents`输出目录。\n* 第**16-17**行两个`\\section`开始新的一节。\n* 第**18**行的`\\bibliography{math}`则是从文献数据库math(这里的math文献数据库是我们自己编辑的一个文件)中获取文献信息，打印参考文献列表。\n> 为了格式清晰，源文件使用了一些空行作为分隔，在正文外的部分，空行不代表任何意义\n\n##### 填写正文\n自己把大段的文字先写上再说，自己试试查看排版之后格式。\n* 使用空行分段，\n* 段落的第一行缩进不需要自己打空格\n##### 命令与环境\n###### 脚注\n脚注是在正文**欧几里得**的后面用脚注命令`\\footnote`得到的。\n``` tex\n该定理的严格表述和证明则见于欧几里得\n\\footnote{欧几里得，约公元前330--275年。}\n```\n在这里，`\\footnote`后面花括号内的部分是命令的参数，也就是脚注的内容。\n注意一个细节，在表示起止年份时，用两个减号(--)，通常用来表示数字的范围。\n文中还使用`\\emph`命令改变字体的形状，表示强调的内容：\n``` tex\n的整数称为\\emph{勾股数}\n```\n一个LaTeX命令(宏)的格式为：\n无参数：`\\command`\n有n个参数:`\\command<arg1><arg2><arg3>`\n有可选参数:`\\command<arg——opt><arg2><arg3>`\n命令都一反斜线`\\`开头，后接命令名，可以带一些参数，必选参数使用花括号括起来，可选参数使用方括号括起来。\n引用的内容这是在正文中使用`quote`环境得到的。\n``` tex\n我国《周髀算经》载商高（约公元前12世纪）答周公问：\n\\begin{quote}\n勾广三，股修四，经隅五。\n\\end{quote}\n```\nquote环境即以`\\begin{quote}`和`\\end{quote}`为起止位置的部分，突出引用部分。但是quote环境不能改变引用内容的字体，因此还需要再使用改变字体的命令\n``` tex\n\\begin{quote}\n\\kaishu\\zihao{-5} 引用的内容\n\\end{quote}\n```\n这里`\\zihao`是一个有参数的命令，选择字号(-5就是小五号)，而`\\kaishu`则是没有参数的命令，把字体切换为楷书，注意用空格把命令和后面的文字分开。\n文章的摘要也是在`\\maketitle`之后用`abstract`环境生成的：\n``` tex\n\\begin{abstract}\n刚开始学\\LaTeX,如果学习不是为了装逼，那一切将毫无意义。\n\\end{abstract}\n```\n当然我们也可以自定义环境，比如上面的突出引用的环境：\n在导言区`\\maketitle`之后\n``` tex\n\\newenvironment{myquote}{\\begin{quote}\\kaishu\\zihao{-5}}{\\end{quote}}\n```\n之后我们在突出引用的时候就可以这么写：\n``` tex\n我国《周髀算经》载商高（约公元前12世纪）答周公问：\n\\begin{myquote}\n勾广三，股修四，经隅五。\n\\end{myquote}\n```\n文章第二节的定理，是用一类定理环境输出的，定理环境是一类环境，在使用前需要先在导言区做定义：\n``` tex\n\\newtheorem{thm}{定理}\n```\n这就定义了一个`thm`环境，定理环境可以有一个可选参数，就是定理的名字，所以文章中的勾股定义就可以由新定义的`thm`环境得到：\n``` tex\n\\begin{thm}[勾股定理]\n直角三角形斜边的平方等于两腰的平方和。\n\\end{thm}\n```\n###### 数学公式\n最简单的方式就是把公式用`$`符号括起来，比如`$a+b$`就可以得到斜体的*a+b*，这种夹在行文中的公式称为\"正文公式(in-text formula)\"或\"行内公式(inline formula)\"。为了方便引用，经常会给公式编号，这种公式被称为\"显式公式\"或\"列表公式(display formula)\",使用`equation`环境就可以方便地输入这种公式。\n``` tex\n\\begin{equation}\na(a+b) = ab + ac\n\\end{equation}\n```\n 键盘上没有的符号，就需要使用命令来输入，\"角\"符号\"∠\",就可以用`\\angle`输入(虽然有的输入法也提供了数学符号的选项，但是不建议这么做，可以自己试试有什么区别)。\n 数学公式还有上线标、分式、根式等，在勾股定理的表达中，就用到了上标表示乘方：\n``` tex\n \\begin{equation}\n AB^2 = BC^2 + AC^2\n \\end{equation}\n```\n 符号`^`用来引入一个上标，`_`医用一个下标，如果上下标识多个字符，则需要使用花括号分组：`2^{10}`。\n 所以90°怎么输入，在latex默认的字体中，并没有专用于表示角度的符号，输入角度的时候是通过上标输入的:`^\\circ`，其中`\\circ`通常用来表示函数符号的二元运算符`○`，我们把它的上标借用来表示角度。\n\n ###### 插入图片\n 使用图片有两种途径：一个是插入事先准备好的图片，二是使用latex代码直接在文档中画图。\n 插图功能不是由latex内核直接提供，而是有**graphicx**宏包提供的，要使用**graphicx**宏包的插图功能呢个，需要在导言区使用`\\usepackage`命令引入宏包：\n ``` tex\n \\documentclass{ctexart}\n \\usepackage{graphicx}\n ```\n 引入**graphicx**宏包后，就可以使用`\\includegraphics`命令插图了：\n ``` tex\n \\includegraphic[width=3cm]{gougu.png}\n ```\n\n这里`\\includegraphic`有两个参数，方括号中可选参数`width=3cm`设置图形在文档中显示的宽度为3cm，第二个参数则是图片的文件名(和源文件同级)，还有一些类似的参数如scale(缩放)、height等。\n除了一些很小的图标，我们很少进行图文混排，而是使用单独的环境列出，而且很大的图形如果位置是固定，会给分页造成困难，因此，通常都把图像放在一个可以变动相对位置的环境中，称为浮动体。在浮动体中还可以给图片加入说明性标题。\n``` tex\n\\begin{figure}[ht]\n  \\centering\n  \\includegraphics[width=3cm]{gougu.png}\n  \\caption {\\kaishu\\zihao{-5} 宋赵爽在《周髀算经》注中做的弦图（仿制），该图给出了勾股定理的一个极具对称美德证明。}\n  \\label{fig:gougu}\n\\end{figure}\n```\n在上面的代码中，第1行和第6行使用了`figure`环境，就是插图使用的浮动体环境，`figure`环境有可选参数`[ht]`，表示浮动体可以出现在环境周围的文本所在处和一页的顶部。`figure`环境内部相当于普通的段落(默认没有缩进)；第二行用生命`\\centering`表示后面的内容居中；第3行插入图片；第4行使用`\\caption`命令给插图加上自动编号和标题；第5行的`\\lable`命令则给图形定义一个标签，这个标签就可以在文章的其他地方引用`\\caption`产生的编号。\n###### 使用表格\n制作表格，需要确定是表格的行、列、对齐模式和表格线，这是由`tabular`环境完成的：\n``` tex\n\\begin{table}[h]\n\\begin{tabular}{|lcr|}\n\\hline\n直角边 $a$ & 直角边 $b$ & 斜边 $c$\\\\\n\\hline\n3 &  4 & 5\\\\\n5 &  12&  13\\\\\n\\hline\n\\end{tabular}%\n\\qquad\n($a^2 + b^2 = c^2$)\n\\end{table}\n```\n表格和插图一样，一般也放在浮动环境中，即`table`环境中，参数大致和`figure`差不多；\n`tabular`环境有一个参数，里面声明了表格中列的模式，在上面的表格中`|lcr|`表示第一列的内容左对齐，第二类居中对齐，第三列居中对齐，在第一列前面和第三列后面各有一条垂直的表格线。\n在`tabular`环境中，行与行之间用命令`\\\\`隔开，每一行内的表项使用符号`$`隔开，表格中的横线是用命令`\\hline`生成。\n这里并没有给表格加标题，也没有把内容居中，而是把表格个一个公式并排排开，中间使用一个`\\qquad`分割，这个命令产生长为2em(大约两个'M'的宽度)的空白。因为已经使用`\\qquad`生成足够长度的空格了，所以再用`\\end{tabular}`后的注释符取消换行产生的一个多余空格。又因为表格是和正文连在一起的，不允许再浮动了，所以在`table`环境中的表示位置参数处使用了`[H]`，但是这个参数是由**float**宏包提供的，所以还要在导言区使用`\\usepackage{float}`。\n\n###### 文献引用\n上面提到了引用文献，是在`math.bib`这个文件中指定的，下面是`math.bib`文件的内容\n``` bib\n% Encoding: UTF-8\n\n@Book{Shiye,\n  title  = {几何的有名定理},\n  year   = {1986},\n  author = {矢野健太郎},\n}\n\n@Book{Kline,\n  title  = {古今数学思想},\n  year   = {2002},\n  author = {克莱因},\n}\n\n@Book{quanjing,\n  title   = {商高、赵爽与刘徽关于勾股定理的证明},\n  year    = {1998},\n  author  = {曲安京},\n  volume  = {20},\n  number  = {3},\n  journal = {数学传播},\n}\n\n@Comment{jabref-meta: databaseType:bibtex;}\n```\n一个文献数据文件的格式并不复杂，每一个条目包括类型、引用标签、标题、年限、作者等信息，可以手工输入，也可以通过jabref制作。\n在实际应用中，BIBTEX数据并不需要我们自己录入，可以从相关的学科网站直接现在或是从其他类型的文献数据库转换得到。\nBIBTEX是一个专门用于处理LATEX文档文献列表的程序，使用BIBTEX处理文献时，编译源文件需要增加为四次运行程序(在TexWorks中点击四次按钮)\n`pdflatex ***.tex`\n`bibtex ***.aux`\n`pdflatex ***.tex`\n`pdflatex ***.tex`\n第一次运行为BIBTEX准备好辅助文件，确定数据库中的哪些文献将被列出来，然后bibtex处理辅助文件aux，从文献数据库中选取文件，按指定的格式生成文献列表的latex代码，后面两次再读入文献列表代码并生成正确的引用信息。\nlatex只选择被引用的文献，引用文献的方法是在正文中使用`\\cite`命令，如：\n``` tex\n将勾股定理的发现归功于公元前 6 世纪的毕达哥拉斯学派\\cite{Kline}。该学派得到了一个法则...\n...是我国古代对勾股定理的一种证明\\cite{quanjing}。 \n```\n`\\cite`命令的参数`Kline`和`quanjing`分别是其中两篇的引用标签，也就是在`math.bib`中每个条目第一行出现的星系，使用`\\cite`命令会在引用的文字显示文献在列表中的标号(它在第3次pdflatex编译后才能确定)，同时在辅助文件中说明某文献将被引用。如果要在列表中显示并不直接引用的文献，可以使用`\\nocite`命令，一般是把它放在`\\bibliography`之前：\n``` tex\n\\nocite{Shiye}\n\\bibliography{math}\n```\n目录也是自动从章节命令中提取并写入目录文件中的，在文章中我们就使用了`\\tableofcontents`命令，它将在第二次编译时生效。\n引用并不仅限于参考文献，图表、公式的编号，只要事先设定了标签，同样可以引用。基本的交叉引用命令是`\\ref`，它以标签问参数，得到被引用标号。比如在这篇文章中，在插入图片时是引用`\\label`命令为弦图定义了标签`\\label{fig:gougu}`，这样在正文中就可以使用\n``` tex\n图\\ref{fig:gougu}是我国古代对勾股定理的一种证明\\cite{quanjing}。\n```\n公式编号的引用也可照此做法，不过需要先在公式中定义标签：\n``` tex\n\\begin{equation} \\label{eq:gougu}\nAB^2 = BC^2 + AC^2\n\\end{equation}\n```\n引用数学公式的时候一般使用数学宏包`amsmath`就定义了`\\eqref`命令，专门用于公式的引用，并能产生括号：\n导言区引入包\n```tex\n\\usepackage{amsmath}\n```\n正文中引用公式：\n``` tex\n满足式\\eqref{eq:gougu}的整数称为\\emph{勾股数}。\n```\n\n----\n以上。","slug":"LaTeX笔记-二","published":1,"updated":"2018-08-04T05:15:15.413Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjl3vbtr2001nisdgf1eh6q9j","content":"<p>接上篇，写好的tex文件在这 <a href=\"https://github.com/huangyuanlove/latex_practice/blob/master/latex(1)/chapter_one.tex\" target=\"_blank\" rel=\"external\">https://github.com/huangyuanlove/latex_practice/blob/master/latex(1)/chapter_one.tex</a></p>\n<h5 id=\"写个框架\"><a href=\"#写个框架\" class=\"headerlink\" title=\"写个框架\"></a>写个框架</h5><p>既然有目标了，我们先写个大概的框架，然后往里面填充内容<br><figure class=\"highlight tex\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">% coding:UTF-8</span></div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"><span class=\"tag\">\\<span class=\"name\">documentclass</span><span class=\"string\">[UTF8]</span><span class=\"string\">&#123;ctexart&#125;</span></span></div><div class=\"line\"></div><div class=\"line\"><span class=\"tag\">\\<span class=\"name\">title</span><span class=\"string\">&#123;杂谈勾股定理&#125;</span></span></div><div class=\"line\"><span class=\"tag\">\\<span class=\"name\">author</span><span class=\"string\">&#123;xuan&#125;</span></span></div><div class=\"line\"><span class=\"tag\">\\<span class=\"name\">date</span><span class=\"string\">&#123;\\today&#125;</span></span></div><div class=\"line\"></div><div class=\"line\"><span class=\"tag\">\\<span class=\"name\">bibliographystyle</span><span class=\"string\">&#123;plain&#125;</span></span></div><div class=\"line\"></div><div class=\"line\"><span class=\"tag\">\\<span class=\"name\">begin</span><span class=\"string\">&#123;document&#125;</span></span></div><div class=\"line\"></div><div class=\"line\"><span class=\"tag\">\\<span class=\"name\">maketitle</span></span></div><div class=\"line\"><span class=\"tag\">\\<span class=\"name\">tableofcontents</span></span></div><div class=\"line\"><span class=\"tag\">\\<span class=\"name\">section</span><span class=\"string\">&#123;勾股定理在古代&#125;</span></span></div><div class=\"line\"><span class=\"tag\">\\<span class=\"name\">section</span><span class=\"string\">&#123;勾股定理的近代形式&#125;</span></span></div><div class=\"line\"><span class=\"tag\">\\<span class=\"name\">bibliography</span><span class=\"string\">&#123;math&#125;</span></span></div><div class=\"line\"></div><div class=\"line\"><span class=\"tag\">\\<span class=\"name\">end</span><span class=\"string\">&#123;document&#125;</span></span></div></pre></td></tr></table></figure></p>\n<a id=\"more\"></a>\n<ul>\n<li>以 <code>%</code>开头的行是注释，源文件一行中百分号后面的内容都会被忽略。</li>\n<li>第<strong>4</strong>行是文档类，因为是中文的短文，所以用的是<code>ctexart</code>，并用[UTF8]选项说明编码方式。</li>\n<li>第<strong>6-8</strong>行声明了文章的标题、作者、日期。其中的<code>\\today</code>是当前日期。但是这些信息是通过<strong>14</strong>行的<code>\\maketitle</code>排版的。</li>\n<li>第<strong>10</strong>行的<code>\\bibliographystyle</code>声明参考文献的格式。<br>以上在<code>\\begin{document}</code>之前的部分称为<code>导言区(preamble)</code>，导言区通常用来对文档的性质做一些设置，或自定义一些命令。</li>\n<li>第<strong>12-20</strong>行以<code>\\begin{document}</code>和<code>\\end{socument}</code>声明了一个document环境，里面是论文的正文部分，也就是直接输出的部分。</li>\n<li>第<strong>14</strong>行的<code>\\maketitle</code>输出论文标题。</li>\n<li>第<strong>15</strong>行的<code>\\tableofcontents</code>输出目录。</li>\n<li>第<strong>16-17</strong>行两个<code>\\section</code>开始新的一节。</li>\n<li>第<strong>18</strong>行的<code>\\bibliography{math}</code>则是从文献数据库math(这里的math文献数据库是我们自己编辑的一个文件)中获取文献信息，打印参考文献列表。<blockquote>\n<p>为了格式清晰，源文件使用了一些空行作为分隔，在正文外的部分，空行不代表任何意义</p>\n</blockquote>\n</li>\n</ul>\n<h5 id=\"填写正文\"><a href=\"#填写正文\" class=\"headerlink\" title=\"填写正文\"></a>填写正文</h5><p>自己把大段的文字先写上再说，自己试试查看排版之后格式。</p>\n<ul>\n<li>使用空行分段，</li>\n<li>段落的第一行缩进不需要自己打空格<h5 id=\"命令与环境\"><a href=\"#命令与环境\" class=\"headerlink\" title=\"命令与环境\"></a>命令与环境</h5><h6 id=\"脚注\"><a href=\"#脚注\" class=\"headerlink\" title=\"脚注\"></a>脚注</h6>脚注是在正文<strong>欧几里得</strong>的后面用脚注命令<code>\\footnote</code>得到的。<figure class=\"highlight tex\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">该定理的严格表述和证明则见于欧几里得</div><div class=\"line\"><span class=\"tag\">\\<span class=\"name\">footnote</span><span class=\"string\">&#123;欧几里得，约公元前330--275年。&#125;</span></span></div></pre></td></tr></table></figure>\n</li>\n</ul>\n<p>在这里，<code>\\footnote</code>后面花括号内的部分是命令的参数，也就是脚注的内容。<br>注意一个细节，在表示起止年份时，用两个减号(–)，通常用来表示数字的范围。<br>文中还使用<code>\\emph</code>命令改变字体的形状，表示强调的内容：<br><figure class=\"highlight tex\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">的整数称为<span class=\"tag\">\\<span class=\"name\">emph</span><span class=\"string\">&#123;勾股数&#125;</span></span></div></pre></td></tr></table></figure></p>\n<p>一个LaTeX命令(宏)的格式为：<br>无参数：<code>\\command</code><br>有n个参数:<code>\\command&lt;arg1&gt;&lt;arg2&gt;&lt;arg3&gt;</code><br>有可选参数:<code>\\command&lt;arg——opt&gt;&lt;arg2&gt;&lt;arg3&gt;</code><br>命令都一反斜线<code>\\</code>开头，后接命令名，可以带一些参数，必选参数使用花括号括起来，可选参数使用方括号括起来。<br>引用的内容这是在正文中使用<code>quote</code>环境得到的。<br><figure class=\"highlight tex\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">我国《周髀算经》载商高（约公元前12世纪）答周公问：</div><div class=\"line\"><span class=\"tag\">\\<span class=\"name\">begin</span><span class=\"string\">&#123;quote&#125;</span></span></div><div class=\"line\">勾广三，股修四，经隅五。</div><div class=\"line\"><span class=\"tag\">\\<span class=\"name\">end</span><span class=\"string\">&#123;quote&#125;</span></span></div></pre></td></tr></table></figure></p>\n<p>quote环境即以<code>\\begin{quote}</code>和<code>\\end{quote}</code>为起止位置的部分，突出引用部分。但是quote环境不能改变引用内容的字体，因此还需要再使用改变字体的命令<br><figure class=\"highlight tex\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">\\<span class=\"name\">begin</span><span class=\"string\">&#123;quote&#125;</span></span></div><div class=\"line\"><span class=\"tag\">\\<span class=\"name\">kaishu</span></span><span class=\"tag\">\\<span class=\"name\">zihao</span><span class=\"string\">&#123;-5&#125;</span></span> 引用的内容</div><div class=\"line\"><span class=\"tag\">\\<span class=\"name\">end</span><span class=\"string\">&#123;quote&#125;</span></span></div></pre></td></tr></table></figure></p>\n<p>这里<code>\\zihao</code>是一个有参数的命令，选择字号(-5就是小五号)，而<code>\\kaishu</code>则是没有参数的命令，把字体切换为楷书，注意用空格把命令和后面的文字分开。<br>文章的摘要也是在<code>\\maketitle</code>之后用<code>abstract</code>环境生成的：<br><figure class=\"highlight tex\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">\\<span class=\"name\">begin</span><span class=\"string\">&#123;abstract&#125;</span></span></div><div class=\"line\">刚开始学<span class=\"tag\">\\<span class=\"name\">LaTeX</span></span>,如果学习不是为了装逼，那一切将毫无意义。</div><div class=\"line\"><span class=\"tag\">\\<span class=\"name\">end</span><span class=\"string\">&#123;abstract&#125;</span></span></div></pre></td></tr></table></figure></p>\n<p>当然我们也可以自定义环境，比如上面的突出引用的环境：<br>在导言区<code>\\maketitle</code>之后<br><figure class=\"highlight tex\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">\\<span class=\"name\">newenvironment</span><span class=\"string\">&#123;myquote&#125;</span><span class=\"string\">&#123;\\begin&#123;quote&#125;</span></span><span class=\"tag\">\\<span class=\"name\">kaishu</span></span><span class=\"tag\">\\<span class=\"name\">zihao</span><span class=\"string\">&#123;-5&#125;</span></span>&#125;&#123;<span class=\"tag\">\\<span class=\"name\">end</span><span class=\"string\">&#123;quote&#125;</span></span>&#125;</div></pre></td></tr></table></figure></p>\n<p>之后我们在突出引用的时候就可以这么写：<br><figure class=\"highlight tex\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">我国《周髀算经》载商高（约公元前12世纪）答周公问：</div><div class=\"line\"><span class=\"tag\">\\<span class=\"name\">begin</span><span class=\"string\">&#123;myquote&#125;</span></span></div><div class=\"line\">勾广三，股修四，经隅五。</div><div class=\"line\"><span class=\"tag\">\\<span class=\"name\">end</span><span class=\"string\">&#123;myquote&#125;</span></span></div></pre></td></tr></table></figure></p>\n<p>文章第二节的定理，是用一类定理环境输出的，定理环境是一类环境，在使用前需要先在导言区做定义：<br><figure class=\"highlight tex\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">\\<span class=\"name\">newtheorem</span><span class=\"string\">&#123;thm&#125;</span><span class=\"string\">&#123;定理&#125;</span></span></div></pre></td></tr></table></figure></p>\n<p>这就定义了一个<code>thm</code>环境，定理环境可以有一个可选参数，就是定理的名字，所以文章中的勾股定义就可以由新定义的<code>thm</code>环境得到：<br><figure class=\"highlight tex\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">\\<span class=\"name\">begin</span><span class=\"string\">&#123;thm&#125;</span><span class=\"string\">[勾股定理]</span></span></div><div class=\"line\">直角三角形斜边的平方等于两腰的平方和。</div><div class=\"line\"><span class=\"tag\">\\<span class=\"name\">end</span><span class=\"string\">&#123;thm&#125;</span></span></div></pre></td></tr></table></figure></p>\n<h6 id=\"数学公式\"><a href=\"#数学公式\" class=\"headerlink\" title=\"数学公式\"></a>数学公式</h6><p>最简单的方式就是把公式用<code>$</code>符号括起来，比如<code>$a+b$</code>就可以得到斜体的<em>a+b</em>，这种夹在行文中的公式称为”正文公式(in-text formula)”或”行内公式(inline formula)”。为了方便引用，经常会给公式编号，这种公式被称为”显式公式”或”列表公式(display formula)”,使用<code>equation</code>环境就可以方便地输入这种公式。<br><figure class=\"highlight tex\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">\\<span class=\"name\">begin</span><span class=\"string\">&#123;equation&#125;</span></span></div><div class=\"line\">a(a+b) = ab + ac</div><div class=\"line\"><span class=\"tag\">\\<span class=\"name\">end</span><span class=\"string\">&#123;equation&#125;</span></span></div></pre></td></tr></table></figure></p>\n<p> 键盘上没有的符号，就需要使用命令来输入，”角”符号”∠”,就可以用<code>\\angle</code>输入(虽然有的输入法也提供了数学符号的选项，但是不建议这么做，可以自己试试有什么区别)。<br> 数学公式还有上线标、分式、根式等，在勾股定理的表达中，就用到了上标表示乘方：<br><figure class=\"highlight tex\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">\\<span class=\"name\">begin</span><span class=\"string\">&#123;equation&#125;</span></span></div><div class=\"line\">AB^2 = BC^2 + AC^2</div><div class=\"line\"><span class=\"tag\">\\<span class=\"name\">end</span><span class=\"string\">&#123;equation&#125;</span></span></div></pre></td></tr></table></figure></p>\n<p> 符号<code>^</code>用来引入一个上标，<code>_</code>医用一个下标，如果上下标识多个字符，则需要使用花括号分组：<code>2^{10}</code>。<br> 所以90°怎么输入，在latex默认的字体中，并没有专用于表示角度的符号，输入角度的时候是通过上标输入的:<code>^\\circ</code>，其中<code>\\circ</code>通常用来表示函数符号的二元运算符<code>○</code>，我们把它的上标借用来表示角度。</p>\n<h6 id=\"插入图片\"><a href=\"#插入图片\" class=\"headerlink\" title=\"插入图片\"></a>插入图片</h6><p> 使用图片有两种途径：一个是插入事先准备好的图片，二是使用latex代码直接在文档中画图。<br> 插图功能不是由latex内核直接提供，而是有<strong>graphicx</strong>宏包提供的，要使用<strong>graphicx</strong>宏包的插图功能呢个，需要在导言区使用<code>\\usepackage</code>命令引入宏包：<br> <figure class=\"highlight tex\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">\\<span class=\"name\">documentclass</span><span class=\"string\">&#123;ctexart&#125;</span></span></div><div class=\"line\"><span class=\"tag\">\\<span class=\"name\">usepackage</span><span class=\"string\">&#123;graphicx&#125;</span></span></div></pre></td></tr></table></figure></p>\n<p> 引入<strong>graphicx</strong>宏包后，就可以使用<code>\\includegraphics</code>命令插图了：<br> <figure class=\"highlight tex\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">\\<span class=\"name\">includegraphic</span><span class=\"string\">[width=3cm]</span><span class=\"string\">&#123;gougu.png&#125;</span></span></div></pre></td></tr></table></figure></p>\n<p>这里<code>\\includegraphic</code>有两个参数，方括号中可选参数<code>width=3cm</code>设置图形在文档中显示的宽度为3cm，第二个参数则是图片的文件名(和源文件同级)，还有一些类似的参数如scale(缩放)、height等。<br>除了一些很小的图标，我们很少进行图文混排，而是使用单独的环境列出，而且很大的图形如果位置是固定，会给分页造成困难，因此，通常都把图像放在一个可以变动相对位置的环境中，称为浮动体。在浮动体中还可以给图片加入说明性标题。<br><figure class=\"highlight tex\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">\\<span class=\"name\">begin</span><span class=\"string\">&#123;figure&#125;</span><span class=\"string\">[ht]</span></span></div><div class=\"line\">  <span class=\"tag\">\\<span class=\"name\">centering</span></span></div><div class=\"line\">  <span class=\"tag\">\\<span class=\"name\">includegraphics</span><span class=\"string\">[width=3cm]</span><span class=\"string\">&#123;gougu.png&#125;</span></span></div><div class=\"line\">  <span class=\"tag\">\\<span class=\"name\">caption</span></span> &#123;<span class=\"tag\">\\<span class=\"name\">kaishu</span></span><span class=\"tag\">\\<span class=\"name\">zihao</span><span class=\"string\">&#123;-5&#125;</span></span> 宋赵爽在《周髀算经》注中做的弦图（仿制），该图给出了勾股定理的一个极具对称美德证明。&#125;</div><div class=\"line\">  <span class=\"tag\">\\<span class=\"name\">label</span><span class=\"string\">&#123;fig:gougu&#125;</span></span></div><div class=\"line\"><span class=\"tag\">\\<span class=\"name\">end</span><span class=\"string\">&#123;figure&#125;</span></span></div></pre></td></tr></table></figure></p>\n<p>在上面的代码中，第1行和第6行使用了<code>figure</code>环境，就是插图使用的浮动体环境，<code>figure</code>环境有可选参数<code>[ht]</code>，表示浮动体可以出现在环境周围的文本所在处和一页的顶部。<code>figure</code>环境内部相当于普通的段落(默认没有缩进)；第二行用生命<code>\\centering</code>表示后面的内容居中；第3行插入图片；第4行使用<code>\\caption</code>命令给插图加上自动编号和标题；第5行的<code>\\lable</code>命令则给图形定义一个标签，这个标签就可以在文章的其他地方引用<code>\\caption</code>产生的编号。</p>\n<h6 id=\"使用表格\"><a href=\"#使用表格\" class=\"headerlink\" title=\"使用表格\"></a>使用表格</h6><p>制作表格，需要确定是表格的行、列、对齐模式和表格线，这是由<code>tabular</code>环境完成的：<br><figure class=\"highlight tex\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">\\<span class=\"name\">begin</span><span class=\"string\">&#123;table&#125;</span><span class=\"string\">[h]</span></span></div><div class=\"line\"><span class=\"tag\">\\<span class=\"name\">begin</span><span class=\"string\">&#123;tabular&#125;</span><span class=\"string\">&#123;|lcr|&#125;</span></span></div><div class=\"line\"><span class=\"tag\">\\<span class=\"name\">hline</span></span></div><div class=\"line\">直角边 <span class=\"formula\">$a$</span> &amp; 直角边 <span class=\"formula\">$b$</span> &amp; 斜边 <span class=\"formula\">$c$</span><span class=\"tag\">\\<span class=\"name\">\\</span></span></div><div class=\"line\"><span class=\"tag\">\\<span class=\"name\">hline</span></span></div><div class=\"line\">3 &amp;  4 &amp; 5<span class=\"tag\">\\<span class=\"name\">\\</span></span></div><div class=\"line\">5 &amp;  12&amp;  13<span class=\"tag\">\\<span class=\"name\">\\</span></span></div><div class=\"line\"><span class=\"tag\">\\<span class=\"name\">hline</span></span></div><div class=\"line\"><span class=\"tag\">\\<span class=\"name\">end</span><span class=\"string\">&#123;tabular&#125;</span></span><span class=\"comment\">%</span></div><div class=\"line\"><span class=\"tag\">\\<span class=\"name\">qquad</span></span></div><div class=\"line\">(<span class=\"formula\">$a^2 + b^2 = c^2$</span>)</div><div class=\"line\"><span class=\"tag\">\\<span class=\"name\">end</span><span class=\"string\">&#123;table&#125;</span></span></div></pre></td></tr></table></figure></p>\n<p>表格和插图一样，一般也放在浮动环境中，即<code>table</code>环境中，参数大致和<code>figure</code>差不多；<br><code>tabular</code>环境有一个参数，里面声明了表格中列的模式，在上面的表格中<code>|lcr|</code>表示第一列的内容左对齐，第二类居中对齐，第三列居中对齐，在第一列前面和第三列后面各有一条垂直的表格线。<br>在<code>tabular</code>环境中，行与行之间用命令<code>\\\\</code>隔开，每一行内的表项使用符号<code>$</code>隔开，表格中的横线是用命令<code>\\hline</code>生成。<br>这里并没有给表格加标题，也没有把内容居中，而是把表格个一个公式并排排开，中间使用一个<code>\\qquad</code>分割，这个命令产生长为2em(大约两个’M’的宽度)的空白。因为已经使用<code>\\qquad</code>生成足够长度的空格了，所以再用<code>\\end{tabular}</code>后的注释符取消换行产生的一个多余空格。又因为表格是和正文连在一起的，不允许再浮动了，所以在<code>table</code>环境中的表示位置参数处使用了<code>[H]</code>，但是这个参数是由<strong>float</strong>宏包提供的，所以还要在导言区使用<code>\\usepackage{float}</code>。</p>\n<h6 id=\"文献引用\"><a href=\"#文献引用\" class=\"headerlink\" title=\"文献引用\"></a>文献引用</h6><p>上面提到了引用文献，是在<code>math.bib</code>这个文件中指定的，下面是<code>math.bib</code>文件的内容<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div></pre></td><td class=\"code\"><pre><div class=\"line\">% Encoding: UTF-8</div><div class=\"line\"></div><div class=\"line\">@Book&#123;Shiye,</div><div class=\"line\">  title  = &#123;几何的有名定理&#125;,</div><div class=\"line\">  year   = &#123;1986&#125;,</div><div class=\"line\">  author = &#123;矢野健太郎&#125;,</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">@Book&#123;Kline,</div><div class=\"line\">  title  = &#123;古今数学思想&#125;,</div><div class=\"line\">  year   = &#123;2002&#125;,</div><div class=\"line\">  author = &#123;克莱因&#125;,</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">@Book&#123;quanjing,</div><div class=\"line\">  title   = &#123;商高、赵爽与刘徽关于勾股定理的证明&#125;,</div><div class=\"line\">  year    = &#123;1998&#125;,</div><div class=\"line\">  author  = &#123;曲安京&#125;,</div><div class=\"line\">  volume  = &#123;20&#125;,</div><div class=\"line\">  number  = &#123;3&#125;,</div><div class=\"line\">  journal = &#123;数学传播&#125;,</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">@Comment&#123;jabref-meta: databaseType:bibtex;&#125;</div></pre></td></tr></table></figure></p>\n<p>一个文献数据文件的格式并不复杂，每一个条目包括类型、引用标签、标题、年限、作者等信息，可以手工输入，也可以通过jabref制作。<br>在实际应用中，BIBTEX数据并不需要我们自己录入，可以从相关的学科网站直接现在或是从其他类型的文献数据库转换得到。<br>BIBTEX是一个专门用于处理LATEX文档文献列表的程序，使用BIBTEX处理文献时，编译源文件需要增加为四次运行程序(在TexWorks中点击四次按钮)<br><code>pdflatex ***.tex</code><br><code>bibtex ***.aux</code><br><code>pdflatex ***.tex</code><br><code>pdflatex ***.tex</code><br>第一次运行为BIBTEX准备好辅助文件，确定数据库中的哪些文献将被列出来，然后bibtex处理辅助文件aux，从文献数据库中选取文件，按指定的格式生成文献列表的latex代码，后面两次再读入文献列表代码并生成正确的引用信息。<br>latex只选择被引用的文献，引用文献的方法是在正文中使用<code>\\cite</code>命令，如：<br><figure class=\"highlight tex\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">将勾股定理的发现归功于公元前 6 世纪的毕达哥拉斯学派<span class=\"tag\">\\<span class=\"name\">cite</span><span class=\"string\">&#123;Kline&#125;</span></span>。该学派得到了一个法则...</div><div class=\"line\">...是我国古代对勾股定理的一种证明<span class=\"tag\">\\<span class=\"name\">cite</span><span class=\"string\">&#123;quanjing&#125;</span></span>。</div></pre></td></tr></table></figure></p>\n<p><code>\\cite</code>命令的参数<code>Kline</code>和<code>quanjing</code>分别是其中两篇的引用标签，也就是在<code>math.bib</code>中每个条目第一行出现的星系，使用<code>\\cite</code>命令会在引用的文字显示文献在列表中的标号(它在第3次pdflatex编译后才能确定)，同时在辅助文件中说明某文献将被引用。如果要在列表中显示并不直接引用的文献，可以使用<code>\\nocite</code>命令，一般是把它放在<code>\\bibliography</code>之前：<br><figure class=\"highlight tex\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">\\<span class=\"name\">nocite</span><span class=\"string\">&#123;Shiye&#125;</span></span></div><div class=\"line\"><span class=\"tag\">\\<span class=\"name\">bibliography</span><span class=\"string\">&#123;math&#125;</span></span></div></pre></td></tr></table></figure></p>\n<p>目录也是自动从章节命令中提取并写入目录文件中的，在文章中我们就使用了<code>\\tableofcontents</code>命令，它将在第二次编译时生效。<br>引用并不仅限于参考文献，图表、公式的编号，只要事先设定了标签，同样可以引用。基本的交叉引用命令是<code>\\ref</code>，它以标签问参数，得到被引用标号。比如在这篇文章中，在插入图片时是引用<code>\\label</code>命令为弦图定义了标签<code>\\label{fig:gougu}</code>，这样在正文中就可以使用<br><figure class=\"highlight tex\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">图<span class=\"tag\">\\<span class=\"name\">ref</span><span class=\"string\">&#123;fig:gougu&#125;</span></span>是我国古代对勾股定理的一种证明<span class=\"tag\">\\<span class=\"name\">cite</span><span class=\"string\">&#123;quanjing&#125;</span></span>。</div></pre></td></tr></table></figure></p>\n<p>公式编号的引用也可照此做法，不过需要先在公式中定义标签：<br><figure class=\"highlight tex\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">\\<span class=\"name\">begin</span><span class=\"string\">&#123;equation&#125;</span></span> <span class=\"tag\">\\<span class=\"name\">label</span><span class=\"string\">&#123;eq:gougu&#125;</span></span></div><div class=\"line\">AB^2 = BC^2 + AC^2</div><div class=\"line\"><span class=\"tag\">\\<span class=\"name\">end</span><span class=\"string\">&#123;equation&#125;</span></span></div></pre></td></tr></table></figure></p>\n<p>引用数学公式的时候一般使用数学宏包<code>amsmath</code>就定义了<code>\\eqref</code>命令，专门用于公式的引用，并能产生括号：<br>导言区引入包<br><figure class=\"highlight tex\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">\\<span class=\"name\">usepackage</span><span class=\"string\">&#123;amsmath&#125;</span></span></div></pre></td></tr></table></figure></p>\n<p>正文中引用公式：<br><figure class=\"highlight tex\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">满足式<span class=\"tag\">\\<span class=\"name\">eqref</span><span class=\"string\">&#123;eq:gougu&#125;</span></span>的整数称为<span class=\"tag\">\\<span class=\"name\">emph</span><span class=\"string\">&#123;勾股数&#125;</span></span>。</div></pre></td></tr></table></figure></p>\n<hr>\n<p>以上。</p>\n","excerpt":"<p>接上篇，写好的tex文件在这 <a href=\"https://github.com/huangyuanlove/latex_practice/blob/master/latex(1)/chapter_one.tex\">https://github.com/huangyuanlove/latex_practice/blob/master/latex(1)/chapter_one.tex</a></p>\n<h5 id=\"写个框架\"><a href=\"#写个框架\" class=\"headerlink\" title=\"写个框架\"></a>写个框架</h5><p>既然有目标了，我们先写个大概的框架，然后往里面填充内容<br><figure class=\"highlight tex\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">% coding:UTF-8</span></div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"><span class=\"tag\">\\<span class=\"name\">documentclass</span><span class=\"string\">[UTF8]</span><span class=\"string\">&#123;ctexart&#125;</span></span></div><div class=\"line\"></div><div class=\"line\"><span class=\"tag\">\\<span class=\"name\">title</span><span class=\"string\">&#123;杂谈勾股定理&#125;</span></span></div><div class=\"line\"><span class=\"tag\">\\<span class=\"name\">author</span><span class=\"string\">&#123;xuan&#125;</span></span></div><div class=\"line\"><span class=\"tag\">\\<span class=\"name\">date</span><span class=\"string\">&#123;\\today&#125;</span></span></div><div class=\"line\"></div><div class=\"line\"><span class=\"tag\">\\<span class=\"name\">bibliographystyle</span><span class=\"string\">&#123;plain&#125;</span></span></div><div class=\"line\"></div><div class=\"line\"><span class=\"tag\">\\<span class=\"name\">begin</span><span class=\"string\">&#123;document&#125;</span></span></div><div class=\"line\"></div><div class=\"line\"><span class=\"tag\">\\<span class=\"name\">maketitle</span></span></div><div class=\"line\"><span class=\"tag\">\\<span class=\"name\">tableofcontents</span></span></div><div class=\"line\"><span class=\"tag\">\\<span class=\"name\">section</span><span class=\"string\">&#123;勾股定理在古代&#125;</span></span></div><div class=\"line\"><span class=\"tag\">\\<span class=\"name\">section</span><span class=\"string\">&#123;勾股定理的近代形式&#125;</span></span></div><div class=\"line\"><span class=\"tag\">\\<span class=\"name\">bibliography</span><span class=\"string\">&#123;math&#125;</span></span></div><div class=\"line\"></div><div class=\"line\"><span class=\"tag\">\\<span class=\"name\">end</span><span class=\"string\">&#123;document&#125;</span></span></div></pre></td></tr></table></figure></p>","more":"<ul>\n<li>以 <code>%</code>开头的行是注释，源文件一行中百分号后面的内容都会被忽略。</li>\n<li>第<strong>4</strong>行是文档类，因为是中文的短文，所以用的是<code>ctexart</code>，并用[UTF8]选项说明编码方式。</li>\n<li>第<strong>6-8</strong>行声明了文章的标题、作者、日期。其中的<code>\\today</code>是当前日期。但是这些信息是通过<strong>14</strong>行的<code>\\maketitle</code>排版的。</li>\n<li>第<strong>10</strong>行的<code>\\bibliographystyle</code>声明参考文献的格式。<br>以上在<code>\\begin{document}</code>之前的部分称为<code>导言区(preamble)</code>，导言区通常用来对文档的性质做一些设置，或自定义一些命令。</li>\n<li>第<strong>12-20</strong>行以<code>\\begin{document}</code>和<code>\\end{socument}</code>声明了一个document环境，里面是论文的正文部分，也就是直接输出的部分。</li>\n<li>第<strong>14</strong>行的<code>\\maketitle</code>输出论文标题。</li>\n<li>第<strong>15</strong>行的<code>\\tableofcontents</code>输出目录。</li>\n<li>第<strong>16-17</strong>行两个<code>\\section</code>开始新的一节。</li>\n<li>第<strong>18</strong>行的<code>\\bibliography{math}</code>则是从文献数据库math(这里的math文献数据库是我们自己编辑的一个文件)中获取文献信息，打印参考文献列表。<blockquote>\n<p>为了格式清晰，源文件使用了一些空行作为分隔，在正文外的部分，空行不代表任何意义</p>\n</blockquote>\n</li>\n</ul>\n<h5 id=\"填写正文\"><a href=\"#填写正文\" class=\"headerlink\" title=\"填写正文\"></a>填写正文</h5><p>自己把大段的文字先写上再说，自己试试查看排版之后格式。</p>\n<ul>\n<li>使用空行分段，</li>\n<li>段落的第一行缩进不需要自己打空格<h5 id=\"命令与环境\"><a href=\"#命令与环境\" class=\"headerlink\" title=\"命令与环境\"></a>命令与环境</h5><h6 id=\"脚注\"><a href=\"#脚注\" class=\"headerlink\" title=\"脚注\"></a>脚注</h6>脚注是在正文<strong>欧几里得</strong>的后面用脚注命令<code>\\footnote</code>得到的。<figure class=\"highlight tex\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">该定理的严格表述和证明则见于欧几里得</div><div class=\"line\"><span class=\"tag\">\\<span class=\"name\">footnote</span><span class=\"string\">&#123;欧几里得，约公元前330--275年。&#125;</span></span></div></pre></td></tr></table></figure>\n</li>\n</ul>\n<p>在这里，<code>\\footnote</code>后面花括号内的部分是命令的参数，也就是脚注的内容。<br>注意一个细节，在表示起止年份时，用两个减号(–)，通常用来表示数字的范围。<br>文中还使用<code>\\emph</code>命令改变字体的形状，表示强调的内容：<br><figure class=\"highlight tex\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">的整数称为<span class=\"tag\">\\<span class=\"name\">emph</span><span class=\"string\">&#123;勾股数&#125;</span></span></div></pre></td></tr></table></figure></p>\n<p>一个LaTeX命令(宏)的格式为：<br>无参数：<code>\\command</code><br>有n个参数:<code>\\command&lt;arg1&gt;&lt;arg2&gt;&lt;arg3&gt;</code><br>有可选参数:<code>\\command&lt;arg——opt&gt;&lt;arg2&gt;&lt;arg3&gt;</code><br>命令都一反斜线<code>\\</code>开头，后接命令名，可以带一些参数，必选参数使用花括号括起来，可选参数使用方括号括起来。<br>引用的内容这是在正文中使用<code>quote</code>环境得到的。<br><figure class=\"highlight tex\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">我国《周髀算经》载商高（约公元前12世纪）答周公问：</div><div class=\"line\"><span class=\"tag\">\\<span class=\"name\">begin</span><span class=\"string\">&#123;quote&#125;</span></span></div><div class=\"line\">勾广三，股修四，经隅五。</div><div class=\"line\"><span class=\"tag\">\\<span class=\"name\">end</span><span class=\"string\">&#123;quote&#125;</span></span></div></pre></td></tr></table></figure></p>\n<p>quote环境即以<code>\\begin{quote}</code>和<code>\\end{quote}</code>为起止位置的部分，突出引用部分。但是quote环境不能改变引用内容的字体，因此还需要再使用改变字体的命令<br><figure class=\"highlight tex\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">\\<span class=\"name\">begin</span><span class=\"string\">&#123;quote&#125;</span></span></div><div class=\"line\"><span class=\"tag\">\\<span class=\"name\">kaishu</span></span><span class=\"tag\">\\<span class=\"name\">zihao</span><span class=\"string\">&#123;-5&#125;</span></span> 引用的内容</div><div class=\"line\"><span class=\"tag\">\\<span class=\"name\">end</span><span class=\"string\">&#123;quote&#125;</span></span></div></pre></td></tr></table></figure></p>\n<p>这里<code>\\zihao</code>是一个有参数的命令，选择字号(-5就是小五号)，而<code>\\kaishu</code>则是没有参数的命令，把字体切换为楷书，注意用空格把命令和后面的文字分开。<br>文章的摘要也是在<code>\\maketitle</code>之后用<code>abstract</code>环境生成的：<br><figure class=\"highlight tex\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">\\<span class=\"name\">begin</span><span class=\"string\">&#123;abstract&#125;</span></span></div><div class=\"line\">刚开始学<span class=\"tag\">\\<span class=\"name\">LaTeX</span></span>,如果学习不是为了装逼，那一切将毫无意义。</div><div class=\"line\"><span class=\"tag\">\\<span class=\"name\">end</span><span class=\"string\">&#123;abstract&#125;</span></span></div></pre></td></tr></table></figure></p>\n<p>当然我们也可以自定义环境，比如上面的突出引用的环境：<br>在导言区<code>\\maketitle</code>之后<br><figure class=\"highlight tex\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">\\<span class=\"name\">newenvironment</span><span class=\"string\">&#123;myquote&#125;</span><span class=\"string\">&#123;\\begin&#123;quote&#125;</span></span><span class=\"tag\">\\<span class=\"name\">kaishu</span></span><span class=\"tag\">\\<span class=\"name\">zihao</span><span class=\"string\">&#123;-5&#125;</span></span>&#125;&#123;<span class=\"tag\">\\<span class=\"name\">end</span><span class=\"string\">&#123;quote&#125;</span></span>&#125;</div></pre></td></tr></table></figure></p>\n<p>之后我们在突出引用的时候就可以这么写：<br><figure class=\"highlight tex\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">我国《周髀算经》载商高（约公元前12世纪）答周公问：</div><div class=\"line\"><span class=\"tag\">\\<span class=\"name\">begin</span><span class=\"string\">&#123;myquote&#125;</span></span></div><div class=\"line\">勾广三，股修四，经隅五。</div><div class=\"line\"><span class=\"tag\">\\<span class=\"name\">end</span><span class=\"string\">&#123;myquote&#125;</span></span></div></pre></td></tr></table></figure></p>\n<p>文章第二节的定理，是用一类定理环境输出的，定理环境是一类环境，在使用前需要先在导言区做定义：<br><figure class=\"highlight tex\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">\\<span class=\"name\">newtheorem</span><span class=\"string\">&#123;thm&#125;</span><span class=\"string\">&#123;定理&#125;</span></span></div></pre></td></tr></table></figure></p>\n<p>这就定义了一个<code>thm</code>环境，定理环境可以有一个可选参数，就是定理的名字，所以文章中的勾股定义就可以由新定义的<code>thm</code>环境得到：<br><figure class=\"highlight tex\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">\\<span class=\"name\">begin</span><span class=\"string\">&#123;thm&#125;</span><span class=\"string\">[勾股定理]</span></span></div><div class=\"line\">直角三角形斜边的平方等于两腰的平方和。</div><div class=\"line\"><span class=\"tag\">\\<span class=\"name\">end</span><span class=\"string\">&#123;thm&#125;</span></span></div></pre></td></tr></table></figure></p>\n<h6 id=\"数学公式\"><a href=\"#数学公式\" class=\"headerlink\" title=\"数学公式\"></a>数学公式</h6><p>最简单的方式就是把公式用<code>$</code>符号括起来，比如<code>$a+b$</code>就可以得到斜体的<em>a+b</em>，这种夹在行文中的公式称为”正文公式(in-text formula)”或”行内公式(inline formula)”。为了方便引用，经常会给公式编号，这种公式被称为”显式公式”或”列表公式(display formula)”,使用<code>equation</code>环境就可以方便地输入这种公式。<br><figure class=\"highlight tex\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">\\<span class=\"name\">begin</span><span class=\"string\">&#123;equation&#125;</span></span></div><div class=\"line\">a(a+b) = ab + ac</div><div class=\"line\"><span class=\"tag\">\\<span class=\"name\">end</span><span class=\"string\">&#123;equation&#125;</span></span></div></pre></td></tr></table></figure></p>\n<p> 键盘上没有的符号，就需要使用命令来输入，”角”符号”∠”,就可以用<code>\\angle</code>输入(虽然有的输入法也提供了数学符号的选项，但是不建议这么做，可以自己试试有什么区别)。<br> 数学公式还有上线标、分式、根式等，在勾股定理的表达中，就用到了上标表示乘方：<br><figure class=\"highlight tex\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">\\<span class=\"name\">begin</span><span class=\"string\">&#123;equation&#125;</span></span></div><div class=\"line\">AB^2 = BC^2 + AC^2</div><div class=\"line\"><span class=\"tag\">\\<span class=\"name\">end</span><span class=\"string\">&#123;equation&#125;</span></span></div></pre></td></tr></table></figure></p>\n<p> 符号<code>^</code>用来引入一个上标，<code>_</code>医用一个下标，如果上下标识多个字符，则需要使用花括号分组：<code>2^{10}</code>。<br> 所以90°怎么输入，在latex默认的字体中，并没有专用于表示角度的符号，输入角度的时候是通过上标输入的:<code>^\\circ</code>，其中<code>\\circ</code>通常用来表示函数符号的二元运算符<code>○</code>，我们把它的上标借用来表示角度。</p>\n<h6 id=\"插入图片\"><a href=\"#插入图片\" class=\"headerlink\" title=\"插入图片\"></a>插入图片</h6><p> 使用图片有两种途径：一个是插入事先准备好的图片，二是使用latex代码直接在文档中画图。<br> 插图功能不是由latex内核直接提供，而是有<strong>graphicx</strong>宏包提供的，要使用<strong>graphicx</strong>宏包的插图功能呢个，需要在导言区使用<code>\\usepackage</code>命令引入宏包：<br> <figure class=\"highlight tex\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">\\<span class=\"name\">documentclass</span><span class=\"string\">&#123;ctexart&#125;</span></span></div><div class=\"line\"><span class=\"tag\">\\<span class=\"name\">usepackage</span><span class=\"string\">&#123;graphicx&#125;</span></span></div></pre></td></tr></table></figure></p>\n<p> 引入<strong>graphicx</strong>宏包后，就可以使用<code>\\includegraphics</code>命令插图了：<br> <figure class=\"highlight tex\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">\\<span class=\"name\">includegraphic</span><span class=\"string\">[width=3cm]</span><span class=\"string\">&#123;gougu.png&#125;</span></span></div></pre></td></tr></table></figure></p>\n<p>这里<code>\\includegraphic</code>有两个参数，方括号中可选参数<code>width=3cm</code>设置图形在文档中显示的宽度为3cm，第二个参数则是图片的文件名(和源文件同级)，还有一些类似的参数如scale(缩放)、height等。<br>除了一些很小的图标，我们很少进行图文混排，而是使用单独的环境列出，而且很大的图形如果位置是固定，会给分页造成困难，因此，通常都把图像放在一个可以变动相对位置的环境中，称为浮动体。在浮动体中还可以给图片加入说明性标题。<br><figure class=\"highlight tex\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">\\<span class=\"name\">begin</span><span class=\"string\">&#123;figure&#125;</span><span class=\"string\">[ht]</span></span></div><div class=\"line\">  <span class=\"tag\">\\<span class=\"name\">centering</span></span></div><div class=\"line\">  <span class=\"tag\">\\<span class=\"name\">includegraphics</span><span class=\"string\">[width=3cm]</span><span class=\"string\">&#123;gougu.png&#125;</span></span></div><div class=\"line\">  <span class=\"tag\">\\<span class=\"name\">caption</span></span> &#123;<span class=\"tag\">\\<span class=\"name\">kaishu</span></span><span class=\"tag\">\\<span class=\"name\">zihao</span><span class=\"string\">&#123;-5&#125;</span></span> 宋赵爽在《周髀算经》注中做的弦图（仿制），该图给出了勾股定理的一个极具对称美德证明。&#125;</div><div class=\"line\">  <span class=\"tag\">\\<span class=\"name\">label</span><span class=\"string\">&#123;fig:gougu&#125;</span></span></div><div class=\"line\"><span class=\"tag\">\\<span class=\"name\">end</span><span class=\"string\">&#123;figure&#125;</span></span></div></pre></td></tr></table></figure></p>\n<p>在上面的代码中，第1行和第6行使用了<code>figure</code>环境，就是插图使用的浮动体环境，<code>figure</code>环境有可选参数<code>[ht]</code>，表示浮动体可以出现在环境周围的文本所在处和一页的顶部。<code>figure</code>环境内部相当于普通的段落(默认没有缩进)；第二行用生命<code>\\centering</code>表示后面的内容居中；第3行插入图片；第4行使用<code>\\caption</code>命令给插图加上自动编号和标题；第5行的<code>\\lable</code>命令则给图形定义一个标签，这个标签就可以在文章的其他地方引用<code>\\caption</code>产生的编号。</p>\n<h6 id=\"使用表格\"><a href=\"#使用表格\" class=\"headerlink\" title=\"使用表格\"></a>使用表格</h6><p>制作表格，需要确定是表格的行、列、对齐模式和表格线，这是由<code>tabular</code>环境完成的：<br><figure class=\"highlight tex\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">\\<span class=\"name\">begin</span><span class=\"string\">&#123;table&#125;</span><span class=\"string\">[h]</span></span></div><div class=\"line\"><span class=\"tag\">\\<span class=\"name\">begin</span><span class=\"string\">&#123;tabular&#125;</span><span class=\"string\">&#123;|lcr|&#125;</span></span></div><div class=\"line\"><span class=\"tag\">\\<span class=\"name\">hline</span></span></div><div class=\"line\">直角边 <span class=\"formula\">$a$</span> &amp; 直角边 <span class=\"formula\">$b$</span> &amp; 斜边 <span class=\"formula\">$c$</span><span class=\"tag\">\\<span class=\"name\">\\</span></span></div><div class=\"line\"><span class=\"tag\">\\<span class=\"name\">hline</span></span></div><div class=\"line\">3 &amp;  4 &amp; 5<span class=\"tag\">\\<span class=\"name\">\\</span></span></div><div class=\"line\">5 &amp;  12&amp;  13<span class=\"tag\">\\<span class=\"name\">\\</span></span></div><div class=\"line\"><span class=\"tag\">\\<span class=\"name\">hline</span></span></div><div class=\"line\"><span class=\"tag\">\\<span class=\"name\">end</span><span class=\"string\">&#123;tabular&#125;</span></span><span class=\"comment\">%</span></div><div class=\"line\"><span class=\"tag\">\\<span class=\"name\">qquad</span></span></div><div class=\"line\">(<span class=\"formula\">$a^2 + b^2 = c^2$</span>)</div><div class=\"line\"><span class=\"tag\">\\<span class=\"name\">end</span><span class=\"string\">&#123;table&#125;</span></span></div></pre></td></tr></table></figure></p>\n<p>表格和插图一样，一般也放在浮动环境中，即<code>table</code>环境中，参数大致和<code>figure</code>差不多；<br><code>tabular</code>环境有一个参数，里面声明了表格中列的模式，在上面的表格中<code>|lcr|</code>表示第一列的内容左对齐，第二类居中对齐，第三列居中对齐，在第一列前面和第三列后面各有一条垂直的表格线。<br>在<code>tabular</code>环境中，行与行之间用命令<code>\\\\</code>隔开，每一行内的表项使用符号<code>$</code>隔开，表格中的横线是用命令<code>\\hline</code>生成。<br>这里并没有给表格加标题，也没有把内容居中，而是把表格个一个公式并排排开，中间使用一个<code>\\qquad</code>分割，这个命令产生长为2em(大约两个’M’的宽度)的空白。因为已经使用<code>\\qquad</code>生成足够长度的空格了，所以再用<code>\\end{tabular}</code>后的注释符取消换行产生的一个多余空格。又因为表格是和正文连在一起的，不允许再浮动了，所以在<code>table</code>环境中的表示位置参数处使用了<code>[H]</code>，但是这个参数是由<strong>float</strong>宏包提供的，所以还要在导言区使用<code>\\usepackage{float}</code>。</p>\n<h6 id=\"文献引用\"><a href=\"#文献引用\" class=\"headerlink\" title=\"文献引用\"></a>文献引用</h6><p>上面提到了引用文献，是在<code>math.bib</code>这个文件中指定的，下面是<code>math.bib</code>文件的内容<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div></pre></td><td class=\"code\"><pre><div class=\"line\">% Encoding: UTF-8</div><div class=\"line\"></div><div class=\"line\">@Book&#123;Shiye,</div><div class=\"line\">  title  = &#123;几何的有名定理&#125;,</div><div class=\"line\">  year   = &#123;1986&#125;,</div><div class=\"line\">  author = &#123;矢野健太郎&#125;,</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">@Book&#123;Kline,</div><div class=\"line\">  title  = &#123;古今数学思想&#125;,</div><div class=\"line\">  year   = &#123;2002&#125;,</div><div class=\"line\">  author = &#123;克莱因&#125;,</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">@Book&#123;quanjing,</div><div class=\"line\">  title   = &#123;商高、赵爽与刘徽关于勾股定理的证明&#125;,</div><div class=\"line\">  year    = &#123;1998&#125;,</div><div class=\"line\">  author  = &#123;曲安京&#125;,</div><div class=\"line\">  volume  = &#123;20&#125;,</div><div class=\"line\">  number  = &#123;3&#125;,</div><div class=\"line\">  journal = &#123;数学传播&#125;,</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">@Comment&#123;jabref-meta: databaseType:bibtex;&#125;</div></pre></td></tr></table></figure></p>\n<p>一个文献数据文件的格式并不复杂，每一个条目包括类型、引用标签、标题、年限、作者等信息，可以手工输入，也可以通过jabref制作。<br>在实际应用中，BIBTEX数据并不需要我们自己录入，可以从相关的学科网站直接现在或是从其他类型的文献数据库转换得到。<br>BIBTEX是一个专门用于处理LATEX文档文献列表的程序，使用BIBTEX处理文献时，编译源文件需要增加为四次运行程序(在TexWorks中点击四次按钮)<br><code>pdflatex ***.tex</code><br><code>bibtex ***.aux</code><br><code>pdflatex ***.tex</code><br><code>pdflatex ***.tex</code><br>第一次运行为BIBTEX准备好辅助文件，确定数据库中的哪些文献将被列出来，然后bibtex处理辅助文件aux，从文献数据库中选取文件，按指定的格式生成文献列表的latex代码，后面两次再读入文献列表代码并生成正确的引用信息。<br>latex只选择被引用的文献，引用文献的方法是在正文中使用<code>\\cite</code>命令，如：<br><figure class=\"highlight tex\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">将勾股定理的发现归功于公元前 6 世纪的毕达哥拉斯学派<span class=\"tag\">\\<span class=\"name\">cite</span><span class=\"string\">&#123;Kline&#125;</span></span>。该学派得到了一个法则...</div><div class=\"line\">...是我国古代对勾股定理的一种证明<span class=\"tag\">\\<span class=\"name\">cite</span><span class=\"string\">&#123;quanjing&#125;</span></span>。</div></pre></td></tr></table></figure></p>\n<p><code>\\cite</code>命令的参数<code>Kline</code>和<code>quanjing</code>分别是其中两篇的引用标签，也就是在<code>math.bib</code>中每个条目第一行出现的星系，使用<code>\\cite</code>命令会在引用的文字显示文献在列表中的标号(它在第3次pdflatex编译后才能确定)，同时在辅助文件中说明某文献将被引用。如果要在列表中显示并不直接引用的文献，可以使用<code>\\nocite</code>命令，一般是把它放在<code>\\bibliography</code>之前：<br><figure class=\"highlight tex\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">\\<span class=\"name\">nocite</span><span class=\"string\">&#123;Shiye&#125;</span></span></div><div class=\"line\"><span class=\"tag\">\\<span class=\"name\">bibliography</span><span class=\"string\">&#123;math&#125;</span></span></div></pre></td></tr></table></figure></p>\n<p>目录也是自动从章节命令中提取并写入目录文件中的，在文章中我们就使用了<code>\\tableofcontents</code>命令，它将在第二次编译时生效。<br>引用并不仅限于参考文献，图表、公式的编号，只要事先设定了标签，同样可以引用。基本的交叉引用命令是<code>\\ref</code>，它以标签问参数，得到被引用标号。比如在这篇文章中，在插入图片时是引用<code>\\label</code>命令为弦图定义了标签<code>\\label{fig:gougu}</code>，这样在正文中就可以使用<br><figure class=\"highlight tex\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">图<span class=\"tag\">\\<span class=\"name\">ref</span><span class=\"string\">&#123;fig:gougu&#125;</span></span>是我国古代对勾股定理的一种证明<span class=\"tag\">\\<span class=\"name\">cite</span><span class=\"string\">&#123;quanjing&#125;</span></span>。</div></pre></td></tr></table></figure></p>\n<p>公式编号的引用也可照此做法，不过需要先在公式中定义标签：<br><figure class=\"highlight tex\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">\\<span class=\"name\">begin</span><span class=\"string\">&#123;equation&#125;</span></span> <span class=\"tag\">\\<span class=\"name\">label</span><span class=\"string\">&#123;eq:gougu&#125;</span></span></div><div class=\"line\">AB^2 = BC^2 + AC^2</div><div class=\"line\"><span class=\"tag\">\\<span class=\"name\">end</span><span class=\"string\">&#123;equation&#125;</span></span></div></pre></td></tr></table></figure></p>\n<p>引用数学公式的时候一般使用数学宏包<code>amsmath</code>就定义了<code>\\eqref</code>命令，专门用于公式的引用，并能产生括号：<br>导言区引入包<br><figure class=\"highlight tex\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">\\<span class=\"name\">usepackage</span><span class=\"string\">&#123;amsmath&#125;</span></span></div></pre></td></tr></table></figure></p>\n<p>正文中引用公式：<br><figure class=\"highlight tex\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">满足式<span class=\"tag\">\\<span class=\"name\">eqref</span><span class=\"string\">&#123;eq:gougu&#125;</span></span>的整数称为<span class=\"tag\">\\<span class=\"name\">emph</span><span class=\"string\">&#123;勾股数&#125;</span></span>。</div></pre></td></tr></table></figure></p>\n<hr>\n<p>以上。</p>"},{"title":"LaTeX笔记(四)--文档结构层次","date":"2018-02-11T09:59:21.000Z","keywords":"LaTeX","_content":"下面是介绍文档的层次结构\n<!-- more -->\n#### 标题和标题页\n在LaTeX中，使用标题通常分为两个部分：声明标题内容和实际输出标题。每个标题则由标题、作者、日期等部分组成。\n声明标题、作者和日期分别使用`\\title`，`\\author`，`\\date`命令。它们都带有一个参数，里面可以使用`\\\\`进行换行。标题的声明通常放在导言区，也可以放在标题输出之前的任何位置：\n``` tex\n\\documentclass[UTF8,titlepage]{ctexart}\n\\title {语言\\thanks{本文由XX基金会赞助}}\n\\author{huangyuan\\thanks{sdut}\\\\sdut \\and xuan\\thanks{sdut}\\\\sdut}\n\\date{戊戌初春}\n```\n`\\author`定义的参数可以分行，一般第一行是作者姓名，后面是作者的单位、联系方式等，如果文档有多个作者，则多个作者之间用`\\and`分隔。\n在声明标题和作者时，可以使用`\\thanks`命令产生一种特殊的脚注，它默认使用特殊符号和编号，通常用来表示文章的致谢、文档的版本、作者的详细信息等。\n使用`\\maketitle`命令可以输出前面声明的标题，通常`\\maketitle`是文档中document环境后面的第一个命令。整个标题的格式是预设好的，在`article`或`ctexart`中，标题不单独成页，可以使用文档类的选项`titlepage`和`notitlepage`来设置标题是否单独成页。\n#### 划分章节\nLaTeX的标准文档类可以划分多层章节，可以使用6到7个层次的章节。\n\n|层次|名称|命令|说明|\n|:---:|:---:|:---:|:---:|\n|-1|part(部分)|`\\part`|可选的最高层|\n|0|chapter(章)|`\\chapter`|report,book或ctexrep,ctexbook文档类的最高层|\n|1|section(节)|`\\section`|article或ctexart类的最高层|\n|2|subsection(小节)|`\\subsection`||\n|3|subsubsection(小小节)|`\\subsubsection`|report,book或ctexrep,ctexbook文档类默认不编号，不编目录|\n|4|paragraph(段)|`\\paragraph`|默认不编号，不编目录|\n|5|subparagraph(小段)|`\\subparagraph`|默认不编号，不编目录|\n一个文档的最高层章节可以是`\\part`，也可以不用`\\part`直接使用`\\chapter`(对book和report等)或`\\section`(对article)。除`\\part`外，只有在上一层章节存在时才能使用下一章节，否则编号会出现错误。在`\\part`下面，`\\chapter`或`\\section`是连续编号的；在其他情况下，下一级的章节随上一节的编号增加会清零重新编号。可以使用带星号的章节命令(如`\\chapter*`)来表示不编号、不编目录的章节。\n#### 多文件编译\n对于一篇只有几页的文章，把所有的内容都放进一个tex源文件就足够了，但是如果要排版更长的内容，单一文件编译的方式就不那么方便可，可以按照文档的逻辑层次，把整个文档分成多个tex源文件，这样文档的内容更便于检索和管理，也适合大型文档的多人协同编写。\nLaTeX提供`\\include{<文件名>}`命令可以用来导入两一个文件的内容作为一个章节，文件名不用带`.tex`扩展名，`\\include`命令会在之前和之后使用`\\clearpage`或`\\cleardoublepage`另起新页，同时将这个文件的内容贴到`\\include`命令所在的文字。所以我们可以这样来组织一篇较长的文章：\n``` tex\n\\documentclass[UTF8,titlepage]{ctexart}\n\\title {语言}\n\\author{huangyuan\\thanks{sdut}\\\\SDUT \\and xuan\\thanks{sdut}\\\\SDUT}\n\\date{戊戌初春}\n\\begin{document}\n\\maketitle\n\\tableofcontents\n\\include{lang-natural}\n\\include{lang-computer}\n\\end{document}\n```\n\n``` tex\n%lang-natural.tex 不能单独编译\n\\chapter{自然语言}\n这是自然语言章节\n```\n\n``` tex\n% lang-computer.tex 不能单独编译\n\\chapter{计算机语言}\n这是计算机语言章节\n```\n划分文档后，可以通过主文件来控制编译整个文档的一章或者某几章。当然可以把不要的章节注释掉，更好的办法是通过`\\includeonly{<文件列表>}`命令，其中<文件列表>是用英文都好隔开的若干文件名。在导言区使用`\\includeonly`命令以后，只有在文件列表中的文件才会被实际的引入主文件。更好的是，如果以前曾经完整的编译过整个文档，那么在使用`\\includeonly`选择编译时，原来的章节编号、页码、交叉引用等仍然会保留为前一次编译的效果：\n``` tex\n\\documentclass[UTF8,titlepage]{ctexart}\n\\title {语言}\n\\author{huangyuan\\thanks{sdut}\\\\SDUT \\and xuan\\thanks{sdut}\\\\SDUT}\n\\includeonly{lang-natural}\n\\date{戊戌初春}\n\\begin{document}\n\\maketitle\n\\tableofcontents\n\\include{lang-natural}\n\\include{lang-computer}\n\\end{document}\n```\n值得注意的是，在使用`\\include`命令时，最好不要在子文件中新定义计数器、声明新字体，否则在使用`\\includeonly`时，会因为找不到出现在辅助文件中而在源文件中缺失的计数器而出错。\n比`\\include`命令更一般的是`\\input`命令，它直接把文件的内容复制到`\\input`命令所在的文字，不做其他多余的操作。`\\input`命令接受一个文件名参数，文件名可以带扩展名，也可以不带扩展名(此时认为扩展名是.tex)。\n一般可以把导言区、复杂图标代码放在一个单独文件中，然后在主文件中使用`\\input`插入。在**被引入的文件**末尾，可以使用`\\endinput`命令显式的结束文件的读入，在`\\endinput`命令的后面，就可以直接写一些注释性的文字，而不必再加入注释符号。\n\n----\n以上","source":"_posts/LaTeX笔记-四.md","raw":"---\ntitle: LaTeX笔记(四)--文档结构层次\ndate: 2018-02-11 17:59:21\ntags: [LaTeX]\nkeywords: LaTeX\n---\n下面是介绍文档的层次结构\n<!-- more -->\n#### 标题和标题页\n在LaTeX中，使用标题通常分为两个部分：声明标题内容和实际输出标题。每个标题则由标题、作者、日期等部分组成。\n声明标题、作者和日期分别使用`\\title`，`\\author`，`\\date`命令。它们都带有一个参数，里面可以使用`\\\\`进行换行。标题的声明通常放在导言区，也可以放在标题输出之前的任何位置：\n``` tex\n\\documentclass[UTF8,titlepage]{ctexart}\n\\title {语言\\thanks{本文由XX基金会赞助}}\n\\author{huangyuan\\thanks{sdut}\\\\sdut \\and xuan\\thanks{sdut}\\\\sdut}\n\\date{戊戌初春}\n```\n`\\author`定义的参数可以分行，一般第一行是作者姓名，后面是作者的单位、联系方式等，如果文档有多个作者，则多个作者之间用`\\and`分隔。\n在声明标题和作者时，可以使用`\\thanks`命令产生一种特殊的脚注，它默认使用特殊符号和编号，通常用来表示文章的致谢、文档的版本、作者的详细信息等。\n使用`\\maketitle`命令可以输出前面声明的标题，通常`\\maketitle`是文档中document环境后面的第一个命令。整个标题的格式是预设好的，在`article`或`ctexart`中，标题不单独成页，可以使用文档类的选项`titlepage`和`notitlepage`来设置标题是否单独成页。\n#### 划分章节\nLaTeX的标准文档类可以划分多层章节，可以使用6到7个层次的章节。\n\n|层次|名称|命令|说明|\n|:---:|:---:|:---:|:---:|\n|-1|part(部分)|`\\part`|可选的最高层|\n|0|chapter(章)|`\\chapter`|report,book或ctexrep,ctexbook文档类的最高层|\n|1|section(节)|`\\section`|article或ctexart类的最高层|\n|2|subsection(小节)|`\\subsection`||\n|3|subsubsection(小小节)|`\\subsubsection`|report,book或ctexrep,ctexbook文档类默认不编号，不编目录|\n|4|paragraph(段)|`\\paragraph`|默认不编号，不编目录|\n|5|subparagraph(小段)|`\\subparagraph`|默认不编号，不编目录|\n一个文档的最高层章节可以是`\\part`，也可以不用`\\part`直接使用`\\chapter`(对book和report等)或`\\section`(对article)。除`\\part`外，只有在上一层章节存在时才能使用下一章节，否则编号会出现错误。在`\\part`下面，`\\chapter`或`\\section`是连续编号的；在其他情况下，下一级的章节随上一节的编号增加会清零重新编号。可以使用带星号的章节命令(如`\\chapter*`)来表示不编号、不编目录的章节。\n#### 多文件编译\n对于一篇只有几页的文章，把所有的内容都放进一个tex源文件就足够了，但是如果要排版更长的内容，单一文件编译的方式就不那么方便可，可以按照文档的逻辑层次，把整个文档分成多个tex源文件，这样文档的内容更便于检索和管理，也适合大型文档的多人协同编写。\nLaTeX提供`\\include{<文件名>}`命令可以用来导入两一个文件的内容作为一个章节，文件名不用带`.tex`扩展名，`\\include`命令会在之前和之后使用`\\clearpage`或`\\cleardoublepage`另起新页，同时将这个文件的内容贴到`\\include`命令所在的文字。所以我们可以这样来组织一篇较长的文章：\n``` tex\n\\documentclass[UTF8,titlepage]{ctexart}\n\\title {语言}\n\\author{huangyuan\\thanks{sdut}\\\\SDUT \\and xuan\\thanks{sdut}\\\\SDUT}\n\\date{戊戌初春}\n\\begin{document}\n\\maketitle\n\\tableofcontents\n\\include{lang-natural}\n\\include{lang-computer}\n\\end{document}\n```\n\n``` tex\n%lang-natural.tex 不能单独编译\n\\chapter{自然语言}\n这是自然语言章节\n```\n\n``` tex\n% lang-computer.tex 不能单独编译\n\\chapter{计算机语言}\n这是计算机语言章节\n```\n划分文档后，可以通过主文件来控制编译整个文档的一章或者某几章。当然可以把不要的章节注释掉，更好的办法是通过`\\includeonly{<文件列表>}`命令，其中<文件列表>是用英文都好隔开的若干文件名。在导言区使用`\\includeonly`命令以后，只有在文件列表中的文件才会被实际的引入主文件。更好的是，如果以前曾经完整的编译过整个文档，那么在使用`\\includeonly`选择编译时，原来的章节编号、页码、交叉引用等仍然会保留为前一次编译的效果：\n``` tex\n\\documentclass[UTF8,titlepage]{ctexart}\n\\title {语言}\n\\author{huangyuan\\thanks{sdut}\\\\SDUT \\and xuan\\thanks{sdut}\\\\SDUT}\n\\includeonly{lang-natural}\n\\date{戊戌初春}\n\\begin{document}\n\\maketitle\n\\tableofcontents\n\\include{lang-natural}\n\\include{lang-computer}\n\\end{document}\n```\n值得注意的是，在使用`\\include`命令时，最好不要在子文件中新定义计数器、声明新字体，否则在使用`\\includeonly`时，会因为找不到出现在辅助文件中而在源文件中缺失的计数器而出错。\n比`\\include`命令更一般的是`\\input`命令，它直接把文件的内容复制到`\\input`命令所在的文字，不做其他多余的操作。`\\input`命令接受一个文件名参数，文件名可以带扩展名，也可以不带扩展名(此时认为扩展名是.tex)。\n一般可以把导言区、复杂图标代码放在一个单独文件中，然后在主文件中使用`\\input`插入。在**被引入的文件**末尾，可以使用`\\endinput`命令显式的结束文件的读入，在`\\endinput`命令的后面，就可以直接写一些注释性的文字，而不必再加入注释符号。\n\n----\n以上","slug":"LaTeX笔记-四","published":1,"updated":"2018-08-04T05:15:34.295Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjl3vbtr3001pisdgqj55nvex","content":"<p>下面是介绍文档的层次结构<br><a id=\"more\"></a></p>\n<h4 id=\"标题和标题页\"><a href=\"#标题和标题页\" class=\"headerlink\" title=\"标题和标题页\"></a>标题和标题页</h4><p>在LaTeX中，使用标题通常分为两个部分：声明标题内容和实际输出标题。每个标题则由标题、作者、日期等部分组成。<br>声明标题、作者和日期分别使用<code>\\title</code>，<code>\\author</code>，<code>\\date</code>命令。它们都带有一个参数，里面可以使用<code>\\\\</code>进行换行。标题的声明通常放在导言区，也可以放在标题输出之前的任何位置：<br><figure class=\"highlight tex\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">\\<span class=\"name\">documentclass</span><span class=\"string\">[UTF8,titlepage]</span><span class=\"string\">&#123;ctexart&#125;</span></span></div><div class=\"line\"><span class=\"tag\">\\<span class=\"name\">title</span></span> &#123;语言<span class=\"tag\">\\<span class=\"name\">thanks</span><span class=\"string\">&#123;本文由XX基金会赞助&#125;</span></span>&#125;</div><div class=\"line\"><span class=\"tag\">\\<span class=\"name\">author</span><span class=\"string\">&#123;huangyuan\\thanks&#123;sdut&#125;</span></span><span class=\"tag\">\\<span class=\"name\">\\</span></span>sdut <span class=\"tag\">\\<span class=\"name\">and</span></span> xuan<span class=\"tag\">\\<span class=\"name\">thanks</span><span class=\"string\">&#123;sdut&#125;</span></span><span class=\"tag\">\\<span class=\"name\">\\</span></span>sdut&#125;</div><div class=\"line\"><span class=\"tag\">\\<span class=\"name\">date</span><span class=\"string\">&#123;戊戌初春&#125;</span></span></div></pre></td></tr></table></figure></p>\n<p><code>\\author</code>定义的参数可以分行，一般第一行是作者姓名，后面是作者的单位、联系方式等，如果文档有多个作者，则多个作者之间用<code>\\and</code>分隔。<br>在声明标题和作者时，可以使用<code>\\thanks</code>命令产生一种特殊的脚注，它默认使用特殊符号和编号，通常用来表示文章的致谢、文档的版本、作者的详细信息等。<br>使用<code>\\maketitle</code>命令可以输出前面声明的标题，通常<code>\\maketitle</code>是文档中document环境后面的第一个命令。整个标题的格式是预设好的，在<code>article</code>或<code>ctexart</code>中，标题不单独成页，可以使用文档类的选项<code>titlepage</code>和<code>notitlepage</code>来设置标题是否单独成页。</p>\n<h4 id=\"划分章节\"><a href=\"#划分章节\" class=\"headerlink\" title=\"划分章节\"></a>划分章节</h4><p>LaTeX的标准文档类可以划分多层章节，可以使用6到7个层次的章节。</p>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:center\">层次</th>\n<th style=\"text-align:center\">名称</th>\n<th style=\"text-align:center\">命令</th>\n<th style=\"text-align:center\">说明</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\">-1</td>\n<td style=\"text-align:center\">part(部分)</td>\n<td style=\"text-align:center\"><code>\\part</code></td>\n<td style=\"text-align:center\">可选的最高层</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">0</td>\n<td style=\"text-align:center\">chapter(章)</td>\n<td style=\"text-align:center\"><code>\\chapter</code></td>\n<td style=\"text-align:center\">report,book或ctexrep,ctexbook文档类的最高层</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">1</td>\n<td style=\"text-align:center\">section(节)</td>\n<td style=\"text-align:center\"><code>\\section</code></td>\n<td style=\"text-align:center\">article或ctexart类的最高层</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">2</td>\n<td style=\"text-align:center\">subsection(小节)</td>\n<td style=\"text-align:center\"><code>\\subsection</code></td>\n<td style=\"text-align:center\"></td>\n</tr>\n<tr>\n<td style=\"text-align:center\">3</td>\n<td style=\"text-align:center\">subsubsection(小小节)</td>\n<td style=\"text-align:center\"><code>\\subsubsection</code></td>\n<td style=\"text-align:center\">report,book或ctexrep,ctexbook文档类默认不编号，不编目录</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">4</td>\n<td style=\"text-align:center\">paragraph(段)</td>\n<td style=\"text-align:center\"><code>\\paragraph</code></td>\n<td style=\"text-align:center\">默认不编号，不编目录</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">5</td>\n<td style=\"text-align:center\">subparagraph(小段)</td>\n<td style=\"text-align:center\"><code>\\subparagraph</code></td>\n<td style=\"text-align:center\">默认不编号，不编目录</td>\n</tr>\n</tbody>\n</table>\n<p>一个文档的最高层章节可以是<code>\\part</code>，也可以不用<code>\\part</code>直接使用<code>\\chapter</code>(对book和report等)或<code>\\section</code>(对article)。除<code>\\part</code>外，只有在上一层章节存在时才能使用下一章节，否则编号会出现错误。在<code>\\part</code>下面，<code>\\chapter</code>或<code>\\section</code>是连续编号的；在其他情况下，下一级的章节随上一节的编号增加会清零重新编号。可以使用带星号的章节命令(如<code>\\chapter*</code>)来表示不编号、不编目录的章节。</p>\n<h4 id=\"多文件编译\"><a href=\"#多文件编译\" class=\"headerlink\" title=\"多文件编译\"></a>多文件编译</h4><p>对于一篇只有几页的文章，把所有的内容都放进一个tex源文件就足够了，但是如果要排版更长的内容，单一文件编译的方式就不那么方便可，可以按照文档的逻辑层次，把整个文档分成多个tex源文件，这样文档的内容更便于检索和管理，也适合大型文档的多人协同编写。<br>LaTeX提供<code>\\include{&lt;文件名&gt;}</code>命令可以用来导入两一个文件的内容作为一个章节，文件名不用带<code>.tex</code>扩展名，<code>\\include</code>命令会在之前和之后使用<code>\\clearpage</code>或<code>\\cleardoublepage</code>另起新页，同时将这个文件的内容贴到<code>\\include</code>命令所在的文字。所以我们可以这样来组织一篇较长的文章：<br><figure class=\"highlight tex\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">\\<span class=\"name\">documentclass</span><span class=\"string\">[UTF8,titlepage]</span><span class=\"string\">&#123;ctexart&#125;</span></span></div><div class=\"line\"><span class=\"tag\">\\<span class=\"name\">title</span></span> &#123;语言&#125;</div><div class=\"line\"><span class=\"tag\">\\<span class=\"name\">author</span><span class=\"string\">&#123;huangyuan\\thanks&#123;sdut&#125;</span></span><span class=\"tag\">\\<span class=\"name\">\\</span></span>SDUT <span class=\"tag\">\\<span class=\"name\">and</span></span> xuan<span class=\"tag\">\\<span class=\"name\">thanks</span><span class=\"string\">&#123;sdut&#125;</span></span><span class=\"tag\">\\<span class=\"name\">\\</span></span>SDUT&#125;</div><div class=\"line\"><span class=\"tag\">\\<span class=\"name\">date</span><span class=\"string\">&#123;戊戌初春&#125;</span></span></div><div class=\"line\"><span class=\"tag\">\\<span class=\"name\">begin</span><span class=\"string\">&#123;document&#125;</span></span></div><div class=\"line\"><span class=\"tag\">\\<span class=\"name\">maketitle</span></span></div><div class=\"line\"><span class=\"tag\">\\<span class=\"name\">tableofcontents</span></span></div><div class=\"line\"><span class=\"tag\">\\<span class=\"name\">include</span><span class=\"string\">&#123;lang-natural&#125;</span></span></div><div class=\"line\"><span class=\"tag\">\\<span class=\"name\">include</span><span class=\"string\">&#123;lang-computer&#125;</span></span></div><div class=\"line\"><span class=\"tag\">\\<span class=\"name\">end</span><span class=\"string\">&#123;document&#125;</span></span></div></pre></td></tr></table></figure></p>\n<figure class=\"highlight tex\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">%lang-natural.tex 不能单独编译</span></div><div class=\"line\"><span class=\"tag\">\\<span class=\"name\">chapter</span><span class=\"string\">&#123;自然语言&#125;</span></span></div><div class=\"line\">这是自然语言章节</div></pre></td></tr></table></figure>\n<figure class=\"highlight tex\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">% lang-computer.tex 不能单独编译</span></div><div class=\"line\"><span class=\"tag\">\\<span class=\"name\">chapter</span><span class=\"string\">&#123;计算机语言&#125;</span></span></div><div class=\"line\">这是计算机语言章节</div></pre></td></tr></table></figure>\n<p>划分文档后，可以通过主文件来控制编译整个文档的一章或者某几章。当然可以把不要的章节注释掉，更好的办法是通过<code>\\includeonly{&lt;文件列表&gt;}</code>命令，其中&lt;文件列表&gt;是用英文都好隔开的若干文件名。在导言区使用<code>\\includeonly</code>命令以后，只有在文件列表中的文件才会被实际的引入主文件。更好的是，如果以前曾经完整的编译过整个文档，那么在使用<code>\\includeonly</code>选择编译时，原来的章节编号、页码、交叉引用等仍然会保留为前一次编译的效果：<br><figure class=\"highlight tex\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">\\<span class=\"name\">documentclass</span><span class=\"string\">[UTF8,titlepage]</span><span class=\"string\">&#123;ctexart&#125;</span></span></div><div class=\"line\"><span class=\"tag\">\\<span class=\"name\">title</span></span> &#123;语言&#125;</div><div class=\"line\"><span class=\"tag\">\\<span class=\"name\">author</span><span class=\"string\">&#123;huangyuan\\thanks&#123;sdut&#125;</span></span><span class=\"tag\">\\<span class=\"name\">\\</span></span>SDUT <span class=\"tag\">\\<span class=\"name\">and</span></span> xuan<span class=\"tag\">\\<span class=\"name\">thanks</span><span class=\"string\">&#123;sdut&#125;</span></span><span class=\"tag\">\\<span class=\"name\">\\</span></span>SDUT&#125;</div><div class=\"line\"><span class=\"tag\">\\<span class=\"name\">includeonly</span><span class=\"string\">&#123;lang-natural&#125;</span></span></div><div class=\"line\"><span class=\"tag\">\\<span class=\"name\">date</span><span class=\"string\">&#123;戊戌初春&#125;</span></span></div><div class=\"line\"><span class=\"tag\">\\<span class=\"name\">begin</span><span class=\"string\">&#123;document&#125;</span></span></div><div class=\"line\"><span class=\"tag\">\\<span class=\"name\">maketitle</span></span></div><div class=\"line\"><span class=\"tag\">\\<span class=\"name\">tableofcontents</span></span></div><div class=\"line\"><span class=\"tag\">\\<span class=\"name\">include</span><span class=\"string\">&#123;lang-natural&#125;</span></span></div><div class=\"line\"><span class=\"tag\">\\<span class=\"name\">include</span><span class=\"string\">&#123;lang-computer&#125;</span></span></div><div class=\"line\"><span class=\"tag\">\\<span class=\"name\">end</span><span class=\"string\">&#123;document&#125;</span></span></div></pre></td></tr></table></figure></p>\n<p>值得注意的是，在使用<code>\\include</code>命令时，最好不要在子文件中新定义计数器、声明新字体，否则在使用<code>\\includeonly</code>时，会因为找不到出现在辅助文件中而在源文件中缺失的计数器而出错。<br>比<code>\\include</code>命令更一般的是<code>\\input</code>命令，它直接把文件的内容复制到<code>\\input</code>命令所在的文字，不做其他多余的操作。<code>\\input</code>命令接受一个文件名参数，文件名可以带扩展名，也可以不带扩展名(此时认为扩展名是.tex)。<br>一般可以把导言区、复杂图标代码放在一个单独文件中，然后在主文件中使用<code>\\input</code>插入。在<strong>被引入的文件</strong>末尾，可以使用<code>\\endinput</code>命令显式的结束文件的读入，在<code>\\endinput</code>命令的后面，就可以直接写一些注释性的文字，而不必再加入注释符号。</p>\n<hr>\n<p>以上</p>\n","excerpt":"<p>下面是介绍文档的层次结构<br>","more":"</p>\n<h4 id=\"标题和标题页\"><a href=\"#标题和标题页\" class=\"headerlink\" title=\"标题和标题页\"></a>标题和标题页</h4><p>在LaTeX中，使用标题通常分为两个部分：声明标题内容和实际输出标题。每个标题则由标题、作者、日期等部分组成。<br>声明标题、作者和日期分别使用<code>\\title</code>，<code>\\author</code>，<code>\\date</code>命令。它们都带有一个参数，里面可以使用<code>\\\\</code>进行换行。标题的声明通常放在导言区，也可以放在标题输出之前的任何位置：<br><figure class=\"highlight tex\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">\\<span class=\"name\">documentclass</span><span class=\"string\">[UTF8,titlepage]</span><span class=\"string\">&#123;ctexart&#125;</span></span></div><div class=\"line\"><span class=\"tag\">\\<span class=\"name\">title</span></span> &#123;语言<span class=\"tag\">\\<span class=\"name\">thanks</span><span class=\"string\">&#123;本文由XX基金会赞助&#125;</span></span>&#125;</div><div class=\"line\"><span class=\"tag\">\\<span class=\"name\">author</span><span class=\"string\">&#123;huangyuan\\thanks&#123;sdut&#125;</span></span><span class=\"tag\">\\<span class=\"name\">\\</span></span>sdut <span class=\"tag\">\\<span class=\"name\">and</span></span> xuan<span class=\"tag\">\\<span class=\"name\">thanks</span><span class=\"string\">&#123;sdut&#125;</span></span><span class=\"tag\">\\<span class=\"name\">\\</span></span>sdut&#125;</div><div class=\"line\"><span class=\"tag\">\\<span class=\"name\">date</span><span class=\"string\">&#123;戊戌初春&#125;</span></span></div></pre></td></tr></table></figure></p>\n<p><code>\\author</code>定义的参数可以分行，一般第一行是作者姓名，后面是作者的单位、联系方式等，如果文档有多个作者，则多个作者之间用<code>\\and</code>分隔。<br>在声明标题和作者时，可以使用<code>\\thanks</code>命令产生一种特殊的脚注，它默认使用特殊符号和编号，通常用来表示文章的致谢、文档的版本、作者的详细信息等。<br>使用<code>\\maketitle</code>命令可以输出前面声明的标题，通常<code>\\maketitle</code>是文档中document环境后面的第一个命令。整个标题的格式是预设好的，在<code>article</code>或<code>ctexart</code>中，标题不单独成页，可以使用文档类的选项<code>titlepage</code>和<code>notitlepage</code>来设置标题是否单独成页。</p>\n<h4 id=\"划分章节\"><a href=\"#划分章节\" class=\"headerlink\" title=\"划分章节\"></a>划分章节</h4><p>LaTeX的标准文档类可以划分多层章节，可以使用6到7个层次的章节。</p>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:center\">层次</th>\n<th style=\"text-align:center\">名称</th>\n<th style=\"text-align:center\">命令</th>\n<th style=\"text-align:center\">说明</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\">-1</td>\n<td style=\"text-align:center\">part(部分)</td>\n<td style=\"text-align:center\"><code>\\part</code></td>\n<td style=\"text-align:center\">可选的最高层</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">0</td>\n<td style=\"text-align:center\">chapter(章)</td>\n<td style=\"text-align:center\"><code>\\chapter</code></td>\n<td style=\"text-align:center\">report,book或ctexrep,ctexbook文档类的最高层</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">1</td>\n<td style=\"text-align:center\">section(节)</td>\n<td style=\"text-align:center\"><code>\\section</code></td>\n<td style=\"text-align:center\">article或ctexart类的最高层</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">2</td>\n<td style=\"text-align:center\">subsection(小节)</td>\n<td style=\"text-align:center\"><code>\\subsection</code></td>\n<td style=\"text-align:center\"></td>\n</tr>\n<tr>\n<td style=\"text-align:center\">3</td>\n<td style=\"text-align:center\">subsubsection(小小节)</td>\n<td style=\"text-align:center\"><code>\\subsubsection</code></td>\n<td style=\"text-align:center\">report,book或ctexrep,ctexbook文档类默认不编号，不编目录</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">4</td>\n<td style=\"text-align:center\">paragraph(段)</td>\n<td style=\"text-align:center\"><code>\\paragraph</code></td>\n<td style=\"text-align:center\">默认不编号，不编目录</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">5</td>\n<td style=\"text-align:center\">subparagraph(小段)</td>\n<td style=\"text-align:center\"><code>\\subparagraph</code></td>\n<td style=\"text-align:center\">默认不编号，不编目录</td>\n</tr>\n</tbody>\n</table>\n<p>一个文档的最高层章节可以是<code>\\part</code>，也可以不用<code>\\part</code>直接使用<code>\\chapter</code>(对book和report等)或<code>\\section</code>(对article)。除<code>\\part</code>外，只有在上一层章节存在时才能使用下一章节，否则编号会出现错误。在<code>\\part</code>下面，<code>\\chapter</code>或<code>\\section</code>是连续编号的；在其他情况下，下一级的章节随上一节的编号增加会清零重新编号。可以使用带星号的章节命令(如<code>\\chapter*</code>)来表示不编号、不编目录的章节。</p>\n<h4 id=\"多文件编译\"><a href=\"#多文件编译\" class=\"headerlink\" title=\"多文件编译\"></a>多文件编译</h4><p>对于一篇只有几页的文章，把所有的内容都放进一个tex源文件就足够了，但是如果要排版更长的内容，单一文件编译的方式就不那么方便可，可以按照文档的逻辑层次，把整个文档分成多个tex源文件，这样文档的内容更便于检索和管理，也适合大型文档的多人协同编写。<br>LaTeX提供<code>\\include{&lt;文件名&gt;}</code>命令可以用来导入两一个文件的内容作为一个章节，文件名不用带<code>.tex</code>扩展名，<code>\\include</code>命令会在之前和之后使用<code>\\clearpage</code>或<code>\\cleardoublepage</code>另起新页，同时将这个文件的内容贴到<code>\\include</code>命令所在的文字。所以我们可以这样来组织一篇较长的文章：<br><figure class=\"highlight tex\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">\\<span class=\"name\">documentclass</span><span class=\"string\">[UTF8,titlepage]</span><span class=\"string\">&#123;ctexart&#125;</span></span></div><div class=\"line\"><span class=\"tag\">\\<span class=\"name\">title</span></span> &#123;语言&#125;</div><div class=\"line\"><span class=\"tag\">\\<span class=\"name\">author</span><span class=\"string\">&#123;huangyuan\\thanks&#123;sdut&#125;</span></span><span class=\"tag\">\\<span class=\"name\">\\</span></span>SDUT <span class=\"tag\">\\<span class=\"name\">and</span></span> xuan<span class=\"tag\">\\<span class=\"name\">thanks</span><span class=\"string\">&#123;sdut&#125;</span></span><span class=\"tag\">\\<span class=\"name\">\\</span></span>SDUT&#125;</div><div class=\"line\"><span class=\"tag\">\\<span class=\"name\">date</span><span class=\"string\">&#123;戊戌初春&#125;</span></span></div><div class=\"line\"><span class=\"tag\">\\<span class=\"name\">begin</span><span class=\"string\">&#123;document&#125;</span></span></div><div class=\"line\"><span class=\"tag\">\\<span class=\"name\">maketitle</span></span></div><div class=\"line\"><span class=\"tag\">\\<span class=\"name\">tableofcontents</span></span></div><div class=\"line\"><span class=\"tag\">\\<span class=\"name\">include</span><span class=\"string\">&#123;lang-natural&#125;</span></span></div><div class=\"line\"><span class=\"tag\">\\<span class=\"name\">include</span><span class=\"string\">&#123;lang-computer&#125;</span></span></div><div class=\"line\"><span class=\"tag\">\\<span class=\"name\">end</span><span class=\"string\">&#123;document&#125;</span></span></div></pre></td></tr></table></figure></p>\n<figure class=\"highlight tex\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">%lang-natural.tex 不能单独编译</span></div><div class=\"line\"><span class=\"tag\">\\<span class=\"name\">chapter</span><span class=\"string\">&#123;自然语言&#125;</span></span></div><div class=\"line\">这是自然语言章节</div></pre></td></tr></table></figure>\n<figure class=\"highlight tex\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">% lang-computer.tex 不能单独编译</span></div><div class=\"line\"><span class=\"tag\">\\<span class=\"name\">chapter</span><span class=\"string\">&#123;计算机语言&#125;</span></span></div><div class=\"line\">这是计算机语言章节</div></pre></td></tr></table></figure>\n<p>划分文档后，可以通过主文件来控制编译整个文档的一章或者某几章。当然可以把不要的章节注释掉，更好的办法是通过<code>\\includeonly{&lt;文件列表&gt;}</code>命令，其中&lt;文件列表&gt;是用英文都好隔开的若干文件名。在导言区使用<code>\\includeonly</code>命令以后，只有在文件列表中的文件才会被实际的引入主文件。更好的是，如果以前曾经完整的编译过整个文档，那么在使用<code>\\includeonly</code>选择编译时，原来的章节编号、页码、交叉引用等仍然会保留为前一次编译的效果：<br><figure class=\"highlight tex\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">\\<span class=\"name\">documentclass</span><span class=\"string\">[UTF8,titlepage]</span><span class=\"string\">&#123;ctexart&#125;</span></span></div><div class=\"line\"><span class=\"tag\">\\<span class=\"name\">title</span></span> &#123;语言&#125;</div><div class=\"line\"><span class=\"tag\">\\<span class=\"name\">author</span><span class=\"string\">&#123;huangyuan\\thanks&#123;sdut&#125;</span></span><span class=\"tag\">\\<span class=\"name\">\\</span></span>SDUT <span class=\"tag\">\\<span class=\"name\">and</span></span> xuan<span class=\"tag\">\\<span class=\"name\">thanks</span><span class=\"string\">&#123;sdut&#125;</span></span><span class=\"tag\">\\<span class=\"name\">\\</span></span>SDUT&#125;</div><div class=\"line\"><span class=\"tag\">\\<span class=\"name\">includeonly</span><span class=\"string\">&#123;lang-natural&#125;</span></span></div><div class=\"line\"><span class=\"tag\">\\<span class=\"name\">date</span><span class=\"string\">&#123;戊戌初春&#125;</span></span></div><div class=\"line\"><span class=\"tag\">\\<span class=\"name\">begin</span><span class=\"string\">&#123;document&#125;</span></span></div><div class=\"line\"><span class=\"tag\">\\<span class=\"name\">maketitle</span></span></div><div class=\"line\"><span class=\"tag\">\\<span class=\"name\">tableofcontents</span></span></div><div class=\"line\"><span class=\"tag\">\\<span class=\"name\">include</span><span class=\"string\">&#123;lang-natural&#125;</span></span></div><div class=\"line\"><span class=\"tag\">\\<span class=\"name\">include</span><span class=\"string\">&#123;lang-computer&#125;</span></span></div><div class=\"line\"><span class=\"tag\">\\<span class=\"name\">end</span><span class=\"string\">&#123;document&#125;</span></span></div></pre></td></tr></table></figure></p>\n<p>值得注意的是，在使用<code>\\include</code>命令时，最好不要在子文件中新定义计数器、声明新字体，否则在使用<code>\\includeonly</code>时，会因为找不到出现在辅助文件中而在源文件中缺失的计数器而出错。<br>比<code>\\include</code>命令更一般的是<code>\\input</code>命令，它直接把文件的内容复制到<code>\\input</code>命令所在的文字，不做其他多余的操作。<code>\\input</code>命令接受一个文件名参数，文件名可以带扩展名，也可以不带扩展名(此时认为扩展名是.tex)。<br>一般可以把导言区、复杂图标代码放在一个单独文件中，然后在主文件中使用<code>\\input</code>插入。在<strong>被引入的文件</strong>末尾，可以使用<code>\\endinput</code>命令显式的结束文件的读入，在<code>\\endinput</code>命令的后面，就可以直接写一些注释性的文字，而不必再加入注释符号。</p>\n<hr>\n<p>以上</p>"},{"title":"LaTeX笔记-六(数学公式)","date":"2018-02-27T08:17:51.000Z","keywords":"LaTeX数学公式","_content":"TeX有两种数学公式，一种是夹杂在行文段落中的公式，如$\\int f(x) \\text{d}x=1$,一般称为**行内(inline)**数学公式，或**正文(in-text)**数学公式;另一种就是像下面这样单独占据郑航居中展示出来，称为**显示**数学公式\n$$\\sum_{i=0}^N \\int_a^bg(t,i)\\text{d}$$\n\n在TeX中，行内公式一般在前后单个美元符号\\$...\\$表示，显示公式用连续的两个美元符号\\$\\$...\\$\\$表示\n<!--more-->\n#### 基础\n在数学模式下，符号会使用单独的字体，字母通常是倾斜的意大利体，数字和符号则是自立体，仔细看的话，数学符号之间的距离也与一般的水平模式不同：\n$a + b = b + a$,如$ 1 + 2 = 2 + 1$\n正常模式\na + b = b + a，如 1 + 2 = 2 + 1\n因此，在排版数学公式时，即使是没有任何特殊符号的算式$1+1$也要进入数学模式，使用\\$1+1\\$而不是普通文字的1+1\nc除了使用单个美元符号，在LaTeX中还额外定义了命令格式与环境格式的方式输入行内公式，即使用命令`\\(`和`\\)`环境括起来一个行内数学公式，如`$a+b$`也可以写成`\\(a+b\\)`或是`\\begin{math}a+b\\end{math}`。这两种形式提供了更好的错误检查，并且可以更明确地看出公式的开始于结束，也不容易混淆。\n同样的，LaTeX中也定义了命令形式和环境形式的输入方法，即使用`\\[`和`\\]`命令或是`displaymath`环境括起一个显示数学公式，例如：`\\[a+b=b+a\\]`,虽然并非必须，但最好在源代码中就把单独占据一行的显示公式放在单独的行内，使代码更清晰，推荐使用的方式是`\\[...\\]`，`$$...$$`会产生不良的间距，缺少错误检查，并且不能正确处理fleqn等文档选项，应该避免使用，而`displaymath`环境可能显得冗长。\nLaTeX还提供了带自动编号的数学公式，可以用`equation`环境表示，公式后还可以带引用的标签，例如：\n``` tex \n\\begin{equation}\n  a+b=b+a \\label{eq:commutative}\n\\end{equation}\n```\n#### 上标与下标\n上标和下标是两种最常见的数学结构，它们的形式也很朴素：上标一般在原符号的右上方，下标一般在原符号的右下方，有时也在正上方和正下方，例如：\n\n$$\\sum_{i=1}^{n}\\max_a10^na_i\\int_Da^2_i$$\n\n在TeX中，上标用特殊字符`^`表示，下标用特殊字符`_`表示。在数学模式中，符号`^`和`_`的用法差不多相当于带一个参数的命令，如**\\$10^n\\$**可以得到 $10^n$ ,而**\\$a_i\\$**可以得到 **$a_i$** 当上标和下标多余一个字符时，需要使用分组确定上下标范围，如**\\$A_{ij}=2^{i+j}\\$**得到**$A_{ij}=2^{i+j}$**\n上标和下标可以同时使用，也可以嵌套使用。同时使用上标和下标，上下标的先后次序并不重要，二者互不影响，嵌套使用上下标时，则外层一定要使用分组。数学公式中空格是不起实际作用的，适当的空格可以将代码分隔得好看一些。\n数学公式中单引号是一种特殊的上标，表示用符号`\\prime`(即')做上标，可以与下标混用，也可以连续使用，但不能与上标直接混用，如：\n```tex\n$a=a'$,$b_0'=b_0''$,\n${c'}^2=(c')^2$\n```\n得到\n$a=a'$,$b_0'=b_0''$,${c'}^2=(c')^2$\n#### 上下画线与花括号\n`\\overline` 和 `\\underline`命令可用来在公式的上方和下方划横线，`overbrace` 和 `underbrace`命令可以在公式上方和下方带上花括号如：\n\n|代码|结果|\n|:----:|:----:|\n|`$\\overleftarrow{a+b}$`| $\\overleftarrow{a+b}$|\n|`$\\overrightarrow{a+b}$` |$\\overrightarrow{a+b}$|\n|`$\\overleftrightarrow{a+b}$`| $\\overleftrightarrow{a+b}$|\n|`$\\underleftarrow{a-b}$` |$\\underleftarrow{a-b}$|\n|`$\\underrightarrow{a-b}$` |$\\underrightarrow{a-b}$|\n|`$\\underleftrightarrow{a-b}$`|$\\underleftrightarrow{a-b}$|\n|`$\\vec x = \\overrightarrow{AB}$`|$\\vec x = \\overrightarrow{AB}$|\n|`$\\overbrace{a+b+c} = \\underbrace{1+2+3}$`|$\\overbrace{a+b+c} = \\underbrace{1+2+3}$|\n\n还可以使用上下标在花括号上做标注\n``` tex\n  $$ (\\overbrace{a_0,a_1,...,a_n}^{\\text{共 $n+1$ 项}}) = (\\underbrace{0,0,...,0}_n,1) $$\n```\n$$ (\\overbrace{a_0,a_1,...,a_n}^{\\text{共 $n+1$ 项}}) = (\\underbrace{0,0,...,0}_n,1) $$\n#### 分式\n在LaTeX中分式用`\\frace<分子><分母>`得到，如：\n`$$ \\frac 12 + \\frac 1a = \\frac{2+a}{2a} $$`  $ \\frac 12 + \\frac 1a = \\frac{2+a}{2a} $\n在行内公式和显示公式中，分式的大小是不同的。行内分式中分子分母都用较小的字号排版，以免超出文本行的高度。\n连分式是一种特殊的分式，amsmath提供的`\\cfrac`专用于输入连分式。这个命令可以带一个可选的参数l、c、r，表示左、中、右，默认是居中，如：\n`$$ \\cfrac{1}{1+\\cfrac{2}{1+\\cfrac{3}{1+x}}} = \\cfrac[r]{1}{1+\\cfrac{2}{1+\\cfrac[l]{3}{1+x}}} $$`\n得到 ![结果](/image/latex/latex_note_six_1.png),`markdown`对这个支持不是很好，结果用图片代替了。\n还有一些类似分数分成上下两半,如二项式系数$\\binom nk$，`amsmath`提供了`\\binom`来输入二项式系数，其用法与`\\frac`类似:\n``` tex\n`$$ (a+b)^2 = \\binom {20}{02} a^2 + \\binom 21 ab + \\binom 22 b^2 $$`\n```\n$$ (a+b)^2 = \\binom {20}{02} a^2 + \\binom 21 ab + \\binom 22 b^2 $$\n#### 根式\n根式在LaTeX用单参数的命令`\\sqrt`得到，同时可以带一个可选参数，表示开方得次数，如：\n`$\\sqrt 4 = \\sqrt[3]{8} = 2$` 得到 $\\sqrt 4 = \\sqrt[3]{8} = 2$\n嵌套使用根式或与其他数学结构结合也很常见：\n``` tex\n$$ \\sqrt[n]{\\frac{x^2 + \\sqrt 2}{x+y}}$$\n```\n$$ \\sqrt[n]{\\frac{x^2 + \\sqrt 2}{x+y}}$$\n如果开方得次数不是简单的整数，或者被开方得内容过长，通常改用等价的指数形式：\n``` tex \n$$ (x^p+y^q)^{\\frac{1}{1/p+1/q}}$$\n```\n$$ (x^p+y^q)^{\\frac{1}{1/p+1/q}}$$\n有时可能对开方次数的排版位置不满意，可以用`amsmath`提供的`\\uproot`和`\\leftroot`命令调整，命令参数是整数，移动的单位是很小的一段距离，如：\n``` tex\n$$ \\sqrt[\\uproot{16}\\leftroot{-2}n] {\\frac{x^2 + \\sqrt 2}{x+y}} $$\n```\n\n#### 矩阵\n在基本的LaTeX中，矩阵是用PlainTeX一样的命令`\\matrix`和`\\pmatrix`,各类矩阵环境的区别在于外面的括号不同：\n\n|环境|代码|结果|\n|:----:|:----:|:----:|\n|matrix|`$$\\begin{matrix} 1&0&0\\\\ 0&1&0\\\\ 0&0&1\\\\ \\end{matrix}$$`|$$\\begin{matrix} 1&0&0\\\\ 0&1&0\\\\ 0&0&1\\\\ \\end{matrix}$$|\n|bmatrix|`$$\\begin{bmatrix} 1&0&0\\\\ 0&1&0\\\\ 0&0&1\\\\ \\end{bmatrix}$$`|$$\\begin{bmatrix} 1&0&0\\\\ 0&1&0\\\\ 0&0&1\\\\ \\end{bmatrix}$$|\n|vmatrix|`$$\\begin{vmatrix} 1&0&0\\\\ 0&1&0\\\\ 0&0&1\\\\ \\end{vmatrix}$$`|$$\\begin{vmatrix} 1&0&0\\\\ 0&1&0\\\\ 0&0&1\\\\ \\end{vmatrix}$$|\n|pmatrix|`$$\\begin{pmatrix} 1&0&0\\\\ 0&1&0\\\\ 0&0&1\\\\ \\end{pmatrix}$$`|$$\\begin{pmatrix} 1&0&0\\\\ 0&1&0\\\\ 0&0&1\\\\ \\end{pmatrix}$$|\n|Bmatrix|`$$\\begin{Bmatrix} 1&0&0\\\\ 0&1&0\\\\ 0&0&1\\\\ \\end{Bmatrix}$$`|$$\\begin{Bmatrix} 1&0&0\\\\ 0&1&0\\\\ 0&0&1\\\\ \\end{Bmatrix}$$|\n|Vmatrix|`$$\\begin{Vmatrix} 1&0&0\\\\ 0&1&0\\\\ 0&0&1\\\\ \\end{Vmatrix}$$`|$$\\begin{Vmatrix} 1&0&0\\\\ 0&1&0\\\\ 0&0&1\\\\ \\end{Vmatrix}$$|\n\n在矩阵环境中，不同的列用符号`&`分隔，行用`\\\\`分隔，矩阵中每列元素居中对齐，例如：\n\n``` tex\n$$\\begin{pmatrix} \n a_{11} & a_{12} & a_{13} \\\\ \n 0 & a_{22} & a_{23}      \\\\ \n 0 & 0 & a_{33}           \\\\ \n \\end{pmatrix}$$\n ```\n![矩阵](/image/latex/latex_note_six_2.png)\n在矩阵中经常使用各种省略号即`\\dots`、`\\vdots`、`\\ddots`、`\\iddots`,amsmath还提供了可以跨多列的省略号`\\hdotsfor{<列数>}`，在行公式中，有时需要使用很小的矩阵，这可以由amsmath提供的`smallmatrix`环境得到.\n\n-----\n以上","source":"_posts/LaTeX笔记-六.md","raw":"---\ntitle: LaTeX笔记-六(数学公式)\ndate: 2018-02-27 16:17:51\ntags: [LaTeX]\nkeywords: LaTeX数学公式\n---\nTeX有两种数学公式，一种是夹杂在行文段落中的公式，如$\\int f(x) \\text{d}x=1$,一般称为**行内(inline)**数学公式，或**正文(in-text)**数学公式;另一种就是像下面这样单独占据郑航居中展示出来，称为**显示**数学公式\n$$\\sum_{i=0}^N \\int_a^bg(t,i)\\text{d}$$\n\n在TeX中，行内公式一般在前后单个美元符号\\$...\\$表示，显示公式用连续的两个美元符号\\$\\$...\\$\\$表示\n<!--more-->\n#### 基础\n在数学模式下，符号会使用单独的字体，字母通常是倾斜的意大利体，数字和符号则是自立体，仔细看的话，数学符号之间的距离也与一般的水平模式不同：\n$a + b = b + a$,如$ 1 + 2 = 2 + 1$\n正常模式\na + b = b + a，如 1 + 2 = 2 + 1\n因此，在排版数学公式时，即使是没有任何特殊符号的算式$1+1$也要进入数学模式，使用\\$1+1\\$而不是普通文字的1+1\nc除了使用单个美元符号，在LaTeX中还额外定义了命令格式与环境格式的方式输入行内公式，即使用命令`\\(`和`\\)`环境括起来一个行内数学公式，如`$a+b$`也可以写成`\\(a+b\\)`或是`\\begin{math}a+b\\end{math}`。这两种形式提供了更好的错误检查，并且可以更明确地看出公式的开始于结束，也不容易混淆。\n同样的，LaTeX中也定义了命令形式和环境形式的输入方法，即使用`\\[`和`\\]`命令或是`displaymath`环境括起一个显示数学公式，例如：`\\[a+b=b+a\\]`,虽然并非必须，但最好在源代码中就把单独占据一行的显示公式放在单独的行内，使代码更清晰，推荐使用的方式是`\\[...\\]`，`$$...$$`会产生不良的间距，缺少错误检查，并且不能正确处理fleqn等文档选项，应该避免使用，而`displaymath`环境可能显得冗长。\nLaTeX还提供了带自动编号的数学公式，可以用`equation`环境表示，公式后还可以带引用的标签，例如：\n``` tex \n\\begin{equation}\n  a+b=b+a \\label{eq:commutative}\n\\end{equation}\n```\n#### 上标与下标\n上标和下标是两种最常见的数学结构，它们的形式也很朴素：上标一般在原符号的右上方，下标一般在原符号的右下方，有时也在正上方和正下方，例如：\n\n$$\\sum_{i=1}^{n}\\max_a10^na_i\\int_Da^2_i$$\n\n在TeX中，上标用特殊字符`^`表示，下标用特殊字符`_`表示。在数学模式中，符号`^`和`_`的用法差不多相当于带一个参数的命令，如**\\$10^n\\$**可以得到 $10^n$ ,而**\\$a_i\\$**可以得到 **$a_i$** 当上标和下标多余一个字符时，需要使用分组确定上下标范围，如**\\$A_{ij}=2^{i+j}\\$**得到**$A_{ij}=2^{i+j}$**\n上标和下标可以同时使用，也可以嵌套使用。同时使用上标和下标，上下标的先后次序并不重要，二者互不影响，嵌套使用上下标时，则外层一定要使用分组。数学公式中空格是不起实际作用的，适当的空格可以将代码分隔得好看一些。\n数学公式中单引号是一种特殊的上标，表示用符号`\\prime`(即')做上标，可以与下标混用，也可以连续使用，但不能与上标直接混用，如：\n```tex\n$a=a'$,$b_0'=b_0''$,\n${c'}^2=(c')^2$\n```\n得到\n$a=a'$,$b_0'=b_0''$,${c'}^2=(c')^2$\n#### 上下画线与花括号\n`\\overline` 和 `\\underline`命令可用来在公式的上方和下方划横线，`overbrace` 和 `underbrace`命令可以在公式上方和下方带上花括号如：\n\n|代码|结果|\n|:----:|:----:|\n|`$\\overleftarrow{a+b}$`| $\\overleftarrow{a+b}$|\n|`$\\overrightarrow{a+b}$` |$\\overrightarrow{a+b}$|\n|`$\\overleftrightarrow{a+b}$`| $\\overleftrightarrow{a+b}$|\n|`$\\underleftarrow{a-b}$` |$\\underleftarrow{a-b}$|\n|`$\\underrightarrow{a-b}$` |$\\underrightarrow{a-b}$|\n|`$\\underleftrightarrow{a-b}$`|$\\underleftrightarrow{a-b}$|\n|`$\\vec x = \\overrightarrow{AB}$`|$\\vec x = \\overrightarrow{AB}$|\n|`$\\overbrace{a+b+c} = \\underbrace{1+2+3}$`|$\\overbrace{a+b+c} = \\underbrace{1+2+3}$|\n\n还可以使用上下标在花括号上做标注\n``` tex\n  $$ (\\overbrace{a_0,a_1,...,a_n}^{\\text{共 $n+1$ 项}}) = (\\underbrace{0,0,...,0}_n,1) $$\n```\n$$ (\\overbrace{a_0,a_1,...,a_n}^{\\text{共 $n+1$ 项}}) = (\\underbrace{0,0,...,0}_n,1) $$\n#### 分式\n在LaTeX中分式用`\\frace<分子><分母>`得到，如：\n`$$ \\frac 12 + \\frac 1a = \\frac{2+a}{2a} $$`  $ \\frac 12 + \\frac 1a = \\frac{2+a}{2a} $\n在行内公式和显示公式中，分式的大小是不同的。行内分式中分子分母都用较小的字号排版，以免超出文本行的高度。\n连分式是一种特殊的分式，amsmath提供的`\\cfrac`专用于输入连分式。这个命令可以带一个可选的参数l、c、r，表示左、中、右，默认是居中，如：\n`$$ \\cfrac{1}{1+\\cfrac{2}{1+\\cfrac{3}{1+x}}} = \\cfrac[r]{1}{1+\\cfrac{2}{1+\\cfrac[l]{3}{1+x}}} $$`\n得到 ![结果](/image/latex/latex_note_six_1.png),`markdown`对这个支持不是很好，结果用图片代替了。\n还有一些类似分数分成上下两半,如二项式系数$\\binom nk$，`amsmath`提供了`\\binom`来输入二项式系数，其用法与`\\frac`类似:\n``` tex\n`$$ (a+b)^2 = \\binom {20}{02} a^2 + \\binom 21 ab + \\binom 22 b^2 $$`\n```\n$$ (a+b)^2 = \\binom {20}{02} a^2 + \\binom 21 ab + \\binom 22 b^2 $$\n#### 根式\n根式在LaTeX用单参数的命令`\\sqrt`得到，同时可以带一个可选参数，表示开方得次数，如：\n`$\\sqrt 4 = \\sqrt[3]{8} = 2$` 得到 $\\sqrt 4 = \\sqrt[3]{8} = 2$\n嵌套使用根式或与其他数学结构结合也很常见：\n``` tex\n$$ \\sqrt[n]{\\frac{x^2 + \\sqrt 2}{x+y}}$$\n```\n$$ \\sqrt[n]{\\frac{x^2 + \\sqrt 2}{x+y}}$$\n如果开方得次数不是简单的整数，或者被开方得内容过长，通常改用等价的指数形式：\n``` tex \n$$ (x^p+y^q)^{\\frac{1}{1/p+1/q}}$$\n```\n$$ (x^p+y^q)^{\\frac{1}{1/p+1/q}}$$\n有时可能对开方次数的排版位置不满意，可以用`amsmath`提供的`\\uproot`和`\\leftroot`命令调整，命令参数是整数，移动的单位是很小的一段距离，如：\n``` tex\n$$ \\sqrt[\\uproot{16}\\leftroot{-2}n] {\\frac{x^2 + \\sqrt 2}{x+y}} $$\n```\n\n#### 矩阵\n在基本的LaTeX中，矩阵是用PlainTeX一样的命令`\\matrix`和`\\pmatrix`,各类矩阵环境的区别在于外面的括号不同：\n\n|环境|代码|结果|\n|:----:|:----:|:----:|\n|matrix|`$$\\begin{matrix} 1&0&0\\\\ 0&1&0\\\\ 0&0&1\\\\ \\end{matrix}$$`|$$\\begin{matrix} 1&0&0\\\\ 0&1&0\\\\ 0&0&1\\\\ \\end{matrix}$$|\n|bmatrix|`$$\\begin{bmatrix} 1&0&0\\\\ 0&1&0\\\\ 0&0&1\\\\ \\end{bmatrix}$$`|$$\\begin{bmatrix} 1&0&0\\\\ 0&1&0\\\\ 0&0&1\\\\ \\end{bmatrix}$$|\n|vmatrix|`$$\\begin{vmatrix} 1&0&0\\\\ 0&1&0\\\\ 0&0&1\\\\ \\end{vmatrix}$$`|$$\\begin{vmatrix} 1&0&0\\\\ 0&1&0\\\\ 0&0&1\\\\ \\end{vmatrix}$$|\n|pmatrix|`$$\\begin{pmatrix} 1&0&0\\\\ 0&1&0\\\\ 0&0&1\\\\ \\end{pmatrix}$$`|$$\\begin{pmatrix} 1&0&0\\\\ 0&1&0\\\\ 0&0&1\\\\ \\end{pmatrix}$$|\n|Bmatrix|`$$\\begin{Bmatrix} 1&0&0\\\\ 0&1&0\\\\ 0&0&1\\\\ \\end{Bmatrix}$$`|$$\\begin{Bmatrix} 1&0&0\\\\ 0&1&0\\\\ 0&0&1\\\\ \\end{Bmatrix}$$|\n|Vmatrix|`$$\\begin{Vmatrix} 1&0&0\\\\ 0&1&0\\\\ 0&0&1\\\\ \\end{Vmatrix}$$`|$$\\begin{Vmatrix} 1&0&0\\\\ 0&1&0\\\\ 0&0&1\\\\ \\end{Vmatrix}$$|\n\n在矩阵环境中，不同的列用符号`&`分隔，行用`\\\\`分隔，矩阵中每列元素居中对齐，例如：\n\n``` tex\n$$\\begin{pmatrix} \n a_{11} & a_{12} & a_{13} \\\\ \n 0 & a_{22} & a_{23}      \\\\ \n 0 & 0 & a_{33}           \\\\ \n \\end{pmatrix}$$\n ```\n![矩阵](/image/latex/latex_note_six_2.png)\n在矩阵中经常使用各种省略号即`\\dots`、`\\vdots`、`\\ddots`、`\\iddots`,amsmath还提供了可以跨多列的省略号`\\hdotsfor{<列数>}`，在行公式中，有时需要使用很小的矩阵，这可以由amsmath提供的`smallmatrix`环境得到.\n\n-----\n以上","slug":"LaTeX笔记-六","published":1,"updated":"2018-08-04T05:15:30.541Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjl3vbtr4001sisdgygs5zquf","content":"<p>TeX有两种数学公式，一种是夹杂在行文段落中的公式，如$\\int f(x) \\text{d}x=1$,一般称为<strong>行内(inline)</strong>数学公式，或<strong>正文(in-text)</strong>数学公式;另一种就是像下面这样单独占据郑航居中展示出来，称为<strong>显示</strong>数学公式<br>$$\\sum_{i=0}^N \\int_a^bg(t,i)\\text{d}$$</p>\n<p>在TeX中，行内公式一般在前后单个美元符号\\$…\\$表示，显示公式用连续的两个美元符号\\$\\$…\\$\\$表示<br><a id=\"more\"></a></p>\n<h4 id=\"基础\"><a href=\"#基础\" class=\"headerlink\" title=\"基础\"></a>基础</h4><p>在数学模式下，符号会使用单独的字体，字母通常是倾斜的意大利体，数字和符号则是自立体，仔细看的话，数学符号之间的距离也与一般的水平模式不同：<br>$a + b = b + a$,如$ 1 + 2 = 2 + 1$<br>正常模式<br>a + b = b + a，如 1 + 2 = 2 + 1<br>因此，在排版数学公式时，即使是没有任何特殊符号的算式$1+1$也要进入数学模式，使用\\$1+1\\$而不是普通文字的1+1<br>c除了使用单个美元符号，在LaTeX中还额外定义了命令格式与环境格式的方式输入行内公式，即使用命令<code>\\(</code>和<code>\\)</code>环境括起来一个行内数学公式，如<code>$a+b$</code>也可以写成<code>\\(a+b\\)</code>或是<code>\\begin{math}a+b\\end{math}</code>。这两种形式提供了更好的错误检查，并且可以更明确地看出公式的开始于结束，也不容易混淆。<br>同样的，LaTeX中也定义了命令形式和环境形式的输入方法，即使用<code>\\[</code>和<code>\\]</code>命令或是<code>displaymath</code>环境括起一个显示数学公式，例如：<code>\\[a+b=b+a\\]</code>,虽然并非必须，但最好在源代码中就把单独占据一行的显示公式放在单独的行内，使代码更清晰，推荐使用的方式是<code>\\[...\\]</code>，<code>$$...$$</code>会产生不良的间距，缺少错误检查，并且不能正确处理fleqn等文档选项，应该避免使用，而<code>displaymath</code>环境可能显得冗长。<br>LaTeX还提供了带自动编号的数学公式，可以用<code>equation</code>环境表示，公式后还可以带引用的标签，例如：<br><figure class=\"highlight tex\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">\\<span class=\"name\">begin</span><span class=\"string\">&#123;equation&#125;</span></span></div><div class=\"line\">  a+b=b+a <span class=\"tag\">\\<span class=\"name\">label</span><span class=\"string\">&#123;eq:commutative&#125;</span></span></div><div class=\"line\"><span class=\"tag\">\\<span class=\"name\">end</span><span class=\"string\">&#123;equation&#125;</span></span></div></pre></td></tr></table></figure></p>\n<h4 id=\"上标与下标\"><a href=\"#上标与下标\" class=\"headerlink\" title=\"上标与下标\"></a>上标与下标</h4><p>上标和下标是两种最常见的数学结构，它们的形式也很朴素：上标一般在原符号的右上方，下标一般在原符号的右下方，有时也在正上方和正下方，例如：</p>\n<p>$$\\sum_{i=1}^{n}\\max_a10^na_i\\int_Da^2_i$$</p>\n<p>在TeX中，上标用特殊字符<code>^</code>表示，下标用特殊字符<code>_</code>表示。在数学模式中，符号<code>^</code>和<code>_</code>的用法差不多相当于带一个参数的命令，如<strong>\\$10^n\\$</strong>可以得到 $10^n$ ,而<strong>\\$a_i\\$</strong>可以得到 <strong>$a_i$</strong> 当上标和下标多余一个字符时，需要使用分组确定上下标范围，如<strong>\\$A_{ij}=2^{i+j}\\$</strong>得到<strong>$A_{ij}=2^{i+j}$</strong><br>上标和下标可以同时使用，也可以嵌套使用。同时使用上标和下标，上下标的先后次序并不重要，二者互不影响，嵌套使用上下标时，则外层一定要使用分组。数学公式中空格是不起实际作用的，适当的空格可以将代码分隔得好看一些。<br>数学公式中单引号是一种特殊的上标，表示用符号<code>\\prime</code>(即’)做上标，可以与下标混用，也可以连续使用，但不能与上标直接混用，如：<br><figure class=\"highlight tex\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"formula\">$a=a'$</span>,<span class=\"formula\">$b_0'=b_0''$</span>,</div><div class=\"line\"><span class=\"formula\">$&#123;c'&#125;^2=(c')^2$</span></div></pre></td></tr></table></figure></p>\n<p>得到<br>$a=a’$,$b_0’=b_0’’$,${c’}^2=(c’)^2$</p>\n<h4 id=\"上下画线与花括号\"><a href=\"#上下画线与花括号\" class=\"headerlink\" title=\"上下画线与花括号\"></a>上下画线与花括号</h4><p><code>\\overline</code> 和 <code>\\underline</code>命令可用来在公式的上方和下方划横线，<code>overbrace</code> 和 <code>underbrace</code>命令可以在公式上方和下方带上花括号如：</p>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:center\">代码</th>\n<th style=\"text-align:center\">结果</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\"><code>$\\overleftarrow{a+b}$</code></td>\n<td style=\"text-align:center\">$\\overleftarrow{a+b}$</td>\n</tr>\n<tr>\n<td style=\"text-align:center\"><code>$\\overrightarrow{a+b}$</code></td>\n<td style=\"text-align:center\">$\\overrightarrow{a+b}$</td>\n</tr>\n<tr>\n<td style=\"text-align:center\"><code>$\\overleftrightarrow{a+b}$</code></td>\n<td style=\"text-align:center\">$\\overleftrightarrow{a+b}$</td>\n</tr>\n<tr>\n<td style=\"text-align:center\"><code>$\\underleftarrow{a-b}$</code></td>\n<td style=\"text-align:center\">$\\underleftarrow{a-b}$</td>\n</tr>\n<tr>\n<td style=\"text-align:center\"><code>$\\underrightarrow{a-b}$</code></td>\n<td style=\"text-align:center\">$\\underrightarrow{a-b}$</td>\n</tr>\n<tr>\n<td style=\"text-align:center\"><code>$\\underleftrightarrow{a-b}$</code></td>\n<td style=\"text-align:center\">$\\underleftrightarrow{a-b}$</td>\n</tr>\n<tr>\n<td style=\"text-align:center\"><code>$\\vec x = \\overrightarrow{AB}$</code></td>\n<td style=\"text-align:center\">$\\vec x = \\overrightarrow{AB}$</td>\n</tr>\n<tr>\n<td style=\"text-align:center\"><code>$\\overbrace{a+b+c} = \\underbrace{1+2+3}$</code></td>\n<td style=\"text-align:center\">$\\overbrace{a+b+c} = \\underbrace{1+2+3}$</td>\n</tr>\n</tbody>\n</table>\n<p>还可以使用上下标在花括号上做标注<br><figure class=\"highlight tex\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"formula\">$$ (<span class=\"tag\">\\<span class=\"name\">overbrace</span><span class=\"string\">&#123;a_0,a_1,...,a_n&#125;</span></span>^&#123;<span class=\"tag\">\\<span class=\"name\">text</span><span class=\"string\">&#123;共 $n+1$ 项&#125;</span></span>&#125;) = (<span class=\"tag\">\\<span class=\"name\">underbrace</span><span class=\"string\">&#123;0,0,...,0&#125;</span></span>_n,1) $$</span></div></pre></td></tr></table></figure></p>\n<p>$$ (\\overbrace{a_0,a_1,…,a_n}^{\\text{共 $n+1$ 项}}) = (\\underbrace{0,0,…,0}_n,1) $$</p>\n<h4 id=\"分式\"><a href=\"#分式\" class=\"headerlink\" title=\"分式\"></a>分式</h4><p>在LaTeX中分式用<code>\\frace&lt;分子&gt;&lt;分母&gt;</code>得到，如：<br><code>$$ \\frac 12 + \\frac 1a = \\frac{2+a}{2a} $$</code>  $ \\frac 12 + \\frac 1a = \\frac{2+a}{2a} $<br>在行内公式和显示公式中，分式的大小是不同的。行内分式中分子分母都用较小的字号排版，以免超出文本行的高度。<br>连分式是一种特殊的分式，amsmath提供的<code>\\cfrac</code>专用于输入连分式。这个命令可以带一个可选的参数l、c、r，表示左、中、右，默认是居中，如：<br><code>$$ \\cfrac{1}{1+\\cfrac{2}{1+\\cfrac{3}{1+x}}} = \\cfrac[r]{1}{1+\\cfrac{2}{1+\\cfrac[l]{3}{1+x}}} $$</code><br>得到 <img src=\"/image/latex/latex_note_six_1.png\" alt=\"结果\">,<code>markdown</code>对这个支持不是很好，结果用图片代替了。<br>还有一些类似分数分成上下两半,如二项式系数$\\binom nk$，<code>amsmath</code>提供了<code>\\binom</code>来输入二项式系数，其用法与<code>\\frac</code>类似:<br><figure class=\"highlight tex\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">`<span class=\"formula\">$$ (a+b)^2 = <span class=\"tag\">\\<span class=\"name\">binom</span></span> &#123;20&#125;&#123;02&#125; a^2 + <span class=\"tag\">\\<span class=\"name\">binom</span></span> 21 ab + <span class=\"tag\">\\<span class=\"name\">binom</span></span> 22 b^2 $$</span>`</div></pre></td></tr></table></figure></p>\n<p>$$ (a+b)^2 = \\binom {20}{02} a^2 + \\binom 21 ab + \\binom 22 b^2 $$</p>\n<h4 id=\"根式\"><a href=\"#根式\" class=\"headerlink\" title=\"根式\"></a>根式</h4><p>根式在LaTeX用单参数的命令<code>\\sqrt</code>得到，同时可以带一个可选参数，表示开方得次数，如：<br><code>$\\sqrt 4 = \\sqrt[3]{8} = 2$</code> 得到 $\\sqrt 4 = \\sqrt[3]{8} = 2$<br>嵌套使用根式或与其他数学结构结合也很常见：<br><figure class=\"highlight tex\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"formula\">$$ <span class=\"tag\">\\<span class=\"name\">sqrt</span><span class=\"string\">[n]</span><span class=\"string\">&#123;\\frac&#123;x^2 + \\sqrt 2&#125;</span><span class=\"string\">&#123;x+y&#125;</span></span>&#125;$$</span></div></pre></td></tr></table></figure></p>\n<p>$$ \\sqrt[n]{\\frac{x^2 + \\sqrt 2}{x+y}}$$<br>如果开方得次数不是简单的整数，或者被开方得内容过长，通常改用等价的指数形式：<br><figure class=\"highlight tex\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"formula\">$$ (x^p+y^q)^&#123;<span class=\"tag\">\\<span class=\"name\">frac</span><span class=\"string\">&#123;1&#125;</span><span class=\"string\">&#123;1/p+1/q&#125;</span></span>&#125;$$</span></div></pre></td></tr></table></figure></p>\n<p>$$ (x^p+y^q)^{\\frac{1}{1/p+1/q}}$$<br>有时可能对开方次数的排版位置不满意，可以用<code>amsmath</code>提供的<code>\\uproot</code>和<code>\\leftroot</code>命令调整，命令参数是整数，移动的单位是很小的一段距离，如：<br><figure class=\"highlight tex\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"formula\">$$ <span class=\"tag\">\\<span class=\"name\">sqrt</span><span class=\"string\">[\\uproot&#123;16&#125;\\leftroot&#123;-2&#125;n]</span></span> &#123;<span class=\"tag\">\\<span class=\"name\">frac</span><span class=\"string\">&#123;x^2 + \\sqrt 2&#125;</span><span class=\"string\">&#123;x+y&#125;</span></span>&#125; $$</span></div></pre></td></tr></table></figure></p>\n<h4 id=\"矩阵\"><a href=\"#矩阵\" class=\"headerlink\" title=\"矩阵\"></a>矩阵</h4><p>在基本的LaTeX中，矩阵是用PlainTeX一样的命令<code>\\matrix</code>和<code>\\pmatrix</code>,各类矩阵环境的区别在于外面的括号不同：</p>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:center\">环境</th>\n<th style=\"text-align:center\">代码</th>\n<th style=\"text-align:center\">结果</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\">matrix</td>\n<td style=\"text-align:center\"><code>$$\\begin{matrix} 1&amp;0&amp;0\\\\ 0&amp;1&amp;0\\\\ 0&amp;0&amp;1\\\\ \\end{matrix}$$</code></td>\n<td style=\"text-align:center\">$$\\begin{matrix} 1&amp;0&amp;0\\ 0&amp;1&amp;0\\ 0&amp;0&amp;1\\ \\end{matrix}$$</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">bmatrix</td>\n<td style=\"text-align:center\"><code>$$\\begin{bmatrix} 1&amp;0&amp;0\\\\ 0&amp;1&amp;0\\\\ 0&amp;0&amp;1\\\\ \\end{bmatrix}$$</code></td>\n<td style=\"text-align:center\">$$\\begin{bmatrix} 1&amp;0&amp;0\\ 0&amp;1&amp;0\\ 0&amp;0&amp;1\\ \\end{bmatrix}$$</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">vmatrix</td>\n<td style=\"text-align:center\"><code>$$\\begin{vmatrix} 1&amp;0&amp;0\\\\ 0&amp;1&amp;0\\\\ 0&amp;0&amp;1\\\\ \\end{vmatrix}$$</code></td>\n<td style=\"text-align:center\">$$\\begin{vmatrix} 1&amp;0&amp;0\\ 0&amp;1&amp;0\\ 0&amp;0&amp;1\\ \\end{vmatrix}$$</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">pmatrix</td>\n<td style=\"text-align:center\"><code>$$\\begin{pmatrix} 1&amp;0&amp;0\\\\ 0&amp;1&amp;0\\\\ 0&amp;0&amp;1\\\\ \\end{pmatrix}$$</code></td>\n<td style=\"text-align:center\">$$\\begin{pmatrix} 1&amp;0&amp;0\\ 0&amp;1&amp;0\\ 0&amp;0&amp;1\\ \\end{pmatrix}$$</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">Bmatrix</td>\n<td style=\"text-align:center\"><code>$$\\begin{Bmatrix} 1&amp;0&amp;0\\\\ 0&amp;1&amp;0\\\\ 0&amp;0&amp;1\\\\ \\end{Bmatrix}$$</code></td>\n<td style=\"text-align:center\">$$\\begin{Bmatrix} 1&amp;0&amp;0\\ 0&amp;1&amp;0\\ 0&amp;0&amp;1\\ \\end{Bmatrix}$$</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">Vmatrix</td>\n<td style=\"text-align:center\"><code>$$\\begin{Vmatrix} 1&amp;0&amp;0\\\\ 0&amp;1&amp;0\\\\ 0&amp;0&amp;1\\\\ \\end{Vmatrix}$$</code></td>\n<td style=\"text-align:center\">$$\\begin{Vmatrix} 1&amp;0&amp;0\\ 0&amp;1&amp;0\\ 0&amp;0&amp;1\\ \\end{Vmatrix}$$</td>\n</tr>\n</tbody>\n</table>\n<p>在矩阵环境中，不同的列用符号<code>&amp;</code>分隔，行用<code>\\\\</code>分隔，矩阵中每列元素居中对齐，例如：</p>\n<figure class=\"highlight tex\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"formula\">$$<span class=\"tag\">\\<span class=\"name\">begin</span><span class=\"string\">&#123;pmatrix&#125;</span></span> </span></div><div class=\"line\"> a_&#123;11&#125; &amp; a_&#123;12&#125; &amp; a_&#123;13&#125; <span class=\"tag\">\\<span class=\"name\">\\</span></span> </div><div class=\"line\"> 0 &amp; a_&#123;22&#125; &amp; a_&#123;23&#125;      <span class=\"tag\">\\<span class=\"name\">\\</span></span> </div><div class=\"line\"> 0 &amp; 0 &amp; a_&#123;33&#125;           <span class=\"tag\">\\<span class=\"name\">\\</span></span> </div><div class=\"line\"> <span class=\"tag\">\\<span class=\"name\">end</span><span class=\"string\">&#123;pmatrix&#125;</span></span>$$</div></pre></td></tr></table></figure>\n<p><img src=\"/image/latex/latex_note_six_2.png\" alt=\"矩阵\"><br>在矩阵中经常使用各种省略号即<code>\\dots</code>、<code>\\vdots</code>、<code>\\ddots</code>、<code>\\iddots</code>,amsmath还提供了可以跨多列的省略号<code>\\hdotsfor{&lt;列数&gt;}</code>，在行公式中，有时需要使用很小的矩阵，这可以由amsmath提供的<code>smallmatrix</code>环境得到.</p>\n<hr>\n<p>以上</p>\n","excerpt":"<p>TeX有两种数学公式，一种是夹杂在行文段落中的公式，如$\\int f(x) \\text{d}x=1$,一般称为<strong>行内(inline)</strong>数学公式，或<strong>正文(in-text)</strong>数学公式;另一种就是像下面这样单独占据郑航居中展示出来，称为<strong>显示</strong>数学公式<br>$$\\sum_{i=0}^N \\int_a^bg(t,i)\\text{d}$$</p>\n<p>在TeX中，行内公式一般在前后单个美元符号\\$…\\$表示，显示公式用连续的两个美元符号\\$\\$…\\$\\$表示<br>","more":"</p>\n<h4 id=\"基础\"><a href=\"#基础\" class=\"headerlink\" title=\"基础\"></a>基础</h4><p>在数学模式下，符号会使用单独的字体，字母通常是倾斜的意大利体，数字和符号则是自立体，仔细看的话，数学符号之间的距离也与一般的水平模式不同：<br>$a + b = b + a$,如$ 1 + 2 = 2 + 1$<br>正常模式<br>a + b = b + a，如 1 + 2 = 2 + 1<br>因此，在排版数学公式时，即使是没有任何特殊符号的算式$1+1$也要进入数学模式，使用\\$1+1\\$而不是普通文字的1+1<br>c除了使用单个美元符号，在LaTeX中还额外定义了命令格式与环境格式的方式输入行内公式，即使用命令<code>\\(</code>和<code>\\)</code>环境括起来一个行内数学公式，如<code>$a+b$</code>也可以写成<code>\\(a+b\\)</code>或是<code>\\begin{math}a+b\\end{math}</code>。这两种形式提供了更好的错误检查，并且可以更明确地看出公式的开始于结束，也不容易混淆。<br>同样的，LaTeX中也定义了命令形式和环境形式的输入方法，即使用<code>\\[</code>和<code>\\]</code>命令或是<code>displaymath</code>环境括起一个显示数学公式，例如：<code>\\[a+b=b+a\\]</code>,虽然并非必须，但最好在源代码中就把单独占据一行的显示公式放在单独的行内，使代码更清晰，推荐使用的方式是<code>\\[...\\]</code>，<code>$$...$$</code>会产生不良的间距，缺少错误检查，并且不能正确处理fleqn等文档选项，应该避免使用，而<code>displaymath</code>环境可能显得冗长。<br>LaTeX还提供了带自动编号的数学公式，可以用<code>equation</code>环境表示，公式后还可以带引用的标签，例如：<br><figure class=\"highlight tex\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">\\<span class=\"name\">begin</span><span class=\"string\">&#123;equation&#125;</span></span></div><div class=\"line\">  a+b=b+a <span class=\"tag\">\\<span class=\"name\">label</span><span class=\"string\">&#123;eq:commutative&#125;</span></span></div><div class=\"line\"><span class=\"tag\">\\<span class=\"name\">end</span><span class=\"string\">&#123;equation&#125;</span></span></div></pre></td></tr></table></figure></p>\n<h4 id=\"上标与下标\"><a href=\"#上标与下标\" class=\"headerlink\" title=\"上标与下标\"></a>上标与下标</h4><p>上标和下标是两种最常见的数学结构，它们的形式也很朴素：上标一般在原符号的右上方，下标一般在原符号的右下方，有时也在正上方和正下方，例如：</p>\n<p>$$\\sum_{i=1}^{n}\\max_a10^na_i\\int_Da^2_i$$</p>\n<p>在TeX中，上标用特殊字符<code>^</code>表示，下标用特殊字符<code>_</code>表示。在数学模式中，符号<code>^</code>和<code>_</code>的用法差不多相当于带一个参数的命令，如<strong>\\$10^n\\$</strong>可以得到 $10^n$ ,而<strong>\\$a_i\\$</strong>可以得到 <strong>$a_i$</strong> 当上标和下标多余一个字符时，需要使用分组确定上下标范围，如<strong>\\$A_{ij}=2^{i+j}\\$</strong>得到<strong>$A_{ij}=2^{i+j}$</strong><br>上标和下标可以同时使用，也可以嵌套使用。同时使用上标和下标，上下标的先后次序并不重要，二者互不影响，嵌套使用上下标时，则外层一定要使用分组。数学公式中空格是不起实际作用的，适当的空格可以将代码分隔得好看一些。<br>数学公式中单引号是一种特殊的上标，表示用符号<code>\\prime</code>(即’)做上标，可以与下标混用，也可以连续使用，但不能与上标直接混用，如：<br><figure class=\"highlight tex\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"formula\">$a=a'$</span>,<span class=\"formula\">$b_0'=b_0''$</span>,</div><div class=\"line\"><span class=\"formula\">$&#123;c'&#125;^2=(c')^2$</span></div></pre></td></tr></table></figure></p>\n<p>得到<br>$a=a’$,$b_0’=b_0’’$,${c’}^2=(c’)^2$</p>\n<h4 id=\"上下画线与花括号\"><a href=\"#上下画线与花括号\" class=\"headerlink\" title=\"上下画线与花括号\"></a>上下画线与花括号</h4><p><code>\\overline</code> 和 <code>\\underline</code>命令可用来在公式的上方和下方划横线，<code>overbrace</code> 和 <code>underbrace</code>命令可以在公式上方和下方带上花括号如：</p>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:center\">代码</th>\n<th style=\"text-align:center\">结果</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\"><code>$\\overleftarrow{a+b}$</code></td>\n<td style=\"text-align:center\">$\\overleftarrow{a+b}$</td>\n</tr>\n<tr>\n<td style=\"text-align:center\"><code>$\\overrightarrow{a+b}$</code></td>\n<td style=\"text-align:center\">$\\overrightarrow{a+b}$</td>\n</tr>\n<tr>\n<td style=\"text-align:center\"><code>$\\overleftrightarrow{a+b}$</code></td>\n<td style=\"text-align:center\">$\\overleftrightarrow{a+b}$</td>\n</tr>\n<tr>\n<td style=\"text-align:center\"><code>$\\underleftarrow{a-b}$</code></td>\n<td style=\"text-align:center\">$\\underleftarrow{a-b}$</td>\n</tr>\n<tr>\n<td style=\"text-align:center\"><code>$\\underrightarrow{a-b}$</code></td>\n<td style=\"text-align:center\">$\\underrightarrow{a-b}$</td>\n</tr>\n<tr>\n<td style=\"text-align:center\"><code>$\\underleftrightarrow{a-b}$</code></td>\n<td style=\"text-align:center\">$\\underleftrightarrow{a-b}$</td>\n</tr>\n<tr>\n<td style=\"text-align:center\"><code>$\\vec x = \\overrightarrow{AB}$</code></td>\n<td style=\"text-align:center\">$\\vec x = \\overrightarrow{AB}$</td>\n</tr>\n<tr>\n<td style=\"text-align:center\"><code>$\\overbrace{a+b+c} = \\underbrace{1+2+3}$</code></td>\n<td style=\"text-align:center\">$\\overbrace{a+b+c} = \\underbrace{1+2+3}$</td>\n</tr>\n</tbody>\n</table>\n<p>还可以使用上下标在花括号上做标注<br><figure class=\"highlight tex\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"formula\">$$ (<span class=\"tag\">\\<span class=\"name\">overbrace</span><span class=\"string\">&#123;a_0,a_1,...,a_n&#125;</span></span>^&#123;<span class=\"tag\">\\<span class=\"name\">text</span><span class=\"string\">&#123;共 $n+1$ 项&#125;</span></span>&#125;) = (<span class=\"tag\">\\<span class=\"name\">underbrace</span><span class=\"string\">&#123;0,0,...,0&#125;</span></span>_n,1) $$</span></div></pre></td></tr></table></figure></p>\n<p>$$ (\\overbrace{a_0,a_1,…,a_n}^{\\text{共 $n+1$ 项}}) = (\\underbrace{0,0,…,0}_n,1) $$</p>\n<h4 id=\"分式\"><a href=\"#分式\" class=\"headerlink\" title=\"分式\"></a>分式</h4><p>在LaTeX中分式用<code>\\frace&lt;分子&gt;&lt;分母&gt;</code>得到，如：<br><code>$$ \\frac 12 + \\frac 1a = \\frac{2+a}{2a} $$</code>  $ \\frac 12 + \\frac 1a = \\frac{2+a}{2a} $<br>在行内公式和显示公式中，分式的大小是不同的。行内分式中分子分母都用较小的字号排版，以免超出文本行的高度。<br>连分式是一种特殊的分式，amsmath提供的<code>\\cfrac</code>专用于输入连分式。这个命令可以带一个可选的参数l、c、r，表示左、中、右，默认是居中，如：<br><code>$$ \\cfrac{1}{1+\\cfrac{2}{1+\\cfrac{3}{1+x}}} = \\cfrac[r]{1}{1+\\cfrac{2}{1+\\cfrac[l]{3}{1+x}}} $$</code><br>得到 <img src=\"/image/latex/latex_note_six_1.png\" alt=\"结果\">,<code>markdown</code>对这个支持不是很好，结果用图片代替了。<br>还有一些类似分数分成上下两半,如二项式系数$\\binom nk$，<code>amsmath</code>提供了<code>\\binom</code>来输入二项式系数，其用法与<code>\\frac</code>类似:<br><figure class=\"highlight tex\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">`<span class=\"formula\">$$ (a+b)^2 = <span class=\"tag\">\\<span class=\"name\">binom</span></span> &#123;20&#125;&#123;02&#125; a^2 + <span class=\"tag\">\\<span class=\"name\">binom</span></span> 21 ab + <span class=\"tag\">\\<span class=\"name\">binom</span></span> 22 b^2 $$</span>`</div></pre></td></tr></table></figure></p>\n<p>$$ (a+b)^2 = \\binom {20}{02} a^2 + \\binom 21 ab + \\binom 22 b^2 $$</p>\n<h4 id=\"根式\"><a href=\"#根式\" class=\"headerlink\" title=\"根式\"></a>根式</h4><p>根式在LaTeX用单参数的命令<code>\\sqrt</code>得到，同时可以带一个可选参数，表示开方得次数，如：<br><code>$\\sqrt 4 = \\sqrt[3]{8} = 2$</code> 得到 $\\sqrt 4 = \\sqrt[3]{8} = 2$<br>嵌套使用根式或与其他数学结构结合也很常见：<br><figure class=\"highlight tex\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"formula\">$$ <span class=\"tag\">\\<span class=\"name\">sqrt</span><span class=\"string\">[n]</span><span class=\"string\">&#123;\\frac&#123;x^2 + \\sqrt 2&#125;</span><span class=\"string\">&#123;x+y&#125;</span></span>&#125;$$</span></div></pre></td></tr></table></figure></p>\n<p>$$ \\sqrt[n]{\\frac{x^2 + \\sqrt 2}{x+y}}$$<br>如果开方得次数不是简单的整数，或者被开方得内容过长，通常改用等价的指数形式：<br><figure class=\"highlight tex\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"formula\">$$ (x^p+y^q)^&#123;<span class=\"tag\">\\<span class=\"name\">frac</span><span class=\"string\">&#123;1&#125;</span><span class=\"string\">&#123;1/p+1/q&#125;</span></span>&#125;$$</span></div></pre></td></tr></table></figure></p>\n<p>$$ (x^p+y^q)^{\\frac{1}{1/p+1/q}}$$<br>有时可能对开方次数的排版位置不满意，可以用<code>amsmath</code>提供的<code>\\uproot</code>和<code>\\leftroot</code>命令调整，命令参数是整数，移动的单位是很小的一段距离，如：<br><figure class=\"highlight tex\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"formula\">$$ <span class=\"tag\">\\<span class=\"name\">sqrt</span><span class=\"string\">[\\uproot&#123;16&#125;\\leftroot&#123;-2&#125;n]</span></span> &#123;<span class=\"tag\">\\<span class=\"name\">frac</span><span class=\"string\">&#123;x^2 + \\sqrt 2&#125;</span><span class=\"string\">&#123;x+y&#125;</span></span>&#125; $$</span></div></pre></td></tr></table></figure></p>\n<h4 id=\"矩阵\"><a href=\"#矩阵\" class=\"headerlink\" title=\"矩阵\"></a>矩阵</h4><p>在基本的LaTeX中，矩阵是用PlainTeX一样的命令<code>\\matrix</code>和<code>\\pmatrix</code>,各类矩阵环境的区别在于外面的括号不同：</p>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:center\">环境</th>\n<th style=\"text-align:center\">代码</th>\n<th style=\"text-align:center\">结果</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\">matrix</td>\n<td style=\"text-align:center\"><code>$$\\begin{matrix} 1&amp;0&amp;0\\\\ 0&amp;1&amp;0\\\\ 0&amp;0&amp;1\\\\ \\end{matrix}$$</code></td>\n<td style=\"text-align:center\">$$\\begin{matrix} 1&amp;0&amp;0\\ 0&amp;1&amp;0\\ 0&amp;0&amp;1\\ \\end{matrix}$$</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">bmatrix</td>\n<td style=\"text-align:center\"><code>$$\\begin{bmatrix} 1&amp;0&amp;0\\\\ 0&amp;1&amp;0\\\\ 0&amp;0&amp;1\\\\ \\end{bmatrix}$$</code></td>\n<td style=\"text-align:center\">$$\\begin{bmatrix} 1&amp;0&amp;0\\ 0&amp;1&amp;0\\ 0&amp;0&amp;1\\ \\end{bmatrix}$$</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">vmatrix</td>\n<td style=\"text-align:center\"><code>$$\\begin{vmatrix} 1&amp;0&amp;0\\\\ 0&amp;1&amp;0\\\\ 0&amp;0&amp;1\\\\ \\end{vmatrix}$$</code></td>\n<td style=\"text-align:center\">$$\\begin{vmatrix} 1&amp;0&amp;0\\ 0&amp;1&amp;0\\ 0&amp;0&amp;1\\ \\end{vmatrix}$$</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">pmatrix</td>\n<td style=\"text-align:center\"><code>$$\\begin{pmatrix} 1&amp;0&amp;0\\\\ 0&amp;1&amp;0\\\\ 0&amp;0&amp;1\\\\ \\end{pmatrix}$$</code></td>\n<td style=\"text-align:center\">$$\\begin{pmatrix} 1&amp;0&amp;0\\ 0&amp;1&amp;0\\ 0&amp;0&amp;1\\ \\end{pmatrix}$$</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">Bmatrix</td>\n<td style=\"text-align:center\"><code>$$\\begin{Bmatrix} 1&amp;0&amp;0\\\\ 0&amp;1&amp;0\\\\ 0&amp;0&amp;1\\\\ \\end{Bmatrix}$$</code></td>\n<td style=\"text-align:center\">$$\\begin{Bmatrix} 1&amp;0&amp;0\\ 0&amp;1&amp;0\\ 0&amp;0&amp;1\\ \\end{Bmatrix}$$</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">Vmatrix</td>\n<td style=\"text-align:center\"><code>$$\\begin{Vmatrix} 1&amp;0&amp;0\\\\ 0&amp;1&amp;0\\\\ 0&amp;0&amp;1\\\\ \\end{Vmatrix}$$</code></td>\n<td style=\"text-align:center\">$$\\begin{Vmatrix} 1&amp;0&amp;0\\ 0&amp;1&amp;0\\ 0&amp;0&amp;1\\ \\end{Vmatrix}$$</td>\n</tr>\n</tbody>\n</table>\n<p>在矩阵环境中，不同的列用符号<code>&amp;</code>分隔，行用<code>\\\\</code>分隔，矩阵中每列元素居中对齐，例如：</p>\n<figure class=\"highlight tex\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"formula\">$$<span class=\"tag\">\\<span class=\"name\">begin</span><span class=\"string\">&#123;pmatrix&#125;</span></span> </div><div class=\"line\"> a_&#123;11&#125; &amp; a_&#123;12&#125; &amp; a_&#123;13&#125; <span class=\"tag\">\\<span class=\"name\">\\</span></span> </div><div class=\"line\"> 0 &amp; a_&#123;22&#125; &amp; a_&#123;23&#125;      <span class=\"tag\">\\<span class=\"name\">\\</span></span> </div><div class=\"line\"> 0 &amp; 0 &amp; a_&#123;33&#125;           <span class=\"tag\">\\<span class=\"name\">\\</span></span> </div><div class=\"line\"> <span class=\"tag\">\\<span class=\"name\">end</span><span class=\"string\">&#123;pmatrix&#125;</span></span>$$</span></div></pre></td></tr></table></figure>\n<p><img src=\"/image/latex/latex_note_six_2.png\" alt=\"矩阵\"><br>在矩阵中经常使用各种省略号即<code>\\dots</code>、<code>\\vdots</code>、<code>\\ddots</code>、<code>\\iddots</code>,amsmath还提供了可以跨多列的省略号<code>\\hdotsfor{&lt;列数&gt;}</code>，在行公式中，有时需要使用很小的矩阵，这可以由amsmath提供的<code>smallmatrix</code>环境得到.</p>\n<hr>\n<p>以上</p>"},{"title":"LaTeX笔记-五(自动化工具)","date":"2018-02-27T03:09:28.000Z","keywords":"LaTeX","_content":"记录一下某些自动化的工具，比如添加超链接(hyperref)、索引(makeindex)等\n<!--more-->\n#### 电子文档与超链接\n`hyperref`宏包可算是LaTeX最为复杂的宏包之一，它提供了大量的选项和命令，完成各种设置和功能，这里主要记录以PDF格式输出时，`hyperref`有关标签和超链接的一些最基本的功能和设置。\n`hyperref`最基本的用法非常简单，就是直接调用此宏包：\n``` tex\n\\usepackage{hyperef}\n```\n如果使用ctex宏包或文档类，则可以加`hyperef`选项，这样啊ctex宏包会自动根据编码和编译方式选择合适的选项，避免出现乱码：\n``` tex\n\\documentclass[hyperref,UTF8]{ctexart}\n```\n引入hyperref后再编译文档时，会根据章节结构，自动生成目录结构的PDF文档标签。同时，正文中的目录和所有交叉引用，都会自动成为超链接，可以用鼠标点击跳转到引用位置。要得到正确的PDF标签，也应至少表一两遍文档。\n除了直接加在`\\usepackage`，也可以使用`\\hypersetup`命令单独设置。hyperref的选项大多使用<选项>=<值>的方式设置，如果是布尔类型的真假值选项(true或false),通常可以省略为真的值，常见选项如下：\n\n|选项|类型|默认值|说明|\n|:---|:---:|:---:|:---:|\n|colorlinks|布尔|false|超链接用彩色显示|\n|bookmarks|布尔|true|生成PDF目录书签|\n|bookmarksopen|布尔|false|在PDF阅读器中自动打开书签|\n|bookmarksnumbered|布尔|false|目录书签带编号|\n|pdfborder|数 数 数|0 0 1|当colorlink为假时，超链接由彩色边框包围(不会被打印)。默认值表示1pt宽的边框，可以设置为0 0 0 表示没有边框。\n|pdfpagemode|文本||在PDF阅读器中的页面显示方式，常用值是FullScreen，表示全屏显示|\n|pdfstartview|文本|Fit|在PDF阅读器中的页面缩放大小，默认值Fit表示“适合页面”；常用取值有适合宽度FitH，适合高度FitV|\n|pdftitle|文本||文档标题，会在PDF文档属性中显示|\n|pdfauthor|文本||文档作者，会在PDF文档属性中显示|\n|pdfsubject|文本||文档主题，会在PDF文档属性中显示|\n|pdfkeywords|文本||文档关键字，会在PDF文档属性中显示|\n除此之外，可以用`\\url`命令输出URL地址，同时也具有超链接的功能。与排版纯文本不同，找`\\url`命令的参数中，网址允许使用合法符号直接输入，并且默认以打字机字体输出，如果URL地址不需要超链接的效果，可以改用`\\nolinkurl`命令。\n`\\href{<URL>}{文字}`命令可以用来使文字产生指向URL地址的超链接效果。\n`\\hyperref[<标签>]{<文字>}`命令可以用来产生使文字执行标签的超链接效果，这里方括号中的标签与`\\ref`使用的标签相同，不能省略。\n`\\hypertarget{<名称>}{<文字>}`用来给文字定义带有名称的链接点，在文档的其他地方，则可以使用命令`\\hyperlink{<名称>}{<文字>}`让另一段文字链接到指定名称的连接点。\n\n#### 制作索引\n在LaTeX中制作索引，需要.tex源文件和外部索引程序的共同协作。在.tex源文件中，我们需要做一下几件事：\n1. 在导言区使用`\\makeindex`命令，开启索引文件输出\n2. 在导言区调用`makeidx`宏包，开启索引列表排版功能\n3. 在正文中需要索引的关键字处使用`\\index`命令，生成索引项\n4. 在需要生成索引的地方(通常是文档的末尾)，使用`\\printindex`命令，实际输出处理好的索引列表\n\n例子如下：\n``` tex\n\\documentclass[hyperref,UTF8]{ctexart}\n\\usepackage{makeidx}\n\\makeindex\n% ...\n西方称勾股定理为毕达哥拉斯定理，\n\\index{毕达哥拉斯定理}\n将勾股定理的发现归功于公元前 6 \n%...\n勾股定理可以用现代语言表述如下\\index{勾股定理}：\n%...\n\\printindex\n\\end{document}\n```\n与参考文献类似，要生成索引需要多次编译和外部工具`Makeindex`的配合，编译带索引的文档需要使用如下命令：\n``` tex\npdflatex ***\nmakeindex ***\npdflatex ***\n```\n以上命令可以在IDE的编译选项中找到\n在`\\index`的参数中可以使用符号`!`来分隔不同层次的索引项，这样将得到分级的索引项。默认支持三级列表，例如：\n```tex\n\\index{language}\n\\index{language!Chinese}\n\\index{language!Chinese!dialect}\n\\index{language!English}\n```\n在`\\index`的参数后面使用符号`|`则可以使用几个特殊的功能，基本的用法是使用`|see{<条目>}`与`|seealse{条目}`表示参考条目。例如：\n``` tex\n\\index{beta}\n\\index{Beta|see{beta}}\n\\index{gamma|seealso{beta}}\n```\n----\n以上","source":"_posts/LaTeX笔记-五.md","raw":"---\ntitle: LaTeX笔记-五(自动化工具)\ndate: 2018-02-27 11:09:28\ntags: [LaTeX]\nkeywords: LaTeX\n---\n记录一下某些自动化的工具，比如添加超链接(hyperref)、索引(makeindex)等\n<!--more-->\n#### 电子文档与超链接\n`hyperref`宏包可算是LaTeX最为复杂的宏包之一，它提供了大量的选项和命令，完成各种设置和功能，这里主要记录以PDF格式输出时，`hyperref`有关标签和超链接的一些最基本的功能和设置。\n`hyperref`最基本的用法非常简单，就是直接调用此宏包：\n``` tex\n\\usepackage{hyperef}\n```\n如果使用ctex宏包或文档类，则可以加`hyperef`选项，这样啊ctex宏包会自动根据编码和编译方式选择合适的选项，避免出现乱码：\n``` tex\n\\documentclass[hyperref,UTF8]{ctexart}\n```\n引入hyperref后再编译文档时，会根据章节结构，自动生成目录结构的PDF文档标签。同时，正文中的目录和所有交叉引用，都会自动成为超链接，可以用鼠标点击跳转到引用位置。要得到正确的PDF标签，也应至少表一两遍文档。\n除了直接加在`\\usepackage`，也可以使用`\\hypersetup`命令单独设置。hyperref的选项大多使用<选项>=<值>的方式设置，如果是布尔类型的真假值选项(true或false),通常可以省略为真的值，常见选项如下：\n\n|选项|类型|默认值|说明|\n|:---|:---:|:---:|:---:|\n|colorlinks|布尔|false|超链接用彩色显示|\n|bookmarks|布尔|true|生成PDF目录书签|\n|bookmarksopen|布尔|false|在PDF阅读器中自动打开书签|\n|bookmarksnumbered|布尔|false|目录书签带编号|\n|pdfborder|数 数 数|0 0 1|当colorlink为假时，超链接由彩色边框包围(不会被打印)。默认值表示1pt宽的边框，可以设置为0 0 0 表示没有边框。\n|pdfpagemode|文本||在PDF阅读器中的页面显示方式，常用值是FullScreen，表示全屏显示|\n|pdfstartview|文本|Fit|在PDF阅读器中的页面缩放大小，默认值Fit表示“适合页面”；常用取值有适合宽度FitH，适合高度FitV|\n|pdftitle|文本||文档标题，会在PDF文档属性中显示|\n|pdfauthor|文本||文档作者，会在PDF文档属性中显示|\n|pdfsubject|文本||文档主题，会在PDF文档属性中显示|\n|pdfkeywords|文本||文档关键字，会在PDF文档属性中显示|\n除此之外，可以用`\\url`命令输出URL地址，同时也具有超链接的功能。与排版纯文本不同，找`\\url`命令的参数中，网址允许使用合法符号直接输入，并且默认以打字机字体输出，如果URL地址不需要超链接的效果，可以改用`\\nolinkurl`命令。\n`\\href{<URL>}{文字}`命令可以用来使文字产生指向URL地址的超链接效果。\n`\\hyperref[<标签>]{<文字>}`命令可以用来产生使文字执行标签的超链接效果，这里方括号中的标签与`\\ref`使用的标签相同，不能省略。\n`\\hypertarget{<名称>}{<文字>}`用来给文字定义带有名称的链接点，在文档的其他地方，则可以使用命令`\\hyperlink{<名称>}{<文字>}`让另一段文字链接到指定名称的连接点。\n\n#### 制作索引\n在LaTeX中制作索引，需要.tex源文件和外部索引程序的共同协作。在.tex源文件中，我们需要做一下几件事：\n1. 在导言区使用`\\makeindex`命令，开启索引文件输出\n2. 在导言区调用`makeidx`宏包，开启索引列表排版功能\n3. 在正文中需要索引的关键字处使用`\\index`命令，生成索引项\n4. 在需要生成索引的地方(通常是文档的末尾)，使用`\\printindex`命令，实际输出处理好的索引列表\n\n例子如下：\n``` tex\n\\documentclass[hyperref,UTF8]{ctexart}\n\\usepackage{makeidx}\n\\makeindex\n% ...\n西方称勾股定理为毕达哥拉斯定理，\n\\index{毕达哥拉斯定理}\n将勾股定理的发现归功于公元前 6 \n%...\n勾股定理可以用现代语言表述如下\\index{勾股定理}：\n%...\n\\printindex\n\\end{document}\n```\n与参考文献类似，要生成索引需要多次编译和外部工具`Makeindex`的配合，编译带索引的文档需要使用如下命令：\n``` tex\npdflatex ***\nmakeindex ***\npdflatex ***\n```\n以上命令可以在IDE的编译选项中找到\n在`\\index`的参数中可以使用符号`!`来分隔不同层次的索引项，这样将得到分级的索引项。默认支持三级列表，例如：\n```tex\n\\index{language}\n\\index{language!Chinese}\n\\index{language!Chinese!dialect}\n\\index{language!English}\n```\n在`\\index`的参数后面使用符号`|`则可以使用几个特殊的功能，基本的用法是使用`|see{<条目>}`与`|seealse{条目}`表示参考条目。例如：\n``` tex\n\\index{beta}\n\\index{Beta|see{beta}}\n\\index{gamma|seealso{beta}}\n```\n----\n以上","slug":"LaTeX笔记-五","published":1,"updated":"2018-08-04T05:15:19.444Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjl3vbtr7001uisdg6wgyc41q","content":"<p>记录一下某些自动化的工具，比如添加超链接(hyperref)、索引(makeindex)等<br><a id=\"more\"></a></p>\n<h4 id=\"电子文档与超链接\"><a href=\"#电子文档与超链接\" class=\"headerlink\" title=\"电子文档与超链接\"></a>电子文档与超链接</h4><p><code>hyperref</code>宏包可算是LaTeX最为复杂的宏包之一，它提供了大量的选项和命令，完成各种设置和功能，这里主要记录以PDF格式输出时，<code>hyperref</code>有关标签和超链接的一些最基本的功能和设置。<br><code>hyperref</code>最基本的用法非常简单，就是直接调用此宏包：<br><figure class=\"highlight tex\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">\\<span class=\"name\">usepackage</span><span class=\"string\">&#123;hyperef&#125;</span></span></div></pre></td></tr></table></figure></p>\n<p>如果使用ctex宏包或文档类，则可以加<code>hyperef</code>选项，这样啊ctex宏包会自动根据编码和编译方式选择合适的选项，避免出现乱码：<br><figure class=\"highlight tex\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">\\<span class=\"name\">documentclass</span><span class=\"string\">[hyperref,UTF8]</span><span class=\"string\">&#123;ctexart&#125;</span></span></div></pre></td></tr></table></figure></p>\n<p>引入hyperref后再编译文档时，会根据章节结构，自动生成目录结构的PDF文档标签。同时，正文中的目录和所有交叉引用，都会自动成为超链接，可以用鼠标点击跳转到引用位置。要得到正确的PDF标签，也应至少表一两遍文档。<br>除了直接加在<code>\\usepackage</code>，也可以使用<code>\\hypersetup</code>命令单独设置。hyperref的选项大多使用&lt;选项&gt;=&lt;值&gt;的方式设置，如果是布尔类型的真假值选项(true或false),通常可以省略为真的值，常见选项如下：</p>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:left\">选项</th>\n<th style=\"text-align:center\">类型</th>\n<th style=\"text-align:center\">默认值</th>\n<th style=\"text-align:center\">说明</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:left\">colorlinks</td>\n<td style=\"text-align:center\">布尔</td>\n<td style=\"text-align:center\">false</td>\n<td style=\"text-align:center\">超链接用彩色显示</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">bookmarks</td>\n<td style=\"text-align:center\">布尔</td>\n<td style=\"text-align:center\">true</td>\n<td style=\"text-align:center\">生成PDF目录书签</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">bookmarksopen</td>\n<td style=\"text-align:center\">布尔</td>\n<td style=\"text-align:center\">false</td>\n<td style=\"text-align:center\">在PDF阅读器中自动打开书签</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">bookmarksnumbered</td>\n<td style=\"text-align:center\">布尔</td>\n<td style=\"text-align:center\">false</td>\n<td style=\"text-align:center\">目录书签带编号</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">pdfborder</td>\n<td style=\"text-align:center\">数 数 数</td>\n<td style=\"text-align:center\">0 0 1</td>\n<td style=\"text-align:center\">当colorlink为假时，超链接由彩色边框包围(不会被打印)。默认值表示1pt宽的边框，可以设置为0 0 0 表示没有边框。</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">pdfpagemode</td>\n<td style=\"text-align:center\">文本</td>\n<td style=\"text-align:center\"></td>\n<td style=\"text-align:center\">在PDF阅读器中的页面显示方式，常用值是FullScreen，表示全屏显示</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">pdfstartview</td>\n<td style=\"text-align:center\">文本</td>\n<td style=\"text-align:center\">Fit</td>\n<td style=\"text-align:center\">在PDF阅读器中的页面缩放大小，默认值Fit表示“适合页面”；常用取值有适合宽度FitH，适合高度FitV</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">pdftitle</td>\n<td style=\"text-align:center\">文本</td>\n<td style=\"text-align:center\"></td>\n<td style=\"text-align:center\">文档标题，会在PDF文档属性中显示</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">pdfauthor</td>\n<td style=\"text-align:center\">文本</td>\n<td style=\"text-align:center\"></td>\n<td style=\"text-align:center\">文档作者，会在PDF文档属性中显示</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">pdfsubject</td>\n<td style=\"text-align:center\">文本</td>\n<td style=\"text-align:center\"></td>\n<td style=\"text-align:center\">文档主题，会在PDF文档属性中显示</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">pdfkeywords</td>\n<td style=\"text-align:center\">文本</td>\n<td style=\"text-align:center\"></td>\n<td style=\"text-align:center\">文档关键字，会在PDF文档属性中显示</td>\n</tr>\n</tbody>\n</table>\n<p>除此之外，可以用<code>\\url</code>命令输出URL地址，同时也具有超链接的功能。与排版纯文本不同，找<code>\\url</code>命令的参数中，网址允许使用合法符号直接输入，并且默认以打字机字体输出，如果URL地址不需要超链接的效果，可以改用<code>\\nolinkurl</code>命令。<br><code>\\href{&lt;URL&gt;}{文字}</code>命令可以用来使文字产生指向URL地址的超链接效果。<br><code>\\hyperref[&lt;标签&gt;]{&lt;文字&gt;}</code>命令可以用来产生使文字执行标签的超链接效果，这里方括号中的标签与<code>\\ref</code>使用的标签相同，不能省略。<br><code>\\hypertarget{&lt;名称&gt;}{&lt;文字&gt;}</code>用来给文字定义带有名称的链接点，在文档的其他地方，则可以使用命令<code>\\hyperlink{&lt;名称&gt;}{&lt;文字&gt;}</code>让另一段文字链接到指定名称的连接点。</p>\n<h4 id=\"制作索引\"><a href=\"#制作索引\" class=\"headerlink\" title=\"制作索引\"></a>制作索引</h4><p>在LaTeX中制作索引，需要.tex源文件和外部索引程序的共同协作。在.tex源文件中，我们需要做一下几件事：</p>\n<ol>\n<li>在导言区使用<code>\\makeindex</code>命令，开启索引文件输出</li>\n<li>在导言区调用<code>makeidx</code>宏包，开启索引列表排版功能</li>\n<li>在正文中需要索引的关键字处使用<code>\\index</code>命令，生成索引项</li>\n<li>在需要生成索引的地方(通常是文档的末尾)，使用<code>\\printindex</code>命令，实际输出处理好的索引列表</li>\n</ol>\n<p>例子如下：<br><figure class=\"highlight tex\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">\\<span class=\"name\">documentclass</span><span class=\"string\">[hyperref,UTF8]</span><span class=\"string\">&#123;ctexart&#125;</span></span></div><div class=\"line\"><span class=\"tag\">\\<span class=\"name\">usepackage</span><span class=\"string\">&#123;makeidx&#125;</span></span></div><div class=\"line\"><span class=\"tag\">\\<span class=\"name\">makeindex</span></span></div><div class=\"line\"><span class=\"comment\">% ...</span></div><div class=\"line\">西方称勾股定理为毕达哥拉斯定理，</div><div class=\"line\"><span class=\"tag\">\\<span class=\"name\">index</span><span class=\"string\">&#123;毕达哥拉斯定理&#125;</span></span></div><div class=\"line\">将勾股定理的发现归功于公元前 6 </div><div class=\"line\"><span class=\"comment\">%...</span></div><div class=\"line\">勾股定理可以用现代语言表述如下<span class=\"tag\">\\<span class=\"name\">index</span><span class=\"string\">&#123;勾股定理&#125;</span></span>：</div><div class=\"line\"><span class=\"comment\">%...</span></div><div class=\"line\"><span class=\"tag\">\\<span class=\"name\">printindex</span></span></div><div class=\"line\"><span class=\"tag\">\\<span class=\"name\">end</span><span class=\"string\">&#123;document&#125;</span></span></div></pre></td></tr></table></figure></p>\n<p>与参考文献类似，要生成索引需要多次编译和外部工具<code>Makeindex</code>的配合，编译带索引的文档需要使用如下命令：<br><figure class=\"highlight tex\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">pdflatex ***</div><div class=\"line\">makeindex ***</div><div class=\"line\">pdflatex ***</div></pre></td></tr></table></figure></p>\n<p>以上命令可以在IDE的编译选项中找到<br>在<code>\\index</code>的参数中可以使用符号<code>!</code>来分隔不同层次的索引项，这样将得到分级的索引项。默认支持三级列表，例如：<br><figure class=\"highlight tex\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">\\<span class=\"name\">index</span><span class=\"string\">&#123;language&#125;</span></span></div><div class=\"line\"><span class=\"tag\">\\<span class=\"name\">index</span><span class=\"string\">&#123;language!Chinese&#125;</span></span></div><div class=\"line\"><span class=\"tag\">\\<span class=\"name\">index</span><span class=\"string\">&#123;language!Chinese!dialect&#125;</span></span></div><div class=\"line\"><span class=\"tag\">\\<span class=\"name\">index</span><span class=\"string\">&#123;language!English&#125;</span></span></div></pre></td></tr></table></figure></p>\n<p>在<code>\\index</code>的参数后面使用符号<code>|</code>则可以使用几个特殊的功能，基本的用法是使用<code>|see{&lt;条目&gt;}</code>与<code>|seealse{条目}</code>表示参考条目。例如：<br><figure class=\"highlight tex\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">\\<span class=\"name\">index</span><span class=\"string\">&#123;beta&#125;</span></span></div><div class=\"line\"><span class=\"tag\">\\<span class=\"name\">index</span><span class=\"string\">&#123;Beta|see&#123;beta&#125;</span></span>&#125;</div><div class=\"line\"><span class=\"tag\">\\<span class=\"name\">index</span><span class=\"string\">&#123;gamma|seealso&#123;beta&#125;</span></span>&#125;</div></pre></td></tr></table></figure></p>\n<hr>\n<p>以上</p>\n","excerpt":"<p>记录一下某些自动化的工具，比如添加超链接(hyperref)、索引(makeindex)等<br>","more":"</p>\n<h4 id=\"电子文档与超链接\"><a href=\"#电子文档与超链接\" class=\"headerlink\" title=\"电子文档与超链接\"></a>电子文档与超链接</h4><p><code>hyperref</code>宏包可算是LaTeX最为复杂的宏包之一，它提供了大量的选项和命令，完成各种设置和功能，这里主要记录以PDF格式输出时，<code>hyperref</code>有关标签和超链接的一些最基本的功能和设置。<br><code>hyperref</code>最基本的用法非常简单，就是直接调用此宏包：<br><figure class=\"highlight tex\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">\\<span class=\"name\">usepackage</span><span class=\"string\">&#123;hyperef&#125;</span></span></div></pre></td></tr></table></figure></p>\n<p>如果使用ctex宏包或文档类，则可以加<code>hyperef</code>选项，这样啊ctex宏包会自动根据编码和编译方式选择合适的选项，避免出现乱码：<br><figure class=\"highlight tex\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">\\<span class=\"name\">documentclass</span><span class=\"string\">[hyperref,UTF8]</span><span class=\"string\">&#123;ctexart&#125;</span></span></div></pre></td></tr></table></figure></p>\n<p>引入hyperref后再编译文档时，会根据章节结构，自动生成目录结构的PDF文档标签。同时，正文中的目录和所有交叉引用，都会自动成为超链接，可以用鼠标点击跳转到引用位置。要得到正确的PDF标签，也应至少表一两遍文档。<br>除了直接加在<code>\\usepackage</code>，也可以使用<code>\\hypersetup</code>命令单独设置。hyperref的选项大多使用&lt;选项&gt;=&lt;值&gt;的方式设置，如果是布尔类型的真假值选项(true或false),通常可以省略为真的值，常见选项如下：</p>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:left\">选项</th>\n<th style=\"text-align:center\">类型</th>\n<th style=\"text-align:center\">默认值</th>\n<th style=\"text-align:center\">说明</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:left\">colorlinks</td>\n<td style=\"text-align:center\">布尔</td>\n<td style=\"text-align:center\">false</td>\n<td style=\"text-align:center\">超链接用彩色显示</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">bookmarks</td>\n<td style=\"text-align:center\">布尔</td>\n<td style=\"text-align:center\">true</td>\n<td style=\"text-align:center\">生成PDF目录书签</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">bookmarksopen</td>\n<td style=\"text-align:center\">布尔</td>\n<td style=\"text-align:center\">false</td>\n<td style=\"text-align:center\">在PDF阅读器中自动打开书签</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">bookmarksnumbered</td>\n<td style=\"text-align:center\">布尔</td>\n<td style=\"text-align:center\">false</td>\n<td style=\"text-align:center\">目录书签带编号</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">pdfborder</td>\n<td style=\"text-align:center\">数 数 数</td>\n<td style=\"text-align:center\">0 0 1</td>\n<td style=\"text-align:center\">当colorlink为假时，超链接由彩色边框包围(不会被打印)。默认值表示1pt宽的边框，可以设置为0 0 0 表示没有边框。</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">pdfpagemode</td>\n<td style=\"text-align:center\">文本</td>\n<td style=\"text-align:center\"></td>\n<td style=\"text-align:center\">在PDF阅读器中的页面显示方式，常用值是FullScreen，表示全屏显示</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">pdfstartview</td>\n<td style=\"text-align:center\">文本</td>\n<td style=\"text-align:center\">Fit</td>\n<td style=\"text-align:center\">在PDF阅读器中的页面缩放大小，默认值Fit表示“适合页面”；常用取值有适合宽度FitH，适合高度FitV</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">pdftitle</td>\n<td style=\"text-align:center\">文本</td>\n<td style=\"text-align:center\"></td>\n<td style=\"text-align:center\">文档标题，会在PDF文档属性中显示</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">pdfauthor</td>\n<td style=\"text-align:center\">文本</td>\n<td style=\"text-align:center\"></td>\n<td style=\"text-align:center\">文档作者，会在PDF文档属性中显示</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">pdfsubject</td>\n<td style=\"text-align:center\">文本</td>\n<td style=\"text-align:center\"></td>\n<td style=\"text-align:center\">文档主题，会在PDF文档属性中显示</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">pdfkeywords</td>\n<td style=\"text-align:center\">文本</td>\n<td style=\"text-align:center\"></td>\n<td style=\"text-align:center\">文档关键字，会在PDF文档属性中显示</td>\n</tr>\n</tbody>\n</table>\n<p>除此之外，可以用<code>\\url</code>命令输出URL地址，同时也具有超链接的功能。与排版纯文本不同，找<code>\\url</code>命令的参数中，网址允许使用合法符号直接输入，并且默认以打字机字体输出，如果URL地址不需要超链接的效果，可以改用<code>\\nolinkurl</code>命令。<br><code>\\href{&lt;URL&gt;}{文字}</code>命令可以用来使文字产生指向URL地址的超链接效果。<br><code>\\hyperref[&lt;标签&gt;]{&lt;文字&gt;}</code>命令可以用来产生使文字执行标签的超链接效果，这里方括号中的标签与<code>\\ref</code>使用的标签相同，不能省略。<br><code>\\hypertarget{&lt;名称&gt;}{&lt;文字&gt;}</code>用来给文字定义带有名称的链接点，在文档的其他地方，则可以使用命令<code>\\hyperlink{&lt;名称&gt;}{&lt;文字&gt;}</code>让另一段文字链接到指定名称的连接点。</p>\n<h4 id=\"制作索引\"><a href=\"#制作索引\" class=\"headerlink\" title=\"制作索引\"></a>制作索引</h4><p>在LaTeX中制作索引，需要.tex源文件和外部索引程序的共同协作。在.tex源文件中，我们需要做一下几件事：</p>\n<ol>\n<li>在导言区使用<code>\\makeindex</code>命令，开启索引文件输出</li>\n<li>在导言区调用<code>makeidx</code>宏包，开启索引列表排版功能</li>\n<li>在正文中需要索引的关键字处使用<code>\\index</code>命令，生成索引项</li>\n<li>在需要生成索引的地方(通常是文档的末尾)，使用<code>\\printindex</code>命令，实际输出处理好的索引列表</li>\n</ol>\n<p>例子如下：<br><figure class=\"highlight tex\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">\\<span class=\"name\">documentclass</span><span class=\"string\">[hyperref,UTF8]</span><span class=\"string\">&#123;ctexart&#125;</span></span></div><div class=\"line\"><span class=\"tag\">\\<span class=\"name\">usepackage</span><span class=\"string\">&#123;makeidx&#125;</span></span></div><div class=\"line\"><span class=\"tag\">\\<span class=\"name\">makeindex</span></span></div><div class=\"line\"><span class=\"comment\">% ...</span></div><div class=\"line\">西方称勾股定理为毕达哥拉斯定理，</div><div class=\"line\"><span class=\"tag\">\\<span class=\"name\">index</span><span class=\"string\">&#123;毕达哥拉斯定理&#125;</span></span></div><div class=\"line\">将勾股定理的发现归功于公元前 6 </div><div class=\"line\"><span class=\"comment\">%...</span></div><div class=\"line\">勾股定理可以用现代语言表述如下<span class=\"tag\">\\<span class=\"name\">index</span><span class=\"string\">&#123;勾股定理&#125;</span></span>：</div><div class=\"line\"><span class=\"comment\">%...</span></div><div class=\"line\"><span class=\"tag\">\\<span class=\"name\">printindex</span></span></div><div class=\"line\"><span class=\"tag\">\\<span class=\"name\">end</span><span class=\"string\">&#123;document&#125;</span></span></div></pre></td></tr></table></figure></p>\n<p>与参考文献类似，要生成索引需要多次编译和外部工具<code>Makeindex</code>的配合，编译带索引的文档需要使用如下命令：<br><figure class=\"highlight tex\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">pdflatex ***</div><div class=\"line\">makeindex ***</div><div class=\"line\">pdflatex ***</div></pre></td></tr></table></figure></p>\n<p>以上命令可以在IDE的编译选项中找到<br>在<code>\\index</code>的参数中可以使用符号<code>!</code>来分隔不同层次的索引项，这样将得到分级的索引项。默认支持三级列表，例如：<br><figure class=\"highlight tex\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">\\<span class=\"name\">index</span><span class=\"string\">&#123;language&#125;</span></span></div><div class=\"line\"><span class=\"tag\">\\<span class=\"name\">index</span><span class=\"string\">&#123;language!Chinese&#125;</span></span></div><div class=\"line\"><span class=\"tag\">\\<span class=\"name\">index</span><span class=\"string\">&#123;language!Chinese!dialect&#125;</span></span></div><div class=\"line\"><span class=\"tag\">\\<span class=\"name\">index</span><span class=\"string\">&#123;language!English&#125;</span></span></div></pre></td></tr></table></figure></p>\n<p>在<code>\\index</code>的参数后面使用符号<code>|</code>则可以使用几个特殊的功能，基本的用法是使用<code>|see{&lt;条目&gt;}</code>与<code>|seealse{条目}</code>表示参考条目。例如：<br><figure class=\"highlight tex\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">\\<span class=\"name\">index</span><span class=\"string\">&#123;beta&#125;</span></span></div><div class=\"line\"><span class=\"tag\">\\<span class=\"name\">index</span><span class=\"string\">&#123;Beta|see&#123;beta&#125;</span></span>&#125;</div><div class=\"line\"><span class=\"tag\">\\<span class=\"name\">index</span><span class=\"string\">&#123;gamma|seealso&#123;beta&#125;</span></span>&#125;</div></pre></td></tr></table></figure></p>\n<hr>\n<p>以上</p>"},{"title":"Tinker初探","date":"2018-03-10T04:35:18.000Z","keywords":"tinker热修复","_content":"前两天想试一下热修复的功能，对比各大平台的热修复功能，看到tinker的[文档介绍](http://www.tinkerpatch.com/Docs/intro)，最终决定先拿Tinker试一下。\n> \n||||||\n|:---:|:---:|:---:|:---:|:---:\n||Tinker|QZone|AndFix|Robust|\n|类替换|yes|yes|no|no|\n|So替换|yes|no|no|no|\n|资源替换|yes|yes|no|no|\n|全平台支持|yes|yes|no|yes|\n|即时生效|no|no|yes|yes|\n|性能损耗|较小|较大|较小|较小|\n|补丁包大小|较小|较大|一般|一般|\n|开发透明|yes|yes|no|no|\n|复杂度|较低|较低|复杂|复杂|\n|Rom体积|Dalvik较大|较小|较小|较小|\n|成功率|较高|较高|一般|最高|\n>Tinker热补丁方案不仅支持类、So 以及资源的替换，它还是2.X－7.X的全平台支持。利用Tinker我们不仅可以用做 bugfix,甚至可以替代功能的发布。Tinker 已运行在微信的数亿 Android 设备上，那么为什么你不使用 Tinker 呢？\n\n不得不说，我真的低估了跟着腾讯文档走的难度。\n<!--more-->\n\n### 注册 TinkerPatch 平台\n\n因为需要下发补丁，直接使用TinkerPatch平台就好，在这里注册[http://www.tinkerpatch.com/Index/reg](http://www.tinkerpatch.com/Index/reg),注册完成后创建一个应用，拿到`appKey`\n然后添加一个APP版本\n\n### SDK接入\n测试成功的工程全部文件在这里[https://github.com/huangyuanlove/TestTinker](https://github.com/huangyuanlove/TestTinker),包含构建成功之后的apk文件以及一些辅助文件。\n##### 添加Gradle插件依赖\nAndroidStudio创建一个工程，定义使用的SDK版本，我是放在了`gradle.properties` 这个文件中，\n> TINKER_VERSION=1.9.2\nTINKERPATCH_VERSION=1.2.2\n\n然后在工程的`build.gradle`文件中添加插件依赖\n> classpath \"com.tinkerpatch.sdk:tinkerpatch-gradle-plugin:${TINKERPATCH_VERSION}\"\n\n然后添加一些其他配置，整个文件内容如下\n``` groovy\nbuildscript {\n    repositories {\n        google()\n        jcenter()\n    }\n    dependencies {\n        classpath 'com.android.tools.build:gradle:3.0.1'\n        classpath \"com.tinkerpatch.sdk:tinkerpatch-gradle-plugin:${TINKERPATCH_VERSION}\"\n    }\n}\nif (JavaVersion.current().isJava8Compatible()) {\n    allprojects {\n        tasks.withType(Javadoc) {\n            options.addStringOption('Xdoclint:none', '-quiet')\n        }\n    }\n}\nsubprojects {\n    tasks.withType(JavaCompile) {\n        sourceCompatibility = JavaVersion.VERSION_1_7\n        targetCompatibility = JavaVersion.VERSION_1_7\n    }\n}\nallprojects {\n    repositories {\n        google()\n        jcenter()\n    }\n}\ntask clean(type: Delete) {\n    delete rootProject.buildDir\n}\n\n```\n##### 集成 TinkerPatch SDK\n在`app/build.gradle`里面添加依赖\n> \n    annotationProcessor(\"com.tinkerpatch.tinker:tinker-android-anno:${TINKER_VERSION}\") { changing = true }\n    compileOnly(\"com.tinkerpatch.tinker:tinker-android-anno:${TINKER_VERSION}\") { changing = true }\n    implementation(\"com.tinkerpatch.sdk:tinkerpatch-android-sdk:${TINKERPATCH_VERSION}\") { changing = true }\n\n为了配置方便，我们把TinkerPatchSupport相关的配置放在一个单独的gradle文件中，在app下创建一个`tinkerpatch.gradle`，我们需要在`app/build.grale`文件中引用\n> apply from: 'tinkerpatch.gradle'\n\n##### 配置 tinkerpatchSupport 参数\n编辑 `app/tinkerpatch.gralde`文件\n``` groovy\n\napply plugin: 'tinkerpatch-support'\n\n/**\n * TODO: 请按自己的需求修改为适应自己工程的参数\n */\ndef bakPath = file(\"${buildDir}/bakApk/\")\ndef baseInfo = \"app-1.0.0-0309-21-30-56\" //构建差异文件时使用\ndef variantName = \"debug\"\n\n/**\n * 对于插件各参数的详细解析请参考\n * http://tinkerpatch.com/Docs/SDK\n */\ntinkerpatchSupport {\n    /** 可以在debug的时候关闭 tinkerPatch **/\n    /** 当disable tinker的时候需要添加multiDexKeepProguard和proguardFiles,\n        这些配置文件本身由tinkerPatch的插件自动添加，当你disable后需要手动添加\n        你可以copy本示例中的proguardRules.pro和tinkerMultidexKeep.pro,\n        需要你手动修改'tinker.sample.android.app'本示例的包名为你自己的包名, com.xxx前缀的包名不用修改\n     **/\n    tinkerEnable = true\n    reflectApplication = false\n    /**\n     * 是否开启加固模式，只能在APK将要进行加固时使用，否则会patch失败。\n     * 如果只在某个渠道使用了加固，可使用多flavors配置\n     **/\n    protectedApp = false\n    /**\n     * 实验功能\n     * 补丁是否支持新增 Activity (新增Activity的exported属性必须为false)\n     **/\n    supportComponent = true\n\n    autoBackupApkPath = \"${bakPath}\"\n\n    appKey = \"2b662623551153ee\"\n\n    /** 注意: 若发布新的全量包, appVersion一定要更新 **/\n    appVersion = \"1.0.0\"\n\n    def pathPrefix = \"${bakPath}/${baseInfo}/${variantName}/\"\n    def name = \"${project.name}-${variantName}\"\n\n    baseApkFile = \"${pathPrefix}/${name}.apk\"\n    baseProguardMappingFile = \"${pathPrefix}/${name}-mapping.txt\"\n    baseResourceRFile = \"${pathPrefix}/${name}-R.txt\"\n\n    /**\n     *  若有编译多flavors需求, 可以参照： https://github.com/TinkerPatch/tinkerpatch-flavors-sample\n     *  注意: 除非你不同的flavor代码是不一样的,不然建议采用zip comment或者文件方式生成渠道信息（相关工具：walle 或者 packer-ng）\n     **/\n}\n\n/**\n * 用于用户在代码中判断tinkerPatch是否被使能\n */\nandroid {\n    defaultConfig {\n        buildConfigField \"boolean\", \"TINKER_ENABLE\", \"${tinkerpatchSupport.tinkerEnable}\"\n    }\n}\n\n/**\n * 一般来说,我们无需对下面的参数做任何的修改\n * 对于各参数的详细介绍请参考:\n * https://github.com/Tencent/tinker/wiki/Tinker-%E6%8E%A5%E5%85%A5%E6%8C%87%E5%8D%97\n */\ntinkerPatch {\n    ignoreWarning = false\n    useSign = true\n    dex {\n        dexMode = \"jar\"\n        pattern = [\"classes*.dex\"]\n        loader = []\n    }\n    lib {\n        pattern = [\"lib/*/*.so\"]\n    }\n\n    res {\n        pattern = [\"res/*\", \"r/*\", \"assets/*\", \"resources.arsc\", \"AndroidManifest.xml\"]\n        ignoreChange = []\n        largeModSize = 100\n    }\n\n    packageConfig {\n    }\n    sevenZip {\n        zipArtifact = \"com.tencent.mm:SevenZip:1.1.10\"\n    }\n    buildConfig {\n        keepDexApply = false\n    }\n}\n```\n每个参数的含义如下\n\n|参数|默认值|描述|\n|:----:|:----:|:----:|\n|tinkerEnable|true|是否开启 tinkerpatchSupport 插件功能|\n|appKey\t|\"\"\t|在 TinkerPatch 平台 申请的 appkey|\n|appVersion\t|\"\"\t|在 TinkerPatch 平台 输入的版本号,注意，我们使用 appVersion 作为 TinkerId, 我们需要保证每个发布出去的基础安装包的 appVersion 都不一样。|\n|reflectApplication|false|是否反射 Application 实现一键接入；一般来说，接入 Tinker 我们需要改造我们|的 Application, 若这里为 true， 即我们无需对应用做任何改造即可接入。|\n|autoBackupApkPath|\"\"|将每次编译产生的 apk/mapping.txt/R.txt 归档存储的位置|\n|baseApkFile|\"\"|基准包的文件路径, 对应 tinker 插件中的 oldApk 参数;编译补丁包时，必需指定基准版本的 apk，默认值为空，则表示不是进行补丁包的编译。|\n|baseProguardMappingFile|\"\"|基准包的 Proguard mapping.txt 文件路径, 对应 tinker 插件 applyMapping 参数；在编译新的 apk 时候，我们希望通过保持基准 apk 的 proguard 混淆方式，从而减少补丁包的大小。这是强烈推荐的，编译补丁包时，我们推荐输入基准 apk 生成的 mapping.txt 文件。|\n|baseResourceRFile|\"\"|基准包的资源 R.txt 文件路径, 对应 tinker 插件 applyResourceMapping 参数；在编译新的apk时候，我们希望通基准 apk 的 R.txt 文件来保持 Resource Id 的分配，这样不仅可以减少补丁包的大小，同时也避免由于 Resource Id 改变导致 remote view 异常。|\n|protectedApp\t|false\t|是否开启支持加固，注意：只有在使用加固时才能开启此开关|\n|supportComponent\t|false\t|是否开启支持在补丁包中动态增加Activity 注意：新增Activity的Exported属性必须为false|\n|backupFileNameFormat|\t'\\${appName}-\\${variantName}'|\t格式化命名备份文件 这里请使用单引号|\n\n##### 初始化 TinkerPatch SDK\n这里推荐使用改造之后的ApplicationLike，对应`tinkerpatch.gradle`文件中的`reflectApplication = false`,这里给出了完整的ApplicationLike类，可以在这里查看[https://github.com/huangyuanlove/TestTinker/blob/master/app/src/main/java/com/huangyuan/testtinker/SampleApplicationLike.java](https://github.com/huangyuanlove/TestTinker/blob/master/app/src/main/java/com/huangyuan/testtinker/SampleApplicationLike.java)\n其中对于类的注解中的 `application` 的值，就是我们应用的Application类，需要在`AndroidManifest.xml`中的`application`标签中配置\n``` java\n@DefaultLifeCycle(application = \"com.huangyuanlove.testtinker.SampleApplication\",\n                  flags = ShareConstants.TINKER_ENABLE_ALL,\n                  loadVerifyFlag = false)`\n```\n\n**注意：初始化的代码建议紧跟 super.onCreate(),并且所有进程都需要初始化，已达到所有进程都可以被 patch 的目的\n如果你确定只想在主进程中初始化 tinkerPatch，那也请至少在 :patch 进程中初始化，否则会有造成 :patch 进程crash，无法使补丁生效**\n我们在实际应用过程中，可以在登陆等关键地方去调用`TinkerPatch.with().fetchPatchUpdate(true)`来检测有没有新的补丁包，若有，则去下载。下载完成补丁包后，sdk会自动去合成新的安装包，并且在息屏的时候自动重启主线程去加载新的文件，或者调用` ShareTinkerInternals.killAllOtherProcess(getApplicationContext());\n                android.os.Process.killProcess(android.os.Process.myPid());`来完成杀死主线程的目的。\n##### 使用步骤\n首先构建基础包，模拟用户当前使用的版本。\n在gradle中找到下图所示的 `assembleRelease`或者`assembleDebug`task，需要注意的是，如果构建基础包使用的是`debug`,那么在构建patch包的时候也要选择`debug`，还有就是尽量把`app/tinkerpatch.gradle`中定义的`variantName`改成一致的。\n基础包构建成功后，会在`app/build/bakApk`文件夹下生成对应的文件，找到和你构建时间一致的包。\n现在修改代码或者布局文件(模拟修复bug),修改清单文件`AndroidManifest.xml`中的versionName和versionCode。\n修改`app/tinkerpatch.gradle`文件，将其中定义的`baseInfo`修改为上面提到的路径。这时候**不需要修改**该文件中的`appVersion`。\n在gradle中找到tinker任务包，找到`tinkerPatchDebug`或者`tinkerPatchRelease`，构建差异包(补丁文件)。构建成功后会在`app/build/outputs/apk/tinkerPatch`文件夹中\n![tinkerTaskResult](/image/hotfix/tinker_task.png) ![tinkerTaskResult](/image/hotfix/tinker_task_result.png)\n现在我们已经成功构建的差异包`patch-signed-7zip.apk`,现在只需要将差异包上传到`tinker-patch`平台就可以了。\n\n##### 在tinker-patch平台发布差异包\n我们登陆tinker-patch平台，找到在刚开始创建的项目，在该项目里面添加一个App版本，注意这里的App版本号要和`tinkerpatch.gradle`里面定义的`appVersion`一致，在官方文档中也提到过这一点：\n>每一个 APP 版本对应一个已经发布的 base apk, 这里我们可以使用 APP 版本作为 TinkerID。我们需要保证每个发布的 APK 都采用不用的 APP 版本。\n\n创建好app版本之后，点击`发布新补丁`，选择补丁文件`patch-signed-7zip.apk`,填写一下备注就好了，这里有四种补丁的下发方式[开发预览](http://www.tinkerpatch.com/Docs/dev) 、`全量下发` 、[条件下发](http://www.tinkerpatch.com/Docs/rule) 、[灰度下发](http://www.tinkerpatch.com/Docs/rule)、具体差异可以点击去查看。\n同时我们也可以在平台对应的软件版本中的实时监控里面看到补丁的下载以及合成应用次数。\n\n----\n以上","source":"_posts/Tinker初探.md","raw":"---\ntitle: Tinker初探\ndate: 2018-03-10 12:35:18\ntags: [Android,热修复,tinker]\nkeywords: tinker热修复\n---\n前两天想试一下热修复的功能，对比各大平台的热修复功能，看到tinker的[文档介绍](http://www.tinkerpatch.com/Docs/intro)，最终决定先拿Tinker试一下。\n> \n||||||\n|:---:|:---:|:---:|:---:|:---:\n||Tinker|QZone|AndFix|Robust|\n|类替换|yes|yes|no|no|\n|So替换|yes|no|no|no|\n|资源替换|yes|yes|no|no|\n|全平台支持|yes|yes|no|yes|\n|即时生效|no|no|yes|yes|\n|性能损耗|较小|较大|较小|较小|\n|补丁包大小|较小|较大|一般|一般|\n|开发透明|yes|yes|no|no|\n|复杂度|较低|较低|复杂|复杂|\n|Rom体积|Dalvik较大|较小|较小|较小|\n|成功率|较高|较高|一般|最高|\n>Tinker热补丁方案不仅支持类、So 以及资源的替换，它还是2.X－7.X的全平台支持。利用Tinker我们不仅可以用做 bugfix,甚至可以替代功能的发布。Tinker 已运行在微信的数亿 Android 设备上，那么为什么你不使用 Tinker 呢？\n\n不得不说，我真的低估了跟着腾讯文档走的难度。\n<!--more-->\n\n### 注册 TinkerPatch 平台\n\n因为需要下发补丁，直接使用TinkerPatch平台就好，在这里注册[http://www.tinkerpatch.com/Index/reg](http://www.tinkerpatch.com/Index/reg),注册完成后创建一个应用，拿到`appKey`\n然后添加一个APP版本\n\n### SDK接入\n测试成功的工程全部文件在这里[https://github.com/huangyuanlove/TestTinker](https://github.com/huangyuanlove/TestTinker),包含构建成功之后的apk文件以及一些辅助文件。\n##### 添加Gradle插件依赖\nAndroidStudio创建一个工程，定义使用的SDK版本，我是放在了`gradle.properties` 这个文件中，\n> TINKER_VERSION=1.9.2\nTINKERPATCH_VERSION=1.2.2\n\n然后在工程的`build.gradle`文件中添加插件依赖\n> classpath \"com.tinkerpatch.sdk:tinkerpatch-gradle-plugin:${TINKERPATCH_VERSION}\"\n\n然后添加一些其他配置，整个文件内容如下\n``` groovy\nbuildscript {\n    repositories {\n        google()\n        jcenter()\n    }\n    dependencies {\n        classpath 'com.android.tools.build:gradle:3.0.1'\n        classpath \"com.tinkerpatch.sdk:tinkerpatch-gradle-plugin:${TINKERPATCH_VERSION}\"\n    }\n}\nif (JavaVersion.current().isJava8Compatible()) {\n    allprojects {\n        tasks.withType(Javadoc) {\n            options.addStringOption('Xdoclint:none', '-quiet')\n        }\n    }\n}\nsubprojects {\n    tasks.withType(JavaCompile) {\n        sourceCompatibility = JavaVersion.VERSION_1_7\n        targetCompatibility = JavaVersion.VERSION_1_7\n    }\n}\nallprojects {\n    repositories {\n        google()\n        jcenter()\n    }\n}\ntask clean(type: Delete) {\n    delete rootProject.buildDir\n}\n\n```\n##### 集成 TinkerPatch SDK\n在`app/build.gradle`里面添加依赖\n> \n    annotationProcessor(\"com.tinkerpatch.tinker:tinker-android-anno:${TINKER_VERSION}\") { changing = true }\n    compileOnly(\"com.tinkerpatch.tinker:tinker-android-anno:${TINKER_VERSION}\") { changing = true }\n    implementation(\"com.tinkerpatch.sdk:tinkerpatch-android-sdk:${TINKERPATCH_VERSION}\") { changing = true }\n\n为了配置方便，我们把TinkerPatchSupport相关的配置放在一个单独的gradle文件中，在app下创建一个`tinkerpatch.gradle`，我们需要在`app/build.grale`文件中引用\n> apply from: 'tinkerpatch.gradle'\n\n##### 配置 tinkerpatchSupport 参数\n编辑 `app/tinkerpatch.gralde`文件\n``` groovy\n\napply plugin: 'tinkerpatch-support'\n\n/**\n * TODO: 请按自己的需求修改为适应自己工程的参数\n */\ndef bakPath = file(\"${buildDir}/bakApk/\")\ndef baseInfo = \"app-1.0.0-0309-21-30-56\" //构建差异文件时使用\ndef variantName = \"debug\"\n\n/**\n * 对于插件各参数的详细解析请参考\n * http://tinkerpatch.com/Docs/SDK\n */\ntinkerpatchSupport {\n    /** 可以在debug的时候关闭 tinkerPatch **/\n    /** 当disable tinker的时候需要添加multiDexKeepProguard和proguardFiles,\n        这些配置文件本身由tinkerPatch的插件自动添加，当你disable后需要手动添加\n        你可以copy本示例中的proguardRules.pro和tinkerMultidexKeep.pro,\n        需要你手动修改'tinker.sample.android.app'本示例的包名为你自己的包名, com.xxx前缀的包名不用修改\n     **/\n    tinkerEnable = true\n    reflectApplication = false\n    /**\n     * 是否开启加固模式，只能在APK将要进行加固时使用，否则会patch失败。\n     * 如果只在某个渠道使用了加固，可使用多flavors配置\n     **/\n    protectedApp = false\n    /**\n     * 实验功能\n     * 补丁是否支持新增 Activity (新增Activity的exported属性必须为false)\n     **/\n    supportComponent = true\n\n    autoBackupApkPath = \"${bakPath}\"\n\n    appKey = \"2b662623551153ee\"\n\n    /** 注意: 若发布新的全量包, appVersion一定要更新 **/\n    appVersion = \"1.0.0\"\n\n    def pathPrefix = \"${bakPath}/${baseInfo}/${variantName}/\"\n    def name = \"${project.name}-${variantName}\"\n\n    baseApkFile = \"${pathPrefix}/${name}.apk\"\n    baseProguardMappingFile = \"${pathPrefix}/${name}-mapping.txt\"\n    baseResourceRFile = \"${pathPrefix}/${name}-R.txt\"\n\n    /**\n     *  若有编译多flavors需求, 可以参照： https://github.com/TinkerPatch/tinkerpatch-flavors-sample\n     *  注意: 除非你不同的flavor代码是不一样的,不然建议采用zip comment或者文件方式生成渠道信息（相关工具：walle 或者 packer-ng）\n     **/\n}\n\n/**\n * 用于用户在代码中判断tinkerPatch是否被使能\n */\nandroid {\n    defaultConfig {\n        buildConfigField \"boolean\", \"TINKER_ENABLE\", \"${tinkerpatchSupport.tinkerEnable}\"\n    }\n}\n\n/**\n * 一般来说,我们无需对下面的参数做任何的修改\n * 对于各参数的详细介绍请参考:\n * https://github.com/Tencent/tinker/wiki/Tinker-%E6%8E%A5%E5%85%A5%E6%8C%87%E5%8D%97\n */\ntinkerPatch {\n    ignoreWarning = false\n    useSign = true\n    dex {\n        dexMode = \"jar\"\n        pattern = [\"classes*.dex\"]\n        loader = []\n    }\n    lib {\n        pattern = [\"lib/*/*.so\"]\n    }\n\n    res {\n        pattern = [\"res/*\", \"r/*\", \"assets/*\", \"resources.arsc\", \"AndroidManifest.xml\"]\n        ignoreChange = []\n        largeModSize = 100\n    }\n\n    packageConfig {\n    }\n    sevenZip {\n        zipArtifact = \"com.tencent.mm:SevenZip:1.1.10\"\n    }\n    buildConfig {\n        keepDexApply = false\n    }\n}\n```\n每个参数的含义如下\n\n|参数|默认值|描述|\n|:----:|:----:|:----:|\n|tinkerEnable|true|是否开启 tinkerpatchSupport 插件功能|\n|appKey\t|\"\"\t|在 TinkerPatch 平台 申请的 appkey|\n|appVersion\t|\"\"\t|在 TinkerPatch 平台 输入的版本号,注意，我们使用 appVersion 作为 TinkerId, 我们需要保证每个发布出去的基础安装包的 appVersion 都不一样。|\n|reflectApplication|false|是否反射 Application 实现一键接入；一般来说，接入 Tinker 我们需要改造我们|的 Application, 若这里为 true， 即我们无需对应用做任何改造即可接入。|\n|autoBackupApkPath|\"\"|将每次编译产生的 apk/mapping.txt/R.txt 归档存储的位置|\n|baseApkFile|\"\"|基准包的文件路径, 对应 tinker 插件中的 oldApk 参数;编译补丁包时，必需指定基准版本的 apk，默认值为空，则表示不是进行补丁包的编译。|\n|baseProguardMappingFile|\"\"|基准包的 Proguard mapping.txt 文件路径, 对应 tinker 插件 applyMapping 参数；在编译新的 apk 时候，我们希望通过保持基准 apk 的 proguard 混淆方式，从而减少补丁包的大小。这是强烈推荐的，编译补丁包时，我们推荐输入基准 apk 生成的 mapping.txt 文件。|\n|baseResourceRFile|\"\"|基准包的资源 R.txt 文件路径, 对应 tinker 插件 applyResourceMapping 参数；在编译新的apk时候，我们希望通基准 apk 的 R.txt 文件来保持 Resource Id 的分配，这样不仅可以减少补丁包的大小，同时也避免由于 Resource Id 改变导致 remote view 异常。|\n|protectedApp\t|false\t|是否开启支持加固，注意：只有在使用加固时才能开启此开关|\n|supportComponent\t|false\t|是否开启支持在补丁包中动态增加Activity 注意：新增Activity的Exported属性必须为false|\n|backupFileNameFormat|\t'\\${appName}-\\${variantName}'|\t格式化命名备份文件 这里请使用单引号|\n\n##### 初始化 TinkerPatch SDK\n这里推荐使用改造之后的ApplicationLike，对应`tinkerpatch.gradle`文件中的`reflectApplication = false`,这里给出了完整的ApplicationLike类，可以在这里查看[https://github.com/huangyuanlove/TestTinker/blob/master/app/src/main/java/com/huangyuan/testtinker/SampleApplicationLike.java](https://github.com/huangyuanlove/TestTinker/blob/master/app/src/main/java/com/huangyuan/testtinker/SampleApplicationLike.java)\n其中对于类的注解中的 `application` 的值，就是我们应用的Application类，需要在`AndroidManifest.xml`中的`application`标签中配置\n``` java\n@DefaultLifeCycle(application = \"com.huangyuanlove.testtinker.SampleApplication\",\n                  flags = ShareConstants.TINKER_ENABLE_ALL,\n                  loadVerifyFlag = false)`\n```\n\n**注意：初始化的代码建议紧跟 super.onCreate(),并且所有进程都需要初始化，已达到所有进程都可以被 patch 的目的\n如果你确定只想在主进程中初始化 tinkerPatch，那也请至少在 :patch 进程中初始化，否则会有造成 :patch 进程crash，无法使补丁生效**\n我们在实际应用过程中，可以在登陆等关键地方去调用`TinkerPatch.with().fetchPatchUpdate(true)`来检测有没有新的补丁包，若有，则去下载。下载完成补丁包后，sdk会自动去合成新的安装包，并且在息屏的时候自动重启主线程去加载新的文件，或者调用` ShareTinkerInternals.killAllOtherProcess(getApplicationContext());\n                android.os.Process.killProcess(android.os.Process.myPid());`来完成杀死主线程的目的。\n##### 使用步骤\n首先构建基础包，模拟用户当前使用的版本。\n在gradle中找到下图所示的 `assembleRelease`或者`assembleDebug`task，需要注意的是，如果构建基础包使用的是`debug`,那么在构建patch包的时候也要选择`debug`，还有就是尽量把`app/tinkerpatch.gradle`中定义的`variantName`改成一致的。\n基础包构建成功后，会在`app/build/bakApk`文件夹下生成对应的文件，找到和你构建时间一致的包。\n现在修改代码或者布局文件(模拟修复bug),修改清单文件`AndroidManifest.xml`中的versionName和versionCode。\n修改`app/tinkerpatch.gradle`文件，将其中定义的`baseInfo`修改为上面提到的路径。这时候**不需要修改**该文件中的`appVersion`。\n在gradle中找到tinker任务包，找到`tinkerPatchDebug`或者`tinkerPatchRelease`，构建差异包(补丁文件)。构建成功后会在`app/build/outputs/apk/tinkerPatch`文件夹中\n![tinkerTaskResult](/image/hotfix/tinker_task.png) ![tinkerTaskResult](/image/hotfix/tinker_task_result.png)\n现在我们已经成功构建的差异包`patch-signed-7zip.apk`,现在只需要将差异包上传到`tinker-patch`平台就可以了。\n\n##### 在tinker-patch平台发布差异包\n我们登陆tinker-patch平台，找到在刚开始创建的项目，在该项目里面添加一个App版本，注意这里的App版本号要和`tinkerpatch.gradle`里面定义的`appVersion`一致，在官方文档中也提到过这一点：\n>每一个 APP 版本对应一个已经发布的 base apk, 这里我们可以使用 APP 版本作为 TinkerID。我们需要保证每个发布的 APK 都采用不用的 APP 版本。\n\n创建好app版本之后，点击`发布新补丁`，选择补丁文件`patch-signed-7zip.apk`,填写一下备注就好了，这里有四种补丁的下发方式[开发预览](http://www.tinkerpatch.com/Docs/dev) 、`全量下发` 、[条件下发](http://www.tinkerpatch.com/Docs/rule) 、[灰度下发](http://www.tinkerpatch.com/Docs/rule)、具体差异可以点击去查看。\n同时我们也可以在平台对应的软件版本中的实时监控里面看到补丁的下载以及合成应用次数。\n\n----\n以上","slug":"Tinker初探","published":1,"updated":"2018-08-04T05:16:13.461Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjl3vbtr8001xisdgblhrmphb","content":"<p>前两天想试一下热修复的功能，对比各大平台的热修复功能，看到tinker的<a href=\"http://www.tinkerpatch.com/Docs/intro\" target=\"_blank\" rel=\"external\">文档介绍</a>，最终决定先拿Tinker试一下。</p>\n<blockquote>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:center\"></th>\n<th style=\"text-align:center\"></th>\n<th style=\"text-align:center\"></th>\n<th style=\"text-align:center\"></th>\n<th style=\"text-align:center\"></th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\"></td>\n<td style=\"text-align:center\">Tinker</td>\n<td style=\"text-align:center\">QZone</td>\n<td style=\"text-align:center\">AndFix</td>\n<td style=\"text-align:center\">Robust</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">类替换</td>\n<td style=\"text-align:center\">yes</td>\n<td style=\"text-align:center\">yes</td>\n<td style=\"text-align:center\">no</td>\n<td style=\"text-align:center\">no</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">So替换</td>\n<td style=\"text-align:center\">yes</td>\n<td style=\"text-align:center\">no</td>\n<td style=\"text-align:center\">no</td>\n<td style=\"text-align:center\">no</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">资源替换</td>\n<td style=\"text-align:center\">yes</td>\n<td style=\"text-align:center\">yes</td>\n<td style=\"text-align:center\">no</td>\n<td style=\"text-align:center\">no</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">全平台支持</td>\n<td style=\"text-align:center\">yes</td>\n<td style=\"text-align:center\">yes</td>\n<td style=\"text-align:center\">no</td>\n<td style=\"text-align:center\">yes</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">即时生效</td>\n<td style=\"text-align:center\">no</td>\n<td style=\"text-align:center\">no</td>\n<td style=\"text-align:center\">yes</td>\n<td style=\"text-align:center\">yes</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">性能损耗</td>\n<td style=\"text-align:center\">较小</td>\n<td style=\"text-align:center\">较大</td>\n<td style=\"text-align:center\">较小</td>\n<td style=\"text-align:center\">较小</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">补丁包大小</td>\n<td style=\"text-align:center\">较小</td>\n<td style=\"text-align:center\">较大</td>\n<td style=\"text-align:center\">一般</td>\n<td style=\"text-align:center\">一般</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">开发透明</td>\n<td style=\"text-align:center\">yes</td>\n<td style=\"text-align:center\">yes</td>\n<td style=\"text-align:center\">no</td>\n<td style=\"text-align:center\">no</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">复杂度</td>\n<td style=\"text-align:center\">较低</td>\n<td style=\"text-align:center\">较低</td>\n<td style=\"text-align:center\">复杂</td>\n<td style=\"text-align:center\">复杂</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">Rom体积</td>\n<td style=\"text-align:center\">Dalvik较大</td>\n<td style=\"text-align:center\">较小</td>\n<td style=\"text-align:center\">较小</td>\n<td style=\"text-align:center\">较小</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">成功率</td>\n<td style=\"text-align:center\">较高</td>\n<td style=\"text-align:center\">较高</td>\n<td style=\"text-align:center\">一般</td>\n<td style=\"text-align:center\">最高</td>\n</tr>\n</tbody>\n</table>\n<p>Tinker热补丁方案不仅支持类、So 以及资源的替换，它还是2.X－7.X的全平台支持。利用Tinker我们不仅可以用做 bugfix,甚至可以替代功能的发布。Tinker 已运行在微信的数亿 Android 设备上，那么为什么你不使用 Tinker 呢？</p>\n</blockquote>\n<p>不得不说，我真的低估了跟着腾讯文档走的难度。<br><a id=\"more\"></a></p>\n<h3 id=\"注册-TinkerPatch-平台\"><a href=\"#注册-TinkerPatch-平台\" class=\"headerlink\" title=\"注册 TinkerPatch 平台\"></a>注册 TinkerPatch 平台</h3><p>因为需要下发补丁，直接使用TinkerPatch平台就好，在这里注册<a href=\"http://www.tinkerpatch.com/Index/reg\" target=\"_blank\" rel=\"external\">http://www.tinkerpatch.com/Index/reg</a>,注册完成后创建一个应用，拿到<code>appKey</code><br>然后添加一个APP版本</p>\n<h3 id=\"SDK接入\"><a href=\"#SDK接入\" class=\"headerlink\" title=\"SDK接入\"></a>SDK接入</h3><p>测试成功的工程全部文件在这里<a href=\"https://github.com/huangyuanlove/TestTinker\" target=\"_blank\" rel=\"external\">https://github.com/huangyuanlove/TestTinker</a>,包含构建成功之后的apk文件以及一些辅助文件。</p>\n<h5 id=\"添加Gradle插件依赖\"><a href=\"#添加Gradle插件依赖\" class=\"headerlink\" title=\"添加Gradle插件依赖\"></a>添加Gradle插件依赖</h5><p>AndroidStudio创建一个工程，定义使用的SDK版本，我是放在了<code>gradle.properties</code> 这个文件中，</p>\n<blockquote>\n<p>TINKER_VERSION=1.9.2<br>TINKERPATCH_VERSION=1.2.2</p>\n</blockquote>\n<p>然后在工程的<code>build.gradle</code>文件中添加插件依赖</p>\n<blockquote>\n<p>classpath “com.tinkerpatch.sdk:tinkerpatch-gradle-plugin:${TINKERPATCH_VERSION}”</p>\n</blockquote>\n<p>然后添加一些其他配置，整个文件内容如下<br><figure class=\"highlight groovy\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div></pre></td><td class=\"code\"><pre><div class=\"line\">buildscript &#123;</div><div class=\"line\">    repositories &#123;</div><div class=\"line\">        google()</div><div class=\"line\">        jcenter()</div><div class=\"line\">    &#125;</div><div class=\"line\">    dependencies &#123;</div><div class=\"line\">        classpath <span class=\"string\">'com.android.tools.build:gradle:3.0.1'</span></div><div class=\"line\">        classpath <span class=\"string\">\"com.tinkerpatch.sdk:tinkerpatch-gradle-plugin:$&#123;TINKERPATCH_VERSION&#125;\"</span></div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"keyword\">if</span> (JavaVersion.current().isJava8Compatible()) &#123;</div><div class=\"line\">    allprojects &#123;</div><div class=\"line\">        tasks.withType(Javadoc) &#123;</div><div class=\"line\">            options.addStringOption(<span class=\"string\">'Xdoclint:none'</span>, <span class=\"string\">'-quiet'</span>)</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\">subprojects &#123;</div><div class=\"line\">    tasks.withType(JavaCompile) &#123;</div><div class=\"line\">        sourceCompatibility = JavaVersion.VERSION_1_7</div><div class=\"line\">        targetCompatibility = JavaVersion.VERSION_1_7</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\">allprojects &#123;</div><div class=\"line\">    repositories &#123;</div><div class=\"line\">        google()</div><div class=\"line\">        jcenter()</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\">task clean(<span class=\"string\">type:</span> Delete) &#123;</div><div class=\"line\">    delete rootProject.buildDir</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<h5 id=\"集成-TinkerPatch-SDK\"><a href=\"#集成-TinkerPatch-SDK\" class=\"headerlink\" title=\"集成 TinkerPatch SDK\"></a>集成 TinkerPatch SDK</h5><p>在<code>app/build.gradle</code>里面添加依赖</p>\n<blockquote>\n<pre><code>annotationProcessor(&quot;com.tinkerpatch.tinker:tinker-android-anno:${TINKER_VERSION}&quot;) { changing = true }\ncompileOnly(&quot;com.tinkerpatch.tinker:tinker-android-anno:${TINKER_VERSION}&quot;) { changing = true }\nimplementation(&quot;com.tinkerpatch.sdk:tinkerpatch-android-sdk:${TINKERPATCH_VERSION}&quot;) { changing = true }\n</code></pre></blockquote>\n<p>为了配置方便，我们把TinkerPatchSupport相关的配置放在一个单独的gradle文件中，在app下创建一个<code>tinkerpatch.gradle</code>，我们需要在<code>app/build.grale</code>文件中引用</p>\n<blockquote>\n<p>apply from: ‘tinkerpatch.gradle’</p>\n</blockquote>\n<h5 id=\"配置-tinkerpatchSupport-参数\"><a href=\"#配置-tinkerpatchSupport-参数\" class=\"headerlink\" title=\"配置 tinkerpatchSupport 参数\"></a>配置 tinkerpatchSupport 参数</h5><p>编辑 <code>app/tinkerpatch.gralde</code>文件<br><figure class=\"highlight groovy\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div><div class=\"line\">71</div><div class=\"line\">72</div><div class=\"line\">73</div><div class=\"line\">74</div><div class=\"line\">75</div><div class=\"line\">76</div><div class=\"line\">77</div><div class=\"line\">78</div><div class=\"line\">79</div><div class=\"line\">80</div><div class=\"line\">81</div><div class=\"line\">82</div><div class=\"line\">83</div><div class=\"line\">84</div><div class=\"line\">85</div><div class=\"line\">86</div><div class=\"line\">87</div><div class=\"line\">88</div><div class=\"line\">89</div><div class=\"line\">90</div><div class=\"line\">91</div><div class=\"line\">92</div><div class=\"line\">93</div><div class=\"line\">94</div><div class=\"line\">95</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\">apply <span class=\"string\">plugin:</span> <span class=\"string\">'tinkerpatch-support'</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">/**</span></div><div class=\"line\"> * <span class=\"doctag\">TODO:</span> 请按自己的需求修改为适应自己工程的参数</div><div class=\"line\"> */</div><div class=\"line\"><span class=\"keyword\">def</span> bakPath = file(<span class=\"string\">\"$&#123;buildDir&#125;/bakApk/\"</span>)</div><div class=\"line\"><span class=\"keyword\">def</span> baseInfo = <span class=\"string\">\"app-1.0.0-0309-21-30-56\"</span> <span class=\"comment\">//构建差异文件时使用</span></div><div class=\"line\"><span class=\"keyword\">def</span> variantName = <span class=\"string\">\"debug\"</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">/**</span></div><div class=\"line\"> * 对于插件各参数的详细解析请参考</div><div class=\"line\"> * http://tinkerpatch.com/Docs/SDK</div><div class=\"line\"> */</div><div class=\"line\">tinkerpatchSupport &#123;</div><div class=\"line\">    <span class=\"comment\">/** 可以在debug的时候关闭 tinkerPatch **/</span></div><div class=\"line\">    <span class=\"comment\">/** 当disable tinker的时候需要添加multiDexKeepProguard和proguardFiles,</span></div><div class=\"line\">        这些配置文件本身由tinkerPatch的插件自动添加，当你disable后需要手动添加</div><div class=\"line\">        你可以copy本示例中的proguardRules.pro和tinkerMultidexKeep.pro,</div><div class=\"line\">        需要你手动修改'tinker.sample.android.app'本示例的包名为你自己的包名, com.xxx前缀的包名不用修改</div><div class=\"line\">     **/</div><div class=\"line\">    tinkerEnable = <span class=\"literal\">true</span></div><div class=\"line\">    reflectApplication = <span class=\"literal\">false</span></div><div class=\"line\">    <span class=\"comment\">/**</span></div><div class=\"line\">     * 是否开启加固模式，只能在APK将要进行加固时使用，否则会patch失败。</div><div class=\"line\">     * 如果只在某个渠道使用了加固，可使用多flavors配置</div><div class=\"line\">     **/</div><div class=\"line\">    protectedApp = <span class=\"literal\">false</span></div><div class=\"line\">    <span class=\"comment\">/**</span></div><div class=\"line\">     * 实验功能</div><div class=\"line\">     * 补丁是否支持新增 Activity (新增Activity的exported属性必须为false)</div><div class=\"line\">     **/</div><div class=\"line\">    supportComponent = <span class=\"literal\">true</span></div><div class=\"line\"></div><div class=\"line\">    autoBackupApkPath = <span class=\"string\">\"$&#123;bakPath&#125;\"</span></div><div class=\"line\"></div><div class=\"line\">    appKey = <span class=\"string\">\"2b662623551153ee\"</span></div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">/** 注意: 若发布新的全量包, appVersion一定要更新 **/</span></div><div class=\"line\">    appVersion = <span class=\"string\">\"1.0.0\"</span></div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">def</span> pathPrefix = <span class=\"string\">\"$&#123;bakPath&#125;/$&#123;baseInfo&#125;/$&#123;variantName&#125;/\"</span></div><div class=\"line\">    <span class=\"keyword\">def</span> name = <span class=\"string\">\"$&#123;project.name&#125;-$&#123;variantName&#125;\"</span></div><div class=\"line\"></div><div class=\"line\">    baseApkFile = <span class=\"string\">\"$&#123;pathPrefix&#125;/$&#123;name&#125;.apk\"</span></div><div class=\"line\">    baseProguardMappingFile = <span class=\"string\">\"$&#123;pathPrefix&#125;/$&#123;name&#125;-mapping.txt\"</span></div><div class=\"line\">    baseResourceRFile = <span class=\"string\">\"$&#123;pathPrefix&#125;/$&#123;name&#125;-R.txt\"</span></div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">/**</span></div><div class=\"line\">     *  若有编译多flavors需求, 可以参照： https://github.com/TinkerPatch/tinkerpatch-flavors-sample</div><div class=\"line\">     *  注意: 除非你不同的flavor代码是不一样的,不然建议采用zip comment或者文件方式生成渠道信息（相关工具：walle 或者 packer-ng）</div><div class=\"line\">     **/</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">/**</span></div><div class=\"line\"> * 用于用户在代码中判断tinkerPatch是否被使能</div><div class=\"line\"> */</div><div class=\"line\">android &#123;</div><div class=\"line\">    defaultConfig &#123;</div><div class=\"line\">        buildConfigField <span class=\"string\">\"boolean\"</span>, <span class=\"string\">\"TINKER_ENABLE\"</span>, <span class=\"string\">\"$&#123;tinkerpatchSupport.tinkerEnable&#125;\"</span></div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">/**</span></div><div class=\"line\"> * 一般来说,我们无需对下面的参数做任何的修改</div><div class=\"line\"> * 对于各参数的详细介绍请参考:</div><div class=\"line\"> * https://github.com/Tencent/tinker/wiki/Tinker-%E6%8E%A5%E5%85%A5%E6%8C%87%E5%8D%97</div><div class=\"line\"> */</div><div class=\"line\">tinkerPatch &#123;</div><div class=\"line\">    ignoreWarning = <span class=\"literal\">false</span></div><div class=\"line\">    useSign = <span class=\"literal\">true</span></div><div class=\"line\">    dex &#123;</div><div class=\"line\">        dexMode = <span class=\"string\">\"jar\"</span></div><div class=\"line\">        pattern = [<span class=\"string\">\"classes*.dex\"</span>]</div><div class=\"line\">        loader = []</div><div class=\"line\">    &#125;</div><div class=\"line\">    lib &#123;</div><div class=\"line\">        pattern = [<span class=\"string\">\"lib/*/*.so\"</span>]</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    res &#123;</div><div class=\"line\">        pattern = [<span class=\"string\">\"res/*\"</span>, <span class=\"string\">\"r/*\"</span>, <span class=\"string\">\"assets/*\"</span>, <span class=\"string\">\"resources.arsc\"</span>, <span class=\"string\">\"AndroidManifest.xml\"</span>]</div><div class=\"line\">        ignoreChange = []</div><div class=\"line\">        largeModSize = <span class=\"number\">100</span></div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    packageConfig &#123;</div><div class=\"line\">    &#125;</div><div class=\"line\">    sevenZip &#123;</div><div class=\"line\">        zipArtifact = <span class=\"string\">\"com.tencent.mm:SevenZip:1.1.10\"</span></div><div class=\"line\">    &#125;</div><div class=\"line\">    buildConfig &#123;</div><div class=\"line\">        keepDexApply = <span class=\"literal\">false</span></div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>每个参数的含义如下</p>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:center\">参数</th>\n<th style=\"text-align:center\">默认值</th>\n<th style=\"text-align:center\">描述</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\">tinkerEnable</td>\n<td style=\"text-align:center\">true</td>\n<td style=\"text-align:center\">是否开启 tinkerpatchSupport 插件功能</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">appKey</td>\n<td style=\"text-align:center\">“”</td>\n<td style=\"text-align:center\">在 TinkerPatch 平台 申请的 appkey</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">appVersion</td>\n<td style=\"text-align:center\">“”</td>\n<td style=\"text-align:center\">在 TinkerPatch 平台 输入的版本号,注意，我们使用 appVersion 作为 TinkerId, 我们需要保证每个发布出去的基础安装包的 appVersion 都不一样。</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">reflectApplication</td>\n<td style=\"text-align:center\">false</td>\n<td style=\"text-align:center\">是否反射 Application 实现一键接入；一般来说，接入 Tinker 我们需要改造我们</td>\n<td>的 Application, 若这里为 true， 即我们无需对应用做任何改造即可接入。</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">autoBackupApkPath</td>\n<td style=\"text-align:center\">“”</td>\n<td style=\"text-align:center\">将每次编译产生的 apk/mapping.txt/R.txt 归档存储的位置</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">baseApkFile</td>\n<td style=\"text-align:center\">“”</td>\n<td style=\"text-align:center\">基准包的文件路径, 对应 tinker 插件中的 oldApk 参数;编译补丁包时，必需指定基准版本的 apk，默认值为空，则表示不是进行补丁包的编译。</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">baseProguardMappingFile</td>\n<td style=\"text-align:center\">“”</td>\n<td style=\"text-align:center\">基准包的 Proguard mapping.txt 文件路径, 对应 tinker 插件 applyMapping 参数；在编译新的 apk 时候，我们希望通过保持基准 apk 的 proguard 混淆方式，从而减少补丁包的大小。这是强烈推荐的，编译补丁包时，我们推荐输入基准 apk 生成的 mapping.txt 文件。</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">baseResourceRFile</td>\n<td style=\"text-align:center\">“”</td>\n<td style=\"text-align:center\">基准包的资源 R.txt 文件路径, 对应 tinker 插件 applyResourceMapping 参数；在编译新的apk时候，我们希望通基准 apk 的 R.txt 文件来保持 Resource Id 的分配，这样不仅可以减少补丁包的大小，同时也避免由于 Resource Id 改变导致 remote view 异常。</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">protectedApp</td>\n<td style=\"text-align:center\">false</td>\n<td style=\"text-align:center\">是否开启支持加固，注意：只有在使用加固时才能开启此开关</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">supportComponent</td>\n<td style=\"text-align:center\">false</td>\n<td style=\"text-align:center\">是否开启支持在补丁包中动态增加Activity 注意：新增Activity的Exported属性必须为false</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">backupFileNameFormat</td>\n<td style=\"text-align:center\">‘\\${appName}-\\${variantName}’</td>\n<td style=\"text-align:center\">格式化命名备份文件 这里请使用单引号</td>\n</tr>\n</tbody>\n</table>\n<h5 id=\"初始化-TinkerPatch-SDK\"><a href=\"#初始化-TinkerPatch-SDK\" class=\"headerlink\" title=\"初始化 TinkerPatch SDK\"></a>初始化 TinkerPatch SDK</h5><p>这里推荐使用改造之后的ApplicationLike，对应<code>tinkerpatch.gradle</code>文件中的<code>reflectApplication = false</code>,这里给出了完整的ApplicationLike类，可以在这里查看<a href=\"https://github.com/huangyuanlove/TestTinker/blob/master/app/src/main/java/com/huangyuan/testtinker/SampleApplicationLike.java\" target=\"_blank\" rel=\"external\">https://github.com/huangyuanlove/TestTinker/blob/master/app/src/main/java/com/huangyuan/testtinker/SampleApplicationLike.java</a><br>其中对于类的注解中的 <code>application</code> 的值，就是我们应用的Application类，需要在<code>AndroidManifest.xml</code>中的<code>application</code>标签中配置<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">@DefaultLifeCycle</span>(application = <span class=\"string\">\"com.huangyuanlove.testtinker.SampleApplication\"</span>,</div><div class=\"line\">                  flags = ShareConstants.TINKER_ENABLE_ALL,</div><div class=\"line\">                  loadVerifyFlag = <span class=\"keyword\">false</span>)`</div></pre></td></tr></table></figure></p>\n<p><strong>注意：初始化的代码建议紧跟 super.onCreate(),并且所有进程都需要初始化，已达到所有进程都可以被 patch 的目的<br>如果你确定只想在主进程中初始化 tinkerPatch，那也请至少在 :patch 进程中初始化，否则会有造成 :patch 进程crash，无法使补丁生效</strong><br>我们在实际应用过程中，可以在登陆等关键地方去调用<code>TinkerPatch.with().fetchPatchUpdate(true)</code>来检测有没有新的补丁包，若有，则去下载。下载完成补丁包后，sdk会自动去合成新的安装包，并且在息屏的时候自动重启主线程去加载新的文件，或者调用<code>ShareTinkerInternals.killAllOtherProcess(getApplicationContext());\n                android.os.Process.killProcess(android.os.Process.myPid());</code>来完成杀死主线程的目的。</p>\n<h5 id=\"使用步骤\"><a href=\"#使用步骤\" class=\"headerlink\" title=\"使用步骤\"></a>使用步骤</h5><p>首先构建基础包，模拟用户当前使用的版本。<br>在gradle中找到下图所示的 <code>assembleRelease</code>或者<code>assembleDebug</code>task，需要注意的是，如果构建基础包使用的是<code>debug</code>,那么在构建patch包的时候也要选择<code>debug</code>，还有就是尽量把<code>app/tinkerpatch.gradle</code>中定义的<code>variantName</code>改成一致的。<br>基础包构建成功后，会在<code>app/build/bakApk</code>文件夹下生成对应的文件，找到和你构建时间一致的包。<br>现在修改代码或者布局文件(模拟修复bug),修改清单文件<code>AndroidManifest.xml</code>中的versionName和versionCode。<br>修改<code>app/tinkerpatch.gradle</code>文件，将其中定义的<code>baseInfo</code>修改为上面提到的路径。这时候<strong>不需要修改</strong>该文件中的<code>appVersion</code>。<br>在gradle中找到tinker任务包，找到<code>tinkerPatchDebug</code>或者<code>tinkerPatchRelease</code>，构建差异包(补丁文件)。构建成功后会在<code>app/build/outputs/apk/tinkerPatch</code>文件夹中<br><img src=\"/image/hotfix/tinker_task.png\" alt=\"tinkerTaskResult\"> <img src=\"/image/hotfix/tinker_task_result.png\" alt=\"tinkerTaskResult\"><br>现在我们已经成功构建的差异包<code>patch-signed-7zip.apk</code>,现在只需要将差异包上传到<code>tinker-patch</code>平台就可以了。</p>\n<h5 id=\"在tinker-patch平台发布差异包\"><a href=\"#在tinker-patch平台发布差异包\" class=\"headerlink\" title=\"在tinker-patch平台发布差异包\"></a>在tinker-patch平台发布差异包</h5><p>我们登陆tinker-patch平台，找到在刚开始创建的项目，在该项目里面添加一个App版本，注意这里的App版本号要和<code>tinkerpatch.gradle</code>里面定义的<code>appVersion</code>一致，在官方文档中也提到过这一点：</p>\n<blockquote>\n<p>每一个 APP 版本对应一个已经发布的 base apk, 这里我们可以使用 APP 版本作为 TinkerID。我们需要保证每个发布的 APK 都采用不用的 APP 版本。</p>\n</blockquote>\n<p>创建好app版本之后，点击<code>发布新补丁</code>，选择补丁文件<code>patch-signed-7zip.apk</code>,填写一下备注就好了，这里有四种补丁的下发方式<a href=\"http://www.tinkerpatch.com/Docs/dev\" target=\"_blank\" rel=\"external\">开发预览</a> 、<code>全量下发</code> 、<a href=\"http://www.tinkerpatch.com/Docs/rule\" target=\"_blank\" rel=\"external\">条件下发</a> 、<a href=\"http://www.tinkerpatch.com/Docs/rule\" target=\"_blank\" rel=\"external\">灰度下发</a>、具体差异可以点击去查看。<br>同时我们也可以在平台对应的软件版本中的实时监控里面看到补丁的下载以及合成应用次数。</p>\n<hr>\n<p>以上</p>\n","excerpt":"<p>前两天想试一下热修复的功能，对比各大平台的热修复功能，看到tinker的<a href=\"http://www.tinkerpatch.com/Docs/intro\">文档介绍</a>，最终决定先拿Tinker试一下。</p>\n<blockquote>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:center\"></th>\n<th style=\"text-align:center\"></th>\n<th style=\"text-align:center\"></th>\n<th style=\"text-align:center\"></th>\n<th style=\"text-align:center\"></th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\"></td>\n<td style=\"text-align:center\">Tinker</td>\n<td style=\"text-align:center\">QZone</td>\n<td style=\"text-align:center\">AndFix</td>\n<td style=\"text-align:center\">Robust</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">类替换</td>\n<td style=\"text-align:center\">yes</td>\n<td style=\"text-align:center\">yes</td>\n<td style=\"text-align:center\">no</td>\n<td style=\"text-align:center\">no</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">So替换</td>\n<td style=\"text-align:center\">yes</td>\n<td style=\"text-align:center\">no</td>\n<td style=\"text-align:center\">no</td>\n<td style=\"text-align:center\">no</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">资源替换</td>\n<td style=\"text-align:center\">yes</td>\n<td style=\"text-align:center\">yes</td>\n<td style=\"text-align:center\">no</td>\n<td style=\"text-align:center\">no</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">全平台支持</td>\n<td style=\"text-align:center\">yes</td>\n<td style=\"text-align:center\">yes</td>\n<td style=\"text-align:center\">no</td>\n<td style=\"text-align:center\">yes</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">即时生效</td>\n<td style=\"text-align:center\">no</td>\n<td style=\"text-align:center\">no</td>\n<td style=\"text-align:center\">yes</td>\n<td style=\"text-align:center\">yes</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">性能损耗</td>\n<td style=\"text-align:center\">较小</td>\n<td style=\"text-align:center\">较大</td>\n<td style=\"text-align:center\">较小</td>\n<td style=\"text-align:center\">较小</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">补丁包大小</td>\n<td style=\"text-align:center\">较小</td>\n<td style=\"text-align:center\">较大</td>\n<td style=\"text-align:center\">一般</td>\n<td style=\"text-align:center\">一般</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">开发透明</td>\n<td style=\"text-align:center\">yes</td>\n<td style=\"text-align:center\">yes</td>\n<td style=\"text-align:center\">no</td>\n<td style=\"text-align:center\">no</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">复杂度</td>\n<td style=\"text-align:center\">较低</td>\n<td style=\"text-align:center\">较低</td>\n<td style=\"text-align:center\">复杂</td>\n<td style=\"text-align:center\">复杂</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">Rom体积</td>\n<td style=\"text-align:center\">Dalvik较大</td>\n<td style=\"text-align:center\">较小</td>\n<td style=\"text-align:center\">较小</td>\n<td style=\"text-align:center\">较小</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">成功率</td>\n<td style=\"text-align:center\">较高</td>\n<td style=\"text-align:center\">较高</td>\n<td style=\"text-align:center\">一般</td>\n<td style=\"text-align:center\">最高</td>\n</tr>\n</tbody>\n</table>\n<p>Tinker热补丁方案不仅支持类、So 以及资源的替换，它还是2.X－7.X的全平台支持。利用Tinker我们不仅可以用做 bugfix,甚至可以替代功能的发布。Tinker 已运行在微信的数亿 Android 设备上，那么为什么你不使用 Tinker 呢？</p>\n</blockquote>\n<p>不得不说，我真的低估了跟着腾讯文档走的难度。<br>","more":"</p>\n<h3 id=\"注册-TinkerPatch-平台\"><a href=\"#注册-TinkerPatch-平台\" class=\"headerlink\" title=\"注册 TinkerPatch 平台\"></a>注册 TinkerPatch 平台</h3><p>因为需要下发补丁，直接使用TinkerPatch平台就好，在这里注册<a href=\"http://www.tinkerpatch.com/Index/reg\">http://www.tinkerpatch.com/Index/reg</a>,注册完成后创建一个应用，拿到<code>appKey</code><br>然后添加一个APP版本</p>\n<h3 id=\"SDK接入\"><a href=\"#SDK接入\" class=\"headerlink\" title=\"SDK接入\"></a>SDK接入</h3><p>测试成功的工程全部文件在这里<a href=\"https://github.com/huangyuanlove/TestTinker\">https://github.com/huangyuanlove/TestTinker</a>,包含构建成功之后的apk文件以及一些辅助文件。</p>\n<h5 id=\"添加Gradle插件依赖\"><a href=\"#添加Gradle插件依赖\" class=\"headerlink\" title=\"添加Gradle插件依赖\"></a>添加Gradle插件依赖</h5><p>AndroidStudio创建一个工程，定义使用的SDK版本，我是放在了<code>gradle.properties</code> 这个文件中，</p>\n<blockquote>\n<p>TINKER_VERSION=1.9.2<br>TINKERPATCH_VERSION=1.2.2</p>\n</blockquote>\n<p>然后在工程的<code>build.gradle</code>文件中添加插件依赖</p>\n<blockquote>\n<p>classpath “com.tinkerpatch.sdk:tinkerpatch-gradle-plugin:${TINKERPATCH_VERSION}”</p>\n</blockquote>\n<p>然后添加一些其他配置，整个文件内容如下<br><figure class=\"highlight groovy\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div></pre></td><td class=\"code\"><pre><div class=\"line\">buildscript &#123;</div><div class=\"line\">    repositories &#123;</div><div class=\"line\">        google()</div><div class=\"line\">        jcenter()</div><div class=\"line\">    &#125;</div><div class=\"line\">    dependencies &#123;</div><div class=\"line\">        classpath <span class=\"string\">'com.android.tools.build:gradle:3.0.1'</span></div><div class=\"line\">        classpath <span class=\"string\">\"com.tinkerpatch.sdk:tinkerpatch-gradle-plugin:$&#123;TINKERPATCH_VERSION&#125;\"</span></div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"keyword\">if</span> (JavaVersion.current().isJava8Compatible()) &#123;</div><div class=\"line\">    allprojects &#123;</div><div class=\"line\">        tasks.withType(Javadoc) &#123;</div><div class=\"line\">            options.addStringOption(<span class=\"string\">'Xdoclint:none'</span>, <span class=\"string\">'-quiet'</span>)</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\">subprojects &#123;</div><div class=\"line\">    tasks.withType(JavaCompile) &#123;</div><div class=\"line\">        sourceCompatibility = JavaVersion.VERSION_1_7</div><div class=\"line\">        targetCompatibility = JavaVersion.VERSION_1_7</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\">allprojects &#123;</div><div class=\"line\">    repositories &#123;</div><div class=\"line\">        google()</div><div class=\"line\">        jcenter()</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\">task clean(<span class=\"string\">type:</span> Delete) &#123;</div><div class=\"line\">    delete rootProject.buildDir</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<h5 id=\"集成-TinkerPatch-SDK\"><a href=\"#集成-TinkerPatch-SDK\" class=\"headerlink\" title=\"集成 TinkerPatch SDK\"></a>集成 TinkerPatch SDK</h5><p>在<code>app/build.gradle</code>里面添加依赖</p>\n<blockquote>\n<pre><code>annotationProcessor(&quot;com.tinkerpatch.tinker:tinker-android-anno:${TINKER_VERSION}&quot;) { changing = true }\ncompileOnly(&quot;com.tinkerpatch.tinker:tinker-android-anno:${TINKER_VERSION}&quot;) { changing = true }\nimplementation(&quot;com.tinkerpatch.sdk:tinkerpatch-android-sdk:${TINKERPATCH_VERSION}&quot;) { changing = true }\n</code></pre></blockquote>\n<p>为了配置方便，我们把TinkerPatchSupport相关的配置放在一个单独的gradle文件中，在app下创建一个<code>tinkerpatch.gradle</code>，我们需要在<code>app/build.grale</code>文件中引用</p>\n<blockquote>\n<p>apply from: ‘tinkerpatch.gradle’</p>\n</blockquote>\n<h5 id=\"配置-tinkerpatchSupport-参数\"><a href=\"#配置-tinkerpatchSupport-参数\" class=\"headerlink\" title=\"配置 tinkerpatchSupport 参数\"></a>配置 tinkerpatchSupport 参数</h5><p>编辑 <code>app/tinkerpatch.gralde</code>文件<br><figure class=\"highlight groovy\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div><div class=\"line\">71</div><div class=\"line\">72</div><div class=\"line\">73</div><div class=\"line\">74</div><div class=\"line\">75</div><div class=\"line\">76</div><div class=\"line\">77</div><div class=\"line\">78</div><div class=\"line\">79</div><div class=\"line\">80</div><div class=\"line\">81</div><div class=\"line\">82</div><div class=\"line\">83</div><div class=\"line\">84</div><div class=\"line\">85</div><div class=\"line\">86</div><div class=\"line\">87</div><div class=\"line\">88</div><div class=\"line\">89</div><div class=\"line\">90</div><div class=\"line\">91</div><div class=\"line\">92</div><div class=\"line\">93</div><div class=\"line\">94</div><div class=\"line\">95</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\">apply <span class=\"string\">plugin:</span> <span class=\"string\">'tinkerpatch-support'</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">/**</div><div class=\"line\"> * <span class=\"doctag\">TODO:</span> 请按自己的需求修改为适应自己工程的参数</div><div class=\"line\"> */</span></div><div class=\"line\"><span class=\"keyword\">def</span> bakPath = file(<span class=\"string\">\"$&#123;buildDir&#125;/bakApk/\"</span>)</div><div class=\"line\"><span class=\"keyword\">def</span> baseInfo = <span class=\"string\">\"app-1.0.0-0309-21-30-56\"</span> <span class=\"comment\">//构建差异文件时使用</span></div><div class=\"line\"><span class=\"keyword\">def</span> variantName = <span class=\"string\">\"debug\"</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">/**</div><div class=\"line\"> * 对于插件各参数的详细解析请参考</div><div class=\"line\"> * http://tinkerpatch.com/Docs/SDK</div><div class=\"line\"> */</span></div><div class=\"line\">tinkerpatchSupport &#123;</div><div class=\"line\">    <span class=\"comment\">/** 可以在debug的时候关闭 tinkerPatch **/</span></div><div class=\"line\">    <span class=\"comment\">/** 当disable tinker的时候需要添加multiDexKeepProguard和proguardFiles,</div><div class=\"line\">        这些配置文件本身由tinkerPatch的插件自动添加，当你disable后需要手动添加</div><div class=\"line\">        你可以copy本示例中的proguardRules.pro和tinkerMultidexKeep.pro,</div><div class=\"line\">        需要你手动修改'tinker.sample.android.app'本示例的包名为你自己的包名, com.xxx前缀的包名不用修改</div><div class=\"line\">     **/</span></div><div class=\"line\">    tinkerEnable = <span class=\"literal\">true</span></div><div class=\"line\">    reflectApplication = <span class=\"literal\">false</span></div><div class=\"line\">    <span class=\"comment\">/**</div><div class=\"line\">     * 是否开启加固模式，只能在APK将要进行加固时使用，否则会patch失败。</div><div class=\"line\">     * 如果只在某个渠道使用了加固，可使用多flavors配置</div><div class=\"line\">     **/</span></div><div class=\"line\">    protectedApp = <span class=\"literal\">false</span></div><div class=\"line\">    <span class=\"comment\">/**</div><div class=\"line\">     * 实验功能</div><div class=\"line\">     * 补丁是否支持新增 Activity (新增Activity的exported属性必须为false)</div><div class=\"line\">     **/</span></div><div class=\"line\">    supportComponent = <span class=\"literal\">true</span></div><div class=\"line\"></div><div class=\"line\">    autoBackupApkPath = <span class=\"string\">\"$&#123;bakPath&#125;\"</span></div><div class=\"line\"></div><div class=\"line\">    appKey = <span class=\"string\">\"2b662623551153ee\"</span></div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">/** 注意: 若发布新的全量包, appVersion一定要更新 **/</span></div><div class=\"line\">    appVersion = <span class=\"string\">\"1.0.0\"</span></div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">def</span> pathPrefix = <span class=\"string\">\"$&#123;bakPath&#125;/$&#123;baseInfo&#125;/$&#123;variantName&#125;/\"</span></div><div class=\"line\">    <span class=\"keyword\">def</span> name = <span class=\"string\">\"$&#123;project.name&#125;-$&#123;variantName&#125;\"</span></div><div class=\"line\"></div><div class=\"line\">    baseApkFile = <span class=\"string\">\"$&#123;pathPrefix&#125;/$&#123;name&#125;.apk\"</span></div><div class=\"line\">    baseProguardMappingFile = <span class=\"string\">\"$&#123;pathPrefix&#125;/$&#123;name&#125;-mapping.txt\"</span></div><div class=\"line\">    baseResourceRFile = <span class=\"string\">\"$&#123;pathPrefix&#125;/$&#123;name&#125;-R.txt\"</span></div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">/**</div><div class=\"line\">     *  若有编译多flavors需求, 可以参照： https://github.com/TinkerPatch/tinkerpatch-flavors-sample</div><div class=\"line\">     *  注意: 除非你不同的flavor代码是不一样的,不然建议采用zip comment或者文件方式生成渠道信息（相关工具：walle 或者 packer-ng）</div><div class=\"line\">     **/</span></div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">/**</div><div class=\"line\"> * 用于用户在代码中判断tinkerPatch是否被使能</div><div class=\"line\"> */</span></div><div class=\"line\">android &#123;</div><div class=\"line\">    defaultConfig &#123;</div><div class=\"line\">        buildConfigField <span class=\"string\">\"boolean\"</span>, <span class=\"string\">\"TINKER_ENABLE\"</span>, <span class=\"string\">\"$&#123;tinkerpatchSupport.tinkerEnable&#125;\"</span></div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">/**</div><div class=\"line\"> * 一般来说,我们无需对下面的参数做任何的修改</div><div class=\"line\"> * 对于各参数的详细介绍请参考:</div><div class=\"line\"> * https://github.com/Tencent/tinker/wiki/Tinker-%E6%8E%A5%E5%85%A5%E6%8C%87%E5%8D%97</div><div class=\"line\"> */</span></div><div class=\"line\">tinkerPatch &#123;</div><div class=\"line\">    ignoreWarning = <span class=\"literal\">false</span></div><div class=\"line\">    useSign = <span class=\"literal\">true</span></div><div class=\"line\">    dex &#123;</div><div class=\"line\">        dexMode = <span class=\"string\">\"jar\"</span></div><div class=\"line\">        pattern = [<span class=\"string\">\"classes*.dex\"</span>]</div><div class=\"line\">        loader = []</div><div class=\"line\">    &#125;</div><div class=\"line\">    lib &#123;</div><div class=\"line\">        pattern = [<span class=\"string\">\"lib/*/*.so\"</span>]</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    res &#123;</div><div class=\"line\">        pattern = [<span class=\"string\">\"res/*\"</span>, <span class=\"string\">\"r/*\"</span>, <span class=\"string\">\"assets/*\"</span>, <span class=\"string\">\"resources.arsc\"</span>, <span class=\"string\">\"AndroidManifest.xml\"</span>]</div><div class=\"line\">        ignoreChange = []</div><div class=\"line\">        largeModSize = <span class=\"number\">100</span></div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    packageConfig &#123;</div><div class=\"line\">    &#125;</div><div class=\"line\">    sevenZip &#123;</div><div class=\"line\">        zipArtifact = <span class=\"string\">\"com.tencent.mm:SevenZip:1.1.10\"</span></div><div class=\"line\">    &#125;</div><div class=\"line\">    buildConfig &#123;</div><div class=\"line\">        keepDexApply = <span class=\"literal\">false</span></div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>每个参数的含义如下</p>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:center\">参数</th>\n<th style=\"text-align:center\">默认值</th>\n<th style=\"text-align:center\">描述</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\">tinkerEnable</td>\n<td style=\"text-align:center\">true</td>\n<td style=\"text-align:center\">是否开启 tinkerpatchSupport 插件功能</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">appKey</td>\n<td style=\"text-align:center\">“”</td>\n<td style=\"text-align:center\">在 TinkerPatch 平台 申请的 appkey</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">appVersion</td>\n<td style=\"text-align:center\">“”</td>\n<td style=\"text-align:center\">在 TinkerPatch 平台 输入的版本号,注意，我们使用 appVersion 作为 TinkerId, 我们需要保证每个发布出去的基础安装包的 appVersion 都不一样。</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">reflectApplication</td>\n<td style=\"text-align:center\">false</td>\n<td style=\"text-align:center\">是否反射 Application 实现一键接入；一般来说，接入 Tinker 我们需要改造我们</td>\n<td>的 Application, 若这里为 true， 即我们无需对应用做任何改造即可接入。</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">autoBackupApkPath</td>\n<td style=\"text-align:center\">“”</td>\n<td style=\"text-align:center\">将每次编译产生的 apk/mapping.txt/R.txt 归档存储的位置</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">baseApkFile</td>\n<td style=\"text-align:center\">“”</td>\n<td style=\"text-align:center\">基准包的文件路径, 对应 tinker 插件中的 oldApk 参数;编译补丁包时，必需指定基准版本的 apk，默认值为空，则表示不是进行补丁包的编译。</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">baseProguardMappingFile</td>\n<td style=\"text-align:center\">“”</td>\n<td style=\"text-align:center\">基准包的 Proguard mapping.txt 文件路径, 对应 tinker 插件 applyMapping 参数；在编译新的 apk 时候，我们希望通过保持基准 apk 的 proguard 混淆方式，从而减少补丁包的大小。这是强烈推荐的，编译补丁包时，我们推荐输入基准 apk 生成的 mapping.txt 文件。</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">baseResourceRFile</td>\n<td style=\"text-align:center\">“”</td>\n<td style=\"text-align:center\">基准包的资源 R.txt 文件路径, 对应 tinker 插件 applyResourceMapping 参数；在编译新的apk时候，我们希望通基准 apk 的 R.txt 文件来保持 Resource Id 的分配，这样不仅可以减少补丁包的大小，同时也避免由于 Resource Id 改变导致 remote view 异常。</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">protectedApp</td>\n<td style=\"text-align:center\">false</td>\n<td style=\"text-align:center\">是否开启支持加固，注意：只有在使用加固时才能开启此开关</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">supportComponent</td>\n<td style=\"text-align:center\">false</td>\n<td style=\"text-align:center\">是否开启支持在补丁包中动态增加Activity 注意：新增Activity的Exported属性必须为false</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">backupFileNameFormat</td>\n<td style=\"text-align:center\">‘\\${appName}-\\${variantName}’</td>\n<td style=\"text-align:center\">格式化命名备份文件 这里请使用单引号</td>\n</tr>\n</tbody>\n</table>\n<h5 id=\"初始化-TinkerPatch-SDK\"><a href=\"#初始化-TinkerPatch-SDK\" class=\"headerlink\" title=\"初始化 TinkerPatch SDK\"></a>初始化 TinkerPatch SDK</h5><p>这里推荐使用改造之后的ApplicationLike，对应<code>tinkerpatch.gradle</code>文件中的<code>reflectApplication = false</code>,这里给出了完整的ApplicationLike类，可以在这里查看<a href=\"https://github.com/huangyuanlove/TestTinker/blob/master/app/src/main/java/com/huangyuan/testtinker/SampleApplicationLike.java\">https://github.com/huangyuanlove/TestTinker/blob/master/app/src/main/java/com/huangyuan/testtinker/SampleApplicationLike.java</a><br>其中对于类的注解中的 <code>application</code> 的值，就是我们应用的Application类，需要在<code>AndroidManifest.xml</code>中的<code>application</code>标签中配置<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">@DefaultLifeCycle</span>(application = <span class=\"string\">\"com.huangyuanlove.testtinker.SampleApplication\"</span>,</div><div class=\"line\">                  flags = ShareConstants.TINKER_ENABLE_ALL,</div><div class=\"line\">                  loadVerifyFlag = <span class=\"keyword\">false</span>)`</div></pre></td></tr></table></figure></p>\n<p><strong>注意：初始化的代码建议紧跟 super.onCreate(),并且所有进程都需要初始化，已达到所有进程都可以被 patch 的目的<br>如果你确定只想在主进程中初始化 tinkerPatch，那也请至少在 :patch 进程中初始化，否则会有造成 :patch 进程crash，无法使补丁生效</strong><br>我们在实际应用过程中，可以在登陆等关键地方去调用<code>TinkerPatch.with().fetchPatchUpdate(true)</code>来检测有没有新的补丁包，若有，则去下载。下载完成补丁包后，sdk会自动去合成新的安装包，并且在息屏的时候自动重启主线程去加载新的文件，或者调用<code>ShareTinkerInternals.killAllOtherProcess(getApplicationContext());\n                android.os.Process.killProcess(android.os.Process.myPid());</code>来完成杀死主线程的目的。</p>\n<h5 id=\"使用步骤\"><a href=\"#使用步骤\" class=\"headerlink\" title=\"使用步骤\"></a>使用步骤</h5><p>首先构建基础包，模拟用户当前使用的版本。<br>在gradle中找到下图所示的 <code>assembleRelease</code>或者<code>assembleDebug</code>task，需要注意的是，如果构建基础包使用的是<code>debug</code>,那么在构建patch包的时候也要选择<code>debug</code>，还有就是尽量把<code>app/tinkerpatch.gradle</code>中定义的<code>variantName</code>改成一致的。<br>基础包构建成功后，会在<code>app/build/bakApk</code>文件夹下生成对应的文件，找到和你构建时间一致的包。<br>现在修改代码或者布局文件(模拟修复bug),修改清单文件<code>AndroidManifest.xml</code>中的versionName和versionCode。<br>修改<code>app/tinkerpatch.gradle</code>文件，将其中定义的<code>baseInfo</code>修改为上面提到的路径。这时候<strong>不需要修改</strong>该文件中的<code>appVersion</code>。<br>在gradle中找到tinker任务包，找到<code>tinkerPatchDebug</code>或者<code>tinkerPatchRelease</code>，构建差异包(补丁文件)。构建成功后会在<code>app/build/outputs/apk/tinkerPatch</code>文件夹中<br><img src=\"/image/hotfix/tinker_task.png\" alt=\"tinkerTaskResult\"> <img src=\"/image/hotfix/tinker_task_result.png\" alt=\"tinkerTaskResult\"><br>现在我们已经成功构建的差异包<code>patch-signed-7zip.apk</code>,现在只需要将差异包上传到<code>tinker-patch</code>平台就可以了。</p>\n<h5 id=\"在tinker-patch平台发布差异包\"><a href=\"#在tinker-patch平台发布差异包\" class=\"headerlink\" title=\"在tinker-patch平台发布差异包\"></a>在tinker-patch平台发布差异包</h5><p>我们登陆tinker-patch平台，找到在刚开始创建的项目，在该项目里面添加一个App版本，注意这里的App版本号要和<code>tinkerpatch.gradle</code>里面定义的<code>appVersion</code>一致，在官方文档中也提到过这一点：</p>\n<blockquote>\n<p>每一个 APP 版本对应一个已经发布的 base apk, 这里我们可以使用 APP 版本作为 TinkerID。我们需要保证每个发布的 APK 都采用不用的 APP 版本。</p>\n</blockquote>\n<p>创建好app版本之后，点击<code>发布新补丁</code>，选择补丁文件<code>patch-signed-7zip.apk</code>,填写一下备注就好了，这里有四种补丁的下发方式<a href=\"http://www.tinkerpatch.com/Docs/dev\">开发预览</a> 、<code>全量下发</code> 、<a href=\"http://www.tinkerpatch.com/Docs/rule\">条件下发</a> 、<a href=\"http://www.tinkerpatch.com/Docs/rule\">灰度下发</a>、具体差异可以点击去查看。<br>同时我们也可以在平台对应的软件版本中的实时监控里面看到补丁的下载以及合成应用次数。</p>\n<hr>\n<p>以上</p>"},{"title":"View的滑动","date":"2017-03-15T03:01:46.000Z","keywords":"View的滑动","_content":"　　View的位置主要由它的四个顶点来决定，分别对应于View的四个属性：top,left,right,bottom,其中top是左上角的纵坐标，left是左上角的横坐标，right是右下角的横坐标，bottom是右下角的纵坐标。需要注意的是，这些坐标都是相当于View的父容器来说的，因此它是一种相对坐标，View的坐标和父容器的关系如下所示：\n![相对位置关系](/image/location.png)\n> width = right - left\nheight = bottom - top\nleft = getLeft()\nright = getRight()\ntop = getTop()\nbottom = getBottom()\n从Android3.0 开始，View增加了额外的几个参数：x,y,trabslationX和translationY。其中x和y是View左上角的坐标，而translationX和translationY是View左上角相对于父容器的偏移量。这几个参数也是相对于父容器的坐标，并且translationX和translationY的默认值是0，和View的四个基本的位置参数一样，View也为他们提供了get/set方法，这几个参数的换算关系如下\n`x = left + translationX`\n需要注意的是，View在平移过程中，top和left表示的是原始左上角的位置信息，其值并不会发生改变，此时发生改变的是x,y,translationX和translationY。\n\n<!--more-->\n#### 一 VelocityTracker 和 GestureDetector\n速度最终，用于追踪手指在滑动过程中的速度，包括水平和竖直方向的速度。使用方法在View的onTouchEvent方法中追踪当前单击事件的速度：\n``` java\n        VelocityTracker velocityTracker = VelocityTracker.obtain();\n        velocityTracker.addMovement(event);\n```\n接着，当我们想知道当前的滑动速度时，这个时候可以采用如下方式来获得当前速度：\n``` java\n        velocityTracker.computeCurrentVelocity(1000);\n        float xVelocity = velocityTracker.getXVelocity();\n        float yVelocity = velocityTracker.getYVelocity();\n```\n在这一步中有两点需要注意\n1. 获取速度之前必须先计算速度，即getXVelocity()和getYVelocity()之前必须调用computeCurrentVelocity(1000)\n2. 这里的速度时指一段时间内手指所划过的像素数，速度可以是负数，当手指在水平方向从左向右滑动时，速度为正，反之为负数。\n最后，当不在使用它的时候，需要调用clear方法来重置并回收内存:\n``` java\n        velocityTracker.clear();\n        velocityTracker.recycle();\n```\n----\n手势检测，用于辅助检测用户的单击、滑动、长按、双击等行为。\n首先创建GestureDetector的对象，接着接管View的onTouchEvent方法。做完下面两部，就可以有选择的实现接口中的方法了\n``` java\n\t\tGestureDetector gestureDetector = new GestureDetector(this,this);\n        gestureDetector.setIsLongpressEnabled(false);\n        return gestureDetector.onTouchEvent(event);\n```\n其中`gestureDetector.setIsLongpressEnabled(false)`是为了解决长按之后无法拖动的现象。\n#### 二 使用ScrollTo/ScrollBy\n\n调用方式 `View.scrollTo(int x, int y)`,`View.scrollBy(int x, int y)`\n方法源码：\n``` java\n/**\n     * Set the scrolled position of your view. This will cause a call to\n     * {@link #onScrollChanged(int, int, int, int)} and the view will be\n     * invalidated.\n     * @param x the x position to scroll to\n     * @param y the y position to scroll to\n     */\n    public void scrollTo(int x, int y) {\n        if (mScrollX != x || mScrollY != y) {\n            int oldX = mScrollX;\n            int oldY = mScrollY;\n            mScrollX = x;\n            mScrollY = y;\n            invalidateParentCaches();\n            onScrollChanged(mScrollX, mScrollY, oldX, oldY);\n            if (!awakenScrollBars()) {\n                postInvalidateOnAnimation();\n            }\n        }\n    }\n\n    /**\n     * Move the scrolled position of your view. This will cause a call to\n     * {@link #onScrollChanged(int, int, int, int)} and the view will be\n     * invalidated.\n     * @param x the amount of pixels to scroll by horizontally\n     * @param y the amount of pixels to scroll by vertically\n     */\n    public void scrollBy(int x, int y) {\n        scrollTo(mScrollX + x, mScrollY + y);\n    }\n```\n　　从源码中可以看出，`scrollBy`实际上也是调用`scrollBy`的方法。需要注意的是在`View`的滑动过程中，`mScrollX`和`mScrollY`的改变规则：\n在滑动过程中，`mScrollX`的值总是等于View左边缘和View内容左边缘在水平方向的距离，而mScrollY的值总是等于View上边缘和View内容上边缘在竖直方向的距离。其中`mScrollX`和`mScrollY`的单位是像素，并且当View左边缘在View内容左边缘的右边时，`mScrollX`为正值，反之为负值；当View上边缘在View内容上边缘的下边时，`mScrollY`为正值，反之为负值。换句话说：从左向右滑动，`mScrollX`为负值，反之为正值；如果从上往下滑动，`mScrollY`为负值，反之为正值。\n**意思就是说ScrollTo/ScrollBy只能滑动View的内容而不能滑动View本身，比如，只能滑动TextView的文字，而不能滑动TextView控件本身**\n#### 三 使用动画\n这个没什么好介绍的，想要兼容3.0以下的属性动画，建议使用nineoldandroids来实现\n#### 四 改变布局参数\n改变布局参数，也就是改变·LayoutParams·\n#### 五 使用Scroller进行平滑移动\n自定义一个控件，添加成员变量·Scroller·，如下：\n```java\npublic class ScrollerTextView extends TextView {\n\n    private Scroller mScroller;\n\n    public ScrollerTextView(Context context) {\n        super(context);\n        mScroller = new Scroller(context);\n    }\n\n    public ScrollerTextView(Context context, AttributeSet attrs) {\n        super(context, attrs);\n        mScroller = new Scroller(context);\n    }\n\n    public ScrollerTextView(Context context, AttributeSet attrs, int defStyleAttr) {\n        super(context, attrs, defStyleAttr);\n        mScroller = new Scroller(context);\n    }\n\n    public void smoothScrollBy(int dx,int dy){\n        mScroller.startScroll(mScroller.getFinalX(),mScroller.getFinalY(),dx,dy,2000);\n        invalidate();\n    }\n\n    public void smoothScrollTo(int fx, int fy){\n        int dx = fx - mScroller.getFinalX();\n        int dy = fy - mScroller.getFinalY();\n        smoothScrollBy(dx,dy);\n    }\n\n    @Override\n    public void computeScroll() {\n       if(mScroller.computeScrollOffset()){\n           scrollTo(mScroller.getCurrX(), mScroller.getCurrY());\n           postInvalidate();\n       }\n        super.computeScroll();\n    }\n}\n```\n其实`Scroller`也是通过`ScrollTO/ScrollBy`实现的，同样只能滑动内容，不能滑动本身。\nPS：\n在调用`startScroll`时，并没有让`View`进行滑动。而是在调用`invalidate()`进行重绘的时候，会去调用`computeScroll`方法，但是`computeScroll`在`View`只是个空实现，因此需要我们自己去实现。在`computeScroll`中进行平移。也就是说当View重绘后在`draw`方法中调用`computeScroll`,而`computeScroll`又会去向`Scroller`获取当前的`scrollX`和`scrollY`,然后通过`scrollTo`方法实现滑动，接着又调用`postInvalidate()`方法来进行第二次重绘，这一次重绘过程和第一次一样，还是会去调用`computeScroll()`方法，如此反复，直到整个滑动过程结束。\n\n----\n以上\n","source":"_posts/View的滑动.md","raw":"---\ntitle: View的滑动\ndate: 2017-03-15 11:01:46\ntags: [Android]\nkeywords: View的滑动\n---\n　　View的位置主要由它的四个顶点来决定，分别对应于View的四个属性：top,left,right,bottom,其中top是左上角的纵坐标，left是左上角的横坐标，right是右下角的横坐标，bottom是右下角的纵坐标。需要注意的是，这些坐标都是相当于View的父容器来说的，因此它是一种相对坐标，View的坐标和父容器的关系如下所示：\n![相对位置关系](/image/location.png)\n> width = right - left\nheight = bottom - top\nleft = getLeft()\nright = getRight()\ntop = getTop()\nbottom = getBottom()\n从Android3.0 开始，View增加了额外的几个参数：x,y,trabslationX和translationY。其中x和y是View左上角的坐标，而translationX和translationY是View左上角相对于父容器的偏移量。这几个参数也是相对于父容器的坐标，并且translationX和translationY的默认值是0，和View的四个基本的位置参数一样，View也为他们提供了get/set方法，这几个参数的换算关系如下\n`x = left + translationX`\n需要注意的是，View在平移过程中，top和left表示的是原始左上角的位置信息，其值并不会发生改变，此时发生改变的是x,y,translationX和translationY。\n\n<!--more-->\n#### 一 VelocityTracker 和 GestureDetector\n速度最终，用于追踪手指在滑动过程中的速度，包括水平和竖直方向的速度。使用方法在View的onTouchEvent方法中追踪当前单击事件的速度：\n``` java\n        VelocityTracker velocityTracker = VelocityTracker.obtain();\n        velocityTracker.addMovement(event);\n```\n接着，当我们想知道当前的滑动速度时，这个时候可以采用如下方式来获得当前速度：\n``` java\n        velocityTracker.computeCurrentVelocity(1000);\n        float xVelocity = velocityTracker.getXVelocity();\n        float yVelocity = velocityTracker.getYVelocity();\n```\n在这一步中有两点需要注意\n1. 获取速度之前必须先计算速度，即getXVelocity()和getYVelocity()之前必须调用computeCurrentVelocity(1000)\n2. 这里的速度时指一段时间内手指所划过的像素数，速度可以是负数，当手指在水平方向从左向右滑动时，速度为正，反之为负数。\n最后，当不在使用它的时候，需要调用clear方法来重置并回收内存:\n``` java\n        velocityTracker.clear();\n        velocityTracker.recycle();\n```\n----\n手势检测，用于辅助检测用户的单击、滑动、长按、双击等行为。\n首先创建GestureDetector的对象，接着接管View的onTouchEvent方法。做完下面两部，就可以有选择的实现接口中的方法了\n``` java\n\t\tGestureDetector gestureDetector = new GestureDetector(this,this);\n        gestureDetector.setIsLongpressEnabled(false);\n        return gestureDetector.onTouchEvent(event);\n```\n其中`gestureDetector.setIsLongpressEnabled(false)`是为了解决长按之后无法拖动的现象。\n#### 二 使用ScrollTo/ScrollBy\n\n调用方式 `View.scrollTo(int x, int y)`,`View.scrollBy(int x, int y)`\n方法源码：\n``` java\n/**\n     * Set the scrolled position of your view. This will cause a call to\n     * {@link #onScrollChanged(int, int, int, int)} and the view will be\n     * invalidated.\n     * @param x the x position to scroll to\n     * @param y the y position to scroll to\n     */\n    public void scrollTo(int x, int y) {\n        if (mScrollX != x || mScrollY != y) {\n            int oldX = mScrollX;\n            int oldY = mScrollY;\n            mScrollX = x;\n            mScrollY = y;\n            invalidateParentCaches();\n            onScrollChanged(mScrollX, mScrollY, oldX, oldY);\n            if (!awakenScrollBars()) {\n                postInvalidateOnAnimation();\n            }\n        }\n    }\n\n    /**\n     * Move the scrolled position of your view. This will cause a call to\n     * {@link #onScrollChanged(int, int, int, int)} and the view will be\n     * invalidated.\n     * @param x the amount of pixels to scroll by horizontally\n     * @param y the amount of pixels to scroll by vertically\n     */\n    public void scrollBy(int x, int y) {\n        scrollTo(mScrollX + x, mScrollY + y);\n    }\n```\n　　从源码中可以看出，`scrollBy`实际上也是调用`scrollBy`的方法。需要注意的是在`View`的滑动过程中，`mScrollX`和`mScrollY`的改变规则：\n在滑动过程中，`mScrollX`的值总是等于View左边缘和View内容左边缘在水平方向的距离，而mScrollY的值总是等于View上边缘和View内容上边缘在竖直方向的距离。其中`mScrollX`和`mScrollY`的单位是像素，并且当View左边缘在View内容左边缘的右边时，`mScrollX`为正值，反之为负值；当View上边缘在View内容上边缘的下边时，`mScrollY`为正值，反之为负值。换句话说：从左向右滑动，`mScrollX`为负值，反之为正值；如果从上往下滑动，`mScrollY`为负值，反之为正值。\n**意思就是说ScrollTo/ScrollBy只能滑动View的内容而不能滑动View本身，比如，只能滑动TextView的文字，而不能滑动TextView控件本身**\n#### 三 使用动画\n这个没什么好介绍的，想要兼容3.0以下的属性动画，建议使用nineoldandroids来实现\n#### 四 改变布局参数\n改变布局参数，也就是改变·LayoutParams·\n#### 五 使用Scroller进行平滑移动\n自定义一个控件，添加成员变量·Scroller·，如下：\n```java\npublic class ScrollerTextView extends TextView {\n\n    private Scroller mScroller;\n\n    public ScrollerTextView(Context context) {\n        super(context);\n        mScroller = new Scroller(context);\n    }\n\n    public ScrollerTextView(Context context, AttributeSet attrs) {\n        super(context, attrs);\n        mScroller = new Scroller(context);\n    }\n\n    public ScrollerTextView(Context context, AttributeSet attrs, int defStyleAttr) {\n        super(context, attrs, defStyleAttr);\n        mScroller = new Scroller(context);\n    }\n\n    public void smoothScrollBy(int dx,int dy){\n        mScroller.startScroll(mScroller.getFinalX(),mScroller.getFinalY(),dx,dy,2000);\n        invalidate();\n    }\n\n    public void smoothScrollTo(int fx, int fy){\n        int dx = fx - mScroller.getFinalX();\n        int dy = fy - mScroller.getFinalY();\n        smoothScrollBy(dx,dy);\n    }\n\n    @Override\n    public void computeScroll() {\n       if(mScroller.computeScrollOffset()){\n           scrollTo(mScroller.getCurrX(), mScroller.getCurrY());\n           postInvalidate();\n       }\n        super.computeScroll();\n    }\n}\n```\n其实`Scroller`也是通过`ScrollTO/ScrollBy`实现的，同样只能滑动内容，不能滑动本身。\nPS：\n在调用`startScroll`时，并没有让`View`进行滑动。而是在调用`invalidate()`进行重绘的时候，会去调用`computeScroll`方法，但是`computeScroll`在`View`只是个空实现，因此需要我们自己去实现。在`computeScroll`中进行平移。也就是说当View重绘后在`draw`方法中调用`computeScroll`,而`computeScroll`又会去向`Scroller`获取当前的`scrollX`和`scrollY`,然后通过`scrollTo`方法实现滑动，接着又调用`postInvalidate()`方法来进行第二次重绘，这一次重绘过程和第一次一样，还是会去调用`computeScroll()`方法，如此反复，直到整个滑动过程结束。\n\n----\n以上\n","slug":"View的滑动","published":1,"updated":"2018-08-04T05:16:42.311Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjl3vbtra001zisdgh4x035ic","content":"<p>　　View的位置主要由它的四个顶点来决定，分别对应于View的四个属性：top,left,right,bottom,其中top是左上角的纵坐标，left是左上角的横坐标，right是右下角的横坐标，bottom是右下角的纵坐标。需要注意的是，这些坐标都是相当于View的父容器来说的，因此它是一种相对坐标，View的坐标和父容器的关系如下所示：<br><img src=\"/image/location.png\" alt=\"相对位置关系\"></p>\n<blockquote>\n<p>width = right - left<br>height = bottom - top<br>left = getLeft()<br>right = getRight()<br>top = getTop()<br>bottom = getBottom()<br>从Android3.0 开始，View增加了额外的几个参数：x,y,trabslationX和translationY。其中x和y是View左上角的坐标，而translationX和translationY是View左上角相对于父容器的偏移量。这几个参数也是相对于父容器的坐标，并且translationX和translationY的默认值是0，和View的四个基本的位置参数一样，View也为他们提供了get/set方法，这几个参数的换算关系如下<br><code>x = left + translationX</code><br>需要注意的是，View在平移过程中，top和left表示的是原始左上角的位置信息，其值并不会发生改变，此时发生改变的是x,y,translationX和translationY。</p>\n</blockquote>\n<a id=\"more\"></a>\n<h4 id=\"一-VelocityTracker-和-GestureDetector\"><a href=\"#一-VelocityTracker-和-GestureDetector\" class=\"headerlink\" title=\"一 VelocityTracker 和 GestureDetector\"></a>一 VelocityTracker 和 GestureDetector</h4><p>速度最终，用于追踪手指在滑动过程中的速度，包括水平和竖直方向的速度。使用方法在View的onTouchEvent方法中追踪当前单击事件的速度：<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">VelocityTracker velocityTracker = VelocityTracker.obtain();</div><div class=\"line\">velocityTracker.addMovement(event);</div></pre></td></tr></table></figure></p>\n<p>接着，当我们想知道当前的滑动速度时，这个时候可以采用如下方式来获得当前速度：<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">velocityTracker.computeCurrentVelocity(<span class=\"number\">1000</span>);</div><div class=\"line\"><span class=\"keyword\">float</span> xVelocity = velocityTracker.getXVelocity();</div><div class=\"line\"><span class=\"keyword\">float</span> yVelocity = velocityTracker.getYVelocity();</div></pre></td></tr></table></figure></p>\n<p>在这一步中有两点需要注意</p>\n<ol>\n<li>获取速度之前必须先计算速度，即getXVelocity()和getYVelocity()之前必须调用computeCurrentVelocity(1000)</li>\n<li>这里的速度时指一段时间内手指所划过的像素数，速度可以是负数，当手指在水平方向从左向右滑动时，速度为正，反之为负数。<br>最后，当不在使用它的时候，需要调用clear方法来重置并回收内存:<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">velocityTracker.clear();</div><div class=\"line\">velocityTracker.recycle();</div></pre></td></tr></table></figure>\n</li>\n</ol>\n<hr>\n<p>手势检测，用于辅助检测用户的单击、滑动、长按、双击等行为。<br>首先创建GestureDetector的对象，接着接管View的onTouchEvent方法。做完下面两部，就可以有选择的实现接口中的方法了<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">GestureDetector gestureDetector = <span class=\"keyword\">new</span> GestureDetector(<span class=\"keyword\">this</span>,<span class=\"keyword\">this</span>);</div><div class=\"line\">      gestureDetector.setIsLongpressEnabled(<span class=\"keyword\">false</span>);</div><div class=\"line\">      <span class=\"keyword\">return</span> gestureDetector.onTouchEvent(event);</div></pre></td></tr></table></figure></p>\n<p>其中<code>gestureDetector.setIsLongpressEnabled(false)</code>是为了解决长按之后无法拖动的现象。</p>\n<h4 id=\"二-使用ScrollTo-ScrollBy\"><a href=\"#二-使用ScrollTo-ScrollBy\" class=\"headerlink\" title=\"二 使用ScrollTo/ScrollBy\"></a>二 使用ScrollTo/ScrollBy</h4><p>调用方式 <code>View.scrollTo(int x, int y)</code>,<code>View.scrollBy(int x, int y)</code><br>方法源码：<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">/**</span></div><div class=\"line\">     * Set the scrolled position of your view. This will cause a call to</div><div class=\"line\">     * &#123;<span class=\"doctag\">@link</span> #onScrollChanged(int, int, int, int)&#125; and the view will be</div><div class=\"line\">     * invalidated.</div><div class=\"line\">     * <span class=\"doctag\">@param</span> x the x position to scroll to</div><div class=\"line\">     * <span class=\"doctag\">@param</span> y the y position to scroll to</div><div class=\"line\">     */</div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">scrollTo</span><span class=\"params\">(<span class=\"keyword\">int</span> x, <span class=\"keyword\">int</span> y)</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">if</span> (mScrollX != x || mScrollY != y) &#123;</div><div class=\"line\">            <span class=\"keyword\">int</span> oldX = mScrollX;</div><div class=\"line\">            <span class=\"keyword\">int</span> oldY = mScrollY;</div><div class=\"line\">            mScrollX = x;</div><div class=\"line\">            mScrollY = y;</div><div class=\"line\">            invalidateParentCaches();</div><div class=\"line\">            onScrollChanged(mScrollX, mScrollY, oldX, oldY);</div><div class=\"line\">            <span class=\"keyword\">if</span> (!awakenScrollBars()) &#123;</div><div class=\"line\">                postInvalidateOnAnimation();</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">/**</span></div><div class=\"line\">     * Move the scrolled position of your view. This will cause a call to</div><div class=\"line\">     * &#123;<span class=\"doctag\">@link</span> #onScrollChanged(int, int, int, int)&#125; and the view will be</div><div class=\"line\">     * invalidated.</div><div class=\"line\">     * <span class=\"doctag\">@param</span> x the amount of pixels to scroll by horizontally</div><div class=\"line\">     * <span class=\"doctag\">@param</span> y the amount of pixels to scroll by vertically</div><div class=\"line\">     */</div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">scrollBy</span><span class=\"params\">(<span class=\"keyword\">int</span> x, <span class=\"keyword\">int</span> y)</span> </span>&#123;</div><div class=\"line\">        scrollTo(mScrollX + x, mScrollY + y);</div><div class=\"line\">    &#125;</div></pre></td></tr></table></figure></p>\n<p>　　从源码中可以看出，<code>scrollBy</code>实际上也是调用<code>scrollBy</code>的方法。需要注意的是在<code>View</code>的滑动过程中，<code>mScrollX</code>和<code>mScrollY</code>的改变规则：<br>在滑动过程中，<code>mScrollX</code>的值总是等于View左边缘和View内容左边缘在水平方向的距离，而mScrollY的值总是等于View上边缘和View内容上边缘在竖直方向的距离。其中<code>mScrollX</code>和<code>mScrollY</code>的单位是像素，并且当View左边缘在View内容左边缘的右边时，<code>mScrollX</code>为正值，反之为负值；当View上边缘在View内容上边缘的下边时，<code>mScrollY</code>为正值，反之为负值。换句话说：从左向右滑动，<code>mScrollX</code>为负值，反之为正值；如果从上往下滑动，<code>mScrollY</code>为负值，反之为正值。<br><strong>意思就是说ScrollTo/ScrollBy只能滑动View的内容而不能滑动View本身，比如，只能滑动TextView的文字，而不能滑动TextView控件本身</strong></p>\n<h4 id=\"三-使用动画\"><a href=\"#三-使用动画\" class=\"headerlink\" title=\"三 使用动画\"></a>三 使用动画</h4><p>这个没什么好介绍的，想要兼容3.0以下的属性动画，建议使用nineoldandroids来实现</p>\n<h4 id=\"四-改变布局参数\"><a href=\"#四-改变布局参数\" class=\"headerlink\" title=\"四 改变布局参数\"></a>四 改变布局参数</h4><p>改变布局参数，也就是改变·LayoutParams·</p>\n<h4 id=\"五-使用Scroller进行平滑移动\"><a href=\"#五-使用Scroller进行平滑移动\" class=\"headerlink\" title=\"五 使用Scroller进行平滑移动\"></a>五 使用Scroller进行平滑移动</h4><p>自定义一个控件，添加成员变量·Scroller·，如下：<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ScrollerTextView</span> <span class=\"keyword\">extends</span> <span class=\"title\">TextView</span> </span>&#123;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">private</span> Scroller mScroller;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">ScrollerTextView</span><span class=\"params\">(Context context)</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">super</span>(context);</div><div class=\"line\">        mScroller = <span class=\"keyword\">new</span> Scroller(context);</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">ScrollerTextView</span><span class=\"params\">(Context context, AttributeSet attrs)</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">super</span>(context, attrs);</div><div class=\"line\">        mScroller = <span class=\"keyword\">new</span> Scroller(context);</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">ScrollerTextView</span><span class=\"params\">(Context context, AttributeSet attrs, <span class=\"keyword\">int</span> defStyleAttr)</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">super</span>(context, attrs, defStyleAttr);</div><div class=\"line\">        mScroller = <span class=\"keyword\">new</span> Scroller(context);</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">smoothScrollBy</span><span class=\"params\">(<span class=\"keyword\">int</span> dx,<span class=\"keyword\">int</span> dy)</span></span>&#123;</div><div class=\"line\">        mScroller.startScroll(mScroller.getFinalX(),mScroller.getFinalY(),dx,dy,<span class=\"number\">2000</span>);</div><div class=\"line\">        invalidate();</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">smoothScrollTo</span><span class=\"params\">(<span class=\"keyword\">int</span> fx, <span class=\"keyword\">int</span> fy)</span></span>&#123;</div><div class=\"line\">        <span class=\"keyword\">int</span> dx = fx - mScroller.getFinalX();</div><div class=\"line\">        <span class=\"keyword\">int</span> dy = fy - mScroller.getFinalY();</div><div class=\"line\">        smoothScrollBy(dx,dy);</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"meta\">@Override</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">computeScroll</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">       <span class=\"keyword\">if</span>(mScroller.computeScrollOffset())&#123;</div><div class=\"line\">           scrollTo(mScroller.getCurrX(), mScroller.getCurrY());</div><div class=\"line\">           postInvalidate();</div><div class=\"line\">       &#125;</div><div class=\"line\">        <span class=\"keyword\">super</span>.computeScroll();</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>其实<code>Scroller</code>也是通过<code>ScrollTO/ScrollBy</code>实现的，同样只能滑动内容，不能滑动本身。<br>PS：<br>在调用<code>startScroll</code>时，并没有让<code>View</code>进行滑动。而是在调用<code>invalidate()</code>进行重绘的时候，会去调用<code>computeScroll</code>方法，但是<code>computeScroll</code>在<code>View</code>只是个空实现，因此需要我们自己去实现。在<code>computeScroll</code>中进行平移。也就是说当View重绘后在<code>draw</code>方法中调用<code>computeScroll</code>,而<code>computeScroll</code>又会去向<code>Scroller</code>获取当前的<code>scrollX</code>和<code>scrollY</code>,然后通过<code>scrollTo</code>方法实现滑动，接着又调用<code>postInvalidate()</code>方法来进行第二次重绘，这一次重绘过程和第一次一样，还是会去调用<code>computeScroll()</code>方法，如此反复，直到整个滑动过程结束。</p>\n<hr>\n<p>以上</p>\n","excerpt":"<p>　　View的位置主要由它的四个顶点来决定，分别对应于View的四个属性：top,left,right,bottom,其中top是左上角的纵坐标，left是左上角的横坐标，right是右下角的横坐标，bottom是右下角的纵坐标。需要注意的是，这些坐标都是相当于View的父容器来说的，因此它是一种相对坐标，View的坐标和父容器的关系如下所示：<br><img src=\"/image/location.png\" alt=\"相对位置关系\"></p>\n<blockquote>\n<p>width = right - left<br>height = bottom - top<br>left = getLeft()<br>right = getRight()<br>top = getTop()<br>bottom = getBottom()<br>从Android3.0 开始，View增加了额外的几个参数：x,y,trabslationX和translationY。其中x和y是View左上角的坐标，而translationX和translationY是View左上角相对于父容器的偏移量。这几个参数也是相对于父容器的坐标，并且translationX和translationY的默认值是0，和View的四个基本的位置参数一样，View也为他们提供了get/set方法，这几个参数的换算关系如下<br><code>x = left + translationX</code><br>需要注意的是，View在平移过程中，top和left表示的是原始左上角的位置信息，其值并不会发生改变，此时发生改变的是x,y,translationX和translationY。</p>\n</blockquote>","more":"<h4 id=\"一-VelocityTracker-和-GestureDetector\"><a href=\"#一-VelocityTracker-和-GestureDetector\" class=\"headerlink\" title=\"一 VelocityTracker 和 GestureDetector\"></a>一 VelocityTracker 和 GestureDetector</h4><p>速度最终，用于追踪手指在滑动过程中的速度，包括水平和竖直方向的速度。使用方法在View的onTouchEvent方法中追踪当前单击事件的速度：<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">VelocityTracker velocityTracker = VelocityTracker.obtain();</div><div class=\"line\">velocityTracker.addMovement(event);</div></pre></td></tr></table></figure></p>\n<p>接着，当我们想知道当前的滑动速度时，这个时候可以采用如下方式来获得当前速度：<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">velocityTracker.computeCurrentVelocity(<span class=\"number\">1000</span>);</div><div class=\"line\"><span class=\"keyword\">float</span> xVelocity = velocityTracker.getXVelocity();</div><div class=\"line\"><span class=\"keyword\">float</span> yVelocity = velocityTracker.getYVelocity();</div></pre></td></tr></table></figure></p>\n<p>在这一步中有两点需要注意</p>\n<ol>\n<li>获取速度之前必须先计算速度，即getXVelocity()和getYVelocity()之前必须调用computeCurrentVelocity(1000)</li>\n<li>这里的速度时指一段时间内手指所划过的像素数，速度可以是负数，当手指在水平方向从左向右滑动时，速度为正，反之为负数。<br>最后，当不在使用它的时候，需要调用clear方法来重置并回收内存:<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">velocityTracker.clear();</div><div class=\"line\">velocityTracker.recycle();</div></pre></td></tr></table></figure>\n</li>\n</ol>\n<hr>\n<p>手势检测，用于辅助检测用户的单击、滑动、长按、双击等行为。<br>首先创建GestureDetector的对象，接着接管View的onTouchEvent方法。做完下面两部，就可以有选择的实现接口中的方法了<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">GestureDetector gestureDetector = <span class=\"keyword\">new</span> GestureDetector(<span class=\"keyword\">this</span>,<span class=\"keyword\">this</span>);</div><div class=\"line\">      gestureDetector.setIsLongpressEnabled(<span class=\"keyword\">false</span>);</div><div class=\"line\">      <span class=\"keyword\">return</span> gestureDetector.onTouchEvent(event);</div></pre></td></tr></table></figure></p>\n<p>其中<code>gestureDetector.setIsLongpressEnabled(false)</code>是为了解决长按之后无法拖动的现象。</p>\n<h4 id=\"二-使用ScrollTo-ScrollBy\"><a href=\"#二-使用ScrollTo-ScrollBy\" class=\"headerlink\" title=\"二 使用ScrollTo/ScrollBy\"></a>二 使用ScrollTo/ScrollBy</h4><p>调用方式 <code>View.scrollTo(int x, int y)</code>,<code>View.scrollBy(int x, int y)</code><br>方法源码：<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">/**</div><div class=\"line\">     * Set the scrolled position of your view. This will cause a call to</div><div class=\"line\">     * &#123;<span class=\"doctag\">@link</span> #onScrollChanged(int, int, int, int)&#125; and the view will be</div><div class=\"line\">     * invalidated.</div><div class=\"line\">     * <span class=\"doctag\">@param</span> x the x position to scroll to</div><div class=\"line\">     * <span class=\"doctag\">@param</span> y the y position to scroll to</div><div class=\"line\">     */</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">scrollTo</span><span class=\"params\">(<span class=\"keyword\">int</span> x, <span class=\"keyword\">int</span> y)</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">if</span> (mScrollX != x || mScrollY != y) &#123;</div><div class=\"line\">            <span class=\"keyword\">int</span> oldX = mScrollX;</div><div class=\"line\">            <span class=\"keyword\">int</span> oldY = mScrollY;</div><div class=\"line\">            mScrollX = x;</div><div class=\"line\">            mScrollY = y;</div><div class=\"line\">            invalidateParentCaches();</div><div class=\"line\">            onScrollChanged(mScrollX, mScrollY, oldX, oldY);</div><div class=\"line\">            <span class=\"keyword\">if</span> (!awakenScrollBars()) &#123;</div><div class=\"line\">                postInvalidateOnAnimation();</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">/**</div><div class=\"line\">     * Move the scrolled position of your view. This will cause a call to</div><div class=\"line\">     * &#123;<span class=\"doctag\">@link</span> #onScrollChanged(int, int, int, int)&#125; and the view will be</div><div class=\"line\">     * invalidated.</div><div class=\"line\">     * <span class=\"doctag\">@param</span> x the amount of pixels to scroll by horizontally</div><div class=\"line\">     * <span class=\"doctag\">@param</span> y the amount of pixels to scroll by vertically</div><div class=\"line\">     */</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">scrollBy</span><span class=\"params\">(<span class=\"keyword\">int</span> x, <span class=\"keyword\">int</span> y)</span> </span>&#123;</div><div class=\"line\">        scrollTo(mScrollX + x, mScrollY + y);</div><div class=\"line\">    &#125;</div></pre></td></tr></table></figure></p>\n<p>　　从源码中可以看出，<code>scrollBy</code>实际上也是调用<code>scrollBy</code>的方法。需要注意的是在<code>View</code>的滑动过程中，<code>mScrollX</code>和<code>mScrollY</code>的改变规则：<br>在滑动过程中，<code>mScrollX</code>的值总是等于View左边缘和View内容左边缘在水平方向的距离，而mScrollY的值总是等于View上边缘和View内容上边缘在竖直方向的距离。其中<code>mScrollX</code>和<code>mScrollY</code>的单位是像素，并且当View左边缘在View内容左边缘的右边时，<code>mScrollX</code>为正值，反之为负值；当View上边缘在View内容上边缘的下边时，<code>mScrollY</code>为正值，反之为负值。换句话说：从左向右滑动，<code>mScrollX</code>为负值，反之为正值；如果从上往下滑动，<code>mScrollY</code>为负值，反之为正值。<br><strong>意思就是说ScrollTo/ScrollBy只能滑动View的内容而不能滑动View本身，比如，只能滑动TextView的文字，而不能滑动TextView控件本身</strong></p>\n<h4 id=\"三-使用动画\"><a href=\"#三-使用动画\" class=\"headerlink\" title=\"三 使用动画\"></a>三 使用动画</h4><p>这个没什么好介绍的，想要兼容3.0以下的属性动画，建议使用nineoldandroids来实现</p>\n<h4 id=\"四-改变布局参数\"><a href=\"#四-改变布局参数\" class=\"headerlink\" title=\"四 改变布局参数\"></a>四 改变布局参数</h4><p>改变布局参数，也就是改变·LayoutParams·</p>\n<h4 id=\"五-使用Scroller进行平滑移动\"><a href=\"#五-使用Scroller进行平滑移动\" class=\"headerlink\" title=\"五 使用Scroller进行平滑移动\"></a>五 使用Scroller进行平滑移动</h4><p>自定义一个控件，添加成员变量·Scroller·，如下：<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ScrollerTextView</span> <span class=\"keyword\">extends</span> <span class=\"title\">TextView</span> </span>&#123;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">private</span> Scroller mScroller;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">ScrollerTextView</span><span class=\"params\">(Context context)</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">super</span>(context);</div><div class=\"line\">        mScroller = <span class=\"keyword\">new</span> Scroller(context);</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">ScrollerTextView</span><span class=\"params\">(Context context, AttributeSet attrs)</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">super</span>(context, attrs);</div><div class=\"line\">        mScroller = <span class=\"keyword\">new</span> Scroller(context);</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">ScrollerTextView</span><span class=\"params\">(Context context, AttributeSet attrs, <span class=\"keyword\">int</span> defStyleAttr)</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">super</span>(context, attrs, defStyleAttr);</div><div class=\"line\">        mScroller = <span class=\"keyword\">new</span> Scroller(context);</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">smoothScrollBy</span><span class=\"params\">(<span class=\"keyword\">int</span> dx,<span class=\"keyword\">int</span> dy)</span></span>&#123;</div><div class=\"line\">        mScroller.startScroll(mScroller.getFinalX(),mScroller.getFinalY(),dx,dy,<span class=\"number\">2000</span>);</div><div class=\"line\">        invalidate();</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">smoothScrollTo</span><span class=\"params\">(<span class=\"keyword\">int</span> fx, <span class=\"keyword\">int</span> fy)</span></span>&#123;</div><div class=\"line\">        <span class=\"keyword\">int</span> dx = fx - mScroller.getFinalX();</div><div class=\"line\">        <span class=\"keyword\">int</span> dy = fy - mScroller.getFinalY();</div><div class=\"line\">        smoothScrollBy(dx,dy);</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"meta\">@Override</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">computeScroll</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">       <span class=\"keyword\">if</span>(mScroller.computeScrollOffset())&#123;</div><div class=\"line\">           scrollTo(mScroller.getCurrX(), mScroller.getCurrY());</div><div class=\"line\">           postInvalidate();</div><div class=\"line\">       &#125;</div><div class=\"line\">        <span class=\"keyword\">super</span>.computeScroll();</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>其实<code>Scroller</code>也是通过<code>ScrollTO/ScrollBy</code>实现的，同样只能滑动内容，不能滑动本身。<br>PS：<br>在调用<code>startScroll</code>时，并没有让<code>View</code>进行滑动。而是在调用<code>invalidate()</code>进行重绘的时候，会去调用<code>computeScroll</code>方法，但是<code>computeScroll</code>在<code>View</code>只是个空实现，因此需要我们自己去实现。在<code>computeScroll</code>中进行平移。也就是说当View重绘后在<code>draw</code>方法中调用<code>computeScroll</code>,而<code>computeScroll</code>又会去向<code>Scroller</code>获取当前的<code>scrollX</code>和<code>scrollY</code>,然后通过<code>scrollTo</code>方法实现滑动，接着又调用<code>postInvalidate()</code>方法来进行第二次重绘，这一次重绘过程和第一次一样，还是会去调用<code>computeScroll()</code>方法，如此反复，直到整个滑动过程结束。</p>\n<hr>\n<p>以上</p>"},{"title":"TCP协议的简单理解","date":"2017-07-03T08:28:36.000Z","keywords":"TCP协议","_content":"尽管TCP和UDP都使用相同的网络层(IP)，TCP却向应用层提供与UDP完全不同的服务。TCP提供一种面向连接的、可靠的字节流服务。这里的面向连接是指：两个使用TCP的应用（通常是一个客户一个服务器）在彼此交换数据之前必须先建立一个TCP连接。\n<!-- more -->\n#### TCP的主要特点\n* TCP是面向连接的运输层协议\n* 每一条TCP连接只能两个短点，每一条TCP都是点对点的\n* 提供可靠交付服务\n* 提供全双工服务\n* 面向字节流\n#### TCP通过下列方式来提供可靠性\n* 应用数据被分割成TCP认为最合适发送的数据块。这个UDP完全不同，应用程序产生的数据报长度将保持不变。由TCP传递给IP的信息单位称为报文段或段(segment)\n* 当TCP发出一个段之后，它将启动一个定时器，等待目的端确认收到这个报文段，如果目的端不能及时确认接收，将重发这个报文段\n* 当TCP收到发至TCP连接的另一端的数据，它将发送一个确认。\n* TCP保持它首部和数据的检验和。这是一个端到端的检验和，目的是检测数据在传输过程中的任何变化。如果检验和有差错，TCP将丢弃这个报文段和不确认接收此报文段，并希望另一端重传此报文段。\n* 既然TCP报文段作为IP数据报来传输，而IP数据报的到达可能会失序，因此TCP报文段的到达也可能会失序。如果必要，TCP将对收到的数据进行重新排序，将收到的数据以正确的顺序交给应用层。\n* 既然IP数据报会发生重复，TCP的接收端必须丢弃重复的数据。\n* TCP还能提供流量控制。TCP连接的每一方都有固定大小的缓冲空间，TCP的接收端只允许另一端发送接收端缓冲区所能接纳的数据。这将防止较快主机致使较慢主机缓冲区溢出。\n#### 停止等待协议\n停止等待协议用下面的图来说明：图片来源于《计算机网络第六版》谢希仁编著\n在全双工通信的情况下，每一端既是接收方也是发送方，为方便，简化为A向B发送数据.\n1. 在无差错的情况下，A向B发送数据分组M1，发送完了就等待B的确认。B确认接收M1之后向A发送确认收到M1的数据。A收到B发送的\"确认收到M1\"的消息后，再向B发送下一组数据分组。\n2. 在有差错的情况下，B收到的数据分组可能是内容不对，B就把数据直接丢弃；也可能是数据分组在 传输过程中丢失了，B什么也没有接收到。这两种情况下，B什么也不操作（不通知A数据有错或者没收到数据。等到过一段时间，A没有收到B的确认消息，就认为刚刚发送的数据丢失了，然后重新传输刚才发送的分组。这要求A在每次发送一个数据分组时，都要设计一个超时计数器。\n    但是要注意\n    1) A在发送完一个分组后，必须暂时保留已发送的分组的副本（超时重传）。只有等到分组确认后才能清除暂时保留的副本\n    2) 分组和确认分组必须都进行编号\n    3) 超时及时器设置的重传时间应当比数据在分组传输的平均往返时间更长一些。\n![无差错左/有差错右](/image/tcp/tcp1.png)\n3. 确认丢失和确认迟到\n下图左边的情况是B向A发送的确认收到M1的消息丢失了。A在设定的超时重传时间内没有收到确认，但并无法知道是自己发送的分组出错、丢失，或者是B发送的确认丢失了，因此A在超时计时器到期后就要重传M1。假定B又收到了重传的分组M1.这时应采取两个行动：\n    1) 丢弃这个重复的分组M1，不向上层交付。\n    2) 向A发送确认，不能认为已经发送过确认就不再发送，因为A之所以重传M1就表示A没有收到M1的确认。\n下图右边的情况是传输过程中没有出现差错，但是B对分组M1的确认迟到了，A会收到重复确认，然后丢弃掉，但是这时A已经重发数据分组M1了，B收到重复的分组M1胡同样丢弃重复的分组M1，并重传确认分组。\n![确认丢失左/确认迟到右](/image/tcp/tcp2.png)\n#### 连续ARQ协议 \n　　滑动窗口协议比较复杂。图片来源于《计算机网络第六版》谢希仁编著\n下图a表示发送发维持的发送窗口，它的意义是：位于发送窗口内的5个分组都可以连续发送出去，而不需要等待对方确认。\n连续ARQ协议规定，发送方每收到一个确认，就把窗口向前滑动一个分组的位置，b表示发送发收到了对第一个分组的确认，于是把发送的分组向前移动一个分组的位置。\n接收方一般都是采用**累计确认**的方式。这就是说，接收方不必对收到的分组逐个发送确认，而是在收到几个分组后，对按序到达的的最后一个分组发送确认，这就表示：到这个分组为止的所有分组都已经正确收到了。\n![发送窗口](/image/tcp/tcp3.png)\n#### 滑动窗口\n　　TCP的滑动窗口是以字节为单位的。现在假定A收到了B发来的确认报文段，其中窗口是20，而确认号是31(这表明B期望收到的下一个序号是31,到序号30为止的数据已经收到了)。根据这两个数据，A就构造出自己的发送窗口，如下图所示\n![滑动窗口](/image/tcp/tcp4.png)\n　　发送窗口表示：在没有收到B的确认情况下，A可以把窗口内的数据都发送出去。凡是已经发送过的数据，在未收到确认之前都必须暂时保留，以便在超时重传时使用。\n发送窗口里面的序号表示允许发送的序号。显然，窗口越大，发送方就可以在收到对方确认之前连续发送更多的数据，因而可能获得更高的传输效率。但是接收方必须来得及处理这些收到的数据。\n发送窗口后延的后面部分表示已发送且已收到了确认。这些数据显然不需要再保留。而发送窗口前沿的前面部分表示不允许发送的，因为接收方都没有为这部分数据保留临时存放的缓存空间。\n　　发送窗口的位置由窗口前沿和后延的位置共同确定。发送窗口后沿的变换情况有两种可能，即不懂(没有收到新的确认)和前移(收到了新的确认)。发送窗口后沿不可能向后移动，因为不能撤销掉已收到的确认。发送窗口前沿通常是不断向前移动，但也有可能不动。这对应于两种情况：一时没有收到信的确认，对方通知的窗口大小也不变；二是收到了新的确认但对方通知的窗口缩小了，使得发送窗口前沿正好不动。发送窗口前沿也可能向后收缩，但是TCP的标准强烈不赞成这么做。\n#### TCP连接的建立\n假定主机A运行的是TCP客户程序，而B运行TCP服务器程序。最初两端的TCP进程都处于CLOSED(关闭)状态。如下图所示。现在A主动打开连接，而B是被动打开连接。\n![三次握手](/image/tcp/tcp5.png)\n　　B的TCP服务器先创建传输控制块TCB，准备接受客户程序的连接请求，然后服务器进场就处于LISTEN(监听)状态，等待客户端的连接请求。如果有，即作出响应。\n　　A的TCP客户进程也是首先创建传输控制模块TCB，然后向B发出连接请求报文段，这时首部中的同部位SYN=1，同时选择一个初始序号 seq=x 。TCP规定，SYN报文段(即SYN=1的报文段)不能携带数据，但要消耗掉一个序号。这时，TCP客户进程进入SYN-SENT(同步已发送)状态。\n　　B收到连接请求报文段后，如果同意建立连接，则向A发送确认。在确认报文段中应把SYN位和ACK位都置1，确认号是ack=x+1 ,同时也为自己选择一个初始序号seq=y。这个报文段也不能携带数据，但同样要消耗掉一个序号。这时TCP服务器进程进入SYN-RCVD(同步收到)状态。\n　　TCP客户进程收到B的确认后，还要向B给出确认。确认报文段的ACK置1，确认号ack=y+1，而自己的序号seq=x+1。TCP的标准规定，ACK报文段可以携带数据。但如果不携带数据则不消耗序号，在这种情况下，下一个数据报文段的序号仍然是seq=x+1。这时TCP连接已经建立，A进入ESTABLISHED(已建立连接)状态。\n　　当B收到A的确认后，也进入ESTABLISHED状态\n　　A最后发送一次确认主要是为了防止已失效的连接请求报文段突然又传送到了B，因而产生错误。\n#### TCP连接的释放\n数据传输结束后，通信的双方都可释放连接。\n![四次挥手](/image/tcp/tcp6.png)\n　　现在A和B都处于ESTABLISHED状态，A的应用进程先向其TCP发出连接释放报文段，并停止再发送数据，主动关闭TCP连接，A把连接释放报文段首部的宗旨控制位FIN置1，其序号seq=u，它等于前面已传送过的数据的最后一个直接的序号加1.这时A进入FIN-WAIT-1(终止等待1)状态，等待B的确认。TCP规定，FIN报文段即使不携带数据，它也消耗掉一个序号。\n　　B收到连接释放报文段后即发出确认，确认号是ack=u+1，而这个报文段自己的序号是v，等于B前面已传送过的数据的最后一个字节的序号加1。然后B就进入CLOSE-WAIT(关闭等待)状态。TCP服务器进程这时应通知高层应用进程，因而从A到B这个方向的连接就释放了，这时的TCP连接处于半关闭(half-close)状态，即A已经没有数据要发送了，但B若发送数据，A仍要接收，就是说，从B到A这个方向的连接并未关闭，这个状态可能会持续一些时间。\n　　A收到来自B的确认后，就进图FIN-WAIT-2(终止等待2)状态，等待B发出的连接释放报文段。\n　　若B已经没有要向A发送的数据，其应用进程就通知TCP释放连接。这时B发出的连接释放报文段必须使用FIN=1.现在假定B的序号为w(在半关闭状态B可能又发送了一些数据)，B还必须重复上次已发送过的确认号ack=u+1。这时B就进入LAST-ACK(最后确认)状态，等待A的确认。\n　　A在收到B的连接释放报文段后，必须对此发出确认。在确认报文段中把ACK置1，确认号ack=w+1，而自己的序号是seq=u+1，TCP规定，前面发送的FIN报文段要消耗一个序号。然后进入到TIME-WAIT(时间等待)状态。现在TCP连接还没有释放掉。必须经过时间等待计时器(TIME-WAIT timer)设置的时间2MSL后，A才进入到CLOSED状态，时间MSL叫做最长报文段寿命。\n　　B只要收到了A发出的确认，就进入CLOSED状态。同样，B在撤销相应的出书控制块TCB后，就结束了这次的TCP连接。B结束TCP连接的时间要比A早一些。\n#### TCP有限状态机\n![有限状态机](/image/tcp/tcp7.png)\n粗实线箭头表示对客户进程的正常变迁、粗虚线箭头表示对服务器进程的正常变迁、另一种细线箭头表示异常变迁。\n----\n\n以上文字和图片均来自于《计算机网络第6版》谢希仁著\n\n----\n以上\n\n","source":"_posts/TCP协议的简单理解.md","raw":"---\ntitle: TCP协议的简单理解\ndate: 2017-07-03 16:28:36\ntags: [tcp协议]\nkeywords: TCP协议\n---\n尽管TCP和UDP都使用相同的网络层(IP)，TCP却向应用层提供与UDP完全不同的服务。TCP提供一种面向连接的、可靠的字节流服务。这里的面向连接是指：两个使用TCP的应用（通常是一个客户一个服务器）在彼此交换数据之前必须先建立一个TCP连接。\n<!-- more -->\n#### TCP的主要特点\n* TCP是面向连接的运输层协议\n* 每一条TCP连接只能两个短点，每一条TCP都是点对点的\n* 提供可靠交付服务\n* 提供全双工服务\n* 面向字节流\n#### TCP通过下列方式来提供可靠性\n* 应用数据被分割成TCP认为最合适发送的数据块。这个UDP完全不同，应用程序产生的数据报长度将保持不变。由TCP传递给IP的信息单位称为报文段或段(segment)\n* 当TCP发出一个段之后，它将启动一个定时器，等待目的端确认收到这个报文段，如果目的端不能及时确认接收，将重发这个报文段\n* 当TCP收到发至TCP连接的另一端的数据，它将发送一个确认。\n* TCP保持它首部和数据的检验和。这是一个端到端的检验和，目的是检测数据在传输过程中的任何变化。如果检验和有差错，TCP将丢弃这个报文段和不确认接收此报文段，并希望另一端重传此报文段。\n* 既然TCP报文段作为IP数据报来传输，而IP数据报的到达可能会失序，因此TCP报文段的到达也可能会失序。如果必要，TCP将对收到的数据进行重新排序，将收到的数据以正确的顺序交给应用层。\n* 既然IP数据报会发生重复，TCP的接收端必须丢弃重复的数据。\n* TCP还能提供流量控制。TCP连接的每一方都有固定大小的缓冲空间，TCP的接收端只允许另一端发送接收端缓冲区所能接纳的数据。这将防止较快主机致使较慢主机缓冲区溢出。\n#### 停止等待协议\n停止等待协议用下面的图来说明：图片来源于《计算机网络第六版》谢希仁编著\n在全双工通信的情况下，每一端既是接收方也是发送方，为方便，简化为A向B发送数据.\n1. 在无差错的情况下，A向B发送数据分组M1，发送完了就等待B的确认。B确认接收M1之后向A发送确认收到M1的数据。A收到B发送的\"确认收到M1\"的消息后，再向B发送下一组数据分组。\n2. 在有差错的情况下，B收到的数据分组可能是内容不对，B就把数据直接丢弃；也可能是数据分组在 传输过程中丢失了，B什么也没有接收到。这两种情况下，B什么也不操作（不通知A数据有错或者没收到数据。等到过一段时间，A没有收到B的确认消息，就认为刚刚发送的数据丢失了，然后重新传输刚才发送的分组。这要求A在每次发送一个数据分组时，都要设计一个超时计数器。\n    但是要注意\n    1) A在发送完一个分组后，必须暂时保留已发送的分组的副本（超时重传）。只有等到分组确认后才能清除暂时保留的副本\n    2) 分组和确认分组必须都进行编号\n    3) 超时及时器设置的重传时间应当比数据在分组传输的平均往返时间更长一些。\n![无差错左/有差错右](/image/tcp/tcp1.png)\n3. 确认丢失和确认迟到\n下图左边的情况是B向A发送的确认收到M1的消息丢失了。A在设定的超时重传时间内没有收到确认，但并无法知道是自己发送的分组出错、丢失，或者是B发送的确认丢失了，因此A在超时计时器到期后就要重传M1。假定B又收到了重传的分组M1.这时应采取两个行动：\n    1) 丢弃这个重复的分组M1，不向上层交付。\n    2) 向A发送确认，不能认为已经发送过确认就不再发送，因为A之所以重传M1就表示A没有收到M1的确认。\n下图右边的情况是传输过程中没有出现差错，但是B对分组M1的确认迟到了，A会收到重复确认，然后丢弃掉，但是这时A已经重发数据分组M1了，B收到重复的分组M1胡同样丢弃重复的分组M1，并重传确认分组。\n![确认丢失左/确认迟到右](/image/tcp/tcp2.png)\n#### 连续ARQ协议 \n　　滑动窗口协议比较复杂。图片来源于《计算机网络第六版》谢希仁编著\n下图a表示发送发维持的发送窗口，它的意义是：位于发送窗口内的5个分组都可以连续发送出去，而不需要等待对方确认。\n连续ARQ协议规定，发送方每收到一个确认，就把窗口向前滑动一个分组的位置，b表示发送发收到了对第一个分组的确认，于是把发送的分组向前移动一个分组的位置。\n接收方一般都是采用**累计确认**的方式。这就是说，接收方不必对收到的分组逐个发送确认，而是在收到几个分组后，对按序到达的的最后一个分组发送确认，这就表示：到这个分组为止的所有分组都已经正确收到了。\n![发送窗口](/image/tcp/tcp3.png)\n#### 滑动窗口\n　　TCP的滑动窗口是以字节为单位的。现在假定A收到了B发来的确认报文段，其中窗口是20，而确认号是31(这表明B期望收到的下一个序号是31,到序号30为止的数据已经收到了)。根据这两个数据，A就构造出自己的发送窗口，如下图所示\n![滑动窗口](/image/tcp/tcp4.png)\n　　发送窗口表示：在没有收到B的确认情况下，A可以把窗口内的数据都发送出去。凡是已经发送过的数据，在未收到确认之前都必须暂时保留，以便在超时重传时使用。\n发送窗口里面的序号表示允许发送的序号。显然，窗口越大，发送方就可以在收到对方确认之前连续发送更多的数据，因而可能获得更高的传输效率。但是接收方必须来得及处理这些收到的数据。\n发送窗口后延的后面部分表示已发送且已收到了确认。这些数据显然不需要再保留。而发送窗口前沿的前面部分表示不允许发送的，因为接收方都没有为这部分数据保留临时存放的缓存空间。\n　　发送窗口的位置由窗口前沿和后延的位置共同确定。发送窗口后沿的变换情况有两种可能，即不懂(没有收到新的确认)和前移(收到了新的确认)。发送窗口后沿不可能向后移动，因为不能撤销掉已收到的确认。发送窗口前沿通常是不断向前移动，但也有可能不动。这对应于两种情况：一时没有收到信的确认，对方通知的窗口大小也不变；二是收到了新的确认但对方通知的窗口缩小了，使得发送窗口前沿正好不动。发送窗口前沿也可能向后收缩，但是TCP的标准强烈不赞成这么做。\n#### TCP连接的建立\n假定主机A运行的是TCP客户程序，而B运行TCP服务器程序。最初两端的TCP进程都处于CLOSED(关闭)状态。如下图所示。现在A主动打开连接，而B是被动打开连接。\n![三次握手](/image/tcp/tcp5.png)\n　　B的TCP服务器先创建传输控制块TCB，准备接受客户程序的连接请求，然后服务器进场就处于LISTEN(监听)状态，等待客户端的连接请求。如果有，即作出响应。\n　　A的TCP客户进程也是首先创建传输控制模块TCB，然后向B发出连接请求报文段，这时首部中的同部位SYN=1，同时选择一个初始序号 seq=x 。TCP规定，SYN报文段(即SYN=1的报文段)不能携带数据，但要消耗掉一个序号。这时，TCP客户进程进入SYN-SENT(同步已发送)状态。\n　　B收到连接请求报文段后，如果同意建立连接，则向A发送确认。在确认报文段中应把SYN位和ACK位都置1，确认号是ack=x+1 ,同时也为自己选择一个初始序号seq=y。这个报文段也不能携带数据，但同样要消耗掉一个序号。这时TCP服务器进程进入SYN-RCVD(同步收到)状态。\n　　TCP客户进程收到B的确认后，还要向B给出确认。确认报文段的ACK置1，确认号ack=y+1，而自己的序号seq=x+1。TCP的标准规定，ACK报文段可以携带数据。但如果不携带数据则不消耗序号，在这种情况下，下一个数据报文段的序号仍然是seq=x+1。这时TCP连接已经建立，A进入ESTABLISHED(已建立连接)状态。\n　　当B收到A的确认后，也进入ESTABLISHED状态\n　　A最后发送一次确认主要是为了防止已失效的连接请求报文段突然又传送到了B，因而产生错误。\n#### TCP连接的释放\n数据传输结束后，通信的双方都可释放连接。\n![四次挥手](/image/tcp/tcp6.png)\n　　现在A和B都处于ESTABLISHED状态，A的应用进程先向其TCP发出连接释放报文段，并停止再发送数据，主动关闭TCP连接，A把连接释放报文段首部的宗旨控制位FIN置1，其序号seq=u，它等于前面已传送过的数据的最后一个直接的序号加1.这时A进入FIN-WAIT-1(终止等待1)状态，等待B的确认。TCP规定，FIN报文段即使不携带数据，它也消耗掉一个序号。\n　　B收到连接释放报文段后即发出确认，确认号是ack=u+1，而这个报文段自己的序号是v，等于B前面已传送过的数据的最后一个字节的序号加1。然后B就进入CLOSE-WAIT(关闭等待)状态。TCP服务器进程这时应通知高层应用进程，因而从A到B这个方向的连接就释放了，这时的TCP连接处于半关闭(half-close)状态，即A已经没有数据要发送了，但B若发送数据，A仍要接收，就是说，从B到A这个方向的连接并未关闭，这个状态可能会持续一些时间。\n　　A收到来自B的确认后，就进图FIN-WAIT-2(终止等待2)状态，等待B发出的连接释放报文段。\n　　若B已经没有要向A发送的数据，其应用进程就通知TCP释放连接。这时B发出的连接释放报文段必须使用FIN=1.现在假定B的序号为w(在半关闭状态B可能又发送了一些数据)，B还必须重复上次已发送过的确认号ack=u+1。这时B就进入LAST-ACK(最后确认)状态，等待A的确认。\n　　A在收到B的连接释放报文段后，必须对此发出确认。在确认报文段中把ACK置1，确认号ack=w+1，而自己的序号是seq=u+1，TCP规定，前面发送的FIN报文段要消耗一个序号。然后进入到TIME-WAIT(时间等待)状态。现在TCP连接还没有释放掉。必须经过时间等待计时器(TIME-WAIT timer)设置的时间2MSL后，A才进入到CLOSED状态，时间MSL叫做最长报文段寿命。\n　　B只要收到了A发出的确认，就进入CLOSED状态。同样，B在撤销相应的出书控制块TCB后，就结束了这次的TCP连接。B结束TCP连接的时间要比A早一些。\n#### TCP有限状态机\n![有限状态机](/image/tcp/tcp7.png)\n粗实线箭头表示对客户进程的正常变迁、粗虚线箭头表示对服务器进程的正常变迁、另一种细线箭头表示异常变迁。\n----\n\n以上文字和图片均来自于《计算机网络第6版》谢希仁著\n\n----\n以上\n\n","slug":"TCP协议的简单理解","published":1,"updated":"2018-08-04T05:15:49.206Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjl3vbtrc0022isdgm5iennv1","content":"<p>尽管TCP和UDP都使用相同的网络层(IP)，TCP却向应用层提供与UDP完全不同的服务。TCP提供一种面向连接的、可靠的字节流服务。这里的面向连接是指：两个使用TCP的应用（通常是一个客户一个服务器）在彼此交换数据之前必须先建立一个TCP连接。<br><a id=\"more\"></a></p>\n<h4 id=\"TCP的主要特点\"><a href=\"#TCP的主要特点\" class=\"headerlink\" title=\"TCP的主要特点\"></a>TCP的主要特点</h4><ul>\n<li>TCP是面向连接的运输层协议</li>\n<li>每一条TCP连接只能两个短点，每一条TCP都是点对点的</li>\n<li>提供可靠交付服务</li>\n<li>提供全双工服务</li>\n<li>面向字节流<h4 id=\"TCP通过下列方式来提供可靠性\"><a href=\"#TCP通过下列方式来提供可靠性\" class=\"headerlink\" title=\"TCP通过下列方式来提供可靠性\"></a>TCP通过下列方式来提供可靠性</h4></li>\n<li>应用数据被分割成TCP认为最合适发送的数据块。这个UDP完全不同，应用程序产生的数据报长度将保持不变。由TCP传递给IP的信息单位称为报文段或段(segment)</li>\n<li>当TCP发出一个段之后，它将启动一个定时器，等待目的端确认收到这个报文段，如果目的端不能及时确认接收，将重发这个报文段</li>\n<li>当TCP收到发至TCP连接的另一端的数据，它将发送一个确认。</li>\n<li>TCP保持它首部和数据的检验和。这是一个端到端的检验和，目的是检测数据在传输过程中的任何变化。如果检验和有差错，TCP将丢弃这个报文段和不确认接收此报文段，并希望另一端重传此报文段。</li>\n<li>既然TCP报文段作为IP数据报来传输，而IP数据报的到达可能会失序，因此TCP报文段的到达也可能会失序。如果必要，TCP将对收到的数据进行重新排序，将收到的数据以正确的顺序交给应用层。</li>\n<li>既然IP数据报会发生重复，TCP的接收端必须丢弃重复的数据。</li>\n<li>TCP还能提供流量控制。TCP连接的每一方都有固定大小的缓冲空间，TCP的接收端只允许另一端发送接收端缓冲区所能接纳的数据。这将防止较快主机致使较慢主机缓冲区溢出。<h4 id=\"停止等待协议\"><a href=\"#停止等待协议\" class=\"headerlink\" title=\"停止等待协议\"></a>停止等待协议</h4>停止等待协议用下面的图来说明：图片来源于《计算机网络第六版》谢希仁编著<br>在全双工通信的情况下，每一端既是接收方也是发送方，为方便，简化为A向B发送数据.</li>\n</ul>\n<ol>\n<li>在无差错的情况下，A向B发送数据分组M1，发送完了就等待B的确认。B确认接收M1之后向A发送确认收到M1的数据。A收到B发送的”确认收到M1”的消息后，再向B发送下一组数据分组。</li>\n<li>在有差错的情况下，B收到的数据分组可能是内容不对，B就把数据直接丢弃；也可能是数据分组在 传输过程中丢失了，B什么也没有接收到。这两种情况下，B什么也不操作（不通知A数据有错或者没收到数据。等到过一段时间，A没有收到B的确认消息，就认为刚刚发送的数据丢失了，然后重新传输刚才发送的分组。这要求A在每次发送一个数据分组时，都要设计一个超时计数器。<br> 但是要注意<br> 1) A在发送完一个分组后，必须暂时保留已发送的分组的副本（超时重传）。只有等到分组确认后才能清除暂时保留的副本<br> 2) 分组和确认分组必须都进行编号<br> 3) 超时及时器设置的重传时间应当比数据在分组传输的平均往返时间更长一些。<br><img src=\"/image/tcp/tcp1.png\" alt=\"无差错左/有差错右\"></li>\n<li>确认丢失和确认迟到<br>下图左边的情况是B向A发送的确认收到M1的消息丢失了。A在设定的超时重传时间内没有收到确认，但并无法知道是自己发送的分组出错、丢失，或者是B发送的确认丢失了，因此A在超时计时器到期后就要重传M1。假定B又收到了重传的分组M1.这时应采取两个行动：<br> 1) 丢弃这个重复的分组M1，不向上层交付。<br> 2) 向A发送确认，不能认为已经发送过确认就不再发送，因为A之所以重传M1就表示A没有收到M1的确认。<br>下图右边的情况是传输过程中没有出现差错，但是B对分组M1的确认迟到了，A会收到重复确认，然后丢弃掉，但是这时A已经重发数据分组M1了，B收到重复的分组M1胡同样丢弃重复的分组M1，并重传确认分组。<br><img src=\"/image/tcp/tcp2.png\" alt=\"确认丢失左/确认迟到右\"><h4 id=\"连续ARQ协议\"><a href=\"#连续ARQ协议\" class=\"headerlink\" title=\"连续ARQ协议\"></a>连续ARQ协议</h4>　　滑动窗口协议比较复杂。图片来源于《计算机网络第六版》谢希仁编著<br>下图a表示发送发维持的发送窗口，它的意义是：位于发送窗口内的5个分组都可以连续发送出去，而不需要等待对方确认。<br>连续ARQ协议规定，发送方每收到一个确认，就把窗口向前滑动一个分组的位置，b表示发送发收到了对第一个分组的确认，于是把发送的分组向前移动一个分组的位置。<br>接收方一般都是采用<strong>累计确认</strong>的方式。这就是说，接收方不必对收到的分组逐个发送确认，而是在收到几个分组后，对按序到达的的最后一个分组发送确认，这就表示：到这个分组为止的所有分组都已经正确收到了。<br><img src=\"/image/tcp/tcp3.png\" alt=\"发送窗口\"><h4 id=\"滑动窗口\"><a href=\"#滑动窗口\" class=\"headerlink\" title=\"滑动窗口\"></a>滑动窗口</h4>　　TCP的滑动窗口是以字节为单位的。现在假定A收到了B发来的确认报文段，其中窗口是20，而确认号是31(这表明B期望收到的下一个序号是31,到序号30为止的数据已经收到了)。根据这两个数据，A就构造出自己的发送窗口，如下图所示<br><img src=\"/image/tcp/tcp4.png\" alt=\"滑动窗口\"><br>　　发送窗口表示：在没有收到B的确认情况下，A可以把窗口内的数据都发送出去。凡是已经发送过的数据，在未收到确认之前都必须暂时保留，以便在超时重传时使用。<br>发送窗口里面的序号表示允许发送的序号。显然，窗口越大，发送方就可以在收到对方确认之前连续发送更多的数据，因而可能获得更高的传输效率。但是接收方必须来得及处理这些收到的数据。<br>发送窗口后延的后面部分表示已发送且已收到了确认。这些数据显然不需要再保留。而发送窗口前沿的前面部分表示不允许发送的，因为接收方都没有为这部分数据保留临时存放的缓存空间。<br>　　发送窗口的位置由窗口前沿和后延的位置共同确定。发送窗口后沿的变换情况有两种可能，即不懂(没有收到新的确认)和前移(收到了新的确认)。发送窗口后沿不可能向后移动，因为不能撤销掉已收到的确认。发送窗口前沿通常是不断向前移动，但也有可能不动。这对应于两种情况：一时没有收到信的确认，对方通知的窗口大小也不变；二是收到了新的确认但对方通知的窗口缩小了，使得发送窗口前沿正好不动。发送窗口前沿也可能向后收缩，但是TCP的标准强烈不赞成这么做。<h4 id=\"TCP连接的建立\"><a href=\"#TCP连接的建立\" class=\"headerlink\" title=\"TCP连接的建立\"></a>TCP连接的建立</h4>假定主机A运行的是TCP客户程序，而B运行TCP服务器程序。最初两端的TCP进程都处于CLOSED(关闭)状态。如下图所示。现在A主动打开连接，而B是被动打开连接。<br><img src=\"/image/tcp/tcp5.png\" alt=\"三次握手\"><br>　　B的TCP服务器先创建传输控制块TCB，准备接受客户程序的连接请求，然后服务器进场就处于LISTEN(监听)状态，等待客户端的连接请求。如果有，即作出响应。<br>　　A的TCP客户进程也是首先创建传输控制模块TCB，然后向B发出连接请求报文段，这时首部中的同部位SYN=1，同时选择一个初始序号 seq=x 。TCP规定，SYN报文段(即SYN=1的报文段)不能携带数据，但要消耗掉一个序号。这时，TCP客户进程进入SYN-SENT(同步已发送)状态。<br>　　B收到连接请求报文段后，如果同意建立连接，则向A发送确认。在确认报文段中应把SYN位和ACK位都置1，确认号是ack=x+1 ,同时也为自己选择一个初始序号seq=y。这个报文段也不能携带数据，但同样要消耗掉一个序号。这时TCP服务器进程进入SYN-RCVD(同步收到)状态。<br>　　TCP客户进程收到B的确认后，还要向B给出确认。确认报文段的ACK置1，确认号ack=y+1，而自己的序号seq=x+1。TCP的标准规定，ACK报文段可以携带数据。但如果不携带数据则不消耗序号，在这种情况下，下一个数据报文段的序号仍然是seq=x+1。这时TCP连接已经建立，A进入ESTABLISHED(已建立连接)状态。<br>　　当B收到A的确认后，也进入ESTABLISHED状态<br>　　A最后发送一次确认主要是为了防止已失效的连接请求报文段突然又传送到了B，因而产生错误。<h4 id=\"TCP连接的释放\"><a href=\"#TCP连接的释放\" class=\"headerlink\" title=\"TCP连接的释放\"></a>TCP连接的释放</h4>数据传输结束后，通信的双方都可释放连接。<br><img src=\"/image/tcp/tcp6.png\" alt=\"四次挥手\"><br>　　现在A和B都处于ESTABLISHED状态，A的应用进程先向其TCP发出连接释放报文段，并停止再发送数据，主动关闭TCP连接，A把连接释放报文段首部的宗旨控制位FIN置1，其序号seq=u，它等于前面已传送过的数据的最后一个直接的序号加1.这时A进入FIN-WAIT-1(终止等待1)状态，等待B的确认。TCP规定，FIN报文段即使不携带数据，它也消耗掉一个序号。<br>　　B收到连接释放报文段后即发出确认，确认号是ack=u+1，而这个报文段自己的序号是v，等于B前面已传送过的数据的最后一个字节的序号加1。然后B就进入CLOSE-WAIT(关闭等待)状态。TCP服务器进程这时应通知高层应用进程，因而从A到B这个方向的连接就释放了，这时的TCP连接处于半关闭(half-close)状态，即A已经没有数据要发送了，但B若发送数据，A仍要接收，就是说，从B到A这个方向的连接并未关闭，这个状态可能会持续一些时间。<br>　　A收到来自B的确认后，就进图FIN-WAIT-2(终止等待2)状态，等待B发出的连接释放报文段。<br>　　若B已经没有要向A发送的数据，其应用进程就通知TCP释放连接。这时B发出的连接释放报文段必须使用FIN=1.现在假定B的序号为w(在半关闭状态B可能又发送了一些数据)，B还必须重复上次已发送过的确认号ack=u+1。这时B就进入LAST-ACK(最后确认)状态，等待A的确认。<br>　　A在收到B的连接释放报文段后，必须对此发出确认。在确认报文段中把ACK置1，确认号ack=w+1，而自己的序号是seq=u+1，TCP规定，前面发送的FIN报文段要消耗一个序号。然后进入到TIME-WAIT(时间等待)状态。现在TCP连接还没有释放掉。必须经过时间等待计时器(TIME-WAIT timer)设置的时间2MSL后，A才进入到CLOSED状态，时间MSL叫做最长报文段寿命。<br>　　B只要收到了A发出的确认，就进入CLOSED状态。同样，B在撤销相应的出书控制块TCB后，就结束了这次的TCP连接。B结束TCP连接的时间要比A早一些。<h4 id=\"TCP有限状态机\"><a href=\"#TCP有限状态机\" class=\"headerlink\" title=\"TCP有限状态机\"></a>TCP有限状态机</h4><img src=\"/image/tcp/tcp7.png\" alt=\"有限状态机\"><br>粗实线箭头表示对客户进程的正常变迁、粗虚线箭头表示对服务器进程的正常变迁、另一种细线箭头表示异常变迁。</li>\n</ol>\n<hr>\n<p>以上文字和图片均来自于《计算机网络第6版》谢希仁著</p>\n<hr>\n<p>以上</p>\n","excerpt":"<p>尽管TCP和UDP都使用相同的网络层(IP)，TCP却向应用层提供与UDP完全不同的服务。TCP提供一种面向连接的、可靠的字节流服务。这里的面向连接是指：两个使用TCP的应用（通常是一个客户一个服务器）在彼此交换数据之前必须先建立一个TCP连接。<br>","more":"</p>\n<h4 id=\"TCP的主要特点\"><a href=\"#TCP的主要特点\" class=\"headerlink\" title=\"TCP的主要特点\"></a>TCP的主要特点</h4><ul>\n<li>TCP是面向连接的运输层协议</li>\n<li>每一条TCP连接只能两个短点，每一条TCP都是点对点的</li>\n<li>提供可靠交付服务</li>\n<li>提供全双工服务</li>\n<li>面向字节流<h4 id=\"TCP通过下列方式来提供可靠性\"><a href=\"#TCP通过下列方式来提供可靠性\" class=\"headerlink\" title=\"TCP通过下列方式来提供可靠性\"></a>TCP通过下列方式来提供可靠性</h4></li>\n<li>应用数据被分割成TCP认为最合适发送的数据块。这个UDP完全不同，应用程序产生的数据报长度将保持不变。由TCP传递给IP的信息单位称为报文段或段(segment)</li>\n<li>当TCP发出一个段之后，它将启动一个定时器，等待目的端确认收到这个报文段，如果目的端不能及时确认接收，将重发这个报文段</li>\n<li>当TCP收到发至TCP连接的另一端的数据，它将发送一个确认。</li>\n<li>TCP保持它首部和数据的检验和。这是一个端到端的检验和，目的是检测数据在传输过程中的任何变化。如果检验和有差错，TCP将丢弃这个报文段和不确认接收此报文段，并希望另一端重传此报文段。</li>\n<li>既然TCP报文段作为IP数据报来传输，而IP数据报的到达可能会失序，因此TCP报文段的到达也可能会失序。如果必要，TCP将对收到的数据进行重新排序，将收到的数据以正确的顺序交给应用层。</li>\n<li>既然IP数据报会发生重复，TCP的接收端必须丢弃重复的数据。</li>\n<li>TCP还能提供流量控制。TCP连接的每一方都有固定大小的缓冲空间，TCP的接收端只允许另一端发送接收端缓冲区所能接纳的数据。这将防止较快主机致使较慢主机缓冲区溢出。<h4 id=\"停止等待协议\"><a href=\"#停止等待协议\" class=\"headerlink\" title=\"停止等待协议\"></a>停止等待协议</h4>停止等待协议用下面的图来说明：图片来源于《计算机网络第六版》谢希仁编著<br>在全双工通信的情况下，每一端既是接收方也是发送方，为方便，简化为A向B发送数据.</li>\n</ul>\n<ol>\n<li>在无差错的情况下，A向B发送数据分组M1，发送完了就等待B的确认。B确认接收M1之后向A发送确认收到M1的数据。A收到B发送的”确认收到M1”的消息后，再向B发送下一组数据分组。</li>\n<li>在有差错的情况下，B收到的数据分组可能是内容不对，B就把数据直接丢弃；也可能是数据分组在 传输过程中丢失了，B什么也没有接收到。这两种情况下，B什么也不操作（不通知A数据有错或者没收到数据。等到过一段时间，A没有收到B的确认消息，就认为刚刚发送的数据丢失了，然后重新传输刚才发送的分组。这要求A在每次发送一个数据分组时，都要设计一个超时计数器。<br> 但是要注意<br> 1) A在发送完一个分组后，必须暂时保留已发送的分组的副本（超时重传）。只有等到分组确认后才能清除暂时保留的副本<br> 2) 分组和确认分组必须都进行编号<br> 3) 超时及时器设置的重传时间应当比数据在分组传输的平均往返时间更长一些。<br><img src=\"/image/tcp/tcp1.png\" alt=\"无差错左/有差错右\"></li>\n<li>确认丢失和确认迟到<br>下图左边的情况是B向A发送的确认收到M1的消息丢失了。A在设定的超时重传时间内没有收到确认，但并无法知道是自己发送的分组出错、丢失，或者是B发送的确认丢失了，因此A在超时计时器到期后就要重传M1。假定B又收到了重传的分组M1.这时应采取两个行动：<br> 1) 丢弃这个重复的分组M1，不向上层交付。<br> 2) 向A发送确认，不能认为已经发送过确认就不再发送，因为A之所以重传M1就表示A没有收到M1的确认。<br>下图右边的情况是传输过程中没有出现差错，但是B对分组M1的确认迟到了，A会收到重复确认，然后丢弃掉，但是这时A已经重发数据分组M1了，B收到重复的分组M1胡同样丢弃重复的分组M1，并重传确认分组。<br><img src=\"/image/tcp/tcp2.png\" alt=\"确认丢失左/确认迟到右\"><h4 id=\"连续ARQ协议\"><a href=\"#连续ARQ协议\" class=\"headerlink\" title=\"连续ARQ协议\"></a>连续ARQ协议</h4>　　滑动窗口协议比较复杂。图片来源于《计算机网络第六版》谢希仁编著<br>下图a表示发送发维持的发送窗口，它的意义是：位于发送窗口内的5个分组都可以连续发送出去，而不需要等待对方确认。<br>连续ARQ协议规定，发送方每收到一个确认，就把窗口向前滑动一个分组的位置，b表示发送发收到了对第一个分组的确认，于是把发送的分组向前移动一个分组的位置。<br>接收方一般都是采用<strong>累计确认</strong>的方式。这就是说，接收方不必对收到的分组逐个发送确认，而是在收到几个分组后，对按序到达的的最后一个分组发送确认，这就表示：到这个分组为止的所有分组都已经正确收到了。<br><img src=\"/image/tcp/tcp3.png\" alt=\"发送窗口\"><h4 id=\"滑动窗口\"><a href=\"#滑动窗口\" class=\"headerlink\" title=\"滑动窗口\"></a>滑动窗口</h4>　　TCP的滑动窗口是以字节为单位的。现在假定A收到了B发来的确认报文段，其中窗口是20，而确认号是31(这表明B期望收到的下一个序号是31,到序号30为止的数据已经收到了)。根据这两个数据，A就构造出自己的发送窗口，如下图所示<br><img src=\"/image/tcp/tcp4.png\" alt=\"滑动窗口\"><br>　　发送窗口表示：在没有收到B的确认情况下，A可以把窗口内的数据都发送出去。凡是已经发送过的数据，在未收到确认之前都必须暂时保留，以便在超时重传时使用。<br>发送窗口里面的序号表示允许发送的序号。显然，窗口越大，发送方就可以在收到对方确认之前连续发送更多的数据，因而可能获得更高的传输效率。但是接收方必须来得及处理这些收到的数据。<br>发送窗口后延的后面部分表示已发送且已收到了确认。这些数据显然不需要再保留。而发送窗口前沿的前面部分表示不允许发送的，因为接收方都没有为这部分数据保留临时存放的缓存空间。<br>　　发送窗口的位置由窗口前沿和后延的位置共同确定。发送窗口后沿的变换情况有两种可能，即不懂(没有收到新的确认)和前移(收到了新的确认)。发送窗口后沿不可能向后移动，因为不能撤销掉已收到的确认。发送窗口前沿通常是不断向前移动，但也有可能不动。这对应于两种情况：一时没有收到信的确认，对方通知的窗口大小也不变；二是收到了新的确认但对方通知的窗口缩小了，使得发送窗口前沿正好不动。发送窗口前沿也可能向后收缩，但是TCP的标准强烈不赞成这么做。<h4 id=\"TCP连接的建立\"><a href=\"#TCP连接的建立\" class=\"headerlink\" title=\"TCP连接的建立\"></a>TCP连接的建立</h4>假定主机A运行的是TCP客户程序，而B运行TCP服务器程序。最初两端的TCP进程都处于CLOSED(关闭)状态。如下图所示。现在A主动打开连接，而B是被动打开连接。<br><img src=\"/image/tcp/tcp5.png\" alt=\"三次握手\"><br>　　B的TCP服务器先创建传输控制块TCB，准备接受客户程序的连接请求，然后服务器进场就处于LISTEN(监听)状态，等待客户端的连接请求。如果有，即作出响应。<br>　　A的TCP客户进程也是首先创建传输控制模块TCB，然后向B发出连接请求报文段，这时首部中的同部位SYN=1，同时选择一个初始序号 seq=x 。TCP规定，SYN报文段(即SYN=1的报文段)不能携带数据，但要消耗掉一个序号。这时，TCP客户进程进入SYN-SENT(同步已发送)状态。<br>　　B收到连接请求报文段后，如果同意建立连接，则向A发送确认。在确认报文段中应把SYN位和ACK位都置1，确认号是ack=x+1 ,同时也为自己选择一个初始序号seq=y。这个报文段也不能携带数据，但同样要消耗掉一个序号。这时TCP服务器进程进入SYN-RCVD(同步收到)状态。<br>　　TCP客户进程收到B的确认后，还要向B给出确认。确认报文段的ACK置1，确认号ack=y+1，而自己的序号seq=x+1。TCP的标准规定，ACK报文段可以携带数据。但如果不携带数据则不消耗序号，在这种情况下，下一个数据报文段的序号仍然是seq=x+1。这时TCP连接已经建立，A进入ESTABLISHED(已建立连接)状态。<br>　　当B收到A的确认后，也进入ESTABLISHED状态<br>　　A最后发送一次确认主要是为了防止已失效的连接请求报文段突然又传送到了B，因而产生错误。<h4 id=\"TCP连接的释放\"><a href=\"#TCP连接的释放\" class=\"headerlink\" title=\"TCP连接的释放\"></a>TCP连接的释放</h4>数据传输结束后，通信的双方都可释放连接。<br><img src=\"/image/tcp/tcp6.png\" alt=\"四次挥手\"><br>　　现在A和B都处于ESTABLISHED状态，A的应用进程先向其TCP发出连接释放报文段，并停止再发送数据，主动关闭TCP连接，A把连接释放报文段首部的宗旨控制位FIN置1，其序号seq=u，它等于前面已传送过的数据的最后一个直接的序号加1.这时A进入FIN-WAIT-1(终止等待1)状态，等待B的确认。TCP规定，FIN报文段即使不携带数据，它也消耗掉一个序号。<br>　　B收到连接释放报文段后即发出确认，确认号是ack=u+1，而这个报文段自己的序号是v，等于B前面已传送过的数据的最后一个字节的序号加1。然后B就进入CLOSE-WAIT(关闭等待)状态。TCP服务器进程这时应通知高层应用进程，因而从A到B这个方向的连接就释放了，这时的TCP连接处于半关闭(half-close)状态，即A已经没有数据要发送了，但B若发送数据，A仍要接收，就是说，从B到A这个方向的连接并未关闭，这个状态可能会持续一些时间。<br>　　A收到来自B的确认后，就进图FIN-WAIT-2(终止等待2)状态，等待B发出的连接释放报文段。<br>　　若B已经没有要向A发送的数据，其应用进程就通知TCP释放连接。这时B发出的连接释放报文段必须使用FIN=1.现在假定B的序号为w(在半关闭状态B可能又发送了一些数据)，B还必须重复上次已发送过的确认号ack=u+1。这时B就进入LAST-ACK(最后确认)状态，等待A的确认。<br>　　A在收到B的连接释放报文段后，必须对此发出确认。在确认报文段中把ACK置1，确认号ack=w+1，而自己的序号是seq=u+1，TCP规定，前面发送的FIN报文段要消耗一个序号。然后进入到TIME-WAIT(时间等待)状态。现在TCP连接还没有释放掉。必须经过时间等待计时器(TIME-WAIT timer)设置的时间2MSL后，A才进入到CLOSED状态，时间MSL叫做最长报文段寿命。<br>　　B只要收到了A发出的确认，就进入CLOSED状态。同样，B在撤销相应的出书控制块TCB后，就结束了这次的TCP连接。B结束TCP连接的时间要比A早一些。<h4 id=\"TCP有限状态机\"><a href=\"#TCP有限状态机\" class=\"headerlink\" title=\"TCP有限状态机\"></a>TCP有限状态机</h4><img src=\"/image/tcp/tcp7.png\" alt=\"有限状态机\"><br>粗实线箭头表示对客户进程的正常变迁、粗虚线箭头表示对服务器进程的正常变迁、另一种细线箭头表示异常变迁。</li>\n</ol>\n<hr>\n<p>以上文字和图片均来自于《计算机网络第6版》谢希仁著</p>\n<hr>\n<p>以上</p>"},{"title":"Toast显示过程","date":"2018-08-03T03:35:14.000Z","keywords":"Toast显示过程","_content":"抄书抄的有点烦，自己也学着分析一下源码，挑了个在我看来比较简单的Toast显示过程来玩一玩。\n``` java\nToast.makeText(context, text, duration).show();\n```\n先了解一下makeText过程，该过程最终都会调用下面的方法：\n``` java\n/**\n     * Make a standard toast to display using the specified looper.\n     * If looper is null, Looper.myLooper() is used.\n     * @hide\n     */\n    public static Toast makeText(@NonNull Context context, @Nullable Looper looper,\n            @NonNull CharSequence text, @Duration int duration) {\n        Toast result = new Toast(context, looper);\n\n        LayoutInflater inflate = (LayoutInflater)\n                context.getSystemService(Context.LAYOUT_INFLATER_SERVICE);\n        View v = inflate.inflate(com.android.internal.R.layout.transient_notification, null);\n        TextView tv = (TextView)v.findViewById(com.android.internal.R.id.message);\n        tv.setText(text);\n\n        result.mNextView = v;\n        result.mDuration = duration;\n\n        return result;\n    }\n```\n创建一个新的Toast对象，在Toast的构造方法中有一个TN类型的mTN对象：\n``` java\nmTN = new TN(context.getPackageName(), looper);\n```\n`TN`是`ITransientNotification.Stub`的子类，注意一下这个对象，这对后面的过程很重要。\n<!--more-->\n得到Toast对象后接着调用`show`方法：\n``` java\n/**\n     * Show the view for the specified duration.\n     */\n    public void show() {\n        if (mNextView == null) {\n            throw new RuntimeException(\"setView must have been called\");\n        }\n\n        INotificationManager service = getService();\n        String pkg = mContext.getOpPackageName();\n        TN tn = mTN;\n        tn.mNextView = mNextView;\n\n        try {\n            service.enqueueToast(pkg, tn, mDuration);\n        } catch (RemoteException e) {\n            // Empty\n        }\n    }\n```\n重点在`service`上，它是`INotificationManager`的实例对象，是个用于Binder机制IPC通信的接口，实际上getService返回了一个以\"notification\"为标记的远程服务对象的代理。这个远程服务对象就是NotificationManagerService，以下简称NMS。NMS中的enqueueToast方法：\n``` java\n@Override\npublic void enqueueToast(String pkg, ITransientNotification callback, int duration)\n{\n    ......\n    synchronized (mToastQueue) {\n        int callingPid = Binder.getCallingPid();\n        long callingId = Binder.clearCallingIdentity();\n        try {\n            ToastRecord record;\n            int index;\n            // All packages aside from the android package can enqueue one toast at a time\n            if (!isSystemToast) {\n                index = indexOfToastPackageLocked(pkg);\n            } else {\n                index = indexOfToastLocked(pkg, callback);\n            }\n\n            // If the package already has a toast, we update its toast\n            // in the queue, we don't move it to the end of the queue.\n            if (index >= 0) {\n                record = mToastQueue.get(index);\n                record.update(duration);\n                record.update(callback);\n            } else {\n                Binder token = new Binder();\n                mWindowManagerInternal.addWindowToken(token, TYPE_TOAST, DEFAULT_DISPLAY);\n                record = new ToastRecord(callingPid, pkg, callback, duration, token);\n                mToastQueue.add(record);\n                index = mToastQueue.size() - 1;\n            }\n            keepProcessAliveIfNeededLocked(callingPid);\n            // If it's at index 0, it's the current toast.  It doesn't matter if it's\n            // new or just been updated.  Call back and tell it to show itself.\n            // If the callback fails, this will remove it from the list, so don't\n            // assume that it's valid after this.\n            if (index == 0) {\n                showNextToastLocked();\n            }\n        } finally {\n            Binder.restoreCallingIdentity(callingId);\n        }\n    }\n}\n```\n方法中的第二个参数callBack就是上面的TN对象，关键在于下面的index的判断：\nmToastQueue是个list，如果是非系统tost，并且该taost存在于list中(根据pkg判断)，就取出该ToastRecord并且更新，如果不存在，则新建一个ToastRecord存入list中。\n如果ToastRecord是在list的第一个位置，接着调用`showNextToastLocaked`方法\n``` java\n@GuardedBy(\"mToastQueue\")\nvoid showNextToastLocked() {\n    ToastRecord record = mToastQueue.get(0);\n    while (record != null) {\n        if (DBG) Slog.d(TAG, \"Show pkg=\" + record.pkg + \" callback=\" + record.callback);\n        try {\n            record.callback.show(record.token);\n            scheduleTimeoutLocked(record);\n            return;\n        } catch (RemoteException e) {\n            Slog.w(TAG, \"Object died trying to show notification \" + record.callback\n                    + \" in package \" + record.pkg);\n            // remove it from the list and let the process die\n            int index = mToastQueue.indexOf(record);\n            if (index >= 0) {\n                mToastQueue.remove(index);\n            }\n            keepProcessAliveIfNeededLocked(record.pid);\n            if (mToastQueue.size() > 0) {\n                record = mToastQueue.get(0);\n            } else {\n                record = null;\n            }\n        }\n    }\n}\n```\n关键的两行代码\n``` java\n  record.callback.show(record.token);\n  scheduleTimeoutLocked(record);\n```\n第一行负责显示，第二行负责超时关闭并显示队列中的下一个Toast。\n在第一行中，callBack就是我们上面提到的TN对象的实例mTN：\n``` java\n/**\n* schedule handleShow into the right thread\n*/\n@Override\npublic void show(IBinder windowToken) {\n    if (localLOGV) Log.v(TAG, \"SHOW: \" + this);\n    mHandler.obtainMessage(SHOW, windowToken).sendToTarget();\n}\n```\n在`mHandler`中调用了`handleShow`方法：\n``` java \npublic void handleShow(IBinder windowToken) {\n            if (localLOGV) Log.v(TAG, \"HANDLE SHOW: \" + this + \" mView=\" + mView\n                    + \" mNextView=\" + mNextView);\n            // If a cancel/hide is pending - no need to show - at this point\n            // the window token is already invalid and no need to do any work.\n            if (mHandler.hasMessages(CANCEL) || mHandler.hasMessages(HIDE)) {\n                return;\n            }\n            if (mView != mNextView) {\n                // remove the old view if necessary\n                handleHide();\n                mView = mNextView;\n                Context context = mView.getContext().getApplicationContext();\n                String packageName = mView.getContext().getOpPackageName();\n                if (context == null) {\n                    context = mView.getContext();\n                }\n                mWM = (WindowManager)context.getSystemService(Context.WINDOW_SERVICE);\n                // We can resolve the Gravity here by using the Locale for getting\n                // the layout direction\n                final Configuration config = mView.getContext().getResources().getConfiguration();\n                final int gravity = Gravity.getAbsoluteGravity(mGravity, config.getLayoutDirection());\n                mParams.gravity = gravity;\n                if ((gravity & Gravity.HORIZONTAL_GRAVITY_MASK) == Gravity.FILL_HORIZONTAL) {\n                    mParams.horizontalWeight = 1.0f;\n                }\n                if ((gravity & Gravity.VERTICAL_GRAVITY_MASK) == Gravity.FILL_VERTICAL) {\n                    mParams.verticalWeight = 1.0f;\n                }\n                mParams.x = mX;\n                mParams.y = mY;\n                mParams.verticalMargin = mVerticalMargin;\n                mParams.horizontalMargin = mHorizontalMargin;\n                mParams.packageName = packageName;\n                mParams.hideTimeoutMilliseconds = mDuration ==\n                    Toast.LENGTH_LONG ? LONG_DURATION_TIMEOUT : SHORT_DURATION_TIMEOUT;\n                mParams.token = windowToken;\n                if (mView.getParent() != null) {\n                    if (localLOGV) Log.v(TAG, \"REMOVE! \" + mView + \" in \" + this);\n                    mWM.removeView(mView);\n                }\n                if (localLOGV) Log.v(TAG, \"ADD! \" + mView + \" in \" + this);\n                // Since the notification manager service cancels the token right\n                // after it notifies us to cancel the toast there is an inherent\n                // race and we may attempt to add a window after the token has been\n                // invalidated. Let us hedge against that.\n                try {\n                    mWM.addView(mView, mParams);\n                    trySendAccessibilityEvent();\n                } catch (WindowManager.BadTokenException e) {\n                    /* ignore */\n                }\n            }\n        }\n```\n上面的一坨是获取到`WindowManager`然后通过`mWM.addView`将Toast显示到窗口上。\n至于`WindowManager`如何添加view的，可以看这个：http://blog.huangyuanlove.com/2017/03/21/Window和CWindowManager/\n接下来看一下怎么取消Toast弹窗，上面提到了调用了`scheduleTimeoutLocked`方法。\n``` java\n@GuardedBy(\"mToastQueue\")\nprivate void scheduleTimeoutLocked(ToastRecord r){\n    mHandler.removeCallbacksAndMessages(r);\n    Message m = Message.obtain(mHandler, MESSAGE_TIMEOUT, r);\n    long delay = r.duration == Toast.LENGTH_LONG ? LONG_DELAY : SHORT_DELAY;\n    mHandler.sendMessageDelayed(m, delay);\n}\n```\n调用mHandler发送了一个延时消息去调用`handleTimeout`方法，延迟时间就是根据duration来判断的。这里的`mHandler`是`WorkerHandler`继承自`Handler`\n``` java\nprivate void handleTimeout(ToastRecord record)\n    {\n        if (DBG) Slog.d(TAG, \"Timeout pkg=\" + record.pkg + \" callback=\" + record.callback);\n        synchronized (mToastQueue) {\n            int index = indexOfToastLocked(record.pkg, record.callback);\n            if (index >= 0) {\n                cancelToastLocked(index);\n            }\n        }\n    }\n```\n接着调用了`cancelToastLocked`方法\n``` java\n@GuardedBy(\"mToastQueue\")\n    void cancelToastLocked(int index) {\n        ToastRecord record = mToastQueue.get(index);\n        try {\n            record.callback.hide();\n        } catch (RemoteException e) {\n            Slog.w(TAG, \"Object died trying to hide notification \" + record.callback\n                    + \" in package \" + record.pkg);\n            // don't worry about this, we're about to remove it from\n            // the list anyway\n        }\n\n        ToastRecord lastToast = mToastQueue.remove(index);\n        mWindowManagerInternal.removeWindowToken(lastToast.token, true, DEFAULT_DISPLAY);\n\n        keepProcessAliveIfNeededLocked(record.pid);\n        if (mToastQueue.size() > 0) {\n            // Show the next one. If the callback fails, this will remove\n            // it from the list, so don't assume that the list hasn't changed\n            // after this point.\n            showNextToastLocked();\n        }\n    }\n```\n在该方法中调用了`callback.hide()`方法移除toast的显示。\n``` java\n public void handleHide() {\n    if (localLOGV) Log.v(TAG, \"HANDLE HIDE: \" + this + \" mView=\" + mView);\n    if (mView != null) {\n        // note: checking parent() just to make sure the view has\n        // been added...  i have seen cases where we get here when\n        // the view isn't yet added, so let's try not to crash.\n        if (mView.getParent() != null) {\n            if (localLOGV) Log.v(TAG, \"REMOVE! \" + mView + \" in \" + this);\n            mWM.removeViewImmediate(mView);\n        }\n\n        mView = null;\n    }\n}\n```\n如果这时候mToastQueue中还有ToastRecord，则调用`showNextToastLocked`方法显示下一个。\n\n----\n以上","source":"_posts/Toast显示过程.md","raw":"---\ntitle: Toast显示过程\ndate: 2018-08-03 11:35:14\ntags: [Android]\nkeywords: Toast显示过程\n---\n抄书抄的有点烦，自己也学着分析一下源码，挑了个在我看来比较简单的Toast显示过程来玩一玩。\n``` java\nToast.makeText(context, text, duration).show();\n```\n先了解一下makeText过程，该过程最终都会调用下面的方法：\n``` java\n/**\n     * Make a standard toast to display using the specified looper.\n     * If looper is null, Looper.myLooper() is used.\n     * @hide\n     */\n    public static Toast makeText(@NonNull Context context, @Nullable Looper looper,\n            @NonNull CharSequence text, @Duration int duration) {\n        Toast result = new Toast(context, looper);\n\n        LayoutInflater inflate = (LayoutInflater)\n                context.getSystemService(Context.LAYOUT_INFLATER_SERVICE);\n        View v = inflate.inflate(com.android.internal.R.layout.transient_notification, null);\n        TextView tv = (TextView)v.findViewById(com.android.internal.R.id.message);\n        tv.setText(text);\n\n        result.mNextView = v;\n        result.mDuration = duration;\n\n        return result;\n    }\n```\n创建一个新的Toast对象，在Toast的构造方法中有一个TN类型的mTN对象：\n``` java\nmTN = new TN(context.getPackageName(), looper);\n```\n`TN`是`ITransientNotification.Stub`的子类，注意一下这个对象，这对后面的过程很重要。\n<!--more-->\n得到Toast对象后接着调用`show`方法：\n``` java\n/**\n     * Show the view for the specified duration.\n     */\n    public void show() {\n        if (mNextView == null) {\n            throw new RuntimeException(\"setView must have been called\");\n        }\n\n        INotificationManager service = getService();\n        String pkg = mContext.getOpPackageName();\n        TN tn = mTN;\n        tn.mNextView = mNextView;\n\n        try {\n            service.enqueueToast(pkg, tn, mDuration);\n        } catch (RemoteException e) {\n            // Empty\n        }\n    }\n```\n重点在`service`上，它是`INotificationManager`的实例对象，是个用于Binder机制IPC通信的接口，实际上getService返回了一个以\"notification\"为标记的远程服务对象的代理。这个远程服务对象就是NotificationManagerService，以下简称NMS。NMS中的enqueueToast方法：\n``` java\n@Override\npublic void enqueueToast(String pkg, ITransientNotification callback, int duration)\n{\n    ......\n    synchronized (mToastQueue) {\n        int callingPid = Binder.getCallingPid();\n        long callingId = Binder.clearCallingIdentity();\n        try {\n            ToastRecord record;\n            int index;\n            // All packages aside from the android package can enqueue one toast at a time\n            if (!isSystemToast) {\n                index = indexOfToastPackageLocked(pkg);\n            } else {\n                index = indexOfToastLocked(pkg, callback);\n            }\n\n            // If the package already has a toast, we update its toast\n            // in the queue, we don't move it to the end of the queue.\n            if (index >= 0) {\n                record = mToastQueue.get(index);\n                record.update(duration);\n                record.update(callback);\n            } else {\n                Binder token = new Binder();\n                mWindowManagerInternal.addWindowToken(token, TYPE_TOAST, DEFAULT_DISPLAY);\n                record = new ToastRecord(callingPid, pkg, callback, duration, token);\n                mToastQueue.add(record);\n                index = mToastQueue.size() - 1;\n            }\n            keepProcessAliveIfNeededLocked(callingPid);\n            // If it's at index 0, it's the current toast.  It doesn't matter if it's\n            // new or just been updated.  Call back and tell it to show itself.\n            // If the callback fails, this will remove it from the list, so don't\n            // assume that it's valid after this.\n            if (index == 0) {\n                showNextToastLocked();\n            }\n        } finally {\n            Binder.restoreCallingIdentity(callingId);\n        }\n    }\n}\n```\n方法中的第二个参数callBack就是上面的TN对象，关键在于下面的index的判断：\nmToastQueue是个list，如果是非系统tost，并且该taost存在于list中(根据pkg判断)，就取出该ToastRecord并且更新，如果不存在，则新建一个ToastRecord存入list中。\n如果ToastRecord是在list的第一个位置，接着调用`showNextToastLocaked`方法\n``` java\n@GuardedBy(\"mToastQueue\")\nvoid showNextToastLocked() {\n    ToastRecord record = mToastQueue.get(0);\n    while (record != null) {\n        if (DBG) Slog.d(TAG, \"Show pkg=\" + record.pkg + \" callback=\" + record.callback);\n        try {\n            record.callback.show(record.token);\n            scheduleTimeoutLocked(record);\n            return;\n        } catch (RemoteException e) {\n            Slog.w(TAG, \"Object died trying to show notification \" + record.callback\n                    + \" in package \" + record.pkg);\n            // remove it from the list and let the process die\n            int index = mToastQueue.indexOf(record);\n            if (index >= 0) {\n                mToastQueue.remove(index);\n            }\n            keepProcessAliveIfNeededLocked(record.pid);\n            if (mToastQueue.size() > 0) {\n                record = mToastQueue.get(0);\n            } else {\n                record = null;\n            }\n        }\n    }\n}\n```\n关键的两行代码\n``` java\n  record.callback.show(record.token);\n  scheduleTimeoutLocked(record);\n```\n第一行负责显示，第二行负责超时关闭并显示队列中的下一个Toast。\n在第一行中，callBack就是我们上面提到的TN对象的实例mTN：\n``` java\n/**\n* schedule handleShow into the right thread\n*/\n@Override\npublic void show(IBinder windowToken) {\n    if (localLOGV) Log.v(TAG, \"SHOW: \" + this);\n    mHandler.obtainMessage(SHOW, windowToken).sendToTarget();\n}\n```\n在`mHandler`中调用了`handleShow`方法：\n``` java \npublic void handleShow(IBinder windowToken) {\n            if (localLOGV) Log.v(TAG, \"HANDLE SHOW: \" + this + \" mView=\" + mView\n                    + \" mNextView=\" + mNextView);\n            // If a cancel/hide is pending - no need to show - at this point\n            // the window token is already invalid and no need to do any work.\n            if (mHandler.hasMessages(CANCEL) || mHandler.hasMessages(HIDE)) {\n                return;\n            }\n            if (mView != mNextView) {\n                // remove the old view if necessary\n                handleHide();\n                mView = mNextView;\n                Context context = mView.getContext().getApplicationContext();\n                String packageName = mView.getContext().getOpPackageName();\n                if (context == null) {\n                    context = mView.getContext();\n                }\n                mWM = (WindowManager)context.getSystemService(Context.WINDOW_SERVICE);\n                // We can resolve the Gravity here by using the Locale for getting\n                // the layout direction\n                final Configuration config = mView.getContext().getResources().getConfiguration();\n                final int gravity = Gravity.getAbsoluteGravity(mGravity, config.getLayoutDirection());\n                mParams.gravity = gravity;\n                if ((gravity & Gravity.HORIZONTAL_GRAVITY_MASK) == Gravity.FILL_HORIZONTAL) {\n                    mParams.horizontalWeight = 1.0f;\n                }\n                if ((gravity & Gravity.VERTICAL_GRAVITY_MASK) == Gravity.FILL_VERTICAL) {\n                    mParams.verticalWeight = 1.0f;\n                }\n                mParams.x = mX;\n                mParams.y = mY;\n                mParams.verticalMargin = mVerticalMargin;\n                mParams.horizontalMargin = mHorizontalMargin;\n                mParams.packageName = packageName;\n                mParams.hideTimeoutMilliseconds = mDuration ==\n                    Toast.LENGTH_LONG ? LONG_DURATION_TIMEOUT : SHORT_DURATION_TIMEOUT;\n                mParams.token = windowToken;\n                if (mView.getParent() != null) {\n                    if (localLOGV) Log.v(TAG, \"REMOVE! \" + mView + \" in \" + this);\n                    mWM.removeView(mView);\n                }\n                if (localLOGV) Log.v(TAG, \"ADD! \" + mView + \" in \" + this);\n                // Since the notification manager service cancels the token right\n                // after it notifies us to cancel the toast there is an inherent\n                // race and we may attempt to add a window after the token has been\n                // invalidated. Let us hedge against that.\n                try {\n                    mWM.addView(mView, mParams);\n                    trySendAccessibilityEvent();\n                } catch (WindowManager.BadTokenException e) {\n                    /* ignore */\n                }\n            }\n        }\n```\n上面的一坨是获取到`WindowManager`然后通过`mWM.addView`将Toast显示到窗口上。\n至于`WindowManager`如何添加view的，可以看这个：http://blog.huangyuanlove.com/2017/03/21/Window和CWindowManager/\n接下来看一下怎么取消Toast弹窗，上面提到了调用了`scheduleTimeoutLocked`方法。\n``` java\n@GuardedBy(\"mToastQueue\")\nprivate void scheduleTimeoutLocked(ToastRecord r){\n    mHandler.removeCallbacksAndMessages(r);\n    Message m = Message.obtain(mHandler, MESSAGE_TIMEOUT, r);\n    long delay = r.duration == Toast.LENGTH_LONG ? LONG_DELAY : SHORT_DELAY;\n    mHandler.sendMessageDelayed(m, delay);\n}\n```\n调用mHandler发送了一个延时消息去调用`handleTimeout`方法，延迟时间就是根据duration来判断的。这里的`mHandler`是`WorkerHandler`继承自`Handler`\n``` java\nprivate void handleTimeout(ToastRecord record)\n    {\n        if (DBG) Slog.d(TAG, \"Timeout pkg=\" + record.pkg + \" callback=\" + record.callback);\n        synchronized (mToastQueue) {\n            int index = indexOfToastLocked(record.pkg, record.callback);\n            if (index >= 0) {\n                cancelToastLocked(index);\n            }\n        }\n    }\n```\n接着调用了`cancelToastLocked`方法\n``` java\n@GuardedBy(\"mToastQueue\")\n    void cancelToastLocked(int index) {\n        ToastRecord record = mToastQueue.get(index);\n        try {\n            record.callback.hide();\n        } catch (RemoteException e) {\n            Slog.w(TAG, \"Object died trying to hide notification \" + record.callback\n                    + \" in package \" + record.pkg);\n            // don't worry about this, we're about to remove it from\n            // the list anyway\n        }\n\n        ToastRecord lastToast = mToastQueue.remove(index);\n        mWindowManagerInternal.removeWindowToken(lastToast.token, true, DEFAULT_DISPLAY);\n\n        keepProcessAliveIfNeededLocked(record.pid);\n        if (mToastQueue.size() > 0) {\n            // Show the next one. If the callback fails, this will remove\n            // it from the list, so don't assume that the list hasn't changed\n            // after this point.\n            showNextToastLocked();\n        }\n    }\n```\n在该方法中调用了`callback.hide()`方法移除toast的显示。\n``` java\n public void handleHide() {\n    if (localLOGV) Log.v(TAG, \"HANDLE HIDE: \" + this + \" mView=\" + mView);\n    if (mView != null) {\n        // note: checking parent() just to make sure the view has\n        // been added...  i have seen cases where we get here when\n        // the view isn't yet added, so let's try not to crash.\n        if (mView.getParent() != null) {\n            if (localLOGV) Log.v(TAG, \"REMOVE! \" + mView + \" in \" + this);\n            mWM.removeViewImmediate(mView);\n        }\n\n        mView = null;\n    }\n}\n```\n如果这时候mToastQueue中还有ToastRecord，则调用`showNextToastLocked`方法显示下一个。\n\n----\n以上","slug":"Toast显示过程","published":1,"updated":"2018-08-04T05:16:23.400Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjl3vbtrd0024isdgzjcavaom","content":"<p>抄书抄的有点烦，自己也学着分析一下源码，挑了个在我看来比较简单的Toast显示过程来玩一玩。<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">Toast.makeText(context, text, duration).show();</div></pre></td></tr></table></figure></p>\n<p>先了解一下makeText过程，该过程最终都会调用下面的方法：<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">/**</span></div><div class=\"line\">     * Make a standard toast to display using the specified looper.</div><div class=\"line\">     * If looper is null, Looper.myLooper() is used.</div><div class=\"line\">     * <span class=\"doctag\">@hide</span></div><div class=\"line\">     */</div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> Toast <span class=\"title\">makeText</span><span class=\"params\">(@NonNull Context context, @Nullable Looper looper,</span></span></div><div class=\"line\">            @NonNull CharSequence text, @Duration <span class=\"keyword\">int</span> duration) &#123;</div><div class=\"line\">        Toast result = <span class=\"keyword\">new</span> Toast(context, looper);</div><div class=\"line\"></div><div class=\"line\">        LayoutInflater inflate = (LayoutInflater)</div><div class=\"line\">                context.getSystemService(Context.LAYOUT_INFLATER_SERVICE);</div><div class=\"line\">        View v = inflate.inflate(com.android.internal.R.layout.transient_notification, <span class=\"keyword\">null</span>);</div><div class=\"line\">        TextView tv = (TextView)v.findViewById(com.android.internal.R.id.message);</div><div class=\"line\">        tv.setText(text);</div><div class=\"line\"></div><div class=\"line\">        result.mNextView = v;</div><div class=\"line\">        result.mDuration = duration;</div><div class=\"line\"></div><div class=\"line\">        <span class=\"keyword\">return</span> result;</div><div class=\"line\">    &#125;</div></pre></td></tr></table></figure></p>\n<p>创建一个新的Toast对象，在Toast的构造方法中有一个TN类型的mTN对象：<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">mTN = <span class=\"keyword\">new</span> TN(context.getPackageName(), looper);</div></pre></td></tr></table></figure></p>\n<p><code>TN</code>是<code>ITransientNotification.Stub</code>的子类，注意一下这个对象，这对后面的过程很重要。<br><a id=\"more\"></a><br>得到Toast对象后接着调用<code>show</code>方法：<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">/**</span></div><div class=\"line\">     * Show the view for the specified duration.</div><div class=\"line\">     */</div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">show</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">if</span> (mNextView == <span class=\"keyword\">null</span>) &#123;</div><div class=\"line\">            <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> RuntimeException(<span class=\"string\">\"setView must have been called\"</span>);</div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\">        INotificationManager service = getService();</div><div class=\"line\">        String pkg = mContext.getOpPackageName();</div><div class=\"line\">        TN tn = mTN;</div><div class=\"line\">        tn.mNextView = mNextView;</div><div class=\"line\"></div><div class=\"line\">        <span class=\"keyword\">try</span> &#123;</div><div class=\"line\">            service.enqueueToast(pkg, tn, mDuration);</div><div class=\"line\">        &#125; <span class=\"keyword\">catch</span> (RemoteException e) &#123;</div><div class=\"line\">            <span class=\"comment\">// Empty</span></div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div></pre></td></tr></table></figure></p>\n<p>重点在<code>service</code>上，它是<code>INotificationManager</code>的实例对象，是个用于Binder机制IPC通信的接口，实际上getService返回了一个以”notification”为标记的远程服务对象的代理。这个远程服务对象就是NotificationManagerService，以下简称NMS。NMS中的enqueueToast方法：<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">@Override</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">enqueueToast</span><span class=\"params\">(String pkg, ITransientNotification callback, <span class=\"keyword\">int</span> duration)</span></span></div><div class=\"line\">&#123;</div><div class=\"line\">    ......</div><div class=\"line\">    <span class=\"keyword\">synchronized</span> (mToastQueue) &#123;</div><div class=\"line\">        <span class=\"keyword\">int</span> callingPid = Binder.getCallingPid();</div><div class=\"line\">        <span class=\"keyword\">long</span> callingId = Binder.clearCallingIdentity();</div><div class=\"line\">        <span class=\"keyword\">try</span> &#123;</div><div class=\"line\">            ToastRecord record;</div><div class=\"line\">            <span class=\"keyword\">int</span> index;</div><div class=\"line\">            <span class=\"comment\">// All packages aside from the android package can enqueue one toast at a time</span></div><div class=\"line\">            <span class=\"keyword\">if</span> (!isSystemToast) &#123;</div><div class=\"line\">                index = indexOfToastPackageLocked(pkg);</div><div class=\"line\">            &#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">                index = indexOfToastLocked(pkg, callback);</div><div class=\"line\">            &#125;</div><div class=\"line\"></div><div class=\"line\">            <span class=\"comment\">// If the package already has a toast, we update its toast</span></div><div class=\"line\">            <span class=\"comment\">// in the queue, we don't move it to the end of the queue.</span></div><div class=\"line\">            <span class=\"keyword\">if</span> (index &gt;= <span class=\"number\">0</span>) &#123;</div><div class=\"line\">                record = mToastQueue.get(index);</div><div class=\"line\">                record.update(duration);</div><div class=\"line\">                record.update(callback);</div><div class=\"line\">            &#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">                Binder token = <span class=\"keyword\">new</span> Binder();</div><div class=\"line\">                mWindowManagerInternal.addWindowToken(token, TYPE_TOAST, DEFAULT_DISPLAY);</div><div class=\"line\">                record = <span class=\"keyword\">new</span> ToastRecord(callingPid, pkg, callback, duration, token);</div><div class=\"line\">                mToastQueue.add(record);</div><div class=\"line\">                index = mToastQueue.size() - <span class=\"number\">1</span>;</div><div class=\"line\">            &#125;</div><div class=\"line\">            keepProcessAliveIfNeededLocked(callingPid);</div><div class=\"line\">            <span class=\"comment\">// If it's at index 0, it's the current toast.  It doesn't matter if it's</span></div><div class=\"line\">            <span class=\"comment\">// new or just been updated.  Call back and tell it to show itself.</span></div><div class=\"line\">            <span class=\"comment\">// If the callback fails, this will remove it from the list, so don't</span></div><div class=\"line\">            <span class=\"comment\">// assume that it's valid after this.</span></div><div class=\"line\">            <span class=\"keyword\">if</span> (index == <span class=\"number\">0</span>) &#123;</div><div class=\"line\">                showNextToastLocked();</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125; <span class=\"keyword\">finally</span> &#123;</div><div class=\"line\">            Binder.restoreCallingIdentity(callingId);</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>方法中的第二个参数callBack就是上面的TN对象，关键在于下面的index的判断：<br>mToastQueue是个list，如果是非系统tost，并且该taost存在于list中(根据pkg判断)，就取出该ToastRecord并且更新，如果不存在，则新建一个ToastRecord存入list中。<br>如果ToastRecord是在list的第一个位置，接着调用<code>showNextToastLocaked</code>方法<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">@GuardedBy</span>(<span class=\"string\">\"mToastQueue\"</span>)</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">showNextToastLocked</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">    ToastRecord record = mToastQueue.get(<span class=\"number\">0</span>);</div><div class=\"line\">    <span class=\"keyword\">while</span> (record != <span class=\"keyword\">null</span>) &#123;</div><div class=\"line\">        <span class=\"keyword\">if</span> (DBG) Slog.d(TAG, <span class=\"string\">\"Show pkg=\"</span> + record.pkg + <span class=\"string\">\" callback=\"</span> + record.callback);</div><div class=\"line\">        <span class=\"keyword\">try</span> &#123;</div><div class=\"line\">            record.callback.show(record.token);</div><div class=\"line\">            scheduleTimeoutLocked(record);</div><div class=\"line\">            <span class=\"keyword\">return</span>;</div><div class=\"line\">        &#125; <span class=\"keyword\">catch</span> (RemoteException e) &#123;</div><div class=\"line\">            Slog.w(TAG, <span class=\"string\">\"Object died trying to show notification \"</span> + record.callback</div><div class=\"line\">                    + <span class=\"string\">\" in package \"</span> + record.pkg);</div><div class=\"line\">            <span class=\"comment\">// remove it from the list and let the process die</span></div><div class=\"line\">            <span class=\"keyword\">int</span> index = mToastQueue.indexOf(record);</div><div class=\"line\">            <span class=\"keyword\">if</span> (index &gt;= <span class=\"number\">0</span>) &#123;</div><div class=\"line\">                mToastQueue.remove(index);</div><div class=\"line\">            &#125;</div><div class=\"line\">            keepProcessAliveIfNeededLocked(record.pid);</div><div class=\"line\">            <span class=\"keyword\">if</span> (mToastQueue.size() &gt; <span class=\"number\">0</span>) &#123;</div><div class=\"line\">                record = mToastQueue.get(<span class=\"number\">0</span>);</div><div class=\"line\">            &#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">                record = <span class=\"keyword\">null</span>;</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>关键的两行代码<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">record.callback.show(record.token);</div><div class=\"line\">scheduleTimeoutLocked(record);</div></pre></td></tr></table></figure></p>\n<p>第一行负责显示，第二行负责超时关闭并显示队列中的下一个Toast。<br>在第一行中，callBack就是我们上面提到的TN对象的实例mTN：<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">/**</span></div><div class=\"line\">* schedule handleShow into the right thread</div><div class=\"line\">*/</div><div class=\"line\"><span class=\"meta\">@Override</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">show</span><span class=\"params\">(IBinder windowToken)</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">if</span> (localLOGV) Log.v(TAG, <span class=\"string\">\"SHOW: \"</span> + <span class=\"keyword\">this</span>);</div><div class=\"line\">    mHandler.obtainMessage(SHOW, windowToken).sendToTarget();</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>在<code>mHandler</code>中调用了<code>handleShow</code>方法：<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">handleShow</span><span class=\"params\">(IBinder windowToken)</span> </span>&#123;</div><div class=\"line\">            <span class=\"keyword\">if</span> (localLOGV) Log.v(TAG, <span class=\"string\">\"HANDLE SHOW: \"</span> + <span class=\"keyword\">this</span> + <span class=\"string\">\" mView=\"</span> + mView</div><div class=\"line\">                    + <span class=\"string\">\" mNextView=\"</span> + mNextView);</div><div class=\"line\">            <span class=\"comment\">// If a cancel/hide is pending - no need to show - at this point</span></div><div class=\"line\">            <span class=\"comment\">// the window token is already invalid and no need to do any work.</span></div><div class=\"line\">            <span class=\"keyword\">if</span> (mHandler.hasMessages(CANCEL) || mHandler.hasMessages(HIDE)) &#123;</div><div class=\"line\">                <span class=\"keyword\">return</span>;</div><div class=\"line\">            &#125;</div><div class=\"line\">            <span class=\"keyword\">if</span> (mView != mNextView) &#123;</div><div class=\"line\">                <span class=\"comment\">// remove the old view if necessary</span></div><div class=\"line\">                handleHide();</div><div class=\"line\">                mView = mNextView;</div><div class=\"line\">                Context context = mView.getContext().getApplicationContext();</div><div class=\"line\">                String packageName = mView.getContext().getOpPackageName();</div><div class=\"line\">                <span class=\"keyword\">if</span> (context == <span class=\"keyword\">null</span>) &#123;</div><div class=\"line\">                    context = mView.getContext();</div><div class=\"line\">                &#125;</div><div class=\"line\">                mWM = (WindowManager)context.getSystemService(Context.WINDOW_SERVICE);</div><div class=\"line\">                <span class=\"comment\">// We can resolve the Gravity here by using the Locale for getting</span></div><div class=\"line\">                <span class=\"comment\">// the layout direction</span></div><div class=\"line\">                <span class=\"keyword\">final</span> Configuration config = mView.getContext().getResources().getConfiguration();</div><div class=\"line\">                <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> gravity = Gravity.getAbsoluteGravity(mGravity, config.getLayoutDirection());</div><div class=\"line\">                mParams.gravity = gravity;</div><div class=\"line\">                <span class=\"keyword\">if</span> ((gravity &amp; Gravity.HORIZONTAL_GRAVITY_MASK) == Gravity.FILL_HORIZONTAL) &#123;</div><div class=\"line\">                    mParams.horizontalWeight = <span class=\"number\">1.0f</span>;</div><div class=\"line\">                &#125;</div><div class=\"line\">                <span class=\"keyword\">if</span> ((gravity &amp; Gravity.VERTICAL_GRAVITY_MASK) == Gravity.FILL_VERTICAL) &#123;</div><div class=\"line\">                    mParams.verticalWeight = <span class=\"number\">1.0f</span>;</div><div class=\"line\">                &#125;</div><div class=\"line\">                mParams.x = mX;</div><div class=\"line\">                mParams.y = mY;</div><div class=\"line\">                mParams.verticalMargin = mVerticalMargin;</div><div class=\"line\">                mParams.horizontalMargin = mHorizontalMargin;</div><div class=\"line\">                mParams.packageName = packageName;</div><div class=\"line\">                mParams.hideTimeoutMilliseconds = mDuration ==</div><div class=\"line\">                    Toast.LENGTH_LONG ? LONG_DURATION_TIMEOUT : SHORT_DURATION_TIMEOUT;</div><div class=\"line\">                mParams.token = windowToken;</div><div class=\"line\">                <span class=\"keyword\">if</span> (mView.getParent() != <span class=\"keyword\">null</span>) &#123;</div><div class=\"line\">                    <span class=\"keyword\">if</span> (localLOGV) Log.v(TAG, <span class=\"string\">\"REMOVE! \"</span> + mView + <span class=\"string\">\" in \"</span> + <span class=\"keyword\">this</span>);</div><div class=\"line\">                    mWM.removeView(mView);</div><div class=\"line\">                &#125;</div><div class=\"line\">                <span class=\"keyword\">if</span> (localLOGV) Log.v(TAG, <span class=\"string\">\"ADD! \"</span> + mView + <span class=\"string\">\" in \"</span> + <span class=\"keyword\">this</span>);</div><div class=\"line\">                <span class=\"comment\">// Since the notification manager service cancels the token right</span></div><div class=\"line\">                <span class=\"comment\">// after it notifies us to cancel the toast there is an inherent</span></div><div class=\"line\">                <span class=\"comment\">// race and we may attempt to add a window after the token has been</span></div><div class=\"line\">                <span class=\"comment\">// invalidated. Let us hedge against that.</span></div><div class=\"line\">                <span class=\"keyword\">try</span> &#123;</div><div class=\"line\">                    mWM.addView(mView, mParams);</div><div class=\"line\">                    trySendAccessibilityEvent();</div><div class=\"line\">                &#125; <span class=\"keyword\">catch</span> (WindowManager.BadTokenException e) &#123;</div><div class=\"line\">                    <span class=\"comment\">/* ignore */</span></div><div class=\"line\">                &#125;</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;</div></pre></td></tr></table></figure></p>\n<p>上面的一坨是获取到<code>WindowManager</code>然后通过<code>mWM.addView</code>将Toast显示到窗口上。<br>至于<code>WindowManager</code>如何添加view的，可以看这个：<a href=\"http://blog.huangyuanlove.com/2017/03/21/Window和CWindowManager/\">http://blog.huangyuanlove.com/2017/03/21/Window和CWindowManager/</a><br>接下来看一下怎么取消Toast弹窗，上面提到了调用了<code>scheduleTimeoutLocked</code>方法。<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">@GuardedBy</span>(<span class=\"string\">\"mToastQueue\"</span>)</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">scheduleTimeoutLocked</span><span class=\"params\">(ToastRecord r)</span></span>&#123;</div><div class=\"line\">    mHandler.removeCallbacksAndMessages(r);</div><div class=\"line\">    Message m = Message.obtain(mHandler, MESSAGE_TIMEOUT, r);</div><div class=\"line\">    <span class=\"keyword\">long</span> delay = r.duration == Toast.LENGTH_LONG ? LONG_DELAY : SHORT_DELAY;</div><div class=\"line\">    mHandler.sendMessageDelayed(m, delay);</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>调用mHandler发送了一个延时消息去调用<code>handleTimeout</code>方法，延迟时间就是根据duration来判断的。这里的<code>mHandler</code>是<code>WorkerHandler</code>继承自<code>Handler</code><br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">handleTimeout</span><span class=\"params\">(ToastRecord record)</span></span></div><div class=\"line\">    &#123;</div><div class=\"line\">        <span class=\"keyword\">if</span> (DBG) Slog.d(TAG, <span class=\"string\">\"Timeout pkg=\"</span> + record.pkg + <span class=\"string\">\" callback=\"</span> + record.callback);</div><div class=\"line\">        <span class=\"keyword\">synchronized</span> (mToastQueue) &#123;</div><div class=\"line\">            <span class=\"keyword\">int</span> index = indexOfToastLocked(record.pkg, record.callback);</div><div class=\"line\">            <span class=\"keyword\">if</span> (index &gt;= <span class=\"number\">0</span>) &#123;</div><div class=\"line\">                cancelToastLocked(index);</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div></pre></td></tr></table></figure></p>\n<p>接着调用了<code>cancelToastLocked</code>方法<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">@GuardedBy</span>(<span class=\"string\">\"mToastQueue\"</span>)</div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">cancelToastLocked</span><span class=\"params\">(<span class=\"keyword\">int</span> index)</span> </span>&#123;</div><div class=\"line\">        ToastRecord record = mToastQueue.get(index);</div><div class=\"line\">        <span class=\"keyword\">try</span> &#123;</div><div class=\"line\">            record.callback.hide();</div><div class=\"line\">        &#125; <span class=\"keyword\">catch</span> (RemoteException e) &#123;</div><div class=\"line\">            Slog.w(TAG, <span class=\"string\">\"Object died trying to hide notification \"</span> + record.callback</div><div class=\"line\">                    + <span class=\"string\">\" in package \"</span> + record.pkg);</div><div class=\"line\">            <span class=\"comment\">// don't worry about this, we're about to remove it from</span></div><div class=\"line\">            <span class=\"comment\">// the list anyway</span></div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\">        ToastRecord lastToast = mToastQueue.remove(index);</div><div class=\"line\">        mWindowManagerInternal.removeWindowToken(lastToast.token, <span class=\"keyword\">true</span>, DEFAULT_DISPLAY);</div><div class=\"line\"></div><div class=\"line\">        keepProcessAliveIfNeededLocked(record.pid);</div><div class=\"line\">        <span class=\"keyword\">if</span> (mToastQueue.size() &gt; <span class=\"number\">0</span>) &#123;</div><div class=\"line\">            <span class=\"comment\">// Show the next one. If the callback fails, this will remove</span></div><div class=\"line\">            <span class=\"comment\">// it from the list, so don't assume that the list hasn't changed</span></div><div class=\"line\">            <span class=\"comment\">// after this point.</span></div><div class=\"line\">            showNextToastLocked();</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div></pre></td></tr></table></figure></p>\n<p>在该方法中调用了<code>callback.hide()</code>方法移除toast的显示。<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div></pre></td><td class=\"code\"><pre><div class=\"line\"> <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">handleHide</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">if</span> (localLOGV) Log.v(TAG, <span class=\"string\">\"HANDLE HIDE: \"</span> + <span class=\"keyword\">this</span> + <span class=\"string\">\" mView=\"</span> + mView);</div><div class=\"line\">    <span class=\"keyword\">if</span> (mView != <span class=\"keyword\">null</span>) &#123;</div><div class=\"line\">        <span class=\"comment\">// note: checking parent() just to make sure the view has</span></div><div class=\"line\">        <span class=\"comment\">// been added...  i have seen cases where we get here when</span></div><div class=\"line\">        <span class=\"comment\">// the view isn't yet added, so let's try not to crash.</span></div><div class=\"line\">        <span class=\"keyword\">if</span> (mView.getParent() != <span class=\"keyword\">null</span>) &#123;</div><div class=\"line\">            <span class=\"keyword\">if</span> (localLOGV) Log.v(TAG, <span class=\"string\">\"REMOVE! \"</span> + mView + <span class=\"string\">\" in \"</span> + <span class=\"keyword\">this</span>);</div><div class=\"line\">            mWM.removeViewImmediate(mView);</div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\">        mView = <span class=\"keyword\">null</span>;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>如果这时候mToastQueue中还有ToastRecord，则调用<code>showNextToastLocked</code>方法显示下一个。</p>\n<hr>\n<p>以上</p>\n","excerpt":"<p>抄书抄的有点烦，自己也学着分析一下源码，挑了个在我看来比较简单的Toast显示过程来玩一玩。<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">Toast.makeText(context, text, duration).show();</div></pre></td></tr></table></figure></p>\n<p>先了解一下makeText过程，该过程最终都会调用下面的方法：<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">/**</div><div class=\"line\">     * Make a standard toast to display using the specified looper.</div><div class=\"line\">     * If looper is null, Looper.myLooper() is used.</div><div class=\"line\">     * <span class=\"doctag\">@hide</span></div><div class=\"line\">     */</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> Toast <span class=\"title\">makeText</span><span class=\"params\">(@NonNull Context context, @Nullable Looper looper,</div><div class=\"line\">            @NonNull CharSequence text, @Duration <span class=\"keyword\">int</span> duration)</span> </span>&#123;</div><div class=\"line\">        Toast result = <span class=\"keyword\">new</span> Toast(context, looper);</div><div class=\"line\"></div><div class=\"line\">        LayoutInflater inflate = (LayoutInflater)</div><div class=\"line\">                context.getSystemService(Context.LAYOUT_INFLATER_SERVICE);</div><div class=\"line\">        View v = inflate.inflate(com.android.internal.R.layout.transient_notification, <span class=\"keyword\">null</span>);</div><div class=\"line\">        TextView tv = (TextView)v.findViewById(com.android.internal.R.id.message);</div><div class=\"line\">        tv.setText(text);</div><div class=\"line\"></div><div class=\"line\">        result.mNextView = v;</div><div class=\"line\">        result.mDuration = duration;</div><div class=\"line\"></div><div class=\"line\">        <span class=\"keyword\">return</span> result;</div><div class=\"line\">    &#125;</div></pre></td></tr></table></figure></p>\n<p>创建一个新的Toast对象，在Toast的构造方法中有一个TN类型的mTN对象：<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">mTN = <span class=\"keyword\">new</span> TN(context.getPackageName(), looper);</div></pre></td></tr></table></figure></p>\n<p><code>TN</code>是<code>ITransientNotification.Stub</code>的子类，注意一下这个对象，这对后面的过程很重要。<br>","more":"<br>得到Toast对象后接着调用<code>show</code>方法：<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">/**</div><div class=\"line\">     * Show the view for the specified duration.</div><div class=\"line\">     */</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">show</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">if</span> (mNextView == <span class=\"keyword\">null</span>) &#123;</div><div class=\"line\">            <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> RuntimeException(<span class=\"string\">\"setView must have been called\"</span>);</div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\">        INotificationManager service = getService();</div><div class=\"line\">        String pkg = mContext.getOpPackageName();</div><div class=\"line\">        TN tn = mTN;</div><div class=\"line\">        tn.mNextView = mNextView;</div><div class=\"line\"></div><div class=\"line\">        <span class=\"keyword\">try</span> &#123;</div><div class=\"line\">            service.enqueueToast(pkg, tn, mDuration);</div><div class=\"line\">        &#125; <span class=\"keyword\">catch</span> (RemoteException e) &#123;</div><div class=\"line\">            <span class=\"comment\">// Empty</span></div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div></pre></td></tr></table></figure></p>\n<p>重点在<code>service</code>上，它是<code>INotificationManager</code>的实例对象，是个用于Binder机制IPC通信的接口，实际上getService返回了一个以”notification”为标记的远程服务对象的代理。这个远程服务对象就是NotificationManagerService，以下简称NMS。NMS中的enqueueToast方法：<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">@Override</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">enqueueToast</span><span class=\"params\">(String pkg, ITransientNotification callback, <span class=\"keyword\">int</span> duration)</span></div><div class=\"line\"></span>&#123;</div><div class=\"line\">    ......</div><div class=\"line\">    <span class=\"keyword\">synchronized</span> (mToastQueue) &#123;</div><div class=\"line\">        <span class=\"keyword\">int</span> callingPid = Binder.getCallingPid();</div><div class=\"line\">        <span class=\"keyword\">long</span> callingId = Binder.clearCallingIdentity();</div><div class=\"line\">        <span class=\"keyword\">try</span> &#123;</div><div class=\"line\">            ToastRecord record;</div><div class=\"line\">            <span class=\"keyword\">int</span> index;</div><div class=\"line\">            <span class=\"comment\">// All packages aside from the android package can enqueue one toast at a time</span></div><div class=\"line\">            <span class=\"keyword\">if</span> (!isSystemToast) &#123;</div><div class=\"line\">                index = indexOfToastPackageLocked(pkg);</div><div class=\"line\">            &#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">                index = indexOfToastLocked(pkg, callback);</div><div class=\"line\">            &#125;</div><div class=\"line\"></div><div class=\"line\">            <span class=\"comment\">// If the package already has a toast, we update its toast</span></div><div class=\"line\">            <span class=\"comment\">// in the queue, we don't move it to the end of the queue.</span></div><div class=\"line\">            <span class=\"keyword\">if</span> (index &gt;= <span class=\"number\">0</span>) &#123;</div><div class=\"line\">                record = mToastQueue.get(index);</div><div class=\"line\">                record.update(duration);</div><div class=\"line\">                record.update(callback);</div><div class=\"line\">            &#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">                Binder token = <span class=\"keyword\">new</span> Binder();</div><div class=\"line\">                mWindowManagerInternal.addWindowToken(token, TYPE_TOAST, DEFAULT_DISPLAY);</div><div class=\"line\">                record = <span class=\"keyword\">new</span> ToastRecord(callingPid, pkg, callback, duration, token);</div><div class=\"line\">                mToastQueue.add(record);</div><div class=\"line\">                index = mToastQueue.size() - <span class=\"number\">1</span>;</div><div class=\"line\">            &#125;</div><div class=\"line\">            keepProcessAliveIfNeededLocked(callingPid);</div><div class=\"line\">            <span class=\"comment\">// If it's at index 0, it's the current toast.  It doesn't matter if it's</span></div><div class=\"line\">            <span class=\"comment\">// new or just been updated.  Call back and tell it to show itself.</span></div><div class=\"line\">            <span class=\"comment\">// If the callback fails, this will remove it from the list, so don't</span></div><div class=\"line\">            <span class=\"comment\">// assume that it's valid after this.</span></div><div class=\"line\">            <span class=\"keyword\">if</span> (index == <span class=\"number\">0</span>) &#123;</div><div class=\"line\">                showNextToastLocked();</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125; <span class=\"keyword\">finally</span> &#123;</div><div class=\"line\">            Binder.restoreCallingIdentity(callingId);</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>方法中的第二个参数callBack就是上面的TN对象，关键在于下面的index的判断：<br>mToastQueue是个list，如果是非系统tost，并且该taost存在于list中(根据pkg判断)，就取出该ToastRecord并且更新，如果不存在，则新建一个ToastRecord存入list中。<br>如果ToastRecord是在list的第一个位置，接着调用<code>showNextToastLocaked</code>方法<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">@GuardedBy</span>(<span class=\"string\">\"mToastQueue\"</span>)</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">showNextToastLocked</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">    ToastRecord record = mToastQueue.get(<span class=\"number\">0</span>);</div><div class=\"line\">    <span class=\"keyword\">while</span> (record != <span class=\"keyword\">null</span>) &#123;</div><div class=\"line\">        <span class=\"keyword\">if</span> (DBG) Slog.d(TAG, <span class=\"string\">\"Show pkg=\"</span> + record.pkg + <span class=\"string\">\" callback=\"</span> + record.callback);</div><div class=\"line\">        <span class=\"keyword\">try</span> &#123;</div><div class=\"line\">            record.callback.show(record.token);</div><div class=\"line\">            scheduleTimeoutLocked(record);</div><div class=\"line\">            <span class=\"keyword\">return</span>;</div><div class=\"line\">        &#125; <span class=\"keyword\">catch</span> (RemoteException e) &#123;</div><div class=\"line\">            Slog.w(TAG, <span class=\"string\">\"Object died trying to show notification \"</span> + record.callback</div><div class=\"line\">                    + <span class=\"string\">\" in package \"</span> + record.pkg);</div><div class=\"line\">            <span class=\"comment\">// remove it from the list and let the process die</span></div><div class=\"line\">            <span class=\"keyword\">int</span> index = mToastQueue.indexOf(record);</div><div class=\"line\">            <span class=\"keyword\">if</span> (index &gt;= <span class=\"number\">0</span>) &#123;</div><div class=\"line\">                mToastQueue.remove(index);</div><div class=\"line\">            &#125;</div><div class=\"line\">            keepProcessAliveIfNeededLocked(record.pid);</div><div class=\"line\">            <span class=\"keyword\">if</span> (mToastQueue.size() &gt; <span class=\"number\">0</span>) &#123;</div><div class=\"line\">                record = mToastQueue.get(<span class=\"number\">0</span>);</div><div class=\"line\">            &#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">                record = <span class=\"keyword\">null</span>;</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>关键的两行代码<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">record.callback.show(record.token);</div><div class=\"line\">scheduleTimeoutLocked(record);</div></pre></td></tr></table></figure></p>\n<p>第一行负责显示，第二行负责超时关闭并显示队列中的下一个Toast。<br>在第一行中，callBack就是我们上面提到的TN对象的实例mTN：<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">/**</div><div class=\"line\">* schedule handleShow into the right thread</div><div class=\"line\">*/</span></div><div class=\"line\"><span class=\"meta\">@Override</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">show</span><span class=\"params\">(IBinder windowToken)</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">if</span> (localLOGV) Log.v(TAG, <span class=\"string\">\"SHOW: \"</span> + <span class=\"keyword\">this</span>);</div><div class=\"line\">    mHandler.obtainMessage(SHOW, windowToken).sendToTarget();</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>在<code>mHandler</code>中调用了<code>handleShow</code>方法：<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">handleShow</span><span class=\"params\">(IBinder windowToken)</span> </span>&#123;</div><div class=\"line\">            <span class=\"keyword\">if</span> (localLOGV) Log.v(TAG, <span class=\"string\">\"HANDLE SHOW: \"</span> + <span class=\"keyword\">this</span> + <span class=\"string\">\" mView=\"</span> + mView</div><div class=\"line\">                    + <span class=\"string\">\" mNextView=\"</span> + mNextView);</div><div class=\"line\">            <span class=\"comment\">// If a cancel/hide is pending - no need to show - at this point</span></div><div class=\"line\">            <span class=\"comment\">// the window token is already invalid and no need to do any work.</span></div><div class=\"line\">            <span class=\"keyword\">if</span> (mHandler.hasMessages(CANCEL) || mHandler.hasMessages(HIDE)) &#123;</div><div class=\"line\">                <span class=\"keyword\">return</span>;</div><div class=\"line\">            &#125;</div><div class=\"line\">            <span class=\"keyword\">if</span> (mView != mNextView) &#123;</div><div class=\"line\">                <span class=\"comment\">// remove the old view if necessary</span></div><div class=\"line\">                handleHide();</div><div class=\"line\">                mView = mNextView;</div><div class=\"line\">                Context context = mView.getContext().getApplicationContext();</div><div class=\"line\">                String packageName = mView.getContext().getOpPackageName();</div><div class=\"line\">                <span class=\"keyword\">if</span> (context == <span class=\"keyword\">null</span>) &#123;</div><div class=\"line\">                    context = mView.getContext();</div><div class=\"line\">                &#125;</div><div class=\"line\">                mWM = (WindowManager)context.getSystemService(Context.WINDOW_SERVICE);</div><div class=\"line\">                <span class=\"comment\">// We can resolve the Gravity here by using the Locale for getting</span></div><div class=\"line\">                <span class=\"comment\">// the layout direction</span></div><div class=\"line\">                <span class=\"keyword\">final</span> Configuration config = mView.getContext().getResources().getConfiguration();</div><div class=\"line\">                <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> gravity = Gravity.getAbsoluteGravity(mGravity, config.getLayoutDirection());</div><div class=\"line\">                mParams.gravity = gravity;</div><div class=\"line\">                <span class=\"keyword\">if</span> ((gravity &amp; Gravity.HORIZONTAL_GRAVITY_MASK) == Gravity.FILL_HORIZONTAL) &#123;</div><div class=\"line\">                    mParams.horizontalWeight = <span class=\"number\">1.0f</span>;</div><div class=\"line\">                &#125;</div><div class=\"line\">                <span class=\"keyword\">if</span> ((gravity &amp; Gravity.VERTICAL_GRAVITY_MASK) == Gravity.FILL_VERTICAL) &#123;</div><div class=\"line\">                    mParams.verticalWeight = <span class=\"number\">1.0f</span>;</div><div class=\"line\">                &#125;</div><div class=\"line\">                mParams.x = mX;</div><div class=\"line\">                mParams.y = mY;</div><div class=\"line\">                mParams.verticalMargin = mVerticalMargin;</div><div class=\"line\">                mParams.horizontalMargin = mHorizontalMargin;</div><div class=\"line\">                mParams.packageName = packageName;</div><div class=\"line\">                mParams.hideTimeoutMilliseconds = mDuration ==</div><div class=\"line\">                    Toast.LENGTH_LONG ? LONG_DURATION_TIMEOUT : SHORT_DURATION_TIMEOUT;</div><div class=\"line\">                mParams.token = windowToken;</div><div class=\"line\">                <span class=\"keyword\">if</span> (mView.getParent() != <span class=\"keyword\">null</span>) &#123;</div><div class=\"line\">                    <span class=\"keyword\">if</span> (localLOGV) Log.v(TAG, <span class=\"string\">\"REMOVE! \"</span> + mView + <span class=\"string\">\" in \"</span> + <span class=\"keyword\">this</span>);</div><div class=\"line\">                    mWM.removeView(mView);</div><div class=\"line\">                &#125;</div><div class=\"line\">                <span class=\"keyword\">if</span> (localLOGV) Log.v(TAG, <span class=\"string\">\"ADD! \"</span> + mView + <span class=\"string\">\" in \"</span> + <span class=\"keyword\">this</span>);</div><div class=\"line\">                <span class=\"comment\">// Since the notification manager service cancels the token right</span></div><div class=\"line\">                <span class=\"comment\">// after it notifies us to cancel the toast there is an inherent</span></div><div class=\"line\">                <span class=\"comment\">// race and we may attempt to add a window after the token has been</span></div><div class=\"line\">                <span class=\"comment\">// invalidated. Let us hedge against that.</span></div><div class=\"line\">                <span class=\"keyword\">try</span> &#123;</div><div class=\"line\">                    mWM.addView(mView, mParams);</div><div class=\"line\">                    trySendAccessibilityEvent();</div><div class=\"line\">                &#125; <span class=\"keyword\">catch</span> (WindowManager.BadTokenException e) &#123;</div><div class=\"line\">                    <span class=\"comment\">/* ignore */</span></div><div class=\"line\">                &#125;</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;</div></pre></td></tr></table></figure></p>\n<p>上面的一坨是获取到<code>WindowManager</code>然后通过<code>mWM.addView</code>将Toast显示到窗口上。<br>至于<code>WindowManager</code>如何添加view的，可以看这个：<a href=\"http://blog.huangyuanlove.com/2017/03/21/Window和CWindowManager/\">http://blog.huangyuanlove.com/2017/03/21/Window和CWindowManager/</a><br>接下来看一下怎么取消Toast弹窗，上面提到了调用了<code>scheduleTimeoutLocked</code>方法。<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">@GuardedBy</span>(<span class=\"string\">\"mToastQueue\"</span>)</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">scheduleTimeoutLocked</span><span class=\"params\">(ToastRecord r)</span></span>&#123;</div><div class=\"line\">    mHandler.removeCallbacksAndMessages(r);</div><div class=\"line\">    Message m = Message.obtain(mHandler, MESSAGE_TIMEOUT, r);</div><div class=\"line\">    <span class=\"keyword\">long</span> delay = r.duration == Toast.LENGTH_LONG ? LONG_DELAY : SHORT_DELAY;</div><div class=\"line\">    mHandler.sendMessageDelayed(m, delay);</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>调用mHandler发送了一个延时消息去调用<code>handleTimeout</code>方法，延迟时间就是根据duration来判断的。这里的<code>mHandler</code>是<code>WorkerHandler</code>继承自<code>Handler</code><br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">handleTimeout</span><span class=\"params\">(ToastRecord record)</span></div><div class=\"line\">    </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">if</span> (DBG) Slog.d(TAG, <span class=\"string\">\"Timeout pkg=\"</span> + record.pkg + <span class=\"string\">\" callback=\"</span> + record.callback);</div><div class=\"line\">        <span class=\"keyword\">synchronized</span> (mToastQueue) &#123;</div><div class=\"line\">            <span class=\"keyword\">int</span> index = indexOfToastLocked(record.pkg, record.callback);</div><div class=\"line\">            <span class=\"keyword\">if</span> (index &gt;= <span class=\"number\">0</span>) &#123;</div><div class=\"line\">                cancelToastLocked(index);</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div></pre></td></tr></table></figure></p>\n<p>接着调用了<code>cancelToastLocked</code>方法<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">@GuardedBy</span>(<span class=\"string\">\"mToastQueue\"</span>)</div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">cancelToastLocked</span><span class=\"params\">(<span class=\"keyword\">int</span> index)</span> </span>&#123;</div><div class=\"line\">        ToastRecord record = mToastQueue.get(index);</div><div class=\"line\">        <span class=\"keyword\">try</span> &#123;</div><div class=\"line\">            record.callback.hide();</div><div class=\"line\">        &#125; <span class=\"keyword\">catch</span> (RemoteException e) &#123;</div><div class=\"line\">            Slog.w(TAG, <span class=\"string\">\"Object died trying to hide notification \"</span> + record.callback</div><div class=\"line\">                    + <span class=\"string\">\" in package \"</span> + record.pkg);</div><div class=\"line\">            <span class=\"comment\">// don't worry about this, we're about to remove it from</span></div><div class=\"line\">            <span class=\"comment\">// the list anyway</span></div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\">        ToastRecord lastToast = mToastQueue.remove(index);</div><div class=\"line\">        mWindowManagerInternal.removeWindowToken(lastToast.token, <span class=\"keyword\">true</span>, DEFAULT_DISPLAY);</div><div class=\"line\"></div><div class=\"line\">        keepProcessAliveIfNeededLocked(record.pid);</div><div class=\"line\">        <span class=\"keyword\">if</span> (mToastQueue.size() &gt; <span class=\"number\">0</span>) &#123;</div><div class=\"line\">            <span class=\"comment\">// Show the next one. If the callback fails, this will remove</span></div><div class=\"line\">            <span class=\"comment\">// it from the list, so don't assume that the list hasn't changed</span></div><div class=\"line\">            <span class=\"comment\">// after this point.</span></div><div class=\"line\">            showNextToastLocked();</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div></pre></td></tr></table></figure></p>\n<p>在该方法中调用了<code>callback.hide()</code>方法移除toast的显示。<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div></pre></td><td class=\"code\"><pre><div class=\"line\"> <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">handleHide</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">if</span> (localLOGV) Log.v(TAG, <span class=\"string\">\"HANDLE HIDE: \"</span> + <span class=\"keyword\">this</span> + <span class=\"string\">\" mView=\"</span> + mView);</div><div class=\"line\">    <span class=\"keyword\">if</span> (mView != <span class=\"keyword\">null</span>) &#123;</div><div class=\"line\">        <span class=\"comment\">// note: checking parent() just to make sure the view has</span></div><div class=\"line\">        <span class=\"comment\">// been added...  i have seen cases where we get here when</span></div><div class=\"line\">        <span class=\"comment\">// the view isn't yet added, so let's try not to crash.</span></div><div class=\"line\">        <span class=\"keyword\">if</span> (mView.getParent() != <span class=\"keyword\">null</span>) &#123;</div><div class=\"line\">            <span class=\"keyword\">if</span> (localLOGV) Log.v(TAG, <span class=\"string\">\"REMOVE! \"</span> + mView + <span class=\"string\">\" in \"</span> + <span class=\"keyword\">this</span>);</div><div class=\"line\">            mWM.removeViewImmediate(mView);</div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\">        mView = <span class=\"keyword\">null</span>;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>如果这时候mToastQueue中还有ToastRecord，则调用<code>showNextToastLocked</code>方法显示下一个。</p>\n<hr>\n<p>以上</p>"},{"title":"View事件分发","date":"2018-07-29T03:28:20.000Z","keywords":"View事件分发","_content":"\n抄的《Android开发艺术探索》3.4.1 和 3.4.2\n\n###### MotionEvent\n在手指接触屏幕后所产生的一系列事件中，典型的事件类型有如下几种：\n* ACTION_DOWN——手指刚接触屏幕；\n* ACTION_MOVE——手指在屏幕上移动；\n* ACTION_UP——手机从屏幕上松开的一瞬间\n还有其他的事件可以参考`MotionEvent.java`类\n\n###### TouchSlop\nTouchSlop是系统所能识别出的被认为是滑动的最小距离，换句话说，当手指在屏幕上滑动时，如果两次滑动之间的距离小于这个常量，那么系统就不认为你是在进行滑动操作，这是一个常量，和设备有关，在不同设备上这个值可能是不同的，通过如下方式即可获取这个常量：`ViewConfiguration. get(getContext()).getScaledTouchSlop()`。当我们在处理滑动时，可以利用这个常量来做一些过滤，比如当两次滑动事件的滑动距离小于这个值，我们就可以认为未达到滑动距离的临界值，因此就可以认为它们不是滑动，这样做可以有更好的用户体验可以在源码中找到这个常量的定义，在`frameworks/base/core/res/res/values/config.xml`文件中。\n\n<!--more-->\n所谓点击事件的事件分发，其实就是对MotionEvent事件的分发过程，即当一个MotionEvent产生了以后，系统需要把这个事件传递给一个具体的View，而这个传递的过程就是分发过程。点击事件的分发过程由三个很重要的方法来共同完成：dispatchTouchEvent、onInterceptTouchEvent和onTouchEvent，下面我们先介绍一下这几个方法\n\n###### public boolean dispatchTouchEvent(MotionEvent ev)\n用来进行事件的分发。如果事件能够传递给当前View，那么此方法一定会被调用，返回结果受当前View的onTouchEvent和下级View的dispatchTouchEvent方法的影响，表示是否消耗当前事件。\n\n###### public boolean onInterceptTouchEvent(MotionEvent event)\n在上述方法内部调用，用来判断是否拦截某个事件，如果当前View拦截了某个事件，那么在同一个事件序列当中，此方法不会被再次调用，返回结果表示是否拦截当前事件。\n\n###### public boolean onTouchEvent(MotionEvent event)\n在dispatchTouchEvent方法中调用，用来处理点击事件，返回结果表示是否消耗当前事件，如果不消耗，则在同一个事件序列中，当前View无法再次接收到事件.\n\n``` java\npublic boolean dispatchTouchEvent(MotionEvent ev) {\n    boolean consume = false;\n    if (onInterceptTouchEvent(ev)) {\n        consume = onTouchEvent(ev);\n    } else {\n        consume = child.dispatchTouchEvent(ev);\n    }\n    return consume;\n}\n```\n对于一个根`ViewGroup`来说，点击事件产生后，首先会传递给它，这时它的`dispatchTouchEvent`就会被调用，如果这个`ViewGroup`的`onInterceptTouchEvent`方法返回`true`就表示它要拦截当前事件，接着事件就会交给这个`ViewGroup`处理，即它的`onTouchEvent`方法就会被调用；如果这个`ViewGroup`的`onInterceptTouchEvent`方法返回`false`就表示它不拦截当前事件，这时当前事件就会继续传递给它的子元素，接着子元素的`dispatchTouchEvent`方法就会被调用，如此反复直到事件被最终处理。\n当一个`View`需要处理事件时，如果它设置了`OnTouchListener`，那么`OnTouchListener`中的`onTouch`方法会被回调。这时事件如何处理还要看`onTouch`的返回值，如果返回`false`，则当前`View`的`onTouchEvent`方法会被调用；如果返回`true`，那么`onTouchEvent`方法将不会被调用。由此可见，给`View`设置的`OnTouchListener`，其优先级比`onTouchEvent`要高。在`onTouchEvent`方法中，如果当前设置的有`OnClickListener`，那么它的`onClick`方法会被调用。可以看出，平时我们常用的`OnClickListener`，其优先级最低，即处于事件传递的尾端。\n当一个点击事件产生后，它的传递过程遵循如下顺序：`Activity -> Window -> View`，即事件总是先传递给`Activity`，`Activity`再传递给`Window`，最后`Window`再传递给顶级`View`。顶级`View`接收到事件后，就会按照事件分发机制去分发事件。考虑一种情况，如果一个`View`的`onTouchEvent`返回`false`，那么它的父容器的`onTouchEvent`将会被调用，依此类推。如果所有的元素都不处理这个事件，那么这个事件将会最终传递给`Activity`处理，即`Activity`的`onTouchEvent`方法会被调用。\n\n###### 事件传递机制\n\n* 同一个事件序列是指从手指接触屏幕的那一刻起，到手指离开屏幕的那一刻结束，在这个过程中所产生的一系列事件，这个事件序列以down事件开始，中间含有数量不定的move事件，最终以up事件结束。\n* 正常情况下，一个事件序列只能被一个View拦截且消耗。因为一旦一个元素拦截了某此事件，那么同一个事件序列内的所有事件都会直接交给它处理，因此同一个事件序列中的事件不能分别由两个View同时处理，但是通过特殊手段可以做到，比如一个View将本该自己处理的事件通过onTouchEvent强行传递给其他View处理。\n* 某个View一旦决定拦截，那么这一个事件序列都只能由它来处理（如果事件序列能够传递给它的话），并且它的onInterceptTouchEvent不会再被调用。这条也很好理解，就是说当一个View决定拦截一个事件后，那么系统会把同一个事件序列内的其他方法都直接交给它来处理，因此就不用再调用这个View的onInterceptTouchEvent去询问它是否要拦截了。\n* 某个View一旦开始处理事件，如果它不消耗ACTION_DOWN事件（onTouchEvent返回了false），那么同一事件序列中的其他事件都不会再交给它来处理，并且事件将重新交由它的父元素去处理，即父元素的onTouchEvent会被调用。意思就是事件一旦交给一个View处理，那么它就必须消耗掉，否则同一事件序列中剩下的事件就不再交给它来处理了。\n* 如果View不消耗除ACTION_DOWN以外的其他事件，那么这个点击事件会消失，此时父元素的onTouchEvent并不会被调用，并且当前View可以持续收到后续的事件，最终这些消失的点击事件会传递给Activity处理。\n* ViewGroup默认不拦截任何事件。Android源码中ViewGroup的onInterceptTouch-Event方法默认返回false。\n* View没有onInterceptTouchEvent方法，一旦有点击事件传递给它，那么它的onTouchEvent方法就会被调用。\n* View的onTouchEvent默认都会消耗事件（返回true），除非它是不可点击的（clickable  和longClickable同时为false）。View的longClickable属性默认都为false，clickable属性要分情况，比如Button的clickable属性默认为true，而TextView的clickable属性默认为false。\n* View的enable属性不影响onTouchEvent的默认返回值。哪怕一个View是disable状态的，只要它的clickable或者longClickable有一个为true，那么它的onTouchEvent就返回true。\n* onClick会发生的前提是当前View是可点击的，并且它收到了down和up的事件。\n* 事件传递过程是由外向内的，即事件总是先传递给父元素，然后再由父元素分发给子View，通过requestDisallowInterceptTouchEvent方法可以在子元素中干预父元素的事件分发过程，但是ACTION_DOWN事件除外。\n\n###### 事件分发源码\n** Activity对点击事件的分发过程 **\n点击事件用`MotionEvent`来表示，当一个点击操作发生时，事件最先传递给当前`Activity`，由`Activity`的`dispatchTouchEvent`来进行事件派发，具体的工作是由`Activity`内部的`Window`来完成的。`Window`会将事件传递给`decor view`，`decor view`一般就是当前界面的底层容器（即`setContentView`所设置的`View`的父容器），通过`Activity.getWindow.getDecorView()`可以获得。我们先从`Activity`的`dispatchTouchEvent`开始分析。\n``` java\n /**\n     * Called to process touch screen events.  You can override this to\n     * intercept all touch screen events before they are dispatched to the\n     * window.  Be sure to call this implementation for touch screen events\n     * that should be handled normally.\n     *\n     * @param ev The touch screen event.\n     *\n     * @return boolean Return true if this event was consumed.\n     */\n    public boolean dispatchTouchEvent(MotionEvent ev) {\n        if (ev.getAction() == MotionEvent.ACTION_DOWN) {\n            onUserInteraction();\n        }\n        if (getWindow().superDispatchTouchEvent(ev)) {\n            return true;\n        }\n        return onTouchEvent(ev);\n    }\n```\n在window类的注释中\n\n```\n/**\n * Abstract base class for a top-level window look and behavior policy.  An\n * instance of this class should be used as the top-level view added to the\n * window manager. It provides standard UI policies such as a background, title\n * area, default key processing, etc.\n *\n * <p>The only existing implementation of this abstract class is\n * android.view.PhoneWindow, which you should instantiate when needing a\n * Window.\n */\n```\n\n首先事件开始交给`Activity`所附属的`Window`进行分发，如果返回`true`，整个事件循环就结束了，返回`false`意味着事件没人处理，所有`View`的`onTouchEvent`都返回了`false`，那么`Activity`的`onTouchEvent`就会被调用。\n其中`Window`是个抽象类，而其中的`superDispatchTouchEvent`方法也是个抽象方法。在`PhoneWindows`中\n``` java\n @Override\n    public boolean superDispatchTouchEvent(MotionEvent event) {\n        return mDecor.superDispatchTouchEvent(event);\n    }\n```\n调用了DecorView的superDispatchTouchEvent方法，我们可以看一下DecorView：\n``` java\npublic class DecorView extends FrameLayout implements RootViewSurfaceTaker, WindowCallbacks {\npublic boolean superDispatchTouchEvent(MotionEvent event) {\n        return super.dispatchTouchEvent(event);\n    }\n}\n```\n目前事件传递到了`DecorView`这里，由于`DecorView`继承自`FrameLayout`且是父`View`，所以最终事件会传递给`View`。从这里开始，事件已经传递到顶级`View`了，即在`Activity`中通过`setContentView`所设置的`View`，另外顶级`View`也叫根`View`，顶级View一般来说都是`ViewGroup`。\n\n** 顶级View对点击事件的分发过程 **\n点击事件达到顶级`View`（一般是一个ViewGroup）以后，会调用`ViewGroup的dispatchTouchEvent`方法，然后的逻辑是这样的：如果顶级`ViewGroup`拦截事件即`onInterceptTouchEvent`返回`true`，则事件由`ViewGroup`处理，这时如果`ViewGroup`的`mOnTouchListener`被设置，则`onTouch`会被调用，否则`onTouchEvent`会被调用。也就是说，如果都提供的话，`onTouch`会屏蔽掉`onTouchEven`t。在`onTouchEvent`中，如果设置了`mOnClickListener`，则`onClick`会被调用。如果顶级`ViewGroup`不拦截事件，则事件会传递给它所在的点击事件链上的子`View`，这时子`View`的`dispatchTouchEvent`会被调用。到此为止，事件已经从顶级View传递给了下一层`View`，接下来的传递过程和顶级`View`是一致的，如此循环，完成整个事件的分发。具体代码可以看一下`ViewGroup.dispatchTouchEvent()`方法。\n\n** View对点击事件的处理 **\nView对点击事件的处理过程稍微简单一些，这里的View不包含ViewGroup。\nView对点击事件的处理过程就比较简单了，因为View（这里不包含ViewGroup）是一个单独的元素，它没有子元素因此无法向下传递事件，所以它只能自己处理事件。从上面的源码可以看出View对点击事件的处理过程，首先会判断有没有设置OnTouchListener，如果OnTouchListener中的onTouch方法返回true，那么onTouchEvent就不会被调用，可见OnTouchListener的优先级高于onTouchEvent，这样做的好处是方便在外界处理点击事件。接着再分析onTouchEvent的实现。先看当View处于不可用状态下点击事件的处理过程，如下所示。很显然，不可用状态下的View照样会消耗点击事件，尽管它看起来不可用。\n接着再分析onTouchEvent的实现。先看当View处于不可用状态下点击事件的处理过程，如下所示。很显然，不可用状态下的View照样会消耗点击事件，尽管它看起来不可用。\n``` java\n if ((viewFlags & ENABLED_MASK) == DISABLED) {\n            if (action == MotionEvent.ACTION_UP && (mPrivateFlags & PFLAG_PRESSED) != 0) {\n                setPressed(false);\n            }\n            mPrivateFlags3 &= ~PFLAG3_FINGER_DOWN;\n            // A disabled view that is clickable still consumes the touch\n            // events, it just doesn't respond to them.\n            return clickable;\n        }\n```\n接下来如果View设置有代理，还会执行代理的onTouchEvent方法，\n``` java\nif (mTouchDelegate != null) {\n            if (mTouchDelegate.onTouchEvent(event)) {\n                return true;\n            }\n        }\n```\n\n接下来就是对事件序列的处理\n``` java\nif (clickable || (viewFlags & TOOLTIP) == TOOLTIP) {\n            switch (action) {\n                case MotionEvent.ACTION_UP:break;\n                case MotionEvent.ACTION_DOWN:break;\n                case MotionEvent.ACTION_CANCEL:break;\n                case MotionEvent.ACTION_MOVE:break;\n            }\n}\n```\n从上面的代码来看，只要View的`CLICKABLE`和`LONG_CLICKABLE`有一个为true，那么它就会消耗这个事件，即`onTouchEvent`方法返回true，不管它是不是`DISABLE`状态，然后就是当`ACTION_UP`事件发生时，会触发`performClick`方法，如果View设置了`OnClickListener`，那么`performClick`方法内部会调用它的`onClick`方法。`View`的`LONG_CLICKABLE`属性默认为`false`，而`CLICKABLE`属性是否为`false`和具体的View有关，确切来说是可点击的View其`CLICKABLE为true`，不可点击的View其`CLICKABLE`为`false`，比如`Button`是可点击的，`TextView`是不可点击的。通过`setClickable`和`setLongClickable`可以分别改变`View`的`CLICKABLE`和`LONG_CLICKABLE`属性。另外，`setOnClickListener`会自动将`View`的`CLICKABLE`设为`true`，s`etOnLongClickListener`则会自动将`View`的`LONG_CLICKABLE`设为`true`。\n\n###### 处理滑动冲突\n了解了点击事件的处理过程，就可以比较好的处理滑动冲突了\n\n** 父容器拦截处理 **\n击事情都先经过父容器的拦截处理，如果父容器需要此事件就拦截，如果不需要此事件就不拦截。外部拦截法需要重写父容器的onInterceptTouchEvent方法，在内部做相应的拦截即可。\n``` java\npublic boolean onInterceptTouchEvent(MotionEvent event) {\n    boolean intercepted = false;\n    int x = (int) event.getX();\n    int y = (int) event.getY();\n    switch (event.getAction()) {\n        case MotionEvent.ACTION_DOWN: {\n            intercepted = false;\n            break;\n        }\n        case MotionEvent.ACTION_MOVE: {\n            if (父容器需要当前点击事件) {\n                intercepted = true;\n            } else {\n                intercepted = false;\n            }\n            break;\n        }\n        case MotionEvent.ACTION_UP: {\n            intercepted = false;\n            break;\n        }\n        default:\n            break;\n    }\n    mLastXIntercept = x;\n    mLastYIntercept = y;\n    return intercepted;\n}\n```\n针对不同的滑动冲突，只需要修改父容器需要当前点击事件这个条件即可，其他均不需做修改并且也不能修改。这里对上述代码再描述一下，在`onInterceptTouchEvent`方法中，首先是`ACTION_DOWN`这个事件，父容器必须返回`false`，即不拦截`ACTION_DOWN`事件，这是因为一旦父容器拦截了`ACTION_DOWN`，那么后续的`ACTION_MOVE`和`ACTION_UP`事件都会直接交由父容器处理，这个时候事件没法再传递给子元素了；其次是`ACTION_MOVE`事件，这个事件可以根据需要来决定是否拦截，如果父容器需要拦截就返回`true`，否则返回`false`；最后是`ACTION_UP`事件，这里必须要返回false，因为`ACTION_UP`事件本身没有太多意义。假设事件交由子元素处理，如果父容器在`ACTION_UP`时返回了`true`，就会导致子元素无法接收到`ACTION_UP`事件，这个时候子元素中的`onClick`事件就无法触发，但是父容器比较特殊，一旦它开始拦截任何一个事件，那么后续的事件都会交给它来处理，而`ACTION_UP`作为最后一个事件也必定可以传递给父容器，即便父容器的`onInterceptTouchEvent`方法在`ACTION_UP`时返回了`false`。\n\n** 子元素拦截事件 **\n父容器不拦截任何事件，所有的事件都传递给子元素，如果子元素需要此事件就直接消耗掉，否则就交由父容器进行处理，这种方法和Android中的事件分发机制不一致，需要配合`requestDisallowInterceptTouchEvent()`方法才能正常工作，使用起来较外部拦截法稍显复杂。\n``` java\npublic boolean dispatchTouchEvent(MotionEvent event) {\n    int x = (int) event.getX();\n    int y = (int) event.getY();\n    switch (event.getAction()) {\n        case MotionEvent.ACTION_DOWN: {\n            parent.requestDisallowInterceptTouchEvent(true);\n            break;\n        }\n        case MotionEvent.ACTION_MOVE: {\n            int deltaX = x -mLastX;\n            int deltaY = y -mLastY;\n            if (父容器需要此类点击事件)) {\n                parent.requestDisallowInterceptTouchEvent(false);\n            }\n            break;\n        }\n        case MotionEvent.ACTION_UP: {\n            break;\n        }\n        default:\n            break;\n        }\n    mLastX = x;\n    mLastY = y;\n    return super.dispatchTouchEvent(event);\n}\n```\n除了子元素需要做处理以外，父元素也要默认拦截除了`ACTION_DOWN`以外的其他事件，这样当子元素调用`parent.requestDisallowInterceptTouchEvent(false)`方法时，父元素才能继续拦截所需的事件。因为`ACTION_DOWN`事件并不受`FLAG_DISALLOW_INTERCEPT`这个标记位的控制，所以一旦父容器拦截`ACTION_DOWN`事件，那么所有的事件都无法传递到子元素中去，这样内部拦截就无法起作用了。\n\n----\n以上","source":"_posts/View事件分发.md","raw":"---\ntitle: View事件分发\ndate: 2018-07-29 11:28:20\ntags: [Android]\nkeywords: View事件分发\n---\n\n抄的《Android开发艺术探索》3.4.1 和 3.4.2\n\n###### MotionEvent\n在手指接触屏幕后所产生的一系列事件中，典型的事件类型有如下几种：\n* ACTION_DOWN——手指刚接触屏幕；\n* ACTION_MOVE——手指在屏幕上移动；\n* ACTION_UP——手机从屏幕上松开的一瞬间\n还有其他的事件可以参考`MotionEvent.java`类\n\n###### TouchSlop\nTouchSlop是系统所能识别出的被认为是滑动的最小距离，换句话说，当手指在屏幕上滑动时，如果两次滑动之间的距离小于这个常量，那么系统就不认为你是在进行滑动操作，这是一个常量，和设备有关，在不同设备上这个值可能是不同的，通过如下方式即可获取这个常量：`ViewConfiguration. get(getContext()).getScaledTouchSlop()`。当我们在处理滑动时，可以利用这个常量来做一些过滤，比如当两次滑动事件的滑动距离小于这个值，我们就可以认为未达到滑动距离的临界值，因此就可以认为它们不是滑动，这样做可以有更好的用户体验可以在源码中找到这个常量的定义，在`frameworks/base/core/res/res/values/config.xml`文件中。\n\n<!--more-->\n所谓点击事件的事件分发，其实就是对MotionEvent事件的分发过程，即当一个MotionEvent产生了以后，系统需要把这个事件传递给一个具体的View，而这个传递的过程就是分发过程。点击事件的分发过程由三个很重要的方法来共同完成：dispatchTouchEvent、onInterceptTouchEvent和onTouchEvent，下面我们先介绍一下这几个方法\n\n###### public boolean dispatchTouchEvent(MotionEvent ev)\n用来进行事件的分发。如果事件能够传递给当前View，那么此方法一定会被调用，返回结果受当前View的onTouchEvent和下级View的dispatchTouchEvent方法的影响，表示是否消耗当前事件。\n\n###### public boolean onInterceptTouchEvent(MotionEvent event)\n在上述方法内部调用，用来判断是否拦截某个事件，如果当前View拦截了某个事件，那么在同一个事件序列当中，此方法不会被再次调用，返回结果表示是否拦截当前事件。\n\n###### public boolean onTouchEvent(MotionEvent event)\n在dispatchTouchEvent方法中调用，用来处理点击事件，返回结果表示是否消耗当前事件，如果不消耗，则在同一个事件序列中，当前View无法再次接收到事件.\n\n``` java\npublic boolean dispatchTouchEvent(MotionEvent ev) {\n    boolean consume = false;\n    if (onInterceptTouchEvent(ev)) {\n        consume = onTouchEvent(ev);\n    } else {\n        consume = child.dispatchTouchEvent(ev);\n    }\n    return consume;\n}\n```\n对于一个根`ViewGroup`来说，点击事件产生后，首先会传递给它，这时它的`dispatchTouchEvent`就会被调用，如果这个`ViewGroup`的`onInterceptTouchEvent`方法返回`true`就表示它要拦截当前事件，接着事件就会交给这个`ViewGroup`处理，即它的`onTouchEvent`方法就会被调用；如果这个`ViewGroup`的`onInterceptTouchEvent`方法返回`false`就表示它不拦截当前事件，这时当前事件就会继续传递给它的子元素，接着子元素的`dispatchTouchEvent`方法就会被调用，如此反复直到事件被最终处理。\n当一个`View`需要处理事件时，如果它设置了`OnTouchListener`，那么`OnTouchListener`中的`onTouch`方法会被回调。这时事件如何处理还要看`onTouch`的返回值，如果返回`false`，则当前`View`的`onTouchEvent`方法会被调用；如果返回`true`，那么`onTouchEvent`方法将不会被调用。由此可见，给`View`设置的`OnTouchListener`，其优先级比`onTouchEvent`要高。在`onTouchEvent`方法中，如果当前设置的有`OnClickListener`，那么它的`onClick`方法会被调用。可以看出，平时我们常用的`OnClickListener`，其优先级最低，即处于事件传递的尾端。\n当一个点击事件产生后，它的传递过程遵循如下顺序：`Activity -> Window -> View`，即事件总是先传递给`Activity`，`Activity`再传递给`Window`，最后`Window`再传递给顶级`View`。顶级`View`接收到事件后，就会按照事件分发机制去分发事件。考虑一种情况，如果一个`View`的`onTouchEvent`返回`false`，那么它的父容器的`onTouchEvent`将会被调用，依此类推。如果所有的元素都不处理这个事件，那么这个事件将会最终传递给`Activity`处理，即`Activity`的`onTouchEvent`方法会被调用。\n\n###### 事件传递机制\n\n* 同一个事件序列是指从手指接触屏幕的那一刻起，到手指离开屏幕的那一刻结束，在这个过程中所产生的一系列事件，这个事件序列以down事件开始，中间含有数量不定的move事件，最终以up事件结束。\n* 正常情况下，一个事件序列只能被一个View拦截且消耗。因为一旦一个元素拦截了某此事件，那么同一个事件序列内的所有事件都会直接交给它处理，因此同一个事件序列中的事件不能分别由两个View同时处理，但是通过特殊手段可以做到，比如一个View将本该自己处理的事件通过onTouchEvent强行传递给其他View处理。\n* 某个View一旦决定拦截，那么这一个事件序列都只能由它来处理（如果事件序列能够传递给它的话），并且它的onInterceptTouchEvent不会再被调用。这条也很好理解，就是说当一个View决定拦截一个事件后，那么系统会把同一个事件序列内的其他方法都直接交给它来处理，因此就不用再调用这个View的onInterceptTouchEvent去询问它是否要拦截了。\n* 某个View一旦开始处理事件，如果它不消耗ACTION_DOWN事件（onTouchEvent返回了false），那么同一事件序列中的其他事件都不会再交给它来处理，并且事件将重新交由它的父元素去处理，即父元素的onTouchEvent会被调用。意思就是事件一旦交给一个View处理，那么它就必须消耗掉，否则同一事件序列中剩下的事件就不再交给它来处理了。\n* 如果View不消耗除ACTION_DOWN以外的其他事件，那么这个点击事件会消失，此时父元素的onTouchEvent并不会被调用，并且当前View可以持续收到后续的事件，最终这些消失的点击事件会传递给Activity处理。\n* ViewGroup默认不拦截任何事件。Android源码中ViewGroup的onInterceptTouch-Event方法默认返回false。\n* View没有onInterceptTouchEvent方法，一旦有点击事件传递给它，那么它的onTouchEvent方法就会被调用。\n* View的onTouchEvent默认都会消耗事件（返回true），除非它是不可点击的（clickable  和longClickable同时为false）。View的longClickable属性默认都为false，clickable属性要分情况，比如Button的clickable属性默认为true，而TextView的clickable属性默认为false。\n* View的enable属性不影响onTouchEvent的默认返回值。哪怕一个View是disable状态的，只要它的clickable或者longClickable有一个为true，那么它的onTouchEvent就返回true。\n* onClick会发生的前提是当前View是可点击的，并且它收到了down和up的事件。\n* 事件传递过程是由外向内的，即事件总是先传递给父元素，然后再由父元素分发给子View，通过requestDisallowInterceptTouchEvent方法可以在子元素中干预父元素的事件分发过程，但是ACTION_DOWN事件除外。\n\n###### 事件分发源码\n** Activity对点击事件的分发过程 **\n点击事件用`MotionEvent`来表示，当一个点击操作发生时，事件最先传递给当前`Activity`，由`Activity`的`dispatchTouchEvent`来进行事件派发，具体的工作是由`Activity`内部的`Window`来完成的。`Window`会将事件传递给`decor view`，`decor view`一般就是当前界面的底层容器（即`setContentView`所设置的`View`的父容器），通过`Activity.getWindow.getDecorView()`可以获得。我们先从`Activity`的`dispatchTouchEvent`开始分析。\n``` java\n /**\n     * Called to process touch screen events.  You can override this to\n     * intercept all touch screen events before they are dispatched to the\n     * window.  Be sure to call this implementation for touch screen events\n     * that should be handled normally.\n     *\n     * @param ev The touch screen event.\n     *\n     * @return boolean Return true if this event was consumed.\n     */\n    public boolean dispatchTouchEvent(MotionEvent ev) {\n        if (ev.getAction() == MotionEvent.ACTION_DOWN) {\n            onUserInteraction();\n        }\n        if (getWindow().superDispatchTouchEvent(ev)) {\n            return true;\n        }\n        return onTouchEvent(ev);\n    }\n```\n在window类的注释中\n\n```\n/**\n * Abstract base class for a top-level window look and behavior policy.  An\n * instance of this class should be used as the top-level view added to the\n * window manager. It provides standard UI policies such as a background, title\n * area, default key processing, etc.\n *\n * <p>The only existing implementation of this abstract class is\n * android.view.PhoneWindow, which you should instantiate when needing a\n * Window.\n */\n```\n\n首先事件开始交给`Activity`所附属的`Window`进行分发，如果返回`true`，整个事件循环就结束了，返回`false`意味着事件没人处理，所有`View`的`onTouchEvent`都返回了`false`，那么`Activity`的`onTouchEvent`就会被调用。\n其中`Window`是个抽象类，而其中的`superDispatchTouchEvent`方法也是个抽象方法。在`PhoneWindows`中\n``` java\n @Override\n    public boolean superDispatchTouchEvent(MotionEvent event) {\n        return mDecor.superDispatchTouchEvent(event);\n    }\n```\n调用了DecorView的superDispatchTouchEvent方法，我们可以看一下DecorView：\n``` java\npublic class DecorView extends FrameLayout implements RootViewSurfaceTaker, WindowCallbacks {\npublic boolean superDispatchTouchEvent(MotionEvent event) {\n        return super.dispatchTouchEvent(event);\n    }\n}\n```\n目前事件传递到了`DecorView`这里，由于`DecorView`继承自`FrameLayout`且是父`View`，所以最终事件会传递给`View`。从这里开始，事件已经传递到顶级`View`了，即在`Activity`中通过`setContentView`所设置的`View`，另外顶级`View`也叫根`View`，顶级View一般来说都是`ViewGroup`。\n\n** 顶级View对点击事件的分发过程 **\n点击事件达到顶级`View`（一般是一个ViewGroup）以后，会调用`ViewGroup的dispatchTouchEvent`方法，然后的逻辑是这样的：如果顶级`ViewGroup`拦截事件即`onInterceptTouchEvent`返回`true`，则事件由`ViewGroup`处理，这时如果`ViewGroup`的`mOnTouchListener`被设置，则`onTouch`会被调用，否则`onTouchEvent`会被调用。也就是说，如果都提供的话，`onTouch`会屏蔽掉`onTouchEven`t。在`onTouchEvent`中，如果设置了`mOnClickListener`，则`onClick`会被调用。如果顶级`ViewGroup`不拦截事件，则事件会传递给它所在的点击事件链上的子`View`，这时子`View`的`dispatchTouchEvent`会被调用。到此为止，事件已经从顶级View传递给了下一层`View`，接下来的传递过程和顶级`View`是一致的，如此循环，完成整个事件的分发。具体代码可以看一下`ViewGroup.dispatchTouchEvent()`方法。\n\n** View对点击事件的处理 **\nView对点击事件的处理过程稍微简单一些，这里的View不包含ViewGroup。\nView对点击事件的处理过程就比较简单了，因为View（这里不包含ViewGroup）是一个单独的元素，它没有子元素因此无法向下传递事件，所以它只能自己处理事件。从上面的源码可以看出View对点击事件的处理过程，首先会判断有没有设置OnTouchListener，如果OnTouchListener中的onTouch方法返回true，那么onTouchEvent就不会被调用，可见OnTouchListener的优先级高于onTouchEvent，这样做的好处是方便在外界处理点击事件。接着再分析onTouchEvent的实现。先看当View处于不可用状态下点击事件的处理过程，如下所示。很显然，不可用状态下的View照样会消耗点击事件，尽管它看起来不可用。\n接着再分析onTouchEvent的实现。先看当View处于不可用状态下点击事件的处理过程，如下所示。很显然，不可用状态下的View照样会消耗点击事件，尽管它看起来不可用。\n``` java\n if ((viewFlags & ENABLED_MASK) == DISABLED) {\n            if (action == MotionEvent.ACTION_UP && (mPrivateFlags & PFLAG_PRESSED) != 0) {\n                setPressed(false);\n            }\n            mPrivateFlags3 &= ~PFLAG3_FINGER_DOWN;\n            // A disabled view that is clickable still consumes the touch\n            // events, it just doesn't respond to them.\n            return clickable;\n        }\n```\n接下来如果View设置有代理，还会执行代理的onTouchEvent方法，\n``` java\nif (mTouchDelegate != null) {\n            if (mTouchDelegate.onTouchEvent(event)) {\n                return true;\n            }\n        }\n```\n\n接下来就是对事件序列的处理\n``` java\nif (clickable || (viewFlags & TOOLTIP) == TOOLTIP) {\n            switch (action) {\n                case MotionEvent.ACTION_UP:break;\n                case MotionEvent.ACTION_DOWN:break;\n                case MotionEvent.ACTION_CANCEL:break;\n                case MotionEvent.ACTION_MOVE:break;\n            }\n}\n```\n从上面的代码来看，只要View的`CLICKABLE`和`LONG_CLICKABLE`有一个为true，那么它就会消耗这个事件，即`onTouchEvent`方法返回true，不管它是不是`DISABLE`状态，然后就是当`ACTION_UP`事件发生时，会触发`performClick`方法，如果View设置了`OnClickListener`，那么`performClick`方法内部会调用它的`onClick`方法。`View`的`LONG_CLICKABLE`属性默认为`false`，而`CLICKABLE`属性是否为`false`和具体的View有关，确切来说是可点击的View其`CLICKABLE为true`，不可点击的View其`CLICKABLE`为`false`，比如`Button`是可点击的，`TextView`是不可点击的。通过`setClickable`和`setLongClickable`可以分别改变`View`的`CLICKABLE`和`LONG_CLICKABLE`属性。另外，`setOnClickListener`会自动将`View`的`CLICKABLE`设为`true`，s`etOnLongClickListener`则会自动将`View`的`LONG_CLICKABLE`设为`true`。\n\n###### 处理滑动冲突\n了解了点击事件的处理过程，就可以比较好的处理滑动冲突了\n\n** 父容器拦截处理 **\n击事情都先经过父容器的拦截处理，如果父容器需要此事件就拦截，如果不需要此事件就不拦截。外部拦截法需要重写父容器的onInterceptTouchEvent方法，在内部做相应的拦截即可。\n``` java\npublic boolean onInterceptTouchEvent(MotionEvent event) {\n    boolean intercepted = false;\n    int x = (int) event.getX();\n    int y = (int) event.getY();\n    switch (event.getAction()) {\n        case MotionEvent.ACTION_DOWN: {\n            intercepted = false;\n            break;\n        }\n        case MotionEvent.ACTION_MOVE: {\n            if (父容器需要当前点击事件) {\n                intercepted = true;\n            } else {\n                intercepted = false;\n            }\n            break;\n        }\n        case MotionEvent.ACTION_UP: {\n            intercepted = false;\n            break;\n        }\n        default:\n            break;\n    }\n    mLastXIntercept = x;\n    mLastYIntercept = y;\n    return intercepted;\n}\n```\n针对不同的滑动冲突，只需要修改父容器需要当前点击事件这个条件即可，其他均不需做修改并且也不能修改。这里对上述代码再描述一下，在`onInterceptTouchEvent`方法中，首先是`ACTION_DOWN`这个事件，父容器必须返回`false`，即不拦截`ACTION_DOWN`事件，这是因为一旦父容器拦截了`ACTION_DOWN`，那么后续的`ACTION_MOVE`和`ACTION_UP`事件都会直接交由父容器处理，这个时候事件没法再传递给子元素了；其次是`ACTION_MOVE`事件，这个事件可以根据需要来决定是否拦截，如果父容器需要拦截就返回`true`，否则返回`false`；最后是`ACTION_UP`事件，这里必须要返回false，因为`ACTION_UP`事件本身没有太多意义。假设事件交由子元素处理，如果父容器在`ACTION_UP`时返回了`true`，就会导致子元素无法接收到`ACTION_UP`事件，这个时候子元素中的`onClick`事件就无法触发，但是父容器比较特殊，一旦它开始拦截任何一个事件，那么后续的事件都会交给它来处理，而`ACTION_UP`作为最后一个事件也必定可以传递给父容器，即便父容器的`onInterceptTouchEvent`方法在`ACTION_UP`时返回了`false`。\n\n** 子元素拦截事件 **\n父容器不拦截任何事件，所有的事件都传递给子元素，如果子元素需要此事件就直接消耗掉，否则就交由父容器进行处理，这种方法和Android中的事件分发机制不一致，需要配合`requestDisallowInterceptTouchEvent()`方法才能正常工作，使用起来较外部拦截法稍显复杂。\n``` java\npublic boolean dispatchTouchEvent(MotionEvent event) {\n    int x = (int) event.getX();\n    int y = (int) event.getY();\n    switch (event.getAction()) {\n        case MotionEvent.ACTION_DOWN: {\n            parent.requestDisallowInterceptTouchEvent(true);\n            break;\n        }\n        case MotionEvent.ACTION_MOVE: {\n            int deltaX = x -mLastX;\n            int deltaY = y -mLastY;\n            if (父容器需要此类点击事件)) {\n                parent.requestDisallowInterceptTouchEvent(false);\n            }\n            break;\n        }\n        case MotionEvent.ACTION_UP: {\n            break;\n        }\n        default:\n            break;\n        }\n    mLastX = x;\n    mLastY = y;\n    return super.dispatchTouchEvent(event);\n}\n```\n除了子元素需要做处理以外，父元素也要默认拦截除了`ACTION_DOWN`以外的其他事件，这样当子元素调用`parent.requestDisallowInterceptTouchEvent(false)`方法时，父元素才能继续拦截所需的事件。因为`ACTION_DOWN`事件并不受`FLAG_DISALLOW_INTERCEPT`这个标记位的控制，所以一旦父容器拦截`ACTION_DOWN`事件，那么所有的事件都无法传递到子元素中去，这样内部拦截就无法起作用了。\n\n----\n以上","slug":"View事件分发","published":1,"updated":"2018-08-04T05:16:29.516Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjl3vbtre0027isdg1rr7e0zq","content":"<p>抄的《Android开发艺术探索》3.4.1 和 3.4.2</p>\n<h6 id=\"MotionEvent\"><a href=\"#MotionEvent\" class=\"headerlink\" title=\"MotionEvent\"></a>MotionEvent</h6><p>在手指接触屏幕后所产生的一系列事件中，典型的事件类型有如下几种：</p>\n<ul>\n<li>ACTION_DOWN——手指刚接触屏幕；</li>\n<li>ACTION_MOVE——手指在屏幕上移动；</li>\n<li>ACTION_UP——手机从屏幕上松开的一瞬间<br>还有其他的事件可以参考<code>MotionEvent.java</code>类</li>\n</ul>\n<h6 id=\"TouchSlop\"><a href=\"#TouchSlop\" class=\"headerlink\" title=\"TouchSlop\"></a>TouchSlop</h6><p>TouchSlop是系统所能识别出的被认为是滑动的最小距离，换句话说，当手指在屏幕上滑动时，如果两次滑动之间的距离小于这个常量，那么系统就不认为你是在进行滑动操作，这是一个常量，和设备有关，在不同设备上这个值可能是不同的，通过如下方式即可获取这个常量：<code>ViewConfiguration. get(getContext()).getScaledTouchSlop()</code>。当我们在处理滑动时，可以利用这个常量来做一些过滤，比如当两次滑动事件的滑动距离小于这个值，我们就可以认为未达到滑动距离的临界值，因此就可以认为它们不是滑动，这样做可以有更好的用户体验可以在源码中找到这个常量的定义，在<code>frameworks/base/core/res/res/values/config.xml</code>文件中。</p>\n<a id=\"more\"></a>\n<p>所谓点击事件的事件分发，其实就是对MotionEvent事件的分发过程，即当一个MotionEvent产生了以后，系统需要把这个事件传递给一个具体的View，而这个传递的过程就是分发过程。点击事件的分发过程由三个很重要的方法来共同完成：dispatchTouchEvent、onInterceptTouchEvent和onTouchEvent，下面我们先介绍一下这几个方法</p>\n<h6 id=\"public-boolean-dispatchTouchEvent-MotionEvent-ev\"><a href=\"#public-boolean-dispatchTouchEvent-MotionEvent-ev\" class=\"headerlink\" title=\"public boolean dispatchTouchEvent(MotionEvent ev)\"></a>public boolean dispatchTouchEvent(MotionEvent ev)</h6><p>用来进行事件的分发。如果事件能够传递给当前View，那么此方法一定会被调用，返回结果受当前View的onTouchEvent和下级View的dispatchTouchEvent方法的影响，表示是否消耗当前事件。</p>\n<h6 id=\"public-boolean-onInterceptTouchEvent-MotionEvent-event\"><a href=\"#public-boolean-onInterceptTouchEvent-MotionEvent-event\" class=\"headerlink\" title=\"public boolean onInterceptTouchEvent(MotionEvent event)\"></a>public boolean onInterceptTouchEvent(MotionEvent event)</h6><p>在上述方法内部调用，用来判断是否拦截某个事件，如果当前View拦截了某个事件，那么在同一个事件序列当中，此方法不会被再次调用，返回结果表示是否拦截当前事件。</p>\n<h6 id=\"public-boolean-onTouchEvent-MotionEvent-event\"><a href=\"#public-boolean-onTouchEvent-MotionEvent-event\" class=\"headerlink\" title=\"public boolean onTouchEvent(MotionEvent event)\"></a>public boolean onTouchEvent(MotionEvent event)</h6><p>在dispatchTouchEvent方法中调用，用来处理点击事件，返回结果表示是否消耗当前事件，如果不消耗，则在同一个事件序列中，当前View无法再次接收到事件.</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">dispatchTouchEvent</span><span class=\"params\">(MotionEvent ev)</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">boolean</span> consume = <span class=\"keyword\">false</span>;</div><div class=\"line\">    <span class=\"keyword\">if</span> (onInterceptTouchEvent(ev)) &#123;</div><div class=\"line\">        consume = onTouchEvent(ev);</div><div class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">        consume = child.dispatchTouchEvent(ev);</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">return</span> consume;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>对于一个根<code>ViewGroup</code>来说，点击事件产生后，首先会传递给它，这时它的<code>dispatchTouchEvent</code>就会被调用，如果这个<code>ViewGroup</code>的<code>onInterceptTouchEvent</code>方法返回<code>true</code>就表示它要拦截当前事件，接着事件就会交给这个<code>ViewGroup</code>处理，即它的<code>onTouchEvent</code>方法就会被调用；如果这个<code>ViewGroup</code>的<code>onInterceptTouchEvent</code>方法返回<code>false</code>就表示它不拦截当前事件，这时当前事件就会继续传递给它的子元素，接着子元素的<code>dispatchTouchEvent</code>方法就会被调用，如此反复直到事件被最终处理。<br>当一个<code>View</code>需要处理事件时，如果它设置了<code>OnTouchListener</code>，那么<code>OnTouchListener</code>中的<code>onTouch</code>方法会被回调。这时事件如何处理还要看<code>onTouch</code>的返回值，如果返回<code>false</code>，则当前<code>View</code>的<code>onTouchEvent</code>方法会被调用；如果返回<code>true</code>，那么<code>onTouchEvent</code>方法将不会被调用。由此可见，给<code>View</code>设置的<code>OnTouchListener</code>，其优先级比<code>onTouchEvent</code>要高。在<code>onTouchEvent</code>方法中，如果当前设置的有<code>OnClickListener</code>，那么它的<code>onClick</code>方法会被调用。可以看出，平时我们常用的<code>OnClickListener</code>，其优先级最低，即处于事件传递的尾端。<br>当一个点击事件产生后，它的传递过程遵循如下顺序：<code>Activity -&gt; Window -&gt; View</code>，即事件总是先传递给<code>Activity</code>，<code>Activity</code>再传递给<code>Window</code>，最后<code>Window</code>再传递给顶级<code>View</code>。顶级<code>View</code>接收到事件后，就会按照事件分发机制去分发事件。考虑一种情况，如果一个<code>View</code>的<code>onTouchEvent</code>返回<code>false</code>，那么它的父容器的<code>onTouchEvent</code>将会被调用，依此类推。如果所有的元素都不处理这个事件，那么这个事件将会最终传递给<code>Activity</code>处理，即<code>Activity</code>的<code>onTouchEvent</code>方法会被调用。</p>\n<h6 id=\"事件传递机制\"><a href=\"#事件传递机制\" class=\"headerlink\" title=\"事件传递机制\"></a>事件传递机制</h6><ul>\n<li>同一个事件序列是指从手指接触屏幕的那一刻起，到手指离开屏幕的那一刻结束，在这个过程中所产生的一系列事件，这个事件序列以down事件开始，中间含有数量不定的move事件，最终以up事件结束。</li>\n<li>正常情况下，一个事件序列只能被一个View拦截且消耗。因为一旦一个元素拦截了某此事件，那么同一个事件序列内的所有事件都会直接交给它处理，因此同一个事件序列中的事件不能分别由两个View同时处理，但是通过特殊手段可以做到，比如一个View将本该自己处理的事件通过onTouchEvent强行传递给其他View处理。</li>\n<li>某个View一旦决定拦截，那么这一个事件序列都只能由它来处理（如果事件序列能够传递给它的话），并且它的onInterceptTouchEvent不会再被调用。这条也很好理解，就是说当一个View决定拦截一个事件后，那么系统会把同一个事件序列内的其他方法都直接交给它来处理，因此就不用再调用这个View的onInterceptTouchEvent去询问它是否要拦截了。</li>\n<li>某个View一旦开始处理事件，如果它不消耗ACTION_DOWN事件（onTouchEvent返回了false），那么同一事件序列中的其他事件都不会再交给它来处理，并且事件将重新交由它的父元素去处理，即父元素的onTouchEvent会被调用。意思就是事件一旦交给一个View处理，那么它就必须消耗掉，否则同一事件序列中剩下的事件就不再交给它来处理了。</li>\n<li>如果View不消耗除ACTION_DOWN以外的其他事件，那么这个点击事件会消失，此时父元素的onTouchEvent并不会被调用，并且当前View可以持续收到后续的事件，最终这些消失的点击事件会传递给Activity处理。</li>\n<li>ViewGroup默认不拦截任何事件。Android源码中ViewGroup的onInterceptTouch-Event方法默认返回false。</li>\n<li>View没有onInterceptTouchEvent方法，一旦有点击事件传递给它，那么它的onTouchEvent方法就会被调用。</li>\n<li>View的onTouchEvent默认都会消耗事件（返回true），除非它是不可点击的（clickable  和longClickable同时为false）。View的longClickable属性默认都为false，clickable属性要分情况，比如Button的clickable属性默认为true，而TextView的clickable属性默认为false。</li>\n<li>View的enable属性不影响onTouchEvent的默认返回值。哪怕一个View是disable状态的，只要它的clickable或者longClickable有一个为true，那么它的onTouchEvent就返回true。</li>\n<li>onClick会发生的前提是当前View是可点击的，并且它收到了down和up的事件。</li>\n<li>事件传递过程是由外向内的，即事件总是先传递给父元素，然后再由父元素分发给子View，通过requestDisallowInterceptTouchEvent方法可以在子元素中干预父元素的事件分发过程，但是ACTION_DOWN事件除外。</li>\n</ul>\n<h6 id=\"事件分发源码\"><a href=\"#事件分发源码\" class=\"headerlink\" title=\"事件分发源码\"></a>事件分发源码</h6><p><strong> Activity对点击事件的分发过程 </strong><br>点击事件用<code>MotionEvent</code>来表示，当一个点击操作发生时，事件最先传递给当前<code>Activity</code>，由<code>Activity</code>的<code>dispatchTouchEvent</code>来进行事件派发，具体的工作是由<code>Activity</code>内部的<code>Window</code>来完成的。<code>Window</code>会将事件传递给<code>decor view</code>，<code>decor view</code>一般就是当前界面的底层容器（即<code>setContentView</code>所设置的<code>View</code>的父容器），通过<code>Activity.getWindow.getDecorView()</code>可以获得。我们先从<code>Activity</code>的<code>dispatchTouchEvent</code>开始分析。<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">/**</span></div><div class=\"line\">    * Called to process touch screen events.  You can override this to</div><div class=\"line\">    * intercept all touch screen events before they are dispatched to the</div><div class=\"line\">    * window.  Be sure to call this implementation for touch screen events</div><div class=\"line\">    * that should be handled normally.</div><div class=\"line\">    *</div><div class=\"line\">    * <span class=\"doctag\">@param</span> ev The touch screen event.</div><div class=\"line\">    *</div><div class=\"line\">    * <span class=\"doctag\">@return</span> boolean Return true if this event was consumed.</div><div class=\"line\">    */</div><div class=\"line\">   <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">dispatchTouchEvent</span><span class=\"params\">(MotionEvent ev)</span> </span>&#123;</div><div class=\"line\">       <span class=\"keyword\">if</span> (ev.getAction() == MotionEvent.ACTION_DOWN) &#123;</div><div class=\"line\">           onUserInteraction();</div><div class=\"line\">       &#125;</div><div class=\"line\">       <span class=\"keyword\">if</span> (getWindow().superDispatchTouchEvent(ev)) &#123;</div><div class=\"line\">           <span class=\"keyword\">return</span> <span class=\"keyword\">true</span>;</div><div class=\"line\">       &#125;</div><div class=\"line\">       <span class=\"keyword\">return</span> onTouchEvent(ev);</div><div class=\"line\">   &#125;</div></pre></td></tr></table></figure></p>\n<p>在window类的注释中</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\">/**</div><div class=\"line\"> * Abstract base class for a top-level window look and behavior policy.  An</div><div class=\"line\"> * instance of this class should be used as the top-level view added to the</div><div class=\"line\"> * window manager. It provides standard UI policies such as a background, title</div><div class=\"line\"> * area, default key processing, etc.</div><div class=\"line\"> *</div><div class=\"line\"> * &lt;p&gt;The only existing implementation of this abstract class is</div><div class=\"line\"> * android.view.PhoneWindow, which you should instantiate when needing a</div><div class=\"line\"> * Window.</div><div class=\"line\"> */</div></pre></td></tr></table></figure>\n<p>首先事件开始交给<code>Activity</code>所附属的<code>Window</code>进行分发，如果返回<code>true</code>，整个事件循环就结束了，返回<code>false</code>意味着事件没人处理，所有<code>View</code>的<code>onTouchEvent</code>都返回了<code>false</code>，那么<code>Activity</code>的<code>onTouchEvent</code>就会被调用。<br>其中<code>Window</code>是个抽象类，而其中的<code>superDispatchTouchEvent</code>方法也是个抽象方法。在<code>PhoneWindows</code>中<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">@Override</span></div><div class=\"line\">   <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">superDispatchTouchEvent</span><span class=\"params\">(MotionEvent event)</span> </span>&#123;</div><div class=\"line\">       <span class=\"keyword\">return</span> mDecor.superDispatchTouchEvent(event);</div><div class=\"line\">   &#125;</div></pre></td></tr></table></figure></p>\n<p>调用了DecorView的superDispatchTouchEvent方法，我们可以看一下DecorView：<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">DecorView</span> <span class=\"keyword\">extends</span> <span class=\"title\">FrameLayout</span> <span class=\"keyword\">implements</span> <span class=\"title\">RootViewSurfaceTaker</span>, <span class=\"title\">WindowCallbacks</span> </span>&#123;</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">superDispatchTouchEvent</span><span class=\"params\">(MotionEvent event)</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">super</span>.dispatchTouchEvent(event);</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>目前事件传递到了<code>DecorView</code>这里，由于<code>DecorView</code>继承自<code>FrameLayout</code>且是父<code>View</code>，所以最终事件会传递给<code>View</code>。从这里开始，事件已经传递到顶级<code>View</code>了，即在<code>Activity</code>中通过<code>setContentView</code>所设置的<code>View</code>，另外顶级<code>View</code>也叫根<code>View</code>，顶级View一般来说都是<code>ViewGroup</code>。</p>\n<p><strong> 顶级View对点击事件的分发过程 </strong><br>点击事件达到顶级<code>View</code>（一般是一个ViewGroup）以后，会调用<code>ViewGroup的dispatchTouchEvent</code>方法，然后的逻辑是这样的：如果顶级<code>ViewGroup</code>拦截事件即<code>onInterceptTouchEvent</code>返回<code>true</code>，则事件由<code>ViewGroup</code>处理，这时如果<code>ViewGroup</code>的<code>mOnTouchListener</code>被设置，则<code>onTouch</code>会被调用，否则<code>onTouchEvent</code>会被调用。也就是说，如果都提供的话，<code>onTouch</code>会屏蔽掉<code>onTouchEven</code>t。在<code>onTouchEvent</code>中，如果设置了<code>mOnClickListener</code>，则<code>onClick</code>会被调用。如果顶级<code>ViewGroup</code>不拦截事件，则事件会传递给它所在的点击事件链上的子<code>View</code>，这时子<code>View</code>的<code>dispatchTouchEvent</code>会被调用。到此为止，事件已经从顶级View传递给了下一层<code>View</code>，接下来的传递过程和顶级<code>View</code>是一致的，如此循环，完成整个事件的分发。具体代码可以看一下<code>ViewGroup.dispatchTouchEvent()</code>方法。</p>\n<p><strong> View对点击事件的处理 </strong><br>View对点击事件的处理过程稍微简单一些，这里的View不包含ViewGroup。<br>View对点击事件的处理过程就比较简单了，因为View（这里不包含ViewGroup）是一个单独的元素，它没有子元素因此无法向下传递事件，所以它只能自己处理事件。从上面的源码可以看出View对点击事件的处理过程，首先会判断有没有设置OnTouchListener，如果OnTouchListener中的onTouch方法返回true，那么onTouchEvent就不会被调用，可见OnTouchListener的优先级高于onTouchEvent，这样做的好处是方便在外界处理点击事件。接着再分析onTouchEvent的实现。先看当View处于不可用状态下点击事件的处理过程，如下所示。很显然，不可用状态下的View照样会消耗点击事件，尽管它看起来不可用。<br>接着再分析onTouchEvent的实现。先看当View处于不可用状态下点击事件的处理过程，如下所示。很显然，不可用状态下的View照样会消耗点击事件，尽管它看起来不可用。<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">if</span> ((viewFlags &amp; ENABLED_MASK) == DISABLED) &#123;</div><div class=\"line\">           <span class=\"keyword\">if</span> (action == MotionEvent.ACTION_UP &amp;&amp; (mPrivateFlags &amp; PFLAG_PRESSED) != <span class=\"number\">0</span>) &#123;</div><div class=\"line\">               setPressed(<span class=\"keyword\">false</span>);</div><div class=\"line\">           &#125;</div><div class=\"line\">           mPrivateFlags3 &amp;= ~PFLAG3_FINGER_DOWN;</div><div class=\"line\">           <span class=\"comment\">// A disabled view that is clickable still consumes the touch</span></div><div class=\"line\">           <span class=\"comment\">// events, it just doesn't respond to them.</span></div><div class=\"line\">           <span class=\"keyword\">return</span> clickable;</div><div class=\"line\">       &#125;</div></pre></td></tr></table></figure></p>\n<p>接下来如果View设置有代理，还会执行代理的onTouchEvent方法，<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">if</span> (mTouchDelegate != <span class=\"keyword\">null</span>) &#123;</div><div class=\"line\">            <span class=\"keyword\">if</span> (mTouchDelegate.onTouchEvent(event)) &#123;</div><div class=\"line\">                <span class=\"keyword\">return</span> <span class=\"keyword\">true</span>;</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;</div></pre></td></tr></table></figure></p>\n<p>接下来就是对事件序列的处理<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">if</span> (clickable || (viewFlags &amp; TOOLTIP) == TOOLTIP) &#123;</div><div class=\"line\">            <span class=\"keyword\">switch</span> (action) &#123;</div><div class=\"line\">                <span class=\"keyword\">case</span> MotionEvent.ACTION_UP:<span class=\"keyword\">break</span>;</div><div class=\"line\">                <span class=\"keyword\">case</span> MotionEvent.ACTION_DOWN:<span class=\"keyword\">break</span>;</div><div class=\"line\">                <span class=\"keyword\">case</span> MotionEvent.ACTION_CANCEL:<span class=\"keyword\">break</span>;</div><div class=\"line\">                <span class=\"keyword\">case</span> MotionEvent.ACTION_MOVE:<span class=\"keyword\">break</span>;</div><div class=\"line\">            &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>从上面的代码来看，只要View的<code>CLICKABLE</code>和<code>LONG_CLICKABLE</code>有一个为true，那么它就会消耗这个事件，即<code>onTouchEvent</code>方法返回true，不管它是不是<code>DISABLE</code>状态，然后就是当<code>ACTION_UP</code>事件发生时，会触发<code>performClick</code>方法，如果View设置了<code>OnClickListener</code>，那么<code>performClick</code>方法内部会调用它的<code>onClick</code>方法。<code>View</code>的<code>LONG_CLICKABLE</code>属性默认为<code>false</code>，而<code>CLICKABLE</code>属性是否为<code>false</code>和具体的View有关，确切来说是可点击的View其<code>CLICKABLE为true</code>，不可点击的View其<code>CLICKABLE</code>为<code>false</code>，比如<code>Button</code>是可点击的，<code>TextView</code>是不可点击的。通过<code>setClickable</code>和<code>setLongClickable</code>可以分别改变<code>View</code>的<code>CLICKABLE</code>和<code>LONG_CLICKABLE</code>属性。另外，<code>setOnClickListener</code>会自动将<code>View</code>的<code>CLICKABLE</code>设为<code>true</code>，s<code>etOnLongClickListener</code>则会自动将<code>View</code>的<code>LONG_CLICKABLE</code>设为<code>true</code>。</p>\n<h6 id=\"处理滑动冲突\"><a href=\"#处理滑动冲突\" class=\"headerlink\" title=\"处理滑动冲突\"></a>处理滑动冲突</h6><p>了解了点击事件的处理过程，就可以比较好的处理滑动冲突了</p>\n<p><strong> 父容器拦截处理 </strong><br>击事情都先经过父容器的拦截处理，如果父容器需要此事件就拦截，如果不需要此事件就不拦截。外部拦截法需要重写父容器的onInterceptTouchEvent方法，在内部做相应的拦截即可。<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">onInterceptTouchEvent</span><span class=\"params\">(MotionEvent event)</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">boolean</span> intercepted = <span class=\"keyword\">false</span>;</div><div class=\"line\">    <span class=\"keyword\">int</span> x = (<span class=\"keyword\">int</span>) event.getX();</div><div class=\"line\">    <span class=\"keyword\">int</span> y = (<span class=\"keyword\">int</span>) event.getY();</div><div class=\"line\">    <span class=\"keyword\">switch</span> (event.getAction()) &#123;</div><div class=\"line\">        <span class=\"keyword\">case</span> MotionEvent.ACTION_DOWN: &#123;</div><div class=\"line\">            intercepted = <span class=\"keyword\">false</span>;</div><div class=\"line\">            <span class=\"keyword\">break</span>;</div><div class=\"line\">        &#125;</div><div class=\"line\">        <span class=\"keyword\">case</span> MotionEvent.ACTION_MOVE: &#123;</div><div class=\"line\">            <span class=\"keyword\">if</span> (父容器需要当前点击事件) &#123;</div><div class=\"line\">                intercepted = <span class=\"keyword\">true</span>;</div><div class=\"line\">            &#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">                intercepted = <span class=\"keyword\">false</span>;</div><div class=\"line\">            &#125;</div><div class=\"line\">            <span class=\"keyword\">break</span>;</div><div class=\"line\">        &#125;</div><div class=\"line\">        <span class=\"keyword\">case</span> MotionEvent.ACTION_UP: &#123;</div><div class=\"line\">            intercepted = <span class=\"keyword\">false</span>;</div><div class=\"line\">            <span class=\"keyword\">break</span>;</div><div class=\"line\">        &#125;</div><div class=\"line\">        <span class=\"keyword\">default</span>:</div><div class=\"line\">            <span class=\"keyword\">break</span>;</div><div class=\"line\">    &#125;</div><div class=\"line\">    mLastXIntercept = x;</div><div class=\"line\">    mLastYIntercept = y;</div><div class=\"line\">    <span class=\"keyword\">return</span> intercepted;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>针对不同的滑动冲突，只需要修改父容器需要当前点击事件这个条件即可，其他均不需做修改并且也不能修改。这里对上述代码再描述一下，在<code>onInterceptTouchEvent</code>方法中，首先是<code>ACTION_DOWN</code>这个事件，父容器必须返回<code>false</code>，即不拦截<code>ACTION_DOWN</code>事件，这是因为一旦父容器拦截了<code>ACTION_DOWN</code>，那么后续的<code>ACTION_MOVE</code>和<code>ACTION_UP</code>事件都会直接交由父容器处理，这个时候事件没法再传递给子元素了；其次是<code>ACTION_MOVE</code>事件，这个事件可以根据需要来决定是否拦截，如果父容器需要拦截就返回<code>true</code>，否则返回<code>false</code>；最后是<code>ACTION_UP</code>事件，这里必须要返回false，因为<code>ACTION_UP</code>事件本身没有太多意义。假设事件交由子元素处理，如果父容器在<code>ACTION_UP</code>时返回了<code>true</code>，就会导致子元素无法接收到<code>ACTION_UP</code>事件，这个时候子元素中的<code>onClick</code>事件就无法触发，但是父容器比较特殊，一旦它开始拦截任何一个事件，那么后续的事件都会交给它来处理，而<code>ACTION_UP</code>作为最后一个事件也必定可以传递给父容器，即便父容器的<code>onInterceptTouchEvent</code>方法在<code>ACTION_UP</code>时返回了<code>false</code>。</p>\n<p><strong> 子元素拦截事件 </strong><br>父容器不拦截任何事件，所有的事件都传递给子元素，如果子元素需要此事件就直接消耗掉，否则就交由父容器进行处理，这种方法和Android中的事件分发机制不一致，需要配合<code>requestDisallowInterceptTouchEvent()</code>方法才能正常工作，使用起来较外部拦截法稍显复杂。<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">dispatchTouchEvent</span><span class=\"params\">(MotionEvent event)</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">int</span> x = (<span class=\"keyword\">int</span>) event.getX();</div><div class=\"line\">    <span class=\"keyword\">int</span> y = (<span class=\"keyword\">int</span>) event.getY();</div><div class=\"line\">    <span class=\"keyword\">switch</span> (event.getAction()) &#123;</div><div class=\"line\">        <span class=\"keyword\">case</span> MotionEvent.ACTION_DOWN: &#123;</div><div class=\"line\">            parent.requestDisallowInterceptTouchEvent(<span class=\"keyword\">true</span>);</div><div class=\"line\">            <span class=\"keyword\">break</span>;</div><div class=\"line\">        &#125;</div><div class=\"line\">        <span class=\"keyword\">case</span> MotionEvent.ACTION_MOVE: &#123;</div><div class=\"line\">            <span class=\"keyword\">int</span> deltaX = x -mLastX;</div><div class=\"line\">            <span class=\"keyword\">int</span> deltaY = y -mLastY;</div><div class=\"line\">            <span class=\"keyword\">if</span> (父容器需要此类点击事件)) &#123;</div><div class=\"line\">                parent.requestDisallowInterceptTouchEvent(<span class=\"keyword\">false</span>);</div><div class=\"line\">            &#125;</div><div class=\"line\">            <span class=\"keyword\">break</span>;</div><div class=\"line\">        &#125;</div><div class=\"line\">        <span class=\"keyword\">case</span> MotionEvent.ACTION_UP: &#123;</div><div class=\"line\">            <span class=\"keyword\">break</span>;</div><div class=\"line\">        &#125;</div><div class=\"line\">        <span class=\"keyword\">default</span>:</div><div class=\"line\">            <span class=\"keyword\">break</span>;</div><div class=\"line\">        &#125;</div><div class=\"line\">    mLastX = x;</div><div class=\"line\">    mLastY = y;</div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">super</span>.dispatchTouchEvent(event);</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>除了子元素需要做处理以外，父元素也要默认拦截除了<code>ACTION_DOWN</code>以外的其他事件，这样当子元素调用<code>parent.requestDisallowInterceptTouchEvent(false)</code>方法时，父元素才能继续拦截所需的事件。因为<code>ACTION_DOWN</code>事件并不受<code>FLAG_DISALLOW_INTERCEPT</code>这个标记位的控制，所以一旦父容器拦截<code>ACTION_DOWN</code>事件，那么所有的事件都无法传递到子元素中去，这样内部拦截就无法起作用了。</p>\n<hr>\n<p>以上</p>\n","excerpt":"<p>抄的《Android开发艺术探索》3.4.1 和 3.4.2</p>\n<h6 id=\"MotionEvent\"><a href=\"#MotionEvent\" class=\"headerlink\" title=\"MotionEvent\"></a>MotionEvent</h6><p>在手指接触屏幕后所产生的一系列事件中，典型的事件类型有如下几种：</p>\n<ul>\n<li>ACTION_DOWN——手指刚接触屏幕；</li>\n<li>ACTION_MOVE——手指在屏幕上移动；</li>\n<li>ACTION_UP——手机从屏幕上松开的一瞬间<br>还有其他的事件可以参考<code>MotionEvent.java</code>类</li>\n</ul>\n<h6 id=\"TouchSlop\"><a href=\"#TouchSlop\" class=\"headerlink\" title=\"TouchSlop\"></a>TouchSlop</h6><p>TouchSlop是系统所能识别出的被认为是滑动的最小距离，换句话说，当手指在屏幕上滑动时，如果两次滑动之间的距离小于这个常量，那么系统就不认为你是在进行滑动操作，这是一个常量，和设备有关，在不同设备上这个值可能是不同的，通过如下方式即可获取这个常量：<code>ViewConfiguration. get(getContext()).getScaledTouchSlop()</code>。当我们在处理滑动时，可以利用这个常量来做一些过滤，比如当两次滑动事件的滑动距离小于这个值，我们就可以认为未达到滑动距离的临界值，因此就可以认为它们不是滑动，这样做可以有更好的用户体验可以在源码中找到这个常量的定义，在<code>frameworks/base/core/res/res/values/config.xml</code>文件中。</p>","more":"<p>所谓点击事件的事件分发，其实就是对MotionEvent事件的分发过程，即当一个MotionEvent产生了以后，系统需要把这个事件传递给一个具体的View，而这个传递的过程就是分发过程。点击事件的分发过程由三个很重要的方法来共同完成：dispatchTouchEvent、onInterceptTouchEvent和onTouchEvent，下面我们先介绍一下这几个方法</p>\n<h6 id=\"public-boolean-dispatchTouchEvent-MotionEvent-ev\"><a href=\"#public-boolean-dispatchTouchEvent-MotionEvent-ev\" class=\"headerlink\" title=\"public boolean dispatchTouchEvent(MotionEvent ev)\"></a>public boolean dispatchTouchEvent(MotionEvent ev)</h6><p>用来进行事件的分发。如果事件能够传递给当前View，那么此方法一定会被调用，返回结果受当前View的onTouchEvent和下级View的dispatchTouchEvent方法的影响，表示是否消耗当前事件。</p>\n<h6 id=\"public-boolean-onInterceptTouchEvent-MotionEvent-event\"><a href=\"#public-boolean-onInterceptTouchEvent-MotionEvent-event\" class=\"headerlink\" title=\"public boolean onInterceptTouchEvent(MotionEvent event)\"></a>public boolean onInterceptTouchEvent(MotionEvent event)</h6><p>在上述方法内部调用，用来判断是否拦截某个事件，如果当前View拦截了某个事件，那么在同一个事件序列当中，此方法不会被再次调用，返回结果表示是否拦截当前事件。</p>\n<h6 id=\"public-boolean-onTouchEvent-MotionEvent-event\"><a href=\"#public-boolean-onTouchEvent-MotionEvent-event\" class=\"headerlink\" title=\"public boolean onTouchEvent(MotionEvent event)\"></a>public boolean onTouchEvent(MotionEvent event)</h6><p>在dispatchTouchEvent方法中调用，用来处理点击事件，返回结果表示是否消耗当前事件，如果不消耗，则在同一个事件序列中，当前View无法再次接收到事件.</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">dispatchTouchEvent</span><span class=\"params\">(MotionEvent ev)</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">boolean</span> consume = <span class=\"keyword\">false</span>;</div><div class=\"line\">    <span class=\"keyword\">if</span> (onInterceptTouchEvent(ev)) &#123;</div><div class=\"line\">        consume = onTouchEvent(ev);</div><div class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">        consume = child.dispatchTouchEvent(ev);</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">return</span> consume;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>对于一个根<code>ViewGroup</code>来说，点击事件产生后，首先会传递给它，这时它的<code>dispatchTouchEvent</code>就会被调用，如果这个<code>ViewGroup</code>的<code>onInterceptTouchEvent</code>方法返回<code>true</code>就表示它要拦截当前事件，接着事件就会交给这个<code>ViewGroup</code>处理，即它的<code>onTouchEvent</code>方法就会被调用；如果这个<code>ViewGroup</code>的<code>onInterceptTouchEvent</code>方法返回<code>false</code>就表示它不拦截当前事件，这时当前事件就会继续传递给它的子元素，接着子元素的<code>dispatchTouchEvent</code>方法就会被调用，如此反复直到事件被最终处理。<br>当一个<code>View</code>需要处理事件时，如果它设置了<code>OnTouchListener</code>，那么<code>OnTouchListener</code>中的<code>onTouch</code>方法会被回调。这时事件如何处理还要看<code>onTouch</code>的返回值，如果返回<code>false</code>，则当前<code>View</code>的<code>onTouchEvent</code>方法会被调用；如果返回<code>true</code>，那么<code>onTouchEvent</code>方法将不会被调用。由此可见，给<code>View</code>设置的<code>OnTouchListener</code>，其优先级比<code>onTouchEvent</code>要高。在<code>onTouchEvent</code>方法中，如果当前设置的有<code>OnClickListener</code>，那么它的<code>onClick</code>方法会被调用。可以看出，平时我们常用的<code>OnClickListener</code>，其优先级最低，即处于事件传递的尾端。<br>当一个点击事件产生后，它的传递过程遵循如下顺序：<code>Activity -&gt; Window -&gt; View</code>，即事件总是先传递给<code>Activity</code>，<code>Activity</code>再传递给<code>Window</code>，最后<code>Window</code>再传递给顶级<code>View</code>。顶级<code>View</code>接收到事件后，就会按照事件分发机制去分发事件。考虑一种情况，如果一个<code>View</code>的<code>onTouchEvent</code>返回<code>false</code>，那么它的父容器的<code>onTouchEvent</code>将会被调用，依此类推。如果所有的元素都不处理这个事件，那么这个事件将会最终传递给<code>Activity</code>处理，即<code>Activity</code>的<code>onTouchEvent</code>方法会被调用。</p>\n<h6 id=\"事件传递机制\"><a href=\"#事件传递机制\" class=\"headerlink\" title=\"事件传递机制\"></a>事件传递机制</h6><ul>\n<li>同一个事件序列是指从手指接触屏幕的那一刻起，到手指离开屏幕的那一刻结束，在这个过程中所产生的一系列事件，这个事件序列以down事件开始，中间含有数量不定的move事件，最终以up事件结束。</li>\n<li>正常情况下，一个事件序列只能被一个View拦截且消耗。因为一旦一个元素拦截了某此事件，那么同一个事件序列内的所有事件都会直接交给它处理，因此同一个事件序列中的事件不能分别由两个View同时处理，但是通过特殊手段可以做到，比如一个View将本该自己处理的事件通过onTouchEvent强行传递给其他View处理。</li>\n<li>某个View一旦决定拦截，那么这一个事件序列都只能由它来处理（如果事件序列能够传递给它的话），并且它的onInterceptTouchEvent不会再被调用。这条也很好理解，就是说当一个View决定拦截一个事件后，那么系统会把同一个事件序列内的其他方法都直接交给它来处理，因此就不用再调用这个View的onInterceptTouchEvent去询问它是否要拦截了。</li>\n<li>某个View一旦开始处理事件，如果它不消耗ACTION_DOWN事件（onTouchEvent返回了false），那么同一事件序列中的其他事件都不会再交给它来处理，并且事件将重新交由它的父元素去处理，即父元素的onTouchEvent会被调用。意思就是事件一旦交给一个View处理，那么它就必须消耗掉，否则同一事件序列中剩下的事件就不再交给它来处理了。</li>\n<li>如果View不消耗除ACTION_DOWN以外的其他事件，那么这个点击事件会消失，此时父元素的onTouchEvent并不会被调用，并且当前View可以持续收到后续的事件，最终这些消失的点击事件会传递给Activity处理。</li>\n<li>ViewGroup默认不拦截任何事件。Android源码中ViewGroup的onInterceptTouch-Event方法默认返回false。</li>\n<li>View没有onInterceptTouchEvent方法，一旦有点击事件传递给它，那么它的onTouchEvent方法就会被调用。</li>\n<li>View的onTouchEvent默认都会消耗事件（返回true），除非它是不可点击的（clickable  和longClickable同时为false）。View的longClickable属性默认都为false，clickable属性要分情况，比如Button的clickable属性默认为true，而TextView的clickable属性默认为false。</li>\n<li>View的enable属性不影响onTouchEvent的默认返回值。哪怕一个View是disable状态的，只要它的clickable或者longClickable有一个为true，那么它的onTouchEvent就返回true。</li>\n<li>onClick会发生的前提是当前View是可点击的，并且它收到了down和up的事件。</li>\n<li>事件传递过程是由外向内的，即事件总是先传递给父元素，然后再由父元素分发给子View，通过requestDisallowInterceptTouchEvent方法可以在子元素中干预父元素的事件分发过程，但是ACTION_DOWN事件除外。</li>\n</ul>\n<h6 id=\"事件分发源码\"><a href=\"#事件分发源码\" class=\"headerlink\" title=\"事件分发源码\"></a>事件分发源码</h6><p><strong> Activity对点击事件的分发过程 </strong><br>点击事件用<code>MotionEvent</code>来表示，当一个点击操作发生时，事件最先传递给当前<code>Activity</code>，由<code>Activity</code>的<code>dispatchTouchEvent</code>来进行事件派发，具体的工作是由<code>Activity</code>内部的<code>Window</code>来完成的。<code>Window</code>会将事件传递给<code>decor view</code>，<code>decor view</code>一般就是当前界面的底层容器（即<code>setContentView</code>所设置的<code>View</code>的父容器），通过<code>Activity.getWindow.getDecorView()</code>可以获得。我们先从<code>Activity</code>的<code>dispatchTouchEvent</code>开始分析。<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">/**</div><div class=\"line\">    * Called to process touch screen events.  You can override this to</div><div class=\"line\">    * intercept all touch screen events before they are dispatched to the</div><div class=\"line\">    * window.  Be sure to call this implementation for touch screen events</div><div class=\"line\">    * that should be handled normally.</div><div class=\"line\">    *</div><div class=\"line\">    * <span class=\"doctag\">@param</span> ev The touch screen event.</div><div class=\"line\">    *</div><div class=\"line\">    * <span class=\"doctag\">@return</span> boolean Return true if this event was consumed.</div><div class=\"line\">    */</span></div><div class=\"line\">   <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">dispatchTouchEvent</span><span class=\"params\">(MotionEvent ev)</span> </span>&#123;</div><div class=\"line\">       <span class=\"keyword\">if</span> (ev.getAction() == MotionEvent.ACTION_DOWN) &#123;</div><div class=\"line\">           onUserInteraction();</div><div class=\"line\">       &#125;</div><div class=\"line\">       <span class=\"keyword\">if</span> (getWindow().superDispatchTouchEvent(ev)) &#123;</div><div class=\"line\">           <span class=\"keyword\">return</span> <span class=\"keyword\">true</span>;</div><div class=\"line\">       &#125;</div><div class=\"line\">       <span class=\"keyword\">return</span> onTouchEvent(ev);</div><div class=\"line\">   &#125;</div></pre></td></tr></table></figure></p>\n<p>在window类的注释中</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\">/**</div><div class=\"line\"> * Abstract base class for a top-level window look and behavior policy.  An</div><div class=\"line\"> * instance of this class should be used as the top-level view added to the</div><div class=\"line\"> * window manager. It provides standard UI policies such as a background, title</div><div class=\"line\"> * area, default key processing, etc.</div><div class=\"line\"> *</div><div class=\"line\"> * &lt;p&gt;The only existing implementation of this abstract class is</div><div class=\"line\"> * android.view.PhoneWindow, which you should instantiate when needing a</div><div class=\"line\"> * Window.</div><div class=\"line\"> */</div></pre></td></tr></table></figure>\n<p>首先事件开始交给<code>Activity</code>所附属的<code>Window</code>进行分发，如果返回<code>true</code>，整个事件循环就结束了，返回<code>false</code>意味着事件没人处理，所有<code>View</code>的<code>onTouchEvent</code>都返回了<code>false</code>，那么<code>Activity</code>的<code>onTouchEvent</code>就会被调用。<br>其中<code>Window</code>是个抽象类，而其中的<code>superDispatchTouchEvent</code>方法也是个抽象方法。在<code>PhoneWindows</code>中<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">@Override</span></div><div class=\"line\">   <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">superDispatchTouchEvent</span><span class=\"params\">(MotionEvent event)</span> </span>&#123;</div><div class=\"line\">       <span class=\"keyword\">return</span> mDecor.superDispatchTouchEvent(event);</div><div class=\"line\">   &#125;</div></pre></td></tr></table></figure></p>\n<p>调用了DecorView的superDispatchTouchEvent方法，我们可以看一下DecorView：<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">DecorView</span> <span class=\"keyword\">extends</span> <span class=\"title\">FrameLayout</span> <span class=\"keyword\">implements</span> <span class=\"title\">RootViewSurfaceTaker</span>, <span class=\"title\">WindowCallbacks</span> </span>&#123;</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">superDispatchTouchEvent</span><span class=\"params\">(MotionEvent event)</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">super</span>.dispatchTouchEvent(event);</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>目前事件传递到了<code>DecorView</code>这里，由于<code>DecorView</code>继承自<code>FrameLayout</code>且是父<code>View</code>，所以最终事件会传递给<code>View</code>。从这里开始，事件已经传递到顶级<code>View</code>了，即在<code>Activity</code>中通过<code>setContentView</code>所设置的<code>View</code>，另外顶级<code>View</code>也叫根<code>View</code>，顶级View一般来说都是<code>ViewGroup</code>。</p>\n<p><strong> 顶级View对点击事件的分发过程 </strong><br>点击事件达到顶级<code>View</code>（一般是一个ViewGroup）以后，会调用<code>ViewGroup的dispatchTouchEvent</code>方法，然后的逻辑是这样的：如果顶级<code>ViewGroup</code>拦截事件即<code>onInterceptTouchEvent</code>返回<code>true</code>，则事件由<code>ViewGroup</code>处理，这时如果<code>ViewGroup</code>的<code>mOnTouchListener</code>被设置，则<code>onTouch</code>会被调用，否则<code>onTouchEvent</code>会被调用。也就是说，如果都提供的话，<code>onTouch</code>会屏蔽掉<code>onTouchEven</code>t。在<code>onTouchEvent</code>中，如果设置了<code>mOnClickListener</code>，则<code>onClick</code>会被调用。如果顶级<code>ViewGroup</code>不拦截事件，则事件会传递给它所在的点击事件链上的子<code>View</code>，这时子<code>View</code>的<code>dispatchTouchEvent</code>会被调用。到此为止，事件已经从顶级View传递给了下一层<code>View</code>，接下来的传递过程和顶级<code>View</code>是一致的，如此循环，完成整个事件的分发。具体代码可以看一下<code>ViewGroup.dispatchTouchEvent()</code>方法。</p>\n<p><strong> View对点击事件的处理 </strong><br>View对点击事件的处理过程稍微简单一些，这里的View不包含ViewGroup。<br>View对点击事件的处理过程就比较简单了，因为View（这里不包含ViewGroup）是一个单独的元素，它没有子元素因此无法向下传递事件，所以它只能自己处理事件。从上面的源码可以看出View对点击事件的处理过程，首先会判断有没有设置OnTouchListener，如果OnTouchListener中的onTouch方法返回true，那么onTouchEvent就不会被调用，可见OnTouchListener的优先级高于onTouchEvent，这样做的好处是方便在外界处理点击事件。接着再分析onTouchEvent的实现。先看当View处于不可用状态下点击事件的处理过程，如下所示。很显然，不可用状态下的View照样会消耗点击事件，尽管它看起来不可用。<br>接着再分析onTouchEvent的实现。先看当View处于不可用状态下点击事件的处理过程，如下所示。很显然，不可用状态下的View照样会消耗点击事件，尽管它看起来不可用。<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">if</span> ((viewFlags &amp; ENABLED_MASK) == DISABLED) &#123;</div><div class=\"line\">           <span class=\"keyword\">if</span> (action == MotionEvent.ACTION_UP &amp;&amp; (mPrivateFlags &amp; PFLAG_PRESSED) != <span class=\"number\">0</span>) &#123;</div><div class=\"line\">               setPressed(<span class=\"keyword\">false</span>);</div><div class=\"line\">           &#125;</div><div class=\"line\">           mPrivateFlags3 &amp;= ~PFLAG3_FINGER_DOWN;</div><div class=\"line\">           <span class=\"comment\">// A disabled view that is clickable still consumes the touch</span></div><div class=\"line\">           <span class=\"comment\">// events, it just doesn't respond to them.</span></div><div class=\"line\">           <span class=\"keyword\">return</span> clickable;</div><div class=\"line\">       &#125;</div></pre></td></tr></table></figure></p>\n<p>接下来如果View设置有代理，还会执行代理的onTouchEvent方法，<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">if</span> (mTouchDelegate != <span class=\"keyword\">null</span>) &#123;</div><div class=\"line\">            <span class=\"keyword\">if</span> (mTouchDelegate.onTouchEvent(event)) &#123;</div><div class=\"line\">                <span class=\"keyword\">return</span> <span class=\"keyword\">true</span>;</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;</div></pre></td></tr></table></figure></p>\n<p>接下来就是对事件序列的处理<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">if</span> (clickable || (viewFlags &amp; TOOLTIP) == TOOLTIP) &#123;</div><div class=\"line\">            <span class=\"keyword\">switch</span> (action) &#123;</div><div class=\"line\">                <span class=\"keyword\">case</span> MotionEvent.ACTION_UP:<span class=\"keyword\">break</span>;</div><div class=\"line\">                <span class=\"keyword\">case</span> MotionEvent.ACTION_DOWN:<span class=\"keyword\">break</span>;</div><div class=\"line\">                <span class=\"keyword\">case</span> MotionEvent.ACTION_CANCEL:<span class=\"keyword\">break</span>;</div><div class=\"line\">                <span class=\"keyword\">case</span> MotionEvent.ACTION_MOVE:<span class=\"keyword\">break</span>;</div><div class=\"line\">            &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>从上面的代码来看，只要View的<code>CLICKABLE</code>和<code>LONG_CLICKABLE</code>有一个为true，那么它就会消耗这个事件，即<code>onTouchEvent</code>方法返回true，不管它是不是<code>DISABLE</code>状态，然后就是当<code>ACTION_UP</code>事件发生时，会触发<code>performClick</code>方法，如果View设置了<code>OnClickListener</code>，那么<code>performClick</code>方法内部会调用它的<code>onClick</code>方法。<code>View</code>的<code>LONG_CLICKABLE</code>属性默认为<code>false</code>，而<code>CLICKABLE</code>属性是否为<code>false</code>和具体的View有关，确切来说是可点击的View其<code>CLICKABLE为true</code>，不可点击的View其<code>CLICKABLE</code>为<code>false</code>，比如<code>Button</code>是可点击的，<code>TextView</code>是不可点击的。通过<code>setClickable</code>和<code>setLongClickable</code>可以分别改变<code>View</code>的<code>CLICKABLE</code>和<code>LONG_CLICKABLE</code>属性。另外，<code>setOnClickListener</code>会自动将<code>View</code>的<code>CLICKABLE</code>设为<code>true</code>，s<code>etOnLongClickListener</code>则会自动将<code>View</code>的<code>LONG_CLICKABLE</code>设为<code>true</code>。</p>\n<h6 id=\"处理滑动冲突\"><a href=\"#处理滑动冲突\" class=\"headerlink\" title=\"处理滑动冲突\"></a>处理滑动冲突</h6><p>了解了点击事件的处理过程，就可以比较好的处理滑动冲突了</p>\n<p><strong> 父容器拦截处理 </strong><br>击事情都先经过父容器的拦截处理，如果父容器需要此事件就拦截，如果不需要此事件就不拦截。外部拦截法需要重写父容器的onInterceptTouchEvent方法，在内部做相应的拦截即可。<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">onInterceptTouchEvent</span><span class=\"params\">(MotionEvent event)</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">boolean</span> intercepted = <span class=\"keyword\">false</span>;</div><div class=\"line\">    <span class=\"keyword\">int</span> x = (<span class=\"keyword\">int</span>) event.getX();</div><div class=\"line\">    <span class=\"keyword\">int</span> y = (<span class=\"keyword\">int</span>) event.getY();</div><div class=\"line\">    <span class=\"keyword\">switch</span> (event.getAction()) &#123;</div><div class=\"line\">        <span class=\"keyword\">case</span> MotionEvent.ACTION_DOWN: &#123;</div><div class=\"line\">            intercepted = <span class=\"keyword\">false</span>;</div><div class=\"line\">            <span class=\"keyword\">break</span>;</div><div class=\"line\">        &#125;</div><div class=\"line\">        <span class=\"keyword\">case</span> MotionEvent.ACTION_MOVE: &#123;</div><div class=\"line\">            <span class=\"keyword\">if</span> (父容器需要当前点击事件) &#123;</div><div class=\"line\">                intercepted = <span class=\"keyword\">true</span>;</div><div class=\"line\">            &#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">                intercepted = <span class=\"keyword\">false</span>;</div><div class=\"line\">            &#125;</div><div class=\"line\">            <span class=\"keyword\">break</span>;</div><div class=\"line\">        &#125;</div><div class=\"line\">        <span class=\"keyword\">case</span> MotionEvent.ACTION_UP: &#123;</div><div class=\"line\">            intercepted = <span class=\"keyword\">false</span>;</div><div class=\"line\">            <span class=\"keyword\">break</span>;</div><div class=\"line\">        &#125;</div><div class=\"line\">        <span class=\"keyword\">default</span>:</div><div class=\"line\">            <span class=\"keyword\">break</span>;</div><div class=\"line\">    &#125;</div><div class=\"line\">    mLastXIntercept = x;</div><div class=\"line\">    mLastYIntercept = y;</div><div class=\"line\">    <span class=\"keyword\">return</span> intercepted;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>针对不同的滑动冲突，只需要修改父容器需要当前点击事件这个条件即可，其他均不需做修改并且也不能修改。这里对上述代码再描述一下，在<code>onInterceptTouchEvent</code>方法中，首先是<code>ACTION_DOWN</code>这个事件，父容器必须返回<code>false</code>，即不拦截<code>ACTION_DOWN</code>事件，这是因为一旦父容器拦截了<code>ACTION_DOWN</code>，那么后续的<code>ACTION_MOVE</code>和<code>ACTION_UP</code>事件都会直接交由父容器处理，这个时候事件没法再传递给子元素了；其次是<code>ACTION_MOVE</code>事件，这个事件可以根据需要来决定是否拦截，如果父容器需要拦截就返回<code>true</code>，否则返回<code>false</code>；最后是<code>ACTION_UP</code>事件，这里必须要返回false，因为<code>ACTION_UP</code>事件本身没有太多意义。假设事件交由子元素处理，如果父容器在<code>ACTION_UP</code>时返回了<code>true</code>，就会导致子元素无法接收到<code>ACTION_UP</code>事件，这个时候子元素中的<code>onClick</code>事件就无法触发，但是父容器比较特殊，一旦它开始拦截任何一个事件，那么后续的事件都会交给它来处理，而<code>ACTION_UP</code>作为最后一个事件也必定可以传递给父容器，即便父容器的<code>onInterceptTouchEvent</code>方法在<code>ACTION_UP</code>时返回了<code>false</code>。</p>\n<p><strong> 子元素拦截事件 </strong><br>父容器不拦截任何事件，所有的事件都传递给子元素，如果子元素需要此事件就直接消耗掉，否则就交由父容器进行处理，这种方法和Android中的事件分发机制不一致，需要配合<code>requestDisallowInterceptTouchEvent()</code>方法才能正常工作，使用起来较外部拦截法稍显复杂。<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">dispatchTouchEvent</span><span class=\"params\">(MotionEvent event)</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">int</span> x = (<span class=\"keyword\">int</span>) event.getX();</div><div class=\"line\">    <span class=\"keyword\">int</span> y = (<span class=\"keyword\">int</span>) event.getY();</div><div class=\"line\">    <span class=\"keyword\">switch</span> (event.getAction()) &#123;</div><div class=\"line\">        <span class=\"keyword\">case</span> MotionEvent.ACTION_DOWN: &#123;</div><div class=\"line\">            parent.requestDisallowInterceptTouchEvent(<span class=\"keyword\">true</span>);</div><div class=\"line\">            <span class=\"keyword\">break</span>;</div><div class=\"line\">        &#125;</div><div class=\"line\">        <span class=\"keyword\">case</span> MotionEvent.ACTION_MOVE: &#123;</div><div class=\"line\">            <span class=\"keyword\">int</span> deltaX = x -mLastX;</div><div class=\"line\">            <span class=\"keyword\">int</span> deltaY = y -mLastY;</div><div class=\"line\">            <span class=\"keyword\">if</span> (父容器需要此类点击事件)) &#123;</div><div class=\"line\">                parent.requestDisallowInterceptTouchEvent(<span class=\"keyword\">false</span>);</div><div class=\"line\">            &#125;</div><div class=\"line\">            <span class=\"keyword\">break</span>;</div><div class=\"line\">        &#125;</div><div class=\"line\">        <span class=\"keyword\">case</span> MotionEvent.ACTION_UP: &#123;</div><div class=\"line\">            <span class=\"keyword\">break</span>;</div><div class=\"line\">        &#125;</div><div class=\"line\">        <span class=\"keyword\">default</span>:</div><div class=\"line\">            <span class=\"keyword\">break</span>;</div><div class=\"line\">        &#125;</div><div class=\"line\">    mLastX = x;</div><div class=\"line\">    mLastY = y;</div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">super</span>.dispatchTouchEvent(event);</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>除了子元素需要做处理以外，父元素也要默认拦截除了<code>ACTION_DOWN</code>以外的其他事件，这样当子元素调用<code>parent.requestDisallowInterceptTouchEvent(false)</code>方法时，父元素才能继续拦截所需的事件。因为<code>ACTION_DOWN</code>事件并不受<code>FLAG_DISALLOW_INTERCEPT</code>这个标记位的控制，所以一旦父容器拦截<code>ACTION_DOWN</code>事件，那么所有的事件都无法传递到子元素中去，这样内部拦截就无法起作用了。</p>\n<hr>\n<p>以上</p>"},{"title":"elk简单环境搭建 for linux","date":"2017-06-13T11:39:30.000Z","keywords":"elk搭建","_content":"环境：ubuntu 16.06虚拟机：4核8G内存\n在官网下载的`tag.gz`包，官网地址[https://www.elastic.co/webinars/introduction-elk-stack](https://www.elastic.co/webinars/introduction-elk-stack)\n安装版本是**5.4.1**，本文只安装了`Elasticsearch`、`Logstash`、`Kibana`\n<!--more-->\n#### Elasticsearch\n1. 下载压缩包并解压\n2. 在es的根目录下`config/elasticsearch.yml`文件，内容如下\n``` yml\n# Use a descriptive name for the node:\nnode.name: xuannode  ##不要有'-'、'_'、'+'\n# Path to directory where to store the data (separate multiple locations by comma):\n#\npath.data: /home/huangyuan/elk/elasticsearch/data\n#\n# Path to log files:\n#\npath.logs: /home/huangyuan/elk/elasticsearch/logs/*\n#\n# Set the bind address to a specific IP (IPv4 or IPv6):\n#\nnetwork.host: 0.0.0.0\n#\n# Set a custom port for HTTP:\n#\nhttp.port: 9200\ndiscovery.zen.ping.unicast.hosts: [\"0.0.0.0\"]\nhttp.cors.enabled: true\nhttp.cors.allow-origin: \"*\"\n```\n#### logstash\n1. 下载压缩包并解压\n2. 创建一个`logstash.conf`文件，输入以下内容并保存:\n```conf\ninput{\n\tfile {\n\t\tpath => \"/home/huangyuan/elkdata/*.log\"\n\t}\n}\noutput {\n\telasticsearch {\n\t\thosts => \"http://192.168.1.179:9200\"\n\t\tindex => \"logstash-%{+YYYY.MM.dd}\"\n\t}\n    stdout {}\n}\n```\n3. 启动时执行 `bin/logstash -f logstash.conf`\n#### kibana\n1. 下载压缩包并解压缩\n2. 编辑`config/kibana.yml`\n``` yml\n# Kibana is served by a back end server. This setting specifies the port to use.\nserver.port: 5601\n# Specifies the address to which the Kibana server will bind. IP addresses and host names are both valid values.\n# The default is 'localhost', which usually means remote machines will not be able to connect.\n# To allow connections from remote users, set this parameter to a non-loopback address.\nserver.host: \"192.168.1.179\"\n# The Kibana server's name.  This is used for display purposes.\nserver.name: \"xuankibina\"\n# The URL of the Elasticsearch instance to use for all your queries.\nelasticsearch.url: \"http://192.168.1.179:9200\"\n```\n----\n启动的时候依次启动 es、logstash、kibana就可以了\nPS:\n1.在LogStash的配置文件`logstash.conf`中,`input`配置的就是logstash要监听的文件路径，启动之后，先在监听的文件夹中创建一个log文件并输入随意内容。\n2. `elasticsearch`不能用`root`用户启动\n3. 启动es报错`max virtual memory areas vm.max_map_count [65530]is too low, increase to at least [262144]`:解决方法是修改`/etc/sysctl.conf`配置文件，添加`vm.max_map_count=262144`，重启机器才起作用.\n<hr>\n以上","source":"_posts/elk简单环境搭建-for-linux.md","raw":"---\ntitle: elk简单环境搭建 for linux\ndate: 2017-06-13 19:39:30\ntags: [elk,运维]\nkeywords: elk搭建\n---\n环境：ubuntu 16.06虚拟机：4核8G内存\n在官网下载的`tag.gz`包，官网地址[https://www.elastic.co/webinars/introduction-elk-stack](https://www.elastic.co/webinars/introduction-elk-stack)\n安装版本是**5.4.1**，本文只安装了`Elasticsearch`、`Logstash`、`Kibana`\n<!--more-->\n#### Elasticsearch\n1. 下载压缩包并解压\n2. 在es的根目录下`config/elasticsearch.yml`文件，内容如下\n``` yml\n# Use a descriptive name for the node:\nnode.name: xuannode  ##不要有'-'、'_'、'+'\n# Path to directory where to store the data (separate multiple locations by comma):\n#\npath.data: /home/huangyuan/elk/elasticsearch/data\n#\n# Path to log files:\n#\npath.logs: /home/huangyuan/elk/elasticsearch/logs/*\n#\n# Set the bind address to a specific IP (IPv4 or IPv6):\n#\nnetwork.host: 0.0.0.0\n#\n# Set a custom port for HTTP:\n#\nhttp.port: 9200\ndiscovery.zen.ping.unicast.hosts: [\"0.0.0.0\"]\nhttp.cors.enabled: true\nhttp.cors.allow-origin: \"*\"\n```\n#### logstash\n1. 下载压缩包并解压\n2. 创建一个`logstash.conf`文件，输入以下内容并保存:\n```conf\ninput{\n\tfile {\n\t\tpath => \"/home/huangyuan/elkdata/*.log\"\n\t}\n}\noutput {\n\telasticsearch {\n\t\thosts => \"http://192.168.1.179:9200\"\n\t\tindex => \"logstash-%{+YYYY.MM.dd}\"\n\t}\n    stdout {}\n}\n```\n3. 启动时执行 `bin/logstash -f logstash.conf`\n#### kibana\n1. 下载压缩包并解压缩\n2. 编辑`config/kibana.yml`\n``` yml\n# Kibana is served by a back end server. This setting specifies the port to use.\nserver.port: 5601\n# Specifies the address to which the Kibana server will bind. IP addresses and host names are both valid values.\n# The default is 'localhost', which usually means remote machines will not be able to connect.\n# To allow connections from remote users, set this parameter to a non-loopback address.\nserver.host: \"192.168.1.179\"\n# The Kibana server's name.  This is used for display purposes.\nserver.name: \"xuankibina\"\n# The URL of the Elasticsearch instance to use for all your queries.\nelasticsearch.url: \"http://192.168.1.179:9200\"\n```\n----\n启动的时候依次启动 es、logstash、kibana就可以了\nPS:\n1.在LogStash的配置文件`logstash.conf`中,`input`配置的就是logstash要监听的文件路径，启动之后，先在监听的文件夹中创建一个log文件并输入随意内容。\n2. `elasticsearch`不能用`root`用户启动\n3. 启动es报错`max virtual memory areas vm.max_map_count [65530]is too low, increase to at least [262144]`:解决方法是修改`/etc/sysctl.conf`配置文件，添加`vm.max_map_count=262144`，重启机器才起作用.\n<hr>\n以上","slug":"elk简单环境搭建-for-linux","published":1,"updated":"2018-08-04T04:53:05.408Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjl3vbtre0029isdgshoamc5k","content":"<p>环境：ubuntu 16.06虚拟机：4核8G内存<br>在官网下载的<code>tag.gz</code>包，官网地址<a href=\"https://www.elastic.co/webinars/introduction-elk-stack\" target=\"_blank\" rel=\"external\">https://www.elastic.co/webinars/introduction-elk-stack</a><br>安装版本是<strong>5.4.1</strong>，本文只安装了<code>Elasticsearch</code>、<code>Logstash</code>、<code>Kibana</code><br><a id=\"more\"></a></p>\n<h4 id=\"Elasticsearch\"><a href=\"#Elasticsearch\" class=\"headerlink\" title=\"Elasticsearch\"></a>Elasticsearch</h4><ol>\n<li>下载压缩包并解压</li>\n<li>在es的根目录下<code>config/elasticsearch.yml</code>文件，内容如下<figure class=\"highlight yml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\"># Use a descriptive name for the node:</span></div><div class=\"line\">node.name: xuannode  <span class=\"comment\">##不要有'-'、'_'、'+'</span></div><div class=\"line\"><span class=\"comment\"># Path to directory where to store the data (separate multiple locations by comma):</span></div><div class=\"line\"><span class=\"comment\">#</span></div><div class=\"line\">path.data: /home/huangyuan/elk/elasticsearch/data</div><div class=\"line\"><span class=\"comment\">#</span></div><div class=\"line\"><span class=\"comment\"># Path to log files:</span></div><div class=\"line\"><span class=\"comment\">#</span></div><div class=\"line\">path.logs: /home/huangyuan/elk/elasticsearch/logs/*</div><div class=\"line\"><span class=\"comment\">#</span></div><div class=\"line\"><span class=\"comment\"># Set the bind address to a specific IP (IPv4 or IPv6):</span></div><div class=\"line\"><span class=\"comment\">#</span></div><div class=\"line\">network.host: <span class=\"number\">0.0</span><span class=\"number\">.0</span><span class=\"number\">.0</span></div><div class=\"line\"><span class=\"comment\">#</span></div><div class=\"line\"><span class=\"comment\"># Set a custom port for HTTP:</span></div><div class=\"line\"><span class=\"comment\">#</span></div><div class=\"line\">http.port: <span class=\"number\">9200</span></div><div class=\"line\">discovery.zen.ping.unicast.hosts: [<span class=\"string\">\"0.0.0.0\"</span>]</div><div class=\"line\">http.cors.enabled: <span class=\"literal\">true</span></div><div class=\"line\">http.cors.allow-origin: <span class=\"string\">\"*\"</span></div></pre></td></tr></table></figure>\n</li>\n</ol>\n<h4 id=\"logstash\"><a href=\"#logstash\" class=\"headerlink\" title=\"logstash\"></a>logstash</h4><ol>\n<li>下载压缩包并解压</li>\n<li><p>创建一个<code>logstash.conf</code>文件，输入以下内容并保存:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div></pre></td><td class=\"code\"><pre><div class=\"line\">input&#123;</div><div class=\"line\">\tfile &#123;</div><div class=\"line\">\t\tpath =&gt; &quot;/home/huangyuan/elkdata/*.log&quot;</div><div class=\"line\">\t&#125;</div><div class=\"line\">&#125;</div><div class=\"line\">output &#123;</div><div class=\"line\">\telasticsearch &#123;</div><div class=\"line\">\t\thosts =&gt; &quot;http://192.168.1.179:9200&quot;</div><div class=\"line\">\t\tindex =&gt; &quot;logstash-%&#123;+YYYY.MM.dd&#125;&quot;</div><div class=\"line\">\t&#125;</div><div class=\"line\">    stdout &#123;&#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n</li>\n<li><p>启动时执行 <code>bin/logstash -f logstash.conf</code></p>\n<h4 id=\"kibana\"><a href=\"#kibana\" class=\"headerlink\" title=\"kibana\"></a>kibana</h4></li>\n<li>下载压缩包并解压缩</li>\n<li>编辑<code>config/kibana.yml</code><figure class=\"highlight yml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\"># Kibana is served by a back end server. This setting specifies the port to use.</span></div><div class=\"line\">server.port: <span class=\"number\">5601</span></div><div class=\"line\"><span class=\"comment\"># Specifies the address to which the Kibana server will bind. IP addresses and host names are both valid values.</span></div><div class=\"line\"><span class=\"comment\"># The default is 'localhost', which usually means remote machines will not be able to connect.</span></div><div class=\"line\"><span class=\"comment\"># To allow connections from remote users, set this parameter to a non-loopback address.</span></div><div class=\"line\">server.host: <span class=\"string\">\"192.168.1.179\"</span></div><div class=\"line\"><span class=\"comment\"># The Kibana server's name.  This is used for display purposes.</span></div><div class=\"line\">server.name: <span class=\"string\">\"xuankibina\"</span></div><div class=\"line\"><span class=\"comment\"># The URL of the Elasticsearch instance to use for all your queries.</span></div><div class=\"line\">elasticsearch.url: <span class=\"string\">\"http://192.168.1.179:9200\"</span></div></pre></td></tr></table></figure>\n</li>\n</ol>\n<hr>\n<p>启动的时候依次启动 es、logstash、kibana就可以了<br>PS:<br>1.在LogStash的配置文件<code>logstash.conf</code>中,<code>input</code>配置的就是logstash要监听的文件路径，启动之后，先在监听的文件夹中创建一个log文件并输入随意内容。</p>\n<ol>\n<li><code>elasticsearch</code>不能用<code>root</code>用户启动</li>\n<li>启动es报错<code>max virtual memory areas vm.max_map_count [65530]is too low, increase to at least [262144]</code>:解决方法是修改<code>/etc/sysctl.conf</code>配置文件，添加<code>vm.max_map_count=262144</code>，重启机器才起作用.<br><hr><br>以上</li>\n</ol>\n","excerpt":"<p>环境：ubuntu 16.06虚拟机：4核8G内存<br>在官网下载的<code>tag.gz</code>包，官网地址<a href=\"https://www.elastic.co/webinars/introduction-elk-stack\">https://www.elastic.co/webinars/introduction-elk-stack</a><br>安装版本是<strong>5.4.1</strong>，本文只安装了<code>Elasticsearch</code>、<code>Logstash</code>、<code>Kibana</code><br>","more":"</p>\n<h4 id=\"Elasticsearch\"><a href=\"#Elasticsearch\" class=\"headerlink\" title=\"Elasticsearch\"></a>Elasticsearch</h4><ol>\n<li>下载压缩包并解压</li>\n<li>在es的根目录下<code>config/elasticsearch.yml</code>文件，内容如下<figure class=\"highlight yml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\"># Use a descriptive name for the node:</span></div><div class=\"line\">node.name: xuannode  <span class=\"comment\">##不要有'-'、'_'、'+'</span></div><div class=\"line\"><span class=\"comment\"># Path to directory where to store the data (separate multiple locations by comma):</span></div><div class=\"line\"><span class=\"comment\">#</span></div><div class=\"line\">path.data: /home/huangyuan/elk/elasticsearch/data</div><div class=\"line\"><span class=\"comment\">#</span></div><div class=\"line\"><span class=\"comment\"># Path to log files:</span></div><div class=\"line\"><span class=\"comment\">#</span></div><div class=\"line\">path.logs: /home/huangyuan/elk/elasticsearch/logs/*</div><div class=\"line\"><span class=\"comment\">#</span></div><div class=\"line\"><span class=\"comment\"># Set the bind address to a specific IP (IPv4 or IPv6):</span></div><div class=\"line\"><span class=\"comment\">#</span></div><div class=\"line\">network.host: <span class=\"number\">0.0</span><span class=\"number\">.0</span><span class=\"number\">.0</span></div><div class=\"line\"><span class=\"comment\">#</span></div><div class=\"line\"><span class=\"comment\"># Set a custom port for HTTP:</span></div><div class=\"line\"><span class=\"comment\">#</span></div><div class=\"line\">http.port: <span class=\"number\">9200</span></div><div class=\"line\">discovery.zen.ping.unicast.hosts: [<span class=\"string\">\"0.0.0.0\"</span>]</div><div class=\"line\">http.cors.enabled: <span class=\"literal\">true</span></div><div class=\"line\">http.cors.allow-origin: <span class=\"string\">\"*\"</span></div></pre></td></tr></table></figure>\n</li>\n</ol>\n<h4 id=\"logstash\"><a href=\"#logstash\" class=\"headerlink\" title=\"logstash\"></a>logstash</h4><ol>\n<li>下载压缩包并解压</li>\n<li><p>创建一个<code>logstash.conf</code>文件，输入以下内容并保存:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div></pre></td><td class=\"code\"><pre><div class=\"line\">input&#123;</div><div class=\"line\">\tfile &#123;</div><div class=\"line\">\t\tpath =&gt; &quot;/home/huangyuan/elkdata/*.log&quot;</div><div class=\"line\">\t&#125;</div><div class=\"line\">&#125;</div><div class=\"line\">output &#123;</div><div class=\"line\">\telasticsearch &#123;</div><div class=\"line\">\t\thosts =&gt; &quot;http://192.168.1.179:9200&quot;</div><div class=\"line\">\t\tindex =&gt; &quot;logstash-%&#123;+YYYY.MM.dd&#125;&quot;</div><div class=\"line\">\t&#125;</div><div class=\"line\">    stdout &#123;&#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n</li>\n<li><p>启动时执行 <code>bin/logstash -f logstash.conf</code></p>\n<h4 id=\"kibana\"><a href=\"#kibana\" class=\"headerlink\" title=\"kibana\"></a>kibana</h4></li>\n<li>下载压缩包并解压缩</li>\n<li>编辑<code>config/kibana.yml</code><figure class=\"highlight yml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\"># Kibana is served by a back end server. This setting specifies the port to use.</span></div><div class=\"line\">server.port: <span class=\"number\">5601</span></div><div class=\"line\"><span class=\"comment\"># Specifies the address to which the Kibana server will bind. IP addresses and host names are both valid values.</span></div><div class=\"line\"><span class=\"comment\"># The default is 'localhost', which usually means remote machines will not be able to connect.</span></div><div class=\"line\"><span class=\"comment\"># To allow connections from remote users, set this parameter to a non-loopback address.</span></div><div class=\"line\">server.host: <span class=\"string\">\"192.168.1.179\"</span></div><div class=\"line\"><span class=\"comment\"># The Kibana server's name.  This is used for display purposes.</span></div><div class=\"line\">server.name: <span class=\"string\">\"xuankibina\"</span></div><div class=\"line\"><span class=\"comment\"># The URL of the Elasticsearch instance to use for all your queries.</span></div><div class=\"line\">elasticsearch.url: <span class=\"string\">\"http://192.168.1.179:9200\"</span></div></pre></td></tr></table></figure>\n</li>\n</ol>\n<hr>\n<p>启动的时候依次启动 es、logstash、kibana就可以了<br>PS:<br>1.在LogStash的配置文件<code>logstash.conf</code>中,<code>input</code>配置的就是logstash要监听的文件路径，启动之后，先在监听的文件夹中创建一个log文件并输入随意内容。</p>\n<ol>\n<li><code>elasticsearch</code>不能用<code>root</code>用户启动</li>\n<li>启动es报错<code>max virtual memory areas vm.max_map_count [65530]is too low, increase to at least [262144]</code>:解决方法是修改<code>/etc/sysctl.conf</code>配置文件，添加<code>vm.max_map_count=262144</code>，重启机器才起作用.<br><hr><br>以上</li>\n</ol>"},{"title":"View绘制过程","date":"2018-07-29T14:35:46.000Z","keywords":"View绘制过程","_content":"抄的《Android开发艺术探索》第四章\n`ViewRoot`对应于`ViewRootImpl`类，它是连接`WindowManager`和`DecorView`的纽带，`View`的三大流程均是通过`ViewRoot`来完成的。在`ActivityThread`中，当`Activity`对象被创建完毕后，会将`DecorView`添加到`Window`中，同时会创建`ViewRootImpl`对象，并将`ViewRootImpl`对象和`DecorView`建立关联，`View`的绘制流程是从`ViewRoot`的`performTraversals`方法开始的，它经过`measure`、`layout`和`draw`三个过程才能最终将一个`View`绘制出来，其中`measure`用来测量View的宽和高，`layout`用来确定View在父容器中的放置位置，而`draw`则负责将View绘制在屏幕上。\n\n<!--more-->\n`performTraversals`会依次调用`performMeasure`、p`erformLayout`和`performDraw`三个方法，这三个方法分别完成顶级`View`的`measure`、`layout`和`draw`这三大流程，其中在`performMeasure`中会调用`measure`方法，在`measure`方法中又会调用`onMeasure`方法，在`onMeasure`方法中则会对所有的子元素进行`measure`过程，这个时候`measure`流程就从父容器传递到子元素中了，这样就完成了一次`measure`过程。接着子元素会重复父容器的`measure`过程，如此反复就完成了整个`View`树的遍历。同理，`performLayout`和`performDraw`的传递流程和`performMeasure`是类似的，唯一不同的是，`performDraw`的传递过程是在`draw`方法中通过`dispatchDraw`来实现的，不过这并没有本质区别。\n\n`measure`过程决定了`View`的宽/高，`Measure`完成以后，可以通过`getMeasuredWidth`和`getMeasuredHeight`方法来获取到`View`测量后的宽/高，在几乎所有的情况下它都等同于`View`最终的宽/高，但是特殊情况除外，这点在本章后面会进行说明。`Layout`过程决定了`View`的四个顶点的坐标和实际的View的宽/高，完成以后，可以通过`getTop`、`getBottom`、`getLeft`和`getRight`来拿到`View`的四个顶点的位置，并可以通过`getWidth`和`getHeight`方法来拿到`View`的最终宽/高。`Draw`过程则决定了`View`的显示，只有`draw`方法完成以后`View`的内容才能呈现在屏幕上。\n\n`DecorView`作为顶级`View`，一般情况下它内部会包含一个竖直方向的`LinearLayout`，在这个`LinearLayout`里面有上下两个部分（具体情况和Android版本及主题有关），上面是标题栏，下面是内容栏。在`Activity`中我们通过`setContentView`所设置的布局文件其实就是被加到内容栏之中的，而内容栏的id是`content`，因此可以理解为Activity指定布局的方法不叫setview而叫`setContentView`，因为我们的布局的确加到了`id`为`content`的`FrameLayout`中。如何得到`content`呢？可以这样：`ViewGroup  content=  findViewById(R.android.id.content)`。如何得到我们设置的`View`呢？可以这样：`content.getChildAt(0)`。同时，通过源码我们可以知道，`DecorView`其实是一个`FrameLayout`，`View`层的事件都先经过`DecorView`，然后才传递给我们的View。\n\n#### MeasureSpec\n`MeasureSpec`在很大程度上决定了一个View的尺寸规格，之所以说是很大程度上是因为这个过程还受父容器的影响，因为父容器影响View的`MeasureSpec`的创建过程。在测量过程中，系统会将View的`LayoutParams`根据父容器所施加的规则转换成对应的`MeasureSpec`，然后再根据这个`measureSpec`来测量出`View`的宽/高。这里的宽/高是测量宽/高，不一定等于`View`的最终宽/高。\n`MeasureSpec`代表一个32位int值，高2位代表`SpecMode`，低30位代表`SpecSize`，`SpecMode`是指测量模式，而`SpecSize`是指在某种测量模式下的规格大小。\n``` java\nprivate static final int MODE_SHIFT = 30;\nprivate static final int MODE_MASK = 0x3 << MODE_SHIFT;\npublic static final int UNSPECIFIED = 0 << MODE_SHIFT;\npublic static final int EXACTLY = 1 << MODE_SHIFT;\npublic static final int AT_MOST = 2 << MODE_SHIFT;\npublic static int makeMeasureSpec(int size,int mode) {\n    if (sUseBrokenMakeMeasureSpec) {\n        return size + mode;\n    } else {\n        return (size & ~MODE_MASK) | (mode & MODE_MASK);\n    }\n}\npublic static int getMode(int measureSpec) {\n    return (measureSpec & MODE_MASK);\n}\npublic static int getSize(int measureSpec) {\n    return (measureSpec & ~MODE_MASK);\n}\n```\n`MeasureSpec`通过将`SpecMode`和`SpecSize`打包成一个int值来避免过多的对象内存分配，为了方便操作，其提供了打包和解包方法。`SpecMode`和`SpecSize`也是一个int值，一组`SpecMode`和`SpecSize`可以打包为一个`MeasureSpec`，而一个`MeasureSpec`可以通过解包的形式来得出其原始的`SpecMode`和`SpecSize`，需要注意的是这里提到的`MeasureSpec`是指`MeasureSpec`所代表的int值，而并非`MeasureSpec`本身。\nSpecMode有三类，每一类都表示特殊的含义，如下所示。\n** UNSPECIFIED **\n父容器不对View有任何限制，要多大给多大，这种情况一般用于系统内部，表示一种测量的状态。\n** EXACTLY **\n父容器已经检测出View所需要的精确大小，这个时候View的最终大小就是SpecSize所指定的值。它对应于LayoutParams中的match_parent和具体的数值这两种模式。\n** AT_MOST **\n父容器指定了一个可用大小即SpecSize，View的大小不能大于这个值，具体是什么值要看不同View的具体实现。它对应于LayoutParams中的wrap_content。\n\n###### MeasureSpec和LayoutParams\n在View测量的时候，系统会将`LayoutParams`在父容器的约束下转换成对应的`MeasureSpec`，然后再根据这个`MeasureSpec`来确定View测量后的宽/高。需要注意的是，`MeasureSpec`不是唯一由`LayoutParams`决定的，`LayoutParams`需要和父容器一起才能决定`View`的`MeasureSpec`，从而进一步决定View的宽/高。另外，对于`顶级View`（即DecorView）和`普通View`来说，`MeasureSpec`的转换过程略有不同。对于`DecorView`，其`MeasureSpec`由窗口的尺寸和其自身的`LayoutParams`来共同确定；对于普通View，其`MeasureSpec`由父容器的`MeasureSpec`和自身的`LayoutParams`来共同决定，`MeasureSpec`一旦确定后，`onMeasure`中就可以确定`View`的测量宽/高。\n对于`DecorView`来说，在`ViewRootImpl`中的`measureHierarchy`方法中有如下一段代码，它展示了`DecorView`的`MeasureSpec`的创建过程，其中`desiredWindowWidth`和`desiredWindowHeight`是屏幕的尺寸:\n``` java\nchildWidthMeasureSpec = getRootMeasureSpec(desiredWindowWidth,lp.width);\nchildHeightMeasureSpec = getRootMeasureSpec(desiredWindowHeight,lp.height);\nperformMeasure(childWidthMeasureSpec,childHeightMeasureSpec);\n\nprivate static int getRootMeasureSpec(int windowSize,int rootDimension) {\n    int measureSpec;\n    switch (rootDimension) {\n        case ViewGroup.LayoutParams.MATCH_PARENT:\n            // Window can't resize. Force root view to be windowSize.\n            measureSpec = MeasureSpec.makeMeasureSpec(windowSize,MeasureSpec.EXACTLY);\n            break;\n        case ViewGroup.LayoutParams.WRAP_CONTENT:\n            // Window can resize. Set max size for root view.\n            measureSpec = MeasureSpec.makeMeasureSpec(windowSize,MeasureSpec.AT_MOST);\n            break;\n        default:\n            // Window wants to be an exact size. Force root view to be that size.\n            measureSpec = MeasureSpec.makeMeasureSpec(rootDimension,Measure-Spec.EXACTLY);\n            break;\n    }\n    return measureSpec;\n}\n```\n通过上述代码，`DecorView`的`MeasureSpec`的产生过程就很明确了，具体来说其遵守如下规则，根据它的`LayoutParams`中的宽/高的参数来划分。\n* LayoutParams.MATCH_PARENT：精确模式，大小就是窗口的大小；\n* LayoutParams.WRAP_CONTENT：最大模式，大小不定，但是不能超过窗口的大小；\n* 固定大小（比如100dp）：精确模式，大小为LayoutParams中指定的大小。\n对于普通`View`来说，这里是指我们布局中的`View`，`View`的`measure`过程由`ViewGroup`传递而来，先看一下`ViewGroup`的`measureChildWithMargins`方法：\n``` java\nprotected void measureChildWithMargins(View child,int parentWidthMeasureSpec,int widthUsed,int parentHeightMeasureSpec,int heightUsed) {\n    final MarginLayoutParams lp = (MarginLayoutParams) child.getLayout-Params();\n    final int childWidthMeasureSpec = getChildMeasureSpec(parentWidthMeasureSpec,mPaddingLeft + mPaddingRight + lp.leftMargin + lp.rightMargin+ widthUsed,lp.width);\n    final int childHeightMeasureSpec = getChildMeasureSpec(parentHeight-MeasureSpec,mPaddingTop + mPaddingBottom + lp.topMargin + lp.bottomMargin+ heightUsed,lp.height);\n    child.measure(childWidthMeasureSpec,childHeightMeasureSpec);\n}\n```\n上述方法会对子元素进行`measure`，在调用子元素的`measure`方法之前会先通过`getChildMeasureSpec`方法来得到子元素的`MeasureSpec`。从代码来看，很显然，子元素的`MeasureSpec`的创建与父容器的`MeasureSpec`和子元素本身的`LayoutParam`s有关，此外还和`View`的`margin`及`padding`有关，具体情况可以看一下`ViewGroup`的`getChildMeasureSpec`方法，如下所示:\n``` java\npublic static int getChildMeasureSpec(int spec,int padding,int child-Dimension) {\n    int specMode = MeasureSpec.getMode(spec);\n    int specSize = MeasureSpec.getSize(spec);\n    int size = Math.max(0,specSize -padding);\n    int resultSize = 0;\n    int resultMode = 0;\n    switch (specMode) {\n        // Parent has imposed an exact size on us\n        case MeasureSpec.EXACTLY:\n            if (childDimension => 0) {\n                resultSize = childDimension;\n                resultMode = MeasureSpec.EXACTLY;\n            } else if (childDimension == LayoutParams.MATCH_PARENT) {\n                // Child wants to be our size. So be it.\n                resultSize = size;\n                resultMode = MeasureSpec.EXACTLY;\n            } else if (childDimension == LayoutParams.WRAP_CONTENT) {\n                // Child wants to determine its own size. It can't be\n                // bigger than us.\n                resultSize = size;\n                resultMode = MeasureSpec.AT_MOST;\n            }\n            break;\n        // Parent has imposed a maximum size on us\n        case MeasureSpec.AT_MOST:\n            if (childDimension => 0) {\n                // Child wants a specific size... so be it\n                resultSize = childDimension;\n                resultMode = MeasureSpec.EXACTLY;\n            } else if (childDimension == LayoutParams.MATCH_PARENT) {\n                // Child wants to be our size,but our size is not fixed.\n                // Constrain child to not be bigger than us.\n                resultSize = size;\n                resultMode = MeasureSpec.AT_MOST;\n            } else if (childDimension == LayoutParams.WRAP_CONTENT) {\n                // Child wants to determine its own size. It can't be\n                // bigger than us.\n                resultSize = size;\n                resultMode = MeasureSpec.AT_MOST;\n            }\n            break;\n        // Parent asked to see how big we want to be\n        case MeasureSpec.UNSPECIFIED:\n            if (childDimension => 0) {\n                // Child wants a specific size... let him have it\n                resultSize = childDimension;\n                resultMode = MeasureSpec.EXACTLY;\n            } else if (childDimension == LayoutParams.MATCH_PARENT) {\n                // Child wants to be our size... find out how big it should\n                // be\n                resultSize = 0;\n                resultMode = MeasureSpec.UNSPECIFIED;\n            } else if (childDimension == LayoutParams.WRAP_CONTENT) {\n                // Child wants to determine its own size.... find out how\n                // big it should be\n                resultSize = 0;\n                resultMode = MeasureSpec.UNSPECIFIED;\n            }\n            break;\n        }\n    return MeasureSpec.makeMeasureSpec(resultSize,resultMode);\n}\n```\n它的主要作用是根据父容器的`MeasureSpec`同时结合View本身的`LayoutParams`来确定子元素的`MeasureSpec`，参数中的`padding`是指父容器中已占用的空间大小，因此子元素可用的大小为父容器的尺寸减去`padding`，具体代码如下所示:\n``` java\n    int specSize = MeasureSpec.getSize(spec);\n    int size = Math.max(0,specSize -padding);\n```\n这里简单说一下，当View采用固定宽/高的时候，不管父容器的`MeasureSpec`是什么，`View`的`MeasureSpec`都是精确模式并且其大小遵循`Layoutparams`中的大小。当`View`的宽/高是`match_parent`时，如果父容器的模式是精准模式，那么`View`也是精准模式并且其大小是父容器的剩余空间；如果父容器是最大模式，那么`View`也是最大模式并且其大小不会超过父容器的剩余空间。当`View`的宽/高是`wrap_content`时，不管父容器的模式是精准还是最大化，`View`的模式总是最大化并且大小不能超过父容器的剩余空间。在我们的分析中漏掉了`UNSPECIFIED`模式，那是因为这个模式主要用于系统内部多次Measure的情形，一般来说，我们不需要关注此模式。\n\n#### View的工作流程\n##### measure过程\nmeasure过程要分情况来看，如果只是一个原始的`View`，那么通过`measure`方法就完成了其测量过程，如果是一个`ViewGroup`，除了完成自己的测量过程外，还会遍历去调用所有子元素的`measure`方法，各个子元素再递归去执行这个流程。\n** View的measure过程 **\n`View`的`measure`过程由其`measure`方法来完成，`measure`方法是一个`final`类型的方法，这意味着子类不能重写此方法，在`View`的`measure`方法中会去调用`View`的`onMeasure`方法，因此只需要看`onMeasure`的实现即可：\n``` java\nprotected void onMeasure(int widthMeasureSpec,int heightMeasureSpec) {\n    setMeasuredDimension(getDefaultSize(getSuggestedMinimumWidth(),widthMeasureSpec),getDefaultSize(getSuggestedMinimumHeight(),heightMeasureSpec));\n}\npublic static int getDefaultSize(int size,int measureSpec) {\n    int result = size;\n    int specMode = MeasureSpec.getMode(measureSpec);\n    int specSize = MeasureSpec.getSize(measureSpec);\n    switch (specMode) {\n        case MeasureSpec.UNSPECIFIED:\n            result = size;\n        break;\n        case MeasureSpec.AT_MOST:\n        case MeasureSpec.EXACTLY:\n            result = specSize;\n        break;\n    }\n    return result;\n}\n```\n可以看出，`getDefaultSize`这个方法的逻辑很简单，对于我们来说，我们只需要看`AT_MOST`和`EXACTLY`这两种情况。简单地理解，其实`getDefaultSize`返回的大小就是`measureSpec`中的`specSize`，而这个`specSize`就是`View`测量后的大小，这里多次提到测量后的大小，是因为`View`最终的大小是在`layout`阶段确定的，所以这里必须要加以区分，但是几乎所有情况下`View`的测量大小和最终大小是相等的。\n至于`UNSPECIFIED`这种情况，一般用于系统内部的测量过程，在这种情况下，`View`的大小为`getDefaultSize`的第一个参数`size`，即宽/高分别为`getSuggestedMinimumWidth`和`getSuggestedMinimumHeight`这两个方法的返回值，看一下它们的源码:\n``` java\nprotected int getSuggestedMinimumWidth() {\n    return (mBackground == null) ? mMinWidth : max(mMinWidth,mBackground.getMinimumWidth());\n}\nprotected int getSuggestedMinimumHeight() {\n    return (mBackground == null) ? mMinHeight : max(mMinHeight,mBackground.getMinimumHeight());\n}\n```\n这里只分析`getSuggestedMinimumWidth`方法的实现，`getSuggestedMinimumHeight`和它的实现原理是一样的。从`getSuggestedMinimumWidth`的代码可以看出，如果`View`没有设置背景，那么`View`的宽度为`mMinWidth`，而`mMinWidth`对应于`android:minWidth`这个属性所指定的值，因此`View`的宽度即为`android:minWidth`属性所指定的值。这个属性如果不指定，那么`mMinWidth`则默认为0；如果`View`指定了背景，则`View`的宽度为`max(mMinWidth,mBackground.getMinimumWidth())`。`mMinWidth`的含义我们已经知道了，那么`mBackground.getMinimumWidth()`是什么呢？我们看一下`Drawable`的`getMinimumWidth`方法，如下所示:\n``` java\npublic int getMinimumWidth() {\n    final int intrinsicWidth = getIntrinsicWidth();\n    return intrinsicWidth > 0 ? intrinsicWidth : 0;\n}\n```\n可以看出，`getMinimumWidth`返回的就是`Drawable`的原始宽度，前提是这个`Drawable`有原始宽度，否则就返回0。\n这里再总结一下`getSuggestedMinimumWidth`的逻辑：如果`View`没有设置背景，那么返回`android:minWidth`这个属性所指定的值，这个值可以为0；如果`View`设置了背景，则返回`android:minWidth`和背景的最小宽度这两者中的最大值，`getSuggestedMinimumWidth`和`getSuggestedMinimumHeight`的返回值就是`View`在`UNSPECIFIED`情况下的测量宽/高。\n从`getDefaultSize`方法的实现来看，`View`的宽/高由`specSize`决定，所以我们可以得出如下结论：直接继承`View`的自定义控件需要重写`onMeasure`方法并设置`wrap_content`时的自身大小，否则在布局中使用`wrap_content`就相当于使用`match_parent`。\n从上述代码中我们知道，如果`View`在布局中使用`wrap_content`，那么它的`specMode`是`AT_MOST`模式，在这种模式下，它的宽/高等于`specSize`；这种情况下`View`的`specSize`是p`arentSize`，而`parentSize`是父容器中目前可以使用的大小，也就是父容器当前剩余的空间大小。很显然，`View`的宽/高就等于父容器当前剩余的空间大小，这种效果和在布局中使用`match_parent`完全一致。如何解决这个问题呢？也很简单，代码如下所示：\n``` java\nprotected void onMeasure(int widthMeasureSpec,int heightMeasureSpec) {\n    super.onMeasure(widthMeasureSpec,heightMeasureSpec);\n    int widthSpecMode = MeasureSpec.getMode(widthMeasureSpec);\n    int widthSpecSize = MeasureSpec.getSize(widthMeasureSpec);\n    int heightSpecMode = MeasureSpec.getMode(heightMeasureSpec);\n    int heightSpecSize = MeasureSpec.getSize(heightMeasureSpec);\n    if (widthSpecMode == MeasureSpec.AT_MOST && heightSpecMode == MeasureSpec.AT_MOST) {\n        setMeasuredDimension(mWidth,mHeight);\n    } else if (widthSpecMode == MeasureSpec.AT_MOST) {\n        setMeasuredDimension(mWidth,heightSpecSize);\n    } else if (heightSpecMode == MeasureSpec.AT_MOST) {\n        setMeasuredDimension(widthSpecSize,mHeight);\n    }\n}\n```\n在上面的代码中，我们只需要给`View`指定一个默认的内部宽/高（`mWidth`和`mHeight`），并在`wrap_content`时设置此宽/高即可。对于非`wrap_content`情形，我们沿用系统的测量值即可，至于这个默认的内部宽/高的大小如何指定，这个没有固定的依据，根据需要灵活指定即可。如果查看`TextView`、`ImageView`等的源码就可以知道，针对`wrap_content`情形，它们的`onMeasure`方法均做了特殊处理。\n\n** ViewGroup的measure过程 **\n对于`ViewGroup`来说，除了完成自己的`measure`过程以外，还会遍历去调用所有子元素的`measure`方法，各个子元素再递归去执行这个过程。和`View`不同的是，`ViewGroup`是一个抽象类，因此它没有重写`View`的`onMeasure`方法，但是它提供了一个叫`measureChildren`的方法，如下所示。\n``` java\nprotected void measureChildren(int widthMeasureSpec,int heightMeasureSpec) {\n    final int size = mChildrenCount;\n    final View[] children = mChildren;\n    for (int i = 0; i < size; ++i) {\n        final View child = children[i];\n        if ((child.mViewFlags & VISIBILITY_MASK) != GONE) {\n            measureChild(child,widthMeasureSpec,heightMeasureSpec);\n        }\n    }\n}\n```\n从上述代码来看，`ViewGroup`在`measure`时，会对每一个子元素进行`measure`，`measureChild`这个方法的实现也很好理解，如下所示\n``` java\nprotected void measureChild(View child,int parentWidthMeasureSpec,int parentHeightMeasureSpec) {\n    final LayoutParams lp = child.getLayoutParams();\n    final int childWidthMeasureSpec = getChildMeasureSpec(parentWidth-MeasureSpec,mPaddingLeft + mPaddingRight,lp.width);\n    final int childHeightMeasureSpec = getChildMeasureSpec(parentHeight-MeasureSpec,mPaddingTop + mPaddingBottom,lp.height);\n    child.measure(childWidthMeasureSpec,childHeightMeasureSpec);\n}\n```\n很显然，`measureChild`的思想就是取出子元素的`LayoutParams`，然后再通过`getChildMeasureSpec`来创建子元素的`MeasureSpec`，接着将`MeasureSpec`直接传递给`View`的`measure`方法来进行测量。我们知道，`ViewGroup`并没有定义其测量的具体过程，这是因为`ViewGroup`是一个抽象类，其测量过程的`onMeasure`方法需要各个子类去具体实现，比如`LinearLayout`、`RelativeLayout`等。\n\n##### layout过程\n`Layout`的作用是`ViewGroup`用来确定子元素的位置，当`ViewGroup`的位置被确定后，它在`onLayout`中会遍历所有的子元素并调用其`layout`方法，在`layout`方法中`onLayout`方法又会被调用。`Layout`过程和`measure`过程相比就简单多了，`layout`方法确定`View`本身的位置，而`onLayout`方法则会确定所有子元素的位置，先看`View`的`layout`方法，如下所示。\n``` java\npublic void layout(int l,int t,int r,int b) {\n    if ((mPrivateFlags3 & PFLAG3_MEASURE_NEEDED_BEFORE_LAYOUT) != 0) {\n        onMeasure(mOldWidthMeasureSpec,mOldHeightMeasureSpec);\n        mPrivateFlags3 &= ~PFLAG3_MEASURE_NEEDED_BEFORE_LAYOUT;\n    }\n    int oldL = mLeft;\n    int oldT = mTop;\n    int oldB = mBottom;\n    int oldR = mRight;\n    boolean changed = isLayoutModeOptical(mParent) ?setOpticalFrame(l,t,r,b) : setFrame(l,t,r,b);\n    if (changed || (mPrivateFlags & PFLAG_LAYOUT_REQUIRED) == PFLAG_LAYOUT_REQUIRED) {\n        onLayout(changed,l,t,r,b);\n        mPrivateFlags &= ~PFLAG_LAYOUT_REQUIRED;\n        ListenerInfo li = mListenerInfo;\n        if (li != null && li.mOnLayoutChangeListeners != null) {\n            ArrayList<OnLayoutChangeListener> listenersCopy =(ArrayList<OnLayoutChangeListener>)li.mOnLayout-ChangeListeners.clone();\n            int numListeners = listenersCopy.size();\n            for (int i = 0; i < numListeners; ++i) {\n                listenersCopy.get(i).onLayoutChange(this,l,t,r,b,oldL,oldT,oldR,oldB);\n            }\n        }\n    }\n    mPrivateFlags &= ~PFLAG_FORCE_LAYOUT;\n    mPrivateFlags3 |= PFLAG3_IS_LAID_OUT;\n}\n```\n`layout`方法的大致流程如下：首先会通过`setFrame`方法来设定`View`的四个顶点的位置，即初始化`mLeft`、`mRight`、`mTop`和`mBottom`这四个值，`View`的四个顶点一旦确定，那么`View`在父容器中的位置也就确定了；接着会调用`onLayout`方法，这个方法的用途是父容器确定子元素的位置，和`onMeasure`方法类似，`onLayout`的具体实现同样和具体的布局有关，所以`View`和`ViewGroup`均没有真正实现`onLayout`方法。接下来，我们可以看一下`LinearLayout`的`onLayout`方法，如下所示。\n``` java\nprotected void onLayout(boolean changed,int l,int t,int r,int b) {\n    if (mOrientation == VERTICAL) {\n        layoutVertical(l,t,r,b);\n    } else {\n        layoutHorizontal(l,t,r,b);\n    }\n}\n```\n`LinearLayout`中`onLayout`的实现逻辑和`onMeasure`的实现逻辑类似，这里选择`layoutVertical`继续讲解，为了更好地理解其逻辑，这里只给出了主要的代码：\n``` java\nvoid layoutVertical(int left,int top,int right,int bottom) {\n    ......\n    final int count = getVirtualChildCount();\n    for (int i = 0; i < count; i++) {\n        final View child = getVirtualChildAt(i);\n        if (child == null) {\n            childTop += measureNullChild(i);\n        } else if (child.getVisibility() != GONE) {\n            final int childWidth = child.getMeasuredWidth();\n            final int childHeight = child.getMeasuredHeight();\n            final LinearLayout.LayoutParams lp =(LinearLayout.LayoutParams) child.getLayoutParams();\n            ......\n            if (hasDividerBeforeChildAt(i)) {\n                childTop += mDividerHeight;\n            }\n            childTop += lp.topMargin;\n            setChildFrame(child,childLeft,childTop + getLocationOffset(child),childWidth,childHeight);\n            childTop += childHeight + lp.bottomMargin + getNextLocation-Offset(child);\n            i += getChildrenSkipCount(child,i);\n        }\n    }\n}\n```\n这里分析一下`layoutVertical`的代码逻辑，可以看到，此方法会遍历所有子元素并调用`setChildFrame`方法来为子元素指定对应的位置，其中`childTop`会逐渐增大，这就意味着后面的子元素会被放置在靠下的位置，这刚好符合竖直方向的`LinearLayout`的特性。至于`setChildFrame`，它仅仅是调用子元素的`layout`方法而已，这样父元素在`layout`方法中完成自己的定位以后，就通过`onLayout`方法去调用子元素的`layout`方法，子元素又会通过自己的`layout`方法来确定自己的位置，这样一层一层地传递下去就完成了整个`View`树的`layout`过程。`setChildFrame`方法的实现如下所示。\n``` java\nprivate void setChildFrame(View child,int left,int top,int width,int height) {\n    child.layout(left,top,left + width,top + height);\n}\n```\n我们注意到，setChildFrame中的width和height实际上就是子元素的测量宽/高，从下面的代码可以看出这一点：\n``` java\n    final int childWidth = child.getMeasuredWidth();\n    final int childHeight = child.getMeasuredHeight();\n    setChildFrame(child,childLeft,childTop + getLocationOffset(child),childWidth,childHeight);\n```\n\n而在`layout`方法中会通过`setFrame`去设置子元素的四个顶点的位置，在`setFrame`中有如下几句赋值语句，这样一来子元素的位置就确定了：\n``` java\n    mLeft = left;\n    mTop = top;\n    mRight = right;\n    mBottom = bottom;\n```\n`View`的测量宽/高和最终/宽高有什么区别？这个问题可以具体为：`View`的`getMeasuredWidth`和`getWidth`这两个方法有什么区别，至于`getMeasuredHeight`和`getHeight`的区别和前两者完全一样。为了回答这个问题，首先，我们看一下getwidth和getHeight这两个方法的具体实现：\n``` java\npublic final int getWidth() {\n    return mRight -mLeft;\n}\npublic final int getHeight() {\n    return mBottom -mTop;\n}\n``` \n\n从`getWidth`和`getHeight`的源码再结合`mLeft`、`mRight`、`mTop`和`mBottom`这四个变量的赋值过程来看，`getWidth`方法的返回值刚好就是`View`的测量宽度，而`getHeight`方法的返回值也刚好就是`View`的测量高度。经过上述分析，现在我们可以回答这个问题了：在`View`的默认实现中，`View`的测量宽/高和最终宽/高是相等的，只不过测量宽/高形成于`View`的`measure`过程，而最终宽/高形成于`View`的`layout`过程，即两者的赋值时机不同，测量宽/高的赋值时机稍微早一些。因此，在日常开发中，我们可以认为`View`的`测量宽/高`就`等于``最终宽/高`，但是的确存在某些特殊情况会导致两者不一致.\n\n##### draw过程\nDraw过程就比较简单了，它的作用是将View绘制到屏幕上面。View的绘制过程遵循\n如下几步：\n* 绘制背景background.draw(canvas)。\n* 绘制自己（onDraw）。\n* 绘制children（dispatchDraw）。\n* 绘制装饰（onDrawScrollBars）。\n这一点通过draw方法的源码可以明显看出来，如下所示。\n\n``` java\n    public void draw(Canvas canvas) {\n    final int privateFlags = mPrivateFlags;\n    final boolean dirtyOpaque = (privateFlags & PFLAG_DIRTY_MASK) == PFLAG_DIRTY_OPAQUE &&(mAttachInfo == null || !mAttachInfo.mIgnoreDirtyState);\n    mPrivateFlags = (privateFlags & ~PFLAG_DIRTY_MASK) | PFLAG_DRAWN;\n    /*\n    * Draw traversal performs several drawing steps which must be executed\n    * in the appropriate order:\n    *\n    * 1. Draw the background\n    * 2. If necessary,save the canvas' layers to prepare for fading\n    * 3. Draw view's content\n    * 4. Draw children\n    * 5. If necessary,draw the fading edges and restore layers\n    * 6. Draw decorations (scrollbars for instance)\n    */\n    // Step 1,draw the background,if needed\n    int saveCount;\n    if (!dirtyOpaque) {\n        drawBackground(canvas);\n    }\n    // skip step 2 & 5 if possible (common case)\n    final int viewFlags = mViewFlags;\n    boolean horizontalEdges = (viewFlags & FADING_EDGE_HORIZONTAL) != 0;\n    boolean verticalEdges = (viewFlags & FADING_EDGE_VERTICAL) != 0;\n    if (!verticalEdges && !horizontalEdges) {\n        // Step 3,draw the content\n        if (!dirtyOpaque) onDraw(canvas);\n            // Step 4,draw the children\n        dispatchDraw(canvas);\n        // Step 6,draw decorations (scrollbars)\n        onDrawScrollBars(canvas);\n        if (mOverlay != null && !mOverlay.isEmpty()) {\n            mOverlay.getOverlayView().dispatchDraw(canvas);\n        }\n        // we're done...\n        return;\n    }\n    ...\n}\n```\nView绘制过程的传递是通过dispatchDraw来实现的，dispatchDraw会遍历调用所有子元素的draw方法，如此draw事件就一层层地传递了下去。View有一个特殊的方法setWillNotDraw，先看一下它的源码，如下所示。\n``` java\n    /**\n    * If this view doesn't do any drawing on its own,set this flag to\n    * allow further optimizations. By default,this flag is not set on\n    * View,but could be set on some View subclasses such as ViewGroup.\n    *\n    * Typically,if you override {@link #onDraw(android.graphics.Canvas)}\n    * you should clear this flag.\n    *\n    * @param willNotDraw whether or not this View draw on its own\n    */\n    public void setWillNotDraw(boolean willNotDraw) {\n        setFlags(willNotDraw ? WILL_NOT_DRAW : 0,DRAW_MASK);\n    }\n```\n从`setWillNotDraw`这个方法的注释中可以看出，如果一个`View`不需要绘制任何内容，那么设置这个标记位为`true`以后，系统会进行相应的优化。默认情况下，`View`没有启用这个优化标记位，但是`ViewGroup`会默认启用这个优化标记位。这个标记位对实际开发的意义是：当我们的自定义控件继承于`ViewGroup`并且本身不具备绘制功能时，就可以开启这个标记位从而便于系统进行后续的优化。当然，当明确知道一个`ViewGroup`需要通过`onDraw`来绘制内容时，我们需要显式地关闭`WILL_NOT_DRAW`这个标记位。\n\n----\n以上","source":"_posts/View绘制过程.md","raw":"---\ntitle: View绘制过程\ndate: 2018-07-29 22:35:46\ntags: [Android]\nkeywords: View绘制过程\n---\n抄的《Android开发艺术探索》第四章\n`ViewRoot`对应于`ViewRootImpl`类，它是连接`WindowManager`和`DecorView`的纽带，`View`的三大流程均是通过`ViewRoot`来完成的。在`ActivityThread`中，当`Activity`对象被创建完毕后，会将`DecorView`添加到`Window`中，同时会创建`ViewRootImpl`对象，并将`ViewRootImpl`对象和`DecorView`建立关联，`View`的绘制流程是从`ViewRoot`的`performTraversals`方法开始的，它经过`measure`、`layout`和`draw`三个过程才能最终将一个`View`绘制出来，其中`measure`用来测量View的宽和高，`layout`用来确定View在父容器中的放置位置，而`draw`则负责将View绘制在屏幕上。\n\n<!--more-->\n`performTraversals`会依次调用`performMeasure`、p`erformLayout`和`performDraw`三个方法，这三个方法分别完成顶级`View`的`measure`、`layout`和`draw`这三大流程，其中在`performMeasure`中会调用`measure`方法，在`measure`方法中又会调用`onMeasure`方法，在`onMeasure`方法中则会对所有的子元素进行`measure`过程，这个时候`measure`流程就从父容器传递到子元素中了，这样就完成了一次`measure`过程。接着子元素会重复父容器的`measure`过程，如此反复就完成了整个`View`树的遍历。同理，`performLayout`和`performDraw`的传递流程和`performMeasure`是类似的，唯一不同的是，`performDraw`的传递过程是在`draw`方法中通过`dispatchDraw`来实现的，不过这并没有本质区别。\n\n`measure`过程决定了`View`的宽/高，`Measure`完成以后，可以通过`getMeasuredWidth`和`getMeasuredHeight`方法来获取到`View`测量后的宽/高，在几乎所有的情况下它都等同于`View`最终的宽/高，但是特殊情况除外，这点在本章后面会进行说明。`Layout`过程决定了`View`的四个顶点的坐标和实际的View的宽/高，完成以后，可以通过`getTop`、`getBottom`、`getLeft`和`getRight`来拿到`View`的四个顶点的位置，并可以通过`getWidth`和`getHeight`方法来拿到`View`的最终宽/高。`Draw`过程则决定了`View`的显示，只有`draw`方法完成以后`View`的内容才能呈现在屏幕上。\n\n`DecorView`作为顶级`View`，一般情况下它内部会包含一个竖直方向的`LinearLayout`，在这个`LinearLayout`里面有上下两个部分（具体情况和Android版本及主题有关），上面是标题栏，下面是内容栏。在`Activity`中我们通过`setContentView`所设置的布局文件其实就是被加到内容栏之中的，而内容栏的id是`content`，因此可以理解为Activity指定布局的方法不叫setview而叫`setContentView`，因为我们的布局的确加到了`id`为`content`的`FrameLayout`中。如何得到`content`呢？可以这样：`ViewGroup  content=  findViewById(R.android.id.content)`。如何得到我们设置的`View`呢？可以这样：`content.getChildAt(0)`。同时，通过源码我们可以知道，`DecorView`其实是一个`FrameLayout`，`View`层的事件都先经过`DecorView`，然后才传递给我们的View。\n\n#### MeasureSpec\n`MeasureSpec`在很大程度上决定了一个View的尺寸规格，之所以说是很大程度上是因为这个过程还受父容器的影响，因为父容器影响View的`MeasureSpec`的创建过程。在测量过程中，系统会将View的`LayoutParams`根据父容器所施加的规则转换成对应的`MeasureSpec`，然后再根据这个`measureSpec`来测量出`View`的宽/高。这里的宽/高是测量宽/高，不一定等于`View`的最终宽/高。\n`MeasureSpec`代表一个32位int值，高2位代表`SpecMode`，低30位代表`SpecSize`，`SpecMode`是指测量模式，而`SpecSize`是指在某种测量模式下的规格大小。\n``` java\nprivate static final int MODE_SHIFT = 30;\nprivate static final int MODE_MASK = 0x3 << MODE_SHIFT;\npublic static final int UNSPECIFIED = 0 << MODE_SHIFT;\npublic static final int EXACTLY = 1 << MODE_SHIFT;\npublic static final int AT_MOST = 2 << MODE_SHIFT;\npublic static int makeMeasureSpec(int size,int mode) {\n    if (sUseBrokenMakeMeasureSpec) {\n        return size + mode;\n    } else {\n        return (size & ~MODE_MASK) | (mode & MODE_MASK);\n    }\n}\npublic static int getMode(int measureSpec) {\n    return (measureSpec & MODE_MASK);\n}\npublic static int getSize(int measureSpec) {\n    return (measureSpec & ~MODE_MASK);\n}\n```\n`MeasureSpec`通过将`SpecMode`和`SpecSize`打包成一个int值来避免过多的对象内存分配，为了方便操作，其提供了打包和解包方法。`SpecMode`和`SpecSize`也是一个int值，一组`SpecMode`和`SpecSize`可以打包为一个`MeasureSpec`，而一个`MeasureSpec`可以通过解包的形式来得出其原始的`SpecMode`和`SpecSize`，需要注意的是这里提到的`MeasureSpec`是指`MeasureSpec`所代表的int值，而并非`MeasureSpec`本身。\nSpecMode有三类，每一类都表示特殊的含义，如下所示。\n** UNSPECIFIED **\n父容器不对View有任何限制，要多大给多大，这种情况一般用于系统内部，表示一种测量的状态。\n** EXACTLY **\n父容器已经检测出View所需要的精确大小，这个时候View的最终大小就是SpecSize所指定的值。它对应于LayoutParams中的match_parent和具体的数值这两种模式。\n** AT_MOST **\n父容器指定了一个可用大小即SpecSize，View的大小不能大于这个值，具体是什么值要看不同View的具体实现。它对应于LayoutParams中的wrap_content。\n\n###### MeasureSpec和LayoutParams\n在View测量的时候，系统会将`LayoutParams`在父容器的约束下转换成对应的`MeasureSpec`，然后再根据这个`MeasureSpec`来确定View测量后的宽/高。需要注意的是，`MeasureSpec`不是唯一由`LayoutParams`决定的，`LayoutParams`需要和父容器一起才能决定`View`的`MeasureSpec`，从而进一步决定View的宽/高。另外，对于`顶级View`（即DecorView）和`普通View`来说，`MeasureSpec`的转换过程略有不同。对于`DecorView`，其`MeasureSpec`由窗口的尺寸和其自身的`LayoutParams`来共同确定；对于普通View，其`MeasureSpec`由父容器的`MeasureSpec`和自身的`LayoutParams`来共同决定，`MeasureSpec`一旦确定后，`onMeasure`中就可以确定`View`的测量宽/高。\n对于`DecorView`来说，在`ViewRootImpl`中的`measureHierarchy`方法中有如下一段代码，它展示了`DecorView`的`MeasureSpec`的创建过程，其中`desiredWindowWidth`和`desiredWindowHeight`是屏幕的尺寸:\n``` java\nchildWidthMeasureSpec = getRootMeasureSpec(desiredWindowWidth,lp.width);\nchildHeightMeasureSpec = getRootMeasureSpec(desiredWindowHeight,lp.height);\nperformMeasure(childWidthMeasureSpec,childHeightMeasureSpec);\n\nprivate static int getRootMeasureSpec(int windowSize,int rootDimension) {\n    int measureSpec;\n    switch (rootDimension) {\n        case ViewGroup.LayoutParams.MATCH_PARENT:\n            // Window can't resize. Force root view to be windowSize.\n            measureSpec = MeasureSpec.makeMeasureSpec(windowSize,MeasureSpec.EXACTLY);\n            break;\n        case ViewGroup.LayoutParams.WRAP_CONTENT:\n            // Window can resize. Set max size for root view.\n            measureSpec = MeasureSpec.makeMeasureSpec(windowSize,MeasureSpec.AT_MOST);\n            break;\n        default:\n            // Window wants to be an exact size. Force root view to be that size.\n            measureSpec = MeasureSpec.makeMeasureSpec(rootDimension,Measure-Spec.EXACTLY);\n            break;\n    }\n    return measureSpec;\n}\n```\n通过上述代码，`DecorView`的`MeasureSpec`的产生过程就很明确了，具体来说其遵守如下规则，根据它的`LayoutParams`中的宽/高的参数来划分。\n* LayoutParams.MATCH_PARENT：精确模式，大小就是窗口的大小；\n* LayoutParams.WRAP_CONTENT：最大模式，大小不定，但是不能超过窗口的大小；\n* 固定大小（比如100dp）：精确模式，大小为LayoutParams中指定的大小。\n对于普通`View`来说，这里是指我们布局中的`View`，`View`的`measure`过程由`ViewGroup`传递而来，先看一下`ViewGroup`的`measureChildWithMargins`方法：\n``` java\nprotected void measureChildWithMargins(View child,int parentWidthMeasureSpec,int widthUsed,int parentHeightMeasureSpec,int heightUsed) {\n    final MarginLayoutParams lp = (MarginLayoutParams) child.getLayout-Params();\n    final int childWidthMeasureSpec = getChildMeasureSpec(parentWidthMeasureSpec,mPaddingLeft + mPaddingRight + lp.leftMargin + lp.rightMargin+ widthUsed,lp.width);\n    final int childHeightMeasureSpec = getChildMeasureSpec(parentHeight-MeasureSpec,mPaddingTop + mPaddingBottom + lp.topMargin + lp.bottomMargin+ heightUsed,lp.height);\n    child.measure(childWidthMeasureSpec,childHeightMeasureSpec);\n}\n```\n上述方法会对子元素进行`measure`，在调用子元素的`measure`方法之前会先通过`getChildMeasureSpec`方法来得到子元素的`MeasureSpec`。从代码来看，很显然，子元素的`MeasureSpec`的创建与父容器的`MeasureSpec`和子元素本身的`LayoutParam`s有关，此外还和`View`的`margin`及`padding`有关，具体情况可以看一下`ViewGroup`的`getChildMeasureSpec`方法，如下所示:\n``` java\npublic static int getChildMeasureSpec(int spec,int padding,int child-Dimension) {\n    int specMode = MeasureSpec.getMode(spec);\n    int specSize = MeasureSpec.getSize(spec);\n    int size = Math.max(0,specSize -padding);\n    int resultSize = 0;\n    int resultMode = 0;\n    switch (specMode) {\n        // Parent has imposed an exact size on us\n        case MeasureSpec.EXACTLY:\n            if (childDimension => 0) {\n                resultSize = childDimension;\n                resultMode = MeasureSpec.EXACTLY;\n            } else if (childDimension == LayoutParams.MATCH_PARENT) {\n                // Child wants to be our size. So be it.\n                resultSize = size;\n                resultMode = MeasureSpec.EXACTLY;\n            } else if (childDimension == LayoutParams.WRAP_CONTENT) {\n                // Child wants to determine its own size. It can't be\n                // bigger than us.\n                resultSize = size;\n                resultMode = MeasureSpec.AT_MOST;\n            }\n            break;\n        // Parent has imposed a maximum size on us\n        case MeasureSpec.AT_MOST:\n            if (childDimension => 0) {\n                // Child wants a specific size... so be it\n                resultSize = childDimension;\n                resultMode = MeasureSpec.EXACTLY;\n            } else if (childDimension == LayoutParams.MATCH_PARENT) {\n                // Child wants to be our size,but our size is not fixed.\n                // Constrain child to not be bigger than us.\n                resultSize = size;\n                resultMode = MeasureSpec.AT_MOST;\n            } else if (childDimension == LayoutParams.WRAP_CONTENT) {\n                // Child wants to determine its own size. It can't be\n                // bigger than us.\n                resultSize = size;\n                resultMode = MeasureSpec.AT_MOST;\n            }\n            break;\n        // Parent asked to see how big we want to be\n        case MeasureSpec.UNSPECIFIED:\n            if (childDimension => 0) {\n                // Child wants a specific size... let him have it\n                resultSize = childDimension;\n                resultMode = MeasureSpec.EXACTLY;\n            } else if (childDimension == LayoutParams.MATCH_PARENT) {\n                // Child wants to be our size... find out how big it should\n                // be\n                resultSize = 0;\n                resultMode = MeasureSpec.UNSPECIFIED;\n            } else if (childDimension == LayoutParams.WRAP_CONTENT) {\n                // Child wants to determine its own size.... find out how\n                // big it should be\n                resultSize = 0;\n                resultMode = MeasureSpec.UNSPECIFIED;\n            }\n            break;\n        }\n    return MeasureSpec.makeMeasureSpec(resultSize,resultMode);\n}\n```\n它的主要作用是根据父容器的`MeasureSpec`同时结合View本身的`LayoutParams`来确定子元素的`MeasureSpec`，参数中的`padding`是指父容器中已占用的空间大小，因此子元素可用的大小为父容器的尺寸减去`padding`，具体代码如下所示:\n``` java\n    int specSize = MeasureSpec.getSize(spec);\n    int size = Math.max(0,specSize -padding);\n```\n这里简单说一下，当View采用固定宽/高的时候，不管父容器的`MeasureSpec`是什么，`View`的`MeasureSpec`都是精确模式并且其大小遵循`Layoutparams`中的大小。当`View`的宽/高是`match_parent`时，如果父容器的模式是精准模式，那么`View`也是精准模式并且其大小是父容器的剩余空间；如果父容器是最大模式，那么`View`也是最大模式并且其大小不会超过父容器的剩余空间。当`View`的宽/高是`wrap_content`时，不管父容器的模式是精准还是最大化，`View`的模式总是最大化并且大小不能超过父容器的剩余空间。在我们的分析中漏掉了`UNSPECIFIED`模式，那是因为这个模式主要用于系统内部多次Measure的情形，一般来说，我们不需要关注此模式。\n\n#### View的工作流程\n##### measure过程\nmeasure过程要分情况来看，如果只是一个原始的`View`，那么通过`measure`方法就完成了其测量过程，如果是一个`ViewGroup`，除了完成自己的测量过程外，还会遍历去调用所有子元素的`measure`方法，各个子元素再递归去执行这个流程。\n** View的measure过程 **\n`View`的`measure`过程由其`measure`方法来完成，`measure`方法是一个`final`类型的方法，这意味着子类不能重写此方法，在`View`的`measure`方法中会去调用`View`的`onMeasure`方法，因此只需要看`onMeasure`的实现即可：\n``` java\nprotected void onMeasure(int widthMeasureSpec,int heightMeasureSpec) {\n    setMeasuredDimension(getDefaultSize(getSuggestedMinimumWidth(),widthMeasureSpec),getDefaultSize(getSuggestedMinimumHeight(),heightMeasureSpec));\n}\npublic static int getDefaultSize(int size,int measureSpec) {\n    int result = size;\n    int specMode = MeasureSpec.getMode(measureSpec);\n    int specSize = MeasureSpec.getSize(measureSpec);\n    switch (specMode) {\n        case MeasureSpec.UNSPECIFIED:\n            result = size;\n        break;\n        case MeasureSpec.AT_MOST:\n        case MeasureSpec.EXACTLY:\n            result = specSize;\n        break;\n    }\n    return result;\n}\n```\n可以看出，`getDefaultSize`这个方法的逻辑很简单，对于我们来说，我们只需要看`AT_MOST`和`EXACTLY`这两种情况。简单地理解，其实`getDefaultSize`返回的大小就是`measureSpec`中的`specSize`，而这个`specSize`就是`View`测量后的大小，这里多次提到测量后的大小，是因为`View`最终的大小是在`layout`阶段确定的，所以这里必须要加以区分，但是几乎所有情况下`View`的测量大小和最终大小是相等的。\n至于`UNSPECIFIED`这种情况，一般用于系统内部的测量过程，在这种情况下，`View`的大小为`getDefaultSize`的第一个参数`size`，即宽/高分别为`getSuggestedMinimumWidth`和`getSuggestedMinimumHeight`这两个方法的返回值，看一下它们的源码:\n``` java\nprotected int getSuggestedMinimumWidth() {\n    return (mBackground == null) ? mMinWidth : max(mMinWidth,mBackground.getMinimumWidth());\n}\nprotected int getSuggestedMinimumHeight() {\n    return (mBackground == null) ? mMinHeight : max(mMinHeight,mBackground.getMinimumHeight());\n}\n```\n这里只分析`getSuggestedMinimumWidth`方法的实现，`getSuggestedMinimumHeight`和它的实现原理是一样的。从`getSuggestedMinimumWidth`的代码可以看出，如果`View`没有设置背景，那么`View`的宽度为`mMinWidth`，而`mMinWidth`对应于`android:minWidth`这个属性所指定的值，因此`View`的宽度即为`android:minWidth`属性所指定的值。这个属性如果不指定，那么`mMinWidth`则默认为0；如果`View`指定了背景，则`View`的宽度为`max(mMinWidth,mBackground.getMinimumWidth())`。`mMinWidth`的含义我们已经知道了，那么`mBackground.getMinimumWidth()`是什么呢？我们看一下`Drawable`的`getMinimumWidth`方法，如下所示:\n``` java\npublic int getMinimumWidth() {\n    final int intrinsicWidth = getIntrinsicWidth();\n    return intrinsicWidth > 0 ? intrinsicWidth : 0;\n}\n```\n可以看出，`getMinimumWidth`返回的就是`Drawable`的原始宽度，前提是这个`Drawable`有原始宽度，否则就返回0。\n这里再总结一下`getSuggestedMinimumWidth`的逻辑：如果`View`没有设置背景，那么返回`android:minWidth`这个属性所指定的值，这个值可以为0；如果`View`设置了背景，则返回`android:minWidth`和背景的最小宽度这两者中的最大值，`getSuggestedMinimumWidth`和`getSuggestedMinimumHeight`的返回值就是`View`在`UNSPECIFIED`情况下的测量宽/高。\n从`getDefaultSize`方法的实现来看，`View`的宽/高由`specSize`决定，所以我们可以得出如下结论：直接继承`View`的自定义控件需要重写`onMeasure`方法并设置`wrap_content`时的自身大小，否则在布局中使用`wrap_content`就相当于使用`match_parent`。\n从上述代码中我们知道，如果`View`在布局中使用`wrap_content`，那么它的`specMode`是`AT_MOST`模式，在这种模式下，它的宽/高等于`specSize`；这种情况下`View`的`specSize`是p`arentSize`，而`parentSize`是父容器中目前可以使用的大小，也就是父容器当前剩余的空间大小。很显然，`View`的宽/高就等于父容器当前剩余的空间大小，这种效果和在布局中使用`match_parent`完全一致。如何解决这个问题呢？也很简单，代码如下所示：\n``` java\nprotected void onMeasure(int widthMeasureSpec,int heightMeasureSpec) {\n    super.onMeasure(widthMeasureSpec,heightMeasureSpec);\n    int widthSpecMode = MeasureSpec.getMode(widthMeasureSpec);\n    int widthSpecSize = MeasureSpec.getSize(widthMeasureSpec);\n    int heightSpecMode = MeasureSpec.getMode(heightMeasureSpec);\n    int heightSpecSize = MeasureSpec.getSize(heightMeasureSpec);\n    if (widthSpecMode == MeasureSpec.AT_MOST && heightSpecMode == MeasureSpec.AT_MOST) {\n        setMeasuredDimension(mWidth,mHeight);\n    } else if (widthSpecMode == MeasureSpec.AT_MOST) {\n        setMeasuredDimension(mWidth,heightSpecSize);\n    } else if (heightSpecMode == MeasureSpec.AT_MOST) {\n        setMeasuredDimension(widthSpecSize,mHeight);\n    }\n}\n```\n在上面的代码中，我们只需要给`View`指定一个默认的内部宽/高（`mWidth`和`mHeight`），并在`wrap_content`时设置此宽/高即可。对于非`wrap_content`情形，我们沿用系统的测量值即可，至于这个默认的内部宽/高的大小如何指定，这个没有固定的依据，根据需要灵活指定即可。如果查看`TextView`、`ImageView`等的源码就可以知道，针对`wrap_content`情形，它们的`onMeasure`方法均做了特殊处理。\n\n** ViewGroup的measure过程 **\n对于`ViewGroup`来说，除了完成自己的`measure`过程以外，还会遍历去调用所有子元素的`measure`方法，各个子元素再递归去执行这个过程。和`View`不同的是，`ViewGroup`是一个抽象类，因此它没有重写`View`的`onMeasure`方法，但是它提供了一个叫`measureChildren`的方法，如下所示。\n``` java\nprotected void measureChildren(int widthMeasureSpec,int heightMeasureSpec) {\n    final int size = mChildrenCount;\n    final View[] children = mChildren;\n    for (int i = 0; i < size; ++i) {\n        final View child = children[i];\n        if ((child.mViewFlags & VISIBILITY_MASK) != GONE) {\n            measureChild(child,widthMeasureSpec,heightMeasureSpec);\n        }\n    }\n}\n```\n从上述代码来看，`ViewGroup`在`measure`时，会对每一个子元素进行`measure`，`measureChild`这个方法的实现也很好理解，如下所示\n``` java\nprotected void measureChild(View child,int parentWidthMeasureSpec,int parentHeightMeasureSpec) {\n    final LayoutParams lp = child.getLayoutParams();\n    final int childWidthMeasureSpec = getChildMeasureSpec(parentWidth-MeasureSpec,mPaddingLeft + mPaddingRight,lp.width);\n    final int childHeightMeasureSpec = getChildMeasureSpec(parentHeight-MeasureSpec,mPaddingTop + mPaddingBottom,lp.height);\n    child.measure(childWidthMeasureSpec,childHeightMeasureSpec);\n}\n```\n很显然，`measureChild`的思想就是取出子元素的`LayoutParams`，然后再通过`getChildMeasureSpec`来创建子元素的`MeasureSpec`，接着将`MeasureSpec`直接传递给`View`的`measure`方法来进行测量。我们知道，`ViewGroup`并没有定义其测量的具体过程，这是因为`ViewGroup`是一个抽象类，其测量过程的`onMeasure`方法需要各个子类去具体实现，比如`LinearLayout`、`RelativeLayout`等。\n\n##### layout过程\n`Layout`的作用是`ViewGroup`用来确定子元素的位置，当`ViewGroup`的位置被确定后，它在`onLayout`中会遍历所有的子元素并调用其`layout`方法，在`layout`方法中`onLayout`方法又会被调用。`Layout`过程和`measure`过程相比就简单多了，`layout`方法确定`View`本身的位置，而`onLayout`方法则会确定所有子元素的位置，先看`View`的`layout`方法，如下所示。\n``` java\npublic void layout(int l,int t,int r,int b) {\n    if ((mPrivateFlags3 & PFLAG3_MEASURE_NEEDED_BEFORE_LAYOUT) != 0) {\n        onMeasure(mOldWidthMeasureSpec,mOldHeightMeasureSpec);\n        mPrivateFlags3 &= ~PFLAG3_MEASURE_NEEDED_BEFORE_LAYOUT;\n    }\n    int oldL = mLeft;\n    int oldT = mTop;\n    int oldB = mBottom;\n    int oldR = mRight;\n    boolean changed = isLayoutModeOptical(mParent) ?setOpticalFrame(l,t,r,b) : setFrame(l,t,r,b);\n    if (changed || (mPrivateFlags & PFLAG_LAYOUT_REQUIRED) == PFLAG_LAYOUT_REQUIRED) {\n        onLayout(changed,l,t,r,b);\n        mPrivateFlags &= ~PFLAG_LAYOUT_REQUIRED;\n        ListenerInfo li = mListenerInfo;\n        if (li != null && li.mOnLayoutChangeListeners != null) {\n            ArrayList<OnLayoutChangeListener> listenersCopy =(ArrayList<OnLayoutChangeListener>)li.mOnLayout-ChangeListeners.clone();\n            int numListeners = listenersCopy.size();\n            for (int i = 0; i < numListeners; ++i) {\n                listenersCopy.get(i).onLayoutChange(this,l,t,r,b,oldL,oldT,oldR,oldB);\n            }\n        }\n    }\n    mPrivateFlags &= ~PFLAG_FORCE_LAYOUT;\n    mPrivateFlags3 |= PFLAG3_IS_LAID_OUT;\n}\n```\n`layout`方法的大致流程如下：首先会通过`setFrame`方法来设定`View`的四个顶点的位置，即初始化`mLeft`、`mRight`、`mTop`和`mBottom`这四个值，`View`的四个顶点一旦确定，那么`View`在父容器中的位置也就确定了；接着会调用`onLayout`方法，这个方法的用途是父容器确定子元素的位置，和`onMeasure`方法类似，`onLayout`的具体实现同样和具体的布局有关，所以`View`和`ViewGroup`均没有真正实现`onLayout`方法。接下来，我们可以看一下`LinearLayout`的`onLayout`方法，如下所示。\n``` java\nprotected void onLayout(boolean changed,int l,int t,int r,int b) {\n    if (mOrientation == VERTICAL) {\n        layoutVertical(l,t,r,b);\n    } else {\n        layoutHorizontal(l,t,r,b);\n    }\n}\n```\n`LinearLayout`中`onLayout`的实现逻辑和`onMeasure`的实现逻辑类似，这里选择`layoutVertical`继续讲解，为了更好地理解其逻辑，这里只给出了主要的代码：\n``` java\nvoid layoutVertical(int left,int top,int right,int bottom) {\n    ......\n    final int count = getVirtualChildCount();\n    for (int i = 0; i < count; i++) {\n        final View child = getVirtualChildAt(i);\n        if (child == null) {\n            childTop += measureNullChild(i);\n        } else if (child.getVisibility() != GONE) {\n            final int childWidth = child.getMeasuredWidth();\n            final int childHeight = child.getMeasuredHeight();\n            final LinearLayout.LayoutParams lp =(LinearLayout.LayoutParams) child.getLayoutParams();\n            ......\n            if (hasDividerBeforeChildAt(i)) {\n                childTop += mDividerHeight;\n            }\n            childTop += lp.topMargin;\n            setChildFrame(child,childLeft,childTop + getLocationOffset(child),childWidth,childHeight);\n            childTop += childHeight + lp.bottomMargin + getNextLocation-Offset(child);\n            i += getChildrenSkipCount(child,i);\n        }\n    }\n}\n```\n这里分析一下`layoutVertical`的代码逻辑，可以看到，此方法会遍历所有子元素并调用`setChildFrame`方法来为子元素指定对应的位置，其中`childTop`会逐渐增大，这就意味着后面的子元素会被放置在靠下的位置，这刚好符合竖直方向的`LinearLayout`的特性。至于`setChildFrame`，它仅仅是调用子元素的`layout`方法而已，这样父元素在`layout`方法中完成自己的定位以后，就通过`onLayout`方法去调用子元素的`layout`方法，子元素又会通过自己的`layout`方法来确定自己的位置，这样一层一层地传递下去就完成了整个`View`树的`layout`过程。`setChildFrame`方法的实现如下所示。\n``` java\nprivate void setChildFrame(View child,int left,int top,int width,int height) {\n    child.layout(left,top,left + width,top + height);\n}\n```\n我们注意到，setChildFrame中的width和height实际上就是子元素的测量宽/高，从下面的代码可以看出这一点：\n``` java\n    final int childWidth = child.getMeasuredWidth();\n    final int childHeight = child.getMeasuredHeight();\n    setChildFrame(child,childLeft,childTop + getLocationOffset(child),childWidth,childHeight);\n```\n\n而在`layout`方法中会通过`setFrame`去设置子元素的四个顶点的位置，在`setFrame`中有如下几句赋值语句，这样一来子元素的位置就确定了：\n``` java\n    mLeft = left;\n    mTop = top;\n    mRight = right;\n    mBottom = bottom;\n```\n`View`的测量宽/高和最终/宽高有什么区别？这个问题可以具体为：`View`的`getMeasuredWidth`和`getWidth`这两个方法有什么区别，至于`getMeasuredHeight`和`getHeight`的区别和前两者完全一样。为了回答这个问题，首先，我们看一下getwidth和getHeight这两个方法的具体实现：\n``` java\npublic final int getWidth() {\n    return mRight -mLeft;\n}\npublic final int getHeight() {\n    return mBottom -mTop;\n}\n``` \n\n从`getWidth`和`getHeight`的源码再结合`mLeft`、`mRight`、`mTop`和`mBottom`这四个变量的赋值过程来看，`getWidth`方法的返回值刚好就是`View`的测量宽度，而`getHeight`方法的返回值也刚好就是`View`的测量高度。经过上述分析，现在我们可以回答这个问题了：在`View`的默认实现中，`View`的测量宽/高和最终宽/高是相等的，只不过测量宽/高形成于`View`的`measure`过程，而最终宽/高形成于`View`的`layout`过程，即两者的赋值时机不同，测量宽/高的赋值时机稍微早一些。因此，在日常开发中，我们可以认为`View`的`测量宽/高`就`等于``最终宽/高`，但是的确存在某些特殊情况会导致两者不一致.\n\n##### draw过程\nDraw过程就比较简单了，它的作用是将View绘制到屏幕上面。View的绘制过程遵循\n如下几步：\n* 绘制背景background.draw(canvas)。\n* 绘制自己（onDraw）。\n* 绘制children（dispatchDraw）。\n* 绘制装饰（onDrawScrollBars）。\n这一点通过draw方法的源码可以明显看出来，如下所示。\n\n``` java\n    public void draw(Canvas canvas) {\n    final int privateFlags = mPrivateFlags;\n    final boolean dirtyOpaque = (privateFlags & PFLAG_DIRTY_MASK) == PFLAG_DIRTY_OPAQUE &&(mAttachInfo == null || !mAttachInfo.mIgnoreDirtyState);\n    mPrivateFlags = (privateFlags & ~PFLAG_DIRTY_MASK) | PFLAG_DRAWN;\n    /*\n    * Draw traversal performs several drawing steps which must be executed\n    * in the appropriate order:\n    *\n    * 1. Draw the background\n    * 2. If necessary,save the canvas' layers to prepare for fading\n    * 3. Draw view's content\n    * 4. Draw children\n    * 5. If necessary,draw the fading edges and restore layers\n    * 6. Draw decorations (scrollbars for instance)\n    */\n    // Step 1,draw the background,if needed\n    int saveCount;\n    if (!dirtyOpaque) {\n        drawBackground(canvas);\n    }\n    // skip step 2 & 5 if possible (common case)\n    final int viewFlags = mViewFlags;\n    boolean horizontalEdges = (viewFlags & FADING_EDGE_HORIZONTAL) != 0;\n    boolean verticalEdges = (viewFlags & FADING_EDGE_VERTICAL) != 0;\n    if (!verticalEdges && !horizontalEdges) {\n        // Step 3,draw the content\n        if (!dirtyOpaque) onDraw(canvas);\n            // Step 4,draw the children\n        dispatchDraw(canvas);\n        // Step 6,draw decorations (scrollbars)\n        onDrawScrollBars(canvas);\n        if (mOverlay != null && !mOverlay.isEmpty()) {\n            mOverlay.getOverlayView().dispatchDraw(canvas);\n        }\n        // we're done...\n        return;\n    }\n    ...\n}\n```\nView绘制过程的传递是通过dispatchDraw来实现的，dispatchDraw会遍历调用所有子元素的draw方法，如此draw事件就一层层地传递了下去。View有一个特殊的方法setWillNotDraw，先看一下它的源码，如下所示。\n``` java\n    /**\n    * If this view doesn't do any drawing on its own,set this flag to\n    * allow further optimizations. By default,this flag is not set on\n    * View,but could be set on some View subclasses such as ViewGroup.\n    *\n    * Typically,if you override {@link #onDraw(android.graphics.Canvas)}\n    * you should clear this flag.\n    *\n    * @param willNotDraw whether or not this View draw on its own\n    */\n    public void setWillNotDraw(boolean willNotDraw) {\n        setFlags(willNotDraw ? WILL_NOT_DRAW : 0,DRAW_MASK);\n    }\n```\n从`setWillNotDraw`这个方法的注释中可以看出，如果一个`View`不需要绘制任何内容，那么设置这个标记位为`true`以后，系统会进行相应的优化。默认情况下，`View`没有启用这个优化标记位，但是`ViewGroup`会默认启用这个优化标记位。这个标记位对实际开发的意义是：当我们的自定义控件继承于`ViewGroup`并且本身不具备绘制功能时，就可以开启这个标记位从而便于系统进行后续的优化。当然，当明确知道一个`ViewGroup`需要通过`onDraw`来绘制内容时，我们需要显式地关闭`WILL_NOT_DRAW`这个标记位。\n\n----\n以上","slug":"View绘制过程","published":1,"updated":"2018-08-04T05:17:10.145Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjl3vbtrf002cisdgtcpcfsu5","content":"<p>抄的《Android开发艺术探索》第四章<br><code>ViewRoot</code>对应于<code>ViewRootImpl</code>类，它是连接<code>WindowManager</code>和<code>DecorView</code>的纽带，<code>View</code>的三大流程均是通过<code>ViewRoot</code>来完成的。在<code>ActivityThread</code>中，当<code>Activity</code>对象被创建完毕后，会将<code>DecorView</code>添加到<code>Window</code>中，同时会创建<code>ViewRootImpl</code>对象，并将<code>ViewRootImpl</code>对象和<code>DecorView</code>建立关联，<code>View</code>的绘制流程是从<code>ViewRoot</code>的<code>performTraversals</code>方法开始的，它经过<code>measure</code>、<code>layout</code>和<code>draw</code>三个过程才能最终将一个<code>View</code>绘制出来，其中<code>measure</code>用来测量View的宽和高，<code>layout</code>用来确定View在父容器中的放置位置，而<code>draw</code>则负责将View绘制在屏幕上。</p>\n<a id=\"more\"></a>\n<p><code>performTraversals</code>会依次调用<code>performMeasure</code>、p<code>erformLayout</code>和<code>performDraw</code>三个方法，这三个方法分别完成顶级<code>View</code>的<code>measure</code>、<code>layout</code>和<code>draw</code>这三大流程，其中在<code>performMeasure</code>中会调用<code>measure</code>方法，在<code>measure</code>方法中又会调用<code>onMeasure</code>方法，在<code>onMeasure</code>方法中则会对所有的子元素进行<code>measure</code>过程，这个时候<code>measure</code>流程就从父容器传递到子元素中了，这样就完成了一次<code>measure</code>过程。接着子元素会重复父容器的<code>measure</code>过程，如此反复就完成了整个<code>View</code>树的遍历。同理，<code>performLayout</code>和<code>performDraw</code>的传递流程和<code>performMeasure</code>是类似的，唯一不同的是，<code>performDraw</code>的传递过程是在<code>draw</code>方法中通过<code>dispatchDraw</code>来实现的，不过这并没有本质区别。</p>\n<p><code>measure</code>过程决定了<code>View</code>的宽/高，<code>Measure</code>完成以后，可以通过<code>getMeasuredWidth</code>和<code>getMeasuredHeight</code>方法来获取到<code>View</code>测量后的宽/高，在几乎所有的情况下它都等同于<code>View</code>最终的宽/高，但是特殊情况除外，这点在本章后面会进行说明。<code>Layout</code>过程决定了<code>View</code>的四个顶点的坐标和实际的View的宽/高，完成以后，可以通过<code>getTop</code>、<code>getBottom</code>、<code>getLeft</code>和<code>getRight</code>来拿到<code>View</code>的四个顶点的位置，并可以通过<code>getWidth</code>和<code>getHeight</code>方法来拿到<code>View</code>的最终宽/高。<code>Draw</code>过程则决定了<code>View</code>的显示，只有<code>draw</code>方法完成以后<code>View</code>的内容才能呈现在屏幕上。</p>\n<p><code>DecorView</code>作为顶级<code>View</code>，一般情况下它内部会包含一个竖直方向的<code>LinearLayout</code>，在这个<code>LinearLayout</code>里面有上下两个部分（具体情况和Android版本及主题有关），上面是标题栏，下面是内容栏。在<code>Activity</code>中我们通过<code>setContentView</code>所设置的布局文件其实就是被加到内容栏之中的，而内容栏的id是<code>content</code>，因此可以理解为Activity指定布局的方法不叫setview而叫<code>setContentView</code>，因为我们的布局的确加到了<code>id</code>为<code>content</code>的<code>FrameLayout</code>中。如何得到<code>content</code>呢？可以这样：<code>ViewGroup  content=  findViewById(R.android.id.content)</code>。如何得到我们设置的<code>View</code>呢？可以这样：<code>content.getChildAt(0)</code>。同时，通过源码我们可以知道，<code>DecorView</code>其实是一个<code>FrameLayout</code>，<code>View</code>层的事件都先经过<code>DecorView</code>，然后才传递给我们的View。</p>\n<h4 id=\"MeasureSpec\"><a href=\"#MeasureSpec\" class=\"headerlink\" title=\"MeasureSpec\"></a>MeasureSpec</h4><p><code>MeasureSpec</code>在很大程度上决定了一个View的尺寸规格，之所以说是很大程度上是因为这个过程还受父容器的影响，因为父容器影响View的<code>MeasureSpec</code>的创建过程。在测量过程中，系统会将View的<code>LayoutParams</code>根据父容器所施加的规则转换成对应的<code>MeasureSpec</code>，然后再根据这个<code>measureSpec</code>来测量出<code>View</code>的宽/高。这里的宽/高是测量宽/高，不一定等于<code>View</code>的最终宽/高。<br><code>MeasureSpec</code>代表一个32位int值，高2位代表<code>SpecMode</code>，低30位代表<code>SpecSize</code>，<code>SpecMode</code>是指测量模式，而<code>SpecSize</code>是指在某种测量模式下的规格大小。<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> MODE_SHIFT = <span class=\"number\">30</span>;</div><div class=\"line\"><span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> MODE_MASK = <span class=\"number\">0x3</span> &lt;&lt; MODE_SHIFT;</div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> UNSPECIFIED = <span class=\"number\">0</span> &lt;&lt; MODE_SHIFT;</div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> EXACTLY = <span class=\"number\">1</span> &lt;&lt; MODE_SHIFT;</div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> AT_MOST = <span class=\"number\">2</span> &lt;&lt; MODE_SHIFT;</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">int</span> <span class=\"title\">makeMeasureSpec</span><span class=\"params\">(<span class=\"keyword\">int</span> size,<span class=\"keyword\">int</span> mode)</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">if</span> (sUseBrokenMakeMeasureSpec) &#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> size + mode;</div><div class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> (size &amp; ~MODE_MASK) | (mode &amp; MODE_MASK);</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">int</span> <span class=\"title\">getMode</span><span class=\"params\">(<span class=\"keyword\">int</span> measureSpec)</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> (measureSpec &amp; MODE_MASK);</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">int</span> <span class=\"title\">getSize</span><span class=\"params\">(<span class=\"keyword\">int</span> measureSpec)</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> (measureSpec &amp; ~MODE_MASK);</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p><code>MeasureSpec</code>通过将<code>SpecMode</code>和<code>SpecSize</code>打包成一个int值来避免过多的对象内存分配，为了方便操作，其提供了打包和解包方法。<code>SpecMode</code>和<code>SpecSize</code>也是一个int值，一组<code>SpecMode</code>和<code>SpecSize</code>可以打包为一个<code>MeasureSpec</code>，而一个<code>MeasureSpec</code>可以通过解包的形式来得出其原始的<code>SpecMode</code>和<code>SpecSize</code>，需要注意的是这里提到的<code>MeasureSpec</code>是指<code>MeasureSpec</code>所代表的int值，而并非<code>MeasureSpec</code>本身。<br>SpecMode有三类，每一类都表示特殊的含义，如下所示。<br><strong> UNSPECIFIED </strong><br>父容器不对View有任何限制，要多大给多大，这种情况一般用于系统内部，表示一种测量的状态。<br><strong> EXACTLY </strong><br>父容器已经检测出View所需要的精确大小，这个时候View的最终大小就是SpecSize所指定的值。它对应于LayoutParams中的match_parent和具体的数值这两种模式。<br><strong> AT_MOST </strong><br>父容器指定了一个可用大小即SpecSize，View的大小不能大于这个值，具体是什么值要看不同View的具体实现。它对应于LayoutParams中的wrap_content。</p>\n<h6 id=\"MeasureSpec和LayoutParams\"><a href=\"#MeasureSpec和LayoutParams\" class=\"headerlink\" title=\"MeasureSpec和LayoutParams\"></a>MeasureSpec和LayoutParams</h6><p>在View测量的时候，系统会将<code>LayoutParams</code>在父容器的约束下转换成对应的<code>MeasureSpec</code>，然后再根据这个<code>MeasureSpec</code>来确定View测量后的宽/高。需要注意的是，<code>MeasureSpec</code>不是唯一由<code>LayoutParams</code>决定的，<code>LayoutParams</code>需要和父容器一起才能决定<code>View</code>的<code>MeasureSpec</code>，从而进一步决定View的宽/高。另外，对于<code>顶级View</code>（即DecorView）和<code>普通View</code>来说，<code>MeasureSpec</code>的转换过程略有不同。对于<code>DecorView</code>，其<code>MeasureSpec</code>由窗口的尺寸和其自身的<code>LayoutParams</code>来共同确定；对于普通View，其<code>MeasureSpec</code>由父容器的<code>MeasureSpec</code>和自身的<code>LayoutParams</code>来共同决定，<code>MeasureSpec</code>一旦确定后，<code>onMeasure</code>中就可以确定<code>View</code>的测量宽/高。<br>对于<code>DecorView</code>来说，在<code>ViewRootImpl</code>中的<code>measureHierarchy</code>方法中有如下一段代码，它展示了<code>DecorView</code>的<code>MeasureSpec</code>的创建过程，其中<code>desiredWindowWidth</code>和<code>desiredWindowHeight</code>是屏幕的尺寸:<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div></pre></td><td class=\"code\"><pre><div class=\"line\">childWidthMeasureSpec = getRootMeasureSpec(desiredWindowWidth,lp.width);</div><div class=\"line\">childHeightMeasureSpec = getRootMeasureSpec(desiredWindowHeight,lp.height);</div><div class=\"line\">performMeasure(childWidthMeasureSpec,childHeightMeasureSpec);</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">int</span> <span class=\"title\">getRootMeasureSpec</span><span class=\"params\">(<span class=\"keyword\">int</span> windowSize,<span class=\"keyword\">int</span> rootDimension)</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">int</span> measureSpec;</div><div class=\"line\">    <span class=\"keyword\">switch</span> (rootDimension) &#123;</div><div class=\"line\">        <span class=\"keyword\">case</span> ViewGroup.LayoutParams.MATCH_PARENT:</div><div class=\"line\">            <span class=\"comment\">// Window can't resize. Force root view to be windowSize.</span></div><div class=\"line\">            measureSpec = MeasureSpec.makeMeasureSpec(windowSize,MeasureSpec.EXACTLY);</div><div class=\"line\">            <span class=\"keyword\">break</span>;</div><div class=\"line\">        <span class=\"keyword\">case</span> ViewGroup.LayoutParams.WRAP_CONTENT:</div><div class=\"line\">            <span class=\"comment\">// Window can resize. Set max size for root view.</span></div><div class=\"line\">            measureSpec = MeasureSpec.makeMeasureSpec(windowSize,MeasureSpec.AT_MOST);</div><div class=\"line\">            <span class=\"keyword\">break</span>;</div><div class=\"line\">        <span class=\"keyword\">default</span>:</div><div class=\"line\">            <span class=\"comment\">// Window wants to be an exact size. Force root view to be that size.</span></div><div class=\"line\">            measureSpec = MeasureSpec.makeMeasureSpec(rootDimension,Measure-Spec.EXACTLY);</div><div class=\"line\">            <span class=\"keyword\">break</span>;</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">return</span> measureSpec;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>通过上述代码，<code>DecorView</code>的<code>MeasureSpec</code>的产生过程就很明确了，具体来说其遵守如下规则，根据它的<code>LayoutParams</code>中的宽/高的参数来划分。</p>\n<ul>\n<li>LayoutParams.MATCH_PARENT：精确模式，大小就是窗口的大小；</li>\n<li>LayoutParams.WRAP_CONTENT：最大模式，大小不定，但是不能超过窗口的大小；</li>\n<li>固定大小（比如100dp）：精确模式，大小为LayoutParams中指定的大小。<br>对于普通<code>View</code>来说，这里是指我们布局中的<code>View</code>，<code>View</code>的<code>measure</code>过程由<code>ViewGroup</code>传递而来，先看一下<code>ViewGroup</code>的<code>measureChildWithMargins</code>方法：<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title\">measureChildWithMargins</span><span class=\"params\">(View child,<span class=\"keyword\">int</span> parentWidthMeasureSpec,<span class=\"keyword\">int</span> widthUsed,<span class=\"keyword\">int</span> parentHeightMeasureSpec,<span class=\"keyword\">int</span> heightUsed)</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">final</span> MarginLayoutParams lp = (MarginLayoutParams) child.getLayout-Params();</div><div class=\"line\">    <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> childWidthMeasureSpec = getChildMeasureSpec(parentWidthMeasureSpec,mPaddingLeft + mPaddingRight + lp.leftMargin + lp.rightMargin+ widthUsed,lp.width);</div><div class=\"line\">    <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> childHeightMeasureSpec = getChildMeasureSpec(parentHeight-MeasureSpec,mPaddingTop + mPaddingBottom + lp.topMargin + lp.bottomMargin+ heightUsed,lp.height);</div><div class=\"line\">    child.measure(childWidthMeasureSpec,childHeightMeasureSpec);</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n</li>\n</ul>\n<p>上述方法会对子元素进行<code>measure</code>，在调用子元素的<code>measure</code>方法之前会先通过<code>getChildMeasureSpec</code>方法来得到子元素的<code>MeasureSpec</code>。从代码来看，很显然，子元素的<code>MeasureSpec</code>的创建与父容器的<code>MeasureSpec</code>和子元素本身的<code>LayoutParam</code>s有关，此外还和<code>View</code>的<code>margin</code>及<code>padding</code>有关，具体情况可以看一下<code>ViewGroup</code>的<code>getChildMeasureSpec</code>方法，如下所示:<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">int</span> <span class=\"title\">getChildMeasureSpec</span><span class=\"params\">(<span class=\"keyword\">int</span> spec,<span class=\"keyword\">int</span> padding,<span class=\"keyword\">int</span> child-Dimension)</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">int</span> specMode = MeasureSpec.getMode(spec);</div><div class=\"line\">    <span class=\"keyword\">int</span> specSize = MeasureSpec.getSize(spec);</div><div class=\"line\">    <span class=\"keyword\">int</span> size = Math.max(<span class=\"number\">0</span>,specSize -padding);</div><div class=\"line\">    <span class=\"keyword\">int</span> resultSize = <span class=\"number\">0</span>;</div><div class=\"line\">    <span class=\"keyword\">int</span> resultMode = <span class=\"number\">0</span>;</div><div class=\"line\">    <span class=\"keyword\">switch</span> (specMode) &#123;</div><div class=\"line\">        <span class=\"comment\">// Parent has imposed an exact size on us</span></div><div class=\"line\">        <span class=\"keyword\">case</span> MeasureSpec.EXACTLY:</div><div class=\"line\">            <span class=\"keyword\">if</span> (childDimension =&gt; <span class=\"number\">0</span>) &#123;</div><div class=\"line\">                resultSize = childDimension;</div><div class=\"line\">                resultMode = MeasureSpec.EXACTLY;</div><div class=\"line\">            &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (childDimension == LayoutParams.MATCH_PARENT) &#123;</div><div class=\"line\">                <span class=\"comment\">// Child wants to be our size. So be it.</span></div><div class=\"line\">                resultSize = size;</div><div class=\"line\">                resultMode = MeasureSpec.EXACTLY;</div><div class=\"line\">            &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (childDimension == LayoutParams.WRAP_CONTENT) &#123;</div><div class=\"line\">                <span class=\"comment\">// Child wants to determine its own size. It can't be</span></div><div class=\"line\">                <span class=\"comment\">// bigger than us.</span></div><div class=\"line\">                resultSize = size;</div><div class=\"line\">                resultMode = MeasureSpec.AT_MOST;</div><div class=\"line\">            &#125;</div><div class=\"line\">            <span class=\"keyword\">break</span>;</div><div class=\"line\">        <span class=\"comment\">// Parent has imposed a maximum size on us</span></div><div class=\"line\">        <span class=\"keyword\">case</span> MeasureSpec.AT_MOST:</div><div class=\"line\">            <span class=\"keyword\">if</span> (childDimension =&gt; <span class=\"number\">0</span>) &#123;</div><div class=\"line\">                <span class=\"comment\">// Child wants a specific size... so be it</span></div><div class=\"line\">                resultSize = childDimension;</div><div class=\"line\">                resultMode = MeasureSpec.EXACTLY;</div><div class=\"line\">            &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (childDimension == LayoutParams.MATCH_PARENT) &#123;</div><div class=\"line\">                <span class=\"comment\">// Child wants to be our size,but our size is not fixed.</span></div><div class=\"line\">                <span class=\"comment\">// Constrain child to not be bigger than us.</span></div><div class=\"line\">                resultSize = size;</div><div class=\"line\">                resultMode = MeasureSpec.AT_MOST;</div><div class=\"line\">            &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (childDimension == LayoutParams.WRAP_CONTENT) &#123;</div><div class=\"line\">                <span class=\"comment\">// Child wants to determine its own size. It can't be</span></div><div class=\"line\">                <span class=\"comment\">// bigger than us.</span></div><div class=\"line\">                resultSize = size;</div><div class=\"line\">                resultMode = MeasureSpec.AT_MOST;</div><div class=\"line\">            &#125;</div><div class=\"line\">            <span class=\"keyword\">break</span>;</div><div class=\"line\">        <span class=\"comment\">// Parent asked to see how big we want to be</span></div><div class=\"line\">        <span class=\"keyword\">case</span> MeasureSpec.UNSPECIFIED:</div><div class=\"line\">            <span class=\"keyword\">if</span> (childDimension =&gt; <span class=\"number\">0</span>) &#123;</div><div class=\"line\">                <span class=\"comment\">// Child wants a specific size... let him have it</span></div><div class=\"line\">                resultSize = childDimension;</div><div class=\"line\">                resultMode = MeasureSpec.EXACTLY;</div><div class=\"line\">            &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (childDimension == LayoutParams.MATCH_PARENT) &#123;</div><div class=\"line\">                <span class=\"comment\">// Child wants to be our size... find out how big it should</span></div><div class=\"line\">                <span class=\"comment\">// be</span></div><div class=\"line\">                resultSize = <span class=\"number\">0</span>;</div><div class=\"line\">                resultMode = MeasureSpec.UNSPECIFIED;</div><div class=\"line\">            &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (childDimension == LayoutParams.WRAP_CONTENT) &#123;</div><div class=\"line\">                <span class=\"comment\">// Child wants to determine its own size.... find out how</span></div><div class=\"line\">                <span class=\"comment\">// big it should be</span></div><div class=\"line\">                resultSize = <span class=\"number\">0</span>;</div><div class=\"line\">                resultMode = MeasureSpec.UNSPECIFIED;</div><div class=\"line\">            &#125;</div><div class=\"line\">            <span class=\"keyword\">break</span>;</div><div class=\"line\">        &#125;</div><div class=\"line\">    <span class=\"keyword\">return</span> MeasureSpec.makeMeasureSpec(resultSize,resultMode);</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>它的主要作用是根据父容器的<code>MeasureSpec</code>同时结合View本身的<code>LayoutParams</code>来确定子元素的<code>MeasureSpec</code>，参数中的<code>padding</code>是指父容器中已占用的空间大小，因此子元素可用的大小为父容器的尺寸减去<code>padding</code>，具体代码如下所示:<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">int</span> specSize = MeasureSpec.getSize(spec);</div><div class=\"line\"><span class=\"keyword\">int</span> size = Math.max(<span class=\"number\">0</span>,specSize -padding);</div></pre></td></tr></table></figure></p>\n<p>这里简单说一下，当View采用固定宽/高的时候，不管父容器的<code>MeasureSpec</code>是什么，<code>View</code>的<code>MeasureSpec</code>都是精确模式并且其大小遵循<code>Layoutparams</code>中的大小。当<code>View</code>的宽/高是<code>match_parent</code>时，如果父容器的模式是精准模式，那么<code>View</code>也是精准模式并且其大小是父容器的剩余空间；如果父容器是最大模式，那么<code>View</code>也是最大模式并且其大小不会超过父容器的剩余空间。当<code>View</code>的宽/高是<code>wrap_content</code>时，不管父容器的模式是精准还是最大化，<code>View</code>的模式总是最大化并且大小不能超过父容器的剩余空间。在我们的分析中漏掉了<code>UNSPECIFIED</code>模式，那是因为这个模式主要用于系统内部多次Measure的情形，一般来说，我们不需要关注此模式。</p>\n<h4 id=\"View的工作流程\"><a href=\"#View的工作流程\" class=\"headerlink\" title=\"View的工作流程\"></a>View的工作流程</h4><h5 id=\"measure过程\"><a href=\"#measure过程\" class=\"headerlink\" title=\"measure过程\"></a>measure过程</h5><p>measure过程要分情况来看，如果只是一个原始的<code>View</code>，那么通过<code>measure</code>方法就完成了其测量过程，如果是一个<code>ViewGroup</code>，除了完成自己的测量过程外，还会遍历去调用所有子元素的<code>measure</code>方法，各个子元素再递归去执行这个流程。<br><strong> View的measure过程 </strong><br><code>View</code>的<code>measure</code>过程由其<code>measure</code>方法来完成，<code>measure</code>方法是一个<code>final</code>类型的方法，这意味着子类不能重写此方法，在<code>View</code>的<code>measure</code>方法中会去调用<code>View</code>的<code>onMeasure</code>方法，因此只需要看<code>onMeasure</code>的实现即可：<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title\">onMeasure</span><span class=\"params\">(<span class=\"keyword\">int</span> widthMeasureSpec,<span class=\"keyword\">int</span> heightMeasureSpec)</span> </span>&#123;</div><div class=\"line\">    setMeasuredDimension(getDefaultSize(getSuggestedMinimumWidth(),widthMeasureSpec),getDefaultSize(getSuggestedMinimumHeight(),heightMeasureSpec));</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">int</span> <span class=\"title\">getDefaultSize</span><span class=\"params\">(<span class=\"keyword\">int</span> size,<span class=\"keyword\">int</span> measureSpec)</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">int</span> result = size;</div><div class=\"line\">    <span class=\"keyword\">int</span> specMode = MeasureSpec.getMode(measureSpec);</div><div class=\"line\">    <span class=\"keyword\">int</span> specSize = MeasureSpec.getSize(measureSpec);</div><div class=\"line\">    <span class=\"keyword\">switch</span> (specMode) &#123;</div><div class=\"line\">        <span class=\"keyword\">case</span> MeasureSpec.UNSPECIFIED:</div><div class=\"line\">            result = size;</div><div class=\"line\">        <span class=\"keyword\">break</span>;</div><div class=\"line\">        <span class=\"keyword\">case</span> MeasureSpec.AT_MOST:</div><div class=\"line\">        <span class=\"keyword\">case</span> MeasureSpec.EXACTLY:</div><div class=\"line\">            result = specSize;</div><div class=\"line\">        <span class=\"keyword\">break</span>;</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">return</span> result;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>可以看出，<code>getDefaultSize</code>这个方法的逻辑很简单，对于我们来说，我们只需要看<code>AT_MOST</code>和<code>EXACTLY</code>这两种情况。简单地理解，其实<code>getDefaultSize</code>返回的大小就是<code>measureSpec</code>中的<code>specSize</code>，而这个<code>specSize</code>就是<code>View</code>测量后的大小，这里多次提到测量后的大小，是因为<code>View</code>最终的大小是在<code>layout</code>阶段确定的，所以这里必须要加以区分，但是几乎所有情况下<code>View</code>的测量大小和最终大小是相等的。<br>至于<code>UNSPECIFIED</code>这种情况，一般用于系统内部的测量过程，在这种情况下，<code>View</code>的大小为<code>getDefaultSize</code>的第一个参数<code>size</code>，即宽/高分别为<code>getSuggestedMinimumWidth</code>和<code>getSuggestedMinimumHeight</code>这两个方法的返回值，看一下它们的源码:<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">int</span> <span class=\"title\">getSuggestedMinimumWidth</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> (mBackground == <span class=\"keyword\">null</span>) ? mMinWidth : max(mMinWidth,mBackground.getMinimumWidth());</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">int</span> <span class=\"title\">getSuggestedMinimumHeight</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> (mBackground == <span class=\"keyword\">null</span>) ? mMinHeight : max(mMinHeight,mBackground.getMinimumHeight());</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>这里只分析<code>getSuggestedMinimumWidth</code>方法的实现，<code>getSuggestedMinimumHeight</code>和它的实现原理是一样的。从<code>getSuggestedMinimumWidth</code>的代码可以看出，如果<code>View</code>没有设置背景，那么<code>View</code>的宽度为<code>mMinWidth</code>，而<code>mMinWidth</code>对应于<code>android:minWidth</code>这个属性所指定的值，因此<code>View</code>的宽度即为<code>android:minWidth</code>属性所指定的值。这个属性如果不指定，那么<code>mMinWidth</code>则默认为0；如果<code>View</code>指定了背景，则<code>View</code>的宽度为<code>max(mMinWidth,mBackground.getMinimumWidth())</code>。<code>mMinWidth</code>的含义我们已经知道了，那么<code>mBackground.getMinimumWidth()</code>是什么呢？我们看一下<code>Drawable</code>的<code>getMinimumWidth</code>方法，如下所示:<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">getMinimumWidth</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> intrinsicWidth = getIntrinsicWidth();</div><div class=\"line\">    <span class=\"keyword\">return</span> intrinsicWidth &gt; <span class=\"number\">0</span> ? intrinsicWidth : <span class=\"number\">0</span>;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>可以看出，<code>getMinimumWidth</code>返回的就是<code>Drawable</code>的原始宽度，前提是这个<code>Drawable</code>有原始宽度，否则就返回0。<br>这里再总结一下<code>getSuggestedMinimumWidth</code>的逻辑：如果<code>View</code>没有设置背景，那么返回<code>android:minWidth</code>这个属性所指定的值，这个值可以为0；如果<code>View</code>设置了背景，则返回<code>android:minWidth</code>和背景的最小宽度这两者中的最大值，<code>getSuggestedMinimumWidth</code>和<code>getSuggestedMinimumHeight</code>的返回值就是<code>View</code>在<code>UNSPECIFIED</code>情况下的测量宽/高。<br>从<code>getDefaultSize</code>方法的实现来看，<code>View</code>的宽/高由<code>specSize</code>决定，所以我们可以得出如下结论：直接继承<code>View</code>的自定义控件需要重写<code>onMeasure</code>方法并设置<code>wrap_content</code>时的自身大小，否则在布局中使用<code>wrap_content</code>就相当于使用<code>match_parent</code>。<br>从上述代码中我们知道，如果<code>View</code>在布局中使用<code>wrap_content</code>，那么它的<code>specMode</code>是<code>AT_MOST</code>模式，在这种模式下，它的宽/高等于<code>specSize</code>；这种情况下<code>View</code>的<code>specSize</code>是p<code>arentSize</code>，而<code>parentSize</code>是父容器中目前可以使用的大小，也就是父容器当前剩余的空间大小。很显然，<code>View</code>的宽/高就等于父容器当前剩余的空间大小，这种效果和在布局中使用<code>match_parent</code>完全一致。如何解决这个问题呢？也很简单，代码如下所示：<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title\">onMeasure</span><span class=\"params\">(<span class=\"keyword\">int</span> widthMeasureSpec,<span class=\"keyword\">int</span> heightMeasureSpec)</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">super</span>.onMeasure(widthMeasureSpec,heightMeasureSpec);</div><div class=\"line\">    <span class=\"keyword\">int</span> widthSpecMode = MeasureSpec.getMode(widthMeasureSpec);</div><div class=\"line\">    <span class=\"keyword\">int</span> widthSpecSize = MeasureSpec.getSize(widthMeasureSpec);</div><div class=\"line\">    <span class=\"keyword\">int</span> heightSpecMode = MeasureSpec.getMode(heightMeasureSpec);</div><div class=\"line\">    <span class=\"keyword\">int</span> heightSpecSize = MeasureSpec.getSize(heightMeasureSpec);</div><div class=\"line\">    <span class=\"keyword\">if</span> (widthSpecMode == MeasureSpec.AT_MOST &amp;&amp; heightSpecMode == MeasureSpec.AT_MOST) &#123;</div><div class=\"line\">        setMeasuredDimension(mWidth,mHeight);</div><div class=\"line\">    &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (widthSpecMode == MeasureSpec.AT_MOST) &#123;</div><div class=\"line\">        setMeasuredDimension(mWidth,heightSpecSize);</div><div class=\"line\">    &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (heightSpecMode == MeasureSpec.AT_MOST) &#123;</div><div class=\"line\">        setMeasuredDimension(widthSpecSize,mHeight);</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>在上面的代码中，我们只需要给<code>View</code>指定一个默认的内部宽/高（<code>mWidth</code>和<code>mHeight</code>），并在<code>wrap_content</code>时设置此宽/高即可。对于非<code>wrap_content</code>情形，我们沿用系统的测量值即可，至于这个默认的内部宽/高的大小如何指定，这个没有固定的依据，根据需要灵活指定即可。如果查看<code>TextView</code>、<code>ImageView</code>等的源码就可以知道，针对<code>wrap_content</code>情形，它们的<code>onMeasure</code>方法均做了特殊处理。</p>\n<p><strong> ViewGroup的measure过程 </strong><br>对于<code>ViewGroup</code>来说，除了完成自己的<code>measure</code>过程以外，还会遍历去调用所有子元素的<code>measure</code>方法，各个子元素再递归去执行这个过程。和<code>View</code>不同的是，<code>ViewGroup</code>是一个抽象类，因此它没有重写<code>View</code>的<code>onMeasure</code>方法，但是它提供了一个叫<code>measureChildren</code>的方法，如下所示。<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title\">measureChildren</span><span class=\"params\">(<span class=\"keyword\">int</span> widthMeasureSpec,<span class=\"keyword\">int</span> heightMeasureSpec)</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> size = mChildrenCount;</div><div class=\"line\">    <span class=\"keyword\">final</span> View[] children = mChildren;</div><div class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; size; ++i) &#123;</div><div class=\"line\">        <span class=\"keyword\">final</span> View child = children[i];</div><div class=\"line\">        <span class=\"keyword\">if</span> ((child.mViewFlags &amp; VISIBILITY_MASK) != GONE) &#123;</div><div class=\"line\">            measureChild(child,widthMeasureSpec,heightMeasureSpec);</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>从上述代码来看，<code>ViewGroup</code>在<code>measure</code>时，会对每一个子元素进行<code>measure</code>，<code>measureChild</code>这个方法的实现也很好理解，如下所示<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title\">measureChild</span><span class=\"params\">(View child,<span class=\"keyword\">int</span> parentWidthMeasureSpec,<span class=\"keyword\">int</span> parentHeightMeasureSpec)</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">final</span> LayoutParams lp = child.getLayoutParams();</div><div class=\"line\">    <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> childWidthMeasureSpec = getChildMeasureSpec(parentWidth-MeasureSpec,mPaddingLeft + mPaddingRight,lp.width);</div><div class=\"line\">    <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> childHeightMeasureSpec = getChildMeasureSpec(parentHeight-MeasureSpec,mPaddingTop + mPaddingBottom,lp.height);</div><div class=\"line\">    child.measure(childWidthMeasureSpec,childHeightMeasureSpec);</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>很显然，<code>measureChild</code>的思想就是取出子元素的<code>LayoutParams</code>，然后再通过<code>getChildMeasureSpec</code>来创建子元素的<code>MeasureSpec</code>，接着将<code>MeasureSpec</code>直接传递给<code>View</code>的<code>measure</code>方法来进行测量。我们知道，<code>ViewGroup</code>并没有定义其测量的具体过程，这是因为<code>ViewGroup</code>是一个抽象类，其测量过程的<code>onMeasure</code>方法需要各个子类去具体实现，比如<code>LinearLayout</code>、<code>RelativeLayout</code>等。</p>\n<h5 id=\"layout过程\"><a href=\"#layout过程\" class=\"headerlink\" title=\"layout过程\"></a>layout过程</h5><p><code>Layout</code>的作用是<code>ViewGroup</code>用来确定子元素的位置，当<code>ViewGroup</code>的位置被确定后，它在<code>onLayout</code>中会遍历所有的子元素并调用其<code>layout</code>方法，在<code>layout</code>方法中<code>onLayout</code>方法又会被调用。<code>Layout</code>过程和<code>measure</code>过程相比就简单多了，<code>layout</code>方法确定<code>View</code>本身的位置，而<code>onLayout</code>方法则会确定所有子元素的位置，先看<code>View</code>的<code>layout</code>方法，如下所示。<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">layout</span><span class=\"params\">(<span class=\"keyword\">int</span> l,<span class=\"keyword\">int</span> t,<span class=\"keyword\">int</span> r,<span class=\"keyword\">int</span> b)</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">if</span> ((mPrivateFlags3 &amp; PFLAG3_MEASURE_NEEDED_BEFORE_LAYOUT) != <span class=\"number\">0</span>) &#123;</div><div class=\"line\">        onMeasure(mOldWidthMeasureSpec,mOldHeightMeasureSpec);</div><div class=\"line\">        mPrivateFlags3 &amp;= ~PFLAG3_MEASURE_NEEDED_BEFORE_LAYOUT;</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">int</span> oldL = mLeft;</div><div class=\"line\">    <span class=\"keyword\">int</span> oldT = mTop;</div><div class=\"line\">    <span class=\"keyword\">int</span> oldB = mBottom;</div><div class=\"line\">    <span class=\"keyword\">int</span> oldR = mRight;</div><div class=\"line\">    <span class=\"keyword\">boolean</span> changed = isLayoutModeOptical(mParent) ?setOpticalFrame(l,t,r,b) : setFrame(l,t,r,b);</div><div class=\"line\">    <span class=\"keyword\">if</span> (changed || (mPrivateFlags &amp; PFLAG_LAYOUT_REQUIRED) == PFLAG_LAYOUT_REQUIRED) &#123;</div><div class=\"line\">        onLayout(changed,l,t,r,b);</div><div class=\"line\">        mPrivateFlags &amp;= ~PFLAG_LAYOUT_REQUIRED;</div><div class=\"line\">        ListenerInfo li = mListenerInfo;</div><div class=\"line\">        <span class=\"keyword\">if</span> (li != <span class=\"keyword\">null</span> &amp;&amp; li.mOnLayoutChangeListeners != <span class=\"keyword\">null</span>) &#123;</div><div class=\"line\">            ArrayList&lt;OnLayoutChangeListener&gt; listenersCopy =(ArrayList&lt;OnLayoutChangeListener&gt;)li.mOnLayout-ChangeListeners.clone();</div><div class=\"line\">            <span class=\"keyword\">int</span> numListeners = listenersCopy.size();</div><div class=\"line\">            <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; numListeners; ++i) &#123;</div><div class=\"line\">                listenersCopy.get(i).onLayoutChange(<span class=\"keyword\">this</span>,l,t,r,b,oldL,oldT,oldR,oldB);</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">    mPrivateFlags &amp;= ~PFLAG_FORCE_LAYOUT;</div><div class=\"line\">    mPrivateFlags3 |= PFLAG3_IS_LAID_OUT;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p><code>layout</code>方法的大致流程如下：首先会通过<code>setFrame</code>方法来设定<code>View</code>的四个顶点的位置，即初始化<code>mLeft</code>、<code>mRight</code>、<code>mTop</code>和<code>mBottom</code>这四个值，<code>View</code>的四个顶点一旦确定，那么<code>View</code>在父容器中的位置也就确定了；接着会调用<code>onLayout</code>方法，这个方法的用途是父容器确定子元素的位置，和<code>onMeasure</code>方法类似，<code>onLayout</code>的具体实现同样和具体的布局有关，所以<code>View</code>和<code>ViewGroup</code>均没有真正实现<code>onLayout</code>方法。接下来，我们可以看一下<code>LinearLayout</code>的<code>onLayout</code>方法，如下所示。<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title\">onLayout</span><span class=\"params\">(<span class=\"keyword\">boolean</span> changed,<span class=\"keyword\">int</span> l,<span class=\"keyword\">int</span> t,<span class=\"keyword\">int</span> r,<span class=\"keyword\">int</span> b)</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">if</span> (mOrientation == VERTICAL) &#123;</div><div class=\"line\">        layoutVertical(l,t,r,b);</div><div class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">        layoutHorizontal(l,t,r,b);</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p><code>LinearLayout</code>中<code>onLayout</code>的实现逻辑和<code>onMeasure</code>的实现逻辑类似，这里选择<code>layoutVertical</code>继续讲解，为了更好地理解其逻辑，这里只给出了主要的代码：<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">layoutVertical</span><span class=\"params\">(<span class=\"keyword\">int</span> left,<span class=\"keyword\">int</span> top,<span class=\"keyword\">int</span> right,<span class=\"keyword\">int</span> bottom)</span> </span>&#123;</div><div class=\"line\">    ......</div><div class=\"line\">    <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> count = getVirtualChildCount();</div><div class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; count; i++) &#123;</div><div class=\"line\">        <span class=\"keyword\">final</span> View child = getVirtualChildAt(i);</div><div class=\"line\">        <span class=\"keyword\">if</span> (child == <span class=\"keyword\">null</span>) &#123;</div><div class=\"line\">            childTop += measureNullChild(i);</div><div class=\"line\">        &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (child.getVisibility() != GONE) &#123;</div><div class=\"line\">            <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> childWidth = child.getMeasuredWidth();</div><div class=\"line\">            <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> childHeight = child.getMeasuredHeight();</div><div class=\"line\">            <span class=\"keyword\">final</span> LinearLayout.LayoutParams lp =(LinearLayout.LayoutParams) child.getLayoutParams();</div><div class=\"line\">            ......</div><div class=\"line\">            <span class=\"keyword\">if</span> (hasDividerBeforeChildAt(i)) &#123;</div><div class=\"line\">                childTop += mDividerHeight;</div><div class=\"line\">            &#125;</div><div class=\"line\">            childTop += lp.topMargin;</div><div class=\"line\">            setChildFrame(child,childLeft,childTop + getLocationOffset(child),childWidth,childHeight);</div><div class=\"line\">            childTop += childHeight + lp.bottomMargin + getNextLocation-Offset(child);</div><div class=\"line\">            i += getChildrenSkipCount(child,i);</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>这里分析一下<code>layoutVertical</code>的代码逻辑，可以看到，此方法会遍历所有子元素并调用<code>setChildFrame</code>方法来为子元素指定对应的位置，其中<code>childTop</code>会逐渐增大，这就意味着后面的子元素会被放置在靠下的位置，这刚好符合竖直方向的<code>LinearLayout</code>的特性。至于<code>setChildFrame</code>，它仅仅是调用子元素的<code>layout</code>方法而已，这样父元素在<code>layout</code>方法中完成自己的定位以后，就通过<code>onLayout</code>方法去调用子元素的<code>layout</code>方法，子元素又会通过自己的<code>layout</code>方法来确定自己的位置，这样一层一层地传递下去就完成了整个<code>View</code>树的<code>layout</code>过程。<code>setChildFrame</code>方法的实现如下所示。<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">setChildFrame</span><span class=\"params\">(View child,<span class=\"keyword\">int</span> left,<span class=\"keyword\">int</span> top,<span class=\"keyword\">int</span> width,<span class=\"keyword\">int</span> height)</span> </span>&#123;</div><div class=\"line\">    child.layout(left,top,left + width,top + height);</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>我们注意到，setChildFrame中的width和height实际上就是子元素的测量宽/高，从下面的代码可以看出这一点：<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">final</span> <span class=\"keyword\">int</span> childWidth = child.getMeasuredWidth();</div><div class=\"line\"><span class=\"keyword\">final</span> <span class=\"keyword\">int</span> childHeight = child.getMeasuredHeight();</div><div class=\"line\">setChildFrame(child,childLeft,childTop + getLocationOffset(child),childWidth,childHeight);</div></pre></td></tr></table></figure></p>\n<p>而在<code>layout</code>方法中会通过<code>setFrame</code>去设置子元素的四个顶点的位置，在<code>setFrame</code>中有如下几句赋值语句，这样一来子元素的位置就确定了：<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">mLeft = left;</div><div class=\"line\">mTop = top;</div><div class=\"line\">mRight = right;</div><div class=\"line\">mBottom = bottom;</div></pre></td></tr></table></figure></p>\n<p><code>View</code>的测量宽/高和最终/宽高有什么区别？这个问题可以具体为：<code>View</code>的<code>getMeasuredWidth</code>和<code>getWidth</code>这两个方法有什么区别，至于<code>getMeasuredHeight</code>和<code>getHeight</code>的区别和前两者完全一样。为了回答这个问题，首先，我们看一下getwidth和getHeight这两个方法的具体实现：<br><figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div></pre></td><td class=\"code\"><pre><div class=\"line\">public final int getWidth() &#123;</div><div class=\"line\">    return mRight -mLeft;</div><div class=\"line\">&#125;</div><div class=\"line\">public final int getHeight() &#123;</div><div class=\"line\">    return mBottom -mTop;</div><div class=\"line\">&#125;</div><div class=\"line\">``` </div><div class=\"line\"></div><div class=\"line\">从`getWidth`和`getHeight`的源码再结合`mLeft`、`mRight`、`mTop`和`mBottom`这四个变量的赋值过程来看，`getWidth`方法的返回值刚好就是`View`的测量宽度，而`getHeight`方法的返回值也刚好就是`View`的测量高度。经过上述分析，现在我们可以回答这个问题了：在`View`的默认实现中，`View`的测量宽/高和最终宽/高是相等的，只不过测量宽/高形成于`View`的`measure`过程，而最终宽/高形成于`View`的`layout`过程，即两者的赋值时机不同，测量宽/高的赋值时机稍微早一些。因此，在日常开发中，我们可以认为`View`的`测量宽/高`就`等于``最终宽/高`，但是的确存在某些特殊情况会导致两者不一致.</div><div class=\"line\"></div><div class=\"line\">##### draw过程</div><div class=\"line\">Draw过程就比较简单了，它的作用是将View绘制到屏幕上面。View的绘制过程遵循</div><div class=\"line\">如下几步：</div><div class=\"line\">* 绘制背景background.draw(canvas)。</div><div class=\"line\">* 绘制自己（onDraw）。</div><div class=\"line\">* 绘制children（dispatchDraw）。</div><div class=\"line\">* 绘制装饰（onDrawScrollBars）。</div><div class=\"line\">这一点通过draw方法的源码可以明显看出来，如下所示。</div><div class=\"line\"></div><div class=\"line\">``` java</div><div class=\"line\">    public void draw(Canvas canvas) &#123;</div><div class=\"line\">    final int privateFlags = mPrivateFlags;</div><div class=\"line\">    final boolean dirtyOpaque = (privateFlags &amp; PFLAG_DIRTY_MASK) == PFLAG_DIRTY_OPAQUE &amp;&amp;(mAttachInfo == null || !mAttachInfo.mIgnoreDirtyState);</div><div class=\"line\">    mPrivateFlags = (privateFlags &amp; ~PFLAG_DIRTY_MASK) | PFLAG_DRAWN;</div><div class=\"line\">    /*</div><div class=\"line\">    * Draw traversal performs several drawing steps which must be executed</div><div class=\"line\">    * in the appropriate order:</div><div class=\"line\">    *</div><div class=\"line\">    * 1. Draw the background</div><div class=\"line\">    * 2. If necessary,save the canvas' layers to prepare for fading</div><div class=\"line\">    * 3. Draw view's content</div><div class=\"line\">    * 4. Draw children</div><div class=\"line\">    * 5. If necessary,draw the fading edges and restore layers</div><div class=\"line\">    * 6. Draw decorations (scrollbars for instance)</div><div class=\"line\">    */</div><div class=\"line\">    // Step 1,draw the background,if needed</div><div class=\"line\">    int saveCount;</div><div class=\"line\">    if (!dirtyOpaque) &#123;</div><div class=\"line\">        drawBackground(canvas);</div><div class=\"line\">    &#125;</div><div class=\"line\">    // skip step 2 &amp; 5 if possible (common case)</div><div class=\"line\">    final int viewFlags = mViewFlags;</div><div class=\"line\">    boolean horizontalEdges = (viewFlags &amp; FADING_EDGE_HORIZONTAL) != 0;</div><div class=\"line\">    boolean verticalEdges = (viewFlags &amp; FADING_EDGE_VERTICAL) != 0;</div><div class=\"line\">    if (!verticalEdges &amp;&amp; !horizontalEdges) &#123;</div><div class=\"line\">        // Step 3,draw the content</div><div class=\"line\">        if (!dirtyOpaque) onDraw(canvas);</div><div class=\"line\">            // Step 4,draw the children</div><div class=\"line\">        dispatchDraw(canvas);</div><div class=\"line\">        // Step 6,draw decorations (scrollbars)</div><div class=\"line\">        onDrawScrollBars(canvas);</div><div class=\"line\">        if (mOverlay != null &amp;&amp; !mOverlay.isEmpty()) &#123;</div><div class=\"line\">            mOverlay.getOverlayView().dispatchDraw(canvas);</div><div class=\"line\">        &#125;</div><div class=\"line\">        // we're done...</div><div class=\"line\">        return;</div><div class=\"line\">    &#125;</div><div class=\"line\">    ...</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>View绘制过程的传递是通过dispatchDraw来实现的，dispatchDraw会遍历调用所有子元素的draw方法，如此draw事件就一层层地传递了下去。View有一个特殊的方法setWillNotDraw，先看一下它的源码，如下所示。<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">/**</span></div><div class=\"line\">* If this view doesn't do any drawing on its own,set this flag to</div><div class=\"line\">* allow further optimizations. By default,this flag is not set on</div><div class=\"line\">* View,but could be set on some View subclasses such as ViewGroup.</div><div class=\"line\">*</div><div class=\"line\">* Typically,if you override &#123;<span class=\"doctag\">@link</span> #onDraw(android.graphics.Canvas)&#125;</div><div class=\"line\">* you should clear this flag.</div><div class=\"line\">*</div><div class=\"line\">* <span class=\"doctag\">@param</span> willNotDraw whether or not this View draw on its own</div><div class=\"line\">*/</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">setWillNotDraw</span><span class=\"params\">(<span class=\"keyword\">boolean</span> willNotDraw)</span> </span>&#123;</div><div class=\"line\">    setFlags(willNotDraw ? WILL_NOT_DRAW : <span class=\"number\">0</span>,DRAW_MASK);</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>从<code>setWillNotDraw</code>这个方法的注释中可以看出，如果一个<code>View</code>不需要绘制任何内容，那么设置这个标记位为<code>true</code>以后，系统会进行相应的优化。默认情况下，<code>View</code>没有启用这个优化标记位，但是<code>ViewGroup</code>会默认启用这个优化标记位。这个标记位对实际开发的意义是：当我们的自定义控件继承于<code>ViewGroup</code>并且本身不具备绘制功能时，就可以开启这个标记位从而便于系统进行后续的优化。当然，当明确知道一个<code>ViewGroup</code>需要通过<code>onDraw</code>来绘制内容时，我们需要显式地关闭<code>WILL_NOT_DRAW</code>这个标记位。</p>\n<hr>\n<p>以上</p>\n","excerpt":"<p>抄的《Android开发艺术探索》第四章<br><code>ViewRoot</code>对应于<code>ViewRootImpl</code>类，它是连接<code>WindowManager</code>和<code>DecorView</code>的纽带，<code>View</code>的三大流程均是通过<code>ViewRoot</code>来完成的。在<code>ActivityThread</code>中，当<code>Activity</code>对象被创建完毕后，会将<code>DecorView</code>添加到<code>Window</code>中，同时会创建<code>ViewRootImpl</code>对象，并将<code>ViewRootImpl</code>对象和<code>DecorView</code>建立关联，<code>View</code>的绘制流程是从<code>ViewRoot</code>的<code>performTraversals</code>方法开始的，它经过<code>measure</code>、<code>layout</code>和<code>draw</code>三个过程才能最终将一个<code>View</code>绘制出来，其中<code>measure</code>用来测量View的宽和高，<code>layout</code>用来确定View在父容器中的放置位置，而<code>draw</code>则负责将View绘制在屏幕上。</p>","more":"<p><code>performTraversals</code>会依次调用<code>performMeasure</code>、p<code>erformLayout</code>和<code>performDraw</code>三个方法，这三个方法分别完成顶级<code>View</code>的<code>measure</code>、<code>layout</code>和<code>draw</code>这三大流程，其中在<code>performMeasure</code>中会调用<code>measure</code>方法，在<code>measure</code>方法中又会调用<code>onMeasure</code>方法，在<code>onMeasure</code>方法中则会对所有的子元素进行<code>measure</code>过程，这个时候<code>measure</code>流程就从父容器传递到子元素中了，这样就完成了一次<code>measure</code>过程。接着子元素会重复父容器的<code>measure</code>过程，如此反复就完成了整个<code>View</code>树的遍历。同理，<code>performLayout</code>和<code>performDraw</code>的传递流程和<code>performMeasure</code>是类似的，唯一不同的是，<code>performDraw</code>的传递过程是在<code>draw</code>方法中通过<code>dispatchDraw</code>来实现的，不过这并没有本质区别。</p>\n<p><code>measure</code>过程决定了<code>View</code>的宽/高，<code>Measure</code>完成以后，可以通过<code>getMeasuredWidth</code>和<code>getMeasuredHeight</code>方法来获取到<code>View</code>测量后的宽/高，在几乎所有的情况下它都等同于<code>View</code>最终的宽/高，但是特殊情况除外，这点在本章后面会进行说明。<code>Layout</code>过程决定了<code>View</code>的四个顶点的坐标和实际的View的宽/高，完成以后，可以通过<code>getTop</code>、<code>getBottom</code>、<code>getLeft</code>和<code>getRight</code>来拿到<code>View</code>的四个顶点的位置，并可以通过<code>getWidth</code>和<code>getHeight</code>方法来拿到<code>View</code>的最终宽/高。<code>Draw</code>过程则决定了<code>View</code>的显示，只有<code>draw</code>方法完成以后<code>View</code>的内容才能呈现在屏幕上。</p>\n<p><code>DecorView</code>作为顶级<code>View</code>，一般情况下它内部会包含一个竖直方向的<code>LinearLayout</code>，在这个<code>LinearLayout</code>里面有上下两个部分（具体情况和Android版本及主题有关），上面是标题栏，下面是内容栏。在<code>Activity</code>中我们通过<code>setContentView</code>所设置的布局文件其实就是被加到内容栏之中的，而内容栏的id是<code>content</code>，因此可以理解为Activity指定布局的方法不叫setview而叫<code>setContentView</code>，因为我们的布局的确加到了<code>id</code>为<code>content</code>的<code>FrameLayout</code>中。如何得到<code>content</code>呢？可以这样：<code>ViewGroup  content=  findViewById(R.android.id.content)</code>。如何得到我们设置的<code>View</code>呢？可以这样：<code>content.getChildAt(0)</code>。同时，通过源码我们可以知道，<code>DecorView</code>其实是一个<code>FrameLayout</code>，<code>View</code>层的事件都先经过<code>DecorView</code>，然后才传递给我们的View。</p>\n<h4 id=\"MeasureSpec\"><a href=\"#MeasureSpec\" class=\"headerlink\" title=\"MeasureSpec\"></a>MeasureSpec</h4><p><code>MeasureSpec</code>在很大程度上决定了一个View的尺寸规格，之所以说是很大程度上是因为这个过程还受父容器的影响，因为父容器影响View的<code>MeasureSpec</code>的创建过程。在测量过程中，系统会将View的<code>LayoutParams</code>根据父容器所施加的规则转换成对应的<code>MeasureSpec</code>，然后再根据这个<code>measureSpec</code>来测量出<code>View</code>的宽/高。这里的宽/高是测量宽/高，不一定等于<code>View</code>的最终宽/高。<br><code>MeasureSpec</code>代表一个32位int值，高2位代表<code>SpecMode</code>，低30位代表<code>SpecSize</code>，<code>SpecMode</code>是指测量模式，而<code>SpecSize</code>是指在某种测量模式下的规格大小。<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> MODE_SHIFT = <span class=\"number\">30</span>;</div><div class=\"line\"><span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> MODE_MASK = <span class=\"number\">0x3</span> &lt;&lt; MODE_SHIFT;</div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> UNSPECIFIED = <span class=\"number\">0</span> &lt;&lt; MODE_SHIFT;</div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> EXACTLY = <span class=\"number\">1</span> &lt;&lt; MODE_SHIFT;</div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> AT_MOST = <span class=\"number\">2</span> &lt;&lt; MODE_SHIFT;</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">int</span> <span class=\"title\">makeMeasureSpec</span><span class=\"params\">(<span class=\"keyword\">int</span> size,<span class=\"keyword\">int</span> mode)</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">if</span> (sUseBrokenMakeMeasureSpec) &#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> size + mode;</div><div class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> (size &amp; ~MODE_MASK) | (mode &amp; MODE_MASK);</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">int</span> <span class=\"title\">getMode</span><span class=\"params\">(<span class=\"keyword\">int</span> measureSpec)</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> (measureSpec &amp; MODE_MASK);</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">int</span> <span class=\"title\">getSize</span><span class=\"params\">(<span class=\"keyword\">int</span> measureSpec)</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> (measureSpec &amp; ~MODE_MASK);</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p><code>MeasureSpec</code>通过将<code>SpecMode</code>和<code>SpecSize</code>打包成一个int值来避免过多的对象内存分配，为了方便操作，其提供了打包和解包方法。<code>SpecMode</code>和<code>SpecSize</code>也是一个int值，一组<code>SpecMode</code>和<code>SpecSize</code>可以打包为一个<code>MeasureSpec</code>，而一个<code>MeasureSpec</code>可以通过解包的形式来得出其原始的<code>SpecMode</code>和<code>SpecSize</code>，需要注意的是这里提到的<code>MeasureSpec</code>是指<code>MeasureSpec</code>所代表的int值，而并非<code>MeasureSpec</code>本身。<br>SpecMode有三类，每一类都表示特殊的含义，如下所示。<br><strong> UNSPECIFIED </strong><br>父容器不对View有任何限制，要多大给多大，这种情况一般用于系统内部，表示一种测量的状态。<br><strong> EXACTLY </strong><br>父容器已经检测出View所需要的精确大小，这个时候View的最终大小就是SpecSize所指定的值。它对应于LayoutParams中的match_parent和具体的数值这两种模式。<br><strong> AT_MOST </strong><br>父容器指定了一个可用大小即SpecSize，View的大小不能大于这个值，具体是什么值要看不同View的具体实现。它对应于LayoutParams中的wrap_content。</p>\n<h6 id=\"MeasureSpec和LayoutParams\"><a href=\"#MeasureSpec和LayoutParams\" class=\"headerlink\" title=\"MeasureSpec和LayoutParams\"></a>MeasureSpec和LayoutParams</h6><p>在View测量的时候，系统会将<code>LayoutParams</code>在父容器的约束下转换成对应的<code>MeasureSpec</code>，然后再根据这个<code>MeasureSpec</code>来确定View测量后的宽/高。需要注意的是，<code>MeasureSpec</code>不是唯一由<code>LayoutParams</code>决定的，<code>LayoutParams</code>需要和父容器一起才能决定<code>View</code>的<code>MeasureSpec</code>，从而进一步决定View的宽/高。另外，对于<code>顶级View</code>（即DecorView）和<code>普通View</code>来说，<code>MeasureSpec</code>的转换过程略有不同。对于<code>DecorView</code>，其<code>MeasureSpec</code>由窗口的尺寸和其自身的<code>LayoutParams</code>来共同确定；对于普通View，其<code>MeasureSpec</code>由父容器的<code>MeasureSpec</code>和自身的<code>LayoutParams</code>来共同决定，<code>MeasureSpec</code>一旦确定后，<code>onMeasure</code>中就可以确定<code>View</code>的测量宽/高。<br>对于<code>DecorView</code>来说，在<code>ViewRootImpl</code>中的<code>measureHierarchy</code>方法中有如下一段代码，它展示了<code>DecorView</code>的<code>MeasureSpec</code>的创建过程，其中<code>desiredWindowWidth</code>和<code>desiredWindowHeight</code>是屏幕的尺寸:<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div></pre></td><td class=\"code\"><pre><div class=\"line\">childWidthMeasureSpec = getRootMeasureSpec(desiredWindowWidth,lp.width);</div><div class=\"line\">childHeightMeasureSpec = getRootMeasureSpec(desiredWindowHeight,lp.height);</div><div class=\"line\">performMeasure(childWidthMeasureSpec,childHeightMeasureSpec);</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">int</span> <span class=\"title\">getRootMeasureSpec</span><span class=\"params\">(<span class=\"keyword\">int</span> windowSize,<span class=\"keyword\">int</span> rootDimension)</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">int</span> measureSpec;</div><div class=\"line\">    <span class=\"keyword\">switch</span> (rootDimension) &#123;</div><div class=\"line\">        <span class=\"keyword\">case</span> ViewGroup.LayoutParams.MATCH_PARENT:</div><div class=\"line\">            <span class=\"comment\">// Window can't resize. Force root view to be windowSize.</span></div><div class=\"line\">            measureSpec = MeasureSpec.makeMeasureSpec(windowSize,MeasureSpec.EXACTLY);</div><div class=\"line\">            <span class=\"keyword\">break</span>;</div><div class=\"line\">        <span class=\"keyword\">case</span> ViewGroup.LayoutParams.WRAP_CONTENT:</div><div class=\"line\">            <span class=\"comment\">// Window can resize. Set max size for root view.</span></div><div class=\"line\">            measureSpec = MeasureSpec.makeMeasureSpec(windowSize,MeasureSpec.AT_MOST);</div><div class=\"line\">            <span class=\"keyword\">break</span>;</div><div class=\"line\">        <span class=\"keyword\">default</span>:</div><div class=\"line\">            <span class=\"comment\">// Window wants to be an exact size. Force root view to be that size.</span></div><div class=\"line\">            measureSpec = MeasureSpec.makeMeasureSpec(rootDimension,Measure-Spec.EXACTLY);</div><div class=\"line\">            <span class=\"keyword\">break</span>;</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">return</span> measureSpec;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>通过上述代码，<code>DecorView</code>的<code>MeasureSpec</code>的产生过程就很明确了，具体来说其遵守如下规则，根据它的<code>LayoutParams</code>中的宽/高的参数来划分。</p>\n<ul>\n<li>LayoutParams.MATCH_PARENT：精确模式，大小就是窗口的大小；</li>\n<li>LayoutParams.WRAP_CONTENT：最大模式，大小不定，但是不能超过窗口的大小；</li>\n<li>固定大小（比如100dp）：精确模式，大小为LayoutParams中指定的大小。<br>对于普通<code>View</code>来说，这里是指我们布局中的<code>View</code>，<code>View</code>的<code>measure</code>过程由<code>ViewGroup</code>传递而来，先看一下<code>ViewGroup</code>的<code>measureChildWithMargins</code>方法：<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title\">measureChildWithMargins</span><span class=\"params\">(View child,<span class=\"keyword\">int</span> parentWidthMeasureSpec,<span class=\"keyword\">int</span> widthUsed,<span class=\"keyword\">int</span> parentHeightMeasureSpec,<span class=\"keyword\">int</span> heightUsed)</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">final</span> MarginLayoutParams lp = (MarginLayoutParams) child.getLayout-Params();</div><div class=\"line\">    <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> childWidthMeasureSpec = getChildMeasureSpec(parentWidthMeasureSpec,mPaddingLeft + mPaddingRight + lp.leftMargin + lp.rightMargin+ widthUsed,lp.width);</div><div class=\"line\">    <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> childHeightMeasureSpec = getChildMeasureSpec(parentHeight-MeasureSpec,mPaddingTop + mPaddingBottom + lp.topMargin + lp.bottomMargin+ heightUsed,lp.height);</div><div class=\"line\">    child.measure(childWidthMeasureSpec,childHeightMeasureSpec);</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n</li>\n</ul>\n<p>上述方法会对子元素进行<code>measure</code>，在调用子元素的<code>measure</code>方法之前会先通过<code>getChildMeasureSpec</code>方法来得到子元素的<code>MeasureSpec</code>。从代码来看，很显然，子元素的<code>MeasureSpec</code>的创建与父容器的<code>MeasureSpec</code>和子元素本身的<code>LayoutParam</code>s有关，此外还和<code>View</code>的<code>margin</code>及<code>padding</code>有关，具体情况可以看一下<code>ViewGroup</code>的<code>getChildMeasureSpec</code>方法，如下所示:<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">int</span> <span class=\"title\">getChildMeasureSpec</span><span class=\"params\">(<span class=\"keyword\">int</span> spec,<span class=\"keyword\">int</span> padding,<span class=\"keyword\">int</span> child-Dimension)</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">int</span> specMode = MeasureSpec.getMode(spec);</div><div class=\"line\">    <span class=\"keyword\">int</span> specSize = MeasureSpec.getSize(spec);</div><div class=\"line\">    <span class=\"keyword\">int</span> size = Math.max(<span class=\"number\">0</span>,specSize -padding);</div><div class=\"line\">    <span class=\"keyword\">int</span> resultSize = <span class=\"number\">0</span>;</div><div class=\"line\">    <span class=\"keyword\">int</span> resultMode = <span class=\"number\">0</span>;</div><div class=\"line\">    <span class=\"keyword\">switch</span> (specMode) &#123;</div><div class=\"line\">        <span class=\"comment\">// Parent has imposed an exact size on us</span></div><div class=\"line\">        <span class=\"keyword\">case</span> MeasureSpec.EXACTLY:</div><div class=\"line\">            <span class=\"keyword\">if</span> (childDimension =&gt; <span class=\"number\">0</span>) &#123;</div><div class=\"line\">                resultSize = childDimension;</div><div class=\"line\">                resultMode = MeasureSpec.EXACTLY;</div><div class=\"line\">            &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (childDimension == LayoutParams.MATCH_PARENT) &#123;</div><div class=\"line\">                <span class=\"comment\">// Child wants to be our size. So be it.</span></div><div class=\"line\">                resultSize = size;</div><div class=\"line\">                resultMode = MeasureSpec.EXACTLY;</div><div class=\"line\">            &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (childDimension == LayoutParams.WRAP_CONTENT) &#123;</div><div class=\"line\">                <span class=\"comment\">// Child wants to determine its own size. It can't be</span></div><div class=\"line\">                <span class=\"comment\">// bigger than us.</span></div><div class=\"line\">                resultSize = size;</div><div class=\"line\">                resultMode = MeasureSpec.AT_MOST;</div><div class=\"line\">            &#125;</div><div class=\"line\">            <span class=\"keyword\">break</span>;</div><div class=\"line\">        <span class=\"comment\">// Parent has imposed a maximum size on us</span></div><div class=\"line\">        <span class=\"keyword\">case</span> MeasureSpec.AT_MOST:</div><div class=\"line\">            <span class=\"keyword\">if</span> (childDimension =&gt; <span class=\"number\">0</span>) &#123;</div><div class=\"line\">                <span class=\"comment\">// Child wants a specific size... so be it</span></div><div class=\"line\">                resultSize = childDimension;</div><div class=\"line\">                resultMode = MeasureSpec.EXACTLY;</div><div class=\"line\">            &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (childDimension == LayoutParams.MATCH_PARENT) &#123;</div><div class=\"line\">                <span class=\"comment\">// Child wants to be our size,but our size is not fixed.</span></div><div class=\"line\">                <span class=\"comment\">// Constrain child to not be bigger than us.</span></div><div class=\"line\">                resultSize = size;</div><div class=\"line\">                resultMode = MeasureSpec.AT_MOST;</div><div class=\"line\">            &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (childDimension == LayoutParams.WRAP_CONTENT) &#123;</div><div class=\"line\">                <span class=\"comment\">// Child wants to determine its own size. It can't be</span></div><div class=\"line\">                <span class=\"comment\">// bigger than us.</span></div><div class=\"line\">                resultSize = size;</div><div class=\"line\">                resultMode = MeasureSpec.AT_MOST;</div><div class=\"line\">            &#125;</div><div class=\"line\">            <span class=\"keyword\">break</span>;</div><div class=\"line\">        <span class=\"comment\">// Parent asked to see how big we want to be</span></div><div class=\"line\">        <span class=\"keyword\">case</span> MeasureSpec.UNSPECIFIED:</div><div class=\"line\">            <span class=\"keyword\">if</span> (childDimension =&gt; <span class=\"number\">0</span>) &#123;</div><div class=\"line\">                <span class=\"comment\">// Child wants a specific size... let him have it</span></div><div class=\"line\">                resultSize = childDimension;</div><div class=\"line\">                resultMode = MeasureSpec.EXACTLY;</div><div class=\"line\">            &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (childDimension == LayoutParams.MATCH_PARENT) &#123;</div><div class=\"line\">                <span class=\"comment\">// Child wants to be our size... find out how big it should</span></div><div class=\"line\">                <span class=\"comment\">// be</span></div><div class=\"line\">                resultSize = <span class=\"number\">0</span>;</div><div class=\"line\">                resultMode = MeasureSpec.UNSPECIFIED;</div><div class=\"line\">            &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (childDimension == LayoutParams.WRAP_CONTENT) &#123;</div><div class=\"line\">                <span class=\"comment\">// Child wants to determine its own size.... find out how</span></div><div class=\"line\">                <span class=\"comment\">// big it should be</span></div><div class=\"line\">                resultSize = <span class=\"number\">0</span>;</div><div class=\"line\">                resultMode = MeasureSpec.UNSPECIFIED;</div><div class=\"line\">            &#125;</div><div class=\"line\">            <span class=\"keyword\">break</span>;</div><div class=\"line\">        &#125;</div><div class=\"line\">    <span class=\"keyword\">return</span> MeasureSpec.makeMeasureSpec(resultSize,resultMode);</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>它的主要作用是根据父容器的<code>MeasureSpec</code>同时结合View本身的<code>LayoutParams</code>来确定子元素的<code>MeasureSpec</code>，参数中的<code>padding</code>是指父容器中已占用的空间大小，因此子元素可用的大小为父容器的尺寸减去<code>padding</code>，具体代码如下所示:<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">int</span> specSize = MeasureSpec.getSize(spec);</div><div class=\"line\"><span class=\"keyword\">int</span> size = Math.max(<span class=\"number\">0</span>,specSize -padding);</div></pre></td></tr></table></figure></p>\n<p>这里简单说一下，当View采用固定宽/高的时候，不管父容器的<code>MeasureSpec</code>是什么，<code>View</code>的<code>MeasureSpec</code>都是精确模式并且其大小遵循<code>Layoutparams</code>中的大小。当<code>View</code>的宽/高是<code>match_parent</code>时，如果父容器的模式是精准模式，那么<code>View</code>也是精准模式并且其大小是父容器的剩余空间；如果父容器是最大模式，那么<code>View</code>也是最大模式并且其大小不会超过父容器的剩余空间。当<code>View</code>的宽/高是<code>wrap_content</code>时，不管父容器的模式是精准还是最大化，<code>View</code>的模式总是最大化并且大小不能超过父容器的剩余空间。在我们的分析中漏掉了<code>UNSPECIFIED</code>模式，那是因为这个模式主要用于系统内部多次Measure的情形，一般来说，我们不需要关注此模式。</p>\n<h4 id=\"View的工作流程\"><a href=\"#View的工作流程\" class=\"headerlink\" title=\"View的工作流程\"></a>View的工作流程</h4><h5 id=\"measure过程\"><a href=\"#measure过程\" class=\"headerlink\" title=\"measure过程\"></a>measure过程</h5><p>measure过程要分情况来看，如果只是一个原始的<code>View</code>，那么通过<code>measure</code>方法就完成了其测量过程，如果是一个<code>ViewGroup</code>，除了完成自己的测量过程外，还会遍历去调用所有子元素的<code>measure</code>方法，各个子元素再递归去执行这个流程。<br><strong> View的measure过程 </strong><br><code>View</code>的<code>measure</code>过程由其<code>measure</code>方法来完成，<code>measure</code>方法是一个<code>final</code>类型的方法，这意味着子类不能重写此方法，在<code>View</code>的<code>measure</code>方法中会去调用<code>View</code>的<code>onMeasure</code>方法，因此只需要看<code>onMeasure</code>的实现即可：<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title\">onMeasure</span><span class=\"params\">(<span class=\"keyword\">int</span> widthMeasureSpec,<span class=\"keyword\">int</span> heightMeasureSpec)</span> </span>&#123;</div><div class=\"line\">    setMeasuredDimension(getDefaultSize(getSuggestedMinimumWidth(),widthMeasureSpec),getDefaultSize(getSuggestedMinimumHeight(),heightMeasureSpec));</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">int</span> <span class=\"title\">getDefaultSize</span><span class=\"params\">(<span class=\"keyword\">int</span> size,<span class=\"keyword\">int</span> measureSpec)</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">int</span> result = size;</div><div class=\"line\">    <span class=\"keyword\">int</span> specMode = MeasureSpec.getMode(measureSpec);</div><div class=\"line\">    <span class=\"keyword\">int</span> specSize = MeasureSpec.getSize(measureSpec);</div><div class=\"line\">    <span class=\"keyword\">switch</span> (specMode) &#123;</div><div class=\"line\">        <span class=\"keyword\">case</span> MeasureSpec.UNSPECIFIED:</div><div class=\"line\">            result = size;</div><div class=\"line\">        <span class=\"keyword\">break</span>;</div><div class=\"line\">        <span class=\"keyword\">case</span> MeasureSpec.AT_MOST:</div><div class=\"line\">        <span class=\"keyword\">case</span> MeasureSpec.EXACTLY:</div><div class=\"line\">            result = specSize;</div><div class=\"line\">        <span class=\"keyword\">break</span>;</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">return</span> result;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>可以看出，<code>getDefaultSize</code>这个方法的逻辑很简单，对于我们来说，我们只需要看<code>AT_MOST</code>和<code>EXACTLY</code>这两种情况。简单地理解，其实<code>getDefaultSize</code>返回的大小就是<code>measureSpec</code>中的<code>specSize</code>，而这个<code>specSize</code>就是<code>View</code>测量后的大小，这里多次提到测量后的大小，是因为<code>View</code>最终的大小是在<code>layout</code>阶段确定的，所以这里必须要加以区分，但是几乎所有情况下<code>View</code>的测量大小和最终大小是相等的。<br>至于<code>UNSPECIFIED</code>这种情况，一般用于系统内部的测量过程，在这种情况下，<code>View</code>的大小为<code>getDefaultSize</code>的第一个参数<code>size</code>，即宽/高分别为<code>getSuggestedMinimumWidth</code>和<code>getSuggestedMinimumHeight</code>这两个方法的返回值，看一下它们的源码:<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">int</span> <span class=\"title\">getSuggestedMinimumWidth</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> (mBackground == <span class=\"keyword\">null</span>) ? mMinWidth : max(mMinWidth,mBackground.getMinimumWidth());</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">int</span> <span class=\"title\">getSuggestedMinimumHeight</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> (mBackground == <span class=\"keyword\">null</span>) ? mMinHeight : max(mMinHeight,mBackground.getMinimumHeight());</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>这里只分析<code>getSuggestedMinimumWidth</code>方法的实现，<code>getSuggestedMinimumHeight</code>和它的实现原理是一样的。从<code>getSuggestedMinimumWidth</code>的代码可以看出，如果<code>View</code>没有设置背景，那么<code>View</code>的宽度为<code>mMinWidth</code>，而<code>mMinWidth</code>对应于<code>android:minWidth</code>这个属性所指定的值，因此<code>View</code>的宽度即为<code>android:minWidth</code>属性所指定的值。这个属性如果不指定，那么<code>mMinWidth</code>则默认为0；如果<code>View</code>指定了背景，则<code>View</code>的宽度为<code>max(mMinWidth,mBackground.getMinimumWidth())</code>。<code>mMinWidth</code>的含义我们已经知道了，那么<code>mBackground.getMinimumWidth()</code>是什么呢？我们看一下<code>Drawable</code>的<code>getMinimumWidth</code>方法，如下所示:<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">getMinimumWidth</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> intrinsicWidth = getIntrinsicWidth();</div><div class=\"line\">    <span class=\"keyword\">return</span> intrinsicWidth &gt; <span class=\"number\">0</span> ? intrinsicWidth : <span class=\"number\">0</span>;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>可以看出，<code>getMinimumWidth</code>返回的就是<code>Drawable</code>的原始宽度，前提是这个<code>Drawable</code>有原始宽度，否则就返回0。<br>这里再总结一下<code>getSuggestedMinimumWidth</code>的逻辑：如果<code>View</code>没有设置背景，那么返回<code>android:minWidth</code>这个属性所指定的值，这个值可以为0；如果<code>View</code>设置了背景，则返回<code>android:minWidth</code>和背景的最小宽度这两者中的最大值，<code>getSuggestedMinimumWidth</code>和<code>getSuggestedMinimumHeight</code>的返回值就是<code>View</code>在<code>UNSPECIFIED</code>情况下的测量宽/高。<br>从<code>getDefaultSize</code>方法的实现来看，<code>View</code>的宽/高由<code>specSize</code>决定，所以我们可以得出如下结论：直接继承<code>View</code>的自定义控件需要重写<code>onMeasure</code>方法并设置<code>wrap_content</code>时的自身大小，否则在布局中使用<code>wrap_content</code>就相当于使用<code>match_parent</code>。<br>从上述代码中我们知道，如果<code>View</code>在布局中使用<code>wrap_content</code>，那么它的<code>specMode</code>是<code>AT_MOST</code>模式，在这种模式下，它的宽/高等于<code>specSize</code>；这种情况下<code>View</code>的<code>specSize</code>是p<code>arentSize</code>，而<code>parentSize</code>是父容器中目前可以使用的大小，也就是父容器当前剩余的空间大小。很显然，<code>View</code>的宽/高就等于父容器当前剩余的空间大小，这种效果和在布局中使用<code>match_parent</code>完全一致。如何解决这个问题呢？也很简单，代码如下所示：<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title\">onMeasure</span><span class=\"params\">(<span class=\"keyword\">int</span> widthMeasureSpec,<span class=\"keyword\">int</span> heightMeasureSpec)</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">super</span>.onMeasure(widthMeasureSpec,heightMeasureSpec);</div><div class=\"line\">    <span class=\"keyword\">int</span> widthSpecMode = MeasureSpec.getMode(widthMeasureSpec);</div><div class=\"line\">    <span class=\"keyword\">int</span> widthSpecSize = MeasureSpec.getSize(widthMeasureSpec);</div><div class=\"line\">    <span class=\"keyword\">int</span> heightSpecMode = MeasureSpec.getMode(heightMeasureSpec);</div><div class=\"line\">    <span class=\"keyword\">int</span> heightSpecSize = MeasureSpec.getSize(heightMeasureSpec);</div><div class=\"line\">    <span class=\"keyword\">if</span> (widthSpecMode == MeasureSpec.AT_MOST &amp;&amp; heightSpecMode == MeasureSpec.AT_MOST) &#123;</div><div class=\"line\">        setMeasuredDimension(mWidth,mHeight);</div><div class=\"line\">    &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (widthSpecMode == MeasureSpec.AT_MOST) &#123;</div><div class=\"line\">        setMeasuredDimension(mWidth,heightSpecSize);</div><div class=\"line\">    &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (heightSpecMode == MeasureSpec.AT_MOST) &#123;</div><div class=\"line\">        setMeasuredDimension(widthSpecSize,mHeight);</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>在上面的代码中，我们只需要给<code>View</code>指定一个默认的内部宽/高（<code>mWidth</code>和<code>mHeight</code>），并在<code>wrap_content</code>时设置此宽/高即可。对于非<code>wrap_content</code>情形，我们沿用系统的测量值即可，至于这个默认的内部宽/高的大小如何指定，这个没有固定的依据，根据需要灵活指定即可。如果查看<code>TextView</code>、<code>ImageView</code>等的源码就可以知道，针对<code>wrap_content</code>情形，它们的<code>onMeasure</code>方法均做了特殊处理。</p>\n<p><strong> ViewGroup的measure过程 </strong><br>对于<code>ViewGroup</code>来说，除了完成自己的<code>measure</code>过程以外，还会遍历去调用所有子元素的<code>measure</code>方法，各个子元素再递归去执行这个过程。和<code>View</code>不同的是，<code>ViewGroup</code>是一个抽象类，因此它没有重写<code>View</code>的<code>onMeasure</code>方法，但是它提供了一个叫<code>measureChildren</code>的方法，如下所示。<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title\">measureChildren</span><span class=\"params\">(<span class=\"keyword\">int</span> widthMeasureSpec,<span class=\"keyword\">int</span> heightMeasureSpec)</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> size = mChildrenCount;</div><div class=\"line\">    <span class=\"keyword\">final</span> View[] children = mChildren;</div><div class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; size; ++i) &#123;</div><div class=\"line\">        <span class=\"keyword\">final</span> View child = children[i];</div><div class=\"line\">        <span class=\"keyword\">if</span> ((child.mViewFlags &amp; VISIBILITY_MASK) != GONE) &#123;</div><div class=\"line\">            measureChild(child,widthMeasureSpec,heightMeasureSpec);</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>从上述代码来看，<code>ViewGroup</code>在<code>measure</code>时，会对每一个子元素进行<code>measure</code>，<code>measureChild</code>这个方法的实现也很好理解，如下所示<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title\">measureChild</span><span class=\"params\">(View child,<span class=\"keyword\">int</span> parentWidthMeasureSpec,<span class=\"keyword\">int</span> parentHeightMeasureSpec)</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">final</span> LayoutParams lp = child.getLayoutParams();</div><div class=\"line\">    <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> childWidthMeasureSpec = getChildMeasureSpec(parentWidth-MeasureSpec,mPaddingLeft + mPaddingRight,lp.width);</div><div class=\"line\">    <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> childHeightMeasureSpec = getChildMeasureSpec(parentHeight-MeasureSpec,mPaddingTop + mPaddingBottom,lp.height);</div><div class=\"line\">    child.measure(childWidthMeasureSpec,childHeightMeasureSpec);</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>很显然，<code>measureChild</code>的思想就是取出子元素的<code>LayoutParams</code>，然后再通过<code>getChildMeasureSpec</code>来创建子元素的<code>MeasureSpec</code>，接着将<code>MeasureSpec</code>直接传递给<code>View</code>的<code>measure</code>方法来进行测量。我们知道，<code>ViewGroup</code>并没有定义其测量的具体过程，这是因为<code>ViewGroup</code>是一个抽象类，其测量过程的<code>onMeasure</code>方法需要各个子类去具体实现，比如<code>LinearLayout</code>、<code>RelativeLayout</code>等。</p>\n<h5 id=\"layout过程\"><a href=\"#layout过程\" class=\"headerlink\" title=\"layout过程\"></a>layout过程</h5><p><code>Layout</code>的作用是<code>ViewGroup</code>用来确定子元素的位置，当<code>ViewGroup</code>的位置被确定后，它在<code>onLayout</code>中会遍历所有的子元素并调用其<code>layout</code>方法，在<code>layout</code>方法中<code>onLayout</code>方法又会被调用。<code>Layout</code>过程和<code>measure</code>过程相比就简单多了，<code>layout</code>方法确定<code>View</code>本身的位置，而<code>onLayout</code>方法则会确定所有子元素的位置，先看<code>View</code>的<code>layout</code>方法，如下所示。<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">layout</span><span class=\"params\">(<span class=\"keyword\">int</span> l,<span class=\"keyword\">int</span> t,<span class=\"keyword\">int</span> r,<span class=\"keyword\">int</span> b)</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">if</span> ((mPrivateFlags3 &amp; PFLAG3_MEASURE_NEEDED_BEFORE_LAYOUT) != <span class=\"number\">0</span>) &#123;</div><div class=\"line\">        onMeasure(mOldWidthMeasureSpec,mOldHeightMeasureSpec);</div><div class=\"line\">        mPrivateFlags3 &amp;= ~PFLAG3_MEASURE_NEEDED_BEFORE_LAYOUT;</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">int</span> oldL = mLeft;</div><div class=\"line\">    <span class=\"keyword\">int</span> oldT = mTop;</div><div class=\"line\">    <span class=\"keyword\">int</span> oldB = mBottom;</div><div class=\"line\">    <span class=\"keyword\">int</span> oldR = mRight;</div><div class=\"line\">    <span class=\"keyword\">boolean</span> changed = isLayoutModeOptical(mParent) ?setOpticalFrame(l,t,r,b) : setFrame(l,t,r,b);</div><div class=\"line\">    <span class=\"keyword\">if</span> (changed || (mPrivateFlags &amp; PFLAG_LAYOUT_REQUIRED) == PFLAG_LAYOUT_REQUIRED) &#123;</div><div class=\"line\">        onLayout(changed,l,t,r,b);</div><div class=\"line\">        mPrivateFlags &amp;= ~PFLAG_LAYOUT_REQUIRED;</div><div class=\"line\">        ListenerInfo li = mListenerInfo;</div><div class=\"line\">        <span class=\"keyword\">if</span> (li != <span class=\"keyword\">null</span> &amp;&amp; li.mOnLayoutChangeListeners != <span class=\"keyword\">null</span>) &#123;</div><div class=\"line\">            ArrayList&lt;OnLayoutChangeListener&gt; listenersCopy =(ArrayList&lt;OnLayoutChangeListener&gt;)li.mOnLayout-ChangeListeners.clone();</div><div class=\"line\">            <span class=\"keyword\">int</span> numListeners = listenersCopy.size();</div><div class=\"line\">            <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; numListeners; ++i) &#123;</div><div class=\"line\">                listenersCopy.get(i).onLayoutChange(<span class=\"keyword\">this</span>,l,t,r,b,oldL,oldT,oldR,oldB);</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">    mPrivateFlags &amp;= ~PFLAG_FORCE_LAYOUT;</div><div class=\"line\">    mPrivateFlags3 |= PFLAG3_IS_LAID_OUT;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p><code>layout</code>方法的大致流程如下：首先会通过<code>setFrame</code>方法来设定<code>View</code>的四个顶点的位置，即初始化<code>mLeft</code>、<code>mRight</code>、<code>mTop</code>和<code>mBottom</code>这四个值，<code>View</code>的四个顶点一旦确定，那么<code>View</code>在父容器中的位置也就确定了；接着会调用<code>onLayout</code>方法，这个方法的用途是父容器确定子元素的位置，和<code>onMeasure</code>方法类似，<code>onLayout</code>的具体实现同样和具体的布局有关，所以<code>View</code>和<code>ViewGroup</code>均没有真正实现<code>onLayout</code>方法。接下来，我们可以看一下<code>LinearLayout</code>的<code>onLayout</code>方法，如下所示。<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title\">onLayout</span><span class=\"params\">(<span class=\"keyword\">boolean</span> changed,<span class=\"keyword\">int</span> l,<span class=\"keyword\">int</span> t,<span class=\"keyword\">int</span> r,<span class=\"keyword\">int</span> b)</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">if</span> (mOrientation == VERTICAL) &#123;</div><div class=\"line\">        layoutVertical(l,t,r,b);</div><div class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">        layoutHorizontal(l,t,r,b);</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p><code>LinearLayout</code>中<code>onLayout</code>的实现逻辑和<code>onMeasure</code>的实现逻辑类似，这里选择<code>layoutVertical</code>继续讲解，为了更好地理解其逻辑，这里只给出了主要的代码：<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">layoutVertical</span><span class=\"params\">(<span class=\"keyword\">int</span> left,<span class=\"keyword\">int</span> top,<span class=\"keyword\">int</span> right,<span class=\"keyword\">int</span> bottom)</span> </span>&#123;</div><div class=\"line\">    ......</div><div class=\"line\">    <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> count = getVirtualChildCount();</div><div class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; count; i++) &#123;</div><div class=\"line\">        <span class=\"keyword\">final</span> View child = getVirtualChildAt(i);</div><div class=\"line\">        <span class=\"keyword\">if</span> (child == <span class=\"keyword\">null</span>) &#123;</div><div class=\"line\">            childTop += measureNullChild(i);</div><div class=\"line\">        &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (child.getVisibility() != GONE) &#123;</div><div class=\"line\">            <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> childWidth = child.getMeasuredWidth();</div><div class=\"line\">            <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> childHeight = child.getMeasuredHeight();</div><div class=\"line\">            <span class=\"keyword\">final</span> LinearLayout.LayoutParams lp =(LinearLayout.LayoutParams) child.getLayoutParams();</div><div class=\"line\">            ......</div><div class=\"line\">            <span class=\"keyword\">if</span> (hasDividerBeforeChildAt(i)) &#123;</div><div class=\"line\">                childTop += mDividerHeight;</div><div class=\"line\">            &#125;</div><div class=\"line\">            childTop += lp.topMargin;</div><div class=\"line\">            setChildFrame(child,childLeft,childTop + getLocationOffset(child),childWidth,childHeight);</div><div class=\"line\">            childTop += childHeight + lp.bottomMargin + getNextLocation-Offset(child);</div><div class=\"line\">            i += getChildrenSkipCount(child,i);</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>这里分析一下<code>layoutVertical</code>的代码逻辑，可以看到，此方法会遍历所有子元素并调用<code>setChildFrame</code>方法来为子元素指定对应的位置，其中<code>childTop</code>会逐渐增大，这就意味着后面的子元素会被放置在靠下的位置，这刚好符合竖直方向的<code>LinearLayout</code>的特性。至于<code>setChildFrame</code>，它仅仅是调用子元素的<code>layout</code>方法而已，这样父元素在<code>layout</code>方法中完成自己的定位以后，就通过<code>onLayout</code>方法去调用子元素的<code>layout</code>方法，子元素又会通过自己的<code>layout</code>方法来确定自己的位置，这样一层一层地传递下去就完成了整个<code>View</code>树的<code>layout</code>过程。<code>setChildFrame</code>方法的实现如下所示。<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">setChildFrame</span><span class=\"params\">(View child,<span class=\"keyword\">int</span> left,<span class=\"keyword\">int</span> top,<span class=\"keyword\">int</span> width,<span class=\"keyword\">int</span> height)</span> </span>&#123;</div><div class=\"line\">    child.layout(left,top,left + width,top + height);</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>我们注意到，setChildFrame中的width和height实际上就是子元素的测量宽/高，从下面的代码可以看出这一点：<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">final</span> <span class=\"keyword\">int</span> childWidth = child.getMeasuredWidth();</div><div class=\"line\"><span class=\"keyword\">final</span> <span class=\"keyword\">int</span> childHeight = child.getMeasuredHeight();</div><div class=\"line\">setChildFrame(child,childLeft,childTop + getLocationOffset(child),childWidth,childHeight);</div></pre></td></tr></table></figure></p>\n<p>而在<code>layout</code>方法中会通过<code>setFrame</code>去设置子元素的四个顶点的位置，在<code>setFrame</code>中有如下几句赋值语句，这样一来子元素的位置就确定了：<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">mLeft = left;</div><div class=\"line\">mTop = top;</div><div class=\"line\">mRight = right;</div><div class=\"line\">mBottom = bottom;</div></pre></td></tr></table></figure></p>\n<p><code>View</code>的测量宽/高和最终/宽高有什么区别？这个问题可以具体为：<code>View</code>的<code>getMeasuredWidth</code>和<code>getWidth</code>这两个方法有什么区别，至于<code>getMeasuredHeight</code>和<code>getHeight</code>的区别和前两者完全一样。为了回答这个问题，首先，我们看一下getwidth和getHeight这两个方法的具体实现：<br><figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div></pre></td><td class=\"code\"><pre><div class=\"line\">public final int getWidth() &#123;</div><div class=\"line\">    return mRight -mLeft;</div><div class=\"line\">&#125;</div><div class=\"line\">public final int getHeight() &#123;</div><div class=\"line\">    return mBottom -mTop;</div><div class=\"line\">&#125;</div><div class=\"line\">``` </div><div class=\"line\"></div><div class=\"line\">从`getWidth`和`getHeight`的源码再结合`mLeft`、`mRight`、`mTop`和`mBottom`这四个变量的赋值过程来看，`getWidth`方法的返回值刚好就是`View`的测量宽度，而`getHeight`方法的返回值也刚好就是`View`的测量高度。经过上述分析，现在我们可以回答这个问题了：在`View`的默认实现中，`View`的测量宽/高和最终宽/高是相等的，只不过测量宽/高形成于`View`的`measure`过程，而最终宽/高形成于`View`的`layout`过程，即两者的赋值时机不同，测量宽/高的赋值时机稍微早一些。因此，在日常开发中，我们可以认为`View`的`测量宽/高`就`等于``最终宽/高`，但是的确存在某些特殊情况会导致两者不一致.</div><div class=\"line\"></div><div class=\"line\">##### draw过程</div><div class=\"line\">Draw过程就比较简单了，它的作用是将View绘制到屏幕上面。View的绘制过程遵循</div><div class=\"line\">如下几步：</div><div class=\"line\">* 绘制背景background.draw(canvas)。</div><div class=\"line\">* 绘制自己（onDraw）。</div><div class=\"line\">* 绘制children（dispatchDraw）。</div><div class=\"line\">* 绘制装饰（onDrawScrollBars）。</div><div class=\"line\">这一点通过draw方法的源码可以明显看出来，如下所示。</div><div class=\"line\"></div><div class=\"line\">``` java</div><div class=\"line\">    public void draw(Canvas canvas) &#123;</div><div class=\"line\">    final int privateFlags = mPrivateFlags;</div><div class=\"line\">    final boolean dirtyOpaque = (privateFlags &amp; PFLAG_DIRTY_MASK) == PFLAG_DIRTY_OPAQUE &amp;&amp;(mAttachInfo == null || !mAttachInfo.mIgnoreDirtyState);</div><div class=\"line\">    mPrivateFlags = (privateFlags &amp; ~PFLAG_DIRTY_MASK) | PFLAG_DRAWN;</div><div class=\"line\">    /*</div><div class=\"line\">    * Draw traversal performs several drawing steps which must be executed</div><div class=\"line\">    * in the appropriate order:</div><div class=\"line\">    *</div><div class=\"line\">    * 1. Draw the background</div><div class=\"line\">    * 2. If necessary,save the canvas' layers to prepare for fading</div><div class=\"line\">    * 3. Draw view's content</div><div class=\"line\">    * 4. Draw children</div><div class=\"line\">    * 5. If necessary,draw the fading edges and restore layers</div><div class=\"line\">    * 6. Draw decorations (scrollbars for instance)</div><div class=\"line\">    */</div><div class=\"line\">    // Step 1,draw the background,if needed</div><div class=\"line\">    int saveCount;</div><div class=\"line\">    if (!dirtyOpaque) &#123;</div><div class=\"line\">        drawBackground(canvas);</div><div class=\"line\">    &#125;</div><div class=\"line\">    // skip step 2 &amp; 5 if possible (common case)</div><div class=\"line\">    final int viewFlags = mViewFlags;</div><div class=\"line\">    boolean horizontalEdges = (viewFlags &amp; FADING_EDGE_HORIZONTAL) != 0;</div><div class=\"line\">    boolean verticalEdges = (viewFlags &amp; FADING_EDGE_VERTICAL) != 0;</div><div class=\"line\">    if (!verticalEdges &amp;&amp; !horizontalEdges) &#123;</div><div class=\"line\">        // Step 3,draw the content</div><div class=\"line\">        if (!dirtyOpaque) onDraw(canvas);</div><div class=\"line\">            // Step 4,draw the children</div><div class=\"line\">        dispatchDraw(canvas);</div><div class=\"line\">        // Step 6,draw decorations (scrollbars)</div><div class=\"line\">        onDrawScrollBars(canvas);</div><div class=\"line\">        if (mOverlay != null &amp;&amp; !mOverlay.isEmpty()) &#123;</div><div class=\"line\">            mOverlay.getOverlayView().dispatchDraw(canvas);</div><div class=\"line\">        &#125;</div><div class=\"line\">        // we're done...</div><div class=\"line\">        return;</div><div class=\"line\">    &#125;</div><div class=\"line\">    ...</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>View绘制过程的传递是通过dispatchDraw来实现的，dispatchDraw会遍历调用所有子元素的draw方法，如此draw事件就一层层地传递了下去。View有一个特殊的方法setWillNotDraw，先看一下它的源码，如下所示。<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">/**</div><div class=\"line\">* If this view doesn't do any drawing on its own,set this flag to</div><div class=\"line\">* allow further optimizations. By default,this flag is not set on</div><div class=\"line\">* View,but could be set on some View subclasses such as ViewGroup.</div><div class=\"line\">*</div><div class=\"line\">* Typically,if you override &#123;<span class=\"doctag\">@link</span> #onDraw(android.graphics.Canvas)&#125;</div><div class=\"line\">* you should clear this flag.</div><div class=\"line\">*</div><div class=\"line\">* <span class=\"doctag\">@param</span> willNotDraw whether or not this View draw on its own</div><div class=\"line\">*/</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">setWillNotDraw</span><span class=\"params\">(<span class=\"keyword\">boolean</span> willNotDraw)</span> </span>&#123;</div><div class=\"line\">    setFlags(willNotDraw ? WILL_NOT_DRAW : <span class=\"number\">0</span>,DRAW_MASK);</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>从<code>setWillNotDraw</code>这个方法的注释中可以看出，如果一个<code>View</code>不需要绘制任何内容，那么设置这个标记位为<code>true</code>以后，系统会进行相应的优化。默认情况下，<code>View</code>没有启用这个优化标记位，但是<code>ViewGroup</code>会默认启用这个优化标记位。这个标记位对实际开发的意义是：当我们的自定义控件继承于<code>ViewGroup</code>并且本身不具备绘制功能时，就可以开启这个标记位从而便于系统进行后续的优化。当然，当明确知道一个<code>ViewGroup</code>需要通过<code>onDraw</code>来绘制内容时，我们需要显式地关闭<code>WILL_NOT_DRAW</code>这个标记位。</p>\n<hr>\n<p>以上</p>"},{"title":"Window和WindowManager","date":"2017-03-21T12:05:01.000Z","keywords":"Window,WindowManager","_content":"　　Window表示一个窗口的概念，在日常开发中直接接触WIndow的机会并不对，再试在某些特殊时候我们需要在桌面上显示一个类似悬浮窗的东西，那么这种效果就需要用到Window来实现。\n　　Window只是个抽象类，它的具体实现是PhoneWindow。创建一个Window是很简单的事，只需要通过WindowManager即可完成，WindowManager是外界访问Window的入口，Window的具体实现位于WindowMangerService中，WindowMnager和WWindowMangerService的交互是一个IPC过程，Android中所有的视图都是通过Window来呈现的，不管是Activity、Dialog还是Toast，它们的视图实际上都是附加在Window上的，因此Window实际是View的直接管理者。\n<!--more-->\n### Window的内部机制\n　　Window是一个抽象的概念，每一个Window都对应着一个View和一个ViewRootImpl，Window和View通过ViewRootImpl来建立联系，因此Window并不是实际存在的，它是以View的形式存在，。这点从WindowManager的定义也可以看出，它提供的三个接口方法addView,updateViewLayout以及removeView都是针对View，这说明View才是Window存在的实体。在实际使用中无法直接访问Window，对Window的访问必须通过WindowManger。\n\n#### Window的添加过程\n　　Window的添加过程需要通过WindowManager的addView来实现，WindowManager是一个接口，它的真正实现是WindowManagerImpl类，在WindowManagerImpl中Window的三大操作实现如下：\n```java\n\t@Override\n    public void addView(@NonNull View view, @NonNull ViewGroup.LayoutParams params) {\n        applyDefaultToken(params);\n        mGlobal.addView(view, params, mContext.getDisplay(), mParentWindow);\n    }\n    \n\t@Override\n    public void updateViewLayout(@NonNull View view, @NonNull ViewGroup.LayoutParams params) {\n        applyDefaultToken(params);\n        mGlobal.updateViewLayout(view, params);\n    }\n\t\n\t@Override\n    public void removeView(View view) {\n        mGlobal.removeView(view, false);\n    }\n\n    @Override\n    public void removeViewImmediate(View view) {\n        mGlobal.removeView(view, true);\n    }\n```\n　　WindowManagerImpl并没有直接实现Window的三大操作，而是全部交给了WindowManagerGlobal来处理，WindowManagerGlobal以工厂的形式向外提供自己的实现，WindowManagerImpl这种工作模式是典型的桥接模式，将所有的操作全部委托给WindowManagerGlobal来实现。在WindowManagerGlobal的addView方法主要分为如下几步：\n1. **检查参数是否合法，如果是子Window，那么还需要调整一些布局参数。**\n\n``` java\n public void addView(View view, ViewGroup.LayoutParams params,\n            Display display, Window parentWindow) {\n        if (view == null) {\n            throw new IllegalArgumentException(\"view must not be null\");\n        }\n        if (display == null) {\n            throw new IllegalArgumentException(\"display must not be null\");\n        }\n        if (!(params instanceof WindowManager.LayoutParams)) {\n            throw new IllegalArgumentException(\"Params must be WindowManager.LayoutParams\");\n        }\n\n        final WindowManager.LayoutParams wparams = (WindowManager.LayoutParams) params;\n        if (parentWindow != null) {\n            parentWindow.adjustLayoutParamsForSubWindow(wparams);\n        } else {\n            // If there's no parent, then hardware acceleration for this view is\n            // set from the application's hardware acceleration setting.\n            final Context context = view.getContext();\n            if (context != null\n                    && (context.getApplicationInfo().flags\n                            & ApplicationInfo.FLAG_HARDWARE_ACCELERATED) != 0) {\n                wparams.flags |= WindowManager.LayoutParams.FLAG_HARDWARE_ACCELERATED;\n            }\n        }\n\t}\n```\n\n2. **创建ViewRootImpl并将View添加到列表中。**\n在WindowManagerGlobal内部有如下几个列表比较重要：\n\n``` java\n\tprivate final ArrayList<View> mViews = new ArrayList<View>();\n    private final ArrayList<ViewRootImpl> mRoots = new ArrayList<ViewRootImpl>();\n    private final ArrayList<WindowManager.LayoutParams> mParams =\n            new ArrayList<WindowManager.LayoutParams>();\n    private final ArraySet<View> mDyingViews = new ArraySet<View>();\n```\n　　在以上声明中，mView存储的是多有WIndow所对应的View,mRoots存储的是所有Window所对应的ViewRootImpl，mParams存储的是所有Window所对应的布局参数，而mDyingView则存储了那些正在被删除的View对象，或者说是那些已经调用removeView方法但是删除操作还未完成的Window对象，在addView中通过如下方式将Window的一系列对象添加到列表中：\n``` java\n\troot = new ViewRootImpl(view.getContext(), display);\n    view.setLayoutParams(wparams);\n    mViews.add(view);\n    mRoots.add(root);\n    mParams.add(wparams);\n```\n3. **通过ViewRootImpl来更新界面并完成Window的添加过程。**\n这个过程由ViewRootImpl的setView方法来完成：\n``` java\n // do this last because it fires off messages to start doing things\n        try {\n            root.setView(view, wparams, panelParentView);\n        } catch (RuntimeException e) {\n            // BadTokenException or InvalidDisplayException, clean up.\n            synchronized (mLock) {\n                final int index = findViewLocked(view, false);\n                if (index >= 0) {\n                    removeViewLocked(index, true);\n                }\n            }\n            throw e;\n        }\n```\n在setView内部会通过requestLayout来完成异步刷新请求。在下面的代码中，scheduleTraversals实际是View绘制的入口：\n``` java\n @Override\n    public void requestLayout() {\n        if (!mHandlingLayoutInLayoutRequest) {\n            checkThread();\n            mLayoutRequested = true;\n            scheduleTraversals();\n        }\n    }\n```\n接着会通过WindowSession最终来完成Window的添加过程。\n#### Window的删除过程\nWindow的删除过程和添加过程一样，都是先通过WindowManagerImpl后，再进一步通过WindowManagerGlobal来实现的，如下：\n``` java\npublic void removeView(View view, boolean immediate) {\n        if (view == null) {\n            throw new IllegalArgumentException(\"view must not be null\");\n        }\n\n        synchronized (mLock) {\n            int index = findViewLocked(view, true);\n            View curView = mRoots.get(index).getView();\n            removeViewLocked(index, immediate);\n            if (curView == view) {\n                return;\n            }\n\n            throw new IllegalStateException(\"Calling with view \" + view\n                    + \" but the ViewAncestor is attached to \" + curView);\n        }\n    }\n```\n　　removeView的逻辑很清晰，首先通过findViewLocked来查找待删除的View的索引，这个查找过程就是建立的数据遍历，然后再通过调用removeViewLocked来做进一步的删除，如下：\n``` java\nprivate void removeViewLocked(int index, boolean immediate) {\n        ViewRootImpl root = mRoots.get(index);\n        View view = root.getView();\n\n        if (view != null) {\n            InputMethodManager imm = InputMethodManager.getInstance();\n            if (imm != null) {\n                imm.windowDismissed(mViews.get(index).getWindowToken());\n            }\n        }\n        boolean deferred = root.die(immediate);\n        if (view != null) {\n            view.assignParent(null);\n            if (deferred) {\n                mDyingViews.add(view);\n            }\n        }\n    }\n```\n　　removeViewLocked是通过ViewRootImpl来完成删除操作的，在WindowManager中提供了两种删除接口removeView和removeViewImmediate,它们分别表示异步删除和同步删除，一般不需要使用removeViewImmediate这个方法。这里主要说异步删除的情况：具体的删除操作由ViewRootImpl的die方法来完成，在异步删除的情况下，die方法只是发送了一个请求删除的消息后就立刻返回了，**这个时候View并没有完成删除操作**，所以最后会将其添加到mDyingView中。ViewRootImpl的die方法如下：\n``` java\n\tboolean die(boolean immediate) {\n    // Make sure we do execute immediately if we are in the middle of a traversal or the damage\n    // done by dispatchDetachedFromWindow will cause havoc on return.\n    if (immediate && !mIsInTraversal) {\n        doDie();\n        return false;\n    }\n\n    if (!mIsDrawing) {\n        destroyHardwareRenderer();\n    } else {\n        Log.e(mTag, \"Attempting to destroy the window while drawing!\\n\" +\n                \"  window=\" + this + \", title=\" + mWindowAttributes.getTitle());\n    }\n    mHandler.sendEmptyMessage(MSG_DIE);\n    return true;\n    }\n```\n　　在die方法中只是做了简单的判断，如果是异步删除，那么就发送一个MSG_DIE的消息，ViewRootImpl中的Handler会处理此消息并调用doDie方法，如果是同步删除，那么就不发送消息直接调用doDie方法。在doDie内部会调用dispatchDetachedFromWindow方法，真正删除View的逻辑在dispatchDetachedFromWindow方法内部实现。dispatchDetachedFromWindow方法主要做四件事：\n1. 垃圾回收相关的工作，比如清除数据和消息，移除回调等。\n2. 通过Session的remove方法删除Window：mWindowSession.remove(mWindow)，这同样是一个IPC过程，最终会调用WindowManagerService的removeWindow方法。\n3. 调用View的dispatchDetachedFromWindow方法，在内部会调用View的onDetachedFromWindow以及onDetachedFromWindowInternal()。\n4. 调用WindowManagerGlobal的doRemoveView方法刷新数据，包括mRoots、mParams以及mDyingViews，需要将当前Window锁关联的这三类对象从列表中删除。\n#### Window的更新过程\n``` java\n\tpublic void updateViewLayout(View view, ViewGroup.LayoutParams params) {\n        if (view == null) {\n            throw new IllegalArgumentException(\"view must not be null\");\n        }\n        if (!(params instanceof WindowManager.LayoutParams)) {\n            throw new IllegalArgumentException(\"Params must be WindowManager.LayoutParams\");\n        }\n\n        final WindowManager.LayoutParams wparams = (WindowManager.LayoutParams)params;\n\n        view.setLayoutParams(wparams);\n\n        synchronized (mLock) {\n            int index = findViewLocked(view, true);\n            ViewRootImpl root = mRoots.get(index);\n            mParams.remove(index);\n            mParams.add(index, wparams);\n            root.setLayoutParams(wparams, false);\n        }\n    }\n```\n首先它需要更新View的LayoutParams并替换掉老的LayoutParams，接着再更新ViewRootImpl中的layoutParams，这一步是通过ViewRootImpl的setLayoutParams方法来实现的。在ViewRootImpl中会通过scheduleTraversals方法来对View重新布局，包括测量、布局、重绘这三个过程，除了View本身的重绘以外，ViewRootImpl还会通过WindowSession开更新Window的视图，这个过程最终是由WindowManagerService的relayoutWindow()来具体实现，它同样是一个IPC的过程。\n***\n以上\n","source":"_posts/Window和WindowManager.md","raw":"---\ntitle: Window和WindowManager\ndate: 2017-03-21 20:05:01\ntags: [Android]\nkeywords: Window,WindowManager\n---\n　　Window表示一个窗口的概念，在日常开发中直接接触WIndow的机会并不对，再试在某些特殊时候我们需要在桌面上显示一个类似悬浮窗的东西，那么这种效果就需要用到Window来实现。\n　　Window只是个抽象类，它的具体实现是PhoneWindow。创建一个Window是很简单的事，只需要通过WindowManager即可完成，WindowManager是外界访问Window的入口，Window的具体实现位于WindowMangerService中，WindowMnager和WWindowMangerService的交互是一个IPC过程，Android中所有的视图都是通过Window来呈现的，不管是Activity、Dialog还是Toast，它们的视图实际上都是附加在Window上的，因此Window实际是View的直接管理者。\n<!--more-->\n### Window的内部机制\n　　Window是一个抽象的概念，每一个Window都对应着一个View和一个ViewRootImpl，Window和View通过ViewRootImpl来建立联系，因此Window并不是实际存在的，它是以View的形式存在，。这点从WindowManager的定义也可以看出，它提供的三个接口方法addView,updateViewLayout以及removeView都是针对View，这说明View才是Window存在的实体。在实际使用中无法直接访问Window，对Window的访问必须通过WindowManger。\n\n#### Window的添加过程\n　　Window的添加过程需要通过WindowManager的addView来实现，WindowManager是一个接口，它的真正实现是WindowManagerImpl类，在WindowManagerImpl中Window的三大操作实现如下：\n```java\n\t@Override\n    public void addView(@NonNull View view, @NonNull ViewGroup.LayoutParams params) {\n        applyDefaultToken(params);\n        mGlobal.addView(view, params, mContext.getDisplay(), mParentWindow);\n    }\n    \n\t@Override\n    public void updateViewLayout(@NonNull View view, @NonNull ViewGroup.LayoutParams params) {\n        applyDefaultToken(params);\n        mGlobal.updateViewLayout(view, params);\n    }\n\t\n\t@Override\n    public void removeView(View view) {\n        mGlobal.removeView(view, false);\n    }\n\n    @Override\n    public void removeViewImmediate(View view) {\n        mGlobal.removeView(view, true);\n    }\n```\n　　WindowManagerImpl并没有直接实现Window的三大操作，而是全部交给了WindowManagerGlobal来处理，WindowManagerGlobal以工厂的形式向外提供自己的实现，WindowManagerImpl这种工作模式是典型的桥接模式，将所有的操作全部委托给WindowManagerGlobal来实现。在WindowManagerGlobal的addView方法主要分为如下几步：\n1. **检查参数是否合法，如果是子Window，那么还需要调整一些布局参数。**\n\n``` java\n public void addView(View view, ViewGroup.LayoutParams params,\n            Display display, Window parentWindow) {\n        if (view == null) {\n            throw new IllegalArgumentException(\"view must not be null\");\n        }\n        if (display == null) {\n            throw new IllegalArgumentException(\"display must not be null\");\n        }\n        if (!(params instanceof WindowManager.LayoutParams)) {\n            throw new IllegalArgumentException(\"Params must be WindowManager.LayoutParams\");\n        }\n\n        final WindowManager.LayoutParams wparams = (WindowManager.LayoutParams) params;\n        if (parentWindow != null) {\n            parentWindow.adjustLayoutParamsForSubWindow(wparams);\n        } else {\n            // If there's no parent, then hardware acceleration for this view is\n            // set from the application's hardware acceleration setting.\n            final Context context = view.getContext();\n            if (context != null\n                    && (context.getApplicationInfo().flags\n                            & ApplicationInfo.FLAG_HARDWARE_ACCELERATED) != 0) {\n                wparams.flags |= WindowManager.LayoutParams.FLAG_HARDWARE_ACCELERATED;\n            }\n        }\n\t}\n```\n\n2. **创建ViewRootImpl并将View添加到列表中。**\n在WindowManagerGlobal内部有如下几个列表比较重要：\n\n``` java\n\tprivate final ArrayList<View> mViews = new ArrayList<View>();\n    private final ArrayList<ViewRootImpl> mRoots = new ArrayList<ViewRootImpl>();\n    private final ArrayList<WindowManager.LayoutParams> mParams =\n            new ArrayList<WindowManager.LayoutParams>();\n    private final ArraySet<View> mDyingViews = new ArraySet<View>();\n```\n　　在以上声明中，mView存储的是多有WIndow所对应的View,mRoots存储的是所有Window所对应的ViewRootImpl，mParams存储的是所有Window所对应的布局参数，而mDyingView则存储了那些正在被删除的View对象，或者说是那些已经调用removeView方法但是删除操作还未完成的Window对象，在addView中通过如下方式将Window的一系列对象添加到列表中：\n``` java\n\troot = new ViewRootImpl(view.getContext(), display);\n    view.setLayoutParams(wparams);\n    mViews.add(view);\n    mRoots.add(root);\n    mParams.add(wparams);\n```\n3. **通过ViewRootImpl来更新界面并完成Window的添加过程。**\n这个过程由ViewRootImpl的setView方法来完成：\n``` java\n // do this last because it fires off messages to start doing things\n        try {\n            root.setView(view, wparams, panelParentView);\n        } catch (RuntimeException e) {\n            // BadTokenException or InvalidDisplayException, clean up.\n            synchronized (mLock) {\n                final int index = findViewLocked(view, false);\n                if (index >= 0) {\n                    removeViewLocked(index, true);\n                }\n            }\n            throw e;\n        }\n```\n在setView内部会通过requestLayout来完成异步刷新请求。在下面的代码中，scheduleTraversals实际是View绘制的入口：\n``` java\n @Override\n    public void requestLayout() {\n        if (!mHandlingLayoutInLayoutRequest) {\n            checkThread();\n            mLayoutRequested = true;\n            scheduleTraversals();\n        }\n    }\n```\n接着会通过WindowSession最终来完成Window的添加过程。\n#### Window的删除过程\nWindow的删除过程和添加过程一样，都是先通过WindowManagerImpl后，再进一步通过WindowManagerGlobal来实现的，如下：\n``` java\npublic void removeView(View view, boolean immediate) {\n        if (view == null) {\n            throw new IllegalArgumentException(\"view must not be null\");\n        }\n\n        synchronized (mLock) {\n            int index = findViewLocked(view, true);\n            View curView = mRoots.get(index).getView();\n            removeViewLocked(index, immediate);\n            if (curView == view) {\n                return;\n            }\n\n            throw new IllegalStateException(\"Calling with view \" + view\n                    + \" but the ViewAncestor is attached to \" + curView);\n        }\n    }\n```\n　　removeView的逻辑很清晰，首先通过findViewLocked来查找待删除的View的索引，这个查找过程就是建立的数据遍历，然后再通过调用removeViewLocked来做进一步的删除，如下：\n``` java\nprivate void removeViewLocked(int index, boolean immediate) {\n        ViewRootImpl root = mRoots.get(index);\n        View view = root.getView();\n\n        if (view != null) {\n            InputMethodManager imm = InputMethodManager.getInstance();\n            if (imm != null) {\n                imm.windowDismissed(mViews.get(index).getWindowToken());\n            }\n        }\n        boolean deferred = root.die(immediate);\n        if (view != null) {\n            view.assignParent(null);\n            if (deferred) {\n                mDyingViews.add(view);\n            }\n        }\n    }\n```\n　　removeViewLocked是通过ViewRootImpl来完成删除操作的，在WindowManager中提供了两种删除接口removeView和removeViewImmediate,它们分别表示异步删除和同步删除，一般不需要使用removeViewImmediate这个方法。这里主要说异步删除的情况：具体的删除操作由ViewRootImpl的die方法来完成，在异步删除的情况下，die方法只是发送了一个请求删除的消息后就立刻返回了，**这个时候View并没有完成删除操作**，所以最后会将其添加到mDyingView中。ViewRootImpl的die方法如下：\n``` java\n\tboolean die(boolean immediate) {\n    // Make sure we do execute immediately if we are in the middle of a traversal or the damage\n    // done by dispatchDetachedFromWindow will cause havoc on return.\n    if (immediate && !mIsInTraversal) {\n        doDie();\n        return false;\n    }\n\n    if (!mIsDrawing) {\n        destroyHardwareRenderer();\n    } else {\n        Log.e(mTag, \"Attempting to destroy the window while drawing!\\n\" +\n                \"  window=\" + this + \", title=\" + mWindowAttributes.getTitle());\n    }\n    mHandler.sendEmptyMessage(MSG_DIE);\n    return true;\n    }\n```\n　　在die方法中只是做了简单的判断，如果是异步删除，那么就发送一个MSG_DIE的消息，ViewRootImpl中的Handler会处理此消息并调用doDie方法，如果是同步删除，那么就不发送消息直接调用doDie方法。在doDie内部会调用dispatchDetachedFromWindow方法，真正删除View的逻辑在dispatchDetachedFromWindow方法内部实现。dispatchDetachedFromWindow方法主要做四件事：\n1. 垃圾回收相关的工作，比如清除数据和消息，移除回调等。\n2. 通过Session的remove方法删除Window：mWindowSession.remove(mWindow)，这同样是一个IPC过程，最终会调用WindowManagerService的removeWindow方法。\n3. 调用View的dispatchDetachedFromWindow方法，在内部会调用View的onDetachedFromWindow以及onDetachedFromWindowInternal()。\n4. 调用WindowManagerGlobal的doRemoveView方法刷新数据，包括mRoots、mParams以及mDyingViews，需要将当前Window锁关联的这三类对象从列表中删除。\n#### Window的更新过程\n``` java\n\tpublic void updateViewLayout(View view, ViewGroup.LayoutParams params) {\n        if (view == null) {\n            throw new IllegalArgumentException(\"view must not be null\");\n        }\n        if (!(params instanceof WindowManager.LayoutParams)) {\n            throw new IllegalArgumentException(\"Params must be WindowManager.LayoutParams\");\n        }\n\n        final WindowManager.LayoutParams wparams = (WindowManager.LayoutParams)params;\n\n        view.setLayoutParams(wparams);\n\n        synchronized (mLock) {\n            int index = findViewLocked(view, true);\n            ViewRootImpl root = mRoots.get(index);\n            mParams.remove(index);\n            mParams.add(index, wparams);\n            root.setLayoutParams(wparams, false);\n        }\n    }\n```\n首先它需要更新View的LayoutParams并替换掉老的LayoutParams，接着再更新ViewRootImpl中的layoutParams，这一步是通过ViewRootImpl的setLayoutParams方法来实现的。在ViewRootImpl中会通过scheduleTraversals方法来对View重新布局，包括测量、布局、重绘这三个过程，除了View本身的重绘以外，ViewRootImpl还会通过WindowSession开更新Window的视图，这个过程最终是由WindowManagerService的relayoutWindow()来具体实现，它同样是一个IPC的过程。\n***\n以上\n","slug":"Window和WindowManager","published":1,"updated":"2018-08-04T05:18:21.339Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjl3vbtrf002eisdga1hw2sz0","content":"<p>　　Window表示一个窗口的概念，在日常开发中直接接触WIndow的机会并不对，再试在某些特殊时候我们需要在桌面上显示一个类似悬浮窗的东西，那么这种效果就需要用到Window来实现。<br>　　Window只是个抽象类，它的具体实现是PhoneWindow。创建一个Window是很简单的事，只需要通过WindowManager即可完成，WindowManager是外界访问Window的入口，Window的具体实现位于WindowMangerService中，WindowMnager和WWindowMangerService的交互是一个IPC过程，Android中所有的视图都是通过Window来呈现的，不管是Activity、Dialog还是Toast，它们的视图实际上都是附加在Window上的，因此Window实际是View的直接管理者。<br><a id=\"more\"></a></p>\n<h3 id=\"Window的内部机制\"><a href=\"#Window的内部机制\" class=\"headerlink\" title=\"Window的内部机制\"></a>Window的内部机制</h3><p>　　Window是一个抽象的概念，每一个Window都对应着一个View和一个ViewRootImpl，Window和View通过ViewRootImpl来建立联系，因此Window并不是实际存在的，它是以View的形式存在，。这点从WindowManager的定义也可以看出，它提供的三个接口方法addView,updateViewLayout以及removeView都是针对View，这说明View才是Window存在的实体。在实际使用中无法直接访问Window，对Window的访问必须通过WindowManger。</p>\n<h4 id=\"Window的添加过程\"><a href=\"#Window的添加过程\" class=\"headerlink\" title=\"Window的添加过程\"></a>Window的添加过程</h4><p>　　Window的添加过程需要通过WindowManager的addView来实现，WindowManager是一个接口，它的真正实现是WindowManagerImpl类，在WindowManagerImpl中Window的三大操作实现如下：<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">@Override</span></div><div class=\"line\">   <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">addView</span><span class=\"params\">(@NonNull View view, @NonNull ViewGroup.LayoutParams params)</span> </span>&#123;</div><div class=\"line\">       applyDefaultToken(params);</div><div class=\"line\">       mGlobal.addView(view, params, mContext.getDisplay(), mParentWindow);</div><div class=\"line\">   &#125;</div><div class=\"line\">   </div><div class=\"line\"><span class=\"meta\">@Override</span></div><div class=\"line\">   <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">updateViewLayout</span><span class=\"params\">(@NonNull View view, @NonNull ViewGroup.LayoutParams params)</span> </span>&#123;</div><div class=\"line\">       applyDefaultToken(params);</div><div class=\"line\">       mGlobal.updateViewLayout(view, params);</div><div class=\"line\">   &#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"meta\">@Override</span></div><div class=\"line\">   <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">removeView</span><span class=\"params\">(View view)</span> </span>&#123;</div><div class=\"line\">       mGlobal.removeView(view, <span class=\"keyword\">false</span>);</div><div class=\"line\">   &#125;</div><div class=\"line\"></div><div class=\"line\">   <span class=\"meta\">@Override</span></div><div class=\"line\">   <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">removeViewImmediate</span><span class=\"params\">(View view)</span> </span>&#123;</div><div class=\"line\">       mGlobal.removeView(view, <span class=\"keyword\">true</span>);</div><div class=\"line\">   &#125;</div></pre></td></tr></table></figure></p>\n<p>　　WindowManagerImpl并没有直接实现Window的三大操作，而是全部交给了WindowManagerGlobal来处理，WindowManagerGlobal以工厂的形式向外提供自己的实现，WindowManagerImpl这种工作模式是典型的桥接模式，将所有的操作全部委托给WindowManagerGlobal来实现。在WindowManagerGlobal的addView方法主要分为如下几步：</p>\n<ol>\n<li><strong>检查参数是否合法，如果是子Window，那么还需要调整一些布局参数。</strong></li>\n</ol>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">addView</span><span class=\"params\">(View view, ViewGroup.LayoutParams params,</span></span></div><div class=\"line\">           Display display, Window parentWindow) &#123;</div><div class=\"line\">       <span class=\"keyword\">if</span> (view == <span class=\"keyword\">null</span>) &#123;</div><div class=\"line\">           <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> IllegalArgumentException(<span class=\"string\">\"view must not be null\"</span>);</div><div class=\"line\">       &#125;</div><div class=\"line\">       <span class=\"keyword\">if</span> (display == <span class=\"keyword\">null</span>) &#123;</div><div class=\"line\">           <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> IllegalArgumentException(<span class=\"string\">\"display must not be null\"</span>);</div><div class=\"line\">       &#125;</div><div class=\"line\">       <span class=\"keyword\">if</span> (!(params <span class=\"keyword\">instanceof</span> WindowManager.LayoutParams)) &#123;</div><div class=\"line\">           <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> IllegalArgumentException(<span class=\"string\">\"Params must be WindowManager.LayoutParams\"</span>);</div><div class=\"line\">       &#125;</div><div class=\"line\"></div><div class=\"line\">       <span class=\"keyword\">final</span> WindowManager.LayoutParams wparams = (WindowManager.LayoutParams) params;</div><div class=\"line\">       <span class=\"keyword\">if</span> (parentWindow != <span class=\"keyword\">null</span>) &#123;</div><div class=\"line\">           parentWindow.adjustLayoutParamsForSubWindow(wparams);</div><div class=\"line\">       &#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">           <span class=\"comment\">// If there's no parent, then hardware acceleration for this view is</span></div><div class=\"line\">           <span class=\"comment\">// set from the application's hardware acceleration setting.</span></div><div class=\"line\">           <span class=\"keyword\">final</span> Context context = view.getContext();</div><div class=\"line\">           <span class=\"keyword\">if</span> (context != <span class=\"keyword\">null</span></div><div class=\"line\">                   &amp;&amp; (context.getApplicationInfo().flags</div><div class=\"line\">                           &amp; ApplicationInfo.FLAG_HARDWARE_ACCELERATED) != <span class=\"number\">0</span>) &#123;</div><div class=\"line\">               wparams.flags |= WindowManager.LayoutParams.FLAG_HARDWARE_ACCELERATED;</div><div class=\"line\">           &#125;</div><div class=\"line\">       &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<ol>\n<li><strong>创建ViewRootImpl并将View添加到列表中。</strong><br>在WindowManagerGlobal内部有如下几个列表比较重要：</li>\n</ol>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">private</span> <span class=\"keyword\">final</span> ArrayList&lt;View&gt; mViews = <span class=\"keyword\">new</span> ArrayList&lt;View&gt;();</div><div class=\"line\">   <span class=\"keyword\">private</span> <span class=\"keyword\">final</span> ArrayList&lt;ViewRootImpl&gt; mRoots = <span class=\"keyword\">new</span> ArrayList&lt;ViewRootImpl&gt;();</div><div class=\"line\">   <span class=\"keyword\">private</span> <span class=\"keyword\">final</span> ArrayList&lt;WindowManager.LayoutParams&gt; mParams =</div><div class=\"line\">           <span class=\"keyword\">new</span> ArrayList&lt;WindowManager.LayoutParams&gt;();</div><div class=\"line\">   <span class=\"keyword\">private</span> <span class=\"keyword\">final</span> ArraySet&lt;View&gt; mDyingViews = <span class=\"keyword\">new</span> ArraySet&lt;View&gt;();</div></pre></td></tr></table></figure>\n<p>　　在以上声明中，mView存储的是多有WIndow所对应的View,mRoots存储的是所有Window所对应的ViewRootImpl，mParams存储的是所有Window所对应的布局参数，而mDyingView则存储了那些正在被删除的View对象，或者说是那些已经调用removeView方法但是删除操作还未完成的Window对象，在addView中通过如下方式将Window的一系列对象添加到列表中：<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">root = <span class=\"keyword\">new</span> ViewRootImpl(view.getContext(), display);</div><div class=\"line\">   view.setLayoutParams(wparams);</div><div class=\"line\">   mViews.add(view);</div><div class=\"line\">   mRoots.add(root);</div><div class=\"line\">   mParams.add(wparams);</div></pre></td></tr></table></figure></p>\n<ol>\n<li><strong>通过ViewRootImpl来更新界面并完成Window的添加过程。</strong><br>这个过程由ViewRootImpl的setView方法来完成：<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// do this last because it fires off messages to start doing things</span></div><div class=\"line\">       <span class=\"keyword\">try</span> &#123;</div><div class=\"line\">           root.setView(view, wparams, panelParentView);</div><div class=\"line\">       &#125; <span class=\"keyword\">catch</span> (RuntimeException e) &#123;</div><div class=\"line\">           <span class=\"comment\">// BadTokenException or InvalidDisplayException, clean up.</span></div><div class=\"line\">           <span class=\"keyword\">synchronized</span> (mLock) &#123;</div><div class=\"line\">               <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> index = findViewLocked(view, <span class=\"keyword\">false</span>);</div><div class=\"line\">               <span class=\"keyword\">if</span> (index &gt;= <span class=\"number\">0</span>) &#123;</div><div class=\"line\">                   removeViewLocked(index, <span class=\"keyword\">true</span>);</div><div class=\"line\">               &#125;</div><div class=\"line\">           &#125;</div><div class=\"line\">           <span class=\"keyword\">throw</span> e;</div><div class=\"line\">       &#125;</div></pre></td></tr></table></figure>\n</li>\n</ol>\n<p>在setView内部会通过requestLayout来完成异步刷新请求。在下面的代码中，scheduleTraversals实际是View绘制的入口：<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">@Override</span></div><div class=\"line\">   <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">requestLayout</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">       <span class=\"keyword\">if</span> (!mHandlingLayoutInLayoutRequest) &#123;</div><div class=\"line\">           checkThread();</div><div class=\"line\">           mLayoutRequested = <span class=\"keyword\">true</span>;</div><div class=\"line\">           scheduleTraversals();</div><div class=\"line\">       &#125;</div><div class=\"line\">   &#125;</div></pre></td></tr></table></figure></p>\n<p>接着会通过WindowSession最终来完成Window的添加过程。</p>\n<h4 id=\"Window的删除过程\"><a href=\"#Window的删除过程\" class=\"headerlink\" title=\"Window的删除过程\"></a>Window的删除过程</h4><p>Window的删除过程和添加过程一样，都是先通过WindowManagerImpl后，再进一步通过WindowManagerGlobal来实现的，如下：<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">removeView</span><span class=\"params\">(View view, <span class=\"keyword\">boolean</span> immediate)</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">if</span> (view == <span class=\"keyword\">null</span>) &#123;</div><div class=\"line\">            <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> IllegalArgumentException(<span class=\"string\">\"view must not be null\"</span>);</div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\">        <span class=\"keyword\">synchronized</span> (mLock) &#123;</div><div class=\"line\">            <span class=\"keyword\">int</span> index = findViewLocked(view, <span class=\"keyword\">true</span>);</div><div class=\"line\">            View curView = mRoots.get(index).getView();</div><div class=\"line\">            removeViewLocked(index, immediate);</div><div class=\"line\">            <span class=\"keyword\">if</span> (curView == view) &#123;</div><div class=\"line\">                <span class=\"keyword\">return</span>;</div><div class=\"line\">            &#125;</div><div class=\"line\"></div><div class=\"line\">            <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> IllegalStateException(<span class=\"string\">\"Calling with view \"</span> + view</div><div class=\"line\">                    + <span class=\"string\">\" but the ViewAncestor is attached to \"</span> + curView);</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div></pre></td></tr></table></figure></p>\n<p>　　removeView的逻辑很清晰，首先通过findViewLocked来查找待删除的View的索引，这个查找过程就是建立的数据遍历，然后再通过调用removeViewLocked来做进一步的删除，如下：<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">removeViewLocked</span><span class=\"params\">(<span class=\"keyword\">int</span> index, <span class=\"keyword\">boolean</span> immediate)</span> </span>&#123;</div><div class=\"line\">        ViewRootImpl root = mRoots.get(index);</div><div class=\"line\">        View view = root.getView();</div><div class=\"line\"></div><div class=\"line\">        <span class=\"keyword\">if</span> (view != <span class=\"keyword\">null</span>) &#123;</div><div class=\"line\">            InputMethodManager imm = InputMethodManager.getInstance();</div><div class=\"line\">            <span class=\"keyword\">if</span> (imm != <span class=\"keyword\">null</span>) &#123;</div><div class=\"line\">                imm.windowDismissed(mViews.get(index).getWindowToken());</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;</div><div class=\"line\">        <span class=\"keyword\">boolean</span> deferred = root.die(immediate);</div><div class=\"line\">        <span class=\"keyword\">if</span> (view != <span class=\"keyword\">null</span>) &#123;</div><div class=\"line\">            view.assignParent(<span class=\"keyword\">null</span>);</div><div class=\"line\">            <span class=\"keyword\">if</span> (deferred) &#123;</div><div class=\"line\">                mDyingViews.add(view);</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div></pre></td></tr></table></figure></p>\n<p>　　removeViewLocked是通过ViewRootImpl来完成删除操作的，在WindowManager中提供了两种删除接口removeView和removeViewImmediate,它们分别表示异步删除和同步删除，一般不需要使用removeViewImmediate这个方法。这里主要说异步删除的情况：具体的删除操作由ViewRootImpl的die方法来完成，在异步删除的情况下，die方法只是发送了一个请求删除的消息后就立刻返回了，<strong>这个时候View并没有完成删除操作</strong>，所以最后会将其添加到mDyingView中。ViewRootImpl的die方法如下：<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">boolean</span> <span class=\"title\">die</span><span class=\"params\">(<span class=\"keyword\">boolean</span> immediate)</span> </span>&#123;</div><div class=\"line\">   <span class=\"comment\">// Make sure we do execute immediately if we are in the middle of a traversal or the damage</span></div><div class=\"line\">   <span class=\"comment\">// done by dispatchDetachedFromWindow will cause havoc on return.</span></div><div class=\"line\">   <span class=\"keyword\">if</span> (immediate &amp;&amp; !mIsInTraversal) &#123;</div><div class=\"line\">       doDie();</div><div class=\"line\">       <span class=\"keyword\">return</span> <span class=\"keyword\">false</span>;</div><div class=\"line\">   &#125;</div><div class=\"line\"></div><div class=\"line\">   <span class=\"keyword\">if</span> (!mIsDrawing) &#123;</div><div class=\"line\">       destroyHardwareRenderer();</div><div class=\"line\">   &#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">       Log.e(mTag, <span class=\"string\">\"Attempting to destroy the window while drawing!\\n\"</span> +</div><div class=\"line\">               <span class=\"string\">\"  window=\"</span> + <span class=\"keyword\">this</span> + <span class=\"string\">\", title=\"</span> + mWindowAttributes.getTitle());</div><div class=\"line\">   &#125;</div><div class=\"line\">   mHandler.sendEmptyMessage(MSG_DIE);</div><div class=\"line\">   <span class=\"keyword\">return</span> <span class=\"keyword\">true</span>;</div><div class=\"line\">   &#125;</div></pre></td></tr></table></figure></p>\n<p>　　在die方法中只是做了简单的判断，如果是异步删除，那么就发送一个MSG_DIE的消息，ViewRootImpl中的Handler会处理此消息并调用doDie方法，如果是同步删除，那么就不发送消息直接调用doDie方法。在doDie内部会调用dispatchDetachedFromWindow方法，真正删除View的逻辑在dispatchDetachedFromWindow方法内部实现。dispatchDetachedFromWindow方法主要做四件事：</p>\n<ol>\n<li>垃圾回收相关的工作，比如清除数据和消息，移除回调等。</li>\n<li>通过Session的remove方法删除Window：mWindowSession.remove(mWindow)，这同样是一个IPC过程，最终会调用WindowManagerService的removeWindow方法。</li>\n<li>调用View的dispatchDetachedFromWindow方法，在内部会调用View的onDetachedFromWindow以及onDetachedFromWindowInternal()。</li>\n<li>调用WindowManagerGlobal的doRemoveView方法刷新数据，包括mRoots、mParams以及mDyingViews，需要将当前Window锁关联的这三类对象从列表中删除。<h4 id=\"Window的更新过程\"><a href=\"#Window的更新过程\" class=\"headerlink\" title=\"Window的更新过程\"></a>Window的更新过程</h4><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">updateViewLayout</span><span class=\"params\">(View view, ViewGroup.LayoutParams params)</span> </span>&#123;</div><div class=\"line\">       <span class=\"keyword\">if</span> (view == <span class=\"keyword\">null</span>) &#123;</div><div class=\"line\">           <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> IllegalArgumentException(<span class=\"string\">\"view must not be null\"</span>);</div><div class=\"line\">       &#125;</div><div class=\"line\">       <span class=\"keyword\">if</span> (!(params <span class=\"keyword\">instanceof</span> WindowManager.LayoutParams)) &#123;</div><div class=\"line\">           <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> IllegalArgumentException(<span class=\"string\">\"Params must be WindowManager.LayoutParams\"</span>);</div><div class=\"line\">       &#125;</div><div class=\"line\"></div><div class=\"line\">       <span class=\"keyword\">final</span> WindowManager.LayoutParams wparams = (WindowManager.LayoutParams)params;</div><div class=\"line\"></div><div class=\"line\">       view.setLayoutParams(wparams);</div><div class=\"line\"></div><div class=\"line\">       <span class=\"keyword\">synchronized</span> (mLock) &#123;</div><div class=\"line\">           <span class=\"keyword\">int</span> index = findViewLocked(view, <span class=\"keyword\">true</span>);</div><div class=\"line\">           ViewRootImpl root = mRoots.get(index);</div><div class=\"line\">           mParams.remove(index);</div><div class=\"line\">           mParams.add(index, wparams);</div><div class=\"line\">           root.setLayoutParams(wparams, <span class=\"keyword\">false</span>);</div><div class=\"line\">       &#125;</div><div class=\"line\">   &#125;</div></pre></td></tr></table></figure>\n</li>\n</ol>\n<p>首先它需要更新View的LayoutParams并替换掉老的LayoutParams，接着再更新ViewRootImpl中的layoutParams，这一步是通过ViewRootImpl的setLayoutParams方法来实现的。在ViewRootImpl中会通过scheduleTraversals方法来对View重新布局，包括测量、布局、重绘这三个过程，除了View本身的重绘以外，ViewRootImpl还会通过WindowSession开更新Window的视图，这个过程最终是由WindowManagerService的relayoutWindow()来具体实现，它同样是一个IPC的过程。</p>\n<hr>\n<p>以上</p>\n","excerpt":"<p>　　Window表示一个窗口的概念，在日常开发中直接接触WIndow的机会并不对，再试在某些特殊时候我们需要在桌面上显示一个类似悬浮窗的东西，那么这种效果就需要用到Window来实现。<br>　　Window只是个抽象类，它的具体实现是PhoneWindow。创建一个Window是很简单的事，只需要通过WindowManager即可完成，WindowManager是外界访问Window的入口，Window的具体实现位于WindowMangerService中，WindowMnager和WWindowMangerService的交互是一个IPC过程，Android中所有的视图都是通过Window来呈现的，不管是Activity、Dialog还是Toast，它们的视图实际上都是附加在Window上的，因此Window实际是View的直接管理者。<br>","more":"</p>\n<h3 id=\"Window的内部机制\"><a href=\"#Window的内部机制\" class=\"headerlink\" title=\"Window的内部机制\"></a>Window的内部机制</h3><p>　　Window是一个抽象的概念，每一个Window都对应着一个View和一个ViewRootImpl，Window和View通过ViewRootImpl来建立联系，因此Window并不是实际存在的，它是以View的形式存在，。这点从WindowManager的定义也可以看出，它提供的三个接口方法addView,updateViewLayout以及removeView都是针对View，这说明View才是Window存在的实体。在实际使用中无法直接访问Window，对Window的访问必须通过WindowManger。</p>\n<h4 id=\"Window的添加过程\"><a href=\"#Window的添加过程\" class=\"headerlink\" title=\"Window的添加过程\"></a>Window的添加过程</h4><p>　　Window的添加过程需要通过WindowManager的addView来实现，WindowManager是一个接口，它的真正实现是WindowManagerImpl类，在WindowManagerImpl中Window的三大操作实现如下：<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">@Override</span></div><div class=\"line\">   <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">addView</span><span class=\"params\">(@NonNull View view, @NonNull ViewGroup.LayoutParams params)</span> </span>&#123;</div><div class=\"line\">       applyDefaultToken(params);</div><div class=\"line\">       mGlobal.addView(view, params, mContext.getDisplay(), mParentWindow);</div><div class=\"line\">   &#125;</div><div class=\"line\">   </div><div class=\"line\"><span class=\"meta\">@Override</span></div><div class=\"line\">   <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">updateViewLayout</span><span class=\"params\">(@NonNull View view, @NonNull ViewGroup.LayoutParams params)</span> </span>&#123;</div><div class=\"line\">       applyDefaultToken(params);</div><div class=\"line\">       mGlobal.updateViewLayout(view, params);</div><div class=\"line\">   &#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"meta\">@Override</span></div><div class=\"line\">   <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">removeView</span><span class=\"params\">(View view)</span> </span>&#123;</div><div class=\"line\">       mGlobal.removeView(view, <span class=\"keyword\">false</span>);</div><div class=\"line\">   &#125;</div><div class=\"line\"></div><div class=\"line\">   <span class=\"meta\">@Override</span></div><div class=\"line\">   <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">removeViewImmediate</span><span class=\"params\">(View view)</span> </span>&#123;</div><div class=\"line\">       mGlobal.removeView(view, <span class=\"keyword\">true</span>);</div><div class=\"line\">   &#125;</div></pre></td></tr></table></figure></p>\n<p>　　WindowManagerImpl并没有直接实现Window的三大操作，而是全部交给了WindowManagerGlobal来处理，WindowManagerGlobal以工厂的形式向外提供自己的实现，WindowManagerImpl这种工作模式是典型的桥接模式，将所有的操作全部委托给WindowManagerGlobal来实现。在WindowManagerGlobal的addView方法主要分为如下几步：</p>\n<ol>\n<li><strong>检查参数是否合法，如果是子Window，那么还需要调整一些布局参数。</strong></li>\n</ol>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">addView</span><span class=\"params\">(View view, ViewGroup.LayoutParams params,</div><div class=\"line\">           Display display, Window parentWindow)</span> </span>&#123;</div><div class=\"line\">       <span class=\"keyword\">if</span> (view == <span class=\"keyword\">null</span>) &#123;</div><div class=\"line\">           <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> IllegalArgumentException(<span class=\"string\">\"view must not be null\"</span>);</div><div class=\"line\">       &#125;</div><div class=\"line\">       <span class=\"keyword\">if</span> (display == <span class=\"keyword\">null</span>) &#123;</div><div class=\"line\">           <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> IllegalArgumentException(<span class=\"string\">\"display must not be null\"</span>);</div><div class=\"line\">       &#125;</div><div class=\"line\">       <span class=\"keyword\">if</span> (!(params <span class=\"keyword\">instanceof</span> WindowManager.LayoutParams)) &#123;</div><div class=\"line\">           <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> IllegalArgumentException(<span class=\"string\">\"Params must be WindowManager.LayoutParams\"</span>);</div><div class=\"line\">       &#125;</div><div class=\"line\"></div><div class=\"line\">       <span class=\"keyword\">final</span> WindowManager.LayoutParams wparams = (WindowManager.LayoutParams) params;</div><div class=\"line\">       <span class=\"keyword\">if</span> (parentWindow != <span class=\"keyword\">null</span>) &#123;</div><div class=\"line\">           parentWindow.adjustLayoutParamsForSubWindow(wparams);</div><div class=\"line\">       &#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">           <span class=\"comment\">// If there's no parent, then hardware acceleration for this view is</span></div><div class=\"line\">           <span class=\"comment\">// set from the application's hardware acceleration setting.</span></div><div class=\"line\">           <span class=\"keyword\">final</span> Context context = view.getContext();</div><div class=\"line\">           <span class=\"keyword\">if</span> (context != <span class=\"keyword\">null</span></div><div class=\"line\">                   &amp;&amp; (context.getApplicationInfo().flags</div><div class=\"line\">                           &amp; ApplicationInfo.FLAG_HARDWARE_ACCELERATED) != <span class=\"number\">0</span>) &#123;</div><div class=\"line\">               wparams.flags |= WindowManager.LayoutParams.FLAG_HARDWARE_ACCELERATED;</div><div class=\"line\">           &#125;</div><div class=\"line\">       &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<ol>\n<li><strong>创建ViewRootImpl并将View添加到列表中。</strong><br>在WindowManagerGlobal内部有如下几个列表比较重要：</li>\n</ol>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">private</span> <span class=\"keyword\">final</span> ArrayList&lt;View&gt; mViews = <span class=\"keyword\">new</span> ArrayList&lt;View&gt;();</div><div class=\"line\">   <span class=\"keyword\">private</span> <span class=\"keyword\">final</span> ArrayList&lt;ViewRootImpl&gt; mRoots = <span class=\"keyword\">new</span> ArrayList&lt;ViewRootImpl&gt;();</div><div class=\"line\">   <span class=\"keyword\">private</span> <span class=\"keyword\">final</span> ArrayList&lt;WindowManager.LayoutParams&gt; mParams =</div><div class=\"line\">           <span class=\"keyword\">new</span> ArrayList&lt;WindowManager.LayoutParams&gt;();</div><div class=\"line\">   <span class=\"keyword\">private</span> <span class=\"keyword\">final</span> ArraySet&lt;View&gt; mDyingViews = <span class=\"keyword\">new</span> ArraySet&lt;View&gt;();</div></pre></td></tr></table></figure>\n<p>　　在以上声明中，mView存储的是多有WIndow所对应的View,mRoots存储的是所有Window所对应的ViewRootImpl，mParams存储的是所有Window所对应的布局参数，而mDyingView则存储了那些正在被删除的View对象，或者说是那些已经调用removeView方法但是删除操作还未完成的Window对象，在addView中通过如下方式将Window的一系列对象添加到列表中：<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">root = <span class=\"keyword\">new</span> ViewRootImpl(view.getContext(), display);</div><div class=\"line\">   view.setLayoutParams(wparams);</div><div class=\"line\">   mViews.add(view);</div><div class=\"line\">   mRoots.add(root);</div><div class=\"line\">   mParams.add(wparams);</div></pre></td></tr></table></figure></p>\n<ol>\n<li><strong>通过ViewRootImpl来更新界面并完成Window的添加过程。</strong><br>这个过程由ViewRootImpl的setView方法来完成：<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// do this last because it fires off messages to start doing things</span></div><div class=\"line\">       <span class=\"keyword\">try</span> &#123;</div><div class=\"line\">           root.setView(view, wparams, panelParentView);</div><div class=\"line\">       &#125; <span class=\"keyword\">catch</span> (RuntimeException e) &#123;</div><div class=\"line\">           <span class=\"comment\">// BadTokenException or InvalidDisplayException, clean up.</span></div><div class=\"line\">           <span class=\"keyword\">synchronized</span> (mLock) &#123;</div><div class=\"line\">               <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> index = findViewLocked(view, <span class=\"keyword\">false</span>);</div><div class=\"line\">               <span class=\"keyword\">if</span> (index &gt;= <span class=\"number\">0</span>) &#123;</div><div class=\"line\">                   removeViewLocked(index, <span class=\"keyword\">true</span>);</div><div class=\"line\">               &#125;</div><div class=\"line\">           &#125;</div><div class=\"line\">           <span class=\"keyword\">throw</span> e;</div><div class=\"line\">       &#125;</div></pre></td></tr></table></figure>\n</li>\n</ol>\n<p>在setView内部会通过requestLayout来完成异步刷新请求。在下面的代码中，scheduleTraversals实际是View绘制的入口：<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">@Override</span></div><div class=\"line\">   <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">requestLayout</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">       <span class=\"keyword\">if</span> (!mHandlingLayoutInLayoutRequest) &#123;</div><div class=\"line\">           checkThread();</div><div class=\"line\">           mLayoutRequested = <span class=\"keyword\">true</span>;</div><div class=\"line\">           scheduleTraversals();</div><div class=\"line\">       &#125;</div><div class=\"line\">   &#125;</div></pre></td></tr></table></figure></p>\n<p>接着会通过WindowSession最终来完成Window的添加过程。</p>\n<h4 id=\"Window的删除过程\"><a href=\"#Window的删除过程\" class=\"headerlink\" title=\"Window的删除过程\"></a>Window的删除过程</h4><p>Window的删除过程和添加过程一样，都是先通过WindowManagerImpl后，再进一步通过WindowManagerGlobal来实现的，如下：<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">removeView</span><span class=\"params\">(View view, <span class=\"keyword\">boolean</span> immediate)</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">if</span> (view == <span class=\"keyword\">null</span>) &#123;</div><div class=\"line\">            <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> IllegalArgumentException(<span class=\"string\">\"view must not be null\"</span>);</div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\">        <span class=\"keyword\">synchronized</span> (mLock) &#123;</div><div class=\"line\">            <span class=\"keyword\">int</span> index = findViewLocked(view, <span class=\"keyword\">true</span>);</div><div class=\"line\">            View curView = mRoots.get(index).getView();</div><div class=\"line\">            removeViewLocked(index, immediate);</div><div class=\"line\">            <span class=\"keyword\">if</span> (curView == view) &#123;</div><div class=\"line\">                <span class=\"keyword\">return</span>;</div><div class=\"line\">            &#125;</div><div class=\"line\"></div><div class=\"line\">            <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> IllegalStateException(<span class=\"string\">\"Calling with view \"</span> + view</div><div class=\"line\">                    + <span class=\"string\">\" but the ViewAncestor is attached to \"</span> + curView);</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div></pre></td></tr></table></figure></p>\n<p>　　removeView的逻辑很清晰，首先通过findViewLocked来查找待删除的View的索引，这个查找过程就是建立的数据遍历，然后再通过调用removeViewLocked来做进一步的删除，如下：<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">removeViewLocked</span><span class=\"params\">(<span class=\"keyword\">int</span> index, <span class=\"keyword\">boolean</span> immediate)</span> </span>&#123;</div><div class=\"line\">        ViewRootImpl root = mRoots.get(index);</div><div class=\"line\">        View view = root.getView();</div><div class=\"line\"></div><div class=\"line\">        <span class=\"keyword\">if</span> (view != <span class=\"keyword\">null</span>) &#123;</div><div class=\"line\">            InputMethodManager imm = InputMethodManager.getInstance();</div><div class=\"line\">            <span class=\"keyword\">if</span> (imm != <span class=\"keyword\">null</span>) &#123;</div><div class=\"line\">                imm.windowDismissed(mViews.get(index).getWindowToken());</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;</div><div class=\"line\">        <span class=\"keyword\">boolean</span> deferred = root.die(immediate);</div><div class=\"line\">        <span class=\"keyword\">if</span> (view != <span class=\"keyword\">null</span>) &#123;</div><div class=\"line\">            view.assignParent(<span class=\"keyword\">null</span>);</div><div class=\"line\">            <span class=\"keyword\">if</span> (deferred) &#123;</div><div class=\"line\">                mDyingViews.add(view);</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div></pre></td></tr></table></figure></p>\n<p>　　removeViewLocked是通过ViewRootImpl来完成删除操作的，在WindowManager中提供了两种删除接口removeView和removeViewImmediate,它们分别表示异步删除和同步删除，一般不需要使用removeViewImmediate这个方法。这里主要说异步删除的情况：具体的删除操作由ViewRootImpl的die方法来完成，在异步删除的情况下，die方法只是发送了一个请求删除的消息后就立刻返回了，<strong>这个时候View并没有完成删除操作</strong>，所以最后会将其添加到mDyingView中。ViewRootImpl的die方法如下：<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">boolean</span> <span class=\"title\">die</span><span class=\"params\">(<span class=\"keyword\">boolean</span> immediate)</span> </span>&#123;</div><div class=\"line\">   <span class=\"comment\">// Make sure we do execute immediately if we are in the middle of a traversal or the damage</span></div><div class=\"line\">   <span class=\"comment\">// done by dispatchDetachedFromWindow will cause havoc on return.</span></div><div class=\"line\">   <span class=\"keyword\">if</span> (immediate &amp;&amp; !mIsInTraversal) &#123;</div><div class=\"line\">       doDie();</div><div class=\"line\">       <span class=\"keyword\">return</span> <span class=\"keyword\">false</span>;</div><div class=\"line\">   &#125;</div><div class=\"line\"></div><div class=\"line\">   <span class=\"keyword\">if</span> (!mIsDrawing) &#123;</div><div class=\"line\">       destroyHardwareRenderer();</div><div class=\"line\">   &#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">       Log.e(mTag, <span class=\"string\">\"Attempting to destroy the window while drawing!\\n\"</span> +</div><div class=\"line\">               <span class=\"string\">\"  window=\"</span> + <span class=\"keyword\">this</span> + <span class=\"string\">\", title=\"</span> + mWindowAttributes.getTitle());</div><div class=\"line\">   &#125;</div><div class=\"line\">   mHandler.sendEmptyMessage(MSG_DIE);</div><div class=\"line\">   <span class=\"keyword\">return</span> <span class=\"keyword\">true</span>;</div><div class=\"line\">   &#125;</div></pre></td></tr></table></figure></p>\n<p>　　在die方法中只是做了简单的判断，如果是异步删除，那么就发送一个MSG_DIE的消息，ViewRootImpl中的Handler会处理此消息并调用doDie方法，如果是同步删除，那么就不发送消息直接调用doDie方法。在doDie内部会调用dispatchDetachedFromWindow方法，真正删除View的逻辑在dispatchDetachedFromWindow方法内部实现。dispatchDetachedFromWindow方法主要做四件事：</p>\n<ol>\n<li>垃圾回收相关的工作，比如清除数据和消息，移除回调等。</li>\n<li>通过Session的remove方法删除Window：mWindowSession.remove(mWindow)，这同样是一个IPC过程，最终会调用WindowManagerService的removeWindow方法。</li>\n<li>调用View的dispatchDetachedFromWindow方法，在内部会调用View的onDetachedFromWindow以及onDetachedFromWindowInternal()。</li>\n<li>调用WindowManagerGlobal的doRemoveView方法刷新数据，包括mRoots、mParams以及mDyingViews，需要将当前Window锁关联的这三类对象从列表中删除。<h4 id=\"Window的更新过程\"><a href=\"#Window的更新过程\" class=\"headerlink\" title=\"Window的更新过程\"></a>Window的更新过程</h4><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">updateViewLayout</span><span class=\"params\">(View view, ViewGroup.LayoutParams params)</span> </span>&#123;</div><div class=\"line\">       <span class=\"keyword\">if</span> (view == <span class=\"keyword\">null</span>) &#123;</div><div class=\"line\">           <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> IllegalArgumentException(<span class=\"string\">\"view must not be null\"</span>);</div><div class=\"line\">       &#125;</div><div class=\"line\">       <span class=\"keyword\">if</span> (!(params <span class=\"keyword\">instanceof</span> WindowManager.LayoutParams)) &#123;</div><div class=\"line\">           <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> IllegalArgumentException(<span class=\"string\">\"Params must be WindowManager.LayoutParams\"</span>);</div><div class=\"line\">       &#125;</div><div class=\"line\"></div><div class=\"line\">       <span class=\"keyword\">final</span> WindowManager.LayoutParams wparams = (WindowManager.LayoutParams)params;</div><div class=\"line\"></div><div class=\"line\">       view.setLayoutParams(wparams);</div><div class=\"line\"></div><div class=\"line\">       <span class=\"keyword\">synchronized</span> (mLock) &#123;</div><div class=\"line\">           <span class=\"keyword\">int</span> index = findViewLocked(view, <span class=\"keyword\">true</span>);</div><div class=\"line\">           ViewRootImpl root = mRoots.get(index);</div><div class=\"line\">           mParams.remove(index);</div><div class=\"line\">           mParams.add(index, wparams);</div><div class=\"line\">           root.setLayoutParams(wparams, <span class=\"keyword\">false</span>);</div><div class=\"line\">       &#125;</div><div class=\"line\">   &#125;</div></pre></td></tr></table></figure>\n</li>\n</ol>\n<p>首先它需要更新View的LayoutParams并替换掉老的LayoutParams，接着再更新ViewRootImpl中的layoutParams，这一步是通过ViewRootImpl的setLayoutParams方法来实现的。在ViewRootImpl中会通过scheduleTraversals方法来对View重新布局，包括测量、布局、重绘这三个过程，除了View本身的重绘以外，ViewRootImpl还会通过WindowSession开更新Window的视图，这个过程最终是由WindowManagerService的relayoutWindow()来具体实现，它同样是一个IPC的过程。</p>\n<hr>\n<p>以上</p>"},{"title":"flask笔记一 快速入门","date":"2017-07-15T01:55:52.000Z","keywords":"flask入门","_content":"学习python和flask中看过的资料和自己的实践总结\n[Flask英文](http://flask.pocoo.org/)\n以下内容来自[flask中文](http://docs.jinkan.org/docs/flask)\n<!--more-->\n#### 环境安装\nFlask依赖两个外部库：Werkzeug和Jinja2。Werkzeug是一个WSGI工具集、Jinja2负责渲染模板。首先需要python2.6或者更高的版本，python3.X安装方式可能有所不一致。\n###### virtualenv\nvirtualenv 为每个不同项目提供一份 Python 安装。它并没有真正安装多个 Python 副本，但是它确实提供了一种巧妙的方式来让各项目环境保持独立。\n`sudo apt-get install python-virtualenv`\nvirtualenv安装完成后，用IDE比如pycharm创建一个Flask的项目工程，并在其下创建一个venv文件夹\n```shell\n$ mkdir myproject\n$ cd myproject\n$ virtualenv venv\nNew python executable in venv/bin/python\nInstalling distribute............done.\n```\n然后激活相应的环境\n`$ . venv/bin/activate`\n然后激活virtualenv中的Flask\n`$ pip install Flask`\n#### 项目配置\n在pycharm中，打开setting\n![项目设置](/image/python/Flask/pycharm_project_setting1.png)\n在Project Interpreter中选择当前工程文件下的virtualenv\n打开工程的Configuration\n![项目设置](/image/python/Flask/pycharm_project_setting2.png)\n在python interpreter中选择当前工程文件下的virtualenv\n#### 项目说明\n###### 总述\n刚刚新建的工程看起来会是这样的\n``` python\nfrom flask import Flask\napp = Flask(__name__)\n\n@app.route('/')\ndef hello_world():\n    return 'Hello World!'\n\nif __name__ == '__main__':\n    app.run()\n```\n运行这段程序(文件名不要是 flask.py，这会和已有的文件冲突)，浏览器访问`127.0.0.1:5000`，然后就会看到熟悉的`hello world`.\n那么，这段代码做了什么？\n\n1. 首先，我们导入了 Flask 类。这个类的实例将会是我们的 WSGI 应用程序。\n接下来，我们创建一个该类的实例，第一个参数是应用模块或者包的名称。 如果你使用单一的模块（如本例），你应该使用 __name__ ，因为模块的名称将会因其作为单独应用启动还是作为模块导入而有不同（ 也即是 '__main__' 或实际的导入名）。这是必须的，这样 Flask 才知道到哪去找模板、静态文件等等。详情见 Flask 的文档。\n2. 然后，我们使用 route() 装饰器告诉 Flask 什么样的URL 能触发我们的函数。\n这个函数的名字也在生成 URL 时被特定的函数采用，这个函数返回我们想要显示在用户浏览器中的信息。\n3. 最后我们用 run() 函数来让应用运行在本地服务器上。 其中 if __name__ == '__main__': 确保服务器只会在该脚本被 Python 解释器直接执行的时候才会运行，而不是作为模块导入的时候。\n  欲关闭服务器，按 Ctrl+C。\n你会发现它只能从自己的计算机上访问，网络中其他任何地方都不能访问，我们可以修改run()方法使该服务公开可用\n`app.run(host='0.0.0.0')`\n这样会让操作系统监听所有的公网IP\n同样可以开启debug模式\n`app.debug = True;app.run()`\n或者\n`app.run(debug=True)` \n###### 路由\n如上面的代码所示，route()装饰其吧一个函数绑定到对应的URL上\n``` python\n@app.route('/')\ndef index():\n    return 'Index Page'\n\n@app.route('/hello')\ndef hello():\n    return 'Hello World'\n```\n不仅如此，还可以构造含有动态部分的URL，也可以在一个函数上附着多个规则\n###### 变量规则\n要给 URL 添加变量部分，你可以把这些特殊的字段标记为 <variable_name> ， 这个部分将会作为命名参数传递到你的函数。规则可以用 <converter:variable_name> 指定一个可选的转换器。如下所示\n\n``` python\n@app.route('/user/<username>')\ndef show_user_profile(username):\n    # show the user profile for that user\n    return 'User %s' % username\n\n@app.route('/post/<int:post_id>')\ndef show_post(post_id):\n    # show the post with the given id, the id is an integer\n    return 'Post %d' % post_id\n```\n###### HTTP方法\nHTTP有许多不同的访问URL方法。默认情况下，路由只回应GET请求，但是通过route()装饰器传递methods参数可以改变这个行为。\n\n``` python\n@app.route('/login', methods=['GET', 'POST'])\ndef login():\n    if request.method == 'POST':\n        do_the_login()\n    else:\n        show_the_login_form()\n```\n###### 模板渲染\n像javaweb一样，不会直接用servlet直接输出html代码，Flask可以使用render_template()方法来渲染模板，Flask配备Jinja2模板引擎[Jinja2中文](http://docs.jinkan.org/docs/jinja2/)，[Jinja2英文](http://jinja.pocoo.org/)\n```python\nfrom flask import render_template\n\n@app.route('/hello/')\n@app.route('/hello/<name>')\ndef hello(name=None):\n    return render_template('hello.html', name=name)\n```\nFlask 会在 templates 文件夹里寻找模板。所以，如果你的应用是个模块，这个文件夹应该与模块同级；如果它是一个包，那么这个文件夹作为包的子目录:\n情况 1: 模块:\n```\n/application.py\n/templates\n    /hello.html\n```\n情况 2: 包:\n```\n/application\n    /__init__.py\n    /templates\n        /hello.html\n```\n下面是`hello.html`文件内容\n``` Jinja2\n<!doctype html>\n<title>Hello from Flask</title>\n{% if name %}\n  <h1>Hello {{ name }}!</h1>\n{% else %}\n  <h1>Hello World!</h1>\n{% endif %}\n```\n###### 访问请求数据\n可以通过`request.form`属性来访问表单数据。\n``` python\n@app.route(\"/signin\", methods=[\"POST\"])\ndef signin():\n    print request.args.get(\"username\")\n    username = request.form[\"username\"]\n    return render_template('hello.html', name=username)\n```\n如果form表单中不存在所要获取的键，会抛出特殊的KeyError异常。\n###### 文件上传\n首先确保HTML表单中设置 `enctype=\"multipart/form-data\" `属性，否则浏览器根本不会发送文件。\n已上传的文件存储在内存或是文件系统中一个临时的位置。可以通过请求对象的`file`属性访问它。每个上传的文件都会存储在这个字典里。同时它还有一个`save()`方法，这个方法允许把文件保额哦村到服务器的文件系统上。如果像知道上传的文件在客户端是什么名字，可以访问`filename`属性\n``` python\nfrom flask import request\n\n@app.route('/upload', methods=['GET', 'POST'])\ndef upload_file():\n    if request.method == 'POST':\n        f = request.files['the_file']\n        f.save('/var/www/uploads/uploaded_file.txt')\n```\n###### Cookies\n可以通过`cookies`属性来访问Cookies，用响应对象的`set_cookie`方法来设置Cookies。请求对象的`cookies`属性是一个内容为客户端提交的所有Cookies的字典.\n读取cookies：\n```python\nfrom flask import request\n\n@app.route('/')\ndef index():\n    username = request.cookies.get('username')\n    # use cookies.get(key) instead of cookies[key] to not get a\n    # KeyError if the cookie is missing.\n```\n存储cookie：\n``` python\nfrom flask import make_response\n\n@app.route('/')\ndef index():\n    resp = make_response(render_template(...))\n    resp.set_cookie('username', 'the username')\n    return resp\n```\n需要注意的是，Cookies是设置在响应对象上的。由于通常视图函数只是返回字符串，之后Flask将字符串转换为响应对象。\n###### 重定向和错误\n可以使用`redirect()`函数把用户重定向到其他地方。用`abort()`函数放弃请求并返回错误代码，如下：\n``` python\nfrom flask import abort, redirect, url_for\n\n@app.route('/')\ndef index():\n    return redirect(url_for('login'))\n\n@app.route('/login')\ndef login():\n    abort(401)\n    this_is_never_executed()\n```\n这是一个完全没有任何意义的代码，因为用户会从主页重定向到一个不能访问的页面。默认情况下，错误代码会显示一个黑白的错误页面，如果要定制错误页面，可以使用`errorhandler()`装饰器\n```python\nfrom flask import render_template\n\n@app.errorhandler(404)\ndef page_not_found(error):\n    return render_template('page_not_found.html'), 404\n```\n注意`render_template()调用之后的404，这告诉Flask，该页的错误代码是404。默认是200,也就是一切正常\n###### 关于响应\n视图函数的返回值会被自动转换为一个响应对象。如果返回值是一个字符串， 它被转换为该字符串为主体的、状态码为 200 OK``的 、 MIME 类型是 ``text/html 的响应对象。Flask 把返回值转换为响应对象的逻辑是这样：\n1. 如果返回的是一个合法的响应对象，它会从视图直接返回。\n2. 如果返回的是一个字符串，响应对象会用字符串数据和默认参数创建。\n3. 如果返回的是一个元组，且元组中的元素可以提供额外的信息。这样的元组必须是 (response, status, headers) 的形式，且至少包含一个元素。 status 值会覆盖状态代码， headers 可以是一个列表或字典，作为额外的消息标头值。\n4. 如果上述条件均不满足， Flask 会假设返回值是一个合法的 WSGI 应用程序，并转换为一个请求对象。\n如果你想在视图里操纵上述步骤结果的响应对象，可以使用 make_response() 函数。\n\n譬如你有这样一个视图:\n```python\n@app.errorhandler(404)\ndef not_found(error):\n    return render_template('error.html'), 404\n```\n只需要把返回值表达式传递给`make_response()`，获取结果对象并修改，然后再返回它:\n``` python \n@app.errorhandler(404)\ndef not_found(error):\n    resp = make_response(render_template('error.html'), 404)\n    resp.headers['X-Something'] = 'A value'\n    return resp\n```\n###### 会话\n除请求对象之后，还有一个`session`对象，它允许你在不同请求间存储特定用户的信息。他是在Cookies的基础上实现，并且对Cookies进行密钥签名。这意味着用户可以查看你Cookie的内容，但却不能修改它，除非用户知道签名的密钥。\n要使用会话，需要设置一个密钥\n``` python\nfrom flask import Flask, session, redirect, url_for, escape, request\n\napp = Flask(__name__)\n\n@app.route('/')\ndef index():\n    if 'username' in session:\n        return 'Logged in as %s' % escape(session['username'])\n    return 'You are not logged in'\n\n@app.route('/login', methods=['GET', 'POST'])\ndef login():\n    if request.method == 'POST':\n        session['username'] = request.form['username']\n        return redirect(url_for('index'))\n    return '''\n        <form action=\"\" method=\"post\">\n            <p><input type=text name=username>\n            <p><input type=submit value=Login>\n        </form>\n    '''\n\n@app.route('/logout')\ndef logout():\n    # remove the username from the session if it's there\n    session.pop('username', None)\n    return redirect(url_for('index'))\n\n# set the secret key.  keep this really secret:\napp.secret_key = 'A0Zr98j/3yX R~XHH!jmN]LWX/,?RT'\n```\n这里提到的`escape()`可以在模板引擎外做转义\n\n----\n以上","source":"_posts/flask笔记一(快速入门).md","raw":"---\ntitle: flask笔记一 快速入门\ndate: 2017-07-15 09:55:52\ntags: [Python,flask]\nkeywords: flask入门\n---\n学习python和flask中看过的资料和自己的实践总结\n[Flask英文](http://flask.pocoo.org/)\n以下内容来自[flask中文](http://docs.jinkan.org/docs/flask)\n<!--more-->\n#### 环境安装\nFlask依赖两个外部库：Werkzeug和Jinja2。Werkzeug是一个WSGI工具集、Jinja2负责渲染模板。首先需要python2.6或者更高的版本，python3.X安装方式可能有所不一致。\n###### virtualenv\nvirtualenv 为每个不同项目提供一份 Python 安装。它并没有真正安装多个 Python 副本，但是它确实提供了一种巧妙的方式来让各项目环境保持独立。\n`sudo apt-get install python-virtualenv`\nvirtualenv安装完成后，用IDE比如pycharm创建一个Flask的项目工程，并在其下创建一个venv文件夹\n```shell\n$ mkdir myproject\n$ cd myproject\n$ virtualenv venv\nNew python executable in venv/bin/python\nInstalling distribute............done.\n```\n然后激活相应的环境\n`$ . venv/bin/activate`\n然后激活virtualenv中的Flask\n`$ pip install Flask`\n#### 项目配置\n在pycharm中，打开setting\n![项目设置](/image/python/Flask/pycharm_project_setting1.png)\n在Project Interpreter中选择当前工程文件下的virtualenv\n打开工程的Configuration\n![项目设置](/image/python/Flask/pycharm_project_setting2.png)\n在python interpreter中选择当前工程文件下的virtualenv\n#### 项目说明\n###### 总述\n刚刚新建的工程看起来会是这样的\n``` python\nfrom flask import Flask\napp = Flask(__name__)\n\n@app.route('/')\ndef hello_world():\n    return 'Hello World!'\n\nif __name__ == '__main__':\n    app.run()\n```\n运行这段程序(文件名不要是 flask.py，这会和已有的文件冲突)，浏览器访问`127.0.0.1:5000`，然后就会看到熟悉的`hello world`.\n那么，这段代码做了什么？\n\n1. 首先，我们导入了 Flask 类。这个类的实例将会是我们的 WSGI 应用程序。\n接下来，我们创建一个该类的实例，第一个参数是应用模块或者包的名称。 如果你使用单一的模块（如本例），你应该使用 __name__ ，因为模块的名称将会因其作为单独应用启动还是作为模块导入而有不同（ 也即是 '__main__' 或实际的导入名）。这是必须的，这样 Flask 才知道到哪去找模板、静态文件等等。详情见 Flask 的文档。\n2. 然后，我们使用 route() 装饰器告诉 Flask 什么样的URL 能触发我们的函数。\n这个函数的名字也在生成 URL 时被特定的函数采用，这个函数返回我们想要显示在用户浏览器中的信息。\n3. 最后我们用 run() 函数来让应用运行在本地服务器上。 其中 if __name__ == '__main__': 确保服务器只会在该脚本被 Python 解释器直接执行的时候才会运行，而不是作为模块导入的时候。\n  欲关闭服务器，按 Ctrl+C。\n你会发现它只能从自己的计算机上访问，网络中其他任何地方都不能访问，我们可以修改run()方法使该服务公开可用\n`app.run(host='0.0.0.0')`\n这样会让操作系统监听所有的公网IP\n同样可以开启debug模式\n`app.debug = True;app.run()`\n或者\n`app.run(debug=True)` \n###### 路由\n如上面的代码所示，route()装饰其吧一个函数绑定到对应的URL上\n``` python\n@app.route('/')\ndef index():\n    return 'Index Page'\n\n@app.route('/hello')\ndef hello():\n    return 'Hello World'\n```\n不仅如此，还可以构造含有动态部分的URL，也可以在一个函数上附着多个规则\n###### 变量规则\n要给 URL 添加变量部分，你可以把这些特殊的字段标记为 <variable_name> ， 这个部分将会作为命名参数传递到你的函数。规则可以用 <converter:variable_name> 指定一个可选的转换器。如下所示\n\n``` python\n@app.route('/user/<username>')\ndef show_user_profile(username):\n    # show the user profile for that user\n    return 'User %s' % username\n\n@app.route('/post/<int:post_id>')\ndef show_post(post_id):\n    # show the post with the given id, the id is an integer\n    return 'Post %d' % post_id\n```\n###### HTTP方法\nHTTP有许多不同的访问URL方法。默认情况下，路由只回应GET请求，但是通过route()装饰器传递methods参数可以改变这个行为。\n\n``` python\n@app.route('/login', methods=['GET', 'POST'])\ndef login():\n    if request.method == 'POST':\n        do_the_login()\n    else:\n        show_the_login_form()\n```\n###### 模板渲染\n像javaweb一样，不会直接用servlet直接输出html代码，Flask可以使用render_template()方法来渲染模板，Flask配备Jinja2模板引擎[Jinja2中文](http://docs.jinkan.org/docs/jinja2/)，[Jinja2英文](http://jinja.pocoo.org/)\n```python\nfrom flask import render_template\n\n@app.route('/hello/')\n@app.route('/hello/<name>')\ndef hello(name=None):\n    return render_template('hello.html', name=name)\n```\nFlask 会在 templates 文件夹里寻找模板。所以，如果你的应用是个模块，这个文件夹应该与模块同级；如果它是一个包，那么这个文件夹作为包的子目录:\n情况 1: 模块:\n```\n/application.py\n/templates\n    /hello.html\n```\n情况 2: 包:\n```\n/application\n    /__init__.py\n    /templates\n        /hello.html\n```\n下面是`hello.html`文件内容\n``` Jinja2\n<!doctype html>\n<title>Hello from Flask</title>\n{% if name %}\n  <h1>Hello {{ name }}!</h1>\n{% else %}\n  <h1>Hello World!</h1>\n{% endif %}\n```\n###### 访问请求数据\n可以通过`request.form`属性来访问表单数据。\n``` python\n@app.route(\"/signin\", methods=[\"POST\"])\ndef signin():\n    print request.args.get(\"username\")\n    username = request.form[\"username\"]\n    return render_template('hello.html', name=username)\n```\n如果form表单中不存在所要获取的键，会抛出特殊的KeyError异常。\n###### 文件上传\n首先确保HTML表单中设置 `enctype=\"multipart/form-data\" `属性，否则浏览器根本不会发送文件。\n已上传的文件存储在内存或是文件系统中一个临时的位置。可以通过请求对象的`file`属性访问它。每个上传的文件都会存储在这个字典里。同时它还有一个`save()`方法，这个方法允许把文件保额哦村到服务器的文件系统上。如果像知道上传的文件在客户端是什么名字，可以访问`filename`属性\n``` python\nfrom flask import request\n\n@app.route('/upload', methods=['GET', 'POST'])\ndef upload_file():\n    if request.method == 'POST':\n        f = request.files['the_file']\n        f.save('/var/www/uploads/uploaded_file.txt')\n```\n###### Cookies\n可以通过`cookies`属性来访问Cookies，用响应对象的`set_cookie`方法来设置Cookies。请求对象的`cookies`属性是一个内容为客户端提交的所有Cookies的字典.\n读取cookies：\n```python\nfrom flask import request\n\n@app.route('/')\ndef index():\n    username = request.cookies.get('username')\n    # use cookies.get(key) instead of cookies[key] to not get a\n    # KeyError if the cookie is missing.\n```\n存储cookie：\n``` python\nfrom flask import make_response\n\n@app.route('/')\ndef index():\n    resp = make_response(render_template(...))\n    resp.set_cookie('username', 'the username')\n    return resp\n```\n需要注意的是，Cookies是设置在响应对象上的。由于通常视图函数只是返回字符串，之后Flask将字符串转换为响应对象。\n###### 重定向和错误\n可以使用`redirect()`函数把用户重定向到其他地方。用`abort()`函数放弃请求并返回错误代码，如下：\n``` python\nfrom flask import abort, redirect, url_for\n\n@app.route('/')\ndef index():\n    return redirect(url_for('login'))\n\n@app.route('/login')\ndef login():\n    abort(401)\n    this_is_never_executed()\n```\n这是一个完全没有任何意义的代码，因为用户会从主页重定向到一个不能访问的页面。默认情况下，错误代码会显示一个黑白的错误页面，如果要定制错误页面，可以使用`errorhandler()`装饰器\n```python\nfrom flask import render_template\n\n@app.errorhandler(404)\ndef page_not_found(error):\n    return render_template('page_not_found.html'), 404\n```\n注意`render_template()调用之后的404，这告诉Flask，该页的错误代码是404。默认是200,也就是一切正常\n###### 关于响应\n视图函数的返回值会被自动转换为一个响应对象。如果返回值是一个字符串， 它被转换为该字符串为主体的、状态码为 200 OK``的 、 MIME 类型是 ``text/html 的响应对象。Flask 把返回值转换为响应对象的逻辑是这样：\n1. 如果返回的是一个合法的响应对象，它会从视图直接返回。\n2. 如果返回的是一个字符串，响应对象会用字符串数据和默认参数创建。\n3. 如果返回的是一个元组，且元组中的元素可以提供额外的信息。这样的元组必须是 (response, status, headers) 的形式，且至少包含一个元素。 status 值会覆盖状态代码， headers 可以是一个列表或字典，作为额外的消息标头值。\n4. 如果上述条件均不满足， Flask 会假设返回值是一个合法的 WSGI 应用程序，并转换为一个请求对象。\n如果你想在视图里操纵上述步骤结果的响应对象，可以使用 make_response() 函数。\n\n譬如你有这样一个视图:\n```python\n@app.errorhandler(404)\ndef not_found(error):\n    return render_template('error.html'), 404\n```\n只需要把返回值表达式传递给`make_response()`，获取结果对象并修改，然后再返回它:\n``` python \n@app.errorhandler(404)\ndef not_found(error):\n    resp = make_response(render_template('error.html'), 404)\n    resp.headers['X-Something'] = 'A value'\n    return resp\n```\n###### 会话\n除请求对象之后，还有一个`session`对象，它允许你在不同请求间存储特定用户的信息。他是在Cookies的基础上实现，并且对Cookies进行密钥签名。这意味着用户可以查看你Cookie的内容，但却不能修改它，除非用户知道签名的密钥。\n要使用会话，需要设置一个密钥\n``` python\nfrom flask import Flask, session, redirect, url_for, escape, request\n\napp = Flask(__name__)\n\n@app.route('/')\ndef index():\n    if 'username' in session:\n        return 'Logged in as %s' % escape(session['username'])\n    return 'You are not logged in'\n\n@app.route('/login', methods=['GET', 'POST'])\ndef login():\n    if request.method == 'POST':\n        session['username'] = request.form['username']\n        return redirect(url_for('index'))\n    return '''\n        <form action=\"\" method=\"post\">\n            <p><input type=text name=username>\n            <p><input type=submit value=Login>\n        </form>\n    '''\n\n@app.route('/logout')\ndef logout():\n    # remove the username from the session if it's there\n    session.pop('username', None)\n    return redirect(url_for('index'))\n\n# set the secret key.  keep this really secret:\napp.secret_key = 'A0Zr98j/3yX R~XHH!jmN]LWX/,?RT'\n```\n这里提到的`escape()`可以在模板引擎外做转义\n\n----\n以上","slug":"flask笔记一(快速入门)","published":1,"updated":"2018-08-04T04:53:20.701Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjl3vbtrg002hisdgyu6fyvip","content":"<p>学习python和flask中看过的资料和自己的实践总结<br><a href=\"http://flask.pocoo.org/\" target=\"_blank\" rel=\"external\">Flask英文</a><br>以下内容来自<a href=\"http://docs.jinkan.org/docs/flask\" target=\"_blank\" rel=\"external\">flask中文</a><br><a id=\"more\"></a></p>\n<h4 id=\"环境安装\"><a href=\"#环境安装\" class=\"headerlink\" title=\"环境安装\"></a>环境安装</h4><p>Flask依赖两个外部库：Werkzeug和Jinja2。Werkzeug是一个WSGI工具集、Jinja2负责渲染模板。首先需要python2.6或者更高的版本，python3.X安装方式可能有所不一致。</p>\n<h6 id=\"virtualenv\"><a href=\"#virtualenv\" class=\"headerlink\" title=\"virtualenv\"></a>virtualenv</h6><p>virtualenv 为每个不同项目提供一份 Python 安装。它并没有真正安装多个 Python 副本，但是它确实提供了一种巧妙的方式来让各项目环境保持独立。<br><code>sudo apt-get install python-virtualenv</code><br>virtualenv安装完成后，用IDE比如pycharm创建一个Flask的项目工程，并在其下创建一个venv文件夹<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ mkdir myproject</div><div class=\"line\">$ cd myproject</div><div class=\"line\">$ virtualenv venv</div><div class=\"line\">New python executable in venv/bin/python</div><div class=\"line\">Installing distribute............done.</div></pre></td></tr></table></figure></p>\n<p>然后激活相应的环境<br><code>$ . venv/bin/activate</code><br>然后激活virtualenv中的Flask<br><code>$ pip install Flask</code></p>\n<h4 id=\"项目配置\"><a href=\"#项目配置\" class=\"headerlink\" title=\"项目配置\"></a>项目配置</h4><p>在pycharm中，打开setting<br><img src=\"/image/python/Flask/pycharm_project_setting1.png\" alt=\"项目设置\"><br>在Project Interpreter中选择当前工程文件下的virtualenv<br>打开工程的Configuration<br><img src=\"/image/python/Flask/pycharm_project_setting2.png\" alt=\"项目设置\"><br>在python interpreter中选择当前工程文件下的virtualenv</p>\n<h4 id=\"项目说明\"><a href=\"#项目说明\" class=\"headerlink\" title=\"项目说明\"></a>项目说明</h4><h6 id=\"总述\"><a href=\"#总述\" class=\"headerlink\" title=\"总述\"></a>总述</h6><p>刚刚新建的工程看起来会是这样的<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">from</span> flask <span class=\"keyword\">import</span> Flask</div><div class=\"line\">app = Flask(__name__)</div><div class=\"line\"></div><div class=\"line\"><span class=\"meta\">@app.route('/')</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">hello_world</span><span class=\"params\">()</span>:</span></div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"string\">'Hello World!'</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">if</span> __name__ == <span class=\"string\">'__main__'</span>:</div><div class=\"line\">    app.run()</div></pre></td></tr></table></figure></p>\n<p>运行这段程序(文件名不要是 flask.py，这会和已有的文件冲突)，浏览器访问<code>127.0.0.1:5000</code>，然后就会看到熟悉的<code>hello world</code>.<br>那么，这段代码做了什么？</p>\n<ol>\n<li>首先，我们导入了 Flask 类。这个类的实例将会是我们的 WSGI 应用程序。<br>接下来，我们创建一个该类的实例，第一个参数是应用模块或者包的名称。 如果你使用单一的模块（如本例），你应该使用 <strong>name</strong> ，因为模块的名称将会因其作为单独应用启动还是作为模块导入而有不同（ 也即是 ‘<strong>main</strong>‘ 或实际的导入名）。这是必须的，这样 Flask 才知道到哪去找模板、静态文件等等。详情见 Flask 的文档。</li>\n<li>然后，我们使用 route() 装饰器告诉 Flask 什么样的URL 能触发我们的函数。<br>这个函数的名字也在生成 URL 时被特定的函数采用，这个函数返回我们想要显示在用户浏览器中的信息。</li>\n<li>最后我们用 run() 函数来让应用运行在本地服务器上。 其中 if <strong>name</strong> == ‘<strong>main</strong>‘: 确保服务器只会在该脚本被 Python 解释器直接执行的时候才会运行，而不是作为模块导入的时候。<br>欲关闭服务器，按 Ctrl+C。<br>你会发现它只能从自己的计算机上访问，网络中其他任何地方都不能访问，我们可以修改run()方法使该服务公开可用<br><code>app.run(host=&#39;0.0.0.0&#39;)</code><br>这样会让操作系统监听所有的公网IP<br>同样可以开启debug模式<br><code>app.debug = True;app.run()</code><br>或者<br><code>app.run(debug=True)</code> <h6 id=\"路由\"><a href=\"#路由\" class=\"headerlink\" title=\"路由\"></a>路由</h6>如上面的代码所示，route()装饰其吧一个函数绑定到对应的URL上<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">@app.route('/')</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">index</span><span class=\"params\">()</span>:</span></div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"string\">'Index Page'</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"meta\">@app.route('/hello')</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">hello</span><span class=\"params\">()</span>:</span></div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"string\">'Hello World'</span></div></pre></td></tr></table></figure>\n</li>\n</ol>\n<p>不仅如此，还可以构造含有动态部分的URL，也可以在一个函数上附着多个规则</p>\n<h6 id=\"变量规则\"><a href=\"#变量规则\" class=\"headerlink\" title=\"变量规则\"></a>变量规则</h6><p>要给 URL 添加变量部分，你可以把这些特殊的字段标记为 <variable_name> ， 这个部分将会作为命名参数传递到你的函数。规则可以用 <converter:variable_name> 指定一个可选的转换器。如下所示</converter:variable_name></variable_name></p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">@app.route('/user/&lt;username&gt;')</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">show_user_profile</span><span class=\"params\">(username)</span>:</span></div><div class=\"line\">    <span class=\"comment\"># show the user profile for that user</span></div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"string\">'User %s'</span> % username</div><div class=\"line\"></div><div class=\"line\"><span class=\"meta\">@app.route('/post/&lt;int:post_id&gt;')</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">show_post</span><span class=\"params\">(post_id)</span>:</span></div><div class=\"line\">    <span class=\"comment\"># show the post with the given id, the id is an integer</span></div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"string\">'Post %d'</span> % post_id</div></pre></td></tr></table></figure>\n<h6 id=\"HTTP方法\"><a href=\"#HTTP方法\" class=\"headerlink\" title=\"HTTP方法\"></a>HTTP方法</h6><p>HTTP有许多不同的访问URL方法。默认情况下，路由只回应GET请求，但是通过route()装饰器传递methods参数可以改变这个行为。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">@app.route('/login', methods=['GET', 'POST'])</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">login</span><span class=\"params\">()</span>:</span></div><div class=\"line\">    <span class=\"keyword\">if</span> request.method == <span class=\"string\">'POST'</span>:</div><div class=\"line\">        do_the_login()</div><div class=\"line\">    <span class=\"keyword\">else</span>:</div><div class=\"line\">        show_the_login_form()</div></pre></td></tr></table></figure>\n<h6 id=\"模板渲染\"><a href=\"#模板渲染\" class=\"headerlink\" title=\"模板渲染\"></a>模板渲染</h6><p>像javaweb一样，不会直接用servlet直接输出html代码，Flask可以使用render_template()方法来渲染模板，Flask配备Jinja2模板引擎<a href=\"http://docs.jinkan.org/docs/jinja2/\" target=\"_blank\" rel=\"external\">Jinja2中文</a>，<a href=\"http://jinja.pocoo.org/\" target=\"_blank\" rel=\"external\">Jinja2英文</a><br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">from</span> flask <span class=\"keyword\">import</span> render_template</div><div class=\"line\"></div><div class=\"line\"><span class=\"meta\">@app.route('/hello/')</span></div><div class=\"line\"><span class=\"meta\">@app.route('/hello/&lt;name&gt;')</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">hello</span><span class=\"params\">(name=None)</span>:</span></div><div class=\"line\">    <span class=\"keyword\">return</span> render_template(<span class=\"string\">'hello.html'</span>, name=name)</div></pre></td></tr></table></figure></p>\n<p>Flask 会在 templates 文件夹里寻找模板。所以，如果你的应用是个模块，这个文件夹应该与模块同级；如果它是一个包，那么这个文件夹作为包的子目录:<br>情况 1: 模块:<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">/application.py</div><div class=\"line\">/templates</div><div class=\"line\">    /hello.html</div></pre></td></tr></table></figure></p>\n<p>情况 2: 包:<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">/application</div><div class=\"line\">    /__init__.py</div><div class=\"line\">    /templates</div><div class=\"line\">        /hello.html</div></pre></td></tr></table></figure></p>\n<p>下面是<code>hello.html</code>文件内容<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;!doctype html&gt;</div><div class=\"line\">&lt;title&gt;Hello from Flask&lt;/title&gt;</div><div class=\"line\">&#123;% if name %&#125;</div><div class=\"line\">  &lt;h1&gt;Hello &#123;&#123; name &#125;&#125;!&lt;/h1&gt;</div><div class=\"line\">&#123;% else %&#125;</div><div class=\"line\">  &lt;h1&gt;Hello World!&lt;/h1&gt;</div><div class=\"line\">&#123;% endif %&#125;</div></pre></td></tr></table></figure></p>\n<h6 id=\"访问请求数据\"><a href=\"#访问请求数据\" class=\"headerlink\" title=\"访问请求数据\"></a>访问请求数据</h6><p>可以通过<code>request.form</code>属性来访问表单数据。<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">@app.route(\"/signin\", methods=[\"POST\"])</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">signin</span><span class=\"params\">()</span>:</span></div><div class=\"line\">    <span class=\"keyword\">print</span> request.args.get(<span class=\"string\">\"username\"</span>)</div><div class=\"line\">    username = request.form[<span class=\"string\">\"username\"</span>]</div><div class=\"line\">    <span class=\"keyword\">return</span> render_template(<span class=\"string\">'hello.html'</span>, name=username)</div></pre></td></tr></table></figure></p>\n<p>如果form表单中不存在所要获取的键，会抛出特殊的KeyError异常。</p>\n<h6 id=\"文件上传\"><a href=\"#文件上传\" class=\"headerlink\" title=\"文件上传\"></a>文件上传</h6><p>首先确保HTML表单中设置 <code>enctype=&quot;multipart/form-data&quot;</code>属性，否则浏览器根本不会发送文件。<br>已上传的文件存储在内存或是文件系统中一个临时的位置。可以通过请求对象的<code>file</code>属性访问它。每个上传的文件都会存储在这个字典里。同时它还有一个<code>save()</code>方法，这个方法允许把文件保额哦村到服务器的文件系统上。如果像知道上传的文件在客户端是什么名字，可以访问<code>filename</code>属性<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">from</span> flask <span class=\"keyword\">import</span> request</div><div class=\"line\"></div><div class=\"line\"><span class=\"meta\">@app.route('/upload', methods=['GET', 'POST'])</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">upload_file</span><span class=\"params\">()</span>:</span></div><div class=\"line\">    <span class=\"keyword\">if</span> request.method == <span class=\"string\">'POST'</span>:</div><div class=\"line\">        f = request.files[<span class=\"string\">'the_file'</span>]</div><div class=\"line\">        f.save(<span class=\"string\">'/var/www/uploads/uploaded_file.txt'</span>)</div></pre></td></tr></table></figure></p>\n<h6 id=\"Cookies\"><a href=\"#Cookies\" class=\"headerlink\" title=\"Cookies\"></a>Cookies</h6><p>可以通过<code>cookies</code>属性来访问Cookies，用响应对象的<code>set_cookie</code>方法来设置Cookies。请求对象的<code>cookies</code>属性是一个内容为客户端提交的所有Cookies的字典.<br>读取cookies：<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">from</span> flask <span class=\"keyword\">import</span> request</div><div class=\"line\"></div><div class=\"line\"><span class=\"meta\">@app.route('/')</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">index</span><span class=\"params\">()</span>:</span></div><div class=\"line\">    username = request.cookies.get(<span class=\"string\">'username'</span>)</div><div class=\"line\">    <span class=\"comment\"># use cookies.get(key) instead of cookies[key] to not get a</span></div><div class=\"line\">    <span class=\"comment\"># KeyError if the cookie is missing.</span></div></pre></td></tr></table></figure></p>\n<p>存储cookie：<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">from</span> flask <span class=\"keyword\">import</span> make_response</div><div class=\"line\"></div><div class=\"line\"><span class=\"meta\">@app.route('/')</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">index</span><span class=\"params\">()</span>:</span></div><div class=\"line\">    resp = make_response(render_template(...))</div><div class=\"line\">    resp.set_cookie(<span class=\"string\">'username'</span>, <span class=\"string\">'the username'</span>)</div><div class=\"line\">    <span class=\"keyword\">return</span> resp</div></pre></td></tr></table></figure></p>\n<p>需要注意的是，Cookies是设置在响应对象上的。由于通常视图函数只是返回字符串，之后Flask将字符串转换为响应对象。</p>\n<h6 id=\"重定向和错误\"><a href=\"#重定向和错误\" class=\"headerlink\" title=\"重定向和错误\"></a>重定向和错误</h6><p>可以使用<code>redirect()</code>函数把用户重定向到其他地方。用<code>abort()</code>函数放弃请求并返回错误代码，如下：<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">from</span> flask <span class=\"keyword\">import</span> abort, redirect, url_for</div><div class=\"line\"></div><div class=\"line\"><span class=\"meta\">@app.route('/')</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">index</span><span class=\"params\">()</span>:</span></div><div class=\"line\">    <span class=\"keyword\">return</span> redirect(url_for(<span class=\"string\">'login'</span>))</div><div class=\"line\"></div><div class=\"line\"><span class=\"meta\">@app.route('/login')</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">login</span><span class=\"params\">()</span>:</span></div><div class=\"line\">    abort(<span class=\"number\">401</span>)</div><div class=\"line\">    this_is_never_executed()</div></pre></td></tr></table></figure></p>\n<p>这是一个完全没有任何意义的代码，因为用户会从主页重定向到一个不能访问的页面。默认情况下，错误代码会显示一个黑白的错误页面，如果要定制错误页面，可以使用<code>errorhandler()</code>装饰器<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">from</span> flask <span class=\"keyword\">import</span> render_template</div><div class=\"line\"></div><div class=\"line\"><span class=\"meta\">@app.errorhandler(404)</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">page_not_found</span><span class=\"params\">(error)</span>:</span></div><div class=\"line\">    <span class=\"keyword\">return</span> render_template(<span class=\"string\">'page_not_found.html'</span>), <span class=\"number\">404</span></div></pre></td></tr></table></figure></p>\n<p>注意`render_template()调用之后的404，这告诉Flask，该页的错误代码是404。默认是200,也就是一切正常</p>\n<h6 id=\"关于响应\"><a href=\"#关于响应\" class=\"headerlink\" title=\"关于响应\"></a>关于响应</h6><p>视图函数的返回值会被自动转换为一个响应对象。如果返回值是一个字符串， 它被转换为该字符串为主体的、状态码为 200 OK<code>的 、 MIME 类型是</code>text/html 的响应对象。Flask 把返回值转换为响应对象的逻辑是这样：</p>\n<ol>\n<li>如果返回的是一个合法的响应对象，它会从视图直接返回。</li>\n<li>如果返回的是一个字符串，响应对象会用字符串数据和默认参数创建。</li>\n<li>如果返回的是一个元组，且元组中的元素可以提供额外的信息。这样的元组必须是 (response, status, headers) 的形式，且至少包含一个元素。 status 值会覆盖状态代码， headers 可以是一个列表或字典，作为额外的消息标头值。</li>\n<li>如果上述条件均不满足， Flask 会假设返回值是一个合法的 WSGI 应用程序，并转换为一个请求对象。<br>如果你想在视图里操纵上述步骤结果的响应对象，可以使用 make_response() 函数。</li>\n</ol>\n<p>譬如你有这样一个视图:<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">@app.errorhandler(404)</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">not_found</span><span class=\"params\">(error)</span>:</span></div><div class=\"line\">    <span class=\"keyword\">return</span> render_template(<span class=\"string\">'error.html'</span>), <span class=\"number\">404</span></div></pre></td></tr></table></figure></p>\n<p>只需要把返回值表达式传递给<code>make_response()</code>，获取结果对象并修改，然后再返回它:<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">@app.errorhandler(404)</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">not_found</span><span class=\"params\">(error)</span>:</span></div><div class=\"line\">    resp = make_response(render_template(<span class=\"string\">'error.html'</span>), <span class=\"number\">404</span>)</div><div class=\"line\">    resp.headers[<span class=\"string\">'X-Something'</span>] = <span class=\"string\">'A value'</span></div><div class=\"line\">    <span class=\"keyword\">return</span> resp</div></pre></td></tr></table></figure></p>\n<h6 id=\"会话\"><a href=\"#会话\" class=\"headerlink\" title=\"会话\"></a>会话</h6><p>除请求对象之后，还有一个<code>session</code>对象，它允许你在不同请求间存储特定用户的信息。他是在Cookies的基础上实现，并且对Cookies进行密钥签名。这意味着用户可以查看你Cookie的内容，但却不能修改它，除非用户知道签名的密钥。<br>要使用会话，需要设置一个密钥<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">from</span> flask <span class=\"keyword\">import</span> Flask, session, redirect, url_for, escape, request</div><div class=\"line\"></div><div class=\"line\">app = Flask(__name__)</div><div class=\"line\"></div><div class=\"line\"><span class=\"meta\">@app.route('/')</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">index</span><span class=\"params\">()</span>:</span></div><div class=\"line\">    <span class=\"keyword\">if</span> <span class=\"string\">'username'</span> <span class=\"keyword\">in</span> session:</div><div class=\"line\">        <span class=\"keyword\">return</span> <span class=\"string\">'Logged in as %s'</span> % escape(session[<span class=\"string\">'username'</span>])</div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"string\">'You are not logged in'</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"meta\">@app.route('/login', methods=['GET', 'POST'])</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">login</span><span class=\"params\">()</span>:</span></div><div class=\"line\">    <span class=\"keyword\">if</span> request.method == <span class=\"string\">'POST'</span>:</div><div class=\"line\">        session[<span class=\"string\">'username'</span>] = request.form[<span class=\"string\">'username'</span>]</div><div class=\"line\">        <span class=\"keyword\">return</span> redirect(url_for(<span class=\"string\">'index'</span>))</div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"string\">'''</span></div><div class=\"line\">        &lt;form action=\"\" method=\"post\"&gt;</div><div class=\"line\">            &lt;p&gt;&lt;input type=text name=username&gt;</div><div class=\"line\">            &lt;p&gt;&lt;input type=submit value=Login&gt;</div><div class=\"line\">        &lt;/form&gt;</div><div class=\"line\">    '''</div><div class=\"line\"></div><div class=\"line\"><span class=\"meta\">@app.route('/logout')</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">logout</span><span class=\"params\">()</span>:</span></div><div class=\"line\">    <span class=\"comment\"># remove the username from the session if it's there</span></div><div class=\"line\">    session.pop(<span class=\"string\">'username'</span>, <span class=\"keyword\">None</span>)</div><div class=\"line\">    <span class=\"keyword\">return</span> redirect(url_for(<span class=\"string\">'index'</span>))</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\"># set the secret key.  keep this really secret:</span></div><div class=\"line\">app.secret_key = <span class=\"string\">'A0Zr98j/3yX R~XHH!jmN]LWX/,?RT'</span></div></pre></td></tr></table></figure></p>\n<p>这里提到的<code>escape()</code>可以在模板引擎外做转义</p>\n<hr>\n<p>以上</p>\n","excerpt":"<p>学习python和flask中看过的资料和自己的实践总结<br><a href=\"http://flask.pocoo.org/\">Flask英文</a><br>以下内容来自<a href=\"http://docs.jinkan.org/docs/flask\">flask中文</a><br>","more":"</p>\n<h4 id=\"环境安装\"><a href=\"#环境安装\" class=\"headerlink\" title=\"环境安装\"></a>环境安装</h4><p>Flask依赖两个外部库：Werkzeug和Jinja2。Werkzeug是一个WSGI工具集、Jinja2负责渲染模板。首先需要python2.6或者更高的版本，python3.X安装方式可能有所不一致。</p>\n<h6 id=\"virtualenv\"><a href=\"#virtualenv\" class=\"headerlink\" title=\"virtualenv\"></a>virtualenv</h6><p>virtualenv 为每个不同项目提供一份 Python 安装。它并没有真正安装多个 Python 副本，但是它确实提供了一种巧妙的方式来让各项目环境保持独立。<br><code>sudo apt-get install python-virtualenv</code><br>virtualenv安装完成后，用IDE比如pycharm创建一个Flask的项目工程，并在其下创建一个venv文件夹<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ mkdir myproject</div><div class=\"line\">$ cd myproject</div><div class=\"line\">$ virtualenv venv</div><div class=\"line\">New python executable in venv/bin/python</div><div class=\"line\">Installing distribute............done.</div></pre></td></tr></table></figure></p>\n<p>然后激活相应的环境<br><code>$ . venv/bin/activate</code><br>然后激活virtualenv中的Flask<br><code>$ pip install Flask</code></p>\n<h4 id=\"项目配置\"><a href=\"#项目配置\" class=\"headerlink\" title=\"项目配置\"></a>项目配置</h4><p>在pycharm中，打开setting<br><img src=\"/image/python/Flask/pycharm_project_setting1.png\" alt=\"项目设置\"><br>在Project Interpreter中选择当前工程文件下的virtualenv<br>打开工程的Configuration<br><img src=\"/image/python/Flask/pycharm_project_setting2.png\" alt=\"项目设置\"><br>在python interpreter中选择当前工程文件下的virtualenv</p>\n<h4 id=\"项目说明\"><a href=\"#项目说明\" class=\"headerlink\" title=\"项目说明\"></a>项目说明</h4><h6 id=\"总述\"><a href=\"#总述\" class=\"headerlink\" title=\"总述\"></a>总述</h6><p>刚刚新建的工程看起来会是这样的<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">from</span> flask <span class=\"keyword\">import</span> Flask</div><div class=\"line\">app = Flask(__name__)</div><div class=\"line\"></div><div class=\"line\"><span class=\"meta\">@app.route('/')</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">hello_world</span><span class=\"params\">()</span>:</span></div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"string\">'Hello World!'</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">if</span> __name__ == <span class=\"string\">'__main__'</span>:</div><div class=\"line\">    app.run()</div></pre></td></tr></table></figure></p>\n<p>运行这段程序(文件名不要是 flask.py，这会和已有的文件冲突)，浏览器访问<code>127.0.0.1:5000</code>，然后就会看到熟悉的<code>hello world</code>.<br>那么，这段代码做了什么？</p>\n<ol>\n<li>首先，我们导入了 Flask 类。这个类的实例将会是我们的 WSGI 应用程序。<br>接下来，我们创建一个该类的实例，第一个参数是应用模块或者包的名称。 如果你使用单一的模块（如本例），你应该使用 <strong>name</strong> ，因为模块的名称将会因其作为单独应用启动还是作为模块导入而有不同（ 也即是 ‘<strong>main</strong>‘ 或实际的导入名）。这是必须的，这样 Flask 才知道到哪去找模板、静态文件等等。详情见 Flask 的文档。</li>\n<li>然后，我们使用 route() 装饰器告诉 Flask 什么样的URL 能触发我们的函数。<br>这个函数的名字也在生成 URL 时被特定的函数采用，这个函数返回我们想要显示在用户浏览器中的信息。</li>\n<li>最后我们用 run() 函数来让应用运行在本地服务器上。 其中 if <strong>name</strong> == ‘<strong>main</strong>‘: 确保服务器只会在该脚本被 Python 解释器直接执行的时候才会运行，而不是作为模块导入的时候。<br>欲关闭服务器，按 Ctrl+C。<br>你会发现它只能从自己的计算机上访问，网络中其他任何地方都不能访问，我们可以修改run()方法使该服务公开可用<br><code>app.run(host=&#39;0.0.0.0&#39;)</code><br>这样会让操作系统监听所有的公网IP<br>同样可以开启debug模式<br><code>app.debug = True;app.run()</code><br>或者<br><code>app.run(debug=True)</code> <h6 id=\"路由\"><a href=\"#路由\" class=\"headerlink\" title=\"路由\"></a>路由</h6>如上面的代码所示，route()装饰其吧一个函数绑定到对应的URL上<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">@app.route('/')</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">index</span><span class=\"params\">()</span>:</span></div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"string\">'Index Page'</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"meta\">@app.route('/hello')</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">hello</span><span class=\"params\">()</span>:</span></div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"string\">'Hello World'</span></div></pre></td></tr></table></figure>\n</li>\n</ol>\n<p>不仅如此，还可以构造含有动态部分的URL，也可以在一个函数上附着多个规则</p>\n<h6 id=\"变量规则\"><a href=\"#变量规则\" class=\"headerlink\" title=\"变量规则\"></a>变量规则</h6><p>要给 URL 添加变量部分，你可以把这些特殊的字段标记为 <variable_name> ， 这个部分将会作为命名参数传递到你的函数。规则可以用 <converter:variable_name> 指定一个可选的转换器。如下所示</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">@app.route('/user/&lt;username&gt;')</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">show_user_profile</span><span class=\"params\">(username)</span>:</span></div><div class=\"line\">    <span class=\"comment\"># show the user profile for that user</span></div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"string\">'User %s'</span> % username</div><div class=\"line\"></div><div class=\"line\"><span class=\"meta\">@app.route('/post/&lt;int:post_id&gt;')</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">show_post</span><span class=\"params\">(post_id)</span>:</span></div><div class=\"line\">    <span class=\"comment\"># show the post with the given id, the id is an integer</span></div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"string\">'Post %d'</span> % post_id</div></pre></td></tr></table></figure>\n<h6 id=\"HTTP方法\"><a href=\"#HTTP方法\" class=\"headerlink\" title=\"HTTP方法\"></a>HTTP方法</h6><p>HTTP有许多不同的访问URL方法。默认情况下，路由只回应GET请求，但是通过route()装饰器传递methods参数可以改变这个行为。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">@app.route('/login', methods=['GET', 'POST'])</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">login</span><span class=\"params\">()</span>:</span></div><div class=\"line\">    <span class=\"keyword\">if</span> request.method == <span class=\"string\">'POST'</span>:</div><div class=\"line\">        do_the_login()</div><div class=\"line\">    <span class=\"keyword\">else</span>:</div><div class=\"line\">        show_the_login_form()</div></pre></td></tr></table></figure>\n<h6 id=\"模板渲染\"><a href=\"#模板渲染\" class=\"headerlink\" title=\"模板渲染\"></a>模板渲染</h6><p>像javaweb一样，不会直接用servlet直接输出html代码，Flask可以使用render_template()方法来渲染模板，Flask配备Jinja2模板引擎<a href=\"http://docs.jinkan.org/docs/jinja2/\">Jinja2中文</a>，<a href=\"http://jinja.pocoo.org/\">Jinja2英文</a><br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">from</span> flask <span class=\"keyword\">import</span> render_template</div><div class=\"line\"></div><div class=\"line\"><span class=\"meta\">@app.route('/hello/')</span></div><div class=\"line\"><span class=\"meta\">@app.route('/hello/&lt;name&gt;')</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">hello</span><span class=\"params\">(name=None)</span>:</span></div><div class=\"line\">    <span class=\"keyword\">return</span> render_template(<span class=\"string\">'hello.html'</span>, name=name)</div></pre></td></tr></table></figure></p>\n<p>Flask 会在 templates 文件夹里寻找模板。所以，如果你的应用是个模块，这个文件夹应该与模块同级；如果它是一个包，那么这个文件夹作为包的子目录:<br>情况 1: 模块:<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">/application.py</div><div class=\"line\">/templates</div><div class=\"line\">    /hello.html</div></pre></td></tr></table></figure></p>\n<p>情况 2: 包:<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">/application</div><div class=\"line\">    /__init__.py</div><div class=\"line\">    /templates</div><div class=\"line\">        /hello.html</div></pre></td></tr></table></figure></p>\n<p>下面是<code>hello.html</code>文件内容<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;!doctype html&gt;</div><div class=\"line\">&lt;title&gt;Hello from Flask&lt;/title&gt;</div><div class=\"line\">&#123;% if name %&#125;</div><div class=\"line\">  &lt;h1&gt;Hello &#123;&#123; name &#125;&#125;!&lt;/h1&gt;</div><div class=\"line\">&#123;% else %&#125;</div><div class=\"line\">  &lt;h1&gt;Hello World!&lt;/h1&gt;</div><div class=\"line\">&#123;% endif %&#125;</div></pre></td></tr></table></figure></p>\n<h6 id=\"访问请求数据\"><a href=\"#访问请求数据\" class=\"headerlink\" title=\"访问请求数据\"></a>访问请求数据</h6><p>可以通过<code>request.form</code>属性来访问表单数据。<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">@app.route(\"/signin\", methods=[\"POST\"])</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">signin</span><span class=\"params\">()</span>:</span></div><div class=\"line\">    <span class=\"keyword\">print</span> request.args.get(<span class=\"string\">\"username\"</span>)</div><div class=\"line\">    username = request.form[<span class=\"string\">\"username\"</span>]</div><div class=\"line\">    <span class=\"keyword\">return</span> render_template(<span class=\"string\">'hello.html'</span>, name=username)</div></pre></td></tr></table></figure></p>\n<p>如果form表单中不存在所要获取的键，会抛出特殊的KeyError异常。</p>\n<h6 id=\"文件上传\"><a href=\"#文件上传\" class=\"headerlink\" title=\"文件上传\"></a>文件上传</h6><p>首先确保HTML表单中设置 <code>enctype=&quot;multipart/form-data&quot;</code>属性，否则浏览器根本不会发送文件。<br>已上传的文件存储在内存或是文件系统中一个临时的位置。可以通过请求对象的<code>file</code>属性访问它。每个上传的文件都会存储在这个字典里。同时它还有一个<code>save()</code>方法，这个方法允许把文件保额哦村到服务器的文件系统上。如果像知道上传的文件在客户端是什么名字，可以访问<code>filename</code>属性<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">from</span> flask <span class=\"keyword\">import</span> request</div><div class=\"line\"></div><div class=\"line\"><span class=\"meta\">@app.route('/upload', methods=['GET', 'POST'])</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">upload_file</span><span class=\"params\">()</span>:</span></div><div class=\"line\">    <span class=\"keyword\">if</span> request.method == <span class=\"string\">'POST'</span>:</div><div class=\"line\">        f = request.files[<span class=\"string\">'the_file'</span>]</div><div class=\"line\">        f.save(<span class=\"string\">'/var/www/uploads/uploaded_file.txt'</span>)</div></pre></td></tr></table></figure></p>\n<h6 id=\"Cookies\"><a href=\"#Cookies\" class=\"headerlink\" title=\"Cookies\"></a>Cookies</h6><p>可以通过<code>cookies</code>属性来访问Cookies，用响应对象的<code>set_cookie</code>方法来设置Cookies。请求对象的<code>cookies</code>属性是一个内容为客户端提交的所有Cookies的字典.<br>读取cookies：<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">from</span> flask <span class=\"keyword\">import</span> request</div><div class=\"line\"></div><div class=\"line\"><span class=\"meta\">@app.route('/')</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">index</span><span class=\"params\">()</span>:</span></div><div class=\"line\">    username = request.cookies.get(<span class=\"string\">'username'</span>)</div><div class=\"line\">    <span class=\"comment\"># use cookies.get(key) instead of cookies[key] to not get a</span></div><div class=\"line\">    <span class=\"comment\"># KeyError if the cookie is missing.</span></div></pre></td></tr></table></figure></p>\n<p>存储cookie：<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">from</span> flask <span class=\"keyword\">import</span> make_response</div><div class=\"line\"></div><div class=\"line\"><span class=\"meta\">@app.route('/')</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">index</span><span class=\"params\">()</span>:</span></div><div class=\"line\">    resp = make_response(render_template(...))</div><div class=\"line\">    resp.set_cookie(<span class=\"string\">'username'</span>, <span class=\"string\">'the username'</span>)</div><div class=\"line\">    <span class=\"keyword\">return</span> resp</div></pre></td></tr></table></figure></p>\n<p>需要注意的是，Cookies是设置在响应对象上的。由于通常视图函数只是返回字符串，之后Flask将字符串转换为响应对象。</p>\n<h6 id=\"重定向和错误\"><a href=\"#重定向和错误\" class=\"headerlink\" title=\"重定向和错误\"></a>重定向和错误</h6><p>可以使用<code>redirect()</code>函数把用户重定向到其他地方。用<code>abort()</code>函数放弃请求并返回错误代码，如下：<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">from</span> flask <span class=\"keyword\">import</span> abort, redirect, url_for</div><div class=\"line\"></div><div class=\"line\"><span class=\"meta\">@app.route('/')</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">index</span><span class=\"params\">()</span>:</span></div><div class=\"line\">    <span class=\"keyword\">return</span> redirect(url_for(<span class=\"string\">'login'</span>))</div><div class=\"line\"></div><div class=\"line\"><span class=\"meta\">@app.route('/login')</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">login</span><span class=\"params\">()</span>:</span></div><div class=\"line\">    abort(<span class=\"number\">401</span>)</div><div class=\"line\">    this_is_never_executed()</div></pre></td></tr></table></figure></p>\n<p>这是一个完全没有任何意义的代码，因为用户会从主页重定向到一个不能访问的页面。默认情况下，错误代码会显示一个黑白的错误页面，如果要定制错误页面，可以使用<code>errorhandler()</code>装饰器<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">from</span> flask <span class=\"keyword\">import</span> render_template</div><div class=\"line\"></div><div class=\"line\"><span class=\"meta\">@app.errorhandler(404)</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">page_not_found</span><span class=\"params\">(error)</span>:</span></div><div class=\"line\">    <span class=\"keyword\">return</span> render_template(<span class=\"string\">'page_not_found.html'</span>), <span class=\"number\">404</span></div></pre></td></tr></table></figure></p>\n<p>注意`render_template()调用之后的404，这告诉Flask，该页的错误代码是404。默认是200,也就是一切正常</p>\n<h6 id=\"关于响应\"><a href=\"#关于响应\" class=\"headerlink\" title=\"关于响应\"></a>关于响应</h6><p>视图函数的返回值会被自动转换为一个响应对象。如果返回值是一个字符串， 它被转换为该字符串为主体的、状态码为 200 OK<code>的 、 MIME 类型是</code>text/html 的响应对象。Flask 把返回值转换为响应对象的逻辑是这样：</p>\n<ol>\n<li>如果返回的是一个合法的响应对象，它会从视图直接返回。</li>\n<li>如果返回的是一个字符串，响应对象会用字符串数据和默认参数创建。</li>\n<li>如果返回的是一个元组，且元组中的元素可以提供额外的信息。这样的元组必须是 (response, status, headers) 的形式，且至少包含一个元素。 status 值会覆盖状态代码， headers 可以是一个列表或字典，作为额外的消息标头值。</li>\n<li>如果上述条件均不满足， Flask 会假设返回值是一个合法的 WSGI 应用程序，并转换为一个请求对象。<br>如果你想在视图里操纵上述步骤结果的响应对象，可以使用 make_response() 函数。</li>\n</ol>\n<p>譬如你有这样一个视图:<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">@app.errorhandler(404)</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">not_found</span><span class=\"params\">(error)</span>:</span></div><div class=\"line\">    <span class=\"keyword\">return</span> render_template(<span class=\"string\">'error.html'</span>), <span class=\"number\">404</span></div></pre></td></tr></table></figure></p>\n<p>只需要把返回值表达式传递给<code>make_response()</code>，获取结果对象并修改，然后再返回它:<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">@app.errorhandler(404)</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">not_found</span><span class=\"params\">(error)</span>:</span></div><div class=\"line\">    resp = make_response(render_template(<span class=\"string\">'error.html'</span>), <span class=\"number\">404</span>)</div><div class=\"line\">    resp.headers[<span class=\"string\">'X-Something'</span>] = <span class=\"string\">'A value'</span></div><div class=\"line\">    <span class=\"keyword\">return</span> resp</div></pre></td></tr></table></figure></p>\n<h6 id=\"会话\"><a href=\"#会话\" class=\"headerlink\" title=\"会话\"></a>会话</h6><p>除请求对象之后，还有一个<code>session</code>对象，它允许你在不同请求间存储特定用户的信息。他是在Cookies的基础上实现，并且对Cookies进行密钥签名。这意味着用户可以查看你Cookie的内容，但却不能修改它，除非用户知道签名的密钥。<br>要使用会话，需要设置一个密钥<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">from</span> flask <span class=\"keyword\">import</span> Flask, session, redirect, url_for, escape, request</div><div class=\"line\"></div><div class=\"line\">app = Flask(__name__)</div><div class=\"line\"></div><div class=\"line\"><span class=\"meta\">@app.route('/')</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">index</span><span class=\"params\">()</span>:</span></div><div class=\"line\">    <span class=\"keyword\">if</span> <span class=\"string\">'username'</span> <span class=\"keyword\">in</span> session:</div><div class=\"line\">        <span class=\"keyword\">return</span> <span class=\"string\">'Logged in as %s'</span> % escape(session[<span class=\"string\">'username'</span>])</div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"string\">'You are not logged in'</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"meta\">@app.route('/login', methods=['GET', 'POST'])</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">login</span><span class=\"params\">()</span>:</span></div><div class=\"line\">    <span class=\"keyword\">if</span> request.method == <span class=\"string\">'POST'</span>:</div><div class=\"line\">        session[<span class=\"string\">'username'</span>] = request.form[<span class=\"string\">'username'</span>]</div><div class=\"line\">        <span class=\"keyword\">return</span> redirect(url_for(<span class=\"string\">'index'</span>))</div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"string\">'''</div><div class=\"line\">        &lt;form action=\"\" method=\"post\"&gt;</div><div class=\"line\">            &lt;p&gt;&lt;input type=text name=username&gt;</div><div class=\"line\">            &lt;p&gt;&lt;input type=submit value=Login&gt;</div><div class=\"line\">        &lt;/form&gt;</div><div class=\"line\">    '''</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"meta\">@app.route('/logout')</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">logout</span><span class=\"params\">()</span>:</span></div><div class=\"line\">    <span class=\"comment\"># remove the username from the session if it's there</span></div><div class=\"line\">    session.pop(<span class=\"string\">'username'</span>, <span class=\"keyword\">None</span>)</div><div class=\"line\">    <span class=\"keyword\">return</span> redirect(url_for(<span class=\"string\">'index'</span>))</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\"># set the secret key.  keep this really secret:</span></div><div class=\"line\">app.secret_key = <span class=\"string\">'A0Zr98j/3yX R~XHH!jmN]LWX/,?RT'</span></div></pre></td></tr></table></figure></p>\n<p>这里提到的<code>escape()</code>可以在模板引擎外做转义</p>\n<hr>\n<p>以上</p>"},{"title":"git工具","date":"2017-05-10T08:51:11.000Z","keywords":"git工具,git","_content":"公司代码版本管理系统由svn迁到了git，对于AndroidStudio来讲，内置的GUI工具足以应付日常开发，但在请求失败的情况下，对失败原因的提示不够清晰。个人习惯上用命令行，但是对于命令行中比较两个文件差异以及合并来说，个人还是不大习惯，于是就配置成了使用其他软件进行合并。可以使用`$ git difftool --tool-help`查看对比文件差异支持的软件，用`$ git mergetool --tool-help`查看合并代码支持的软件，个人只试过两种:`codecompare`和`beyond compare`。不习惯`bc`的界面，最后决定使用`codecompare`。\n<!--more-->\n#### 配置codecompare为diff和merge工具\n1. 安装codecompare软件\n2. 配置codecompare为diff工具\n\t`git config --global diff.tool codecompare`\n3. 配置codecompare的路径`path 后面是软件的安装路径`\n\t`git config --global difftool.codecompare.path D://CodeCompare//CodeCompare.exe`\n4. 配置codecompare为merge工具\n\t`git config --global merge.tool codecompare`\n5. 配置codecompare的路径`path 后面是软件的安装路径`\n\t`git config --global mergetool.codecompare.path D://CodeCompare//CodeMerge.exe`\n\t\n在比较本地修改后的文件与本地仓库中的文件差异时，执行 `git difftool <filename>`即可。\n![codecompare实例](/image/git/git_diff_tool_codecompare.png)\n当更新代码自动合并失败的时候，执行 `git mergetool`即可。\n![codecompare实例](/image/git/git_merge_tool_codecompare.png)\n\n#### 配置beyond compare为diff和merge工具\n配置方式和codecompare一样，需要注意的是：\n1. 如果`beyond compare`软件是4.X\n  1) 如果git的版本低于2.2.0,配置的时候用`bc3`\n  2) 如果git的版本大于等于2.2.0,配置的时候用`bc`\n这个如何配置<a href=\"http://www.scootersoftware.com/support.php?zz=kb_vcs#gitwindows\">官网</a>有说明，就不再赘述\n在比较本地修改后的文件与本地仓库中的文件差异时，执行 `git difftool <filename>`即可。\n![bc实例](/image/git/git_diff_tool_bc.png)\n当更新代码自动合并失败的时候，执行 `git mergetool`即可。\n![bc实例](/image/git/git_merge_tool_bc.png)\n有人不习惯git自动merge成功后填写merge信息的编辑器，说明一下，默认的编辑器是`vim`,不习惯用的话可以使用 `git config --global core.edit <软件路径>`来修改。需要注意的是，git命令行似乎读不到windows系统的path，需要写软件的绝对路径。\n----\n以上","source":"_posts/git工具.md","raw":"---\ntitle: git工具\ndate: 2017-05-10 16:51:11\ntags: [git]\nkeywords: git工具,git\n---\n公司代码版本管理系统由svn迁到了git，对于AndroidStudio来讲，内置的GUI工具足以应付日常开发，但在请求失败的情况下，对失败原因的提示不够清晰。个人习惯上用命令行，但是对于命令行中比较两个文件差异以及合并来说，个人还是不大习惯，于是就配置成了使用其他软件进行合并。可以使用`$ git difftool --tool-help`查看对比文件差异支持的软件，用`$ git mergetool --tool-help`查看合并代码支持的软件，个人只试过两种:`codecompare`和`beyond compare`。不习惯`bc`的界面，最后决定使用`codecompare`。\n<!--more-->\n#### 配置codecompare为diff和merge工具\n1. 安装codecompare软件\n2. 配置codecompare为diff工具\n\t`git config --global diff.tool codecompare`\n3. 配置codecompare的路径`path 后面是软件的安装路径`\n\t`git config --global difftool.codecompare.path D://CodeCompare//CodeCompare.exe`\n4. 配置codecompare为merge工具\n\t`git config --global merge.tool codecompare`\n5. 配置codecompare的路径`path 后面是软件的安装路径`\n\t`git config --global mergetool.codecompare.path D://CodeCompare//CodeMerge.exe`\n\t\n在比较本地修改后的文件与本地仓库中的文件差异时，执行 `git difftool <filename>`即可。\n![codecompare实例](/image/git/git_diff_tool_codecompare.png)\n当更新代码自动合并失败的时候，执行 `git mergetool`即可。\n![codecompare实例](/image/git/git_merge_tool_codecompare.png)\n\n#### 配置beyond compare为diff和merge工具\n配置方式和codecompare一样，需要注意的是：\n1. 如果`beyond compare`软件是4.X\n  1) 如果git的版本低于2.2.0,配置的时候用`bc3`\n  2) 如果git的版本大于等于2.2.0,配置的时候用`bc`\n这个如何配置<a href=\"http://www.scootersoftware.com/support.php?zz=kb_vcs#gitwindows\">官网</a>有说明，就不再赘述\n在比较本地修改后的文件与本地仓库中的文件差异时，执行 `git difftool <filename>`即可。\n![bc实例](/image/git/git_diff_tool_bc.png)\n当更新代码自动合并失败的时候，执行 `git mergetool`即可。\n![bc实例](/image/git/git_merge_tool_bc.png)\n有人不习惯git自动merge成功后填写merge信息的编辑器，说明一下，默认的编辑器是`vim`,不习惯用的话可以使用 `git config --global core.edit <软件路径>`来修改。需要注意的是，git命令行似乎读不到windows系统的path，需要写软件的绝对路径。\n----\n以上","slug":"git工具","published":1,"updated":"2018-08-04T04:53:46.511Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjl3vbtrh002jisdga4hao0pq","content":"<p>公司代码版本管理系统由svn迁到了git，对于AndroidStudio来讲，内置的GUI工具足以应付日常开发，但在请求失败的情况下，对失败原因的提示不够清晰。个人习惯上用命令行，但是对于命令行中比较两个文件差异以及合并来说，个人还是不大习惯，于是就配置成了使用其他软件进行合并。可以使用<code>$ git difftool --tool-help</code>查看对比文件差异支持的软件，用<code>$ git mergetool --tool-help</code>查看合并代码支持的软件，个人只试过两种:<code>codecompare</code>和<code>beyond compare</code>。不习惯<code>bc</code>的界面，最后决定使用<code>codecompare</code>。<br><a id=\"more\"></a></p>\n<h4 id=\"配置codecompare为diff和merge工具\"><a href=\"#配置codecompare为diff和merge工具\" class=\"headerlink\" title=\"配置codecompare为diff和merge工具\"></a>配置codecompare为diff和merge工具</h4><ol>\n<li>安装codecompare软件</li>\n<li>配置codecompare为diff工具<br> <code>git config --global diff.tool codecompare</code></li>\n<li>配置codecompare的路径<code>path 后面是软件的安装路径</code><br> <code>git config --global difftool.codecompare.path D://CodeCompare//CodeCompare.exe</code></li>\n<li>配置codecompare为merge工具<br> <code>git config --global merge.tool codecompare</code></li>\n<li>配置codecompare的路径<code>path 后面是软件的安装路径</code><br> <code>git config --global mergetool.codecompare.path D://CodeCompare//CodeMerge.exe</code></li>\n</ol>\n<p>在比较本地修改后的文件与本地仓库中的文件差异时，执行 <code>git difftool &lt;filename&gt;</code>即可。<br><img src=\"/image/git/git_diff_tool_codecompare.png\" alt=\"codecompare实例\"><br>当更新代码自动合并失败的时候，执行 <code>git mergetool</code>即可。<br><img src=\"/image/git/git_merge_tool_codecompare.png\" alt=\"codecompare实例\"></p>\n<h4 id=\"配置beyond-compare为diff和merge工具\"><a href=\"#配置beyond-compare为diff和merge工具\" class=\"headerlink\" title=\"配置beyond compare为diff和merge工具\"></a>配置beyond compare为diff和merge工具</h4><p>配置方式和codecompare一样，需要注意的是：</p>\n<ol>\n<li>如果<code>beyond compare</code>软件是4.X<br>1) 如果git的版本低于2.2.0,配置的时候用<code>bc3</code><br>2) 如果git的版本大于等于2.2.0,配置的时候用<code>bc</code><br>这个如何配置<a href=\"http://www.scootersoftware.com/support.php?zz=kb_vcs#gitwindows\" target=\"_blank\" rel=\"external\">官网</a>有说明，就不再赘述<br>在比较本地修改后的文件与本地仓库中的文件差异时，执行 <code>git difftool &lt;filename&gt;</code>即可。<br><img src=\"/image/git/git_diff_tool_bc.png\" alt=\"bc实例\"><br>当更新代码自动合并失败的时候，执行 <code>git mergetool</code>即可。<br><img src=\"/image/git/git_merge_tool_bc.png\" alt=\"bc实例\"><br>有人不习惯git自动merge成功后填写merge信息的编辑器，说明一下，默认的编辑器是<code>vim</code>,不习惯用的话可以使用 <code>git config --global core.edit &lt;软件路径&gt;</code>来修改。需要注意的是，git命令行似乎读不到windows系统的path，需要写软件的绝对路径。</li>\n</ol>\n<hr>\n<p>以上</p>\n","excerpt":"<p>公司代码版本管理系统由svn迁到了git，对于AndroidStudio来讲，内置的GUI工具足以应付日常开发，但在请求失败的情况下，对失败原因的提示不够清晰。个人习惯上用命令行，但是对于命令行中比较两个文件差异以及合并来说，个人还是不大习惯，于是就配置成了使用其他软件进行合并。可以使用<code>$ git difftool --tool-help</code>查看对比文件差异支持的软件，用<code>$ git mergetool --tool-help</code>查看合并代码支持的软件，个人只试过两种:<code>codecompare</code>和<code>beyond compare</code>。不习惯<code>bc</code>的界面，最后决定使用<code>codecompare</code>。<br>","more":"</p>\n<h4 id=\"配置codecompare为diff和merge工具\"><a href=\"#配置codecompare为diff和merge工具\" class=\"headerlink\" title=\"配置codecompare为diff和merge工具\"></a>配置codecompare为diff和merge工具</h4><ol>\n<li>安装codecompare软件</li>\n<li>配置codecompare为diff工具<br> <code>git config --global diff.tool codecompare</code></li>\n<li>配置codecompare的路径<code>path 后面是软件的安装路径</code><br> <code>git config --global difftool.codecompare.path D://CodeCompare//CodeCompare.exe</code></li>\n<li>配置codecompare为merge工具<br> <code>git config --global merge.tool codecompare</code></li>\n<li>配置codecompare的路径<code>path 后面是软件的安装路径</code><br> <code>git config --global mergetool.codecompare.path D://CodeCompare//CodeMerge.exe</code></li>\n</ol>\n<p>在比较本地修改后的文件与本地仓库中的文件差异时，执行 <code>git difftool &lt;filename&gt;</code>即可。<br><img src=\"/image/git/git_diff_tool_codecompare.png\" alt=\"codecompare实例\"><br>当更新代码自动合并失败的时候，执行 <code>git mergetool</code>即可。<br><img src=\"/image/git/git_merge_tool_codecompare.png\" alt=\"codecompare实例\"></p>\n<h4 id=\"配置beyond-compare为diff和merge工具\"><a href=\"#配置beyond-compare为diff和merge工具\" class=\"headerlink\" title=\"配置beyond compare为diff和merge工具\"></a>配置beyond compare为diff和merge工具</h4><p>配置方式和codecompare一样，需要注意的是：</p>\n<ol>\n<li>如果<code>beyond compare</code>软件是4.X<br>1) 如果git的版本低于2.2.0,配置的时候用<code>bc3</code><br>2) 如果git的版本大于等于2.2.0,配置的时候用<code>bc</code><br>这个如何配置<a href=\"http://www.scootersoftware.com/support.php?zz=kb_vcs#gitwindows\">官网</a>有说明，就不再赘述<br>在比较本地修改后的文件与本地仓库中的文件差异时，执行 <code>git difftool &lt;filename&gt;</code>即可。<br><img src=\"/image/git/git_diff_tool_bc.png\" alt=\"bc实例\"><br>当更新代码自动合并失败的时候，执行 <code>git mergetool</code>即可。<br><img src=\"/image/git/git_merge_tool_bc.png\" alt=\"bc实例\"><br>有人不习惯git自动merge成功后填写merge信息的编辑器，说明一下，默认的编辑器是<code>vim</code>,不习惯用的话可以使用 <code>git config --global core.edit &lt;软件路径&gt;</code>来修改。需要注意的是，git命令行似乎读不到windows系统的path，需要写软件的绝对路径。</li>\n</ol>\n<hr>\n<p>以上</p>"},{"title":"hexo+gitpage搭建自己的博客(二)","date":"2016-10-25T13:11:53.000Z","keywords":"hexo,gitpage,blog","_content":"\n之前我们已经安装好了`hexo`，接下来就是初始化了。\n```shell\n    hexo init <dir>\n    cd <dir>\n    npm install\n```\n<!-- more -->\n![hexo_install](/image/hexo/hexo_init.png )\n![hexo_install](/image/hexo/npm_install.png)\n现在hexo就安装完成了，在存放hexo的文件夹目录下执行 `hexo s`，就可以启动hexo的服务，启动之后有提示，在浏览器中输入`127.0.0.1:4000`就可以看到最初的效果了，如下\n![hello_world](/image/hexo/hexo_hello.png)\n***\n　　对了，还要发布到github。前提准备是在上一篇中已经创建好了github的仓库。接下来在存放hexo资源的文件夹下(以下用 heox_blog这个文件夹代替)执行\n`npm install hexo-deployer-git --save`\n修改hexo_blog文件夹下的`_config.yml`文件\n在末尾添加\n```shell\ndeploy:\n  type: git\n  repository: git@github.com:your name/your name.github.io.git\n  branch: master\n```\n注意，type，repository，branch冒号后面都有一个空格。保存后执行\n```hexo\n    hexo clean\n    hexo g\n    hexo d\n```\n就可以将写好的博客部署到github上了。（部署到github时建议按照顺序执行以上命令）\n***\n```hexo\nhexo generate == hexo g    -->将md文件解析成静态的html文件\nhexo deploy == hexo d      --> 将文件部署到github\nhexo server == hexo s      --> 启动本地hexo服务\nhexo clean\t\t\t\t   --> 清除缓存\nhexo new \"title\" \t\t\t--> 创建新的文章，文件在`hexo_blog/source/_posts`文件夹下\n```\n***\n以上\n","source":"_posts/hexo-gitpage搭建自己的博客-二.md","raw":"---\ntitle: hexo+gitpage搭建自己的博客(二)\ndate: 2016-10-25 21:11:53\ntags: [hexo,gitpage,blog]\nkeywords: hexo,gitpage,blog\n---\n\n之前我们已经安装好了`hexo`，接下来就是初始化了。\n```shell\n    hexo init <dir>\n    cd <dir>\n    npm install\n```\n<!-- more -->\n![hexo_install](/image/hexo/hexo_init.png )\n![hexo_install](/image/hexo/npm_install.png)\n现在hexo就安装完成了，在存放hexo的文件夹目录下执行 `hexo s`，就可以启动hexo的服务，启动之后有提示，在浏览器中输入`127.0.0.1:4000`就可以看到最初的效果了，如下\n![hello_world](/image/hexo/hexo_hello.png)\n***\n　　对了，还要发布到github。前提准备是在上一篇中已经创建好了github的仓库。接下来在存放hexo资源的文件夹下(以下用 heox_blog这个文件夹代替)执行\n`npm install hexo-deployer-git --save`\n修改hexo_blog文件夹下的`_config.yml`文件\n在末尾添加\n```shell\ndeploy:\n  type: git\n  repository: git@github.com:your name/your name.github.io.git\n  branch: master\n```\n注意，type，repository，branch冒号后面都有一个空格。保存后执行\n```hexo\n    hexo clean\n    hexo g\n    hexo d\n```\n就可以将写好的博客部署到github上了。（部署到github时建议按照顺序执行以上命令）\n***\n```hexo\nhexo generate == hexo g    -->将md文件解析成静态的html文件\nhexo deploy == hexo d      --> 将文件部署到github\nhexo server == hexo s      --> 启动本地hexo服务\nhexo clean\t\t\t\t   --> 清除缓存\nhexo new \"title\" \t\t\t--> 创建新的文章，文件在`hexo_blog/source/_posts`文件夹下\n```\n***\n以上\n","slug":"hexo-gitpage搭建自己的博客-二","published":1,"updated":"2018-08-04T04:54:10.433Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjl3vbtrh002lisdglm9m7t65","content":"<p>之前我们已经安装好了<code>hexo</code>，接下来就是初始化了。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">hexo init &lt;dir&gt;</div><div class=\"line\">cd &lt;dir&gt;</div><div class=\"line\">npm install</div></pre></td></tr></table></figure></p>\n<a id=\"more\"></a>\n<p><img src=\"/image/hexo/hexo_init.png\" alt=\"hexo_install\"><br><img src=\"/image/hexo/npm_install.png\" alt=\"hexo_install\"><br>现在hexo就安装完成了，在存放hexo的文件夹目录下执行 <code>hexo s</code>，就可以启动hexo的服务，启动之后有提示，在浏览器中输入<code>127.0.0.1:4000</code>就可以看到最初的效果了，如下<br><img src=\"/image/hexo/hexo_hello.png\" alt=\"hello_world\"></p>\n<hr>\n<p>　　对了，还要发布到github。前提准备是在上一篇中已经创建好了github的仓库。接下来在存放hexo资源的文件夹下(以下用 heox_blog这个文件夹代替)执行<br><code>npm install hexo-deployer-git --save</code><br>修改hexo_blog文件夹下的<code>_config.yml</code>文件<br>在末尾添加<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">deploy:</div><div class=\"line\">  type: git</div><div class=\"line\">  repository: git@github.com:your name/your name.github.io.git</div><div class=\"line\">  branch: master</div></pre></td></tr></table></figure></p>\n<p>注意，type，repository，branch冒号后面都有一个空格。保存后执行<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">hexo clean</div><div class=\"line\">hexo g</div><div class=\"line\">hexo d</div></pre></td></tr></table></figure></p>\n<p>就可以将写好的博客部署到github上了。（部署到github时建议按照顺序执行以上命令）</p>\n<hr>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">hexo generate == hexo g    --&gt;将md文件解析成静态的html文件</div><div class=\"line\">hexo deploy == hexo d      --&gt; 将文件部署到github</div><div class=\"line\">hexo server == hexo s      --&gt; 启动本地hexo服务</div><div class=\"line\">hexo clean\t\t\t\t   --&gt; 清除缓存</div><div class=\"line\">hexo new &quot;title&quot; \t\t\t--&gt; 创建新的文章，文件在`hexo_blog/source/_posts`文件夹下</div></pre></td></tr></table></figure>\n<hr>\n<p>以上</p>\n","excerpt":"<p>之前我们已经安装好了<code>hexo</code>，接下来就是初始化了。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">hexo init &lt;dir&gt;</div><div class=\"line\">cd &lt;dir&gt;</div><div class=\"line\">npm install</div></pre></td></tr></table></figure></p>","more":"<p><img src=\"/image/hexo/hexo_init.png\" alt=\"hexo_install\"><br><img src=\"/image/hexo/npm_install.png\" alt=\"hexo_install\"><br>现在hexo就安装完成了，在存放hexo的文件夹目录下执行 <code>hexo s</code>，就可以启动hexo的服务，启动之后有提示，在浏览器中输入<code>127.0.0.1:4000</code>就可以看到最初的效果了，如下<br><img src=\"/image/hexo/hexo_hello.png\" alt=\"hello_world\"></p>\n<hr>\n<p>　　对了，还要发布到github。前提准备是在上一篇中已经创建好了github的仓库。接下来在存放hexo资源的文件夹下(以下用 heox_blog这个文件夹代替)执行<br><code>npm install hexo-deployer-git --save</code><br>修改hexo_blog文件夹下的<code>_config.yml</code>文件<br>在末尾添加<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">deploy:</div><div class=\"line\">  type: git</div><div class=\"line\">  repository: git@github.com:your name/your name.github.io.git</div><div class=\"line\">  branch: master</div></pre></td></tr></table></figure></p>\n<p>注意，type，repository，branch冒号后面都有一个空格。保存后执行<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">hexo clean</div><div class=\"line\">hexo g</div><div class=\"line\">hexo d</div></pre></td></tr></table></figure></p>\n<p>就可以将写好的博客部署到github上了。（部署到github时建议按照顺序执行以上命令）</p>\n<hr>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">hexo generate == hexo g    --&gt;将md文件解析成静态的html文件</div><div class=\"line\">hexo deploy == hexo d      --&gt; 将文件部署到github</div><div class=\"line\">hexo server == hexo s      --&gt; 启动本地hexo服务</div><div class=\"line\">hexo clean\t\t\t\t   --&gt; 清除缓存</div><div class=\"line\">hexo new &quot;title&quot; \t\t\t--&gt; 创建新的文章，文件在`hexo_blog/source/_posts`文件夹下</div></pre></td></tr></table></figure>\n<hr>\n<p>以上</p>"},{"title":"hexo+gitpage搭建自己的博客(一)","date":"2016-10-20T16:04:26.000Z","keywords":"hexo,gitpage,blog","_content":"**不说环境直接写配置的行为都是耍流氓**\n按照惯例,先说自己的环境:`ubunu`,然后就没有然后了.<hr>\n<!-- more -->\n　　`hexo`类似`wordpress`的博客框架,`gitpage`是`github`的一个服务,请原谅我这个不大准确的表达,事实上真的差不多.\n安装`hexo`需要安装`nodejs`,使用`gitpage`需要`git`,至于如何安装`git`,在原来的csdn博客上有,[点击这里](http://blog.csdn.net/huangyuan_xuan/article/details/49125597) http://blog.csdn.net/huangyuan_xuan/article/details/49125597.\n之后需要在自己的github上创建一个仓库,名称结构如下:`username.github.io`,例如我的github主页是`https://github.com/huangyuanlove`,那么我的`gitpage`就是`huangyuanlove.github.io`.\n到这里,默认大家的gitpage和git已经配置好了,包括sshkey之类的东西.\n***\n　　我安装`node`是用`nvm`(node version manager)安装的,然后使用`node`中的`npm`(node package manager)安装hexo.windows下安装请转[这里](https://github.com/coreybutler/nvm-windows) https://github.com/coreybutler/nvm-windows\n首先安装`nvm`:\n> `wget -qO- https://raw.github.com/creationix/nvm/master/install.sh | sh  `\n\n![安装nvm](/image/hexo/hexo_install_nvm.png  \"安装nvm图片\")\n安装时间长短视网速而定,我安装了大概十多分钟,然后重启一下终端.\n然后使用 `nvm ls-remote`查看一下有哪些本版可以安装,我当时安装的最新版是`6.6.0`,现在不知道是哪一版,如b下\n![nvm ls-remote](/image/hexo/nvm_ls-remote.png)\n找一个合适的版本使用如下命令安装\n`nvm install version`,例如 `nvm install 6.6.0`\n![nvm ls-remote](/image/hexo/nvm_install_6.6.0.png),安装时间还是视网速而定,我也忘了装了多长时间了.\n安装完成之后是这样的\n![nvm_install_down](/image/hexo/nvm_install_down.png)\n之后`npm install -g hexo`安装`hexo`,`-g`参数是全局安装\n![npm_install_hexo](/image/hexo/npm_install_hexo.png)\n安装完成之后使用`hexo -v`查看hexo的版本号\n![hexo-v](/image/hexo/hexo-v.png)\n到此`hexo`安装完成,接下来就是初始化,进行配置了.下一篇再说吧,睡觉了.\n***\n以上.\n","source":"_posts/hexo-gitpage搭建自己的博客-一.md","raw":"---\ntitle: hexo+gitpage搭建自己的博客(一)\ndate: 2016-10-21 00:04:26\ntags: [hexo,gitpage,blog]\nkeywords: hexo,gitpage,blog\n---\n**不说环境直接写配置的行为都是耍流氓**\n按照惯例,先说自己的环境:`ubunu`,然后就没有然后了.<hr>\n<!-- more -->\n　　`hexo`类似`wordpress`的博客框架,`gitpage`是`github`的一个服务,请原谅我这个不大准确的表达,事实上真的差不多.\n安装`hexo`需要安装`nodejs`,使用`gitpage`需要`git`,至于如何安装`git`,在原来的csdn博客上有,[点击这里](http://blog.csdn.net/huangyuan_xuan/article/details/49125597) http://blog.csdn.net/huangyuan_xuan/article/details/49125597.\n之后需要在自己的github上创建一个仓库,名称结构如下:`username.github.io`,例如我的github主页是`https://github.com/huangyuanlove`,那么我的`gitpage`就是`huangyuanlove.github.io`.\n到这里,默认大家的gitpage和git已经配置好了,包括sshkey之类的东西.\n***\n　　我安装`node`是用`nvm`(node version manager)安装的,然后使用`node`中的`npm`(node package manager)安装hexo.windows下安装请转[这里](https://github.com/coreybutler/nvm-windows) https://github.com/coreybutler/nvm-windows\n首先安装`nvm`:\n> `wget -qO- https://raw.github.com/creationix/nvm/master/install.sh | sh  `\n\n![安装nvm](/image/hexo/hexo_install_nvm.png  \"安装nvm图片\")\n安装时间长短视网速而定,我安装了大概十多分钟,然后重启一下终端.\n然后使用 `nvm ls-remote`查看一下有哪些本版可以安装,我当时安装的最新版是`6.6.0`,现在不知道是哪一版,如b下\n![nvm ls-remote](/image/hexo/nvm_ls-remote.png)\n找一个合适的版本使用如下命令安装\n`nvm install version`,例如 `nvm install 6.6.0`\n![nvm ls-remote](/image/hexo/nvm_install_6.6.0.png),安装时间还是视网速而定,我也忘了装了多长时间了.\n安装完成之后是这样的\n![nvm_install_down](/image/hexo/nvm_install_down.png)\n之后`npm install -g hexo`安装`hexo`,`-g`参数是全局安装\n![npm_install_hexo](/image/hexo/npm_install_hexo.png)\n安装完成之后使用`hexo -v`查看hexo的版本号\n![hexo-v](/image/hexo/hexo-v.png)\n到此`hexo`安装完成,接下来就是初始化,进行配置了.下一篇再说吧,睡觉了.\n***\n以上.\n","slug":"hexo-gitpage搭建自己的博客-一","published":1,"updated":"2018-08-04T04:53:57.069Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjl3vbtri002oisdg1py23koz","content":"<p><strong>不说环境直接写配置的行为都是耍流氓</strong><br>按照惯例,先说自己的环境:<code>ubunu</code>,然后就没有然后了.<hr><br><a id=\"more\"></a><br>　　<code>hexo</code>类似<code>wordpress</code>的博客框架,<code>gitpage</code>是<code>github</code>的一个服务,请原谅我这个不大准确的表达,事实上真的差不多.<br>安装<code>hexo</code>需要安装<code>nodejs</code>,使用<code>gitpage</code>需要<code>git</code>,至于如何安装<code>git</code>,在原来的csdn博客上有,<a href=\"http://blog.csdn.net/huangyuan_xuan/article/details/49125597\" target=\"_blank\" rel=\"external\">点击这里</a> <a href=\"http://blog.csdn.net/huangyuan_xuan/article/details/49125597\" target=\"_blank\" rel=\"external\">http://blog.csdn.net/huangyuan_xuan/article/details/49125597</a>.<br>之后需要在自己的github上创建一个仓库,名称结构如下:<code>username.github.io</code>,例如我的github主页是<code>https://github.com/huangyuanlove</code>,那么我的<code>gitpage</code>就是<code>huangyuanlove.github.io</code>.<br>到这里,默认大家的gitpage和git已经配置好了,包括sshkey之类的东西.</p>\n<hr>\n<p>　　我安装<code>node</code>是用<code>nvm</code>(node version manager)安装的,然后使用<code>node</code>中的<code>npm</code>(node package manager)安装hexo.windows下安装请转<a href=\"https://github.com/coreybutler/nvm-windows\" target=\"_blank\" rel=\"external\">这里</a> <a href=\"https://github.com/coreybutler/nvm-windows\" target=\"_blank\" rel=\"external\">https://github.com/coreybutler/nvm-windows</a><br>首先安装<code>nvm</code>:</p>\n<blockquote>\n<p><code>wget -qO- https://raw.github.com/creationix/nvm/master/install.sh | sh</code></p>\n</blockquote>\n<p><img src=\"/image/hexo/hexo_install_nvm.png\" alt=\"安装nvm\" title=\"安装nvm图片\"><br>安装时间长短视网速而定,我安装了大概十多分钟,然后重启一下终端.<br>然后使用 <code>nvm ls-remote</code>查看一下有哪些本版可以安装,我当时安装的最新版是<code>6.6.0</code>,现在不知道是哪一版,如b下<br><img src=\"/image/hexo/nvm_ls-remote.png\" alt=\"nvm ls-remote\"><br>找一个合适的版本使用如下命令安装<br><code>nvm install version</code>,例如 <code>nvm install 6.6.0</code><br><img src=\"/image/hexo/nvm_install_6.6.0.png\" alt=\"nvm ls-remote\">,安装时间还是视网速而定,我也忘了装了多长时间了.<br>安装完成之后是这样的<br><img src=\"/image/hexo/nvm_install_down.png\" alt=\"nvm_install_down\"><br>之后<code>npm install -g hexo</code>安装<code>hexo</code>,<code>-g</code>参数是全局安装<br><img src=\"/image/hexo/npm_install_hexo.png\" alt=\"npm_install_hexo\"><br>安装完成之后使用<code>hexo -v</code>查看hexo的版本号<br><img src=\"/image/hexo/hexo-v.png\" alt=\"hexo-v\"><br>到此<code>hexo</code>安装完成,接下来就是初始化,进行配置了.下一篇再说吧,睡觉了.</p>\n<hr>\n<p>以上.</p>\n","excerpt":"<p><strong>不说环境直接写配置的行为都是耍流氓</strong><br>按照惯例,先说自己的环境:<code>ubunu</code>,然后就没有然后了.<hr><br>","more":"<br>　　<code>hexo</code>类似<code>wordpress</code>的博客框架,<code>gitpage</code>是<code>github</code>的一个服务,请原谅我这个不大准确的表达,事实上真的差不多.<br>安装<code>hexo</code>需要安装<code>nodejs</code>,使用<code>gitpage</code>需要<code>git</code>,至于如何安装<code>git</code>,在原来的csdn博客上有,<a href=\"http://blog.csdn.net/huangyuan_xuan/article/details/49125597\">点击这里</a> <a href=\"http://blog.csdn.net/huangyuan_xuan/article/details/49125597\">http://blog.csdn.net/huangyuan_xuan/article/details/49125597</a>.<br>之后需要在自己的github上创建一个仓库,名称结构如下:<code>username.github.io</code>,例如我的github主页是<code>https://github.com/huangyuanlove</code>,那么我的<code>gitpage</code>就是<code>huangyuanlove.github.io</code>.<br>到这里,默认大家的gitpage和git已经配置好了,包括sshkey之类的东西.</p>\n<hr>\n<p>　　我安装<code>node</code>是用<code>nvm</code>(node version manager)安装的,然后使用<code>node</code>中的<code>npm</code>(node package manager)安装hexo.windows下安装请转<a href=\"https://github.com/coreybutler/nvm-windows\">这里</a> <a href=\"https://github.com/coreybutler/nvm-windows\">https://github.com/coreybutler/nvm-windows</a><br>首先安装<code>nvm</code>:</p>\n<blockquote>\n<p><code>wget -qO- https://raw.github.com/creationix/nvm/master/install.sh | sh</code></p>\n</blockquote>\n<p><img src=\"/image/hexo/hexo_install_nvm.png\" alt=\"安装nvm\" title=\"安装nvm图片\"><br>安装时间长短视网速而定,我安装了大概十多分钟,然后重启一下终端.<br>然后使用 <code>nvm ls-remote</code>查看一下有哪些本版可以安装,我当时安装的最新版是<code>6.6.0</code>,现在不知道是哪一版,如b下<br><img src=\"/image/hexo/nvm_ls-remote.png\" alt=\"nvm ls-remote\"><br>找一个合适的版本使用如下命令安装<br><code>nvm install version</code>,例如 <code>nvm install 6.6.0</code><br><img src=\"/image/hexo/nvm_install_6.6.0.png\" alt=\"nvm ls-remote\">,安装时间还是视网速而定,我也忘了装了多长时间了.<br>安装完成之后是这样的<br><img src=\"/image/hexo/nvm_install_down.png\" alt=\"nvm_install_down\"><br>之后<code>npm install -g hexo</code>安装<code>hexo</code>,<code>-g</code>参数是全局安装<br><img src=\"/image/hexo/npm_install_hexo.png\" alt=\"npm_install_hexo\"><br>安装完成之后使用<code>hexo -v</code>查看hexo的版本号<br><img src=\"/image/hexo/hexo-v.png\" alt=\"hexo-v\"><br>到此<code>hexo</code>安装完成,接下来就是初始化,进行配置了.下一篇再说吧,睡觉了.</p>\n<hr>\n<p>以上.</p>"},{"title":"hexo+gitpage搭建自己的博客(三)","date":"2016-10-30T13:05:54.000Z","keywords":"hexo,gitpage,blog","toc":true,"_content":"前两篇介绍了怎么用gitpage+github搭建自己的博客，这次主要介绍怎么更换主题和加入评论、统计等。\n***\n<!-- more -->\n**更换主题**\n首先将 `yilia`主题从github克隆到本地`thems`文件夹里面\n```git\ngit clone https://github.com/litten/hexo-theme-yilia.git themes/yilia\n```\n看一下当前博客目录的结构\n![目录结构](/image/hexo/Catalog.png)\n\n其中`_config.yml`文件就是整个`hexo`系统的主配置文件\n另外刚才克隆的`yilia`主题就在`thems`文件夹下面\n首先修改根目录下的`_config.yml`文件，切换到`yilia`主题\n大概在文件的63-65行左右的位置\n```yml\n# Extensions\n## Plugins: https://hexo.io/plugins/\n## Themes: https://hexo.io/themes/\ntheme: yilia\n```\n将原来的`theme`后面的 `landscape`主题改成`yilia`\n重启服务后主题就切换到`yilia`了，下面是`thems/yilia`文件夹下的`_config.yml`文件的配置.\n\n```yml\n\n# Header\nmenu:\n  主页: /\n  简历: \"\"\n\n# SubNav\nsubnav:\n  github: \"https://github.com/huangyuanlove\"\n  #weibo: \"#\"\n  #rss: \"#\"\n  zhihu: \"https://www.zhihu.com/people/huangyuan_xuan\"\n  #douban: \"#\"\n  #mail: \"#\"\n  #facebook: \"#\"\n  #google: \"#\"\n  #twitter: \"#\"\n  #linkedin: \"#\"\n\nrss: /atom.xml\n\n# 是否需要修改 root 路径\n# 如果您的网站存放在子目录中，例如 http://yoursite.com/blog，\n# 请将您的 url 设为 http://yoursite.com/blog 并把 root 设为 /blog/。\nroot:\n\n# Content\nexcerpt_link: more\nfancybox: true\nmathjax: false\n\n# 是否开启动画效果\nanimate: true\n\n# 是否在新窗口打开链接\nopen_in_new: false\n\n# 自己添加的百度统计\nbaidu_tongji: true\n\n# 网站icon\nfavicon: favicon.ico\n\n#你的头像url\navatar: \"\"\n\n#是否开启分享\nshare_jia: false\nshare_addthis: false\n\n#多说评论\nduoshuo:\n\n# 如不需要，将该项置为false\n# 比如\n#smart_menu:\n#  friends: false\n\nsmart_menu:\n  innerArchive: '所有文章'\n  tagcloud: '标签'\n  #friends: '友链'\n  aboutme: '关于我'\n\nfriends:\naboutme: <a href=\"http://www.huangyuanlove.com\">什么懂都点的Android攻城狮</a>\n```\n***\n以上是`yilia`主题的配置说明\n**接入百度统计**\n首先到[百度统计平台](http://tongji.baidu.com/web/welcome/login) 申请一个帐号，按照提示填写完自己网站的信息，在网站中心左边栏点击代码获取，得到统计访问量的代码。\n新建`themes/yilia/layout/_partial/baidu_tongji.ejs`文件，内容如下：\n```JavaScript\n<% if (theme.baidu_tongji) { %>\n<script>\n  统计访问量的代码\n</script>\n<% } %>\n```\n然后编辑`themes/yilia/_config.yml`文件，添加一行`baidu_tongji: true`，注意冒号后面有空格。\n编辑`themes/yilia/layout/_partial/head.ejs` 在 `</head>` 前添加\n`<%- partial(\"baidu_tongji\") %>`\n重启部署代码即可。\n安装完成20分钟后就可以在后台看到统计的信息了，如果看不到统计信息，请检查是否配置正确，检测方式点[这里](http://tieba.baidu.com/p/3775626020) http://tieba.baidu.com/p/3775626020\n以上是添加百度统计的方式\n**添加多说评论**\n到[多说](http://duoshuo.com) 申请帐号\n使用三方登录完成后，点击`我要安装`，根据提示填写完信息\n![多说](/image/hexo/duoshuo.png)\n记住站点名称，将站点名称填入 `thems/yilia/_config.yml`文件里面多说评论之后，注意冒号后面有空格。\n保存重新部署就可以看到评论框了。\n至于评论样式，可以在后台管理页面中的设置选项中设置。后台管理中还可以管理评论内容，添加敏感词汇过滤等。\n以上是添加多说评论的过程。\n***\n以上\n","source":"_posts/hexo-gitpage搭建自己的博客-三.md","raw":"---\ntitle: hexo+gitpage搭建自己的博客(三)\ndate: 2016-10-30 21:05:54\ntags: [blog,gitpage,hexo]\nkeywords: hexo,gitpage,blog\ntoc: true\n---\n前两篇介绍了怎么用gitpage+github搭建自己的博客，这次主要介绍怎么更换主题和加入评论、统计等。\n***\n<!-- more -->\n**更换主题**\n首先将 `yilia`主题从github克隆到本地`thems`文件夹里面\n```git\ngit clone https://github.com/litten/hexo-theme-yilia.git themes/yilia\n```\n看一下当前博客目录的结构\n![目录结构](/image/hexo/Catalog.png)\n\n其中`_config.yml`文件就是整个`hexo`系统的主配置文件\n另外刚才克隆的`yilia`主题就在`thems`文件夹下面\n首先修改根目录下的`_config.yml`文件，切换到`yilia`主题\n大概在文件的63-65行左右的位置\n```yml\n# Extensions\n## Plugins: https://hexo.io/plugins/\n## Themes: https://hexo.io/themes/\ntheme: yilia\n```\n将原来的`theme`后面的 `landscape`主题改成`yilia`\n重启服务后主题就切换到`yilia`了，下面是`thems/yilia`文件夹下的`_config.yml`文件的配置.\n\n```yml\n\n# Header\nmenu:\n  主页: /\n  简历: \"\"\n\n# SubNav\nsubnav:\n  github: \"https://github.com/huangyuanlove\"\n  #weibo: \"#\"\n  #rss: \"#\"\n  zhihu: \"https://www.zhihu.com/people/huangyuan_xuan\"\n  #douban: \"#\"\n  #mail: \"#\"\n  #facebook: \"#\"\n  #google: \"#\"\n  #twitter: \"#\"\n  #linkedin: \"#\"\n\nrss: /atom.xml\n\n# 是否需要修改 root 路径\n# 如果您的网站存放在子目录中，例如 http://yoursite.com/blog，\n# 请将您的 url 设为 http://yoursite.com/blog 并把 root 设为 /blog/。\nroot:\n\n# Content\nexcerpt_link: more\nfancybox: true\nmathjax: false\n\n# 是否开启动画效果\nanimate: true\n\n# 是否在新窗口打开链接\nopen_in_new: false\n\n# 自己添加的百度统计\nbaidu_tongji: true\n\n# 网站icon\nfavicon: favicon.ico\n\n#你的头像url\navatar: \"\"\n\n#是否开启分享\nshare_jia: false\nshare_addthis: false\n\n#多说评论\nduoshuo:\n\n# 如不需要，将该项置为false\n# 比如\n#smart_menu:\n#  friends: false\n\nsmart_menu:\n  innerArchive: '所有文章'\n  tagcloud: '标签'\n  #friends: '友链'\n  aboutme: '关于我'\n\nfriends:\naboutme: <a href=\"http://www.huangyuanlove.com\">什么懂都点的Android攻城狮</a>\n```\n***\n以上是`yilia`主题的配置说明\n**接入百度统计**\n首先到[百度统计平台](http://tongji.baidu.com/web/welcome/login) 申请一个帐号，按照提示填写完自己网站的信息，在网站中心左边栏点击代码获取，得到统计访问量的代码。\n新建`themes/yilia/layout/_partial/baidu_tongji.ejs`文件，内容如下：\n```JavaScript\n<% if (theme.baidu_tongji) { %>\n<script>\n  统计访问量的代码\n</script>\n<% } %>\n```\n然后编辑`themes/yilia/_config.yml`文件，添加一行`baidu_tongji: true`，注意冒号后面有空格。\n编辑`themes/yilia/layout/_partial/head.ejs` 在 `</head>` 前添加\n`<%- partial(\"baidu_tongji\") %>`\n重启部署代码即可。\n安装完成20分钟后就可以在后台看到统计的信息了，如果看不到统计信息，请检查是否配置正确，检测方式点[这里](http://tieba.baidu.com/p/3775626020) http://tieba.baidu.com/p/3775626020\n以上是添加百度统计的方式\n**添加多说评论**\n到[多说](http://duoshuo.com) 申请帐号\n使用三方登录完成后，点击`我要安装`，根据提示填写完信息\n![多说](/image/hexo/duoshuo.png)\n记住站点名称，将站点名称填入 `thems/yilia/_config.yml`文件里面多说评论之后，注意冒号后面有空格。\n保存重新部署就可以看到评论框了。\n至于评论样式，可以在后台管理页面中的设置选项中设置。后台管理中还可以管理评论内容，添加敏感词汇过滤等。\n以上是添加多说评论的过程。\n***\n以上\n","slug":"hexo-gitpage搭建自己的博客-三","published":1,"updated":"2018-08-04T04:54:06.734Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjl3vbtrj002qisdgnsk2n910","content":"<p>前两篇介绍了怎么用gitpage+github搭建自己的博客，这次主要介绍怎么更换主题和加入评论、统计等。</p>\n<hr>\n<a id=\"more\"></a>\n<p><strong>更换主题</strong><br>首先将 <code>yilia</code>主题从github克隆到本地<code>thems</code>文件夹里面<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">git clone https://github.com/litten/hexo-theme-yilia.git themes/yilia</div></pre></td></tr></table></figure></p>\n<p>看一下当前博客目录的结构<br><img src=\"/image/hexo/Catalog.png\" alt=\"目录结构\"></p>\n<p>其中<code>_config.yml</code>文件就是整个<code>hexo</code>系统的主配置文件<br>另外刚才克隆的<code>yilia</code>主题就在<code>thems</code>文件夹下面<br>首先修改根目录下的<code>_config.yml</code>文件，切换到<code>yilia</code>主题<br>大概在文件的63-65行左右的位置<br><figure class=\"highlight yml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\"># Extensions</span></div><div class=\"line\"><span class=\"comment\">## Plugins: https://hexo.io/plugins/</span></div><div class=\"line\"><span class=\"comment\">## Themes: https://hexo.io/themes/</span></div><div class=\"line\"><span class=\"attr\">theme:</span> yilia</div></pre></td></tr></table></figure></p>\n<p>将原来的<code>theme</code>后面的 <code>landscape</code>主题改成<code>yilia</code><br>重启服务后主题就切换到<code>yilia</code>了，下面是<code>thems/yilia</code>文件夹下的<code>_config.yml</code>文件的配置.</p>\n<figure class=\"highlight yml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\"><span class=\"comment\"># Header</span></div><div class=\"line\"><span class=\"attr\">menu:</span></div><div class=\"line\">  主页: /</div><div class=\"line\">  简历: <span class=\"string\">\"\"</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\"># SubNav</span></div><div class=\"line\"><span class=\"attr\">subnav:</span></div><div class=\"line\"><span class=\"attr\">  github:</span> <span class=\"string\">\"https://github.com/huangyuanlove\"</span></div><div class=\"line\">  <span class=\"comment\">#weibo: \"#\"</span></div><div class=\"line\">  <span class=\"comment\">#rss: \"#\"</span></div><div class=\"line\"><span class=\"attr\">  zhihu:</span> <span class=\"string\">\"https://www.zhihu.com/people/huangyuan_xuan\"</span></div><div class=\"line\">  <span class=\"comment\">#douban: \"#\"</span></div><div class=\"line\">  <span class=\"comment\">#mail: \"#\"</span></div><div class=\"line\">  <span class=\"comment\">#facebook: \"#\"</span></div><div class=\"line\">  <span class=\"comment\">#google: \"#\"</span></div><div class=\"line\">  <span class=\"comment\">#twitter: \"#\"</span></div><div class=\"line\">  <span class=\"comment\">#linkedin: \"#\"</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"attr\">rss:</span> /atom.xml</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\"># 是否需要修改 root 路径</span></div><div class=\"line\"><span class=\"comment\"># 如果您的网站存放在子目录中，例如 http://yoursite.com/blog，</span></div><div class=\"line\"><span class=\"comment\"># 请将您的 url 设为 http://yoursite.com/blog 并把 root 设为 /blog/。</span></div><div class=\"line\"><span class=\"attr\">root:</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\"># Content</span></div><div class=\"line\"><span class=\"attr\">excerpt_link:</span> more</div><div class=\"line\"><span class=\"attr\">fancybox:</span> <span class=\"literal\">true</span></div><div class=\"line\"><span class=\"attr\">mathjax:</span> <span class=\"literal\">false</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\"># 是否开启动画效果</span></div><div class=\"line\"><span class=\"attr\">animate:</span> <span class=\"literal\">true</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\"># 是否在新窗口打开链接</span></div><div class=\"line\"><span class=\"attr\">open_in_new:</span> <span class=\"literal\">false</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\"># 自己添加的百度统计</span></div><div class=\"line\"><span class=\"attr\">baidu_tongji:</span> <span class=\"literal\">true</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\"># 网站icon</span></div><div class=\"line\"><span class=\"attr\">favicon:</span> favicon.ico</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">#你的头像url</span></div><div class=\"line\"><span class=\"attr\">avatar:</span> <span class=\"string\">\"\"</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">#是否开启分享</span></div><div class=\"line\"><span class=\"attr\">share_jia:</span> <span class=\"literal\">false</span></div><div class=\"line\"><span class=\"attr\">share_addthis:</span> <span class=\"literal\">false</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">#多说评论</span></div><div class=\"line\"><span class=\"attr\">duoshuo:</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\"># 如不需要，将该项置为false</span></div><div class=\"line\"><span class=\"comment\"># 比如</span></div><div class=\"line\"><span class=\"comment\">#smart_menu:</span></div><div class=\"line\"><span class=\"comment\">#  friends: false</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"attr\">smart_menu:</span></div><div class=\"line\"><span class=\"attr\">  innerArchive:</span> <span class=\"string\">'所有文章'</span></div><div class=\"line\"><span class=\"attr\">  tagcloud:</span> <span class=\"string\">'标签'</span></div><div class=\"line\">  <span class=\"comment\">#friends: '友链'</span></div><div class=\"line\"><span class=\"attr\">  aboutme:</span> <span class=\"string\">'关于我'</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"attr\">friends:</span></div><div class=\"line\"><span class=\"attr\">aboutme:</span> &lt;a href=<span class=\"string\">\"http://www.huangyuanlove.com\"</span>&gt;什么懂都点的Android攻城狮&lt;/a<span class=\"string\">&gt;</span></div></pre></td></tr></table></figure>\n<hr>\n<p>以上是<code>yilia</code>主题的配置说明<br><strong>接入百度统计</strong><br>首先到<a href=\"http://tongji.baidu.com/web/welcome/login\" target=\"_blank\" rel=\"external\">百度统计平台</a> 申请一个帐号，按照提示填写完自己网站的信息，在网站中心左边栏点击代码获取，得到统计访问量的代码。<br>新建<code>themes/yilia/layout/_partial/baidu_tongji.ejs</code>文件，内容如下：<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;% <span class=\"keyword\">if</span> (theme.baidu_tongji) &#123; %&gt;</div><div class=\"line\"><span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span><span class=\"undefined\"></span></span></div><div class=\"line\">  统计访问量的代码</div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></div><div class=\"line\">&lt;% &#125; %&gt;</div></pre></td></tr></table></figure></p>\n<p>然后编辑<code>themes/yilia/_config.yml</code>文件，添加一行<code>baidu_tongji: true</code>，注意冒号后面有空格。<br>编辑<code>themes/yilia/layout/_partial/head.ejs</code> 在 <code>&lt;/head&gt;</code> 前添加<br><code>&lt;%- partial(&quot;baidu_tongji&quot;) %&gt;</code><br>重启部署代码即可。<br>安装完成20分钟后就可以在后台看到统计的信息了，如果看不到统计信息，请检查是否配置正确，检测方式点<a href=\"http://tieba.baidu.com/p/3775626020\" target=\"_blank\" rel=\"external\">这里</a> <a href=\"http://tieba.baidu.com/p/3775626020\" target=\"_blank\" rel=\"external\">http://tieba.baidu.com/p/3775626020</a><br>以上是添加百度统计的方式<br><strong>添加多说评论</strong><br>到<a href=\"http://duoshuo.com\" target=\"_blank\" rel=\"external\">多说</a> 申请帐号<br>使用三方登录完成后，点击<code>我要安装</code>，根据提示填写完信息<br><img src=\"/image/hexo/duoshuo.png\" alt=\"多说\"><br>记住站点名称，将站点名称填入 <code>thems/yilia/_config.yml</code>文件里面多说评论之后，注意冒号后面有空格。<br>保存重新部署就可以看到评论框了。<br>至于评论样式，可以在后台管理页面中的设置选项中设置。后台管理中还可以管理评论内容，添加敏感词汇过滤等。<br>以上是添加多说评论的过程。</p>\n<hr>\n<p>以上</p>\n","excerpt":"<p>前两篇介绍了怎么用gitpage+github搭建自己的博客，这次主要介绍怎么更换主题和加入评论、统计等。</p>\n<hr>","more":"<p><strong>更换主题</strong><br>首先将 <code>yilia</code>主题从github克隆到本地<code>thems</code>文件夹里面<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">git clone https://github.com/litten/hexo-theme-yilia.git themes/yilia</div></pre></td></tr></table></figure></p>\n<p>看一下当前博客目录的结构<br><img src=\"/image/hexo/Catalog.png\" alt=\"目录结构\"></p>\n<p>其中<code>_config.yml</code>文件就是整个<code>hexo</code>系统的主配置文件<br>另外刚才克隆的<code>yilia</code>主题就在<code>thems</code>文件夹下面<br>首先修改根目录下的<code>_config.yml</code>文件，切换到<code>yilia</code>主题<br>大概在文件的63-65行左右的位置<br><figure class=\"highlight yml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\"># Extensions</span></div><div class=\"line\"><span class=\"comment\">## Plugins: https://hexo.io/plugins/</span></div><div class=\"line\"><span class=\"comment\">## Themes: https://hexo.io/themes/</span></div><div class=\"line\"><span class=\"attr\">theme:</span> yilia</div></pre></td></tr></table></figure></p>\n<p>将原来的<code>theme</code>后面的 <code>landscape</code>主题改成<code>yilia</code><br>重启服务后主题就切换到<code>yilia</code>了，下面是<code>thems/yilia</code>文件夹下的<code>_config.yml</code>文件的配置.</p>\n<figure class=\"highlight yml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\"><span class=\"comment\"># Header</span></div><div class=\"line\"><span class=\"attr\">menu:</span></div><div class=\"line\">  主页: /</div><div class=\"line\">  简历: <span class=\"string\">\"\"</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\"># SubNav</span></div><div class=\"line\"><span class=\"attr\">subnav:</span></div><div class=\"line\"><span class=\"attr\">  github:</span> <span class=\"string\">\"https://github.com/huangyuanlove\"</span></div><div class=\"line\">  <span class=\"comment\">#weibo: \"#\"</span></div><div class=\"line\">  <span class=\"comment\">#rss: \"#\"</span></div><div class=\"line\"><span class=\"attr\">  zhihu:</span> <span class=\"string\">\"https://www.zhihu.com/people/huangyuan_xuan\"</span></div><div class=\"line\">  <span class=\"comment\">#douban: \"#\"</span></div><div class=\"line\">  <span class=\"comment\">#mail: \"#\"</span></div><div class=\"line\">  <span class=\"comment\">#facebook: \"#\"</span></div><div class=\"line\">  <span class=\"comment\">#google: \"#\"</span></div><div class=\"line\">  <span class=\"comment\">#twitter: \"#\"</span></div><div class=\"line\">  <span class=\"comment\">#linkedin: \"#\"</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"attr\">rss:</span> /atom.xml</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\"># 是否需要修改 root 路径</span></div><div class=\"line\"><span class=\"comment\"># 如果您的网站存放在子目录中，例如 http://yoursite.com/blog，</span></div><div class=\"line\"><span class=\"comment\"># 请将您的 url 设为 http://yoursite.com/blog 并把 root 设为 /blog/。</span></div><div class=\"line\"><span class=\"attr\">root:</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\"># Content</span></div><div class=\"line\"><span class=\"attr\">excerpt_link:</span> more</div><div class=\"line\"><span class=\"attr\">fancybox:</span> <span class=\"literal\">true</span></div><div class=\"line\"><span class=\"attr\">mathjax:</span> <span class=\"literal\">false</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\"># 是否开启动画效果</span></div><div class=\"line\"><span class=\"attr\">animate:</span> <span class=\"literal\">true</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\"># 是否在新窗口打开链接</span></div><div class=\"line\"><span class=\"attr\">open_in_new:</span> <span class=\"literal\">false</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\"># 自己添加的百度统计</span></div><div class=\"line\"><span class=\"attr\">baidu_tongji:</span> <span class=\"literal\">true</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\"># 网站icon</span></div><div class=\"line\"><span class=\"attr\">favicon:</span> favicon.ico</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">#你的头像url</span></div><div class=\"line\"><span class=\"attr\">avatar:</span> <span class=\"string\">\"\"</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">#是否开启分享</span></div><div class=\"line\"><span class=\"attr\">share_jia:</span> <span class=\"literal\">false</span></div><div class=\"line\"><span class=\"attr\">share_addthis:</span> <span class=\"literal\">false</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">#多说评论</span></div><div class=\"line\"><span class=\"attr\">duoshuo:</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\"># 如不需要，将该项置为false</span></div><div class=\"line\"><span class=\"comment\"># 比如</span></div><div class=\"line\"><span class=\"comment\">#smart_menu:</span></div><div class=\"line\"><span class=\"comment\">#  friends: false</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"attr\">smart_menu:</span></div><div class=\"line\"><span class=\"attr\">  innerArchive:</span> <span class=\"string\">'所有文章'</span></div><div class=\"line\"><span class=\"attr\">  tagcloud:</span> <span class=\"string\">'标签'</span></div><div class=\"line\">  <span class=\"comment\">#friends: '友链'</span></div><div class=\"line\"><span class=\"attr\">  aboutme:</span> <span class=\"string\">'关于我'</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"attr\">friends:</span></div><div class=\"line\"><span class=\"attr\">aboutme:</span> &lt;a href=<span class=\"string\">\"http://www.huangyuanlove.com\"</span>&gt;什么懂都点的Android攻城狮&lt;/a<span class=\"string\">&gt;</span></div></pre></td></tr></table></figure>\n<hr>\n<p>以上是<code>yilia</code>主题的配置说明<br><strong>接入百度统计</strong><br>首先到<a href=\"http://tongji.baidu.com/web/welcome/login\">百度统计平台</a> 申请一个帐号，按照提示填写完自己网站的信息，在网站中心左边栏点击代码获取，得到统计访问量的代码。<br>新建<code>themes/yilia/layout/_partial/baidu_tongji.ejs</code>文件，内容如下：<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;% <span class=\"keyword\">if</span> (theme.baidu_tongji) &#123; %&gt;</div><div class=\"line\"><span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span><span class=\"undefined\"></div><div class=\"line\">  统计访问量的代码</div><div class=\"line\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span></div><div class=\"line\">&lt;% &#125; %&gt;</div></pre></td></tr></table></figure></p>\n<p>然后编辑<code>themes/yilia/_config.yml</code>文件，添加一行<code>baidu_tongji: true</code>，注意冒号后面有空格。<br>编辑<code>themes/yilia/layout/_partial/head.ejs</code> 在 <code>&lt;/head&gt;</code> 前添加<br><code>&lt;%- partial(&quot;baidu_tongji&quot;) %&gt;</code><br>重启部署代码即可。<br>安装完成20分钟后就可以在后台看到统计的信息了，如果看不到统计信息，请检查是否配置正确，检测方式点<a href=\"http://tieba.baidu.com/p/3775626020\">这里</a> <a href=\"http://tieba.baidu.com/p/3775626020\">http://tieba.baidu.com/p/3775626020</a><br>以上是添加百度统计的方式<br><strong>添加多说评论</strong><br>到<a href=\"http://duoshuo.com\">多说</a> 申请帐号<br>使用三方登录完成后，点击<code>我要安装</code>，根据提示填写完信息<br><img src=\"/image/hexo/duoshuo.png\" alt=\"多说\"><br>记住站点名称，将站点名称填入 <code>thems/yilia/_config.yml</code>文件里面多说评论之后，注意冒号后面有空格。<br>保存重新部署就可以看到评论框了。<br>至于评论样式，可以在后台管理页面中的设置选项中设置。后台管理中还可以管理评论内容，添加敏感词汇过滤等。<br>以上是添加多说评论的过程。</p>\n<hr>\n<p>以上</p>"},{"title":"《我的安卓爬坑之旅》--融云IM遇到的坑","date":"2016-12-01T07:20:47.000Z","keywords":"Android,融云IM","_content":"这篇博客是关于融云IM使用中遇到的问题，不算是坑，只能说是注意事项吧\n<!--more-->\n#### 后端向\n  在自己的应用\"OurStories\"中打算接入IM即时通讯功能，就使用了融云提供的sdk，需要自己写后台获取Token，这个比较简单，官方给出了Demo，按照自己的习惯，把demo里面的方法封装一下就可以使用了。\n#### Token向\n1. 获取Token时可以在融云后台（登录自己帐号，控制台）可以设置Token有效期。\n2. 在初始情况下开发环境下最多只能有100个测试用户，当达到上限后可以点击添加用户的按钮，每次添加20人上限，生产环境没有上限。\n3. 开发环境和生产环境在融云后台是两套独立的环境，拥有不同的`App Key`和`App Secret`，当产品上线时不要忘记切换自己服务器和app的配置，另外，app的`App Key`和服务器端的`App Key`要一致。\n#### 前端 Android向\n1. 由于集成融云的聊天界面个会话列表界面都是Fragment形式，在集成的过程中，包含该Fragment的Activity要继承自**FragmentActivity**，否则在开启聊天界面的时候会报如下异常：\n```java\nCaused by: android.view.InflateException: Binary XML file line #6: Binary XML file line #6: Error inflating class fragment \nCaused by: android.view.InflateException: Binary XML file line #6: Error inflating class fragment \nCaused by: android.app.Fragment$InstantiationException: Trying to instantiate a class io.rong.imkit.fragment.ConversationFragment that is not a Fragment \nCaused by: java.lang.ClassCastException \n```\n2. 融云在初始化的时候建议放在Applicatuon中进行，但是融云会开启3个进程，每个进程都会执行Application的OnCreate方法，建议在初始化自己的配置时检测以下进程，在自己的主进程中初始化自己的配置.\n3. 千万不要忘记配置包含融云Fragment的Activity的`<intent-filter>`\n4. 融云不同步也不会保存应用下的好友关系，需要自己的服务器保存\n5. 注意阅读融云的开发文档，注意每一个细节\n6. 有问题先去搜知识库，然后提工单。提工单的时候尽可能详细的描述自己的开发环境，遇到的问题以及异常日志。\n7. 非必要情况下，不要自己去反编译出融云的sdk，然后自己使用用其中的代码。\n\n","source":"_posts/《我的安卓爬坑之旅》-融云IM遇到的坑.md","raw":"---\ntitle: 《我的安卓爬坑之旅》--融云IM遇到的坑\ndate: 2016-12-01 15:20:47\ntags: [Android爬坑之旅,Android,融云IM]\nkeywords: Android,融云IM\n---\n这篇博客是关于融云IM使用中遇到的问题，不算是坑，只能说是注意事项吧\n<!--more-->\n#### 后端向\n  在自己的应用\"OurStories\"中打算接入IM即时通讯功能，就使用了融云提供的sdk，需要自己写后台获取Token，这个比较简单，官方给出了Demo，按照自己的习惯，把demo里面的方法封装一下就可以使用了。\n#### Token向\n1. 获取Token时可以在融云后台（登录自己帐号，控制台）可以设置Token有效期。\n2. 在初始情况下开发环境下最多只能有100个测试用户，当达到上限后可以点击添加用户的按钮，每次添加20人上限，生产环境没有上限。\n3. 开发环境和生产环境在融云后台是两套独立的环境，拥有不同的`App Key`和`App Secret`，当产品上线时不要忘记切换自己服务器和app的配置，另外，app的`App Key`和服务器端的`App Key`要一致。\n#### 前端 Android向\n1. 由于集成融云的聊天界面个会话列表界面都是Fragment形式，在集成的过程中，包含该Fragment的Activity要继承自**FragmentActivity**，否则在开启聊天界面的时候会报如下异常：\n```java\nCaused by: android.view.InflateException: Binary XML file line #6: Binary XML file line #6: Error inflating class fragment \nCaused by: android.view.InflateException: Binary XML file line #6: Error inflating class fragment \nCaused by: android.app.Fragment$InstantiationException: Trying to instantiate a class io.rong.imkit.fragment.ConversationFragment that is not a Fragment \nCaused by: java.lang.ClassCastException \n```\n2. 融云在初始化的时候建议放在Applicatuon中进行，但是融云会开启3个进程，每个进程都会执行Application的OnCreate方法，建议在初始化自己的配置时检测以下进程，在自己的主进程中初始化自己的配置.\n3. 千万不要忘记配置包含融云Fragment的Activity的`<intent-filter>`\n4. 融云不同步也不会保存应用下的好友关系，需要自己的服务器保存\n5. 注意阅读融云的开发文档，注意每一个细节\n6. 有问题先去搜知识库，然后提工单。提工单的时候尽可能详细的描述自己的开发环境，遇到的问题以及异常日志。\n7. 非必要情况下，不要自己去反编译出融云的sdk，然后自己使用用其中的代码。\n\n","slug":"《我的安卓爬坑之旅》-融云IM遇到的坑","published":1,"updated":"2018-08-04T04:42:24.041Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjl3vbtrk002sisdggndgyv98","content":"<p>这篇博客是关于融云IM使用中遇到的问题，不算是坑，只能说是注意事项吧<br><a id=\"more\"></a></p>\n<h4 id=\"后端向\"><a href=\"#后端向\" class=\"headerlink\" title=\"后端向\"></a>后端向</h4><p>  在自己的应用”OurStories”中打算接入IM即时通讯功能，就使用了融云提供的sdk，需要自己写后台获取Token，这个比较简单，官方给出了Demo，按照自己的习惯，把demo里面的方法封装一下就可以使用了。</p>\n<h4 id=\"Token向\"><a href=\"#Token向\" class=\"headerlink\" title=\"Token向\"></a>Token向</h4><ol>\n<li>获取Token时可以在融云后台（登录自己帐号，控制台）可以设置Token有效期。</li>\n<li>在初始情况下开发环境下最多只能有100个测试用户，当达到上限后可以点击添加用户的按钮，每次添加20人上限，生产环境没有上限。</li>\n<li>开发环境和生产环境在融云后台是两套独立的环境，拥有不同的<code>App Key</code>和<code>App Secret</code>，当产品上线时不要忘记切换自己服务器和app的配置，另外，app的<code>App Key</code>和服务器端的<code>App Key</code>要一致。<h4 id=\"前端-Android向\"><a href=\"#前端-Android向\" class=\"headerlink\" title=\"前端 Android向\"></a>前端 Android向</h4></li>\n<li><p>由于集成融云的聊天界面个会话列表界面都是Fragment形式，在集成的过程中，包含该Fragment的Activity要继承自<strong>FragmentActivity</strong>，否则在开启聊天界面的时候会报如下异常：</p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">Caused by: android.view.InflateException: Binary XML file line #6: Binary XML file line #6: Error inflating class fragment </div><div class=\"line\">Caused by: android.view.InflateException: Binary XML file line #6: Error inflating class fragment </div><div class=\"line\">Caused by: android.app.Fragment$InstantiationException: Trying to instantiate a class io.rong.imkit.fragment.ConversationFragment that is not a Fragment </div><div class=\"line\">Caused by: java.lang.ClassCastException</div></pre></td></tr></table></figure>\n</li>\n<li><p>融云在初始化的时候建议放在Applicatuon中进行，但是融云会开启3个进程，每个进程都会执行Application的OnCreate方法，建议在初始化自己的配置时检测以下进程，在自己的主进程中初始化自己的配置.</p>\n</li>\n<li>千万不要忘记配置包含融云Fragment的Activity的<code>&lt;intent-filter&gt;</code></li>\n<li>融云不同步也不会保存应用下的好友关系，需要自己的服务器保存</li>\n<li>注意阅读融云的开发文档，注意每一个细节</li>\n<li>有问题先去搜知识库，然后提工单。提工单的时候尽可能详细的描述自己的开发环境，遇到的问题以及异常日志。</li>\n<li>非必要情况下，不要自己去反编译出融云的sdk，然后自己使用用其中的代码。</li>\n</ol>\n","excerpt":"<p>这篇博客是关于融云IM使用中遇到的问题，不算是坑，只能说是注意事项吧<br>","more":"</p>\n<h4 id=\"后端向\"><a href=\"#后端向\" class=\"headerlink\" title=\"后端向\"></a>后端向</h4><p>  在自己的应用”OurStories”中打算接入IM即时通讯功能，就使用了融云提供的sdk，需要自己写后台获取Token，这个比较简单，官方给出了Demo，按照自己的习惯，把demo里面的方法封装一下就可以使用了。</p>\n<h4 id=\"Token向\"><a href=\"#Token向\" class=\"headerlink\" title=\"Token向\"></a>Token向</h4><ol>\n<li>获取Token时可以在融云后台（登录自己帐号，控制台）可以设置Token有效期。</li>\n<li>在初始情况下开发环境下最多只能有100个测试用户，当达到上限后可以点击添加用户的按钮，每次添加20人上限，生产环境没有上限。</li>\n<li>开发环境和生产环境在融云后台是两套独立的环境，拥有不同的<code>App Key</code>和<code>App Secret</code>，当产品上线时不要忘记切换自己服务器和app的配置，另外，app的<code>App Key</code>和服务器端的<code>App Key</code>要一致。<h4 id=\"前端-Android向\"><a href=\"#前端-Android向\" class=\"headerlink\" title=\"前端 Android向\"></a>前端 Android向</h4></li>\n<li><p>由于集成融云的聊天界面个会话列表界面都是Fragment形式，在集成的过程中，包含该Fragment的Activity要继承自<strong>FragmentActivity</strong>，否则在开启聊天界面的时候会报如下异常：</p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">Caused by: android.view.InflateException: Binary XML file line #6: Binary XML file line #6: Error inflating class fragment </div><div class=\"line\">Caused by: android.view.InflateException: Binary XML file line #6: Error inflating class fragment </div><div class=\"line\">Caused by: android.app.Fragment$InstantiationException: Trying to instantiate a class io.rong.imkit.fragment.ConversationFragment that is not a Fragment </div><div class=\"line\">Caused by: java.lang.ClassCastException</div></pre></td></tr></table></figure>\n</li>\n<li><p>融云在初始化的时候建议放在Applicatuon中进行，但是融云会开启3个进程，每个进程都会执行Application的OnCreate方法，建议在初始化自己的配置时检测以下进程，在自己的主进程中初始化自己的配置.</p>\n</li>\n<li>千万不要忘记配置包含融云Fragment的Activity的<code>&lt;intent-filter&gt;</code></li>\n<li>融云不同步也不会保存应用下的好友关系，需要自己的服务器保存</li>\n<li>注意阅读融云的开发文档，注意每一个细节</li>\n<li>有问题先去搜知识库，然后提工单。提工单的时候尽可能详细的描述自己的开发环境，遇到的问题以及异常日志。</li>\n<li>非必要情况下，不要自己去反编译出融云的sdk，然后自己使用用其中的代码。</li>\n</ol>"},{"title":"《我的安卓爬坑之旅》--高德地图遇到的坑","date":"2016-12-18T15:58:39.000Z","keywords":"Android,高德地图","_content":"这篇博客是关于高德使用中遇到的问题，或许是因为开发文档中没有说明，或许是因为自己段位不够，反正就是遇到坑了。\n<!--more-->\n####生成key\n1. 生成key的时候，同一个app下，可以填入相同的包名、key名称等。注意不要用错了key\n2. 由于高德地图升级的原因，需要将原来没有整理过的key先整理，使其属于某个应用，才可以继续创建其他的key。\n\n####文档\n1. 仅在入门指南中提到了需要加入 **`<service android:name=\"com.amap.api.location.APSService\"></service>`**\n开发注意事项里面居然没有提到。最关键的是，没有加入这个service时，定位有时还能成功，只是不能连续定位。我看的时候时从开发注意事项开始看的，完全没有注意到这一点，后来在demo中看到了需要加入这个配置，才能生效。\n2. 文档里面只给出了部分关键代码和部分关键类，完全不知道这个类怎么实例化，怎么去调用方法，调用方法的时候需要传入哪种类型的参数。\n<hr>就我个人看来，看官方api文档还不如去看他们的demo，文档写的真心不算好。\n官方部分demo地址[官方demo地址](http://lbs.amap.com/dev/demo) \n官方sdk以及开发文档、demo等相关下载[官方sdk、开发文档以及demo](http://lbs.amap.com/api/android-sdk/download/) \n以后遇到坑再补充吧，估计遇到的都是文档中没有标明但在demo中有示例的那种。","source":"_posts/《我的安卓爬坑之旅》-高德地图遇到的坑-1.md","raw":"---\ntitle: 《我的安卓爬坑之旅》--高德地图遇到的坑\ndate: 2016-12-18 23:58:39\ntags: [Android爬坑之旅,Android,高德地图]\nkeywords: Android,高德地图\n---\n这篇博客是关于高德使用中遇到的问题，或许是因为开发文档中没有说明，或许是因为自己段位不够，反正就是遇到坑了。\n<!--more-->\n####生成key\n1. 生成key的时候，同一个app下，可以填入相同的包名、key名称等。注意不要用错了key\n2. 由于高德地图升级的原因，需要将原来没有整理过的key先整理，使其属于某个应用，才可以继续创建其他的key。\n\n####文档\n1. 仅在入门指南中提到了需要加入 **`<service android:name=\"com.amap.api.location.APSService\"></service>`**\n开发注意事项里面居然没有提到。最关键的是，没有加入这个service时，定位有时还能成功，只是不能连续定位。我看的时候时从开发注意事项开始看的，完全没有注意到这一点，后来在demo中看到了需要加入这个配置，才能生效。\n2. 文档里面只给出了部分关键代码和部分关键类，完全不知道这个类怎么实例化，怎么去调用方法，调用方法的时候需要传入哪种类型的参数。\n<hr>就我个人看来，看官方api文档还不如去看他们的demo，文档写的真心不算好。\n官方部分demo地址[官方demo地址](http://lbs.amap.com/dev/demo) \n官方sdk以及开发文档、demo等相关下载[官方sdk、开发文档以及demo](http://lbs.amap.com/api/android-sdk/download/) \n以后遇到坑再补充吧，估计遇到的都是文档中没有标明但在demo中有示例的那种。","slug":"《我的安卓爬坑之旅》-高德地图遇到的坑-1","published":1,"updated":"2018-08-04T04:42:37.366Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjl3vbtrl002uisdgjj2olad5","content":"<p>这篇博客是关于高德使用中遇到的问题，或许是因为开发文档中没有说明，或许是因为自己段位不够，反正就是遇到坑了。<br><a id=\"more\"></a></p>\n<p>####生成key</p>\n<ol>\n<li>生成key的时候，同一个app下，可以填入相同的包名、key名称等。注意不要用错了key</li>\n<li>由于高德地图升级的原因，需要将原来没有整理过的key先整理，使其属于某个应用，才可以继续创建其他的key。</li>\n</ol>\n<p>####文档</p>\n<ol>\n<li>仅在入门指南中提到了需要加入 <strong><code>&lt;service android:name=&quot;com.amap.api.location.APSService&quot;&gt;&lt;/service&gt;</code></strong><br>开发注意事项里面居然没有提到。最关键的是，没有加入这个service时，定位有时还能成功，只是不能连续定位。我看的时候时从开发注意事项开始看的，完全没有注意到这一点，后来在demo中看到了需要加入这个配置，才能生效。</li>\n<li>文档里面只给出了部分关键代码和部分关键类，完全不知道这个类怎么实例化，怎么去调用方法，调用方法的时候需要传入哪种类型的参数。<br><hr>就我个人看来，看官方api文档还不如去看他们的demo，文档写的真心不算好。<br>官方部分demo地址<a href=\"http://lbs.amap.com/dev/demo\" target=\"_blank\" rel=\"external\">官方demo地址</a><br>官方sdk以及开发文档、demo等相关下载<a href=\"http://lbs.amap.com/api/android-sdk/download/\" target=\"_blank\" rel=\"external\">官方sdk、开发文档以及demo</a><br>以后遇到坑再补充吧，估计遇到的都是文档中没有标明但在demo中有示例的那种。</li>\n</ol>\n","excerpt":"<p>这篇博客是关于高德使用中遇到的问题，或许是因为开发文档中没有说明，或许是因为自己段位不够，反正就是遇到坑了。<br>","more":"</p>\n<p>####生成key</p>\n<ol>\n<li>生成key的时候，同一个app下，可以填入相同的包名、key名称等。注意不要用错了key</li>\n<li>由于高德地图升级的原因，需要将原来没有整理过的key先整理，使其属于某个应用，才可以继续创建其他的key。</li>\n</ol>\n<p>####文档</p>\n<ol>\n<li>仅在入门指南中提到了需要加入 <strong><code>&lt;service android:name=&quot;com.amap.api.location.APSService&quot;&gt;&lt;/service&gt;</code></strong><br>开发注意事项里面居然没有提到。最关键的是，没有加入这个service时，定位有时还能成功，只是不能连续定位。我看的时候时从开发注意事项开始看的，完全没有注意到这一点，后来在demo中看到了需要加入这个配置，才能生效。</li>\n<li>文档里面只给出了部分关键代码和部分关键类，完全不知道这个类怎么实例化，怎么去调用方法，调用方法的时候需要传入哪种类型的参数。<br><hr>就我个人看来，看官方api文档还不如去看他们的demo，文档写的真心不算好。<br>官方部分demo地址<a href=\"http://lbs.amap.com/dev/demo\">官方demo地址</a><br>官方sdk以及开发文档、demo等相关下载<a href=\"http://lbs.amap.com/api/android-sdk/download/\">官方sdk、开发文档以及demo</a><br>以后遇到坑再补充吧，估计遇到的都是文档中没有标明但在demo中有示例的那种。</li>\n</ol>"},{"title":"《我的安卓爬坑之旅》-高德地图遇到的坑(2)","date":"2017-02-25T03:57:23.000Z","keywords":"Android,高德地图","_content":"这篇博客是关于高德使用中遇到的问题，或许是因为开发文档中没有说明，或许是因为自己段位不够，反正就是遇到坑了。\n<!--more-->\n#### 关于定位点和覆盖物\n　　有这么一个业务需求：定位手机所在位置成功后，请求服务器数据，服务器返回手机所在地点指定范围内的的点，然后把这些点添加到地图上。\n刚开始还没有什么问题，按照官网的demo来做的，到后来数据量多的时候就出现了marker重叠的问题。当然，marker点多的话，重叠也是无法避免的，但是，把定位的标记也给覆盖掉了，这就有点不好了。也没有查到相关的api，demo上添加定位点也是用的marker，估计都是同一级别，按照添加的先后顺序覆盖叠加。\n后来找到了一个方法 `mLocMarker.setToTop();`这样可以把某个marker设置到最高的层级显示。还有一个方法是\n``` java\n    public void setDisplayLevel(int var1) {\n        IMarkerAction var2 = this.a.getIMarkerAction();\n        if(var2 != null) {\n            var2.setDisplayLevel(var1);\n        }\n    }\n```\n这个是Marker对象中的一个方法，但是从官方下载下来的文档中并没有提到这个方法，自己也没有去使用。了解过的朋友可以在评论区回复我一下，谢谢。\n#### AndroidStudio第二次编译之后地图不显示\n　　AS2.2版本加了 `Instant Run` 模式，通常情况下这回节省我们很多时间，比如当我们修改了界面布局，想要在手机上看一下效果，没有必要重启整个应用，这个时候就可以使用 `Instant Run` 模式了，ide内部会进行判断是否需要重启整个应用，如果不需要，只会热重启当前页面。为这个功能点赞啊，有的时候页面藏的比较深，需要多步操作才能打开，这个功能可以节省很多时间。\n![Install Run](/image/gaode/install_run.png)\n但是啊但是。。。我在Fragment中使用高德地图的时候，使用这个功能会出现地图加载不出来（一片空白），但是定位成功的问题。刚开始的是吓尿了，以为代码出了什么问题，直到我提了工单，看到回复后放心了：\n![高德工单](/image/gaode/install_run_bug.png)\n>您好，Instant Run 确实是不支持这种，目前他们也没有给出解决方案，这里有详细的解释http://stackoverflow.com/questions/33902467/android-studio-2-0-why-does-instant-run-not-work-when-modifying-xml-layout-reso\n感谢您的致信，欢迎持续关注高德开放平台！\n\n#### 地图加载完成的回调函数\n因为业务上的原因，需要在地图加载完成后做一些操作，当时官网的开发者文档上没有啊，于是又提了工单，接到回复后又放心了\n>您好，AMap 提供了地图加载完成的方法， 可详见：\n``` java\naMap.setOnMapLoadedListener(new AMap.OnMapLoadedListener() {\n\t\t\t@Override\n\t\t\tpublic void onMapLoaded() {\n\t\t\t}\n\t\t});\n```\n感谢您的致信，欢迎持续关注高德开放平台！\n\n#### 步行路径规划当距离比较短时路线不在地图中间位置\n　　由于业务上的原因，自己的位置和目的地的距离较短，需要步行路径规划，但是啊但是，路径可以规划成功，但是把路径添加到地图上的时候，路径没有显示在屏幕中间位置啊，而是诡异的飘到了一边。反复检查了N边代码，没有问题啊，和官网demo一样啊，把坐标点抠出来，改一下官网demo的起始点(就是两个坐标值),然后，也出现了路径飘到一边的情况，于是又去提了万能的工单，看到工单的回复后，我又放心了\n![高德工单](/image/gaode/walk_route_bug.png)\n> 我：Demo是从官网的demo上改的，就在`om.amap.map3d.demo.route`包下的`WalkRouteActivity`这个类里面，改了一下mStartPoint，和 mEndPoint 的值，附件图片是我修改之后的值\n `private LatLonPoint mStartPoint = new LatLonPoint(39.990145, 116.481194);`\n`private LatLonPoint mEndPoint = new LatLonPoint(39.99026006391499, 116.4813472288069);`\n从官网下载回来后只改了这两个地方，把key换成了自己的，其他地方的代码没有动。\n如果可以的话，你们可以试一下，找两个距离非常近的点。\n>答复：\n您好，这个问题确实是由SDK内部处理不当引起的bug，我们会在下个版本中修复，给您带来不便深表歉意\n感谢您的致信，欢迎持续关注高德开放平台！\n\n解决方法：\n判断两个点的距离，小于500米的时候，取起始点位置连线的中间位置作为地图中间点，强制将地图上的此位置拉到屏幕中间。\n***\n以上","source":"_posts/《我的安卓爬坑之旅》-高德地图遇到的坑-2.md","raw":"---\ntitle: 《我的安卓爬坑之旅》-高德地图遇到的坑(2)\ndate: 2017-02-25 11:57:23\ntags: [Android爬坑之旅,Android,高德地图]\nkeywords: Android,高德地图\n---\n这篇博客是关于高德使用中遇到的问题，或许是因为开发文档中没有说明，或许是因为自己段位不够，反正就是遇到坑了。\n<!--more-->\n#### 关于定位点和覆盖物\n　　有这么一个业务需求：定位手机所在位置成功后，请求服务器数据，服务器返回手机所在地点指定范围内的的点，然后把这些点添加到地图上。\n刚开始还没有什么问题，按照官网的demo来做的，到后来数据量多的时候就出现了marker重叠的问题。当然，marker点多的话，重叠也是无法避免的，但是，把定位的标记也给覆盖掉了，这就有点不好了。也没有查到相关的api，demo上添加定位点也是用的marker，估计都是同一级别，按照添加的先后顺序覆盖叠加。\n后来找到了一个方法 `mLocMarker.setToTop();`这样可以把某个marker设置到最高的层级显示。还有一个方法是\n``` java\n    public void setDisplayLevel(int var1) {\n        IMarkerAction var2 = this.a.getIMarkerAction();\n        if(var2 != null) {\n            var2.setDisplayLevel(var1);\n        }\n    }\n```\n这个是Marker对象中的一个方法，但是从官方下载下来的文档中并没有提到这个方法，自己也没有去使用。了解过的朋友可以在评论区回复我一下，谢谢。\n#### AndroidStudio第二次编译之后地图不显示\n　　AS2.2版本加了 `Instant Run` 模式，通常情况下这回节省我们很多时间，比如当我们修改了界面布局，想要在手机上看一下效果，没有必要重启整个应用，这个时候就可以使用 `Instant Run` 模式了，ide内部会进行判断是否需要重启整个应用，如果不需要，只会热重启当前页面。为这个功能点赞啊，有的时候页面藏的比较深，需要多步操作才能打开，这个功能可以节省很多时间。\n![Install Run](/image/gaode/install_run.png)\n但是啊但是。。。我在Fragment中使用高德地图的时候，使用这个功能会出现地图加载不出来（一片空白），但是定位成功的问题。刚开始的是吓尿了，以为代码出了什么问题，直到我提了工单，看到回复后放心了：\n![高德工单](/image/gaode/install_run_bug.png)\n>您好，Instant Run 确实是不支持这种，目前他们也没有给出解决方案，这里有详细的解释http://stackoverflow.com/questions/33902467/android-studio-2-0-why-does-instant-run-not-work-when-modifying-xml-layout-reso\n感谢您的致信，欢迎持续关注高德开放平台！\n\n#### 地图加载完成的回调函数\n因为业务上的原因，需要在地图加载完成后做一些操作，当时官网的开发者文档上没有啊，于是又提了工单，接到回复后又放心了\n>您好，AMap 提供了地图加载完成的方法， 可详见：\n``` java\naMap.setOnMapLoadedListener(new AMap.OnMapLoadedListener() {\n\t\t\t@Override\n\t\t\tpublic void onMapLoaded() {\n\t\t\t}\n\t\t});\n```\n感谢您的致信，欢迎持续关注高德开放平台！\n\n#### 步行路径规划当距离比较短时路线不在地图中间位置\n　　由于业务上的原因，自己的位置和目的地的距离较短，需要步行路径规划，但是啊但是，路径可以规划成功，但是把路径添加到地图上的时候，路径没有显示在屏幕中间位置啊，而是诡异的飘到了一边。反复检查了N边代码，没有问题啊，和官网demo一样啊，把坐标点抠出来，改一下官网demo的起始点(就是两个坐标值),然后，也出现了路径飘到一边的情况，于是又去提了万能的工单，看到工单的回复后，我又放心了\n![高德工单](/image/gaode/walk_route_bug.png)\n> 我：Demo是从官网的demo上改的，就在`om.amap.map3d.demo.route`包下的`WalkRouteActivity`这个类里面，改了一下mStartPoint，和 mEndPoint 的值，附件图片是我修改之后的值\n `private LatLonPoint mStartPoint = new LatLonPoint(39.990145, 116.481194);`\n`private LatLonPoint mEndPoint = new LatLonPoint(39.99026006391499, 116.4813472288069);`\n从官网下载回来后只改了这两个地方，把key换成了自己的，其他地方的代码没有动。\n如果可以的话，你们可以试一下，找两个距离非常近的点。\n>答复：\n您好，这个问题确实是由SDK内部处理不当引起的bug，我们会在下个版本中修复，给您带来不便深表歉意\n感谢您的致信，欢迎持续关注高德开放平台！\n\n解决方法：\n判断两个点的距离，小于500米的时候，取起始点位置连线的中间位置作为地图中间点，强制将地图上的此位置拉到屏幕中间。\n***\n以上","slug":"《我的安卓爬坑之旅》-高德地图遇到的坑-2","published":1,"updated":"2018-08-04T04:42:43.557Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjl3vbtrn002xisdgm4st30b9","content":"<p>这篇博客是关于高德使用中遇到的问题，或许是因为开发文档中没有说明，或许是因为自己段位不够，反正就是遇到坑了。<br><a id=\"more\"></a></p>\n<h4 id=\"关于定位点和覆盖物\"><a href=\"#关于定位点和覆盖物\" class=\"headerlink\" title=\"关于定位点和覆盖物\"></a>关于定位点和覆盖物</h4><p>　　有这么一个业务需求：定位手机所在位置成功后，请求服务器数据，服务器返回手机所在地点指定范围内的的点，然后把这些点添加到地图上。<br>刚开始还没有什么问题，按照官网的demo来做的，到后来数据量多的时候就出现了marker重叠的问题。当然，marker点多的话，重叠也是无法避免的，但是，把定位的标记也给覆盖掉了，这就有点不好了。也没有查到相关的api，demo上添加定位点也是用的marker，估计都是同一级别，按照添加的先后顺序覆盖叠加。<br>后来找到了一个方法 <code>mLocMarker.setToTop();</code>这样可以把某个marker设置到最高的层级显示。还有一个方法是<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">setDisplayLevel</span><span class=\"params\">(<span class=\"keyword\">int</span> var1)</span> </span>&#123;</div><div class=\"line\">    IMarkerAction var2 = <span class=\"keyword\">this</span>.a.getIMarkerAction();</div><div class=\"line\">    <span class=\"keyword\">if</span>(var2 != <span class=\"keyword\">null</span>) &#123;</div><div class=\"line\">        var2.setDisplayLevel(var1);</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>这个是Marker对象中的一个方法，但是从官方下载下来的文档中并没有提到这个方法，自己也没有去使用。了解过的朋友可以在评论区回复我一下，谢谢。</p>\n<h4 id=\"AndroidStudio第二次编译之后地图不显示\"><a href=\"#AndroidStudio第二次编译之后地图不显示\" class=\"headerlink\" title=\"AndroidStudio第二次编译之后地图不显示\"></a>AndroidStudio第二次编译之后地图不显示</h4><p>　　AS2.2版本加了 <code>Instant Run</code> 模式，通常情况下这回节省我们很多时间，比如当我们修改了界面布局，想要在手机上看一下效果，没有必要重启整个应用，这个时候就可以使用 <code>Instant Run</code> 模式了，ide内部会进行判断是否需要重启整个应用，如果不需要，只会热重启当前页面。为这个功能点赞啊，有的时候页面藏的比较深，需要多步操作才能打开，这个功能可以节省很多时间。<br><img src=\"/image/gaode/install_run.png\" alt=\"Install Run\"><br>但是啊但是。。。我在Fragment中使用高德地图的时候，使用这个功能会出现地图加载不出来（一片空白），但是定位成功的问题。刚开始的是吓尿了，以为代码出了什么问题，直到我提了工单，看到回复后放心了：<br><img src=\"/image/gaode/install_run_bug.png\" alt=\"高德工单\"></p>\n<blockquote>\n<p>您好，Instant Run 确实是不支持这种，目前他们也没有给出解决方案，这里有详细的解释<a href=\"http://stackoverflow.com/questions/33902467/android-studio-2-0-why-does-instant-run-not-work-when-modifying-xml-layout-reso\" target=\"_blank\" rel=\"external\">http://stackoverflow.com/questions/33902467/android-studio-2-0-why-does-instant-run-not-work-when-modifying-xml-layout-reso</a><br>感谢您的致信，欢迎持续关注高德开放平台！</p>\n</blockquote>\n<h4 id=\"地图加载完成的回调函数\"><a href=\"#地图加载完成的回调函数\" class=\"headerlink\" title=\"地图加载完成的回调函数\"></a>地图加载完成的回调函数</h4><p>因为业务上的原因，需要在地图加载完成后做一些操作，当时官网的开发者文档上没有啊，于是又提了工单，接到回复后又放心了</p>\n<blockquote>\n<p>您好，AMap 提供了地图加载完成的方法， 可详见：<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">aMap.setOnMapLoadedListener(<span class=\"keyword\">new</span> AMap.OnMapLoadedListener() &#123;</div><div class=\"line\">\t\t\t<span class=\"meta\">@Override</span></div><div class=\"line\">\t\t\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onMapLoaded</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">\t\t\t&#125;</div><div class=\"line\">\t\t&#125;);</div></pre></td></tr></table></figure></p>\n</blockquote>\n<p>感谢您的致信，欢迎持续关注高德开放平台！</p>\n<h4 id=\"步行路径规划当距离比较短时路线不在地图中间位置\"><a href=\"#步行路径规划当距离比较短时路线不在地图中间位置\" class=\"headerlink\" title=\"步行路径规划当距离比较短时路线不在地图中间位置\"></a>步行路径规划当距离比较短时路线不在地图中间位置</h4><p>　　由于业务上的原因，自己的位置和目的地的距离较短，需要步行路径规划，但是啊但是，路径可以规划成功，但是把路径添加到地图上的时候，路径没有显示在屏幕中间位置啊，而是诡异的飘到了一边。反复检查了N边代码，没有问题啊，和官网demo一样啊，把坐标点抠出来，改一下官网demo的起始点(就是两个坐标值),然后，也出现了路径飘到一边的情况，于是又去提了万能的工单，看到工单的回复后，我又放心了<br><img src=\"/image/gaode/walk_route_bug.png\" alt=\"高德工单\"></p>\n<blockquote>\n<p>我：Demo是从官网的demo上改的，就在<code>om.amap.map3d.demo.route</code>包下的<code>WalkRouteActivity</code>这个类里面，改了一下mStartPoint，和 mEndPoint 的值，附件图片是我修改之后的值<br> <code>private LatLonPoint mStartPoint = new LatLonPoint(39.990145, 116.481194);</code><br><code>private LatLonPoint mEndPoint = new LatLonPoint(39.99026006391499, 116.4813472288069);</code><br>从官网下载回来后只改了这两个地方，把key换成了自己的，其他地方的代码没有动。<br>如果可以的话，你们可以试一下，找两个距离非常近的点。<br>答复：<br>您好，这个问题确实是由SDK内部处理不当引起的bug，我们会在下个版本中修复，给您带来不便深表歉意<br>感谢您的致信，欢迎持续关注高德开放平台！</p>\n</blockquote>\n<p>解决方法：<br>判断两个点的距离，小于500米的时候，取起始点位置连线的中间位置作为地图中间点，强制将地图上的此位置拉到屏幕中间。</p>\n<hr>\n<p>以上</p>\n","excerpt":"<p>这篇博客是关于高德使用中遇到的问题，或许是因为开发文档中没有说明，或许是因为自己段位不够，反正就是遇到坑了。<br>","more":"</p>\n<h4 id=\"关于定位点和覆盖物\"><a href=\"#关于定位点和覆盖物\" class=\"headerlink\" title=\"关于定位点和覆盖物\"></a>关于定位点和覆盖物</h4><p>　　有这么一个业务需求：定位手机所在位置成功后，请求服务器数据，服务器返回手机所在地点指定范围内的的点，然后把这些点添加到地图上。<br>刚开始还没有什么问题，按照官网的demo来做的，到后来数据量多的时候就出现了marker重叠的问题。当然，marker点多的话，重叠也是无法避免的，但是，把定位的标记也给覆盖掉了，这就有点不好了。也没有查到相关的api，demo上添加定位点也是用的marker，估计都是同一级别，按照添加的先后顺序覆盖叠加。<br>后来找到了一个方法 <code>mLocMarker.setToTop();</code>这样可以把某个marker设置到最高的层级显示。还有一个方法是<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">setDisplayLevel</span><span class=\"params\">(<span class=\"keyword\">int</span> var1)</span> </span>&#123;</div><div class=\"line\">    IMarkerAction var2 = <span class=\"keyword\">this</span>.a.getIMarkerAction();</div><div class=\"line\">    <span class=\"keyword\">if</span>(var2 != <span class=\"keyword\">null</span>) &#123;</div><div class=\"line\">        var2.setDisplayLevel(var1);</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>这个是Marker对象中的一个方法，但是从官方下载下来的文档中并没有提到这个方法，自己也没有去使用。了解过的朋友可以在评论区回复我一下，谢谢。</p>\n<h4 id=\"AndroidStudio第二次编译之后地图不显示\"><a href=\"#AndroidStudio第二次编译之后地图不显示\" class=\"headerlink\" title=\"AndroidStudio第二次编译之后地图不显示\"></a>AndroidStudio第二次编译之后地图不显示</h4><p>　　AS2.2版本加了 <code>Instant Run</code> 模式，通常情况下这回节省我们很多时间，比如当我们修改了界面布局，想要在手机上看一下效果，没有必要重启整个应用，这个时候就可以使用 <code>Instant Run</code> 模式了，ide内部会进行判断是否需要重启整个应用，如果不需要，只会热重启当前页面。为这个功能点赞啊，有的时候页面藏的比较深，需要多步操作才能打开，这个功能可以节省很多时间。<br><img src=\"/image/gaode/install_run.png\" alt=\"Install Run\"><br>但是啊但是。。。我在Fragment中使用高德地图的时候，使用这个功能会出现地图加载不出来（一片空白），但是定位成功的问题。刚开始的是吓尿了，以为代码出了什么问题，直到我提了工单，看到回复后放心了：<br><img src=\"/image/gaode/install_run_bug.png\" alt=\"高德工单\"></p>\n<blockquote>\n<p>您好，Instant Run 确实是不支持这种，目前他们也没有给出解决方案，这里有详细的解释<a href=\"http://stackoverflow.com/questions/33902467/android-studio-2-0-why-does-instant-run-not-work-when-modifying-xml-layout-reso\">http://stackoverflow.com/questions/33902467/android-studio-2-0-why-does-instant-run-not-work-when-modifying-xml-layout-reso</a><br>感谢您的致信，欢迎持续关注高德开放平台！</p>\n</blockquote>\n<h4 id=\"地图加载完成的回调函数\"><a href=\"#地图加载完成的回调函数\" class=\"headerlink\" title=\"地图加载完成的回调函数\"></a>地图加载完成的回调函数</h4><p>因为业务上的原因，需要在地图加载完成后做一些操作，当时官网的开发者文档上没有啊，于是又提了工单，接到回复后又放心了</p>\n<blockquote>\n<p>您好，AMap 提供了地图加载完成的方法， 可详见：<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">aMap.setOnMapLoadedListener(<span class=\"keyword\">new</span> AMap.OnMapLoadedListener() &#123;</div><div class=\"line\">\t\t\t<span class=\"meta\">@Override</span></div><div class=\"line\">\t\t\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onMapLoaded</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">\t\t\t&#125;</div><div class=\"line\">\t\t&#125;);</div></pre></td></tr></table></figure></p>\n</blockquote>\n<p>感谢您的致信，欢迎持续关注高德开放平台！</p>\n<h4 id=\"步行路径规划当距离比较短时路线不在地图中间位置\"><a href=\"#步行路径规划当距离比较短时路线不在地图中间位置\" class=\"headerlink\" title=\"步行路径规划当距离比较短时路线不在地图中间位置\"></a>步行路径规划当距离比较短时路线不在地图中间位置</h4><p>　　由于业务上的原因，自己的位置和目的地的距离较短，需要步行路径规划，但是啊但是，路径可以规划成功，但是把路径添加到地图上的时候，路径没有显示在屏幕中间位置啊，而是诡异的飘到了一边。反复检查了N边代码，没有问题啊，和官网demo一样啊，把坐标点抠出来，改一下官网demo的起始点(就是两个坐标值),然后，也出现了路径飘到一边的情况，于是又去提了万能的工单，看到工单的回复后，我又放心了<br><img src=\"/image/gaode/walk_route_bug.png\" alt=\"高德工单\"></p>\n<blockquote>\n<p>我：Demo是从官网的demo上改的，就在<code>om.amap.map3d.demo.route</code>包下的<code>WalkRouteActivity</code>这个类里面，改了一下mStartPoint，和 mEndPoint 的值，附件图片是我修改之后的值<br> <code>private LatLonPoint mStartPoint = new LatLonPoint(39.990145, 116.481194);</code><br><code>private LatLonPoint mEndPoint = new LatLonPoint(39.99026006391499, 116.4813472288069);</code><br>从官网下载回来后只改了这两个地方，把key换成了自己的，其他地方的代码没有动。<br>如果可以的话，你们可以试一下，找两个距离非常近的点。<br>答复：<br>您好，这个问题确实是由SDK内部处理不当引起的bug，我们会在下个版本中修复，给您带来不便深表歉意<br>感谢您的致信，欢迎持续关注高德开放平台！</p>\n</blockquote>\n<p>解决方法：<br>判断两个点的距离，小于500米的时候，取起始点位置连线的中间位置作为地图中间点，强制将地图上的此位置拉到屏幕中间。</p>\n<hr>\n<p>以上</p>"},{"title":"《我的安卓爬坑之旅》-高德地图遇到的坑-3","date":"2017-12-19T06:49:49.000Z","keywords":"Android,高德地图","_content":"这次是逆地理位置编码出现的坑，在提交工单后，官方回复是badcase，已经收录，后续着手优化。\nSDK版本号：`com.amap.api:location:3.6.1`、`com.amap.api:map3d:4.1.3`、`com.amap.api:map3d-native:4.1.3`、`com.amap.api:search:5.5.0`。\n<!--more-->\n过程如下：\n2017年12月5号接到用户反馈，定位位置准确，但是显示的中文具体位置不准确，误差大概在千米级别。当时就麻爪了，这可不是误差，这是错误。\n1. 首先排除网络以及信号问题：\n根据用户反馈，得知用户所在位置信号良好，周围不存在遮盖物，也不在地下室之类的信号差的地方，不存在定位偏差问题(app上显示的定位和手机位置一致)。\n网络状况良好，浏览器可以打开网页、app可以进行其他操作。\n先排除用户使用情况的原因是：接到过多次反馈，是因为用户没有看app提示，或者直接忽略掉提示导致的误报。\n2. 排除代码问题\n* 在测试服上进行同样操作，得到的坐标值正确(手机拿到坐标值在app上显示，然后把坐标拿到高德坐标拾取系统进行定位，显示位置一致)，定位以及展示代码没问题。\n* 拿到坐标值在客户端进行逆地理位置编码(`RegeocodeQuery query = new RegeocodeQuery(new LatLonPoint(lat, lon), 200,GeocodeSearch.AMAP);\ngeocoderSearch.getFromLocationAsyn(query);`)，得到的地理位置正确，误差在所传参数以内，改变逆地理位置编码的经确定，改变定位位置(北京市内随机取点)，多次操作，定位及展示以及逆地理位置编码均正确。\n到这，就有点抓狂了，这TM什么问题，到底哪里出问题了。。\n* 全国范围内取点，代码参数和生产环境保持一致，祈祷着或许是因为在新疆这种空旷、建筑物少的地方，误差可能会大些(好几公里没有建筑物，没有明显地标，总不能展示第几课白杨树下吧，23333)。抓到了偏远地区的坐标以及十分空旷地区的坐标，展示以及你地理位置编码均正确。\n* 这时候也冷静下来了，出了问题不一定是自己代码问题吗，有可能是二方、三方代码的锅，只是习惯上养成了出了问题先找自己的原因，找不到再找其他的。找高德，提工单，详细描述问题：\n> 具体情况这样：\n我把(119.564298,31.995402)这个坐标用客户端调用逆地理位置编码接口:\nRegeocodeQuery query = new RegeocodeQuery(new LatLonPoint(lat, lon), 200,GeocodeSearch.AMAP);\ngeocoderSearch.getFromLocationAsyn(query);\n在回调函数public void onRegeocodeSearched(RegeocodeResult result, int rCode)中取得结果：result.getRegeocodeAddress().getFormatAddress() 是**江苏省镇江市丹阳市云阳镇北环路6号**。\n但实际上**江苏省镇江市丹阳市云阳镇北环路6号**这个地址与上述坐标点距离很远(这个是在高德坐标拾取器 http://lbs.amap.com/console/show/picker 上看到的)。\n3. 高德回复\n第二天高德给了回复：\n> 您好，感谢反馈，目前这块的算法确实有一些问题，您的badcase我们已经收录，后续会针对这块做优化。给您造成不便敬请谅解。\n感谢您的致信，欢迎持续关注高德开放平台！\n\n![geocoderSearch](/image/gaode/geocoderSearch_bug.png)\n----\n以上","source":"_posts/《我的安卓爬坑之旅》-高德地图遇到的坑-3.md","raw":"---\ntitle: 《我的安卓爬坑之旅》-高德地图遇到的坑-3\ndate: 2017-12-19 14:49:49\ntags: [Android爬坑之旅,Android]\nkeywords: Android,高德地图\n---\n这次是逆地理位置编码出现的坑，在提交工单后，官方回复是badcase，已经收录，后续着手优化。\nSDK版本号：`com.amap.api:location:3.6.1`、`com.amap.api:map3d:4.1.3`、`com.amap.api:map3d-native:4.1.3`、`com.amap.api:search:5.5.0`。\n<!--more-->\n过程如下：\n2017年12月5号接到用户反馈，定位位置准确，但是显示的中文具体位置不准确，误差大概在千米级别。当时就麻爪了，这可不是误差，这是错误。\n1. 首先排除网络以及信号问题：\n根据用户反馈，得知用户所在位置信号良好，周围不存在遮盖物，也不在地下室之类的信号差的地方，不存在定位偏差问题(app上显示的定位和手机位置一致)。\n网络状况良好，浏览器可以打开网页、app可以进行其他操作。\n先排除用户使用情况的原因是：接到过多次反馈，是因为用户没有看app提示，或者直接忽略掉提示导致的误报。\n2. 排除代码问题\n* 在测试服上进行同样操作，得到的坐标值正确(手机拿到坐标值在app上显示，然后把坐标拿到高德坐标拾取系统进行定位，显示位置一致)，定位以及展示代码没问题。\n* 拿到坐标值在客户端进行逆地理位置编码(`RegeocodeQuery query = new RegeocodeQuery(new LatLonPoint(lat, lon), 200,GeocodeSearch.AMAP);\ngeocoderSearch.getFromLocationAsyn(query);`)，得到的地理位置正确，误差在所传参数以内，改变逆地理位置编码的经确定，改变定位位置(北京市内随机取点)，多次操作，定位及展示以及逆地理位置编码均正确。\n到这，就有点抓狂了，这TM什么问题，到底哪里出问题了。。\n* 全国范围内取点，代码参数和生产环境保持一致，祈祷着或许是因为在新疆这种空旷、建筑物少的地方，误差可能会大些(好几公里没有建筑物，没有明显地标，总不能展示第几课白杨树下吧，23333)。抓到了偏远地区的坐标以及十分空旷地区的坐标，展示以及你地理位置编码均正确。\n* 这时候也冷静下来了，出了问题不一定是自己代码问题吗，有可能是二方、三方代码的锅，只是习惯上养成了出了问题先找自己的原因，找不到再找其他的。找高德，提工单，详细描述问题：\n> 具体情况这样：\n我把(119.564298,31.995402)这个坐标用客户端调用逆地理位置编码接口:\nRegeocodeQuery query = new RegeocodeQuery(new LatLonPoint(lat, lon), 200,GeocodeSearch.AMAP);\ngeocoderSearch.getFromLocationAsyn(query);\n在回调函数public void onRegeocodeSearched(RegeocodeResult result, int rCode)中取得结果：result.getRegeocodeAddress().getFormatAddress() 是**江苏省镇江市丹阳市云阳镇北环路6号**。\n但实际上**江苏省镇江市丹阳市云阳镇北环路6号**这个地址与上述坐标点距离很远(这个是在高德坐标拾取器 http://lbs.amap.com/console/show/picker 上看到的)。\n3. 高德回复\n第二天高德给了回复：\n> 您好，感谢反馈，目前这块的算法确实有一些问题，您的badcase我们已经收录，后续会针对这块做优化。给您造成不便敬请谅解。\n感谢您的致信，欢迎持续关注高德开放平台！\n\n![geocoderSearch](/image/gaode/geocoderSearch_bug.png)\n----\n以上","slug":"《我的安卓爬坑之旅》-高德地图遇到的坑-3","published":1,"updated":"2018-08-04T04:42:48.952Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjl3vbtrn002zisdg4pz76o5o","content":"<p>这次是逆地理位置编码出现的坑，在提交工单后，官方回复是badcase，已经收录，后续着手优化。<br>SDK版本号：<code>com.amap.api:location:3.6.1</code>、<code>com.amap.api:map3d:4.1.3</code>、<code>com.amap.api:map3d-native:4.1.3</code>、<code>com.amap.api:search:5.5.0</code>。<br><a id=\"more\"></a><br>过程如下：<br>2017年12月5号接到用户反馈，定位位置准确，但是显示的中文具体位置不准确，误差大概在千米级别。当时就麻爪了，这可不是误差，这是错误。</p>\n<ol>\n<li>首先排除网络以及信号问题：<br>根据用户反馈，得知用户所在位置信号良好，周围不存在遮盖物，也不在地下室之类的信号差的地方，不存在定位偏差问题(app上显示的定位和手机位置一致)。<br>网络状况良好，浏览器可以打开网页、app可以进行其他操作。<br>先排除用户使用情况的原因是：接到过多次反馈，是因为用户没有看app提示，或者直接忽略掉提示导致的误报。</li>\n<li>排除代码问题</li>\n</ol>\n<ul>\n<li>在测试服上进行同样操作，得到的坐标值正确(手机拿到坐标值在app上显示，然后把坐标拿到高德坐标拾取系统进行定位，显示位置一致)，定位以及展示代码没问题。</li>\n<li>拿到坐标值在客户端进行逆地理位置编码(<code>RegeocodeQuery query = new RegeocodeQuery(new LatLonPoint(lat, lon), 200,GeocodeSearch.AMAP);\ngeocoderSearch.getFromLocationAsyn(query);</code>)，得到的地理位置正确，误差在所传参数以内，改变逆地理位置编码的经确定，改变定位位置(北京市内随机取点)，多次操作，定位及展示以及逆地理位置编码均正确。<br>到这，就有点抓狂了，这TM什么问题，到底哪里出问题了。。</li>\n<li>全国范围内取点，代码参数和生产环境保持一致，祈祷着或许是因为在新疆这种空旷、建筑物少的地方，误差可能会大些(好几公里没有建筑物，没有明显地标，总不能展示第几课白杨树下吧，23333)。抓到了偏远地区的坐标以及十分空旷地区的坐标，展示以及你地理位置编码均正确。</li>\n<li>这时候也冷静下来了，出了问题不一定是自己代码问题吗，有可能是二方、三方代码的锅，只是习惯上养成了出了问题先找自己的原因，找不到再找其他的。找高德，提工单，详细描述问题：<blockquote>\n<p>具体情况这样：<br>我把(119.564298,31.995402)这个坐标用客户端调用逆地理位置编码接口:<br>RegeocodeQuery query = new RegeocodeQuery(new LatLonPoint(lat, lon), 200,GeocodeSearch.AMAP);<br>geocoderSearch.getFromLocationAsyn(query);<br>在回调函数public void onRegeocodeSearched(RegeocodeResult result, int rCode)中取得结果：result.getRegeocodeAddress().getFormatAddress() 是<strong>江苏省镇江市丹阳市云阳镇北环路6号</strong>。<br>但实际上<strong>江苏省镇江市丹阳市云阳镇北环路6号</strong>这个地址与上述坐标点距离很远(这个是在高德坐标拾取器 <a href=\"http://lbs.amap.com/console/show/picker\" target=\"_blank\" rel=\"external\">http://lbs.amap.com/console/show/picker</a> 上看到的)。</p>\n</blockquote>\n</li>\n</ul>\n<ol>\n<li>高德回复<br>第二天高德给了回复：<blockquote>\n<p>您好，感谢反馈，目前这块的算法确实有一些问题，您的badcase我们已经收录，后续会针对这块做优化。给您造成不便敬请谅解。<br>感谢您的致信，欢迎持续关注高德开放平台！</p>\n</blockquote>\n</li>\n</ol>\n<h2 id=\"\"><a href=\"#\" class=\"headerlink\" title=\"\"></a><img src=\"/image/gaode/geocoderSearch_bug.png\" alt=\"geocoderSearch\"></h2><p>以上</p>\n","excerpt":"<p>这次是逆地理位置编码出现的坑，在提交工单后，官方回复是badcase，已经收录，后续着手优化。<br>SDK版本号：<code>com.amap.api:location:3.6.1</code>、<code>com.amap.api:map3d:4.1.3</code>、<code>com.amap.api:map3d-native:4.1.3</code>、<code>com.amap.api:search:5.5.0</code>。<br>","more":"<br>过程如下：<br>2017年12月5号接到用户反馈，定位位置准确，但是显示的中文具体位置不准确，误差大概在千米级别。当时就麻爪了，这可不是误差，这是错误。</p>\n<ol>\n<li>首先排除网络以及信号问题：<br>根据用户反馈，得知用户所在位置信号良好，周围不存在遮盖物，也不在地下室之类的信号差的地方，不存在定位偏差问题(app上显示的定位和手机位置一致)。<br>网络状况良好，浏览器可以打开网页、app可以进行其他操作。<br>先排除用户使用情况的原因是：接到过多次反馈，是因为用户没有看app提示，或者直接忽略掉提示导致的误报。</li>\n<li>排除代码问题</li>\n</ol>\n<ul>\n<li>在测试服上进行同样操作，得到的坐标值正确(手机拿到坐标值在app上显示，然后把坐标拿到高德坐标拾取系统进行定位，显示位置一致)，定位以及展示代码没问题。</li>\n<li>拿到坐标值在客户端进行逆地理位置编码(<code>RegeocodeQuery query = new RegeocodeQuery(new LatLonPoint(lat, lon), 200,GeocodeSearch.AMAP);\ngeocoderSearch.getFromLocationAsyn(query);</code>)，得到的地理位置正确，误差在所传参数以内，改变逆地理位置编码的经确定，改变定位位置(北京市内随机取点)，多次操作，定位及展示以及逆地理位置编码均正确。<br>到这，就有点抓狂了，这TM什么问题，到底哪里出问题了。。</li>\n<li>全国范围内取点，代码参数和生产环境保持一致，祈祷着或许是因为在新疆这种空旷、建筑物少的地方，误差可能会大些(好几公里没有建筑物，没有明显地标，总不能展示第几课白杨树下吧，23333)。抓到了偏远地区的坐标以及十分空旷地区的坐标，展示以及你地理位置编码均正确。</li>\n<li>这时候也冷静下来了，出了问题不一定是自己代码问题吗，有可能是二方、三方代码的锅，只是习惯上养成了出了问题先找自己的原因，找不到再找其他的。找高德，提工单，详细描述问题：<blockquote>\n<p>具体情况这样：<br>我把(119.564298,31.995402)这个坐标用客户端调用逆地理位置编码接口:<br>RegeocodeQuery query = new RegeocodeQuery(new LatLonPoint(lat, lon), 200,GeocodeSearch.AMAP);<br>geocoderSearch.getFromLocationAsyn(query);<br>在回调函数public void onRegeocodeSearched(RegeocodeResult result, int rCode)中取得结果：result.getRegeocodeAddress().getFormatAddress() 是<strong>江苏省镇江市丹阳市云阳镇北环路6号</strong>。<br>但实际上<strong>江苏省镇江市丹阳市云阳镇北环路6号</strong>这个地址与上述坐标点距离很远(这个是在高德坐标拾取器 <a href=\"http://lbs.amap.com/console/show/picker\">http://lbs.amap.com/console/show/picker</a> 上看到的)。</p>\n</blockquote>\n</li>\n</ul>\n<ol>\n<li>高德回复<br>第二天高德给了回复：<blockquote>\n<p>您好，感谢反馈，目前这块的算法确实有一些问题，您的badcase我们已经收录，后续会针对这块做优化。给您造成不便敬请谅解。<br>感谢您的致信，欢迎持续关注高德开放平台！</p>\n</blockquote>\n</li>\n</ol>\n<h2 id=\"\"><a href=\"#\" class=\"headerlink\" title=\"\"></a><img src=\"/image/gaode/geocoderSearch_bug.png\" alt=\"geocoderSearch\"></h2><p>以上</p>"},{"title":"《我的安卓爬坑之旅》","date":"2016-11-21T08:07:25.000Z","keywords":"Android","_content":"准备记录一下自己在工作学习中遇到的bug以及解决方案。不定期更新。\n内容包括但不限于android，J2EE，HTML，以及各种各样的需求。\n<!-- more -->\n形式如下：\nbug：\n①出现bug的场景\n②尽可能放上代码\n③分析原因：源码及原理\n④解决方案：思路及尽可能的放上代码\n需求：\n①产品需求：尽可能详细描述产品需求，尽量能放上UI\n②分析可能的解决方案：思路\n③解决过程：自己的思路及解决方案和踩到的坑\n④解决方法：尽可能放上关键代码或者伪代码\n⑤其他：一些意想不到的事。\n<hr>\n大家也可以发邮件到我的邮箱，把自己遇到的问题和大家分享一下\nemail: huangyuan@huangyuanlove.com\n","source":"_posts/《我的安卓爬坑之旅》.md","raw":"---\ntitle: 《我的安卓爬坑之旅》\ndate: 2016-11-21 16:07:25\ntags: [Android,Android爬坑之旅]\nkeywords: Android\n---\n准备记录一下自己在工作学习中遇到的bug以及解决方案。不定期更新。\n内容包括但不限于android，J2EE，HTML，以及各种各样的需求。\n<!-- more -->\n形式如下：\nbug：\n①出现bug的场景\n②尽可能放上代码\n③分析原因：源码及原理\n④解决方案：思路及尽可能的放上代码\n需求：\n①产品需求：尽可能详细描述产品需求，尽量能放上UI\n②分析可能的解决方案：思路\n③解决过程：自己的思路及解决方案和踩到的坑\n④解决方法：尽可能放上关键代码或者伪代码\n⑤其他：一些意想不到的事。\n<hr>\n大家也可以发邮件到我的邮箱，把自己遇到的问题和大家分享一下\nemail: huangyuan@huangyuanlove.com\n","slug":"《我的安卓爬坑之旅》","published":1,"updated":"2018-08-04T04:42:55.001Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjl3vbtro0031isdg5etm2hmm","content":"<p>准备记录一下自己在工作学习中遇到的bug以及解决方案。不定期更新。<br>内容包括但不限于android，J2EE，HTML，以及各种各样的需求。<br><a id=\"more\"></a><br>形式如下：<br>bug：<br>①出现bug的场景<br>②尽可能放上代码<br>③分析原因：源码及原理<br>④解决方案：思路及尽可能的放上代码<br>需求：<br>①产品需求：尽可能详细描述产品需求，尽量能放上UI<br>②分析可能的解决方案：思路<br>③解决过程：自己的思路及解决方案和踩到的坑<br>④解决方法：尽可能放上关键代码或者伪代码<br>⑤其他：一些意想不到的事。</p>\n<p><hr><br>大家也可以发邮件到我的邮箱，把自己遇到的问题和大家分享一下<br>email: huangyuan@huangyuanlove.com</p>\n","excerpt":"<p>准备记录一下自己在工作学习中遇到的bug以及解决方案。不定期更新。<br>内容包括但不限于android，J2EE，HTML，以及各种各样的需求。<br>","more":"<br>形式如下：<br>bug：<br>①出现bug的场景<br>②尽可能放上代码<br>③分析原因：源码及原理<br>④解决方案：思路及尽可能的放上代码<br>需求：<br>①产品需求：尽可能详细描述产品需求，尽量能放上UI<br>②分析可能的解决方案：思路<br>③解决过程：自己的思路及解决方案和踩到的坑<br>④解决方法：尽可能放上关键代码或者伪代码<br>⑤其他：一些意想不到的事。</p>\n<p><hr><br>大家也可以发邮件到我的邮箱，把自己遇到的问题和大家分享一下<br>email: huangyuan@huangyuanlove.com</p>"},{"title":"写在2016年末","date":"2016-12-31T15:29:04.000Z","category":null,"_content":"2016年的最后一天的最后半个小时了，写写这一年的收获总结和2017的计划吧。\n一个字总结了一下2016年：穷。\n当然这是开玩笑式的总结，但也是最接近事实的了。\n<!--more-->\n#### 2016总结\n技术方面：\n&nbsp;&nbsp;&nbsp;&nbsp;自从踏上IT这条不归路开始，就打算做一个全栈攻城狮，从敲下第一行`hello world`到自己独立用java写一个完整的大作业再到写出实际可用的程序到现在的工作，仔细想想已经五年多了吧。但是这仅仅是个开始，我对自己现在的定位是全栈攻城狮的道路刚刚慢出第一步，现在也就算是个全栈学徒吧。\n<table><tr><th>编程技能</th><th>自定级别</th></tr><tr><td>python</td><td>入门</td></tr><tr><td>HTML</td><td>初级</td></tr><tr><td>J2EE</td><td>初级</td></tr><tr><td>JAVA</td><td>中级</td></tr><tr><td>Android</td><td>中级</td></tr><tr><td>Linux</td><td>中级</td></tr></table>\n\n* 在工作中也踩过、填过、挖过很多坑，万幸的是一直坚持了下来，没有放弃，也没有想过要转行的事，就想一直在这个行业发展，努力提高自己的技术。\n* 15年双十二和今年的十二月四号，都参加了`开源中国`举办的`源创汇`年终盛典，接触到了很多大牛(虽然他们不曾记得我)，接触到很多以前没有见识过也没有想象过的东西，对自己的成长有很大帮助。\n* 开通了自己的博客(gitpage),把博客从csdn迁移到github上，租用了腾讯云主机，备案了自己的域名，有了自己的简单的网站，可以写一些自己感兴趣的东西(自由的感觉真好，法无禁止皆可为)。\n* 也感谢这一年来小伙伴的帮助，幸好有你们，帮我解决了困难。\n* 当然，在这一年中也有很多事情不是那么顺利，从上家公司离职，从10月到12月，中间休息了两个月，回了一次家，跑去深圳和妹子玩了四五天的样子(几乎是全部时间都泡在图书馆了，沉迷学习无法自拔)，其余时间也就是看看书，打打游戏之类的，总之这两个月的时间大部分都被浪费掉了，没有任何收获。\n\n生活上也没啥好说的，业余时间就是宅在家里，看看书，敲敲代码，打打游戏，不喜欢出去逛，貌似好像是在6、7月份的样子，二哥来北京玩，爬了一次八达岭长城，除此之外，就是去了三次漫展，其他的就没有什么了。\n#### 2017计划\n首先，最重要的就是提升自己的技术能力：\n\n* python达到初级水平;html方面学习一下h5;\n* J2EE方面学习一下ssm框架、nginx;\n* JAVA和Android方面尽可能的提升自己，尽量在两年内能初步达到高级水平;\n* Linux方面，熟悉一下vim，了解以下服务器方向的相关知识，毕竟自己只是拿linux做开发，没有把精力放在服务器假设方向。\n\n生活方面就尽量改变一下自己宅的属性,尽量多出去走走吧(这个有点难，比提升技术实力还要难)\n\n----\n借用一本小说中的一段话吧：\n\n><pre>  “其实所有的智慧生物都在饮鸩止渴。所有的智慧生物都在通过不断的科技进步，不断的探索未知来满足着自己的探索欲望。这些科技，以及理论还有知识，不是好东西，它们是毒药，它们会让文明形成强烈的依赖症，当所有的未知都被探索完毕的时候，这种鸩毒就会最终发作，并且让这个文明最终陷入到毒发身亡的境地之中。可是最可笑的是，虽然这个道理十分明显，可是包括我在内的所有文明，都无法逃脱这个怪圈。”\n    “我……我怎么可以停止呢？就算它们明明是毒药，可是我也要不断的去吃啊。”萧宇喃喃自语着，“如果我的科技不能进步，如果现在就斩断我进步的道路，我现在就会发疯的。这一点是天生注定的，当我还在地球上的时候，当我拿起笔，拿起书本，学习到第一个数学公式，学习到第一个物理定理的时候，这种鸩毒就已经在我的灵魂深处深深的扎下了根，让我终其一生不得解脱。我的毒瘾会越来越大，我所需要的鸩毒分量会越来越多，我只能继续这样维持下去。以后再毒发，总比现在就毒发要好。”\n    这个死在旅途之中的文明，让萧宇想到了很多很多，对萧宇的灵魂造成了很深的触动。可是萧宇已经无法停下自己的脚步了。浩瀚广阔的星空，无边无际的宇宙，就像是美丽异常的罂粟花，明知道危险，可是还是有不计其数的文明，包括萧宇在内都踏了进去，并且一个个踊跃异常，生怕自己吸食毒品的速度要比其余的文明慢了一点。\n\n</pre>\n----\n以上。\n","source":"_posts/写在2016年末.md","raw":"---\ntitle: 写在2016年末\ndate: 2016-12-31 23:29:04\ntags: [乱七八糟]\ncategory: \n---\n2016年的最后一天的最后半个小时了，写写这一年的收获总结和2017的计划吧。\n一个字总结了一下2016年：穷。\n当然这是开玩笑式的总结，但也是最接近事实的了。\n<!--more-->\n#### 2016总结\n技术方面：\n&nbsp;&nbsp;&nbsp;&nbsp;自从踏上IT这条不归路开始，就打算做一个全栈攻城狮，从敲下第一行`hello world`到自己独立用java写一个完整的大作业再到写出实际可用的程序到现在的工作，仔细想想已经五年多了吧。但是这仅仅是个开始，我对自己现在的定位是全栈攻城狮的道路刚刚慢出第一步，现在也就算是个全栈学徒吧。\n<table><tr><th>编程技能</th><th>自定级别</th></tr><tr><td>python</td><td>入门</td></tr><tr><td>HTML</td><td>初级</td></tr><tr><td>J2EE</td><td>初级</td></tr><tr><td>JAVA</td><td>中级</td></tr><tr><td>Android</td><td>中级</td></tr><tr><td>Linux</td><td>中级</td></tr></table>\n\n* 在工作中也踩过、填过、挖过很多坑，万幸的是一直坚持了下来，没有放弃，也没有想过要转行的事，就想一直在这个行业发展，努力提高自己的技术。\n* 15年双十二和今年的十二月四号，都参加了`开源中国`举办的`源创汇`年终盛典，接触到了很多大牛(虽然他们不曾记得我)，接触到很多以前没有见识过也没有想象过的东西，对自己的成长有很大帮助。\n* 开通了自己的博客(gitpage),把博客从csdn迁移到github上，租用了腾讯云主机，备案了自己的域名，有了自己的简单的网站，可以写一些自己感兴趣的东西(自由的感觉真好，法无禁止皆可为)。\n* 也感谢这一年来小伙伴的帮助，幸好有你们，帮我解决了困难。\n* 当然，在这一年中也有很多事情不是那么顺利，从上家公司离职，从10月到12月，中间休息了两个月，回了一次家，跑去深圳和妹子玩了四五天的样子(几乎是全部时间都泡在图书馆了，沉迷学习无法自拔)，其余时间也就是看看书，打打游戏之类的，总之这两个月的时间大部分都被浪费掉了，没有任何收获。\n\n生活上也没啥好说的，业余时间就是宅在家里，看看书，敲敲代码，打打游戏，不喜欢出去逛，貌似好像是在6、7月份的样子，二哥来北京玩，爬了一次八达岭长城，除此之外，就是去了三次漫展，其他的就没有什么了。\n#### 2017计划\n首先，最重要的就是提升自己的技术能力：\n\n* python达到初级水平;html方面学习一下h5;\n* J2EE方面学习一下ssm框架、nginx;\n* JAVA和Android方面尽可能的提升自己，尽量在两年内能初步达到高级水平;\n* Linux方面，熟悉一下vim，了解以下服务器方向的相关知识，毕竟自己只是拿linux做开发，没有把精力放在服务器假设方向。\n\n生活方面就尽量改变一下自己宅的属性,尽量多出去走走吧(这个有点难，比提升技术实力还要难)\n\n----\n借用一本小说中的一段话吧：\n\n><pre>  “其实所有的智慧生物都在饮鸩止渴。所有的智慧生物都在通过不断的科技进步，不断的探索未知来满足着自己的探索欲望。这些科技，以及理论还有知识，不是好东西，它们是毒药，它们会让文明形成强烈的依赖症，当所有的未知都被探索完毕的时候，这种鸩毒就会最终发作，并且让这个文明最终陷入到毒发身亡的境地之中。可是最可笑的是，虽然这个道理十分明显，可是包括我在内的所有文明，都无法逃脱这个怪圈。”\n    “我……我怎么可以停止呢？就算它们明明是毒药，可是我也要不断的去吃啊。”萧宇喃喃自语着，“如果我的科技不能进步，如果现在就斩断我进步的道路，我现在就会发疯的。这一点是天生注定的，当我还在地球上的时候，当我拿起笔，拿起书本，学习到第一个数学公式，学习到第一个物理定理的时候，这种鸩毒就已经在我的灵魂深处深深的扎下了根，让我终其一生不得解脱。我的毒瘾会越来越大，我所需要的鸩毒分量会越来越多，我只能继续这样维持下去。以后再毒发，总比现在就毒发要好。”\n    这个死在旅途之中的文明，让萧宇想到了很多很多，对萧宇的灵魂造成了很深的触动。可是萧宇已经无法停下自己的脚步了。浩瀚广阔的星空，无边无际的宇宙，就像是美丽异常的罂粟花，明知道危险，可是还是有不计其数的文明，包括萧宇在内都踏了进去，并且一个个踊跃异常，生怕自己吸食毒品的速度要比其余的文明慢了一点。\n\n</pre>\n----\n以上。\n","slug":"写在2016年末","published":1,"updated":"2018-04-24T05:38:42.853Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjl3vbtrp0033isdgq0osqjtc","content":"<p>2016年的最后一天的最后半个小时了，写写这一年的收获总结和2017的计划吧。<br>一个字总结了一下2016年：穷。<br>当然这是开玩笑式的总结，但也是最接近事实的了。<br><a id=\"more\"></a></p>\n<h4 id=\"2016总结\"><a href=\"#2016总结\" class=\"headerlink\" title=\"2016总结\"></a>2016总结</h4><p>技术方面：<br>&nbsp;&nbsp;&nbsp;&nbsp;自从踏上IT这条不归路开始，就打算做一个全栈攻城狮，从敲下第一行<code>hello world</code>到自己独立用java写一个完整的大作业再到写出实际可用的程序到现在的工作，仔细想想已经五年多了吧。但是这仅仅是个开始，我对自己现在的定位是全栈攻城狮的道路刚刚慢出第一步，现在也就算是个全栈学徒吧。</p>\n<table><tr><th>编程技能</th><th>自定级别</th></tr><tr><td>python</td><td>入门</td></tr><tr><td>HTML</td><td>初级</td></tr><tr><td>J2EE</td><td>初级</td></tr><tr><td>JAVA</td><td>中级</td></tr><tr><td>Android</td><td>中级</td></tr><tr><td>Linux</td><td>中级</td></tr></table>\n\n<ul>\n<li>在工作中也踩过、填过、挖过很多坑，万幸的是一直坚持了下来，没有放弃，也没有想过要转行的事，就想一直在这个行业发展，努力提高自己的技术。</li>\n<li>15年双十二和今年的十二月四号，都参加了<code>开源中国</code>举办的<code>源创汇</code>年终盛典，接触到了很多大牛(虽然他们不曾记得我)，接触到很多以前没有见识过也没有想象过的东西，对自己的成长有很大帮助。</li>\n<li>开通了自己的博客(gitpage),把博客从csdn迁移到github上，租用了腾讯云主机，备案了自己的域名，有了自己的简单的网站，可以写一些自己感兴趣的东西(自由的感觉真好，法无禁止皆可为)。</li>\n<li>也感谢这一年来小伙伴的帮助，幸好有你们，帮我解决了困难。</li>\n<li>当然，在这一年中也有很多事情不是那么顺利，从上家公司离职，从10月到12月，中间休息了两个月，回了一次家，跑去深圳和妹子玩了四五天的样子(几乎是全部时间都泡在图书馆了，沉迷学习无法自拔)，其余时间也就是看看书，打打游戏之类的，总之这两个月的时间大部分都被浪费掉了，没有任何收获。</li>\n</ul>\n<p>生活上也没啥好说的，业余时间就是宅在家里，看看书，敲敲代码，打打游戏，不喜欢出去逛，貌似好像是在6、7月份的样子，二哥来北京玩，爬了一次八达岭长城，除此之外，就是去了三次漫展，其他的就没有什么了。</p>\n<h4 id=\"2017计划\"><a href=\"#2017计划\" class=\"headerlink\" title=\"2017计划\"></a>2017计划</h4><p>首先，最重要的就是提升自己的技术能力：</p>\n<ul>\n<li>python达到初级水平;html方面学习一下h5;</li>\n<li>J2EE方面学习一下ssm框架、nginx;</li>\n<li>JAVA和Android方面尽可能的提升自己，尽量在两年内能初步达到高级水平;</li>\n<li>Linux方面，熟悉一下vim，了解以下服务器方向的相关知识，毕竟自己只是拿linux做开发，没有把精力放在服务器假设方向。</li>\n</ul>\n<p>生活方面就尽量改变一下自己宅的属性,尽量多出去走走吧(这个有点难，比提升技术实力还要难)</p>\n<hr>\n<p>借用一本小说中的一段话吧：</p>\n<blockquote>\n<p><pre>  “其实所有的智慧生物都在饮鸩止渴。所有的智慧生物都在通过不断的科技进步，不断的探索未知来满足着自己的探索欲望。这些科技，以及理论还有知识，不是好东西，它们是毒药，它们会让文明形成强烈的依赖症，当所有的未知都被探索完毕的时候，这种鸩毒就会最终发作，并且让这个文明最终陷入到毒发身亡的境地之中。可是最可笑的是，虽然这个道理十分明显，可是包括我在内的所有文明，都无法逃脱这个怪圈。”<br>    “我……我怎么可以停止呢？就算它们明明是毒药，可是我也要不断的去吃啊。”萧宇喃喃自语着，“如果我的科技不能进步，如果现在就斩断我进步的道路，我现在就会发疯的。这一点是天生注定的，当我还在地球上的时候，当我拿起笔，拿起书本，学习到第一个数学公式，学习到第一个物理定理的时候，这种鸩毒就已经在我的灵魂深处深深的扎下了根，让我终其一生不得解脱。我的毒瘾会越来越大，我所需要的鸩毒分量会越来越多，我只能继续这样维持下去。以后再毒发，总比现在就毒发要好。”<br>    这个死在旅途之中的文明，让萧宇想到了很多很多，对萧宇的灵魂造成了很深的触动。可是萧宇已经无法停下自己的脚步了。浩瀚广阔的星空，无边无际的宇宙，就像是美丽异常的罂粟花，明知道危险，可是还是有不计其数的文明，包括萧宇在内都踏了进去，并且一个个踊跃异常，生怕自己吸食毒品的速度要比其余的文明慢了一点。</pre></p>\n</blockquote>\n<h2 id=\"\"><a href=\"#\" class=\"headerlink\" title=\"\"></a></h2><p>以上。</p>\n","excerpt":"<p>2016年的最后一天的最后半个小时了，写写这一年的收获总结和2017的计划吧。<br>一个字总结了一下2016年：穷。<br>当然这是开玩笑式的总结，但也是最接近事实的了。<br>","more":"</p>\n<h4 id=\"2016总结\"><a href=\"#2016总结\" class=\"headerlink\" title=\"2016总结\"></a>2016总结</h4><p>技术方面：<br>&nbsp;&nbsp;&nbsp;&nbsp;自从踏上IT这条不归路开始，就打算做一个全栈攻城狮，从敲下第一行<code>hello world</code>到自己独立用java写一个完整的大作业再到写出实际可用的程序到现在的工作，仔细想想已经五年多了吧。但是这仅仅是个开始，我对自己现在的定位是全栈攻城狮的道路刚刚慢出第一步，现在也就算是个全栈学徒吧。</p>\n<table><tr><th>编程技能</th><th>自定级别</th></tr><tr><td>python</td><td>入门</td></tr><tr><td>HTML</td><td>初级</td></tr><tr><td>J2EE</td><td>初级</td></tr><tr><td>JAVA</td><td>中级</td></tr><tr><td>Android</td><td>中级</td></tr><tr><td>Linux</td><td>中级</td></tr></table>\n\n<ul>\n<li>在工作中也踩过、填过、挖过很多坑，万幸的是一直坚持了下来，没有放弃，也没有想过要转行的事，就想一直在这个行业发展，努力提高自己的技术。</li>\n<li>15年双十二和今年的十二月四号，都参加了<code>开源中国</code>举办的<code>源创汇</code>年终盛典，接触到了很多大牛(虽然他们不曾记得我)，接触到很多以前没有见识过也没有想象过的东西，对自己的成长有很大帮助。</li>\n<li>开通了自己的博客(gitpage),把博客从csdn迁移到github上，租用了腾讯云主机，备案了自己的域名，有了自己的简单的网站，可以写一些自己感兴趣的东西(自由的感觉真好，法无禁止皆可为)。</li>\n<li>也感谢这一年来小伙伴的帮助，幸好有你们，帮我解决了困难。</li>\n<li>当然，在这一年中也有很多事情不是那么顺利，从上家公司离职，从10月到12月，中间休息了两个月，回了一次家，跑去深圳和妹子玩了四五天的样子(几乎是全部时间都泡在图书馆了，沉迷学习无法自拔)，其余时间也就是看看书，打打游戏之类的，总之这两个月的时间大部分都被浪费掉了，没有任何收获。</li>\n</ul>\n<p>生活上也没啥好说的，业余时间就是宅在家里，看看书，敲敲代码，打打游戏，不喜欢出去逛，貌似好像是在6、7月份的样子，二哥来北京玩，爬了一次八达岭长城，除此之外，就是去了三次漫展，其他的就没有什么了。</p>\n<h4 id=\"2017计划\"><a href=\"#2017计划\" class=\"headerlink\" title=\"2017计划\"></a>2017计划</h4><p>首先，最重要的就是提升自己的技术能力：</p>\n<ul>\n<li>python达到初级水平;html方面学习一下h5;</li>\n<li>J2EE方面学习一下ssm框架、nginx;</li>\n<li>JAVA和Android方面尽可能的提升自己，尽量在两年内能初步达到高级水平;</li>\n<li>Linux方面，熟悉一下vim，了解以下服务器方向的相关知识，毕竟自己只是拿linux做开发，没有把精力放在服务器假设方向。</li>\n</ul>\n<p>生活方面就尽量改变一下自己宅的属性,尽量多出去走走吧(这个有点难，比提升技术实力还要难)</p>\n<hr>\n<p>借用一本小说中的一段话吧：</p>\n<blockquote>\n<p><pre>  “其实所有的智慧生物都在饮鸩止渴。所有的智慧生物都在通过不断的科技进步，不断的探索未知来满足着自己的探索欲望。这些科技，以及理论还有知识，不是好东西，它们是毒药，它们会让文明形成强烈的依赖症，当所有的未知都被探索完毕的时候，这种鸩毒就会最终发作，并且让这个文明最终陷入到毒发身亡的境地之中。可是最可笑的是，虽然这个道理十分明显，可是包括我在内的所有文明，都无法逃脱这个怪圈。”<br>    “我……我怎么可以停止呢？就算它们明明是毒药，可是我也要不断的去吃啊。”萧宇喃喃自语着，“如果我的科技不能进步，如果现在就斩断我进步的道路，我现在就会发疯的。这一点是天生注定的，当我还在地球上的时候，当我拿起笔，拿起书本，学习到第一个数学公式，学习到第一个物理定理的时候，这种鸩毒就已经在我的灵魂深处深深的扎下了根，让我终其一生不得解脱。我的毒瘾会越来越大，我所需要的鸩毒分量会越来越多，我只能继续这样维持下去。以后再毒发，总比现在就毒发要好。”<br>    这个死在旅途之中的文明，让萧宇想到了很多很多，对萧宇的灵魂造成了很深的触动。可是萧宇已经无法停下自己的脚步了。浩瀚广阔的星空，无边无际的宇宙，就像是美丽异常的罂粟花，明知道危险，可是还是有不计其数的文明，包括萧宇在内都踏了进去，并且一个个踊跃异常，生怕自己吸食毒品的速度要比其余的文明慢了一点。</p>\n</blockquote>\n<h2 id=\"\"><a href=\"#\" class=\"headerlink\" title=\"\"></a></pre></h2><p>以上。</p>"},{"title":"写在2018元旦之前:2017的总结","date":"2017-12-30T13:13:55.000Z","_content":"2017年已经过去了，现在已经是2018年1月1号了，写写这一年的收获总结和2018的计划吧。\n一个字总结了一下2018年：穷。我也不知道钱花到哪里去了【无奈、摊手】。\n当然这是开玩笑式的总结，但也是最接近事实的了。\n刚刚翻了翻2016年年末写了总结个2017的计划，我先捂会脸。\n<!--more-->\n#### 先看看完成了哪些吧：\n* python达到初级水平:这个勉勉强强算是达到了吧。\n* J2EE学习ssm和nginx:这个就很惭愧了，一直没看，不是没时间，就是平时大概了解了一下，根本就没有系统的学习过。\n* Java和Android：这个一直没停下过，毕竟是饭碗，在别人看来差不多已经是高级工程师了，可我觉得我刚刚到中级水平吧(标准不一样嘛)。\n* Linux：这个也没怎么深入，能在linux平台下做开发、了解常见配置，除了问题能找到解决方案就好。公司开发坏境是windows,就算我想用linux，这个也不大好，只能平时自己玩玩。\n\n想想自己2017年都学到了啥，其实我也不知道自己又学到了啥，有些东西都是基础性、底层的东西，表面上看起来没什么提高，实际上现在我也没觉得有啥用户，或许是因为自己还没有到那个层次吧。\n#### 表面上学到的东西如下：\n* 记录了一下在使用高德地图踩的坑(写到博客上了)。\n* 大致看了一下tcp协议，就当是复习了，当时学ccna的时候也没怎么在意。\n* 大致看了一遍《Android开发艺术探索》，可惜IPC还是没学会。\n* 大致看了一下python编程，了解了一下flask和Django。\n* 又大致看了一遍《深入理解JVM虚拟机》，感觉不出来有什么提高，只是聊天吹水的时候又多了点东西。\n* 大致看了一下C++，没深入学习，坚持不下去了。\n* 动手搭建了一下elk，并没有什么卵用，毕竟公司有专门的运维。\n* 动手搭建了一下Jenkins，并没有什么卵用，毕竟公司有专门的运维。\n* 动手搭建了一下git服务，并没有什么卵用，毕竟公司有专门的运维。\n* 写了两个IDEA的插件，写完之后才发现有人写过了，而且还是已经发布了的。\n* 用不同的方式方法、框架、语言把《煎蛋》写了好几遍。\n* 大致学习了一下kotlin。\n* 其他的就是读了几本书、认识了几个朋友。\n\n#### 遗憾的事\n* 和妹子异地，没有多陪陪妹子。\n* 没有锻炼，身体素质差的不要不要的，手无缚鸡之力。\n* 自己一直念念不忘的热修复没有动手实践过。\n* 自己一直念念不忘的微信小程序也没有去试试。\n* 自己一直念念不忘的日语也放弃了。\n* 脾气似乎暴躁了许多，竟然喜欢《死亡笔记》中所描述的世界。\n\n#### 我可能是公司里在技术上最能作(zuo,一声)的人了，没有之一：\n* 一开始做运营端app，嫌写`findViewById`麻烦，说服同事用`ButterKnife`注解。\n* 后来需要做内部服务端app，觉得用`ButterKnife`也挺麻烦的，还得写变量(给变量去名字太蛋疼了，界面复杂的话一个界面好几十个控件变量)，上`databinding`吧，花一周时间把原来的注解全部干掉，换成`databinding`\n* 后来想改网络框架来着，但是一直没时间，开发需求一版接一版，VersionCode一年内已经到40了，只能作罢。\n* 现在一直想上热修复来着，但是还没弄，后端还没弄好，机制还不完善，不过我觉得迟早得上，毕竟有啥技术改动都是内部服务端app先上、先用、趟雷(毕竟内部人员使用，好说话),然后运营端app再上.\n* \n\n#### 2018计划\n* 有时间多陪陪妹子。\n* 坚持锻炼。\n* 至少读3本书，要有总结和读后感的那种。\n* 有时间的话，至少参与一次开源翻译计划(Apche-CN)\\\n* 人工智能和机器学习挺火的，妹子研究生也是这个方向，学学这一块的东西，至少不要拖妹子后腿吧。\n* Java和Android方向继续努力，撸源码，多学习。\n* 坚持写博客，不能偷懒了。\n* 修身养性，别这么大脾气了，一点就爆(抱个被子，泡点枸杞挺不错的)。\n\n![2018](/image/2018_01_01.png)\n----\n以上\n","source":"_posts/写在2018元旦之前-2017的总结.md","raw":"---\ntitle: '写在2018元旦之前:2017的总结'\ndate: 2017-12-30 21:13:55\ntags: [乱七八糟]\n---\n2017年已经过去了，现在已经是2018年1月1号了，写写这一年的收获总结和2018的计划吧。\n一个字总结了一下2018年：穷。我也不知道钱花到哪里去了【无奈、摊手】。\n当然这是开玩笑式的总结，但也是最接近事实的了。\n刚刚翻了翻2016年年末写了总结个2017的计划，我先捂会脸。\n<!--more-->\n#### 先看看完成了哪些吧：\n* python达到初级水平:这个勉勉强强算是达到了吧。\n* J2EE学习ssm和nginx:这个就很惭愧了，一直没看，不是没时间，就是平时大概了解了一下，根本就没有系统的学习过。\n* Java和Android：这个一直没停下过，毕竟是饭碗，在别人看来差不多已经是高级工程师了，可我觉得我刚刚到中级水平吧(标准不一样嘛)。\n* Linux：这个也没怎么深入，能在linux平台下做开发、了解常见配置，除了问题能找到解决方案就好。公司开发坏境是windows,就算我想用linux，这个也不大好，只能平时自己玩玩。\n\n想想自己2017年都学到了啥，其实我也不知道自己又学到了啥，有些东西都是基础性、底层的东西，表面上看起来没什么提高，实际上现在我也没觉得有啥用户，或许是因为自己还没有到那个层次吧。\n#### 表面上学到的东西如下：\n* 记录了一下在使用高德地图踩的坑(写到博客上了)。\n* 大致看了一下tcp协议，就当是复习了，当时学ccna的时候也没怎么在意。\n* 大致看了一遍《Android开发艺术探索》，可惜IPC还是没学会。\n* 大致看了一下python编程，了解了一下flask和Django。\n* 又大致看了一遍《深入理解JVM虚拟机》，感觉不出来有什么提高，只是聊天吹水的时候又多了点东西。\n* 大致看了一下C++，没深入学习，坚持不下去了。\n* 动手搭建了一下elk，并没有什么卵用，毕竟公司有专门的运维。\n* 动手搭建了一下Jenkins，并没有什么卵用，毕竟公司有专门的运维。\n* 动手搭建了一下git服务，并没有什么卵用，毕竟公司有专门的运维。\n* 写了两个IDEA的插件，写完之后才发现有人写过了，而且还是已经发布了的。\n* 用不同的方式方法、框架、语言把《煎蛋》写了好几遍。\n* 大致学习了一下kotlin。\n* 其他的就是读了几本书、认识了几个朋友。\n\n#### 遗憾的事\n* 和妹子异地，没有多陪陪妹子。\n* 没有锻炼，身体素质差的不要不要的，手无缚鸡之力。\n* 自己一直念念不忘的热修复没有动手实践过。\n* 自己一直念念不忘的微信小程序也没有去试试。\n* 自己一直念念不忘的日语也放弃了。\n* 脾气似乎暴躁了许多，竟然喜欢《死亡笔记》中所描述的世界。\n\n#### 我可能是公司里在技术上最能作(zuo,一声)的人了，没有之一：\n* 一开始做运营端app，嫌写`findViewById`麻烦，说服同事用`ButterKnife`注解。\n* 后来需要做内部服务端app，觉得用`ButterKnife`也挺麻烦的，还得写变量(给变量去名字太蛋疼了，界面复杂的话一个界面好几十个控件变量)，上`databinding`吧，花一周时间把原来的注解全部干掉，换成`databinding`\n* 后来想改网络框架来着，但是一直没时间，开发需求一版接一版，VersionCode一年内已经到40了，只能作罢。\n* 现在一直想上热修复来着，但是还没弄，后端还没弄好，机制还不完善，不过我觉得迟早得上，毕竟有啥技术改动都是内部服务端app先上、先用、趟雷(毕竟内部人员使用，好说话),然后运营端app再上.\n* \n\n#### 2018计划\n* 有时间多陪陪妹子。\n* 坚持锻炼。\n* 至少读3本书，要有总结和读后感的那种。\n* 有时间的话，至少参与一次开源翻译计划(Apche-CN)\\\n* 人工智能和机器学习挺火的，妹子研究生也是这个方向，学学这一块的东西，至少不要拖妹子后腿吧。\n* Java和Android方向继续努力，撸源码，多学习。\n* 坚持写博客，不能偷懒了。\n* 修身养性，别这么大脾气了，一点就爆(抱个被子，泡点枸杞挺不错的)。\n\n![2018](/image/2018_01_01.png)\n----\n以上\n","slug":"写在2018元旦之前-2017的总结","published":1,"updated":"2018-01-18T14:27:12.062Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjl3vbtrr0036isdg9d000m3x","content":"<p>2017年已经过去了，现在已经是2018年1月1号了，写写这一年的收获总结和2018的计划吧。<br>一个字总结了一下2018年：穷。我也不知道钱花到哪里去了【无奈、摊手】。<br>当然这是开玩笑式的总结，但也是最接近事实的了。<br>刚刚翻了翻2016年年末写了总结个2017的计划，我先捂会脸。<br><a id=\"more\"></a></p>\n<h4 id=\"先看看完成了哪些吧：\"><a href=\"#先看看完成了哪些吧：\" class=\"headerlink\" title=\"先看看完成了哪些吧：\"></a>先看看完成了哪些吧：</h4><ul>\n<li>python达到初级水平:这个勉勉强强算是达到了吧。</li>\n<li>J2EE学习ssm和nginx:这个就很惭愧了，一直没看，不是没时间，就是平时大概了解了一下，根本就没有系统的学习过。</li>\n<li>Java和Android：这个一直没停下过，毕竟是饭碗，在别人看来差不多已经是高级工程师了，可我觉得我刚刚到中级水平吧(标准不一样嘛)。</li>\n<li>Linux：这个也没怎么深入，能在linux平台下做开发、了解常见配置，除了问题能找到解决方案就好。公司开发坏境是windows,就算我想用linux，这个也不大好，只能平时自己玩玩。</li>\n</ul>\n<p>想想自己2017年都学到了啥，其实我也不知道自己又学到了啥，有些东西都是基础性、底层的东西，表面上看起来没什么提高，实际上现在我也没觉得有啥用户，或许是因为自己还没有到那个层次吧。</p>\n<h4 id=\"表面上学到的东西如下：\"><a href=\"#表面上学到的东西如下：\" class=\"headerlink\" title=\"表面上学到的东西如下：\"></a>表面上学到的东西如下：</h4><ul>\n<li>记录了一下在使用高德地图踩的坑(写到博客上了)。</li>\n<li>大致看了一下tcp协议，就当是复习了，当时学ccna的时候也没怎么在意。</li>\n<li>大致看了一遍《Android开发艺术探索》，可惜IPC还是没学会。</li>\n<li>大致看了一下python编程，了解了一下flask和Django。</li>\n<li>又大致看了一遍《深入理解JVM虚拟机》，感觉不出来有什么提高，只是聊天吹水的时候又多了点东西。</li>\n<li>大致看了一下C++，没深入学习，坚持不下去了。</li>\n<li>动手搭建了一下elk，并没有什么卵用，毕竟公司有专门的运维。</li>\n<li>动手搭建了一下Jenkins，并没有什么卵用，毕竟公司有专门的运维。</li>\n<li>动手搭建了一下git服务，并没有什么卵用，毕竟公司有专门的运维。</li>\n<li>写了两个IDEA的插件，写完之后才发现有人写过了，而且还是已经发布了的。</li>\n<li>用不同的方式方法、框架、语言把《煎蛋》写了好几遍。</li>\n<li>大致学习了一下kotlin。</li>\n<li>其他的就是读了几本书、认识了几个朋友。</li>\n</ul>\n<h4 id=\"遗憾的事\"><a href=\"#遗憾的事\" class=\"headerlink\" title=\"遗憾的事\"></a>遗憾的事</h4><ul>\n<li>和妹子异地，没有多陪陪妹子。</li>\n<li>没有锻炼，身体素质差的不要不要的，手无缚鸡之力。</li>\n<li>自己一直念念不忘的热修复没有动手实践过。</li>\n<li>自己一直念念不忘的微信小程序也没有去试试。</li>\n<li>自己一直念念不忘的日语也放弃了。</li>\n<li>脾气似乎暴躁了许多，竟然喜欢《死亡笔记》中所描述的世界。</li>\n</ul>\n<h4 id=\"我可能是公司里在技术上最能作-zuo-一声-的人了，没有之一：\"><a href=\"#我可能是公司里在技术上最能作-zuo-一声-的人了，没有之一：\" class=\"headerlink\" title=\"我可能是公司里在技术上最能作(zuo,一声)的人了，没有之一：\"></a>我可能是公司里在技术上最能作(zuo,一声)的人了，没有之一：</h4><ul>\n<li>一开始做运营端app，嫌写<code>findViewById</code>麻烦，说服同事用<code>ButterKnife</code>注解。</li>\n<li>后来需要做内部服务端app，觉得用<code>ButterKnife</code>也挺麻烦的，还得写变量(给变量去名字太蛋疼了，界面复杂的话一个界面好几十个控件变量)，上<code>databinding</code>吧，花一周时间把原来的注解全部干掉，换成<code>databinding</code></li>\n<li>后来想改网络框架来着，但是一直没时间，开发需求一版接一版，VersionCode一年内已经到40了，只能作罢。</li>\n<li>现在一直想上热修复来着，但是还没弄，后端还没弄好，机制还不完善，不过我觉得迟早得上，毕竟有啥技术改动都是内部服务端app先上、先用、趟雷(毕竟内部人员使用，好说话),然后运营端app再上.</li>\n<li></li>\n</ul>\n<h4 id=\"2018计划\"><a href=\"#2018计划\" class=\"headerlink\" title=\"2018计划\"></a>2018计划</h4><ul>\n<li>有时间多陪陪妹子。</li>\n<li>坚持锻炼。</li>\n<li>至少读3本书，要有总结和读后感的那种。</li>\n<li>有时间的话，至少参与一次开源翻译计划(Apche-CN)\\</li>\n<li>人工智能和机器学习挺火的，妹子研究生也是这个方向，学学这一块的东西，至少不要拖妹子后腿吧。</li>\n<li>Java和Android方向继续努力，撸源码，多学习。</li>\n<li>坚持写博客，不能偷懒了。</li>\n<li>修身养性，别这么大脾气了，一点就爆(抱个被子，泡点枸杞挺不错的)。</li>\n</ul>\n<h2 id=\"\"><a href=\"#\" class=\"headerlink\" title=\"\"></a><img src=\"/image/2018_01_01.png\" alt=\"2018\"></h2><p>以上</p>\n","excerpt":"<p>2017年已经过去了，现在已经是2018年1月1号了，写写这一年的收获总结和2018的计划吧。<br>一个字总结了一下2018年：穷。我也不知道钱花到哪里去了【无奈、摊手】。<br>当然这是开玩笑式的总结，但也是最接近事实的了。<br>刚刚翻了翻2016年年末写了总结个2017的计划，我先捂会脸。<br>","more":"</p>\n<h4 id=\"先看看完成了哪些吧：\"><a href=\"#先看看完成了哪些吧：\" class=\"headerlink\" title=\"先看看完成了哪些吧：\"></a>先看看完成了哪些吧：</h4><ul>\n<li>python达到初级水平:这个勉勉强强算是达到了吧。</li>\n<li>J2EE学习ssm和nginx:这个就很惭愧了，一直没看，不是没时间，就是平时大概了解了一下，根本就没有系统的学习过。</li>\n<li>Java和Android：这个一直没停下过，毕竟是饭碗，在别人看来差不多已经是高级工程师了，可我觉得我刚刚到中级水平吧(标准不一样嘛)。</li>\n<li>Linux：这个也没怎么深入，能在linux平台下做开发、了解常见配置，除了问题能找到解决方案就好。公司开发坏境是windows,就算我想用linux，这个也不大好，只能平时自己玩玩。</li>\n</ul>\n<p>想想自己2017年都学到了啥，其实我也不知道自己又学到了啥，有些东西都是基础性、底层的东西，表面上看起来没什么提高，实际上现在我也没觉得有啥用户，或许是因为自己还没有到那个层次吧。</p>\n<h4 id=\"表面上学到的东西如下：\"><a href=\"#表面上学到的东西如下：\" class=\"headerlink\" title=\"表面上学到的东西如下：\"></a>表面上学到的东西如下：</h4><ul>\n<li>记录了一下在使用高德地图踩的坑(写到博客上了)。</li>\n<li>大致看了一下tcp协议，就当是复习了，当时学ccna的时候也没怎么在意。</li>\n<li>大致看了一遍《Android开发艺术探索》，可惜IPC还是没学会。</li>\n<li>大致看了一下python编程，了解了一下flask和Django。</li>\n<li>又大致看了一遍《深入理解JVM虚拟机》，感觉不出来有什么提高，只是聊天吹水的时候又多了点东西。</li>\n<li>大致看了一下C++，没深入学习，坚持不下去了。</li>\n<li>动手搭建了一下elk，并没有什么卵用，毕竟公司有专门的运维。</li>\n<li>动手搭建了一下Jenkins，并没有什么卵用，毕竟公司有专门的运维。</li>\n<li>动手搭建了一下git服务，并没有什么卵用，毕竟公司有专门的运维。</li>\n<li>写了两个IDEA的插件，写完之后才发现有人写过了，而且还是已经发布了的。</li>\n<li>用不同的方式方法、框架、语言把《煎蛋》写了好几遍。</li>\n<li>大致学习了一下kotlin。</li>\n<li>其他的就是读了几本书、认识了几个朋友。</li>\n</ul>\n<h4 id=\"遗憾的事\"><a href=\"#遗憾的事\" class=\"headerlink\" title=\"遗憾的事\"></a>遗憾的事</h4><ul>\n<li>和妹子异地，没有多陪陪妹子。</li>\n<li>没有锻炼，身体素质差的不要不要的，手无缚鸡之力。</li>\n<li>自己一直念念不忘的热修复没有动手实践过。</li>\n<li>自己一直念念不忘的微信小程序也没有去试试。</li>\n<li>自己一直念念不忘的日语也放弃了。</li>\n<li>脾气似乎暴躁了许多，竟然喜欢《死亡笔记》中所描述的世界。</li>\n</ul>\n<h4 id=\"我可能是公司里在技术上最能作-zuo-一声-的人了，没有之一：\"><a href=\"#我可能是公司里在技术上最能作-zuo-一声-的人了，没有之一：\" class=\"headerlink\" title=\"我可能是公司里在技术上最能作(zuo,一声)的人了，没有之一：\"></a>我可能是公司里在技术上最能作(zuo,一声)的人了，没有之一：</h4><ul>\n<li>一开始做运营端app，嫌写<code>findViewById</code>麻烦，说服同事用<code>ButterKnife</code>注解。</li>\n<li>后来需要做内部服务端app，觉得用<code>ButterKnife</code>也挺麻烦的，还得写变量(给变量去名字太蛋疼了，界面复杂的话一个界面好几十个控件变量)，上<code>databinding</code>吧，花一周时间把原来的注解全部干掉，换成<code>databinding</code></li>\n<li>后来想改网络框架来着，但是一直没时间，开发需求一版接一版，VersionCode一年内已经到40了，只能作罢。</li>\n<li>现在一直想上热修复来着，但是还没弄，后端还没弄好，机制还不完善，不过我觉得迟早得上，毕竟有啥技术改动都是内部服务端app先上、先用、趟雷(毕竟内部人员使用，好说话),然后运营端app再上.</li>\n<li></li>\n</ul>\n<h4 id=\"2018计划\"><a href=\"#2018计划\" class=\"headerlink\" title=\"2018计划\"></a>2018计划</h4><ul>\n<li>有时间多陪陪妹子。</li>\n<li>坚持锻炼。</li>\n<li>至少读3本书，要有总结和读后感的那种。</li>\n<li>有时间的话，至少参与一次开源翻译计划(Apche-CN)\\</li>\n<li>人工智能和机器学习挺火的，妹子研究生也是这个方向，学学这一块的东西，至少不要拖妹子后腿吧。</li>\n<li>Java和Android方向继续努力，撸源码，多学习。</li>\n<li>坚持写博客，不能偷懒了。</li>\n<li>修身养性，别这么大脾气了，一点就爆(抱个被子，泡点枸杞挺不错的)。</li>\n</ul>\n<h2 id=\"\"><a href=\"#\" class=\"headerlink\" title=\"\"></a><img src=\"/image/2018_01_01.png\" alt=\"2018\"></h2><p>以上</p>"},{"title":"搭建git服务","date":"2017-04-15T02:25:31.000Z","keywords":"git服务","_content":"公司的版本控制要从SVN迁移到git，正式的开发环境还没有搭建好，于是自己做了一个简单git服务。\n环境：\n本机: win10，服务器：ubuntu 16.04 LTS,ip:192.168.1.103\n<!--more-->\n本地安装git环境，配置用户名和邮箱之类的信息，然后生成秘钥，生成方式见 http://blog.csdn.net/huangyuan_xuan/article/details/49125597。\n服务器：\n1. 安装git,ssh服务\n`sudo apt install git ssh`\n2. 新增用户，用户名为git\n`adduser git`\n3. 初始化git仓库，我放在/home/git/repository\n`cd /home/git/repository`\n`git init --bare test.git`\n`--base`参数是初始化裸仓库。\n执行`tree`命令可以查看目录结构如下：\n![git_init_tree](/image/git/git_init_tree.png) \n4. 添加秘钥\n将本地生成的`id_rsa.pub`文件里面的内容追加到`/home/git/.ssh/authorized_keys`文件中。\n可以先将秘钥文件上传到服务器，然后在服务器上操作文件，添加内容。\n5. 修改权限\n将 /home/git 所有者更改为git用户\n`chown -R git:git /home/git`\n用户home目录755权限\n`chmod 755 /home/git`\n.ssh目录700权限\n`chmod 700 .ssh`\nauthorized_keys 600权限\n`chmod 600 .ssh/authorized_keys`\n6. 修改ssh配置文件\n配置文件是`/etc/ssh/sshd_config`，取消这行 `AuthorizedKeysFile    %h/.ssh/authorized_keys` 前面的注释\n7. 重启`ssh`服务\n`sudo service ssh restart`\n8. 可选项：为了安全 禁止git用户shell登录，需要修改/etc/passwd\n将 git:x:1001:1001:,,,:/home/git:/bin/bash\n改为 git:x:1001:1001:,,,:/home/git:/usr/bin/git-shell\n\n回到本地，进行克隆\n`git clone git@192.168.1.103:/home/git/code/test.git`\n或者\n`git clone git@192.168.1.103:code/test.git`\n如果ssh不是默认的22端口，则在ip后添加端口。","source":"_posts/搭建git服务.md","raw":"---\ntitle: 搭建git服务\ndate: 2017-04-15 10:25:31\ntags: [git,运维]\nkeywords: git服务\n---\n公司的版本控制要从SVN迁移到git，正式的开发环境还没有搭建好，于是自己做了一个简单git服务。\n环境：\n本机: win10，服务器：ubuntu 16.04 LTS,ip:192.168.1.103\n<!--more-->\n本地安装git环境，配置用户名和邮箱之类的信息，然后生成秘钥，生成方式见 http://blog.csdn.net/huangyuan_xuan/article/details/49125597。\n服务器：\n1. 安装git,ssh服务\n`sudo apt install git ssh`\n2. 新增用户，用户名为git\n`adduser git`\n3. 初始化git仓库，我放在/home/git/repository\n`cd /home/git/repository`\n`git init --bare test.git`\n`--base`参数是初始化裸仓库。\n执行`tree`命令可以查看目录结构如下：\n![git_init_tree](/image/git/git_init_tree.png) \n4. 添加秘钥\n将本地生成的`id_rsa.pub`文件里面的内容追加到`/home/git/.ssh/authorized_keys`文件中。\n可以先将秘钥文件上传到服务器，然后在服务器上操作文件，添加内容。\n5. 修改权限\n将 /home/git 所有者更改为git用户\n`chown -R git:git /home/git`\n用户home目录755权限\n`chmod 755 /home/git`\n.ssh目录700权限\n`chmod 700 .ssh`\nauthorized_keys 600权限\n`chmod 600 .ssh/authorized_keys`\n6. 修改ssh配置文件\n配置文件是`/etc/ssh/sshd_config`，取消这行 `AuthorizedKeysFile    %h/.ssh/authorized_keys` 前面的注释\n7. 重启`ssh`服务\n`sudo service ssh restart`\n8. 可选项：为了安全 禁止git用户shell登录，需要修改/etc/passwd\n将 git:x:1001:1001:,,,:/home/git:/bin/bash\n改为 git:x:1001:1001:,,,:/home/git:/usr/bin/git-shell\n\n回到本地，进行克隆\n`git clone git@192.168.1.103:/home/git/code/test.git`\n或者\n`git clone git@192.168.1.103:code/test.git`\n如果ssh不是默认的22端口，则在ip后添加端口。","slug":"搭建git服务","published":1,"updated":"2018-08-04T05:18:37.692Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjl3vbtrr0038isdgmhrjbod3","content":"<p>公司的版本控制要从SVN迁移到git，正式的开发环境还没有搭建好，于是自己做了一个简单git服务。<br>环境：<br>本机: win10，服务器：ubuntu 16.04 LTS,ip:192.168.1.103<br><a id=\"more\"></a><br>本地安装git环境，配置用户名和邮箱之类的信息，然后生成秘钥，生成方式见 <a href=\"http://blog.csdn.net/huangyuan_xuan/article/details/49125597。\" target=\"_blank\" rel=\"external\">http://blog.csdn.net/huangyuan_xuan/article/details/49125597。</a><br>服务器：</p>\n<ol>\n<li>安装git,ssh服务<br><code>sudo apt install git ssh</code></li>\n<li>新增用户，用户名为git<br><code>adduser git</code></li>\n<li>初始化git仓库，我放在/home/git/repository<br><code>cd /home/git/repository</code><br><code>git init --bare test.git</code><br><code>--base</code>参数是初始化裸仓库。<br>执行<code>tree</code>命令可以查看目录结构如下：<br><img src=\"/image/git/git_init_tree.png\" alt=\"git_init_tree\"> </li>\n<li>添加秘钥<br>将本地生成的<code>id_rsa.pub</code>文件里面的内容追加到<code>/home/git/.ssh/authorized_keys</code>文件中。<br>可以先将秘钥文件上传到服务器，然后在服务器上操作文件，添加内容。</li>\n<li>修改权限<br>将 /home/git 所有者更改为git用户<br><code>chown -R git:git /home/git</code><br>用户home目录755权限<br><code>chmod 755 /home/git</code><br>.ssh目录700权限<br><code>chmod 700 .ssh</code><br>authorized_keys 600权限<br><code>chmod 600 .ssh/authorized_keys</code></li>\n<li>修改ssh配置文件<br>配置文件是<code>/etc/ssh/sshd_config</code>，取消这行 <code>AuthorizedKeysFile    %h/.ssh/authorized_keys</code> 前面的注释</li>\n<li>重启<code>ssh</code>服务<br><code>sudo service ssh restart</code></li>\n<li>可选项：为了安全 禁止git用户shell登录，需要修改/etc/passwd<br>将 git:x:1001:1001:,,,:/home/git:/bin/bash<br>改为 git:x:1001:1001:,,,:/home/git:/usr/bin/git-shell</li>\n</ol>\n<p>回到本地，进行克隆<br><code>git clone git@192.168.1.103:/home/git/code/test.git</code><br>或者<br><code>git clone git@192.168.1.103:code/test.git</code><br>如果ssh不是默认的22端口，则在ip后添加端口。</p>\n","excerpt":"<p>公司的版本控制要从SVN迁移到git，正式的开发环境还没有搭建好，于是自己做了一个简单git服务。<br>环境：<br>本机: win10，服务器：ubuntu 16.04 LTS,ip:192.168.1.103<br>","more":"<br>本地安装git环境，配置用户名和邮箱之类的信息，然后生成秘钥，生成方式见 <a href=\"http://blog.csdn.net/huangyuan_xuan/article/details/49125597。\">http://blog.csdn.net/huangyuan_xuan/article/details/49125597。</a><br>服务器：</p>\n<ol>\n<li>安装git,ssh服务<br><code>sudo apt install git ssh</code></li>\n<li>新增用户，用户名为git<br><code>adduser git</code></li>\n<li>初始化git仓库，我放在/home/git/repository<br><code>cd /home/git/repository</code><br><code>git init --bare test.git</code><br><code>--base</code>参数是初始化裸仓库。<br>执行<code>tree</code>命令可以查看目录结构如下：<br><img src=\"/image/git/git_init_tree.png\" alt=\"git_init_tree\"> </li>\n<li>添加秘钥<br>将本地生成的<code>id_rsa.pub</code>文件里面的内容追加到<code>/home/git/.ssh/authorized_keys</code>文件中。<br>可以先将秘钥文件上传到服务器，然后在服务器上操作文件，添加内容。</li>\n<li>修改权限<br>将 /home/git 所有者更改为git用户<br><code>chown -R git:git /home/git</code><br>用户home目录755权限<br><code>chmod 755 /home/git</code><br>.ssh目录700权限<br><code>chmod 700 .ssh</code><br>authorized_keys 600权限<br><code>chmod 600 .ssh/authorized_keys</code></li>\n<li>修改ssh配置文件<br>配置文件是<code>/etc/ssh/sshd_config</code>，取消这行 <code>AuthorizedKeysFile    %h/.ssh/authorized_keys</code> 前面的注释</li>\n<li>重启<code>ssh</code>服务<br><code>sudo service ssh restart</code></li>\n<li>可选项：为了安全 禁止git用户shell登录，需要修改/etc/passwd<br>将 git:x:1001:1001:,,,:/home/git:/bin/bash<br>改为 git:x:1001:1001:,,,:/home/git:/usr/bin/git-shell</li>\n</ol>\n<p>回到本地，进行克隆<br><code>git clone git@192.168.1.103:/home/git/code/test.git</code><br>或者<br><code>git clone git@192.168.1.103:code/test.git</code><br>如果ssh不是默认的22端口，则在ip后添加端口。</p>"},{"title":"原CSDN博客","date":"2016-10-16T14:39:41.000Z","_content":"不打算在csdn上面写博客了,转到gitpage上面,自己用hexo搭建了博客系统.\n现在把原csdn的博客链接抄在下面\n\n<!-- more -->\n[使用openfire搭建IM聊天系统(一)](http://blog.csdn.net/huangyuan_xuan/article/details/52549416) http://blog.csdn.net/huangyuan_xuan/article/details/52549416<br>\n [浅谈使用单元素的枚举类型实现单例模式](http://blog.csdn.net/huangyuan_xuan/article/details/52193006) http://blog.csdn.net/huangyuan_xuan/article/details/52193006<br>\n [初步编写IDEA\\AndroidStudio翻译插件](http://blog.csdn.net/huangyuan_xuan/article/details/51935666) http://blog.csdn.net/huangyuan_xuan/article/details/51935666<br>\n [多线程 的理解（一）](http://blog.csdn.net/huangyuan_xuan/article/details/50881452) http://blog.csdn.net/huangyuan_xuan/article/details/50881452<br>\n [运行时数据区域](http://blog.csdn.net/huangyuan_xuan/article/details/50570461) http://blog.csdn.net/huangyuan_xuan/article/details/50570461<br>\n [虚拟机字节码执行引擎](http://blog.csdn.net/huangyuan_xuan/article/details/50569443) http://blog.csdn.net/huangyuan_xuan/article/details/50569443<br>\n [虚拟机类加载机制](http://blog.csdn.net/huangyuan_xuan/article/details/50550725) http://blog.csdn.net/huangyuan_xuan/article/details/50550725<br>\n [垃圾收集器与内存分配策略](http://blog.csdn.net/huangyuan_xuan/article/details/50513881) http://blog.csdn.net/huangyuan_xuan/article/details/50513881<br>\n [JDK的一些命令行工具](http://blog.csdn.net/huangyuan_xuan/article/details/50513861) http://blog.csdn.net/huangyuan_xuan/article/details/50513861<br>\n [MongoDB基础](http://blog.csdn.net/huangyuan_xuan/article/details/50155345) http://blog.csdn.net/huangyuan_xuan/article/details/50155345<br>\n [tomcat图形化界面管理及数据源配置](http://blog.csdn.net/huangyuan_xuan/article/details/49859151) http://blog.csdn.net/huangyuan_xuan/article/details/49859151<br>\n [android 四大图片缓存原理、特性对比](http://blog.csdn.net/huangyuan_xuan/article/details/49362701) http://blog.csdn.net/huangyuan_xuan/article/details/49362701<br>\n [github分支管理](http://blog.csdn.net/huangyuan_xuan/article/details/49356523) http://blog.csdn.net/huangyuan_xuan/article/details/49356523<br>\n [github 远程仓库](http://blog.csdn.net/huangyuan_xuan/article/details/49356505) http://blog.csdn.net/huangyuan_xuan/article/details/49356505<br>\n [github建立本地与远程仓库的连接](http://blog.csdn.net/huangyuan_xuan/article/details/49336403) http://blog.csdn.net/huangyuan_xuan/article/details/49336403<br>\n [Git 本地版本控制](http://blog.csdn.net/huangyuan_xuan/article/details/49162309) http://blog.csdn.net/huangyuan_xuan/article/details/49162309<br>\n [安装github](http://blog.csdn.net/huangyuan_xuan/article/details/49125597) http://blog.csdn.net/huangyuan_xuan/article/details/49125597<br>\n [ubuntu 14.04 apt-get install 不能自动补全解决办法](http://blog.csdn.net/huangyuan_xuan/article/details/48915299) http://blog.csdn.net/huangyuan_xuan/article/details/48915299<br>\n [String的一点小东西](http://blog.csdn.net/huangyuan_xuan/article/details/48116365) http://blog.csdn.net/huangyuan_xuan/article/details/48116365<br>\n [wireshark error: There are no interfaces on which a capture can be done.](http://blog.csdn.net/huangyuan_xuan/article/details/46632395) http://blog.csdn.net/huangyuan_xuan/article/details/46632395<br>\n [windows下使用cmd（命令行）发送邮件](http://blog.csdn.net/huangyuan_xuan/article/details/46564319) http://blog.csdn.net/huangyuan_xuan/article/details/46564319<br>\n [Notepad++ 搭建java编译环境](http://blog.csdn.net/huangyuan_xuan/article/details/45936413) http://blog.csdn.net/huangyuan_xuan/article/details/45936413<br>\n [JVM虚拟机](http://blog.csdn.net/huangyuan_xuan/article/details/44537233) http://blog.csdn.net/huangyuan_xuan/article/details/44537233<br>\n [servlet向浏览器输出验证码图片](http://blog.csdn.net/huangyuan_xuan/article/details/43817631) http://blog.csdn.net/huangyuan_xuan/article/details/43817631<br>\n [ubuntu14.04开热点共享网络](http://blog.csdn.net/huangyuan_xuan/article/details/43759585) http://blog.csdn.net/huangyuan_xuan/article/details/43759585<br>\n [UNIX/linux的find命令细节](http://blog.csdn.net/huangyuan_xuan/article/details/43739353) http://blog.csdn.net/huangyuan_xuan/article/details/43739353<br>\n [编写shell时，提示let：not found](http://blog.csdn.net/huangyuan_xuan/article/details/43490373) http://blog.csdn.net/huangyuan_xuan/article/details/43490373<br>\n [cmd命令大全](http://blog.csdn.net/huangyuan_xuan/article/details/42804537) http://blog.csdn.net/huangyuan_xuan/article/details/42804537<br>\n [华为 ap ac设备配置命令](http://blog.csdn.net/huangyuan_xuan/article/details/41647447) http://blog.csdn.net/huangyuan_xuan/article/details/41647447<br>\n [更改SQLserver的登录方式](http://blog.csdn.net/huangyuan_xuan/article/details/41085629) http://blog.csdn.net/huangyuan_xuan/article/details/41085629<br>\n [汇编FLAG寄存器简介](http://blog.csdn.net/huangyuan_xuan/article/details/40949147) http://blog.csdn.net/huangyuan_xuan/article/details/40949147<br>\n [汇编指令——转移指令](http://blog.csdn.net/huangyuan_xuan/article/details/40949119) http://blog.csdn.net/huangyuan_xuan/article/details/40949119<br>\n [汇编指令](http://blog.csdn.net/huangyuan_xuan/article/details/40949109) http://blog.csdn.net/huangyuan_xuan/article/details/40949109<br>\n [汇编寻址方式](http://blog.csdn.net/huangyuan_xuan/article/details/40949087) http://blog.csdn.net/huangyuan_xuan/article/details/40949087<br>\n [一段汇编小程序及说明——将数据，代码，栈放入不同的段](http://blog.csdn.net/huangyuan_xuan/article/details/40949075) http://blog.csdn.net/huangyuan_xuan/article/details/40949075<br>\n [一段简单汇编语言程序及说明](http://blog.csdn.net/huangyuan_xuan/article/details/40949069) http://blog.csdn.net/huangyuan_xuan/article/details/40949069<br>\n [8086寄存器](http://blog.csdn.net/huangyuan_xuan/article/details/40949063) http://blog.csdn.net/huangyuan_xuan/article/details/40949063<br>\n [oracle创建实例化数据库或者连接别的远程主机数据库提示“无监听程序”的解决办法](http://blog.csdn.net/huangyuan_xuan/article/details/40857207) http://blog.csdn.net/huangyuan_xuan/article/details/40857207<br>\n [安装tomcat提示Faild to install Tomcat7 service 解决办法](http://blog.csdn.net/huangyuan_xuan/article/details/40821859) http://blog.csdn.net/huangyuan_xuan/article/details/40821859<br>\n [mysql事物处理和管理配置](http://blog.csdn.net/huangyuan_xuan/article/details/40821521) http://blog.csdn.net/huangyuan_xuan/article/details/40821521<br>\n [mysql 连接查询](http://blog.csdn.net/huangyuan_xuan/article/details/40783341) http://blog.csdn.net/huangyuan_xuan/article/details/40783341<br>\n [MySQL常用命令](http://blog.csdn.net/huangyuan_xuan/article/details/40783331) http://blog.csdn.net/huangyuan_xuan/article/details/40783331<br>\n [ubuntu下MySQL键值不支持中文解决办法](http://blog.csdn.net/huangyuan_xuan/article/details/40783317) http://blog.csdn.net/huangyuan_xuan/article/details/40783317<br>\n [Myeclipse新建webservice客户端](http://blog.csdn.net/huangyuan_xuan/article/details/39992799) http://blog.csdn.net/huangyuan_xuan/article/details/39992799<br>\n [MyEclips新建webservice](http://blog.csdn.net/huangyuan_xuan/article/details/39992723) http://blog.csdn.net/huangyuan_xuan/article/details/39992723<br>\n [intellij IDEA更换主题为Darcula后中文项目名称变口（方框）的解决办法](http://blog.csdn.net/huangyuan_xuan/article/details/39896009) http://blog.csdn.net/huangyuan_xuan/article/details/39896009<br>\n [java模拟登录校内成绩查询网站，将获得的HTML代码用jsoup解析](http://blog.csdn.net/huangyuan_xuan/article/details/39723251) http://blog.csdn.net/huangyuan_xuan/article/details/39723251<br>\n [Ubuntu14.04 LTS更新源](http://blog.csdn.net/huangyuan_xuan/article/details/39119797) http://blog.csdn.net/huangyuan_xuan/article/details/39119797<br>\n [ubuntu14.04开机自动挂载windows磁盘的配置方法](http://blog.csdn.net/huangyuan_xuan/article/details/39118723) http://blog.csdn.net/huangyuan_xuan/article/details/39118723<br>\n [java实现MD5和sha1加密](http://blog.csdn.net/huangyuan_xuan/article/details/39081435) http://blog.csdn.net/huangyuan_xuan/article/details/39081435<br>\n [22 PPP协议](http://blog.csdn.net/huangyuan_xuan/article/details/38427607) http://blog.csdn.net/huangyuan_xuan/article/details/38427607<br>\n [21 串行接口封装](http://blog.csdn.net/huangyuan_xuan/article/details/38427547) http://blog.csdn.net/huangyuan_xuan/article/details/38427547<br>\n [20 internet connection](http://blog.csdn.net/huangyuan_xuan/article/details/38427527) http://blog.csdn.net/huangyuan_xuan/article/details/38427527<br>\n [19 广域网 WAN](http://blog.csdn.net/huangyuan_xuan/article/details/38423675) http://blog.csdn.net/huangyuan_xuan/article/details/38423675<br>\n [java的JDK的安装配置图文详解](http://blog.csdn.net/huangyuan_xuan/article/details/38405103) http://blog.csdn.net/huangyuan_xuan/article/details/38405103<br>\n [18 ACL访问控制列表（access control list）](http://blog.csdn.net/huangyuan_xuan/article/details/38387045) http://blog.csdn.net/huangyuan_xuan/article/details/38387045<br>\n [17 NAT转换](http://blog.csdn.net/huangyuan_xuan/article/details/38342675) http://blog.csdn.net/huangyuan_xuan/article/details/38342675<br>\n [16 DHCP](http://blog.csdn.net/huangyuan_xuan/article/details/38278825) http://blog.csdn.net/huangyuan_xuan/article/details/38278825<br>\n [Java常见错误列表](http://blog.csdn.net/huangyuan_xuan/article/details/37957229) http://blog.csdn.net/huangyuan_xuan/article/details/37957229<br>\n [LXLE Linux取代Windows XP的11个大招](http://blog.csdn.net/huangyuan_xuan/article/details/37937957) http://blog.csdn.net/huangyuan_xuan/article/details/37937957<br>\n [jQuery语法简介](http://blog.csdn.net/huangyuan_xuan/article/details/37738127) http://blog.csdn.net/huangyuan_xuan/article/details/37738127<br>\n [cookie简介](http://blog.csdn.net/huangyuan_xuan/article/details/37728211) http://blog.csdn.net/huangyuan_xuan/article/details/37728211<br>\n [DOM 简介](http://blog.csdn.net/huangyuan_xuan/article/details/37699891) http://blog.csdn.net/huangyuan_xuan/article/details/37699891<br>\n [vim 命令](http://blog.csdn.net/huangyuan_xuan/article/details/28880287) http://blog.csdn.net/huangyuan_xuan/article/details/28880287<br>\n [我们大神都这样——提问的智慧](http://blog.csdn.net/huangyuan_xuan/article/details/28276437) http://blog.csdn.net/huangyuan_xuan/article/details/28276437<br>\n [初学C语言的人看不懂的关机代码](http://blog.csdn.net/huangyuan_xuan/article/details/27972015) http://blog.csdn.net/huangyuan_xuan/article/details/27972015<br>\n [ubuntu连接路由器无线网络，却不能上网](http://blog.csdn.net/huangyuan_xuan/article/details/27792089) http://blog.csdn.net/huangyuan_xuan/article/details/27792089<br>\n [sublime-text2的中英文对照表（附带个人的配置习惯）](http://blog.csdn.net/huangyuan_xuan/article/details/26969041) http://blog.csdn.net/huangyuan_xuan/article/details/26969041<br>\n [电脑蓝屏代码大全](http://blog.csdn.net/huangyuan_xuan/article/details/26246709) http://blog.csdn.net/huangyuan_xuan/article/details/26246709<br>\n [VC6.0 快捷键整理](http://blog.csdn.net/huangyuan_xuan/article/details/26245513) http://blog.csdn.net/huangyuan_xuan/article/details/26245513<br>\n [玩游戏无法全屏](http://blog.csdn.net/huangyuan_xuan/article/details/26245135) http://blog.csdn.net/huangyuan_xuan/article/details/26245135<br>\n [15 Ospf](http://blog.csdn.net/huangyuan_xuan/article/details/26244991) http://blog.csdn.net/huangyuan_xuan/article/details/26244991<br>\n [14 EIGRP 配置](http://blog.csdn.net/huangyuan_xuan/article/details/26244541) http://blog.csdn.net/huangyuan_xuan/article/details/26244541<br>\n [13 ERGIP](http://blog.csdn.net/huangyuan_xuan/article/details/26244439) http://blog.csdn.net/huangyuan_xuan/article/details/26244439<br>\n [12    rip-2  配置命令](http://blog.csdn.net/huangyuan_xuan/article/details/26244201) http://blog.csdn.net/huangyuan_xuan/article/details/26244201<br>\n [11    rip -1](http://blog.csdn.net/huangyuan_xuan/article/details/26244031) http://blog.csdn.net/huangyuan_xuan/article/details/26244031<br>\n [10动态路由](http://blog.csdn.net/huangyuan_xuan/article/details/26243735) http://blog.csdn.net/huangyuan_xuan/article/details/26243735<br>\n [9静态路由](http://blog.csdn.net/huangyuan_xuan/article/details/26243487) http://blog.csdn.net/huangyuan_xuan/article/details/26243487<br>\n [8网络拓扑结构](http://blog.csdn.net/huangyuan_xuan/article/details/26243293) http://blog.csdn.net/huangyuan_xuan/article/details/26243293<br>\n [7VLSM子网划分](http://blog.csdn.net/huangyuan_xuan/article/details/26243041) http://blog.csdn.net/huangyuan_xuan/article/details/26243041<br>\n [6常用网络相关命令](http://blog.csdn.net/huangyuan_xuan/article/details/26242799) http://blog.csdn.net/huangyuan_xuan/article/details/26242799<br>\n [5数据包发送流程](http://blog.csdn.net/huangyuan_xuan/article/details/26242589) http://blog.csdn.net/huangyuan_xuan/article/details/26242589<br>\n [网线](http://blog.csdn.net/huangyuan_xuan/article/details/26242183) http://blog.csdn.net/huangyuan_xuan/article/details/26242183<br>\n [osi七层网络模型4](http://blog.csdn.net/huangyuan_xuan/article/details/26242101) http://blog.csdn.net/huangyuan_xuan/article/details/26242101<br>\n [osi七层网络模型3](http://blog.csdn.net/huangyuan_xuan/article/details/26242015) http://blog.csdn.net/huangyuan_xuan/article/details/26242015<br>\n [osi七层网络模型2](http://blog.csdn.net/huangyuan_xuan/article/details/26241831) http://blog.csdn.net/huangyuan_xuan/article/details/26241831<br>\n [OSI七层网络模型1](http://blog.csdn.net/huangyuan_xuan/article/details/26241631) http://blog.csdn.net/huangyuan_xuan/article/details/26241631<br>\n [sublime-text2 编译java出错 Decode error - output not utf-8的解决办法](http://blog.csdn.net/huangyuan_xuan/article/details/26164349) http://blog.csdn.net/huangyuan_xuan/article/details/26164349<br>\n [安装虚拟机报错解决办法 TheVMware Authorization Service is not running](http://blog.csdn.net/huangyuan_xuan/article/details/26162201) http://blog.csdn.net/huangyuan_xuan/article/details/26162201<br>\n [我的vim配置](http://blog.csdn.net/huangyuan_xuan/article/details/26162083) http://blog.csdn.net/huangyuan_xuan/article/details/26162083<br>\n [sublime text 2 搭建java运行环境](http://blog.csdn.net/huangyuan_xuan/article/details/26161983) http://blog.csdn.net/huangyuan_xuan/article/details/26161983<br>\n [ubuntu的一点命令](http://blog.csdn.net/huangyuan_xuan/article/details/26160973) http://blog.csdn.net/huangyuan_xuan/article/details/26160973<br>\n 以后主要就在gitpage上写博客了.\n 以上\n","source":"_posts/原CSDN博客.md","raw":"---\ntitle: 原CSDN博客\ndate: 2016-10-16 22:39:41\ntags: [csdn]\n---\n不打算在csdn上面写博客了,转到gitpage上面,自己用hexo搭建了博客系统.\n现在把原csdn的博客链接抄在下面\n\n<!-- more -->\n[使用openfire搭建IM聊天系统(一)](http://blog.csdn.net/huangyuan_xuan/article/details/52549416) http://blog.csdn.net/huangyuan_xuan/article/details/52549416<br>\n [浅谈使用单元素的枚举类型实现单例模式](http://blog.csdn.net/huangyuan_xuan/article/details/52193006) http://blog.csdn.net/huangyuan_xuan/article/details/52193006<br>\n [初步编写IDEA\\AndroidStudio翻译插件](http://blog.csdn.net/huangyuan_xuan/article/details/51935666) http://blog.csdn.net/huangyuan_xuan/article/details/51935666<br>\n [多线程 的理解（一）](http://blog.csdn.net/huangyuan_xuan/article/details/50881452) http://blog.csdn.net/huangyuan_xuan/article/details/50881452<br>\n [运行时数据区域](http://blog.csdn.net/huangyuan_xuan/article/details/50570461) http://blog.csdn.net/huangyuan_xuan/article/details/50570461<br>\n [虚拟机字节码执行引擎](http://blog.csdn.net/huangyuan_xuan/article/details/50569443) http://blog.csdn.net/huangyuan_xuan/article/details/50569443<br>\n [虚拟机类加载机制](http://blog.csdn.net/huangyuan_xuan/article/details/50550725) http://blog.csdn.net/huangyuan_xuan/article/details/50550725<br>\n [垃圾收集器与内存分配策略](http://blog.csdn.net/huangyuan_xuan/article/details/50513881) http://blog.csdn.net/huangyuan_xuan/article/details/50513881<br>\n [JDK的一些命令行工具](http://blog.csdn.net/huangyuan_xuan/article/details/50513861) http://blog.csdn.net/huangyuan_xuan/article/details/50513861<br>\n [MongoDB基础](http://blog.csdn.net/huangyuan_xuan/article/details/50155345) http://blog.csdn.net/huangyuan_xuan/article/details/50155345<br>\n [tomcat图形化界面管理及数据源配置](http://blog.csdn.net/huangyuan_xuan/article/details/49859151) http://blog.csdn.net/huangyuan_xuan/article/details/49859151<br>\n [android 四大图片缓存原理、特性对比](http://blog.csdn.net/huangyuan_xuan/article/details/49362701) http://blog.csdn.net/huangyuan_xuan/article/details/49362701<br>\n [github分支管理](http://blog.csdn.net/huangyuan_xuan/article/details/49356523) http://blog.csdn.net/huangyuan_xuan/article/details/49356523<br>\n [github 远程仓库](http://blog.csdn.net/huangyuan_xuan/article/details/49356505) http://blog.csdn.net/huangyuan_xuan/article/details/49356505<br>\n [github建立本地与远程仓库的连接](http://blog.csdn.net/huangyuan_xuan/article/details/49336403) http://blog.csdn.net/huangyuan_xuan/article/details/49336403<br>\n [Git 本地版本控制](http://blog.csdn.net/huangyuan_xuan/article/details/49162309) http://blog.csdn.net/huangyuan_xuan/article/details/49162309<br>\n [安装github](http://blog.csdn.net/huangyuan_xuan/article/details/49125597) http://blog.csdn.net/huangyuan_xuan/article/details/49125597<br>\n [ubuntu 14.04 apt-get install 不能自动补全解决办法](http://blog.csdn.net/huangyuan_xuan/article/details/48915299) http://blog.csdn.net/huangyuan_xuan/article/details/48915299<br>\n [String的一点小东西](http://blog.csdn.net/huangyuan_xuan/article/details/48116365) http://blog.csdn.net/huangyuan_xuan/article/details/48116365<br>\n [wireshark error: There are no interfaces on which a capture can be done.](http://blog.csdn.net/huangyuan_xuan/article/details/46632395) http://blog.csdn.net/huangyuan_xuan/article/details/46632395<br>\n [windows下使用cmd（命令行）发送邮件](http://blog.csdn.net/huangyuan_xuan/article/details/46564319) http://blog.csdn.net/huangyuan_xuan/article/details/46564319<br>\n [Notepad++ 搭建java编译环境](http://blog.csdn.net/huangyuan_xuan/article/details/45936413) http://blog.csdn.net/huangyuan_xuan/article/details/45936413<br>\n [JVM虚拟机](http://blog.csdn.net/huangyuan_xuan/article/details/44537233) http://blog.csdn.net/huangyuan_xuan/article/details/44537233<br>\n [servlet向浏览器输出验证码图片](http://blog.csdn.net/huangyuan_xuan/article/details/43817631) http://blog.csdn.net/huangyuan_xuan/article/details/43817631<br>\n [ubuntu14.04开热点共享网络](http://blog.csdn.net/huangyuan_xuan/article/details/43759585) http://blog.csdn.net/huangyuan_xuan/article/details/43759585<br>\n [UNIX/linux的find命令细节](http://blog.csdn.net/huangyuan_xuan/article/details/43739353) http://blog.csdn.net/huangyuan_xuan/article/details/43739353<br>\n [编写shell时，提示let：not found](http://blog.csdn.net/huangyuan_xuan/article/details/43490373) http://blog.csdn.net/huangyuan_xuan/article/details/43490373<br>\n [cmd命令大全](http://blog.csdn.net/huangyuan_xuan/article/details/42804537) http://blog.csdn.net/huangyuan_xuan/article/details/42804537<br>\n [华为 ap ac设备配置命令](http://blog.csdn.net/huangyuan_xuan/article/details/41647447) http://blog.csdn.net/huangyuan_xuan/article/details/41647447<br>\n [更改SQLserver的登录方式](http://blog.csdn.net/huangyuan_xuan/article/details/41085629) http://blog.csdn.net/huangyuan_xuan/article/details/41085629<br>\n [汇编FLAG寄存器简介](http://blog.csdn.net/huangyuan_xuan/article/details/40949147) http://blog.csdn.net/huangyuan_xuan/article/details/40949147<br>\n [汇编指令——转移指令](http://blog.csdn.net/huangyuan_xuan/article/details/40949119) http://blog.csdn.net/huangyuan_xuan/article/details/40949119<br>\n [汇编指令](http://blog.csdn.net/huangyuan_xuan/article/details/40949109) http://blog.csdn.net/huangyuan_xuan/article/details/40949109<br>\n [汇编寻址方式](http://blog.csdn.net/huangyuan_xuan/article/details/40949087) http://blog.csdn.net/huangyuan_xuan/article/details/40949087<br>\n [一段汇编小程序及说明——将数据，代码，栈放入不同的段](http://blog.csdn.net/huangyuan_xuan/article/details/40949075) http://blog.csdn.net/huangyuan_xuan/article/details/40949075<br>\n [一段简单汇编语言程序及说明](http://blog.csdn.net/huangyuan_xuan/article/details/40949069) http://blog.csdn.net/huangyuan_xuan/article/details/40949069<br>\n [8086寄存器](http://blog.csdn.net/huangyuan_xuan/article/details/40949063) http://blog.csdn.net/huangyuan_xuan/article/details/40949063<br>\n [oracle创建实例化数据库或者连接别的远程主机数据库提示“无监听程序”的解决办法](http://blog.csdn.net/huangyuan_xuan/article/details/40857207) http://blog.csdn.net/huangyuan_xuan/article/details/40857207<br>\n [安装tomcat提示Faild to install Tomcat7 service 解决办法](http://blog.csdn.net/huangyuan_xuan/article/details/40821859) http://blog.csdn.net/huangyuan_xuan/article/details/40821859<br>\n [mysql事物处理和管理配置](http://blog.csdn.net/huangyuan_xuan/article/details/40821521) http://blog.csdn.net/huangyuan_xuan/article/details/40821521<br>\n [mysql 连接查询](http://blog.csdn.net/huangyuan_xuan/article/details/40783341) http://blog.csdn.net/huangyuan_xuan/article/details/40783341<br>\n [MySQL常用命令](http://blog.csdn.net/huangyuan_xuan/article/details/40783331) http://blog.csdn.net/huangyuan_xuan/article/details/40783331<br>\n [ubuntu下MySQL键值不支持中文解决办法](http://blog.csdn.net/huangyuan_xuan/article/details/40783317) http://blog.csdn.net/huangyuan_xuan/article/details/40783317<br>\n [Myeclipse新建webservice客户端](http://blog.csdn.net/huangyuan_xuan/article/details/39992799) http://blog.csdn.net/huangyuan_xuan/article/details/39992799<br>\n [MyEclips新建webservice](http://blog.csdn.net/huangyuan_xuan/article/details/39992723) http://blog.csdn.net/huangyuan_xuan/article/details/39992723<br>\n [intellij IDEA更换主题为Darcula后中文项目名称变口（方框）的解决办法](http://blog.csdn.net/huangyuan_xuan/article/details/39896009) http://blog.csdn.net/huangyuan_xuan/article/details/39896009<br>\n [java模拟登录校内成绩查询网站，将获得的HTML代码用jsoup解析](http://blog.csdn.net/huangyuan_xuan/article/details/39723251) http://blog.csdn.net/huangyuan_xuan/article/details/39723251<br>\n [Ubuntu14.04 LTS更新源](http://blog.csdn.net/huangyuan_xuan/article/details/39119797) http://blog.csdn.net/huangyuan_xuan/article/details/39119797<br>\n [ubuntu14.04开机自动挂载windows磁盘的配置方法](http://blog.csdn.net/huangyuan_xuan/article/details/39118723) http://blog.csdn.net/huangyuan_xuan/article/details/39118723<br>\n [java实现MD5和sha1加密](http://blog.csdn.net/huangyuan_xuan/article/details/39081435) http://blog.csdn.net/huangyuan_xuan/article/details/39081435<br>\n [22 PPP协议](http://blog.csdn.net/huangyuan_xuan/article/details/38427607) http://blog.csdn.net/huangyuan_xuan/article/details/38427607<br>\n [21 串行接口封装](http://blog.csdn.net/huangyuan_xuan/article/details/38427547) http://blog.csdn.net/huangyuan_xuan/article/details/38427547<br>\n [20 internet connection](http://blog.csdn.net/huangyuan_xuan/article/details/38427527) http://blog.csdn.net/huangyuan_xuan/article/details/38427527<br>\n [19 广域网 WAN](http://blog.csdn.net/huangyuan_xuan/article/details/38423675) http://blog.csdn.net/huangyuan_xuan/article/details/38423675<br>\n [java的JDK的安装配置图文详解](http://blog.csdn.net/huangyuan_xuan/article/details/38405103) http://blog.csdn.net/huangyuan_xuan/article/details/38405103<br>\n [18 ACL访问控制列表（access control list）](http://blog.csdn.net/huangyuan_xuan/article/details/38387045) http://blog.csdn.net/huangyuan_xuan/article/details/38387045<br>\n [17 NAT转换](http://blog.csdn.net/huangyuan_xuan/article/details/38342675) http://blog.csdn.net/huangyuan_xuan/article/details/38342675<br>\n [16 DHCP](http://blog.csdn.net/huangyuan_xuan/article/details/38278825) http://blog.csdn.net/huangyuan_xuan/article/details/38278825<br>\n [Java常见错误列表](http://blog.csdn.net/huangyuan_xuan/article/details/37957229) http://blog.csdn.net/huangyuan_xuan/article/details/37957229<br>\n [LXLE Linux取代Windows XP的11个大招](http://blog.csdn.net/huangyuan_xuan/article/details/37937957) http://blog.csdn.net/huangyuan_xuan/article/details/37937957<br>\n [jQuery语法简介](http://blog.csdn.net/huangyuan_xuan/article/details/37738127) http://blog.csdn.net/huangyuan_xuan/article/details/37738127<br>\n [cookie简介](http://blog.csdn.net/huangyuan_xuan/article/details/37728211) http://blog.csdn.net/huangyuan_xuan/article/details/37728211<br>\n [DOM 简介](http://blog.csdn.net/huangyuan_xuan/article/details/37699891) http://blog.csdn.net/huangyuan_xuan/article/details/37699891<br>\n [vim 命令](http://blog.csdn.net/huangyuan_xuan/article/details/28880287) http://blog.csdn.net/huangyuan_xuan/article/details/28880287<br>\n [我们大神都这样——提问的智慧](http://blog.csdn.net/huangyuan_xuan/article/details/28276437) http://blog.csdn.net/huangyuan_xuan/article/details/28276437<br>\n [初学C语言的人看不懂的关机代码](http://blog.csdn.net/huangyuan_xuan/article/details/27972015) http://blog.csdn.net/huangyuan_xuan/article/details/27972015<br>\n [ubuntu连接路由器无线网络，却不能上网](http://blog.csdn.net/huangyuan_xuan/article/details/27792089) http://blog.csdn.net/huangyuan_xuan/article/details/27792089<br>\n [sublime-text2的中英文对照表（附带个人的配置习惯）](http://blog.csdn.net/huangyuan_xuan/article/details/26969041) http://blog.csdn.net/huangyuan_xuan/article/details/26969041<br>\n [电脑蓝屏代码大全](http://blog.csdn.net/huangyuan_xuan/article/details/26246709) http://blog.csdn.net/huangyuan_xuan/article/details/26246709<br>\n [VC6.0 快捷键整理](http://blog.csdn.net/huangyuan_xuan/article/details/26245513) http://blog.csdn.net/huangyuan_xuan/article/details/26245513<br>\n [玩游戏无法全屏](http://blog.csdn.net/huangyuan_xuan/article/details/26245135) http://blog.csdn.net/huangyuan_xuan/article/details/26245135<br>\n [15 Ospf](http://blog.csdn.net/huangyuan_xuan/article/details/26244991) http://blog.csdn.net/huangyuan_xuan/article/details/26244991<br>\n [14 EIGRP 配置](http://blog.csdn.net/huangyuan_xuan/article/details/26244541) http://blog.csdn.net/huangyuan_xuan/article/details/26244541<br>\n [13 ERGIP](http://blog.csdn.net/huangyuan_xuan/article/details/26244439) http://blog.csdn.net/huangyuan_xuan/article/details/26244439<br>\n [12    rip-2  配置命令](http://blog.csdn.net/huangyuan_xuan/article/details/26244201) http://blog.csdn.net/huangyuan_xuan/article/details/26244201<br>\n [11    rip -1](http://blog.csdn.net/huangyuan_xuan/article/details/26244031) http://blog.csdn.net/huangyuan_xuan/article/details/26244031<br>\n [10动态路由](http://blog.csdn.net/huangyuan_xuan/article/details/26243735) http://blog.csdn.net/huangyuan_xuan/article/details/26243735<br>\n [9静态路由](http://blog.csdn.net/huangyuan_xuan/article/details/26243487) http://blog.csdn.net/huangyuan_xuan/article/details/26243487<br>\n [8网络拓扑结构](http://blog.csdn.net/huangyuan_xuan/article/details/26243293) http://blog.csdn.net/huangyuan_xuan/article/details/26243293<br>\n [7VLSM子网划分](http://blog.csdn.net/huangyuan_xuan/article/details/26243041) http://blog.csdn.net/huangyuan_xuan/article/details/26243041<br>\n [6常用网络相关命令](http://blog.csdn.net/huangyuan_xuan/article/details/26242799) http://blog.csdn.net/huangyuan_xuan/article/details/26242799<br>\n [5数据包发送流程](http://blog.csdn.net/huangyuan_xuan/article/details/26242589) http://blog.csdn.net/huangyuan_xuan/article/details/26242589<br>\n [网线](http://blog.csdn.net/huangyuan_xuan/article/details/26242183) http://blog.csdn.net/huangyuan_xuan/article/details/26242183<br>\n [osi七层网络模型4](http://blog.csdn.net/huangyuan_xuan/article/details/26242101) http://blog.csdn.net/huangyuan_xuan/article/details/26242101<br>\n [osi七层网络模型3](http://blog.csdn.net/huangyuan_xuan/article/details/26242015) http://blog.csdn.net/huangyuan_xuan/article/details/26242015<br>\n [osi七层网络模型2](http://blog.csdn.net/huangyuan_xuan/article/details/26241831) http://blog.csdn.net/huangyuan_xuan/article/details/26241831<br>\n [OSI七层网络模型1](http://blog.csdn.net/huangyuan_xuan/article/details/26241631) http://blog.csdn.net/huangyuan_xuan/article/details/26241631<br>\n [sublime-text2 编译java出错 Decode error - output not utf-8的解决办法](http://blog.csdn.net/huangyuan_xuan/article/details/26164349) http://blog.csdn.net/huangyuan_xuan/article/details/26164349<br>\n [安装虚拟机报错解决办法 TheVMware Authorization Service is not running](http://blog.csdn.net/huangyuan_xuan/article/details/26162201) http://blog.csdn.net/huangyuan_xuan/article/details/26162201<br>\n [我的vim配置](http://blog.csdn.net/huangyuan_xuan/article/details/26162083) http://blog.csdn.net/huangyuan_xuan/article/details/26162083<br>\n [sublime text 2 搭建java运行环境](http://blog.csdn.net/huangyuan_xuan/article/details/26161983) http://blog.csdn.net/huangyuan_xuan/article/details/26161983<br>\n [ubuntu的一点命令](http://blog.csdn.net/huangyuan_xuan/article/details/26160973) http://blog.csdn.net/huangyuan_xuan/article/details/26160973<br>\n 以后主要就在gitpage上写博客了.\n 以上\n","slug":"原CSDN博客","published":1,"updated":"2018-04-24T05:33:19.509Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjl3vbtrt003bisdgmoe8iz4v","content":"<p>不打算在csdn上面写博客了,转到gitpage上面,自己用hexo搭建了博客系统.<br>现在把原csdn的博客链接抄在下面</p>\n<a id=\"more\"></a>\n<p><a href=\"http://blog.csdn.net/huangyuan_xuan/article/details/52549416\" target=\"_blank\" rel=\"external\">使用openfire搭建IM聊天系统(一)</a> <a href=\"http://blog.csdn.net/huangyuan_xuan/article/details/52549416\" target=\"_blank\" rel=\"external\">http://blog.csdn.net/huangyuan_xuan/article/details/52549416</a><br><br> <a href=\"http://blog.csdn.net/huangyuan_xuan/article/details/52193006\" target=\"_blank\" rel=\"external\">浅谈使用单元素的枚举类型实现单例模式</a> <a href=\"http://blog.csdn.net/huangyuan_xuan/article/details/52193006\" target=\"_blank\" rel=\"external\">http://blog.csdn.net/huangyuan_xuan/article/details/52193006</a><br><br> <a href=\"http://blog.csdn.net/huangyuan_xuan/article/details/51935666\" target=\"_blank\" rel=\"external\">初步编写IDEA\\AndroidStudio翻译插件</a> <a href=\"http://blog.csdn.net/huangyuan_xuan/article/details/51935666\" target=\"_blank\" rel=\"external\">http://blog.csdn.net/huangyuan_xuan/article/details/51935666</a><br><br> <a href=\"http://blog.csdn.net/huangyuan_xuan/article/details/50881452\" target=\"_blank\" rel=\"external\">多线程 的理解（一）</a> <a href=\"http://blog.csdn.net/huangyuan_xuan/article/details/50881452\" target=\"_blank\" rel=\"external\">http://blog.csdn.net/huangyuan_xuan/article/details/50881452</a><br><br> <a href=\"http://blog.csdn.net/huangyuan_xuan/article/details/50570461\" target=\"_blank\" rel=\"external\">运行时数据区域</a> <a href=\"http://blog.csdn.net/huangyuan_xuan/article/details/50570461\" target=\"_blank\" rel=\"external\">http://blog.csdn.net/huangyuan_xuan/article/details/50570461</a><br><br> <a href=\"http://blog.csdn.net/huangyuan_xuan/article/details/50569443\" target=\"_blank\" rel=\"external\">虚拟机字节码执行引擎</a> <a href=\"http://blog.csdn.net/huangyuan_xuan/article/details/50569443\" target=\"_blank\" rel=\"external\">http://blog.csdn.net/huangyuan_xuan/article/details/50569443</a><br><br> <a href=\"http://blog.csdn.net/huangyuan_xuan/article/details/50550725\" target=\"_blank\" rel=\"external\">虚拟机类加载机制</a> <a href=\"http://blog.csdn.net/huangyuan_xuan/article/details/50550725\" target=\"_blank\" rel=\"external\">http://blog.csdn.net/huangyuan_xuan/article/details/50550725</a><br><br> <a href=\"http://blog.csdn.net/huangyuan_xuan/article/details/50513881\" target=\"_blank\" rel=\"external\">垃圾收集器与内存分配策略</a> <a href=\"http://blog.csdn.net/huangyuan_xuan/article/details/50513881\" target=\"_blank\" rel=\"external\">http://blog.csdn.net/huangyuan_xuan/article/details/50513881</a><br><br> <a href=\"http://blog.csdn.net/huangyuan_xuan/article/details/50513861\" target=\"_blank\" rel=\"external\">JDK的一些命令行工具</a> <a href=\"http://blog.csdn.net/huangyuan_xuan/article/details/50513861\" target=\"_blank\" rel=\"external\">http://blog.csdn.net/huangyuan_xuan/article/details/50513861</a><br><br> <a href=\"http://blog.csdn.net/huangyuan_xuan/article/details/50155345\" target=\"_blank\" rel=\"external\">MongoDB基础</a> <a href=\"http://blog.csdn.net/huangyuan_xuan/article/details/50155345\" target=\"_blank\" rel=\"external\">http://blog.csdn.net/huangyuan_xuan/article/details/50155345</a><br><br> <a href=\"http://blog.csdn.net/huangyuan_xuan/article/details/49859151\" target=\"_blank\" rel=\"external\">tomcat图形化界面管理及数据源配置</a> <a href=\"http://blog.csdn.net/huangyuan_xuan/article/details/49859151\" target=\"_blank\" rel=\"external\">http://blog.csdn.net/huangyuan_xuan/article/details/49859151</a><br><br> <a href=\"http://blog.csdn.net/huangyuan_xuan/article/details/49362701\" target=\"_blank\" rel=\"external\">android 四大图片缓存原理、特性对比</a> <a href=\"http://blog.csdn.net/huangyuan_xuan/article/details/49362701\" target=\"_blank\" rel=\"external\">http://blog.csdn.net/huangyuan_xuan/article/details/49362701</a><br><br> <a href=\"http://blog.csdn.net/huangyuan_xuan/article/details/49356523\" target=\"_blank\" rel=\"external\">github分支管理</a> <a href=\"http://blog.csdn.net/huangyuan_xuan/article/details/49356523\" target=\"_blank\" rel=\"external\">http://blog.csdn.net/huangyuan_xuan/article/details/49356523</a><br><br> <a href=\"http://blog.csdn.net/huangyuan_xuan/article/details/49356505\" target=\"_blank\" rel=\"external\">github 远程仓库</a> <a href=\"http://blog.csdn.net/huangyuan_xuan/article/details/49356505\" target=\"_blank\" rel=\"external\">http://blog.csdn.net/huangyuan_xuan/article/details/49356505</a><br><br> <a href=\"http://blog.csdn.net/huangyuan_xuan/article/details/49336403\" target=\"_blank\" rel=\"external\">github建立本地与远程仓库的连接</a> <a href=\"http://blog.csdn.net/huangyuan_xuan/article/details/49336403\" target=\"_blank\" rel=\"external\">http://blog.csdn.net/huangyuan_xuan/article/details/49336403</a><br><br> <a href=\"http://blog.csdn.net/huangyuan_xuan/article/details/49162309\" target=\"_blank\" rel=\"external\">Git 本地版本控制</a> <a href=\"http://blog.csdn.net/huangyuan_xuan/article/details/49162309\" target=\"_blank\" rel=\"external\">http://blog.csdn.net/huangyuan_xuan/article/details/49162309</a><br><br> <a href=\"http://blog.csdn.net/huangyuan_xuan/article/details/49125597\" target=\"_blank\" rel=\"external\">安装github</a> <a href=\"http://blog.csdn.net/huangyuan_xuan/article/details/49125597\" target=\"_blank\" rel=\"external\">http://blog.csdn.net/huangyuan_xuan/article/details/49125597</a><br><br> <a href=\"http://blog.csdn.net/huangyuan_xuan/article/details/48915299\" target=\"_blank\" rel=\"external\">ubuntu 14.04 apt-get install 不能自动补全解决办法</a> <a href=\"http://blog.csdn.net/huangyuan_xuan/article/details/48915299\" target=\"_blank\" rel=\"external\">http://blog.csdn.net/huangyuan_xuan/article/details/48915299</a><br><br> <a href=\"http://blog.csdn.net/huangyuan_xuan/article/details/48116365\" target=\"_blank\" rel=\"external\">String的一点小东西</a> <a href=\"http://blog.csdn.net/huangyuan_xuan/article/details/48116365\" target=\"_blank\" rel=\"external\">http://blog.csdn.net/huangyuan_xuan/article/details/48116365</a><br><br> <a href=\"http://blog.csdn.net/huangyuan_xuan/article/details/46632395\" target=\"_blank\" rel=\"external\">wireshark error: There are no interfaces on which a capture can be done.</a> <a href=\"http://blog.csdn.net/huangyuan_xuan/article/details/46632395\" target=\"_blank\" rel=\"external\">http://blog.csdn.net/huangyuan_xuan/article/details/46632395</a><br><br> <a href=\"http://blog.csdn.net/huangyuan_xuan/article/details/46564319\" target=\"_blank\" rel=\"external\">windows下使用cmd（命令行）发送邮件</a> <a href=\"http://blog.csdn.net/huangyuan_xuan/article/details/46564319\" target=\"_blank\" rel=\"external\">http://blog.csdn.net/huangyuan_xuan/article/details/46564319</a><br><br> <a href=\"http://blog.csdn.net/huangyuan_xuan/article/details/45936413\" target=\"_blank\" rel=\"external\">Notepad++ 搭建java编译环境</a> <a href=\"http://blog.csdn.net/huangyuan_xuan/article/details/45936413\" target=\"_blank\" rel=\"external\">http://blog.csdn.net/huangyuan_xuan/article/details/45936413</a><br><br> <a href=\"http://blog.csdn.net/huangyuan_xuan/article/details/44537233\" target=\"_blank\" rel=\"external\">JVM虚拟机</a> <a href=\"http://blog.csdn.net/huangyuan_xuan/article/details/44537233\" target=\"_blank\" rel=\"external\">http://blog.csdn.net/huangyuan_xuan/article/details/44537233</a><br><br> <a href=\"http://blog.csdn.net/huangyuan_xuan/article/details/43817631\" target=\"_blank\" rel=\"external\">servlet向浏览器输出验证码图片</a> <a href=\"http://blog.csdn.net/huangyuan_xuan/article/details/43817631\" target=\"_blank\" rel=\"external\">http://blog.csdn.net/huangyuan_xuan/article/details/43817631</a><br><br> <a href=\"http://blog.csdn.net/huangyuan_xuan/article/details/43759585\" target=\"_blank\" rel=\"external\">ubuntu14.04开热点共享网络</a> <a href=\"http://blog.csdn.net/huangyuan_xuan/article/details/43759585\" target=\"_blank\" rel=\"external\">http://blog.csdn.net/huangyuan_xuan/article/details/43759585</a><br><br> <a href=\"http://blog.csdn.net/huangyuan_xuan/article/details/43739353\" target=\"_blank\" rel=\"external\">UNIX/linux的find命令细节</a> <a href=\"http://blog.csdn.net/huangyuan_xuan/article/details/43739353\" target=\"_blank\" rel=\"external\">http://blog.csdn.net/huangyuan_xuan/article/details/43739353</a><br><br> <a href=\"http://blog.csdn.net/huangyuan_xuan/article/details/43490373\" target=\"_blank\" rel=\"external\">编写shell时，提示let：not found</a> <a href=\"http://blog.csdn.net/huangyuan_xuan/article/details/43490373\" target=\"_blank\" rel=\"external\">http://blog.csdn.net/huangyuan_xuan/article/details/43490373</a><br><br> <a href=\"http://blog.csdn.net/huangyuan_xuan/article/details/42804537\" target=\"_blank\" rel=\"external\">cmd命令大全</a> <a href=\"http://blog.csdn.net/huangyuan_xuan/article/details/42804537\" target=\"_blank\" rel=\"external\">http://blog.csdn.net/huangyuan_xuan/article/details/42804537</a><br><br> <a href=\"http://blog.csdn.net/huangyuan_xuan/article/details/41647447\" target=\"_blank\" rel=\"external\">华为 ap ac设备配置命令</a> <a href=\"http://blog.csdn.net/huangyuan_xuan/article/details/41647447\" target=\"_blank\" rel=\"external\">http://blog.csdn.net/huangyuan_xuan/article/details/41647447</a><br><br> <a href=\"http://blog.csdn.net/huangyuan_xuan/article/details/41085629\" target=\"_blank\" rel=\"external\">更改SQLserver的登录方式</a> <a href=\"http://blog.csdn.net/huangyuan_xuan/article/details/41085629\" target=\"_blank\" rel=\"external\">http://blog.csdn.net/huangyuan_xuan/article/details/41085629</a><br><br> <a href=\"http://blog.csdn.net/huangyuan_xuan/article/details/40949147\" target=\"_blank\" rel=\"external\">汇编FLAG寄存器简介</a> <a href=\"http://blog.csdn.net/huangyuan_xuan/article/details/40949147\" target=\"_blank\" rel=\"external\">http://blog.csdn.net/huangyuan_xuan/article/details/40949147</a><br><br> <a href=\"http://blog.csdn.net/huangyuan_xuan/article/details/40949119\" target=\"_blank\" rel=\"external\">汇编指令——转移指令</a> <a href=\"http://blog.csdn.net/huangyuan_xuan/article/details/40949119\" target=\"_blank\" rel=\"external\">http://blog.csdn.net/huangyuan_xuan/article/details/40949119</a><br><br> <a href=\"http://blog.csdn.net/huangyuan_xuan/article/details/40949109\" target=\"_blank\" rel=\"external\">汇编指令</a> <a href=\"http://blog.csdn.net/huangyuan_xuan/article/details/40949109\" target=\"_blank\" rel=\"external\">http://blog.csdn.net/huangyuan_xuan/article/details/40949109</a><br><br> <a href=\"http://blog.csdn.net/huangyuan_xuan/article/details/40949087\" target=\"_blank\" rel=\"external\">汇编寻址方式</a> <a href=\"http://blog.csdn.net/huangyuan_xuan/article/details/40949087\" target=\"_blank\" rel=\"external\">http://blog.csdn.net/huangyuan_xuan/article/details/40949087</a><br><br> <a href=\"http://blog.csdn.net/huangyuan_xuan/article/details/40949075\" target=\"_blank\" rel=\"external\">一段汇编小程序及说明——将数据，代码，栈放入不同的段</a> <a href=\"http://blog.csdn.net/huangyuan_xuan/article/details/40949075\" target=\"_blank\" rel=\"external\">http://blog.csdn.net/huangyuan_xuan/article/details/40949075</a><br><br> <a href=\"http://blog.csdn.net/huangyuan_xuan/article/details/40949069\" target=\"_blank\" rel=\"external\">一段简单汇编语言程序及说明</a> <a href=\"http://blog.csdn.net/huangyuan_xuan/article/details/40949069\" target=\"_blank\" rel=\"external\">http://blog.csdn.net/huangyuan_xuan/article/details/40949069</a><br><br> <a href=\"http://blog.csdn.net/huangyuan_xuan/article/details/40949063\" target=\"_blank\" rel=\"external\">8086寄存器</a> <a href=\"http://blog.csdn.net/huangyuan_xuan/article/details/40949063\" target=\"_blank\" rel=\"external\">http://blog.csdn.net/huangyuan_xuan/article/details/40949063</a><br><br> <a href=\"http://blog.csdn.net/huangyuan_xuan/article/details/40857207\" target=\"_blank\" rel=\"external\">oracle创建实例化数据库或者连接别的远程主机数据库提示“无监听程序”的解决办法</a> <a href=\"http://blog.csdn.net/huangyuan_xuan/article/details/40857207\" target=\"_blank\" rel=\"external\">http://blog.csdn.net/huangyuan_xuan/article/details/40857207</a><br><br> <a href=\"http://blog.csdn.net/huangyuan_xuan/article/details/40821859\" target=\"_blank\" rel=\"external\">安装tomcat提示Faild to install Tomcat7 service 解决办法</a> <a href=\"http://blog.csdn.net/huangyuan_xuan/article/details/40821859\" target=\"_blank\" rel=\"external\">http://blog.csdn.net/huangyuan_xuan/article/details/40821859</a><br><br> <a href=\"http://blog.csdn.net/huangyuan_xuan/article/details/40821521\" target=\"_blank\" rel=\"external\">mysql事物处理和管理配置</a> <a href=\"http://blog.csdn.net/huangyuan_xuan/article/details/40821521\" target=\"_blank\" rel=\"external\">http://blog.csdn.net/huangyuan_xuan/article/details/40821521</a><br><br> <a href=\"http://blog.csdn.net/huangyuan_xuan/article/details/40783341\" target=\"_blank\" rel=\"external\">mysql 连接查询</a> <a href=\"http://blog.csdn.net/huangyuan_xuan/article/details/40783341\" target=\"_blank\" rel=\"external\">http://blog.csdn.net/huangyuan_xuan/article/details/40783341</a><br><br> <a href=\"http://blog.csdn.net/huangyuan_xuan/article/details/40783331\" target=\"_blank\" rel=\"external\">MySQL常用命令</a> <a href=\"http://blog.csdn.net/huangyuan_xuan/article/details/40783331\" target=\"_blank\" rel=\"external\">http://blog.csdn.net/huangyuan_xuan/article/details/40783331</a><br><br> <a href=\"http://blog.csdn.net/huangyuan_xuan/article/details/40783317\" target=\"_blank\" rel=\"external\">ubuntu下MySQL键值不支持中文解决办法</a> <a href=\"http://blog.csdn.net/huangyuan_xuan/article/details/40783317\" target=\"_blank\" rel=\"external\">http://blog.csdn.net/huangyuan_xuan/article/details/40783317</a><br><br> <a href=\"http://blog.csdn.net/huangyuan_xuan/article/details/39992799\" target=\"_blank\" rel=\"external\">Myeclipse新建webservice客户端</a> <a href=\"http://blog.csdn.net/huangyuan_xuan/article/details/39992799\" target=\"_blank\" rel=\"external\">http://blog.csdn.net/huangyuan_xuan/article/details/39992799</a><br><br> <a href=\"http://blog.csdn.net/huangyuan_xuan/article/details/39992723\" target=\"_blank\" rel=\"external\">MyEclips新建webservice</a> <a href=\"http://blog.csdn.net/huangyuan_xuan/article/details/39992723\" target=\"_blank\" rel=\"external\">http://blog.csdn.net/huangyuan_xuan/article/details/39992723</a><br><br> <a href=\"http://blog.csdn.net/huangyuan_xuan/article/details/39896009\" target=\"_blank\" rel=\"external\">intellij IDEA更换主题为Darcula后中文项目名称变口（方框）的解决办法</a> <a href=\"http://blog.csdn.net/huangyuan_xuan/article/details/39896009\" target=\"_blank\" rel=\"external\">http://blog.csdn.net/huangyuan_xuan/article/details/39896009</a><br><br> <a href=\"http://blog.csdn.net/huangyuan_xuan/article/details/39723251\" target=\"_blank\" rel=\"external\">java模拟登录校内成绩查询网站，将获得的HTML代码用jsoup解析</a> <a href=\"http://blog.csdn.net/huangyuan_xuan/article/details/39723251\" target=\"_blank\" rel=\"external\">http://blog.csdn.net/huangyuan_xuan/article/details/39723251</a><br><br> <a href=\"http://blog.csdn.net/huangyuan_xuan/article/details/39119797\" target=\"_blank\" rel=\"external\">Ubuntu14.04 LTS更新源</a> <a href=\"http://blog.csdn.net/huangyuan_xuan/article/details/39119797\" target=\"_blank\" rel=\"external\">http://blog.csdn.net/huangyuan_xuan/article/details/39119797</a><br><br> <a href=\"http://blog.csdn.net/huangyuan_xuan/article/details/39118723\" target=\"_blank\" rel=\"external\">ubuntu14.04开机自动挂载windows磁盘的配置方法</a> <a href=\"http://blog.csdn.net/huangyuan_xuan/article/details/39118723\" target=\"_blank\" rel=\"external\">http://blog.csdn.net/huangyuan_xuan/article/details/39118723</a><br><br> <a href=\"http://blog.csdn.net/huangyuan_xuan/article/details/39081435\" target=\"_blank\" rel=\"external\">java实现MD5和sha1加密</a> <a href=\"http://blog.csdn.net/huangyuan_xuan/article/details/39081435\" target=\"_blank\" rel=\"external\">http://blog.csdn.net/huangyuan_xuan/article/details/39081435</a><br><br> <a href=\"http://blog.csdn.net/huangyuan_xuan/article/details/38427607\" target=\"_blank\" rel=\"external\">22 PPP协议</a> <a href=\"http://blog.csdn.net/huangyuan_xuan/article/details/38427607\" target=\"_blank\" rel=\"external\">http://blog.csdn.net/huangyuan_xuan/article/details/38427607</a><br><br> <a href=\"http://blog.csdn.net/huangyuan_xuan/article/details/38427547\" target=\"_blank\" rel=\"external\">21 串行接口封装</a> <a href=\"http://blog.csdn.net/huangyuan_xuan/article/details/38427547\" target=\"_blank\" rel=\"external\">http://blog.csdn.net/huangyuan_xuan/article/details/38427547</a><br><br> <a href=\"http://blog.csdn.net/huangyuan_xuan/article/details/38427527\" target=\"_blank\" rel=\"external\">20 internet connection</a> <a href=\"http://blog.csdn.net/huangyuan_xuan/article/details/38427527\" target=\"_blank\" rel=\"external\">http://blog.csdn.net/huangyuan_xuan/article/details/38427527</a><br><br> <a href=\"http://blog.csdn.net/huangyuan_xuan/article/details/38423675\" target=\"_blank\" rel=\"external\">19 广域网 WAN</a> <a href=\"http://blog.csdn.net/huangyuan_xuan/article/details/38423675\" target=\"_blank\" rel=\"external\">http://blog.csdn.net/huangyuan_xuan/article/details/38423675</a><br><br> <a href=\"http://blog.csdn.net/huangyuan_xuan/article/details/38405103\" target=\"_blank\" rel=\"external\">java的JDK的安装配置图文详解</a> <a href=\"http://blog.csdn.net/huangyuan_xuan/article/details/38405103\" target=\"_blank\" rel=\"external\">http://blog.csdn.net/huangyuan_xuan/article/details/38405103</a><br><br> <a href=\"http://blog.csdn.net/huangyuan_xuan/article/details/38387045\" target=\"_blank\" rel=\"external\">18 ACL访问控制列表（access control list）</a> <a href=\"http://blog.csdn.net/huangyuan_xuan/article/details/38387045\" target=\"_blank\" rel=\"external\">http://blog.csdn.net/huangyuan_xuan/article/details/38387045</a><br><br> <a href=\"http://blog.csdn.net/huangyuan_xuan/article/details/38342675\" target=\"_blank\" rel=\"external\">17 NAT转换</a> <a href=\"http://blog.csdn.net/huangyuan_xuan/article/details/38342675\" target=\"_blank\" rel=\"external\">http://blog.csdn.net/huangyuan_xuan/article/details/38342675</a><br><br> <a href=\"http://blog.csdn.net/huangyuan_xuan/article/details/38278825\" target=\"_blank\" rel=\"external\">16 DHCP</a> <a href=\"http://blog.csdn.net/huangyuan_xuan/article/details/38278825\" target=\"_blank\" rel=\"external\">http://blog.csdn.net/huangyuan_xuan/article/details/38278825</a><br><br> <a href=\"http://blog.csdn.net/huangyuan_xuan/article/details/37957229\" target=\"_blank\" rel=\"external\">Java常见错误列表</a> <a href=\"http://blog.csdn.net/huangyuan_xuan/article/details/37957229\" target=\"_blank\" rel=\"external\">http://blog.csdn.net/huangyuan_xuan/article/details/37957229</a><br><br> <a href=\"http://blog.csdn.net/huangyuan_xuan/article/details/37937957\" target=\"_blank\" rel=\"external\">LXLE Linux取代Windows XP的11个大招</a> <a href=\"http://blog.csdn.net/huangyuan_xuan/article/details/37937957\" target=\"_blank\" rel=\"external\">http://blog.csdn.net/huangyuan_xuan/article/details/37937957</a><br><br> <a href=\"http://blog.csdn.net/huangyuan_xuan/article/details/37738127\" target=\"_blank\" rel=\"external\">jQuery语法简介</a> <a href=\"http://blog.csdn.net/huangyuan_xuan/article/details/37738127\" target=\"_blank\" rel=\"external\">http://blog.csdn.net/huangyuan_xuan/article/details/37738127</a><br><br> <a href=\"http://blog.csdn.net/huangyuan_xuan/article/details/37728211\" target=\"_blank\" rel=\"external\">cookie简介</a> <a href=\"http://blog.csdn.net/huangyuan_xuan/article/details/37728211\" target=\"_blank\" rel=\"external\">http://blog.csdn.net/huangyuan_xuan/article/details/37728211</a><br><br> <a href=\"http://blog.csdn.net/huangyuan_xuan/article/details/37699891\" target=\"_blank\" rel=\"external\">DOM 简介</a> <a href=\"http://blog.csdn.net/huangyuan_xuan/article/details/37699891\" target=\"_blank\" rel=\"external\">http://blog.csdn.net/huangyuan_xuan/article/details/37699891</a><br><br> <a href=\"http://blog.csdn.net/huangyuan_xuan/article/details/28880287\" target=\"_blank\" rel=\"external\">vim 命令</a> <a href=\"http://blog.csdn.net/huangyuan_xuan/article/details/28880287\" target=\"_blank\" rel=\"external\">http://blog.csdn.net/huangyuan_xuan/article/details/28880287</a><br><br> <a href=\"http://blog.csdn.net/huangyuan_xuan/article/details/28276437\" target=\"_blank\" rel=\"external\">我们大神都这样——提问的智慧</a> <a href=\"http://blog.csdn.net/huangyuan_xuan/article/details/28276437\" target=\"_blank\" rel=\"external\">http://blog.csdn.net/huangyuan_xuan/article/details/28276437</a><br><br> <a href=\"http://blog.csdn.net/huangyuan_xuan/article/details/27972015\" target=\"_blank\" rel=\"external\">初学C语言的人看不懂的关机代码</a> <a href=\"http://blog.csdn.net/huangyuan_xuan/article/details/27972015\" target=\"_blank\" rel=\"external\">http://blog.csdn.net/huangyuan_xuan/article/details/27972015</a><br><br> <a href=\"http://blog.csdn.net/huangyuan_xuan/article/details/27792089\" target=\"_blank\" rel=\"external\">ubuntu连接路由器无线网络，却不能上网</a> <a href=\"http://blog.csdn.net/huangyuan_xuan/article/details/27792089\" target=\"_blank\" rel=\"external\">http://blog.csdn.net/huangyuan_xuan/article/details/27792089</a><br><br> <a href=\"http://blog.csdn.net/huangyuan_xuan/article/details/26969041\" target=\"_blank\" rel=\"external\">sublime-text2的中英文对照表（附带个人的配置习惯）</a> <a href=\"http://blog.csdn.net/huangyuan_xuan/article/details/26969041\" target=\"_blank\" rel=\"external\">http://blog.csdn.net/huangyuan_xuan/article/details/26969041</a><br><br> <a href=\"http://blog.csdn.net/huangyuan_xuan/article/details/26246709\" target=\"_blank\" rel=\"external\">电脑蓝屏代码大全</a> <a href=\"http://blog.csdn.net/huangyuan_xuan/article/details/26246709\" target=\"_blank\" rel=\"external\">http://blog.csdn.net/huangyuan_xuan/article/details/26246709</a><br><br> <a href=\"http://blog.csdn.net/huangyuan_xuan/article/details/26245513\" target=\"_blank\" rel=\"external\">VC6.0 快捷键整理</a> <a href=\"http://blog.csdn.net/huangyuan_xuan/article/details/26245513\" target=\"_blank\" rel=\"external\">http://blog.csdn.net/huangyuan_xuan/article/details/26245513</a><br><br> <a href=\"http://blog.csdn.net/huangyuan_xuan/article/details/26245135\" target=\"_blank\" rel=\"external\">玩游戏无法全屏</a> <a href=\"http://blog.csdn.net/huangyuan_xuan/article/details/26245135\" target=\"_blank\" rel=\"external\">http://blog.csdn.net/huangyuan_xuan/article/details/26245135</a><br><br> <a href=\"http://blog.csdn.net/huangyuan_xuan/article/details/26244991\" target=\"_blank\" rel=\"external\">15 Ospf</a> <a href=\"http://blog.csdn.net/huangyuan_xuan/article/details/26244991\" target=\"_blank\" rel=\"external\">http://blog.csdn.net/huangyuan_xuan/article/details/26244991</a><br><br> <a href=\"http://blog.csdn.net/huangyuan_xuan/article/details/26244541\" target=\"_blank\" rel=\"external\">14 EIGRP 配置</a> <a href=\"http://blog.csdn.net/huangyuan_xuan/article/details/26244541\" target=\"_blank\" rel=\"external\">http://blog.csdn.net/huangyuan_xuan/article/details/26244541</a><br><br> <a href=\"http://blog.csdn.net/huangyuan_xuan/article/details/26244439\" target=\"_blank\" rel=\"external\">13 ERGIP</a> <a href=\"http://blog.csdn.net/huangyuan_xuan/article/details/26244439\" target=\"_blank\" rel=\"external\">http://blog.csdn.net/huangyuan_xuan/article/details/26244439</a><br><br> <a href=\"http://blog.csdn.net/huangyuan_xuan/article/details/26244201\" target=\"_blank\" rel=\"external\">12    rip-2  配置命令</a> <a href=\"http://blog.csdn.net/huangyuan_xuan/article/details/26244201\" target=\"_blank\" rel=\"external\">http://blog.csdn.net/huangyuan_xuan/article/details/26244201</a><br><br> <a href=\"http://blog.csdn.net/huangyuan_xuan/article/details/26244031\" target=\"_blank\" rel=\"external\">11    rip -1</a> <a href=\"http://blog.csdn.net/huangyuan_xuan/article/details/26244031\" target=\"_blank\" rel=\"external\">http://blog.csdn.net/huangyuan_xuan/article/details/26244031</a><br><br> <a href=\"http://blog.csdn.net/huangyuan_xuan/article/details/26243735\" target=\"_blank\" rel=\"external\">10动态路由</a> <a href=\"http://blog.csdn.net/huangyuan_xuan/article/details/26243735\" target=\"_blank\" rel=\"external\">http://blog.csdn.net/huangyuan_xuan/article/details/26243735</a><br><br> <a href=\"http://blog.csdn.net/huangyuan_xuan/article/details/26243487\" target=\"_blank\" rel=\"external\">9静态路由</a> <a href=\"http://blog.csdn.net/huangyuan_xuan/article/details/26243487\" target=\"_blank\" rel=\"external\">http://blog.csdn.net/huangyuan_xuan/article/details/26243487</a><br><br> <a href=\"http://blog.csdn.net/huangyuan_xuan/article/details/26243293\" target=\"_blank\" rel=\"external\">8网络拓扑结构</a> <a href=\"http://blog.csdn.net/huangyuan_xuan/article/details/26243293\" target=\"_blank\" rel=\"external\">http://blog.csdn.net/huangyuan_xuan/article/details/26243293</a><br><br> <a href=\"http://blog.csdn.net/huangyuan_xuan/article/details/26243041\" target=\"_blank\" rel=\"external\">7VLSM子网划分</a> <a href=\"http://blog.csdn.net/huangyuan_xuan/article/details/26243041\" target=\"_blank\" rel=\"external\">http://blog.csdn.net/huangyuan_xuan/article/details/26243041</a><br><br> <a href=\"http://blog.csdn.net/huangyuan_xuan/article/details/26242799\" target=\"_blank\" rel=\"external\">6常用网络相关命令</a> <a href=\"http://blog.csdn.net/huangyuan_xuan/article/details/26242799\" target=\"_blank\" rel=\"external\">http://blog.csdn.net/huangyuan_xuan/article/details/26242799</a><br><br> <a href=\"http://blog.csdn.net/huangyuan_xuan/article/details/26242589\" target=\"_blank\" rel=\"external\">5数据包发送流程</a> <a href=\"http://blog.csdn.net/huangyuan_xuan/article/details/26242589\" target=\"_blank\" rel=\"external\">http://blog.csdn.net/huangyuan_xuan/article/details/26242589</a><br><br> <a href=\"http://blog.csdn.net/huangyuan_xuan/article/details/26242183\" target=\"_blank\" rel=\"external\">网线</a> <a href=\"http://blog.csdn.net/huangyuan_xuan/article/details/26242183\" target=\"_blank\" rel=\"external\">http://blog.csdn.net/huangyuan_xuan/article/details/26242183</a><br><br> <a href=\"http://blog.csdn.net/huangyuan_xuan/article/details/26242101\" target=\"_blank\" rel=\"external\">osi七层网络模型4</a> <a href=\"http://blog.csdn.net/huangyuan_xuan/article/details/26242101\" target=\"_blank\" rel=\"external\">http://blog.csdn.net/huangyuan_xuan/article/details/26242101</a><br><br> <a href=\"http://blog.csdn.net/huangyuan_xuan/article/details/26242015\" target=\"_blank\" rel=\"external\">osi七层网络模型3</a> <a href=\"http://blog.csdn.net/huangyuan_xuan/article/details/26242015\" target=\"_blank\" rel=\"external\">http://blog.csdn.net/huangyuan_xuan/article/details/26242015</a><br><br> <a href=\"http://blog.csdn.net/huangyuan_xuan/article/details/26241831\" target=\"_blank\" rel=\"external\">osi七层网络模型2</a> <a href=\"http://blog.csdn.net/huangyuan_xuan/article/details/26241831\" target=\"_blank\" rel=\"external\">http://blog.csdn.net/huangyuan_xuan/article/details/26241831</a><br><br> <a href=\"http://blog.csdn.net/huangyuan_xuan/article/details/26241631\" target=\"_blank\" rel=\"external\">OSI七层网络模型1</a> <a href=\"http://blog.csdn.net/huangyuan_xuan/article/details/26241631\" target=\"_blank\" rel=\"external\">http://blog.csdn.net/huangyuan_xuan/article/details/26241631</a><br><br> <a href=\"http://blog.csdn.net/huangyuan_xuan/article/details/26164349\" target=\"_blank\" rel=\"external\">sublime-text2 编译java出错 Decode error - output not utf-8的解决办法</a> <a href=\"http://blog.csdn.net/huangyuan_xuan/article/details/26164349\" target=\"_blank\" rel=\"external\">http://blog.csdn.net/huangyuan_xuan/article/details/26164349</a><br><br> <a href=\"http://blog.csdn.net/huangyuan_xuan/article/details/26162201\" target=\"_blank\" rel=\"external\">安装虚拟机报错解决办法 TheVMware Authorization Service is not running</a> <a href=\"http://blog.csdn.net/huangyuan_xuan/article/details/26162201\" target=\"_blank\" rel=\"external\">http://blog.csdn.net/huangyuan_xuan/article/details/26162201</a><br><br> <a href=\"http://blog.csdn.net/huangyuan_xuan/article/details/26162083\" target=\"_blank\" rel=\"external\">我的vim配置</a> <a href=\"http://blog.csdn.net/huangyuan_xuan/article/details/26162083\" target=\"_blank\" rel=\"external\">http://blog.csdn.net/huangyuan_xuan/article/details/26162083</a><br><br> <a href=\"http://blog.csdn.net/huangyuan_xuan/article/details/26161983\" target=\"_blank\" rel=\"external\">sublime text 2 搭建java运行环境</a> <a href=\"http://blog.csdn.net/huangyuan_xuan/article/details/26161983\" target=\"_blank\" rel=\"external\">http://blog.csdn.net/huangyuan_xuan/article/details/26161983</a><br><br> <a href=\"http://blog.csdn.net/huangyuan_xuan/article/details/26160973\" target=\"_blank\" rel=\"external\">ubuntu的一点命令</a> <a href=\"http://blog.csdn.net/huangyuan_xuan/article/details/26160973\" target=\"_blank\" rel=\"external\">http://blog.csdn.net/huangyuan_xuan/article/details/26160973</a><br><br> 以后主要就在gitpage上写博客了.<br> 以上</p>\n","excerpt":"<p>不打算在csdn上面写博客了,转到gitpage上面,自己用hexo搭建了博客系统.<br>现在把原csdn的博客链接抄在下面</p>","more":"<p><a href=\"http://blog.csdn.net/huangyuan_xuan/article/details/52549416\">使用openfire搭建IM聊天系统(一)</a> <a href=\"http://blog.csdn.net/huangyuan_xuan/article/details/52549416\">http://blog.csdn.net/huangyuan_xuan/article/details/52549416</a><br><br> <a href=\"http://blog.csdn.net/huangyuan_xuan/article/details/52193006\">浅谈使用单元素的枚举类型实现单例模式</a> <a href=\"http://blog.csdn.net/huangyuan_xuan/article/details/52193006\">http://blog.csdn.net/huangyuan_xuan/article/details/52193006</a><br><br> <a href=\"http://blog.csdn.net/huangyuan_xuan/article/details/51935666\">初步编写IDEA\\AndroidStudio翻译插件</a> <a href=\"http://blog.csdn.net/huangyuan_xuan/article/details/51935666\">http://blog.csdn.net/huangyuan_xuan/article/details/51935666</a><br><br> <a href=\"http://blog.csdn.net/huangyuan_xuan/article/details/50881452\">多线程 的理解（一）</a> <a href=\"http://blog.csdn.net/huangyuan_xuan/article/details/50881452\">http://blog.csdn.net/huangyuan_xuan/article/details/50881452</a><br><br> <a href=\"http://blog.csdn.net/huangyuan_xuan/article/details/50570461\">运行时数据区域</a> <a href=\"http://blog.csdn.net/huangyuan_xuan/article/details/50570461\">http://blog.csdn.net/huangyuan_xuan/article/details/50570461</a><br><br> <a href=\"http://blog.csdn.net/huangyuan_xuan/article/details/50569443\">虚拟机字节码执行引擎</a> <a href=\"http://blog.csdn.net/huangyuan_xuan/article/details/50569443\">http://blog.csdn.net/huangyuan_xuan/article/details/50569443</a><br><br> <a href=\"http://blog.csdn.net/huangyuan_xuan/article/details/50550725\">虚拟机类加载机制</a> <a href=\"http://blog.csdn.net/huangyuan_xuan/article/details/50550725\">http://blog.csdn.net/huangyuan_xuan/article/details/50550725</a><br><br> <a href=\"http://blog.csdn.net/huangyuan_xuan/article/details/50513881\">垃圾收集器与内存分配策略</a> <a href=\"http://blog.csdn.net/huangyuan_xuan/article/details/50513881\">http://blog.csdn.net/huangyuan_xuan/article/details/50513881</a><br><br> <a href=\"http://blog.csdn.net/huangyuan_xuan/article/details/50513861\">JDK的一些命令行工具</a> <a href=\"http://blog.csdn.net/huangyuan_xuan/article/details/50513861\">http://blog.csdn.net/huangyuan_xuan/article/details/50513861</a><br><br> <a href=\"http://blog.csdn.net/huangyuan_xuan/article/details/50155345\">MongoDB基础</a> <a href=\"http://blog.csdn.net/huangyuan_xuan/article/details/50155345\">http://blog.csdn.net/huangyuan_xuan/article/details/50155345</a><br><br> <a href=\"http://blog.csdn.net/huangyuan_xuan/article/details/49859151\">tomcat图形化界面管理及数据源配置</a> <a href=\"http://blog.csdn.net/huangyuan_xuan/article/details/49859151\">http://blog.csdn.net/huangyuan_xuan/article/details/49859151</a><br><br> <a href=\"http://blog.csdn.net/huangyuan_xuan/article/details/49362701\">android 四大图片缓存原理、特性对比</a> <a href=\"http://blog.csdn.net/huangyuan_xuan/article/details/49362701\">http://blog.csdn.net/huangyuan_xuan/article/details/49362701</a><br><br> <a href=\"http://blog.csdn.net/huangyuan_xuan/article/details/49356523\">github分支管理</a> <a href=\"http://blog.csdn.net/huangyuan_xuan/article/details/49356523\">http://blog.csdn.net/huangyuan_xuan/article/details/49356523</a><br><br> <a href=\"http://blog.csdn.net/huangyuan_xuan/article/details/49356505\">github 远程仓库</a> <a href=\"http://blog.csdn.net/huangyuan_xuan/article/details/49356505\">http://blog.csdn.net/huangyuan_xuan/article/details/49356505</a><br><br> <a href=\"http://blog.csdn.net/huangyuan_xuan/article/details/49336403\">github建立本地与远程仓库的连接</a> <a href=\"http://blog.csdn.net/huangyuan_xuan/article/details/49336403\">http://blog.csdn.net/huangyuan_xuan/article/details/49336403</a><br><br> <a href=\"http://blog.csdn.net/huangyuan_xuan/article/details/49162309\">Git 本地版本控制</a> <a href=\"http://blog.csdn.net/huangyuan_xuan/article/details/49162309\">http://blog.csdn.net/huangyuan_xuan/article/details/49162309</a><br><br> <a href=\"http://blog.csdn.net/huangyuan_xuan/article/details/49125597\">安装github</a> <a href=\"http://blog.csdn.net/huangyuan_xuan/article/details/49125597\">http://blog.csdn.net/huangyuan_xuan/article/details/49125597</a><br><br> <a href=\"http://blog.csdn.net/huangyuan_xuan/article/details/48915299\">ubuntu 14.04 apt-get install 不能自动补全解决办法</a> <a href=\"http://blog.csdn.net/huangyuan_xuan/article/details/48915299\">http://blog.csdn.net/huangyuan_xuan/article/details/48915299</a><br><br> <a href=\"http://blog.csdn.net/huangyuan_xuan/article/details/48116365\">String的一点小东西</a> <a href=\"http://blog.csdn.net/huangyuan_xuan/article/details/48116365\">http://blog.csdn.net/huangyuan_xuan/article/details/48116365</a><br><br> <a href=\"http://blog.csdn.net/huangyuan_xuan/article/details/46632395\">wireshark error: There are no interfaces on which a capture can be done.</a> <a href=\"http://blog.csdn.net/huangyuan_xuan/article/details/46632395\">http://blog.csdn.net/huangyuan_xuan/article/details/46632395</a><br><br> <a href=\"http://blog.csdn.net/huangyuan_xuan/article/details/46564319\">windows下使用cmd（命令行）发送邮件</a> <a href=\"http://blog.csdn.net/huangyuan_xuan/article/details/46564319\">http://blog.csdn.net/huangyuan_xuan/article/details/46564319</a><br><br> <a href=\"http://blog.csdn.net/huangyuan_xuan/article/details/45936413\">Notepad++ 搭建java编译环境</a> <a href=\"http://blog.csdn.net/huangyuan_xuan/article/details/45936413\">http://blog.csdn.net/huangyuan_xuan/article/details/45936413</a><br><br> <a href=\"http://blog.csdn.net/huangyuan_xuan/article/details/44537233\">JVM虚拟机</a> <a href=\"http://blog.csdn.net/huangyuan_xuan/article/details/44537233\">http://blog.csdn.net/huangyuan_xuan/article/details/44537233</a><br><br> <a href=\"http://blog.csdn.net/huangyuan_xuan/article/details/43817631\">servlet向浏览器输出验证码图片</a> <a href=\"http://blog.csdn.net/huangyuan_xuan/article/details/43817631\">http://blog.csdn.net/huangyuan_xuan/article/details/43817631</a><br><br> <a href=\"http://blog.csdn.net/huangyuan_xuan/article/details/43759585\">ubuntu14.04开热点共享网络</a> <a href=\"http://blog.csdn.net/huangyuan_xuan/article/details/43759585\">http://blog.csdn.net/huangyuan_xuan/article/details/43759585</a><br><br> <a href=\"http://blog.csdn.net/huangyuan_xuan/article/details/43739353\">UNIX/linux的find命令细节</a> <a href=\"http://blog.csdn.net/huangyuan_xuan/article/details/43739353\">http://blog.csdn.net/huangyuan_xuan/article/details/43739353</a><br><br> <a href=\"http://blog.csdn.net/huangyuan_xuan/article/details/43490373\">编写shell时，提示let：not found</a> <a href=\"http://blog.csdn.net/huangyuan_xuan/article/details/43490373\">http://blog.csdn.net/huangyuan_xuan/article/details/43490373</a><br><br> <a href=\"http://blog.csdn.net/huangyuan_xuan/article/details/42804537\">cmd命令大全</a> <a href=\"http://blog.csdn.net/huangyuan_xuan/article/details/42804537\">http://blog.csdn.net/huangyuan_xuan/article/details/42804537</a><br><br> <a href=\"http://blog.csdn.net/huangyuan_xuan/article/details/41647447\">华为 ap ac设备配置命令</a> <a href=\"http://blog.csdn.net/huangyuan_xuan/article/details/41647447\">http://blog.csdn.net/huangyuan_xuan/article/details/41647447</a><br><br> <a href=\"http://blog.csdn.net/huangyuan_xuan/article/details/41085629\">更改SQLserver的登录方式</a> <a href=\"http://blog.csdn.net/huangyuan_xuan/article/details/41085629\">http://blog.csdn.net/huangyuan_xuan/article/details/41085629</a><br><br> <a href=\"http://blog.csdn.net/huangyuan_xuan/article/details/40949147\">汇编FLAG寄存器简介</a> <a href=\"http://blog.csdn.net/huangyuan_xuan/article/details/40949147\">http://blog.csdn.net/huangyuan_xuan/article/details/40949147</a><br><br> <a href=\"http://blog.csdn.net/huangyuan_xuan/article/details/40949119\">汇编指令——转移指令</a> <a href=\"http://blog.csdn.net/huangyuan_xuan/article/details/40949119\">http://blog.csdn.net/huangyuan_xuan/article/details/40949119</a><br><br> <a href=\"http://blog.csdn.net/huangyuan_xuan/article/details/40949109\">汇编指令</a> <a href=\"http://blog.csdn.net/huangyuan_xuan/article/details/40949109\">http://blog.csdn.net/huangyuan_xuan/article/details/40949109</a><br><br> <a href=\"http://blog.csdn.net/huangyuan_xuan/article/details/40949087\">汇编寻址方式</a> <a href=\"http://blog.csdn.net/huangyuan_xuan/article/details/40949087\">http://blog.csdn.net/huangyuan_xuan/article/details/40949087</a><br><br> <a href=\"http://blog.csdn.net/huangyuan_xuan/article/details/40949075\">一段汇编小程序及说明——将数据，代码，栈放入不同的段</a> <a href=\"http://blog.csdn.net/huangyuan_xuan/article/details/40949075\">http://blog.csdn.net/huangyuan_xuan/article/details/40949075</a><br><br> <a href=\"http://blog.csdn.net/huangyuan_xuan/article/details/40949069\">一段简单汇编语言程序及说明</a> <a href=\"http://blog.csdn.net/huangyuan_xuan/article/details/40949069\">http://blog.csdn.net/huangyuan_xuan/article/details/40949069</a><br><br> <a href=\"http://blog.csdn.net/huangyuan_xuan/article/details/40949063\">8086寄存器</a> <a href=\"http://blog.csdn.net/huangyuan_xuan/article/details/40949063\">http://blog.csdn.net/huangyuan_xuan/article/details/40949063</a><br><br> <a href=\"http://blog.csdn.net/huangyuan_xuan/article/details/40857207\">oracle创建实例化数据库或者连接别的远程主机数据库提示“无监听程序”的解决办法</a> <a href=\"http://blog.csdn.net/huangyuan_xuan/article/details/40857207\">http://blog.csdn.net/huangyuan_xuan/article/details/40857207</a><br><br> <a href=\"http://blog.csdn.net/huangyuan_xuan/article/details/40821859\">安装tomcat提示Faild to install Tomcat7 service 解决办法</a> <a href=\"http://blog.csdn.net/huangyuan_xuan/article/details/40821859\">http://blog.csdn.net/huangyuan_xuan/article/details/40821859</a><br><br> <a href=\"http://blog.csdn.net/huangyuan_xuan/article/details/40821521\">mysql事物处理和管理配置</a> <a href=\"http://blog.csdn.net/huangyuan_xuan/article/details/40821521\">http://blog.csdn.net/huangyuan_xuan/article/details/40821521</a><br><br> <a href=\"http://blog.csdn.net/huangyuan_xuan/article/details/40783341\">mysql 连接查询</a> <a href=\"http://blog.csdn.net/huangyuan_xuan/article/details/40783341\">http://blog.csdn.net/huangyuan_xuan/article/details/40783341</a><br><br> <a href=\"http://blog.csdn.net/huangyuan_xuan/article/details/40783331\">MySQL常用命令</a> <a href=\"http://blog.csdn.net/huangyuan_xuan/article/details/40783331\">http://blog.csdn.net/huangyuan_xuan/article/details/40783331</a><br><br> <a href=\"http://blog.csdn.net/huangyuan_xuan/article/details/40783317\">ubuntu下MySQL键值不支持中文解决办法</a> <a href=\"http://blog.csdn.net/huangyuan_xuan/article/details/40783317\">http://blog.csdn.net/huangyuan_xuan/article/details/40783317</a><br><br> <a href=\"http://blog.csdn.net/huangyuan_xuan/article/details/39992799\">Myeclipse新建webservice客户端</a> <a href=\"http://blog.csdn.net/huangyuan_xuan/article/details/39992799\">http://blog.csdn.net/huangyuan_xuan/article/details/39992799</a><br><br> <a href=\"http://blog.csdn.net/huangyuan_xuan/article/details/39992723\">MyEclips新建webservice</a> <a href=\"http://blog.csdn.net/huangyuan_xuan/article/details/39992723\">http://blog.csdn.net/huangyuan_xuan/article/details/39992723</a><br><br> <a href=\"http://blog.csdn.net/huangyuan_xuan/article/details/39896009\">intellij IDEA更换主题为Darcula后中文项目名称变口（方框）的解决办法</a> <a href=\"http://blog.csdn.net/huangyuan_xuan/article/details/39896009\">http://blog.csdn.net/huangyuan_xuan/article/details/39896009</a><br><br> <a href=\"http://blog.csdn.net/huangyuan_xuan/article/details/39723251\">java模拟登录校内成绩查询网站，将获得的HTML代码用jsoup解析</a> <a href=\"http://blog.csdn.net/huangyuan_xuan/article/details/39723251\">http://blog.csdn.net/huangyuan_xuan/article/details/39723251</a><br><br> <a href=\"http://blog.csdn.net/huangyuan_xuan/article/details/39119797\">Ubuntu14.04 LTS更新源</a> <a href=\"http://blog.csdn.net/huangyuan_xuan/article/details/39119797\">http://blog.csdn.net/huangyuan_xuan/article/details/39119797</a><br><br> <a href=\"http://blog.csdn.net/huangyuan_xuan/article/details/39118723\">ubuntu14.04开机自动挂载windows磁盘的配置方法</a> <a href=\"http://blog.csdn.net/huangyuan_xuan/article/details/39118723\">http://blog.csdn.net/huangyuan_xuan/article/details/39118723</a><br><br> <a href=\"http://blog.csdn.net/huangyuan_xuan/article/details/39081435\">java实现MD5和sha1加密</a> <a href=\"http://blog.csdn.net/huangyuan_xuan/article/details/39081435\">http://blog.csdn.net/huangyuan_xuan/article/details/39081435</a><br><br> <a href=\"http://blog.csdn.net/huangyuan_xuan/article/details/38427607\">22 PPP协议</a> <a href=\"http://blog.csdn.net/huangyuan_xuan/article/details/38427607\">http://blog.csdn.net/huangyuan_xuan/article/details/38427607</a><br><br> <a href=\"http://blog.csdn.net/huangyuan_xuan/article/details/38427547\">21 串行接口封装</a> <a href=\"http://blog.csdn.net/huangyuan_xuan/article/details/38427547\">http://blog.csdn.net/huangyuan_xuan/article/details/38427547</a><br><br> <a href=\"http://blog.csdn.net/huangyuan_xuan/article/details/38427527\">20 internet connection</a> <a href=\"http://blog.csdn.net/huangyuan_xuan/article/details/38427527\">http://blog.csdn.net/huangyuan_xuan/article/details/38427527</a><br><br> <a href=\"http://blog.csdn.net/huangyuan_xuan/article/details/38423675\">19 广域网 WAN</a> <a href=\"http://blog.csdn.net/huangyuan_xuan/article/details/38423675\">http://blog.csdn.net/huangyuan_xuan/article/details/38423675</a><br><br> <a href=\"http://blog.csdn.net/huangyuan_xuan/article/details/38405103\">java的JDK的安装配置图文详解</a> <a href=\"http://blog.csdn.net/huangyuan_xuan/article/details/38405103\">http://blog.csdn.net/huangyuan_xuan/article/details/38405103</a><br><br> <a href=\"http://blog.csdn.net/huangyuan_xuan/article/details/38387045\">18 ACL访问控制列表（access control list）</a> <a href=\"http://blog.csdn.net/huangyuan_xuan/article/details/38387045\">http://blog.csdn.net/huangyuan_xuan/article/details/38387045</a><br><br> <a href=\"http://blog.csdn.net/huangyuan_xuan/article/details/38342675\">17 NAT转换</a> <a href=\"http://blog.csdn.net/huangyuan_xuan/article/details/38342675\">http://blog.csdn.net/huangyuan_xuan/article/details/38342675</a><br><br> <a href=\"http://blog.csdn.net/huangyuan_xuan/article/details/38278825\">16 DHCP</a> <a href=\"http://blog.csdn.net/huangyuan_xuan/article/details/38278825\">http://blog.csdn.net/huangyuan_xuan/article/details/38278825</a><br><br> <a href=\"http://blog.csdn.net/huangyuan_xuan/article/details/37957229\">Java常见错误列表</a> <a href=\"http://blog.csdn.net/huangyuan_xuan/article/details/37957229\">http://blog.csdn.net/huangyuan_xuan/article/details/37957229</a><br><br> <a href=\"http://blog.csdn.net/huangyuan_xuan/article/details/37937957\">LXLE Linux取代Windows XP的11个大招</a> <a href=\"http://blog.csdn.net/huangyuan_xuan/article/details/37937957\">http://blog.csdn.net/huangyuan_xuan/article/details/37937957</a><br><br> <a href=\"http://blog.csdn.net/huangyuan_xuan/article/details/37738127\">jQuery语法简介</a> <a href=\"http://blog.csdn.net/huangyuan_xuan/article/details/37738127\">http://blog.csdn.net/huangyuan_xuan/article/details/37738127</a><br><br> <a href=\"http://blog.csdn.net/huangyuan_xuan/article/details/37728211\">cookie简介</a> <a href=\"http://blog.csdn.net/huangyuan_xuan/article/details/37728211\">http://blog.csdn.net/huangyuan_xuan/article/details/37728211</a><br><br> <a href=\"http://blog.csdn.net/huangyuan_xuan/article/details/37699891\">DOM 简介</a> <a href=\"http://blog.csdn.net/huangyuan_xuan/article/details/37699891\">http://blog.csdn.net/huangyuan_xuan/article/details/37699891</a><br><br> <a href=\"http://blog.csdn.net/huangyuan_xuan/article/details/28880287\">vim 命令</a> <a href=\"http://blog.csdn.net/huangyuan_xuan/article/details/28880287\">http://blog.csdn.net/huangyuan_xuan/article/details/28880287</a><br><br> <a href=\"http://blog.csdn.net/huangyuan_xuan/article/details/28276437\">我们大神都这样——提问的智慧</a> <a href=\"http://blog.csdn.net/huangyuan_xuan/article/details/28276437\">http://blog.csdn.net/huangyuan_xuan/article/details/28276437</a><br><br> <a href=\"http://blog.csdn.net/huangyuan_xuan/article/details/27972015\">初学C语言的人看不懂的关机代码</a> <a href=\"http://blog.csdn.net/huangyuan_xuan/article/details/27972015\">http://blog.csdn.net/huangyuan_xuan/article/details/27972015</a><br><br> <a href=\"http://blog.csdn.net/huangyuan_xuan/article/details/27792089\">ubuntu连接路由器无线网络，却不能上网</a> <a href=\"http://blog.csdn.net/huangyuan_xuan/article/details/27792089\">http://blog.csdn.net/huangyuan_xuan/article/details/27792089</a><br><br> <a href=\"http://blog.csdn.net/huangyuan_xuan/article/details/26969041\">sublime-text2的中英文对照表（附带个人的配置习惯）</a> <a href=\"http://blog.csdn.net/huangyuan_xuan/article/details/26969041\">http://blog.csdn.net/huangyuan_xuan/article/details/26969041</a><br><br> <a href=\"http://blog.csdn.net/huangyuan_xuan/article/details/26246709\">电脑蓝屏代码大全</a> <a href=\"http://blog.csdn.net/huangyuan_xuan/article/details/26246709\">http://blog.csdn.net/huangyuan_xuan/article/details/26246709</a><br><br> <a href=\"http://blog.csdn.net/huangyuan_xuan/article/details/26245513\">VC6.0 快捷键整理</a> <a href=\"http://blog.csdn.net/huangyuan_xuan/article/details/26245513\">http://blog.csdn.net/huangyuan_xuan/article/details/26245513</a><br><br> <a href=\"http://blog.csdn.net/huangyuan_xuan/article/details/26245135\">玩游戏无法全屏</a> <a href=\"http://blog.csdn.net/huangyuan_xuan/article/details/26245135\">http://blog.csdn.net/huangyuan_xuan/article/details/26245135</a><br><br> <a href=\"http://blog.csdn.net/huangyuan_xuan/article/details/26244991\">15 Ospf</a> <a href=\"http://blog.csdn.net/huangyuan_xuan/article/details/26244991\">http://blog.csdn.net/huangyuan_xuan/article/details/26244991</a><br><br> <a href=\"http://blog.csdn.net/huangyuan_xuan/article/details/26244541\">14 EIGRP 配置</a> <a href=\"http://blog.csdn.net/huangyuan_xuan/article/details/26244541\">http://blog.csdn.net/huangyuan_xuan/article/details/26244541</a><br><br> <a href=\"http://blog.csdn.net/huangyuan_xuan/article/details/26244439\">13 ERGIP</a> <a href=\"http://blog.csdn.net/huangyuan_xuan/article/details/26244439\">http://blog.csdn.net/huangyuan_xuan/article/details/26244439</a><br><br> <a href=\"http://blog.csdn.net/huangyuan_xuan/article/details/26244201\">12    rip-2  配置命令</a> <a href=\"http://blog.csdn.net/huangyuan_xuan/article/details/26244201\">http://blog.csdn.net/huangyuan_xuan/article/details/26244201</a><br><br> <a href=\"http://blog.csdn.net/huangyuan_xuan/article/details/26244031\">11    rip -1</a> <a href=\"http://blog.csdn.net/huangyuan_xuan/article/details/26244031\">http://blog.csdn.net/huangyuan_xuan/article/details/26244031</a><br><br> <a href=\"http://blog.csdn.net/huangyuan_xuan/article/details/26243735\">10动态路由</a> <a href=\"http://blog.csdn.net/huangyuan_xuan/article/details/26243735\">http://blog.csdn.net/huangyuan_xuan/article/details/26243735</a><br><br> <a href=\"http://blog.csdn.net/huangyuan_xuan/article/details/26243487\">9静态路由</a> <a href=\"http://blog.csdn.net/huangyuan_xuan/article/details/26243487\">http://blog.csdn.net/huangyuan_xuan/article/details/26243487</a><br><br> <a href=\"http://blog.csdn.net/huangyuan_xuan/article/details/26243293\">8网络拓扑结构</a> <a href=\"http://blog.csdn.net/huangyuan_xuan/article/details/26243293\">http://blog.csdn.net/huangyuan_xuan/article/details/26243293</a><br><br> <a href=\"http://blog.csdn.net/huangyuan_xuan/article/details/26243041\">7VLSM子网划分</a> <a href=\"http://blog.csdn.net/huangyuan_xuan/article/details/26243041\">http://blog.csdn.net/huangyuan_xuan/article/details/26243041</a><br><br> <a href=\"http://blog.csdn.net/huangyuan_xuan/article/details/26242799\">6常用网络相关命令</a> <a href=\"http://blog.csdn.net/huangyuan_xuan/article/details/26242799\">http://blog.csdn.net/huangyuan_xuan/article/details/26242799</a><br><br> <a href=\"http://blog.csdn.net/huangyuan_xuan/article/details/26242589\">5数据包发送流程</a> <a href=\"http://blog.csdn.net/huangyuan_xuan/article/details/26242589\">http://blog.csdn.net/huangyuan_xuan/article/details/26242589</a><br><br> <a href=\"http://blog.csdn.net/huangyuan_xuan/article/details/26242183\">网线</a> <a href=\"http://blog.csdn.net/huangyuan_xuan/article/details/26242183\">http://blog.csdn.net/huangyuan_xuan/article/details/26242183</a><br><br> <a href=\"http://blog.csdn.net/huangyuan_xuan/article/details/26242101\">osi七层网络模型4</a> <a href=\"http://blog.csdn.net/huangyuan_xuan/article/details/26242101\">http://blog.csdn.net/huangyuan_xuan/article/details/26242101</a><br><br> <a href=\"http://blog.csdn.net/huangyuan_xuan/article/details/26242015\">osi七层网络模型3</a> <a href=\"http://blog.csdn.net/huangyuan_xuan/article/details/26242015\">http://blog.csdn.net/huangyuan_xuan/article/details/26242015</a><br><br> <a href=\"http://blog.csdn.net/huangyuan_xuan/article/details/26241831\">osi七层网络模型2</a> <a href=\"http://blog.csdn.net/huangyuan_xuan/article/details/26241831\">http://blog.csdn.net/huangyuan_xuan/article/details/26241831</a><br><br> <a href=\"http://blog.csdn.net/huangyuan_xuan/article/details/26241631\">OSI七层网络模型1</a> <a href=\"http://blog.csdn.net/huangyuan_xuan/article/details/26241631\">http://blog.csdn.net/huangyuan_xuan/article/details/26241631</a><br><br> <a href=\"http://blog.csdn.net/huangyuan_xuan/article/details/26164349\">sublime-text2 编译java出错 Decode error - output not utf-8的解决办法</a> <a href=\"http://blog.csdn.net/huangyuan_xuan/article/details/26164349\">http://blog.csdn.net/huangyuan_xuan/article/details/26164349</a><br><br> <a href=\"http://blog.csdn.net/huangyuan_xuan/article/details/26162201\">安装虚拟机报错解决办法 TheVMware Authorization Service is not running</a> <a href=\"http://blog.csdn.net/huangyuan_xuan/article/details/26162201\">http://blog.csdn.net/huangyuan_xuan/article/details/26162201</a><br><br> <a href=\"http://blog.csdn.net/huangyuan_xuan/article/details/26162083\">我的vim配置</a> <a href=\"http://blog.csdn.net/huangyuan_xuan/article/details/26162083\">http://blog.csdn.net/huangyuan_xuan/article/details/26162083</a><br><br> <a href=\"http://blog.csdn.net/huangyuan_xuan/article/details/26161983\">sublime text 2 搭建java运行环境</a> <a href=\"http://blog.csdn.net/huangyuan_xuan/article/details/26161983\">http://blog.csdn.net/huangyuan_xuan/article/details/26161983</a><br><br> <a href=\"http://blog.csdn.net/huangyuan_xuan/article/details/26160973\">ubuntu的一点命令</a> <a href=\"http://blog.csdn.net/huangyuan_xuan/article/details/26160973\">http://blog.csdn.net/huangyuan_xuan/article/details/26160973</a><br><br> 以后主要就在gitpage上写博客了.<br> 以上</p>"},{"title":"简单的桌面小部件","date":"2017-03-20T03:51:11.000Z","keywords":"Android桌面小部件","_content":"实现一个简单的桌面小部件，响应点击事件，更新等功能。\n1. 定义小部件界面\n2. 定义小部件配置信息\n3. 定义小部件的实现类\n4. 声明小部件\n在AndroidStudio中只需要在`main\\java`下新建一个`widget`,就可以了，IDE会自动在`res\\layout`添加布局文件，在`res\\xml`下新建配置信息文件。然后就可以进行具体实现了。\n\n<!--more-->\n\n![AS下新建widget](/image/new_widget.png)\n\n\n\n### 定义小部件界面\nRemoteView目前并不能支持所有的View，现在支持的类型如下：\n* Layout\n\t* FrameLayout\n\t* LinearLayout\n\t* RelativeLayout\n\t* GridLayout\n* View\n\t* AnalogClock\n\t* Button\n\t* Chronometer\n\t* ImageButton\n\t* ImageView\n\t* ProgressBar\n\t* TextView\n\t* ViewFlipper\n\t* ListView\n\t* GridView\n\t* StackView\n\t* AdapterViewFlipper\n\t* ViewStub\n\t\n这个没什么好说的，按照写界面布局的方式写就好了，但是不建议写过于复杂的布局。\n### 定义小部件配置信息\n下面的代码就是IDE自动成的配置信息文件，不喜欢IDE代劳的同学可以自己创建。\n``` xml\n<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<appwidget-provider xmlns:android=\"http://schemas.android.com/apk/res/android\"\n    android:initialKeyguardLayout=\"@layout/test_remote_view_widget\"\n    android:initialLayout=\"@layout/test_remote_view_widget\"\n    android:minHeight=\"40dp\"\n    android:minWidth=\"40dp\"\n    android:previewImage=\"@drawable/example_appwidget_preview\"\n    android:resizeMode=\"horizontal|vertical\"\n    android:updatePeriodMillis=\"86400000\"\n    android:widgetCategory=\"home_screen\"></appwidget-provider> \n```\n \n`initialLayout`：布局文件\n`previewImage`： 预览的图片\n`updatePeriodMillis`：刷新周期，单位毫秒\n\n###  定义小部件的实现类\n实现的功能是当点击这个小部件的时候改变文字内容\n``` java\npublic class TestRemoteViewWidget extends AppWidgetProvider {\n\n    private static final String CLICK_ACTION = \"com.huangyuan.testwidget.TAP_CLICK_ACTION\";\n    @Override\n    public void onReceive(Context context, Intent intent) {\n        super.onReceive(context, intent);\n        Toast.makeText(context,\"onReceive:\" + intent.getAction(),Toast.LENGTH_SHORT).show();\n        if(intent.getAction().equals(CLICK_ACTION)){\n            AppWidgetManager appWidgetManager = AppWidgetManager.getInstance(context);\n            RemoteViews remoteViews = new RemoteViews(context.getPackageName(),R.layout.test_remote_view_widget);\n            remoteViews.setTextViewText(R.id.appwidget_text,\"点击\");\n            appWidgetManager.updateAppWidget(new ComponentName(context,TestRemoteViewWidget.class),remoteViews);\n        }\n    }\n    @Override\n    public void onUpdate(Context context, AppWidgetManager appWidgetManager, int[] appWidgetIds) {\n        Toast.makeText(context,\"onUpdate\" ,Toast.LENGTH_SHORT).show();\n        RemoteViews remoteViews = new RemoteViews(context.getPackageName(),R.layout.test_remote_view_widget);\n        Intent clickIntent = new Intent();\n        clickIntent.setAction(CLICK_ACTION);\n        PendingIntent pendingIntent = PendingIntent.getBroadcast(context,0,clickIntent,0);\n        remoteViews.setOnClickPendingIntent(R.id.appwidget_text,pendingIntent);\n        appWidgetManager.updateAppWidget(appWidgetIds,remoteViews);\n    }\n}\n```\n\n其中还有其他方法：\n* onEnabled:当该窗口小部件第一次添加到桌面时调用该方法，可添加多次，但只在第一次调用\n* onUpdate:小部件被添加时或者每次小部件更新时都会调用一次该方法，小部件的更新时机由`updatePeriodMillis`指定。\n* onDeleted:每删除一次桌面小部件就调用一次。\n* onDisabled:当最后一个该类型的桌面小部件被删除时调用该方法，追时最后一个。\n需要注意的是，更新remoteView时，不能直接访问里面的View,需要通过RemoteView所提供的一系列方法更新View。\n* 更新文本： remoteViews.setTextViewText();\n* 更新图片： remoteViews.setImageViewResource();remoteViews.setImageViewBitmap();\n* 添加单击事件：remoteViews.setOnClickPendingIntent();\n***\n\n","source":"_posts/简单的桌面小部件.md","raw":"---\ntitle: 简单的桌面小部件\ndate: 2017-03-20 11:51:11\ntags: [Android]\nkeywords: Android桌面小部件\n---\n实现一个简单的桌面小部件，响应点击事件，更新等功能。\n1. 定义小部件界面\n2. 定义小部件配置信息\n3. 定义小部件的实现类\n4. 声明小部件\n在AndroidStudio中只需要在`main\\java`下新建一个`widget`,就可以了，IDE会自动在`res\\layout`添加布局文件，在`res\\xml`下新建配置信息文件。然后就可以进行具体实现了。\n\n<!--more-->\n\n![AS下新建widget](/image/new_widget.png)\n\n\n\n### 定义小部件界面\nRemoteView目前并不能支持所有的View，现在支持的类型如下：\n* Layout\n\t* FrameLayout\n\t* LinearLayout\n\t* RelativeLayout\n\t* GridLayout\n* View\n\t* AnalogClock\n\t* Button\n\t* Chronometer\n\t* ImageButton\n\t* ImageView\n\t* ProgressBar\n\t* TextView\n\t* ViewFlipper\n\t* ListView\n\t* GridView\n\t* StackView\n\t* AdapterViewFlipper\n\t* ViewStub\n\t\n这个没什么好说的，按照写界面布局的方式写就好了，但是不建议写过于复杂的布局。\n### 定义小部件配置信息\n下面的代码就是IDE自动成的配置信息文件，不喜欢IDE代劳的同学可以自己创建。\n``` xml\n<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<appwidget-provider xmlns:android=\"http://schemas.android.com/apk/res/android\"\n    android:initialKeyguardLayout=\"@layout/test_remote_view_widget\"\n    android:initialLayout=\"@layout/test_remote_view_widget\"\n    android:minHeight=\"40dp\"\n    android:minWidth=\"40dp\"\n    android:previewImage=\"@drawable/example_appwidget_preview\"\n    android:resizeMode=\"horizontal|vertical\"\n    android:updatePeriodMillis=\"86400000\"\n    android:widgetCategory=\"home_screen\"></appwidget-provider> \n```\n \n`initialLayout`：布局文件\n`previewImage`： 预览的图片\n`updatePeriodMillis`：刷新周期，单位毫秒\n\n###  定义小部件的实现类\n实现的功能是当点击这个小部件的时候改变文字内容\n``` java\npublic class TestRemoteViewWidget extends AppWidgetProvider {\n\n    private static final String CLICK_ACTION = \"com.huangyuan.testwidget.TAP_CLICK_ACTION\";\n    @Override\n    public void onReceive(Context context, Intent intent) {\n        super.onReceive(context, intent);\n        Toast.makeText(context,\"onReceive:\" + intent.getAction(),Toast.LENGTH_SHORT).show();\n        if(intent.getAction().equals(CLICK_ACTION)){\n            AppWidgetManager appWidgetManager = AppWidgetManager.getInstance(context);\n            RemoteViews remoteViews = new RemoteViews(context.getPackageName(),R.layout.test_remote_view_widget);\n            remoteViews.setTextViewText(R.id.appwidget_text,\"点击\");\n            appWidgetManager.updateAppWidget(new ComponentName(context,TestRemoteViewWidget.class),remoteViews);\n        }\n    }\n    @Override\n    public void onUpdate(Context context, AppWidgetManager appWidgetManager, int[] appWidgetIds) {\n        Toast.makeText(context,\"onUpdate\" ,Toast.LENGTH_SHORT).show();\n        RemoteViews remoteViews = new RemoteViews(context.getPackageName(),R.layout.test_remote_view_widget);\n        Intent clickIntent = new Intent();\n        clickIntent.setAction(CLICK_ACTION);\n        PendingIntent pendingIntent = PendingIntent.getBroadcast(context,0,clickIntent,0);\n        remoteViews.setOnClickPendingIntent(R.id.appwidget_text,pendingIntent);\n        appWidgetManager.updateAppWidget(appWidgetIds,remoteViews);\n    }\n}\n```\n\n其中还有其他方法：\n* onEnabled:当该窗口小部件第一次添加到桌面时调用该方法，可添加多次，但只在第一次调用\n* onUpdate:小部件被添加时或者每次小部件更新时都会调用一次该方法，小部件的更新时机由`updatePeriodMillis`指定。\n* onDeleted:每删除一次桌面小部件就调用一次。\n* onDisabled:当最后一个该类型的桌面小部件被删除时调用该方法，追时最后一个。\n需要注意的是，更新remoteView时，不能直接访问里面的View,需要通过RemoteView所提供的一系列方法更新View。\n* 更新文本： remoteViews.setTextViewText();\n* 更新图片： remoteViews.setImageViewResource();remoteViews.setImageViewBitmap();\n* 添加单击事件：remoteViews.setOnClickPendingIntent();\n***\n\n","slug":"简单的桌面小部件","published":1,"updated":"2018-08-04T05:18:59.174Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjl3vbtru003disdguqo607yn","content":"<p>实现一个简单的桌面小部件，响应点击事件，更新等功能。</p>\n<ol>\n<li>定义小部件界面</li>\n<li>定义小部件配置信息</li>\n<li>定义小部件的实现类</li>\n<li>声明小部件<br>在AndroidStudio中只需要在<code>main\\java</code>下新建一个<code>widget</code>,就可以了，IDE会自动在<code>res\\layout</code>添加布局文件，在<code>res\\xml</code>下新建配置信息文件。然后就可以进行具体实现了。</li>\n</ol>\n<a id=\"more\"></a>\n<p><img src=\"/image/new_widget.png\" alt=\"AS下新建widget\"></p>\n<h3 id=\"定义小部件界面\"><a href=\"#定义小部件界面\" class=\"headerlink\" title=\"定义小部件界面\"></a>定义小部件界面</h3><p>RemoteView目前并不能支持所有的View，现在支持的类型如下：</p>\n<ul>\n<li>Layout<ul>\n<li>FrameLayout</li>\n<li>LinearLayout</li>\n<li>RelativeLayout</li>\n<li>GridLayout</li>\n</ul>\n</li>\n<li>View<ul>\n<li>AnalogClock</li>\n<li>Button</li>\n<li>Chronometer</li>\n<li>ImageButton</li>\n<li>ImageView</li>\n<li>ProgressBar</li>\n<li>TextView</li>\n<li>ViewFlipper</li>\n<li>ListView</li>\n<li>GridView</li>\n<li>StackView</li>\n<li>AdapterViewFlipper</li>\n<li>ViewStub</li>\n</ul>\n</li>\n</ul>\n<p>这个没什么好说的，按照写界面布局的方式写就好了，但是不建议写过于复杂的布局。</p>\n<h3 id=\"定义小部件配置信息\"><a href=\"#定义小部件配置信息\" class=\"headerlink\" title=\"定义小部件配置信息\"></a>定义小部件配置信息</h3><p>下面的代码就是IDE自动成的配置信息文件，不喜欢IDE代劳的同学可以自己创建。<br><figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;?xml version=\"1.0\" encoding=\"utf-8\"?&gt;</div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">appwidget-provider</span> <span class=\"attr\">xmlns:android</span>=<span class=\"string\">\"http://schemas.android.com/apk/res/android\"</span></span></div><div class=\"line\">    <span class=\"attr\">android:initialKeyguardLayout</span>=<span class=\"string\">\"@layout/test_remote_view_widget\"</span></div><div class=\"line\">    <span class=\"attr\">android:initialLayout</span>=<span class=\"string\">\"@layout/test_remote_view_widget\"</span></div><div class=\"line\">    <span class=\"attr\">android:minHeight</span>=<span class=\"string\">\"40dp\"</span></div><div class=\"line\">    <span class=\"attr\">android:minWidth</span>=<span class=\"string\">\"40dp\"</span></div><div class=\"line\">    <span class=\"attr\">android:previewImage</span>=<span class=\"string\">\"@drawable/example_appwidget_preview\"</span></div><div class=\"line\">    <span class=\"attr\">android:resizeMode</span>=<span class=\"string\">\"horizontal|vertical\"</span></div><div class=\"line\">    <span class=\"attr\">android:updatePeriodMillis</span>=<span class=\"string\">\"86400000\"</span></div><div class=\"line\">    <span class=\"attr\">android:widgetCategory</span>=<span class=\"string\">\"home_screen\"</span>&gt;<span class=\"tag\">&lt;/<span class=\"name\">appwidget-provider</span>&gt;</span></div></pre></td></tr></table></figure></p>\n<p><code>initialLayout</code>：布局文件<br><code>previewImage</code>： 预览的图片<br><code>updatePeriodMillis</code>：刷新周期，单位毫秒</p>\n<h3 id=\"定义小部件的实现类\"><a href=\"#定义小部件的实现类\" class=\"headerlink\" title=\"定义小部件的实现类\"></a>定义小部件的实现类</h3><p>实现的功能是当点击这个小部件的时候改变文字内容<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">TestRemoteViewWidget</span> <span class=\"keyword\">extends</span> <span class=\"title\">AppWidgetProvider</span> </span>&#123;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> String CLICK_ACTION = <span class=\"string\">\"com.huangyuan.testwidget.TAP_CLICK_ACTION\"</span>;</div><div class=\"line\">    <span class=\"meta\">@Override</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onReceive</span><span class=\"params\">(Context context, Intent intent)</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">super</span>.onReceive(context, intent);</div><div class=\"line\">        Toast.makeText(context,<span class=\"string\">\"onReceive:\"</span> + intent.getAction(),Toast.LENGTH_SHORT).show();</div><div class=\"line\">        <span class=\"keyword\">if</span>(intent.getAction().equals(CLICK_ACTION))&#123;</div><div class=\"line\">            AppWidgetManager appWidgetManager = AppWidgetManager.getInstance(context);</div><div class=\"line\">            RemoteViews remoteViews = <span class=\"keyword\">new</span> RemoteViews(context.getPackageName(),R.layout.test_remote_view_widget);</div><div class=\"line\">            remoteViews.setTextViewText(R.id.appwidget_text,<span class=\"string\">\"点击\"</span>);</div><div class=\"line\">            appWidgetManager.updateAppWidget(<span class=\"keyword\">new</span> ComponentName(context,TestRemoteViewWidget.class),remoteViews);</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"meta\">@Override</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onUpdate</span><span class=\"params\">(Context context, AppWidgetManager appWidgetManager, <span class=\"keyword\">int</span>[] appWidgetIds)</span> </span>&#123;</div><div class=\"line\">        Toast.makeText(context,<span class=\"string\">\"onUpdate\"</span> ,Toast.LENGTH_SHORT).show();</div><div class=\"line\">        RemoteViews remoteViews = <span class=\"keyword\">new</span> RemoteViews(context.getPackageName(),R.layout.test_remote_view_widget);</div><div class=\"line\">        Intent clickIntent = <span class=\"keyword\">new</span> Intent();</div><div class=\"line\">        clickIntent.setAction(CLICK_ACTION);</div><div class=\"line\">        PendingIntent pendingIntent = PendingIntent.getBroadcast(context,<span class=\"number\">0</span>,clickIntent,<span class=\"number\">0</span>);</div><div class=\"line\">        remoteViews.setOnClickPendingIntent(R.id.appwidget_text,pendingIntent);</div><div class=\"line\">        appWidgetManager.updateAppWidget(appWidgetIds,remoteViews);</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>其中还有其他方法：</p>\n<ul>\n<li>onEnabled:当该窗口小部件第一次添加到桌面时调用该方法，可添加多次，但只在第一次调用</li>\n<li>onUpdate:小部件被添加时或者每次小部件更新时都会调用一次该方法，小部件的更新时机由<code>updatePeriodMillis</code>指定。</li>\n<li>onDeleted:每删除一次桌面小部件就调用一次。</li>\n<li>onDisabled:当最后一个该类型的桌面小部件被删除时调用该方法，追时最后一个。<br>需要注意的是，更新remoteView时，不能直接访问里面的View,需要通过RemoteView所提供的一系列方法更新View。</li>\n<li>更新文本： remoteViews.setTextViewText();</li>\n<li>更新图片： remoteViews.setImageViewResource();remoteViews.setImageViewBitmap();</li>\n<li>添加单击事件：remoteViews.setOnClickPendingIntent();</li>\n</ul>\n<hr>\n","excerpt":"<p>实现一个简单的桌面小部件，响应点击事件，更新等功能。</p>\n<ol>\n<li>定义小部件界面</li>\n<li>定义小部件配置信息</li>\n<li>定义小部件的实现类</li>\n<li>声明小部件<br>在AndroidStudio中只需要在<code>main\\java</code>下新建一个<code>widget</code>,就可以了，IDE会自动在<code>res\\layout</code>添加布局文件，在<code>res\\xml</code>下新建配置信息文件。然后就可以进行具体实现了。</li>\n</ol>","more":"<p><img src=\"/image/new_widget.png\" alt=\"AS下新建widget\"></p>\n<h3 id=\"定义小部件界面\"><a href=\"#定义小部件界面\" class=\"headerlink\" title=\"定义小部件界面\"></a>定义小部件界面</h3><p>RemoteView目前并不能支持所有的View，现在支持的类型如下：</p>\n<ul>\n<li>Layout<ul>\n<li>FrameLayout</li>\n<li>LinearLayout</li>\n<li>RelativeLayout</li>\n<li>GridLayout</li>\n</ul>\n</li>\n<li>View<ul>\n<li>AnalogClock</li>\n<li>Button</li>\n<li>Chronometer</li>\n<li>ImageButton</li>\n<li>ImageView</li>\n<li>ProgressBar</li>\n<li>TextView</li>\n<li>ViewFlipper</li>\n<li>ListView</li>\n<li>GridView</li>\n<li>StackView</li>\n<li>AdapterViewFlipper</li>\n<li>ViewStub</li>\n</ul>\n</li>\n</ul>\n<p>这个没什么好说的，按照写界面布局的方式写就好了，但是不建议写过于复杂的布局。</p>\n<h3 id=\"定义小部件配置信息\"><a href=\"#定义小部件配置信息\" class=\"headerlink\" title=\"定义小部件配置信息\"></a>定义小部件配置信息</h3><p>下面的代码就是IDE自动成的配置信息文件，不喜欢IDE代劳的同学可以自己创建。<br><figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;?xml version=\"1.0\" encoding=\"utf-8\"?&gt;</div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">appwidget-provider</span> <span class=\"attr\">xmlns:android</span>=<span class=\"string\">\"http://schemas.android.com/apk/res/android\"</span></div><div class=\"line\">    <span class=\"attr\">android:initialKeyguardLayout</span>=<span class=\"string\">\"@layout/test_remote_view_widget\"</span></div><div class=\"line\">    <span class=\"attr\">android:initialLayout</span>=<span class=\"string\">\"@layout/test_remote_view_widget\"</span></div><div class=\"line\">    <span class=\"attr\">android:minHeight</span>=<span class=\"string\">\"40dp\"</span></div><div class=\"line\">    <span class=\"attr\">android:minWidth</span>=<span class=\"string\">\"40dp\"</span></div><div class=\"line\">    <span class=\"attr\">android:previewImage</span>=<span class=\"string\">\"@drawable/example_appwidget_preview\"</span></div><div class=\"line\">    <span class=\"attr\">android:resizeMode</span>=<span class=\"string\">\"horizontal|vertical\"</span></div><div class=\"line\">    <span class=\"attr\">android:updatePeriodMillis</span>=<span class=\"string\">\"86400000\"</span></div><div class=\"line\">    <span class=\"attr\">android:widgetCategory</span>=<span class=\"string\">\"home_screen\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">appwidget-provider</span>&gt;</span></div></pre></td></tr></table></figure></p>\n<p><code>initialLayout</code>：布局文件<br><code>previewImage</code>： 预览的图片<br><code>updatePeriodMillis</code>：刷新周期，单位毫秒</p>\n<h3 id=\"定义小部件的实现类\"><a href=\"#定义小部件的实现类\" class=\"headerlink\" title=\"定义小部件的实现类\"></a>定义小部件的实现类</h3><p>实现的功能是当点击这个小部件的时候改变文字内容<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">TestRemoteViewWidget</span> <span class=\"keyword\">extends</span> <span class=\"title\">AppWidgetProvider</span> </span>&#123;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> String CLICK_ACTION = <span class=\"string\">\"com.huangyuan.testwidget.TAP_CLICK_ACTION\"</span>;</div><div class=\"line\">    <span class=\"meta\">@Override</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onReceive</span><span class=\"params\">(Context context, Intent intent)</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">super</span>.onReceive(context, intent);</div><div class=\"line\">        Toast.makeText(context,<span class=\"string\">\"onReceive:\"</span> + intent.getAction(),Toast.LENGTH_SHORT).show();</div><div class=\"line\">        <span class=\"keyword\">if</span>(intent.getAction().equals(CLICK_ACTION))&#123;</div><div class=\"line\">            AppWidgetManager appWidgetManager = AppWidgetManager.getInstance(context);</div><div class=\"line\">            RemoteViews remoteViews = <span class=\"keyword\">new</span> RemoteViews(context.getPackageName(),R.layout.test_remote_view_widget);</div><div class=\"line\">            remoteViews.setTextViewText(R.id.appwidget_text,<span class=\"string\">\"点击\"</span>);</div><div class=\"line\">            appWidgetManager.updateAppWidget(<span class=\"keyword\">new</span> ComponentName(context,TestRemoteViewWidget.class),remoteViews);</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"meta\">@Override</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onUpdate</span><span class=\"params\">(Context context, AppWidgetManager appWidgetManager, <span class=\"keyword\">int</span>[] appWidgetIds)</span> </span>&#123;</div><div class=\"line\">        Toast.makeText(context,<span class=\"string\">\"onUpdate\"</span> ,Toast.LENGTH_SHORT).show();</div><div class=\"line\">        RemoteViews remoteViews = <span class=\"keyword\">new</span> RemoteViews(context.getPackageName(),R.layout.test_remote_view_widget);</div><div class=\"line\">        Intent clickIntent = <span class=\"keyword\">new</span> Intent();</div><div class=\"line\">        clickIntent.setAction(CLICK_ACTION);</div><div class=\"line\">        PendingIntent pendingIntent = PendingIntent.getBroadcast(context,<span class=\"number\">0</span>,clickIntent,<span class=\"number\">0</span>);</div><div class=\"line\">        remoteViews.setOnClickPendingIntent(R.id.appwidget_text,pendingIntent);</div><div class=\"line\">        appWidgetManager.updateAppWidget(appWidgetIds,remoteViews);</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>其中还有其他方法：</p>\n<ul>\n<li>onEnabled:当该窗口小部件第一次添加到桌面时调用该方法，可添加多次，但只在第一次调用</li>\n<li>onUpdate:小部件被添加时或者每次小部件更新时都会调用一次该方法，小部件的更新时机由<code>updatePeriodMillis</code>指定。</li>\n<li>onDeleted:每删除一次桌面小部件就调用一次。</li>\n<li>onDisabled:当最后一个该类型的桌面小部件被删除时调用该方法，追时最后一个。<br>需要注意的是，更新remoteView时，不能直接访问里面的View,需要通过RemoteView所提供的一系列方法更新View。</li>\n<li>更新文本： remoteViews.setTextViewText();</li>\n<li>更新图片： remoteViews.setImageViewResource();remoteViews.setImageViewBitmap();</li>\n<li>添加单击事件：remoteViews.setOnClickPendingIntent();</li>\n</ul>\n<hr>"},{"title":"如何获取csdn中个人所有文章标题及链接","date":"2016-10-19T14:32:42.000Z","_content":"小伙伴问如何把自己csdn上的文章标题和超链接都扒下来,问我是不是一个个点开之后抄过去的...当然不是,做为一个爱(sha)好(dou)广(dong)泛(dian)的程序员,怎么会用这么麻烦的方法.\n<!-- more -->\n　　本来打算写java模拟登录之后获取网页源码,然后再用jsoup去解析,得到自己需要的数据.原来就这么干过,好像是写学校的绩点计算器来着吧,就是输入帐号密码就能查到自己的成绩和绩点的那种.\n翻出来代码看了看太麻烦了,想到自己最近在看python,就想着用python来解决,但是问题又来了,python不熟啊,就算写出来了也得看网页源码,找到规律才行,讲道理的说挺烦这东西的.\n最后,还是用js来解决,毕竟这种事也干过,也不是多麻烦.\n登录自己的帐号,找到文章列表,打开控制台窗口,忘了说一下自己的环境了`ubuntu`,`chrom`,找到文章标题和超链接的部分,如下图:\n![csdn个人博客列表](/image/csdn_home.png)\n发现所有的文章标题和超链接结构如下:\n```HTML\n <span class=\"link_title\">\n \t<a href=\"/huangyuan_xuan/article/details/51935666\">\n        初步编写IDEA\\AndroidStudio翻译插件            \n        </a>\n</span>\n```\n另外,界面中还引入了jQuery这个三方库,这就更简单了:\n找到开发者工具的控制台(console),写入下面两行代码\n```JavaScript\nvar aTags = $(\".link_title > a\")\nfor(var i = 0;i<50;i++)\n{\n\tconsole.log(\"[\" + aTags[i].text.trim() + \"](\" + aTags[i].href +\") \"+ aTags[i].href) +\"<br/>\"\n\t}\n```\nok,执行结果如下\n![csdn个人博客标题和超链接](/image/csdn_blog_title.png)\n　　在控制台写的代码第一行是使用jQuery库找到所有文章的超链接集合,第二行是按照`markdown`超链接的语法打印出来文章标题和超链接,至于循环中的`50`这个数字,一页最多只有50篇文章,我偷懒了,建议使用`aTags.length`\n<hr>\n以上\n","source":"_posts/如何获取csdn中个人所有文章标题及链接.md","raw":"---\ntitle: 如何获取csdn中个人所有文章标题及链接\ndate: 2016-10-19 22:32:42\ntags: [csdn]\n---\n小伙伴问如何把自己csdn上的文章标题和超链接都扒下来,问我是不是一个个点开之后抄过去的...当然不是,做为一个爱(sha)好(dou)广(dong)泛(dian)的程序员,怎么会用这么麻烦的方法.\n<!-- more -->\n　　本来打算写java模拟登录之后获取网页源码,然后再用jsoup去解析,得到自己需要的数据.原来就这么干过,好像是写学校的绩点计算器来着吧,就是输入帐号密码就能查到自己的成绩和绩点的那种.\n翻出来代码看了看太麻烦了,想到自己最近在看python,就想着用python来解决,但是问题又来了,python不熟啊,就算写出来了也得看网页源码,找到规律才行,讲道理的说挺烦这东西的.\n最后,还是用js来解决,毕竟这种事也干过,也不是多麻烦.\n登录自己的帐号,找到文章列表,打开控制台窗口,忘了说一下自己的环境了`ubuntu`,`chrom`,找到文章标题和超链接的部分,如下图:\n![csdn个人博客列表](/image/csdn_home.png)\n发现所有的文章标题和超链接结构如下:\n```HTML\n <span class=\"link_title\">\n \t<a href=\"/huangyuan_xuan/article/details/51935666\">\n        初步编写IDEA\\AndroidStudio翻译插件            \n        </a>\n</span>\n```\n另外,界面中还引入了jQuery这个三方库,这就更简单了:\n找到开发者工具的控制台(console),写入下面两行代码\n```JavaScript\nvar aTags = $(\".link_title > a\")\nfor(var i = 0;i<50;i++)\n{\n\tconsole.log(\"[\" + aTags[i].text.trim() + \"](\" + aTags[i].href +\") \"+ aTags[i].href) +\"<br/>\"\n\t}\n```\nok,执行结果如下\n![csdn个人博客标题和超链接](/image/csdn_blog_title.png)\n　　在控制台写的代码第一行是使用jQuery库找到所有文章的超链接集合,第二行是按照`markdown`超链接的语法打印出来文章标题和超链接,至于循环中的`50`这个数字,一页最多只有50篇文章,我偷懒了,建议使用`aTags.length`\n<hr>\n以上\n","slug":"如何获取csdn中个人所有文章标题及链接","published":1,"updated":"2018-04-24T05:29:56.103Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjl3vbtrv003gisdgokuxty9v","content":"<p>小伙伴问如何把自己csdn上的文章标题和超链接都扒下来,问我是不是一个个点开之后抄过去的…当然不是,做为一个爱(sha)好(dou)广(dong)泛(dian)的程序员,怎么会用这么麻烦的方法.<br><a id=\"more\"></a><br>　　本来打算写java模拟登录之后获取网页源码,然后再用jsoup去解析,得到自己需要的数据.原来就这么干过,好像是写学校的绩点计算器来着吧,就是输入帐号密码就能查到自己的成绩和绩点的那种.<br>翻出来代码看了看太麻烦了,想到自己最近在看python,就想着用python来解决,但是问题又来了,python不熟啊,就算写出来了也得看网页源码,找到规律才行,讲道理的说挺烦这东西的.<br>最后,还是用js来解决,毕竟这种事也干过,也不是多麻烦.<br>登录自己的帐号,找到文章列表,打开控制台窗口,忘了说一下自己的环境了<code>ubuntu</code>,<code>chrom</code>,找到文章标题和超链接的部分,如下图:<br><img src=\"/image/csdn_home.png\" alt=\"csdn个人博客列表\"><br>发现所有的文章标题和超链接结构如下:<br><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"> <span class=\"tag\">&lt;<span class=\"name\">span</span> <span class=\"attr\">class</span>=<span class=\"string\">\"link_title\"</span>&gt;</span></div><div class=\"line\"> \t<span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">href</span>=<span class=\"string\">\"/huangyuan_xuan/article/details/51935666\"</span>&gt;</span></div><div class=\"line\">        初步编写IDEA\\AndroidStudio翻译插件            </div><div class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">span</span>&gt;</span></div></pre></td></tr></table></figure></p>\n<p>另外,界面中还引入了jQuery这个三方库,这就更简单了:<br>找到开发者工具的控制台(console),写入下面两行代码<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> aTags = $(<span class=\"string\">\".link_title &gt; a\"</span>)</div><div class=\"line\"><span class=\"keyword\">for</span>(<span class=\"keyword\">var</span> i = <span class=\"number\">0</span>;i&lt;<span class=\"number\">50</span>;i++)</div><div class=\"line\">&#123;</div><div class=\"line\">\t<span class=\"built_in\">console</span>.log(<span class=\"string\">\"[\"</span> + aTags[i].text.trim() + <span class=\"string\">\"](\"</span> + aTags[i].href +<span class=\"string\">\") \"</span>+ aTags[i].href) +<span class=\"string\">\"&lt;br/&gt;\"</span></div><div class=\"line\">\t&#125;</div></pre></td></tr></table></figure></p>\n<p>ok,执行结果如下<br><img src=\"/image/csdn_blog_title.png\" alt=\"csdn个人博客标题和超链接\"><br>　　在控制台写的代码第一行是使用jQuery库找到所有文章的超链接集合,第二行是按照<code>markdown</code>超链接的语法打印出来文章标题和超链接,至于循环中的<code>50</code>这个数字,一页最多只有50篇文章,我偷懒了,建议使用<code>aTags.length</code></p>\n<p><hr><br>以上</p>\n","excerpt":"<p>小伙伴问如何把自己csdn上的文章标题和超链接都扒下来,问我是不是一个个点开之后抄过去的…当然不是,做为一个爱(sha)好(dou)广(dong)泛(dian)的程序员,怎么会用这么麻烦的方法.<br>","more":"<br>　　本来打算写java模拟登录之后获取网页源码,然后再用jsoup去解析,得到自己需要的数据.原来就这么干过,好像是写学校的绩点计算器来着吧,就是输入帐号密码就能查到自己的成绩和绩点的那种.<br>翻出来代码看了看太麻烦了,想到自己最近在看python,就想着用python来解决,但是问题又来了,python不熟啊,就算写出来了也得看网页源码,找到规律才行,讲道理的说挺烦这东西的.<br>最后,还是用js来解决,毕竟这种事也干过,也不是多麻烦.<br>登录自己的帐号,找到文章列表,打开控制台窗口,忘了说一下自己的环境了<code>ubuntu</code>,<code>chrom</code>,找到文章标题和超链接的部分,如下图:<br><img src=\"/image/csdn_home.png\" alt=\"csdn个人博客列表\"><br>发现所有的文章标题和超链接结构如下:<br><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"> <span class=\"tag\">&lt;<span class=\"name\">span</span> <span class=\"attr\">class</span>=<span class=\"string\">\"link_title\"</span>&gt;</span></div><div class=\"line\"> \t<span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">href</span>=<span class=\"string\">\"/huangyuan_xuan/article/details/51935666\"</span>&gt;</span></div><div class=\"line\">        初步编写IDEA\\AndroidStudio翻译插件            </div><div class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">span</span>&gt;</span></div></pre></td></tr></table></figure></p>\n<p>另外,界面中还引入了jQuery这个三方库,这就更简单了:<br>找到开发者工具的控制台(console),写入下面两行代码<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> aTags = $(<span class=\"string\">\".link_title &gt; a\"</span>)</div><div class=\"line\"><span class=\"keyword\">for</span>(<span class=\"keyword\">var</span> i = <span class=\"number\">0</span>;i&lt;<span class=\"number\">50</span>;i++)</div><div class=\"line\">&#123;</div><div class=\"line\">\t<span class=\"built_in\">console</span>.log(<span class=\"string\">\"[\"</span> + aTags[i].text.trim() + <span class=\"string\">\"](\"</span> + aTags[i].href +<span class=\"string\">\") \"</span>+ aTags[i].href) +<span class=\"string\">\"&lt;br/&gt;\"</span></div><div class=\"line\">\t&#125;</div></pre></td></tr></table></figure></p>\n<p>ok,执行结果如下<br><img src=\"/image/csdn_blog_title.png\" alt=\"csdn个人博客标题和超链接\"><br>　　在控制台写的代码第一行是使用jQuery库找到所有文章的超链接集合,第二行是按照<code>markdown</code>超链接的语法打印出来文章标题和超链接,至于循环中的<code>50</code>这个数字,一页最多只有50篇文章,我偷懒了,建议使用<code>aTags.length</code></p>\n<p><hr><br>以上</p>"},{"title":"网站免费升级https","date":"2018-04-01T04:36:16.000Z","keywords":"网站免费升级https","_content":"昨天跟着酷壳网左耳朵耗子的文章把自己在亚马逊主机上的网站变成https的安全访问了，证书不是自签名的，也不是花钱购买的。据说https的网站在搜索引擎中的rank值会比http的更高一些。升级完成后的浏览器截图如下：\n![浏览器](/image/https/https1.png)\n下面是这次升级的记录。\n<!--more-->\n为网站开启https安装证书非常简单，我用的是 [Let’s Encrypt ](https://letsencrypt.org/)这个免费的解决方案。\n1. 打开[https://certbot.eff.org/](https://certbot.eff.org/)这个网页\n2. 在Software 和 System选项里面选择你所使用的软件、系统，我用的nginx+ubuntu16.04\n ![网站截图](/image/https/https4.png)\n3. 然后会跳转到一个新的网页，照着做就是了。\n就以nginx+ubuntu16.04为例：\n``` shell\n$ sudo apt-get update\n$ sudo apt-get install software-properties-common\n$ sudo add-apt-repository ppa:certbot/certbot\n$ sudo apt-get update\n$ sudo apt-get install python-certbot-nginx \n```\n安装成功后执行 `$ sudo certbot --nginx`\n让你输入你的邮箱，然后是同意用户协议，然后是是否公开你的邮箱。\n ![邮箱、用户协议](/image/https/https2.png)\n接着会列出来nginx下所有配置的服务名称，输入你想要开启https的服务名称所对应的编号，如果想为多个服务开启https，中间以空格分隔。然后nginx重新加载一个配置或者重启一下。\n![开启https的服务名称](/image/https/https3.png)\n我个人服务器上的nginx配置的`server_name`是`tomcat.huangyuanlove.com`,域名是在万网买的，然后在万网控制台添加一个A解析，把`tomcat.huangyuanlove.com`指向服务器的ip即可。\n但是 **Let’s Encrypt 的证书90天就过期了**。所以还需要加上自动更新，使用`crontab -e`命令假如如下的定时作业(每个月强制更新一下)\n``` sehll\n0 0 1 * * /usr/bin/certbot renew --force-renewal\n5 0 1 * * /usr/sbin/service nginx restart\n```\n需要注意的是，如果网站中有使用http的地方都要改成https,要不然一些资源文件如图片、js、css等非https的请求连接都会被ban掉。\n\n----\n\n关于ubuntu安装和配置nginx，我也是在官网找的教程，网址在这里[https://www.nginx.com/resources/wiki/start/index.html](https://www.nginx.com/resources/wiki/start/index.html),就知道你们不想看，安装命令如下：\n``` shell\nsudo apt-get update\nsudo apt-get install nginx\n```\n安装完成后，nginx配置文件在`/etc/nginx/nginx.conf`,在http标签中添加server：\n``` configuration\nserver{\n        listen    80;\n        server_name    localhost;\n        location / {\n            root    html;\n            index index.html index.htm;\n        }\n        error_page 500 502 503 504 /50x.html;\n        location = /50x.html{\n            root    html;\n        }\n}\nserver{\n        server_name    tomcat.huangyuanlove.com;\n        location / {\n            proxy_pass http://xxx.xxx.xxx/;\n        }\n}\n```\n给自己的添加https证书后，`Certbot`会修改你的nginx中的server配置，修改的内容如下：\n```\n listen 443 ssl https2; # managed by Certbot\n    ssl_certificate /etc/letsencrypt/live/tomcat.huangyuanlove.com/fullchain.pem; # managed by Certbot\n    ssl_certificate_key /etc/letsencrypt/live/tomcat.huangyuanlove.com/privkey.pem; # managed by Certbot\n    include /etc/letsencrypt/options-ssl-nginx.conf; # managed by Certbot\n    ssl_dhparam /etc/letsencrypt/ssl-dhparams.pem; # managed by Certbot\n```\n\n```\nserver{\n    if ($host = tomcat.huangyuanlove.com) {\n        return 301 https://$host$request_uri;\n    } # managed by Certbot\n    listen    80;\n    server_name    tomcat.huangyuanlove.com;\n    return 404; # managed by Certbot\n}\n```\n基本上就是这样了，没有别的了。\n\n----\n\n以上，嗯，对了，12306你什么时候按照这个教程做一下你的证书？\n\n","source":"_posts/网站免费升级https.md","raw":"---\ntitle: 网站免费升级https\ndate: 2018-04-01 12:36:16\ntags: [网站https,乱七八糟]\nkeywords: 网站免费升级https\n---\n昨天跟着酷壳网左耳朵耗子的文章把自己在亚马逊主机上的网站变成https的安全访问了，证书不是自签名的，也不是花钱购买的。据说https的网站在搜索引擎中的rank值会比http的更高一些。升级完成后的浏览器截图如下：\n![浏览器](/image/https/https1.png)\n下面是这次升级的记录。\n<!--more-->\n为网站开启https安装证书非常简单，我用的是 [Let’s Encrypt ](https://letsencrypt.org/)这个免费的解决方案。\n1. 打开[https://certbot.eff.org/](https://certbot.eff.org/)这个网页\n2. 在Software 和 System选项里面选择你所使用的软件、系统，我用的nginx+ubuntu16.04\n ![网站截图](/image/https/https4.png)\n3. 然后会跳转到一个新的网页，照着做就是了。\n就以nginx+ubuntu16.04为例：\n``` shell\n$ sudo apt-get update\n$ sudo apt-get install software-properties-common\n$ sudo add-apt-repository ppa:certbot/certbot\n$ sudo apt-get update\n$ sudo apt-get install python-certbot-nginx \n```\n安装成功后执行 `$ sudo certbot --nginx`\n让你输入你的邮箱，然后是同意用户协议，然后是是否公开你的邮箱。\n ![邮箱、用户协议](/image/https/https2.png)\n接着会列出来nginx下所有配置的服务名称，输入你想要开启https的服务名称所对应的编号，如果想为多个服务开启https，中间以空格分隔。然后nginx重新加载一个配置或者重启一下。\n![开启https的服务名称](/image/https/https3.png)\n我个人服务器上的nginx配置的`server_name`是`tomcat.huangyuanlove.com`,域名是在万网买的，然后在万网控制台添加一个A解析，把`tomcat.huangyuanlove.com`指向服务器的ip即可。\n但是 **Let’s Encrypt 的证书90天就过期了**。所以还需要加上自动更新，使用`crontab -e`命令假如如下的定时作业(每个月强制更新一下)\n``` sehll\n0 0 1 * * /usr/bin/certbot renew --force-renewal\n5 0 1 * * /usr/sbin/service nginx restart\n```\n需要注意的是，如果网站中有使用http的地方都要改成https,要不然一些资源文件如图片、js、css等非https的请求连接都会被ban掉。\n\n----\n\n关于ubuntu安装和配置nginx，我也是在官网找的教程，网址在这里[https://www.nginx.com/resources/wiki/start/index.html](https://www.nginx.com/resources/wiki/start/index.html),就知道你们不想看，安装命令如下：\n``` shell\nsudo apt-get update\nsudo apt-get install nginx\n```\n安装完成后，nginx配置文件在`/etc/nginx/nginx.conf`,在http标签中添加server：\n``` configuration\nserver{\n        listen    80;\n        server_name    localhost;\n        location / {\n            root    html;\n            index index.html index.htm;\n        }\n        error_page 500 502 503 504 /50x.html;\n        location = /50x.html{\n            root    html;\n        }\n}\nserver{\n        server_name    tomcat.huangyuanlove.com;\n        location / {\n            proxy_pass http://xxx.xxx.xxx/;\n        }\n}\n```\n给自己的添加https证书后，`Certbot`会修改你的nginx中的server配置，修改的内容如下：\n```\n listen 443 ssl https2; # managed by Certbot\n    ssl_certificate /etc/letsencrypt/live/tomcat.huangyuanlove.com/fullchain.pem; # managed by Certbot\n    ssl_certificate_key /etc/letsencrypt/live/tomcat.huangyuanlove.com/privkey.pem; # managed by Certbot\n    include /etc/letsencrypt/options-ssl-nginx.conf; # managed by Certbot\n    ssl_dhparam /etc/letsencrypt/ssl-dhparams.pem; # managed by Certbot\n```\n\n```\nserver{\n    if ($host = tomcat.huangyuanlove.com) {\n        return 301 https://$host$request_uri;\n    } # managed by Certbot\n    listen    80;\n    server_name    tomcat.huangyuanlove.com;\n    return 404; # managed by Certbot\n}\n```\n基本上就是这样了，没有别的了。\n\n----\n\n以上，嗯，对了，12306你什么时候按照这个教程做一下你的证书？\n\n","slug":"网站免费升级https","published":1,"updated":"2018-08-04T05:19:15.915Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjl3vbtrw003iisdgo985fjny","content":"<p>昨天跟着酷壳网左耳朵耗子的文章把自己在亚马逊主机上的网站变成https的安全访问了，证书不是自签名的，也不是花钱购买的。据说https的网站在搜索引擎中的rank值会比http的更高一些。升级完成后的浏览器截图如下：<br><img src=\"/image/https/https1.png\" alt=\"浏览器\"><br>下面是这次升级的记录。<br><a id=\"more\"></a><br>为网站开启https安装证书非常简单，我用的是 <a href=\"https://letsencrypt.org/\" target=\"_blank\" rel=\"external\">Let’s Encrypt </a>这个免费的解决方案。</p>\n<ol>\n<li>打开<a href=\"https://certbot.eff.org/\" target=\"_blank\" rel=\"external\">https://certbot.eff.org/</a>这个网页</li>\n<li>在Software 和 System选项里面选择你所使用的软件、系统，我用的nginx+ubuntu16.04<br><img src=\"/image/https/https4.png\" alt=\"网站截图\"></li>\n<li>然后会跳转到一个新的网页，照着做就是了。<br>就以nginx+ubuntu16.04为例：<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ sudo apt-get update</div><div class=\"line\">$ sudo apt-get install software-properties-common</div><div class=\"line\">$ sudo add-apt-repository ppa:certbot/certbot</div><div class=\"line\">$ sudo apt-get update</div><div class=\"line\">$ sudo apt-get install python-certbot-nginx</div></pre></td></tr></table></figure>\n</li>\n</ol>\n<p>安装成功后执行 <code>$ sudo certbot --nginx</code><br>让你输入你的邮箱，然后是同意用户协议，然后是是否公开你的邮箱。<br> <img src=\"/image/https/https2.png\" alt=\"邮箱、用户协议\"><br>接着会列出来nginx下所有配置的服务名称，输入你想要开启https的服务名称所对应的编号，如果想为多个服务开启https，中间以空格分隔。然后nginx重新加载一个配置或者重启一下。<br><img src=\"/image/https/https3.png\" alt=\"开启https的服务名称\"><br>我个人服务器上的nginx配置的<code>server_name</code>是<code>tomcat.huangyuanlove.com</code>,域名是在万网买的，然后在万网控制台添加一个A解析，把<code>tomcat.huangyuanlove.com</code>指向服务器的ip即可。<br>但是 <strong>Let’s Encrypt 的证书90天就过期了</strong>。所以还需要加上自动更新，使用<code>crontab -e</code>命令假如如下的定时作业(每个月强制更新一下)<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">0 0 1 * * /usr/bin/certbot renew --force-renewal</div><div class=\"line\">5 0 1 * * /usr/sbin/service nginx restart</div></pre></td></tr></table></figure></p>\n<p>需要注意的是，如果网站中有使用http的地方都要改成https,要不然一些资源文件如图片、js、css等非https的请求连接都会被ban掉。</p>\n<hr>\n<p>关于ubuntu安装和配置nginx，我也是在官网找的教程，网址在这里<a href=\"https://www.nginx.com/resources/wiki/start/index.html\" target=\"_blank\" rel=\"external\">https://www.nginx.com/resources/wiki/start/index.html</a>,就知道你们不想看，安装命令如下：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">sudo apt-get update</div><div class=\"line\">sudo apt-get install nginx</div></pre></td></tr></table></figure></p>\n<p>安装完成后，nginx配置文件在<code>/etc/nginx/nginx.conf</code>,在http标签中添加server：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div></pre></td><td class=\"code\"><pre><div class=\"line\">server&#123;</div><div class=\"line\">        listen    80;</div><div class=\"line\">        server_name    localhost;</div><div class=\"line\">        location / &#123;</div><div class=\"line\">            root    html;</div><div class=\"line\">            index index.html index.htm;</div><div class=\"line\">        &#125;</div><div class=\"line\">        error_page 500 502 503 504 /50x.html;</div><div class=\"line\">        location = /50x.html&#123;</div><div class=\"line\">            root    html;</div><div class=\"line\">        &#125;</div><div class=\"line\">&#125;</div><div class=\"line\">server&#123;</div><div class=\"line\">        server_name    tomcat.huangyuanlove.com;</div><div class=\"line\">        location / &#123;</div><div class=\"line\">            proxy_pass http://xxx.xxx.xxx/;</div><div class=\"line\">        &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>给自己的添加https证书后，<code>Certbot</code>会修改你的nginx中的server配置，修改的内容如下：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">listen 443 ssl https2; # managed by Certbot</div><div class=\"line\">   ssl_certificate /etc/letsencrypt/live/tomcat.huangyuanlove.com/fullchain.pem; # managed by Certbot</div><div class=\"line\">   ssl_certificate_key /etc/letsencrypt/live/tomcat.huangyuanlove.com/privkey.pem; # managed by Certbot</div><div class=\"line\">   include /etc/letsencrypt/options-ssl-nginx.conf; # managed by Certbot</div><div class=\"line\">   ssl_dhparam /etc/letsencrypt/ssl-dhparams.pem; # managed by Certbot</div></pre></td></tr></table></figure></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\">server&#123;</div><div class=\"line\">    if ($host = tomcat.huangyuanlove.com) &#123;</div><div class=\"line\">        return 301 https://$host$request_uri;</div><div class=\"line\">    &#125; # managed by Certbot</div><div class=\"line\">    listen    80;</div><div class=\"line\">    server_name    tomcat.huangyuanlove.com;</div><div class=\"line\">    return 404; # managed by Certbot</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>基本上就是这样了，没有别的了。</p>\n<hr>\n<p>以上，嗯，对了，12306你什么时候按照这个教程做一下你的证书？</p>\n","excerpt":"<p>昨天跟着酷壳网左耳朵耗子的文章把自己在亚马逊主机上的网站变成https的安全访问了，证书不是自签名的，也不是花钱购买的。据说https的网站在搜索引擎中的rank值会比http的更高一些。升级完成后的浏览器截图如下：<br><img src=\"/image/https/https1.png\" alt=\"浏览器\"><br>下面是这次升级的记录。<br>","more":"<br>为网站开启https安装证书非常简单，我用的是 <a href=\"https://letsencrypt.org/\">Let’s Encrypt </a>这个免费的解决方案。</p>\n<ol>\n<li>打开<a href=\"https://certbot.eff.org/\">https://certbot.eff.org/</a>这个网页</li>\n<li>在Software 和 System选项里面选择你所使用的软件、系统，我用的nginx+ubuntu16.04<br><img src=\"/image/https/https4.png\" alt=\"网站截图\"></li>\n<li>然后会跳转到一个新的网页，照着做就是了。<br>就以nginx+ubuntu16.04为例：<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ sudo apt-get update</div><div class=\"line\">$ sudo apt-get install software-properties-common</div><div class=\"line\">$ sudo add-apt-repository ppa:certbot/certbot</div><div class=\"line\">$ sudo apt-get update</div><div class=\"line\">$ sudo apt-get install python-certbot-nginx</div></pre></td></tr></table></figure>\n</li>\n</ol>\n<p>安装成功后执行 <code>$ sudo certbot --nginx</code><br>让你输入你的邮箱，然后是同意用户协议，然后是是否公开你的邮箱。<br> <img src=\"/image/https/https2.png\" alt=\"邮箱、用户协议\"><br>接着会列出来nginx下所有配置的服务名称，输入你想要开启https的服务名称所对应的编号，如果想为多个服务开启https，中间以空格分隔。然后nginx重新加载一个配置或者重启一下。<br><img src=\"/image/https/https3.png\" alt=\"开启https的服务名称\"><br>我个人服务器上的nginx配置的<code>server_name</code>是<code>tomcat.huangyuanlove.com</code>,域名是在万网买的，然后在万网控制台添加一个A解析，把<code>tomcat.huangyuanlove.com</code>指向服务器的ip即可。<br>但是 <strong>Let’s Encrypt 的证书90天就过期了</strong>。所以还需要加上自动更新，使用<code>crontab -e</code>命令假如如下的定时作业(每个月强制更新一下)<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">0 0 1 * * /usr/bin/certbot renew --force-renewal</div><div class=\"line\">5 0 1 * * /usr/sbin/service nginx restart</div></pre></td></tr></table></figure></p>\n<p>需要注意的是，如果网站中有使用http的地方都要改成https,要不然一些资源文件如图片、js、css等非https的请求连接都会被ban掉。</p>\n<hr>\n<p>关于ubuntu安装和配置nginx，我也是在官网找的教程，网址在这里<a href=\"https://www.nginx.com/resources/wiki/start/index.html\">https://www.nginx.com/resources/wiki/start/index.html</a>,就知道你们不想看，安装命令如下：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">sudo apt-get update</div><div class=\"line\">sudo apt-get install nginx</div></pre></td></tr></table></figure></p>\n<p>安装完成后，nginx配置文件在<code>/etc/nginx/nginx.conf</code>,在http标签中添加server：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div></pre></td><td class=\"code\"><pre><div class=\"line\">server&#123;</div><div class=\"line\">        listen    80;</div><div class=\"line\">        server_name    localhost;</div><div class=\"line\">        location / &#123;</div><div class=\"line\">            root    html;</div><div class=\"line\">            index index.html index.htm;</div><div class=\"line\">        &#125;</div><div class=\"line\">        error_page 500 502 503 504 /50x.html;</div><div class=\"line\">        location = /50x.html&#123;</div><div class=\"line\">            root    html;</div><div class=\"line\">        &#125;</div><div class=\"line\">&#125;</div><div class=\"line\">server&#123;</div><div class=\"line\">        server_name    tomcat.huangyuanlove.com;</div><div class=\"line\">        location / &#123;</div><div class=\"line\">            proxy_pass http://xxx.xxx.xxx/;</div><div class=\"line\">        &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>给自己的添加https证书后，<code>Certbot</code>会修改你的nginx中的server配置，修改的内容如下：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">listen 443 ssl https2; # managed by Certbot</div><div class=\"line\">   ssl_certificate /etc/letsencrypt/live/tomcat.huangyuanlove.com/fullchain.pem; # managed by Certbot</div><div class=\"line\">   ssl_certificate_key /etc/letsencrypt/live/tomcat.huangyuanlove.com/privkey.pem; # managed by Certbot</div><div class=\"line\">   include /etc/letsencrypt/options-ssl-nginx.conf; # managed by Certbot</div><div class=\"line\">   ssl_dhparam /etc/letsencrypt/ssl-dhparams.pem; # managed by Certbot</div></pre></td></tr></table></figure></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\">server&#123;</div><div class=\"line\">    if ($host = tomcat.huangyuanlove.com) &#123;</div><div class=\"line\">        return 301 https://$host$request_uri;</div><div class=\"line\">    &#125; # managed by Certbot</div><div class=\"line\">    listen    80;</div><div class=\"line\">    server_name    tomcat.huangyuanlove.com;</div><div class=\"line\">    return 404; # managed by Certbot</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>基本上就是这样了，没有别的了。</p>\n<hr>\n<p>以上，嗯，对了，12306你什么时候按照这个教程做一下你的证书？</p>"},{"title":"项目重构记录","date":"2018-05-24T04:11:00.000Z","keywords":"重构","_content":"\n总结一下在新公司一个月来学到的东西吧。公司的项目采用Native+RN进行开发，前两周简单的了解了一下项目结构，写了一些自动打包的脚本。后两周大致学习了一下RN，然后就是调整项目结构，做重构。\n\n<!--more-->\n一些简单的记录，\n##### 需要注意的地方\n1. 主工程module下的插件是 \n> apply plugin: 'com.android.application'\n\nlibrary中的插件是\n> apply plugin: 'com.android.library'\n\n2. 在library module中，生成的R文件中的变量没有被final修饰，所以在`switch case`中需要改一下写法，比如改成`if else`。\n\n3. ButterKnife中注解@bind中要求参数是final类型，所以在library中这个注解也不好用，作者给出了解决方案。\n\n4. library module中不能有applicationId。\n\n ##### 改动记录\n涉及到源代码的部分没有公开。\n\n1. 将原项目中所有library依赖移动到`BaseApp`文件夹下,统一由一个git子模块引用。，所以需要在工程根目录下的`setting.gradle`中修改`include`路径\n> include  ':base'\n\n改为\n> include  ':BaseApp:base'\n\nlibrary中依赖的其他library也需要做修改(路径前添加`:BaseApp` )，如`RiskControlSdk`中`dependencies`中\n\n> ```groovy\nreleaseCompile project(path: 'BaseComponents', configuration: 'release')\ndebugCompile project(path: ':BaseComponents', configuration: 'debug')\n```\n\n改为\n\n> ```groovy\n releaseCompile project(path: ':BaseApp:BaseComponents', configuration: 'release')\n debugCompile project(path: ':BaseApp:BaseComponents', configuration: 'debug')\n ```\n\n2. 原app module(现base)中用到`butterknife`，在@bind注解要求参数是final类型，但是在library项目中，生成的R文件中的id不是final。\n`butterknife`作者给出类解决办法:升级`butterknife`到8.8.1，在library中的`build.gradle`添加`apply plugin: 'com.jakewharton.butterknife'`插件，用于生成`R2`文件，将原来的`R.id.xxx`改为`R2.id.xxx`。同理，在`switch case`中用R.id的地方也要做相应修改。参考 https://github.com/JakeWharton/butterknife\n\n3. 将gradle依赖、某些appkey在根目录下的`config.gradle`中配置\n   在项目根目录下新建`config.gradle`文件，用来存放公共配置，如\n\n``` groovy\n\text {\n\t\turl = \"https://test.test.com\"\n\t\tUMENG_APPKEY = \"*****\"\n\t\tUMENG_MESSAGE_SECRET = \"*******\"\n\t\tWEIXIN_APP_ID = \"******\"\n\t\tWEIXIN_APP_SECRET = \"********\"\n\t\tandroid = [\n\t\t\tcompileSdkVersion: 25,\n\t\t\tbuildToolsVersion: \"25.0.2\",\n\t\t\tapplicationId    : \"xxxxx\",\n\t\t\tminSdkVersion    : 16,\n\t\t\ttargetSdkVersion : 22,\n\t\t\tversionCode      : 120,\n\t\t\tversionName      : \"1.2.0\",\n\t\t]\n\t\tdependencies = [\n\t\t\t\"appcompat-v7\"                : \"com.android.support:appcompat-v7:25.0.0\",\n\t\t\t\"support-v4\"                  : 'com.android.support:support-v4:25.0.0',\n\t\t\t\"support-v13\"                 : 'com.android.support:support-v13:23.4.0',\n\t\t\t\"support-annotations\"         : 'com.android.support:support-annotations:23.4.0',\n\t\t\t\"butterknife\"                 : \"com.jakewharton:butterknife:8.8.1\",\n\t\t\t\"xutils\"                      : 'org.xutils:xutils:3.5.0',\n\t\t\t\"junit\"                       : 'junit:junit:4.12',\n\t\t\t\"react-native\"                : \"com.facebook.react:react-native:0.49.5\",\n\t\t\t\"subsampling-scale-image-view\": 'com.davemorrissey.labs:subsampling-scale-image-view:3.5.0',\n\t\t\t\"eventbus\"                    : 'de.greenrobot:eventbus:2.4.0',\n\t\t\t\"okio\"                        : 'com.squareup.okio:okio:1.8.0',\n\t\t\t\"universal-image-loader\"      : 'com.nostra13.universalimageloader:universal-image-loader:1.9.5',\n\t\t\t\"multidex\"                    : 'com.android.support:multidex:1.0.1',\n\t\t\t\"nohttp\":'com.yanzhenjie.nohttp:nohttp:1.1.4',\n\t\t]\n\t}\n```\n\n使用时注意事项：\n\n1. 现在library中的所有appkey(三方)相关的，都由工程根目录下的配置文件`config.gradle`提供，然后添加到该module的`BuildConfig.java`文件中，代码中从`BuildConfig.java`文件中引用\n\n在`config.gradle`文件中添加一个三方key值 \n``` groovy\n\text{\n\t\tUMENG_APPKEY = \"************\"\n\t}\n```\n\n在module中的`build.grale`引用\n``` groovy\n\tdef UMENG_APPKEY = rootProject.ext.UMENG_APPKEY\n```\n\n加入到该module的`BuildConfig.java`文件\n\n``` groovy\n\tdefaultConfig{\n\t\tbuildConfigField \"String\", \"umeng_analytics_key\", \"\\\"\" + UMENG_APPKEY + \"\\\"\"\n\t\t}\n```\n\n代码中引用\n``` java \n\tBuildConfig.umeng_analytics_key\n```\n      \n这里需要注意的是，import该文件的时候，是从该module的`manifest.xml`中的跟标签的`package`属性所指向的包名导入的，如\n\n``` xml\n\t<manifest xmlns:android=\"http://schemas.android.com/apk/res/android\"\n\t\tpackage=\"com.huangyuanlove.test\">\n\t</manifest>\n```\n\n则`BuildConfig.java`文件的导入路径为 `import com.huangyuanlove.test;`\n2. 所有使用gradle依赖的三方全部放在根目录的`config.gradle`文件夹下，其他module引用时可参考下面的配置。如\n\n需要添加一个新的依赖，在根目录下的 `config.gradle`文件中\n\n``` groovy\n\text{\n\t\tdependencies=[\n\t\t\t\"newDependency\":\"dependency\",\n\t\t]\n\t}\n```\n在其他module中引用\n\n``` groovy\n\tdef dependency = rootProject.ext.dependencies\n\tdependencies {\n\t\tcompile dependency[\"newDependency\"]\n\t}\n```\n","source":"_posts/项目重构记录.md","raw":"---\ntitle: 项目重构记录\ndate: 2018-05-24 12:11:00\ntags: [Android]\nkeywords: 重构\n---\n\n总结一下在新公司一个月来学到的东西吧。公司的项目采用Native+RN进行开发，前两周简单的了解了一下项目结构，写了一些自动打包的脚本。后两周大致学习了一下RN，然后就是调整项目结构，做重构。\n\n<!--more-->\n一些简单的记录，\n##### 需要注意的地方\n1. 主工程module下的插件是 \n> apply plugin: 'com.android.application'\n\nlibrary中的插件是\n> apply plugin: 'com.android.library'\n\n2. 在library module中，生成的R文件中的变量没有被final修饰，所以在`switch case`中需要改一下写法，比如改成`if else`。\n\n3. ButterKnife中注解@bind中要求参数是final类型，所以在library中这个注解也不好用，作者给出了解决方案。\n\n4. library module中不能有applicationId。\n\n ##### 改动记录\n涉及到源代码的部分没有公开。\n\n1. 将原项目中所有library依赖移动到`BaseApp`文件夹下,统一由一个git子模块引用。，所以需要在工程根目录下的`setting.gradle`中修改`include`路径\n> include  ':base'\n\n改为\n> include  ':BaseApp:base'\n\nlibrary中依赖的其他library也需要做修改(路径前添加`:BaseApp` )，如`RiskControlSdk`中`dependencies`中\n\n> ```groovy\nreleaseCompile project(path: 'BaseComponents', configuration: 'release')\ndebugCompile project(path: ':BaseComponents', configuration: 'debug')\n```\n\n改为\n\n> ```groovy\n releaseCompile project(path: ':BaseApp:BaseComponents', configuration: 'release')\n debugCompile project(path: ':BaseApp:BaseComponents', configuration: 'debug')\n ```\n\n2. 原app module(现base)中用到`butterknife`，在@bind注解要求参数是final类型，但是在library项目中，生成的R文件中的id不是final。\n`butterknife`作者给出类解决办法:升级`butterknife`到8.8.1，在library中的`build.gradle`添加`apply plugin: 'com.jakewharton.butterknife'`插件，用于生成`R2`文件，将原来的`R.id.xxx`改为`R2.id.xxx`。同理，在`switch case`中用R.id的地方也要做相应修改。参考 https://github.com/JakeWharton/butterknife\n\n3. 将gradle依赖、某些appkey在根目录下的`config.gradle`中配置\n   在项目根目录下新建`config.gradle`文件，用来存放公共配置，如\n\n``` groovy\n\text {\n\t\turl = \"https://test.test.com\"\n\t\tUMENG_APPKEY = \"*****\"\n\t\tUMENG_MESSAGE_SECRET = \"*******\"\n\t\tWEIXIN_APP_ID = \"******\"\n\t\tWEIXIN_APP_SECRET = \"********\"\n\t\tandroid = [\n\t\t\tcompileSdkVersion: 25,\n\t\t\tbuildToolsVersion: \"25.0.2\",\n\t\t\tapplicationId    : \"xxxxx\",\n\t\t\tminSdkVersion    : 16,\n\t\t\ttargetSdkVersion : 22,\n\t\t\tversionCode      : 120,\n\t\t\tversionName      : \"1.2.0\",\n\t\t]\n\t\tdependencies = [\n\t\t\t\"appcompat-v7\"                : \"com.android.support:appcompat-v7:25.0.0\",\n\t\t\t\"support-v4\"                  : 'com.android.support:support-v4:25.0.0',\n\t\t\t\"support-v13\"                 : 'com.android.support:support-v13:23.4.0',\n\t\t\t\"support-annotations\"         : 'com.android.support:support-annotations:23.4.0',\n\t\t\t\"butterknife\"                 : \"com.jakewharton:butterknife:8.8.1\",\n\t\t\t\"xutils\"                      : 'org.xutils:xutils:3.5.0',\n\t\t\t\"junit\"                       : 'junit:junit:4.12',\n\t\t\t\"react-native\"                : \"com.facebook.react:react-native:0.49.5\",\n\t\t\t\"subsampling-scale-image-view\": 'com.davemorrissey.labs:subsampling-scale-image-view:3.5.0',\n\t\t\t\"eventbus\"                    : 'de.greenrobot:eventbus:2.4.0',\n\t\t\t\"okio\"                        : 'com.squareup.okio:okio:1.8.0',\n\t\t\t\"universal-image-loader\"      : 'com.nostra13.universalimageloader:universal-image-loader:1.9.5',\n\t\t\t\"multidex\"                    : 'com.android.support:multidex:1.0.1',\n\t\t\t\"nohttp\":'com.yanzhenjie.nohttp:nohttp:1.1.4',\n\t\t]\n\t}\n```\n\n使用时注意事项：\n\n1. 现在library中的所有appkey(三方)相关的，都由工程根目录下的配置文件`config.gradle`提供，然后添加到该module的`BuildConfig.java`文件中，代码中从`BuildConfig.java`文件中引用\n\n在`config.gradle`文件中添加一个三方key值 \n``` groovy\n\text{\n\t\tUMENG_APPKEY = \"************\"\n\t}\n```\n\n在module中的`build.grale`引用\n``` groovy\n\tdef UMENG_APPKEY = rootProject.ext.UMENG_APPKEY\n```\n\n加入到该module的`BuildConfig.java`文件\n\n``` groovy\n\tdefaultConfig{\n\t\tbuildConfigField \"String\", \"umeng_analytics_key\", \"\\\"\" + UMENG_APPKEY + \"\\\"\"\n\t\t}\n```\n\n代码中引用\n``` java \n\tBuildConfig.umeng_analytics_key\n```\n      \n这里需要注意的是，import该文件的时候，是从该module的`manifest.xml`中的跟标签的`package`属性所指向的包名导入的，如\n\n``` xml\n\t<manifest xmlns:android=\"http://schemas.android.com/apk/res/android\"\n\t\tpackage=\"com.huangyuanlove.test\">\n\t</manifest>\n```\n\n则`BuildConfig.java`文件的导入路径为 `import com.huangyuanlove.test;`\n2. 所有使用gradle依赖的三方全部放在根目录的`config.gradle`文件夹下，其他module引用时可参考下面的配置。如\n\n需要添加一个新的依赖，在根目录下的 `config.gradle`文件中\n\n``` groovy\n\text{\n\t\tdependencies=[\n\t\t\t\"newDependency\":\"dependency\",\n\t\t]\n\t}\n```\n在其他module中引用\n\n``` groovy\n\tdef dependency = rootProject.ext.dependencies\n\tdependencies {\n\t\tcompile dependency[\"newDependency\"]\n\t}\n```\n","slug":"项目重构记录","published":1,"updated":"2018-08-05T03:46:07.153Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjl3vbtrw003lisdgnrlwyk23","content":"<p>总结一下在新公司一个月来学到的东西吧。公司的项目采用Native+RN进行开发，前两周简单的了解了一下项目结构，写了一些自动打包的脚本。后两周大致学习了一下RN，然后就是调整项目结构，做重构。</p>\n<a id=\"more\"></a>\n<p>一些简单的记录，</p>\n<h5 id=\"需要注意的地方\"><a href=\"#需要注意的地方\" class=\"headerlink\" title=\"需要注意的地方\"></a>需要注意的地方</h5><ol>\n<li>主工程module下的插件是 <blockquote>\n<p>apply plugin: ‘com.android.application’</p>\n</blockquote>\n</li>\n</ol>\n<p>library中的插件是</p>\n<blockquote>\n<p>apply plugin: ‘com.android.library’</p>\n</blockquote>\n<ol>\n<li><p>在library module中，生成的R文件中的变量没有被final修饰，所以在<code>switch case</code>中需要改一下写法，比如改成<code>if else</code>。</p>\n</li>\n<li><p>ButterKnife中注解@bind中要求参数是final类型，所以在library中这个注解也不好用，作者给出了解决方案。</p>\n</li>\n<li><p>library module中不能有applicationId。</p>\n<h5 id=\"改动记录\"><a href=\"#改动记录\" class=\"headerlink\" title=\"改动记录\"></a>改动记录</h5><p>涉及到源代码的部分没有公开。</p>\n</li>\n<li><p>将原项目中所有library依赖移动到<code>BaseApp</code>文件夹下,统一由一个git子模块引用。，所以需要在工程根目录下的<code>setting.gradle</code>中修改<code>include</code>路径</p>\n<blockquote>\n<p>include  ‘:base’</p>\n</blockquote>\n</li>\n</ol>\n<p>改为</p>\n<blockquote>\n<p>include  ‘:BaseApp:base’</p>\n</blockquote>\n<p>library中依赖的其他library也需要做修改(路径前添加<code>:BaseApp</code> )，如<code>RiskControlSdk</code>中<code>dependencies</code>中</p>\n<blockquote>\n<figure class=\"highlight groovy\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">releaseCompile project(<span class=\"string\">path:</span> <span class=\"string\">'BaseComponents'</span>, <span class=\"string\">configuration:</span> <span class=\"string\">'release'</span>)</div><div class=\"line\">debugCompile project(<span class=\"string\">path:</span> <span class=\"string\">':BaseComponents'</span>, <span class=\"string\">configuration:</span> <span class=\"string\">'debug'</span>)</div></pre></td></tr></table></figure>\n</blockquote>\n<p>改为</p>\n<blockquote>\n<figure class=\"highlight groovy\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">releaseCompile project(<span class=\"string\">path:</span> <span class=\"string\">':BaseApp:BaseComponents'</span>, <span class=\"string\">configuration:</span> <span class=\"string\">'release'</span>)</div><div class=\"line\">debugCompile project(<span class=\"string\">path:</span> <span class=\"string\">':BaseApp:BaseComponents'</span>, <span class=\"string\">configuration:</span> <span class=\"string\">'debug'</span>)</div></pre></td></tr></table></figure>\n</blockquote>\n<ol>\n<li><p>原app module(现base)中用到<code>butterknife</code>，在@bind注解要求参数是final类型，但是在library项目中，生成的R文件中的id不是final。<br><code>butterknife</code>作者给出类解决办法:升级<code>butterknife</code>到8.8.1，在library中的<code>build.gradle</code>添加<code>apply plugin: &#39;com.jakewharton.butterknife&#39;</code>插件，用于生成<code>R2</code>文件，将原来的<code>R.id.xxx</code>改为<code>R2.id.xxx</code>。同理，在<code>switch case</code>中用R.id的地方也要做相应修改。参考 <a href=\"https://github.com/JakeWharton/butterknife\" target=\"_blank\" rel=\"external\">https://github.com/JakeWharton/butterknife</a></p>\n</li>\n<li><p>将gradle依赖、某些appkey在根目录下的<code>config.gradle</code>中配置<br>在项目根目录下新建<code>config.gradle</code>文件，用来存放公共配置，如</p>\n</li>\n</ol>\n<figure class=\"highlight groovy\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div></pre></td><td class=\"code\"><pre><div class=\"line\">ext &#123;</div><div class=\"line\">\turl = <span class=\"string\">\"https://test.test.com\"</span></div><div class=\"line\">\tUMENG_APPKEY = <span class=\"string\">\"*****\"</span></div><div class=\"line\">\tUMENG_MESSAGE_SECRET = <span class=\"string\">\"*******\"</span></div><div class=\"line\">\tWEIXIN_APP_ID = <span class=\"string\">\"******\"</span></div><div class=\"line\">\tWEIXIN_APP_SECRET = <span class=\"string\">\"********\"</span></div><div class=\"line\">\tandroid = [</div><div class=\"line\"><span class=\"symbol\">\t\tcompileSdkVersion:</span> <span class=\"number\">25</span>,</div><div class=\"line\"><span class=\"symbol\">\t\tbuildToolsVersion:</span> <span class=\"string\">\"25.0.2\"</span>,</div><div class=\"line\">\t\t<span class=\"string\">applicationId    :</span> <span class=\"string\">\"xxxxx\"</span>,</div><div class=\"line\">\t\t<span class=\"string\">minSdkVersion    :</span> <span class=\"number\">16</span>,</div><div class=\"line\">\t\t<span class=\"string\">targetSdkVersion :</span> <span class=\"number\">22</span>,</div><div class=\"line\">\t\t<span class=\"string\">versionCode      :</span> <span class=\"number\">120</span>,</div><div class=\"line\">\t\t<span class=\"string\">versionName      :</span> <span class=\"string\">\"1.2.0\"</span>,</div><div class=\"line\">\t]</div><div class=\"line\">\tdependencies = [</div><div class=\"line\">\t\t<span class=\"string\">\"appcompat-v7\"</span>                : <span class=\"string\">\"com.android.support:appcompat-v7:25.0.0\"</span>,</div><div class=\"line\">\t\t<span class=\"string\">\"support-v4\"</span>                  : <span class=\"string\">'com.android.support:support-v4:25.0.0'</span>,</div><div class=\"line\">\t\t<span class=\"string\">\"support-v13\"</span>                 : <span class=\"string\">'com.android.support:support-v13:23.4.0'</span>,</div><div class=\"line\">\t\t<span class=\"string\">\"support-annotations\"</span>         : <span class=\"string\">'com.android.support:support-annotations:23.4.0'</span>,</div><div class=\"line\">\t\t<span class=\"string\">\"butterknife\"</span>                 : <span class=\"string\">\"com.jakewharton:butterknife:8.8.1\"</span>,</div><div class=\"line\">\t\t<span class=\"string\">\"xutils\"</span>                      : <span class=\"string\">'org.xutils:xutils:3.5.0'</span>,</div><div class=\"line\">\t\t<span class=\"string\">\"junit\"</span>                       : <span class=\"string\">'junit:junit:4.12'</span>,</div><div class=\"line\">\t\t<span class=\"string\">\"react-native\"</span>                : <span class=\"string\">\"com.facebook.react:react-native:0.49.5\"</span>,</div><div class=\"line\">\t\t<span class=\"string\">\"subsampling-scale-image-view\"</span>: <span class=\"string\">'com.davemorrissey.labs:subsampling-scale-image-view:3.5.0'</span>,</div><div class=\"line\">\t\t<span class=\"string\">\"eventbus\"</span>                    : <span class=\"string\">'de.greenrobot:eventbus:2.4.0'</span>,</div><div class=\"line\">\t\t<span class=\"string\">\"okio\"</span>                        : <span class=\"string\">'com.squareup.okio:okio:1.8.0'</span>,</div><div class=\"line\">\t\t<span class=\"string\">\"universal-image-loader\"</span>      : <span class=\"string\">'com.nostra13.universalimageloader:universal-image-loader:1.9.5'</span>,</div><div class=\"line\">\t\t<span class=\"string\">\"multidex\"</span>                    : <span class=\"string\">'com.android.support:multidex:1.0.1'</span>,</div><div class=\"line\">\t\t<span class=\"string\">\"nohttp\"</span>:<span class=\"string\">'com.yanzhenjie.nohttp:nohttp:1.1.4'</span>,</div><div class=\"line\">\t]</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>使用时注意事项：</p>\n<ol>\n<li>现在library中的所有appkey(三方)相关的，都由工程根目录下的配置文件<code>config.gradle</code>提供，然后添加到该module的<code>BuildConfig.java</code>文件中，代码中从<code>BuildConfig.java</code>文件中引用</li>\n</ol>\n<p>在<code>config.gradle</code>文件中添加一个三方key值<br><figure class=\"highlight groovy\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">ext&#123;</div><div class=\"line\">\tUMENG_APPKEY = <span class=\"string\">\"************\"</span></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>在module中的<code>build.grale</code>引用<br><figure class=\"highlight groovy\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">def</span> UMENG_APPKEY = rootProject.ext.UMENG_APPKEY</div></pre></td></tr></table></figure></p>\n<p>加入到该module的<code>BuildConfig.java</code>文件</p>\n<figure class=\"highlight groovy\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">defaultConfig&#123;</div><div class=\"line\">\tbuildConfigField <span class=\"string\">\"String\"</span>, <span class=\"string\">\"umeng_analytics_key\"</span>, <span class=\"string\">\"\\\"\"</span> + UMENG_APPKEY + <span class=\"string\">\"\\\"\"</span></div><div class=\"line\">\t&#125;</div></pre></td></tr></table></figure>\n<p>代码中引用<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">BuildConfig.umeng_analytics_key</div></pre></td></tr></table></figure></p>\n<p>这里需要注意的是，import该文件的时候，是从该module的<code>manifest.xml</code>中的跟标签的<code>package</code>属性所指向的包名导入的，如</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">manifest</span> <span class=\"attr\">xmlns:android</span>=<span class=\"string\">\"http://schemas.android.com/apk/res/android\"</span></span></div><div class=\"line\">\t<span class=\"attr\">package</span>=<span class=\"string\">\"com.huangyuanlove.test\"</span>&gt;</div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">manifest</span>&gt;</span></div></pre></td></tr></table></figure>\n<p>则<code>BuildConfig.java</code>文件的导入路径为 <code>import com.huangyuanlove.test;</code></p>\n<ol>\n<li>所有使用gradle依赖的三方全部放在根目录的<code>config.gradle</code>文件夹下，其他module引用时可参考下面的配置。如</li>\n</ol>\n<p>需要添加一个新的依赖，在根目录下的 <code>config.gradle</code>文件中</p>\n<figure class=\"highlight groovy\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">ext&#123;</div><div class=\"line\">\tdependencies=[</div><div class=\"line\">\t\t<span class=\"string\">\"newDependency\"</span>:<span class=\"string\">\"dependency\"</span>,</div><div class=\"line\">\t]</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>在其他module中引用</p>\n<figure class=\"highlight groovy\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">def</span> dependency = rootProject.ext.dependencies</div><div class=\"line\">dependencies &#123;</div><div class=\"line\">\tcompile dependency[<span class=\"string\">\"newDependency\"</span>]</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n","excerpt":"<p>总结一下在新公司一个月来学到的东西吧。公司的项目采用Native+RN进行开发，前两周简单的了解了一下项目结构，写了一些自动打包的脚本。后两周大致学习了一下RN，然后就是调整项目结构，做重构。</p>","more":"<p>一些简单的记录，</p>\n<h5 id=\"需要注意的地方\"><a href=\"#需要注意的地方\" class=\"headerlink\" title=\"需要注意的地方\"></a>需要注意的地方</h5><ol>\n<li>主工程module下的插件是 <blockquote>\n<p>apply plugin: ‘com.android.application’</p>\n</blockquote>\n</li>\n</ol>\n<p>library中的插件是</p>\n<blockquote>\n<p>apply plugin: ‘com.android.library’</p>\n</blockquote>\n<ol>\n<li><p>在library module中，生成的R文件中的变量没有被final修饰，所以在<code>switch case</code>中需要改一下写法，比如改成<code>if else</code>。</p>\n</li>\n<li><p>ButterKnife中注解@bind中要求参数是final类型，所以在library中这个注解也不好用，作者给出了解决方案。</p>\n</li>\n<li><p>library module中不能有applicationId。</p>\n<h5 id=\"改动记录\"><a href=\"#改动记录\" class=\"headerlink\" title=\"改动记录\"></a>改动记录</h5><p>涉及到源代码的部分没有公开。</p>\n</li>\n<li><p>将原项目中所有library依赖移动到<code>BaseApp</code>文件夹下,统一由一个git子模块引用。，所以需要在工程根目录下的<code>setting.gradle</code>中修改<code>include</code>路径</p>\n<blockquote>\n<p>include  ‘:base’</p>\n</blockquote>\n</li>\n</ol>\n<p>改为</p>\n<blockquote>\n<p>include  ‘:BaseApp:base’</p>\n</blockquote>\n<p>library中依赖的其他library也需要做修改(路径前添加<code>:BaseApp</code> )，如<code>RiskControlSdk</code>中<code>dependencies</code>中</p>\n<blockquote>\n<figure class=\"highlight groovy\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">releaseCompile project(<span class=\"string\">path:</span> <span class=\"string\">'BaseComponents'</span>, <span class=\"string\">configuration:</span> <span class=\"string\">'release'</span>)</div><div class=\"line\">debugCompile project(<span class=\"string\">path:</span> <span class=\"string\">':BaseComponents'</span>, <span class=\"string\">configuration:</span> <span class=\"string\">'debug'</span>)</div></pre></td></tr></table></figure>\n</blockquote>\n<p>改为</p>\n<blockquote>\n<figure class=\"highlight groovy\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">releaseCompile project(<span class=\"string\">path:</span> <span class=\"string\">':BaseApp:BaseComponents'</span>, <span class=\"string\">configuration:</span> <span class=\"string\">'release'</span>)</div><div class=\"line\">debugCompile project(<span class=\"string\">path:</span> <span class=\"string\">':BaseApp:BaseComponents'</span>, <span class=\"string\">configuration:</span> <span class=\"string\">'debug'</span>)</div></pre></td></tr></table></figure>\n</blockquote>\n<ol>\n<li><p>原app module(现base)中用到<code>butterknife</code>，在@bind注解要求参数是final类型，但是在library项目中，生成的R文件中的id不是final。<br><code>butterknife</code>作者给出类解决办法:升级<code>butterknife</code>到8.8.1，在library中的<code>build.gradle</code>添加<code>apply plugin: &#39;com.jakewharton.butterknife&#39;</code>插件，用于生成<code>R2</code>文件，将原来的<code>R.id.xxx</code>改为<code>R2.id.xxx</code>。同理，在<code>switch case</code>中用R.id的地方也要做相应修改。参考 <a href=\"https://github.com/JakeWharton/butterknife\">https://github.com/JakeWharton/butterknife</a></p>\n</li>\n<li><p>将gradle依赖、某些appkey在根目录下的<code>config.gradle</code>中配置<br>在项目根目录下新建<code>config.gradle</code>文件，用来存放公共配置，如</p>\n</li>\n</ol>\n<figure class=\"highlight groovy\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div></pre></td><td class=\"code\"><pre><div class=\"line\">ext &#123;</div><div class=\"line\">\turl = <span class=\"string\">\"https://test.test.com\"</span></div><div class=\"line\">\tUMENG_APPKEY = <span class=\"string\">\"*****\"</span></div><div class=\"line\">\tUMENG_MESSAGE_SECRET = <span class=\"string\">\"*******\"</span></div><div class=\"line\">\tWEIXIN_APP_ID = <span class=\"string\">\"******\"</span></div><div class=\"line\">\tWEIXIN_APP_SECRET = <span class=\"string\">\"********\"</span></div><div class=\"line\">\tandroid = [</div><div class=\"line\"><span class=\"symbol\">\t\tcompileSdkVersion:</span> <span class=\"number\">25</span>,</div><div class=\"line\"><span class=\"symbol\">\t\tbuildToolsVersion:</span> <span class=\"string\">\"25.0.2\"</span>,</div><div class=\"line\">\t\t<span class=\"string\">applicationId    :</span> <span class=\"string\">\"xxxxx\"</span>,</div><div class=\"line\">\t\t<span class=\"string\">minSdkVersion    :</span> <span class=\"number\">16</span>,</div><div class=\"line\">\t\t<span class=\"string\">targetSdkVersion :</span> <span class=\"number\">22</span>,</div><div class=\"line\">\t\t<span class=\"string\">versionCode      :</span> <span class=\"number\">120</span>,</div><div class=\"line\">\t\t<span class=\"string\">versionName      :</span> <span class=\"string\">\"1.2.0\"</span>,</div><div class=\"line\">\t]</div><div class=\"line\">\tdependencies = [</div><div class=\"line\">\t\t<span class=\"string\">\"appcompat-v7\"</span>                : <span class=\"string\">\"com.android.support:appcompat-v7:25.0.0\"</span>,</div><div class=\"line\">\t\t<span class=\"string\">\"support-v4\"</span>                  : <span class=\"string\">'com.android.support:support-v4:25.0.0'</span>,</div><div class=\"line\">\t\t<span class=\"string\">\"support-v13\"</span>                 : <span class=\"string\">'com.android.support:support-v13:23.4.0'</span>,</div><div class=\"line\">\t\t<span class=\"string\">\"support-annotations\"</span>         : <span class=\"string\">'com.android.support:support-annotations:23.4.0'</span>,</div><div class=\"line\">\t\t<span class=\"string\">\"butterknife\"</span>                 : <span class=\"string\">\"com.jakewharton:butterknife:8.8.1\"</span>,</div><div class=\"line\">\t\t<span class=\"string\">\"xutils\"</span>                      : <span class=\"string\">'org.xutils:xutils:3.5.0'</span>,</div><div class=\"line\">\t\t<span class=\"string\">\"junit\"</span>                       : <span class=\"string\">'junit:junit:4.12'</span>,</div><div class=\"line\">\t\t<span class=\"string\">\"react-native\"</span>                : <span class=\"string\">\"com.facebook.react:react-native:0.49.5\"</span>,</div><div class=\"line\">\t\t<span class=\"string\">\"subsampling-scale-image-view\"</span>: <span class=\"string\">'com.davemorrissey.labs:subsampling-scale-image-view:3.5.0'</span>,</div><div class=\"line\">\t\t<span class=\"string\">\"eventbus\"</span>                    : <span class=\"string\">'de.greenrobot:eventbus:2.4.0'</span>,</div><div class=\"line\">\t\t<span class=\"string\">\"okio\"</span>                        : <span class=\"string\">'com.squareup.okio:okio:1.8.0'</span>,</div><div class=\"line\">\t\t<span class=\"string\">\"universal-image-loader\"</span>      : <span class=\"string\">'com.nostra13.universalimageloader:universal-image-loader:1.9.5'</span>,</div><div class=\"line\">\t\t<span class=\"string\">\"multidex\"</span>                    : <span class=\"string\">'com.android.support:multidex:1.0.1'</span>,</div><div class=\"line\">\t\t<span class=\"string\">\"nohttp\"</span>:<span class=\"string\">'com.yanzhenjie.nohttp:nohttp:1.1.4'</span>,</div><div class=\"line\">\t]</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>使用时注意事项：</p>\n<ol>\n<li>现在library中的所有appkey(三方)相关的，都由工程根目录下的配置文件<code>config.gradle</code>提供，然后添加到该module的<code>BuildConfig.java</code>文件中，代码中从<code>BuildConfig.java</code>文件中引用</li>\n</ol>\n<p>在<code>config.gradle</code>文件中添加一个三方key值<br><figure class=\"highlight groovy\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">ext&#123;</div><div class=\"line\">\tUMENG_APPKEY = <span class=\"string\">\"************\"</span></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>在module中的<code>build.grale</code>引用<br><figure class=\"highlight groovy\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">def</span> UMENG_APPKEY = rootProject.ext.UMENG_APPKEY</div></pre></td></tr></table></figure></p>\n<p>加入到该module的<code>BuildConfig.java</code>文件</p>\n<figure class=\"highlight groovy\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">defaultConfig&#123;</div><div class=\"line\">\tbuildConfigField <span class=\"string\">\"String\"</span>, <span class=\"string\">\"umeng_analytics_key\"</span>, <span class=\"string\">\"\\\"\"</span> + UMENG_APPKEY + <span class=\"string\">\"\\\"\"</span></div><div class=\"line\">\t&#125;</div></pre></td></tr></table></figure>\n<p>代码中引用<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">BuildConfig.umeng_analytics_key</div></pre></td></tr></table></figure></p>\n<p>这里需要注意的是，import该文件的时候，是从该module的<code>manifest.xml</code>中的跟标签的<code>package</code>属性所指向的包名导入的，如</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">manifest</span> <span class=\"attr\">xmlns:android</span>=<span class=\"string\">\"http://schemas.android.com/apk/res/android\"</span></div><div class=\"line\">\t<span class=\"attr\">package</span>=<span class=\"string\">\"com.huangyuanlove.test\"</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">manifest</span>&gt;</span></div></pre></td></tr></table></figure>\n<p>则<code>BuildConfig.java</code>文件的导入路径为 <code>import com.huangyuanlove.test;</code></p>\n<ol>\n<li>所有使用gradle依赖的三方全部放在根目录的<code>config.gradle</code>文件夹下，其他module引用时可参考下面的配置。如</li>\n</ol>\n<p>需要添加一个新的依赖，在根目录下的 <code>config.gradle</code>文件中</p>\n<figure class=\"highlight groovy\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">ext&#123;</div><div class=\"line\">\tdependencies=[</div><div class=\"line\">\t\t<span class=\"string\">\"newDependency\"</span>:<span class=\"string\">\"dependency\"</span>,</div><div class=\"line\">\t]</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>在其他module中引用</p>\n<figure class=\"highlight groovy\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">def</span> dependency = rootProject.ext.dependencies</div><div class=\"line\">dependencies &#123;</div><div class=\"line\">\tcompile dependency[<span class=\"string\">\"newDependency\"</span>]</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>"},{"title":"通过简单的自定义view来看View的工作流程","date":"2017-03-18T06:54:01.000Z","keywords":"简单自定义View","_content":"\n通过简单的自定义View(画个圆)，来了解一下View的工作流程以及自定义View应该注意的地方。\n<!--more-->\n### 一、自定义View的分类\n#### 1.1 继承View重写onDraw方法\n这种方法主要用于实现一些不规则的效果，比如动态或者静态显示一些不规则的图形，采用这种方式需要自己支持`wrap_content`,并且`padding`需要自己处理.\n#### 1.2 继承ViewGroup派生特殊的Layout\n这种方式主要用于实现自定义布局，如流式布局。采用这种方式需要合适的处理ViewGroup的测量、布局这两个过程，并同时处理子元素的测量和布局过程。\n#### 1.3 继承特定的View(如TextView)\n这种方法一般用于扩展某种已有的`View`的功能，比如`TextView`，这种方法比较容易实现，不需要自己支持`wrap_content`和`padding`。\n#### 1.4 继承特定的ViewGroup\n采用这种方式不需要自己处理`ViewGroup`的测量和布局这两个过程。\n### 二、值得注意的地方\n#### 2.1 让View支持wrap_content\n这是因为直接继承View或者ViewGroup的控件，如果不在`onMeasure`中对`wrap_content`做特殊处理，那么当外界在适用`wrap_content`时就无法达到预期的效果。\n#### 2.2 如果有必要，让View支持padding\n这是因为如果直接继承View，如果不在draw方法中处理padding，那么padding属性是无法起作用的。另外，直接继承自ViewGroup的控件需要在`onMeasure`和`onLayout`中考虑padding和子元素的margin对其造成的影响，不然将导致padding和子元素的margin失效。\n#### 2.3 尽量不要在View中使用Handler，没必要\n因为View内部本身就提供了post系列的方法， 完全可以替代Handler的作用，当然除非你很明确要使用Handler来发送消息\n#### 2.4 及时停止动画和线程\n如果需要停止线程或者动画，可以在`onDetachedFromWindow`方法中处理，当包含此View的Activity退出或者当前View被remove时，View的`onDetachedFromWindow`方法会被调用，和此方法对应的是`onAttachedToWindow`，当包含此View的Activity启动时，View的`onAttachedToWindow`方法会被调用。\n#### 2.5 View带有滑动嵌套情形时，需要处理好滑动冲突\n如果有滑动冲突的话，那么要合适的处理滑动冲突，否则将会严重影响View的效果。\n### 三、自定义View\n#### 3.1 继承View重写onDraw方法\n首先来看一下代码\n``` java\npublic class TestCustomCircleView extends View {\n\n    private int color = Color.RED;\n    private Paint paint;\n    public TestCustomCircleView(Context context) {\n        super(context);\n        init();\n    }\n\n    public TestCustomCircleView(Context context, AttributeSet attrs) {\n        super(context, attrs);\n        init();\n    }\n\n    public TestCustomCircleView(Context context, AttributeSet attrs, int defStyleAttr) {\n        super(context, attrs, defStyleAttr);\n        init();\n    }\n    private void init(){\n        paint = new Paint();\n        paint.setColor(color);\n    }\n\n    @Override\n    protected void onDraw(Canvas canvas) {\n        super.onDraw(canvas);\n        int width = getWidth();\n        int height = getHeight();\n        int radius = Math.min(width,height)/2;\n        canvas.drawCircle(width/2,height/2,radius,paint);\n    }\n}\n```\n上面的代码只是一种初级的实现，当我们进行使用的时候，只支持margin属性，并不支持padding属性。对`onDraw`方法进行修改，只要在绘制的时候考虑一下padding即可。\n```java\n @Override\n    protected void onDraw(Canvas canvas) {\n        super.onDraw(canvas);\n        int paddingLeft = getPaddingLeft();\n        int paddingRight = getPaddingRight();\n        int paddingTop = getPaddingTop();\n        int paddingBottom = getPaddingBottom();\n        int width = getWidth() - paddingLeft - paddingRight;\n        int height = getHeight() - paddingBottom - paddingTop;\n        int radius = Math.min(width, height) / 2;\n        canvas.drawCircle(paddingLeft + width / 2, paddingTop + height / 2, radius, paint);\n    }\n```\n但是现在还不能支持`warp_content`属性，现在使用`wrap_content`和使用`match_parent`没有任何区别：对于直接继承自View的控件，如果不对`wrap_content`做特殊处理，那么使用`wrap_content`就相当于使用`match_parent`.这里就需要我们重写`onMeasure`方法，当宽高属性为`wrap_content`时，取一个默认值。\n```java\n    @Override\n    protected void onMeasure(int widthMeasureSpec, int heightMeasureSpec) {\n        int desiredWidth = 100;\n        int desiredHeight = 100;\n        int widthMode = MeasureSpec.getMode(widthMeasureSpec);\n        int widthSize = MeasureSpec.getSize(widthMeasureSpec);\n        int heightMode = MeasureSpec.getMode(heightMeasureSpec);\n        int heightSize = MeasureSpec.getSize(heightMeasureSpec);\n\n        int width;\n        int height;\n\n        //宽度\n        if (widthMode == MeasureSpec.AT_MOST) {\n            width = Math.min(desiredWidth, widthSize);\n        } else if (widthMode == MeasureSpec.EXACTLY) {\n            width = widthSize;\n        } else {\n            width = desiredWidth;\n        }\n        //高度\n        if (heightMode == MeasureSpec.AT_MOST) {\n            height = Math.min(desiredHeight, heightSize);\n        } else if (heightMode == MeasureSpec.EXACTLY) {\n            height = heightSize;\n        } else {\n            height = desiredHeight;\n        }\n        setMeasuredDimension(width, height);\n    }\n```\n这样，当我们使用wrap_content时，就是使用默认的100px的值。\n### 四、使用自定义属性\n\n#### 4.1 创建自定义的配置文件\n在values目录下面创建自定义属性的XML，比如attrs.xml，也可以选择类似于attrs_circle_view.xml等这种以attrs_开头的文件名，当然这个文件名并没有什么限制，可以随便取名字。我们选择创建attrs.xml文件。\n``` xml\n<resources>\n    <declare-styleable name=\"TestCustomCircleView\">\n        <attr name=\"circle_color\" format=\"color\"/>\n    </declare-styleable>\n</resources>\n```\n#### 4.2 在构造方法中解析自定义的属性值并做相应的处理\n``` java\n    public TestCustomCircleView(Context context, AttributeSet attrs, int defStyleAttr) {\n        super(context, attrs, defStyleAttr);\n        TypedArray typedArray = context.obtainStyledAttributes(attrs, R.styleable.TestCustomCircleView);\n        color = typedArray.getColor(R.styleable.TestCustomCircleView_circle_color,Color.RED);\n        typedArray.recycle();\n        init();\n    }\n```\n首先加载自定义属性集合，接着解析属性集合中`TestCustomCircleView_circle_color`，如果没有指定属性值，则使用`Color.RED`作为默认值。\n#### 4.3 在布局文件中使用自定义属性\n``` xml\n    <com.example.huangyuan.custom.TestCustomCircleView\n        android:layout_width=\"wrap_content\"\n        android:layout_height=\"wrap_content\"\n        android:layout_gravity=\"center_horizontal\"\n        app:circle_color=\"@color/grey\"\n        />\n``` \n","source":"_posts/通过简单的自定义view来看View的工作流程.md","raw":"---\ntitle: 通过简单的自定义view来看View的工作流程\ndate: 2017-03-18 14:54:01\ntags: [Android]\nkeywords: 简单自定义View\n---\n\n通过简单的自定义View(画个圆)，来了解一下View的工作流程以及自定义View应该注意的地方。\n<!--more-->\n### 一、自定义View的分类\n#### 1.1 继承View重写onDraw方法\n这种方法主要用于实现一些不规则的效果，比如动态或者静态显示一些不规则的图形，采用这种方式需要自己支持`wrap_content`,并且`padding`需要自己处理.\n#### 1.2 继承ViewGroup派生特殊的Layout\n这种方式主要用于实现自定义布局，如流式布局。采用这种方式需要合适的处理ViewGroup的测量、布局这两个过程，并同时处理子元素的测量和布局过程。\n#### 1.3 继承特定的View(如TextView)\n这种方法一般用于扩展某种已有的`View`的功能，比如`TextView`，这种方法比较容易实现，不需要自己支持`wrap_content`和`padding`。\n#### 1.4 继承特定的ViewGroup\n采用这种方式不需要自己处理`ViewGroup`的测量和布局这两个过程。\n### 二、值得注意的地方\n#### 2.1 让View支持wrap_content\n这是因为直接继承View或者ViewGroup的控件，如果不在`onMeasure`中对`wrap_content`做特殊处理，那么当外界在适用`wrap_content`时就无法达到预期的效果。\n#### 2.2 如果有必要，让View支持padding\n这是因为如果直接继承View，如果不在draw方法中处理padding，那么padding属性是无法起作用的。另外，直接继承自ViewGroup的控件需要在`onMeasure`和`onLayout`中考虑padding和子元素的margin对其造成的影响，不然将导致padding和子元素的margin失效。\n#### 2.3 尽量不要在View中使用Handler，没必要\n因为View内部本身就提供了post系列的方法， 完全可以替代Handler的作用，当然除非你很明确要使用Handler来发送消息\n#### 2.4 及时停止动画和线程\n如果需要停止线程或者动画，可以在`onDetachedFromWindow`方法中处理，当包含此View的Activity退出或者当前View被remove时，View的`onDetachedFromWindow`方法会被调用，和此方法对应的是`onAttachedToWindow`，当包含此View的Activity启动时，View的`onAttachedToWindow`方法会被调用。\n#### 2.5 View带有滑动嵌套情形时，需要处理好滑动冲突\n如果有滑动冲突的话，那么要合适的处理滑动冲突，否则将会严重影响View的效果。\n### 三、自定义View\n#### 3.1 继承View重写onDraw方法\n首先来看一下代码\n``` java\npublic class TestCustomCircleView extends View {\n\n    private int color = Color.RED;\n    private Paint paint;\n    public TestCustomCircleView(Context context) {\n        super(context);\n        init();\n    }\n\n    public TestCustomCircleView(Context context, AttributeSet attrs) {\n        super(context, attrs);\n        init();\n    }\n\n    public TestCustomCircleView(Context context, AttributeSet attrs, int defStyleAttr) {\n        super(context, attrs, defStyleAttr);\n        init();\n    }\n    private void init(){\n        paint = new Paint();\n        paint.setColor(color);\n    }\n\n    @Override\n    protected void onDraw(Canvas canvas) {\n        super.onDraw(canvas);\n        int width = getWidth();\n        int height = getHeight();\n        int radius = Math.min(width,height)/2;\n        canvas.drawCircle(width/2,height/2,radius,paint);\n    }\n}\n```\n上面的代码只是一种初级的实现，当我们进行使用的时候，只支持margin属性，并不支持padding属性。对`onDraw`方法进行修改，只要在绘制的时候考虑一下padding即可。\n```java\n @Override\n    protected void onDraw(Canvas canvas) {\n        super.onDraw(canvas);\n        int paddingLeft = getPaddingLeft();\n        int paddingRight = getPaddingRight();\n        int paddingTop = getPaddingTop();\n        int paddingBottom = getPaddingBottom();\n        int width = getWidth() - paddingLeft - paddingRight;\n        int height = getHeight() - paddingBottom - paddingTop;\n        int radius = Math.min(width, height) / 2;\n        canvas.drawCircle(paddingLeft + width / 2, paddingTop + height / 2, radius, paint);\n    }\n```\n但是现在还不能支持`warp_content`属性，现在使用`wrap_content`和使用`match_parent`没有任何区别：对于直接继承自View的控件，如果不对`wrap_content`做特殊处理，那么使用`wrap_content`就相当于使用`match_parent`.这里就需要我们重写`onMeasure`方法，当宽高属性为`wrap_content`时，取一个默认值。\n```java\n    @Override\n    protected void onMeasure(int widthMeasureSpec, int heightMeasureSpec) {\n        int desiredWidth = 100;\n        int desiredHeight = 100;\n        int widthMode = MeasureSpec.getMode(widthMeasureSpec);\n        int widthSize = MeasureSpec.getSize(widthMeasureSpec);\n        int heightMode = MeasureSpec.getMode(heightMeasureSpec);\n        int heightSize = MeasureSpec.getSize(heightMeasureSpec);\n\n        int width;\n        int height;\n\n        //宽度\n        if (widthMode == MeasureSpec.AT_MOST) {\n            width = Math.min(desiredWidth, widthSize);\n        } else if (widthMode == MeasureSpec.EXACTLY) {\n            width = widthSize;\n        } else {\n            width = desiredWidth;\n        }\n        //高度\n        if (heightMode == MeasureSpec.AT_MOST) {\n            height = Math.min(desiredHeight, heightSize);\n        } else if (heightMode == MeasureSpec.EXACTLY) {\n            height = heightSize;\n        } else {\n            height = desiredHeight;\n        }\n        setMeasuredDimension(width, height);\n    }\n```\n这样，当我们使用wrap_content时，就是使用默认的100px的值。\n### 四、使用自定义属性\n\n#### 4.1 创建自定义的配置文件\n在values目录下面创建自定义属性的XML，比如attrs.xml，也可以选择类似于attrs_circle_view.xml等这种以attrs_开头的文件名，当然这个文件名并没有什么限制，可以随便取名字。我们选择创建attrs.xml文件。\n``` xml\n<resources>\n    <declare-styleable name=\"TestCustomCircleView\">\n        <attr name=\"circle_color\" format=\"color\"/>\n    </declare-styleable>\n</resources>\n```\n#### 4.2 在构造方法中解析自定义的属性值并做相应的处理\n``` java\n    public TestCustomCircleView(Context context, AttributeSet attrs, int defStyleAttr) {\n        super(context, attrs, defStyleAttr);\n        TypedArray typedArray = context.obtainStyledAttributes(attrs, R.styleable.TestCustomCircleView);\n        color = typedArray.getColor(R.styleable.TestCustomCircleView_circle_color,Color.RED);\n        typedArray.recycle();\n        init();\n    }\n```\n首先加载自定义属性集合，接着解析属性集合中`TestCustomCircleView_circle_color`，如果没有指定属性值，则使用`Color.RED`作为默认值。\n#### 4.3 在布局文件中使用自定义属性\n``` xml\n    <com.example.huangyuan.custom.TestCustomCircleView\n        android:layout_width=\"wrap_content\"\n        android:layout_height=\"wrap_content\"\n        android:layout_gravity=\"center_horizontal\"\n        app:circle_color=\"@color/grey\"\n        />\n``` \n","slug":"通过简单的自定义view来看View的工作流程","published":1,"updated":"2018-08-04T05:19:36.317Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjl3vbtrx003nisdgxube2o7k","content":"<p>通过简单的自定义View(画个圆)，来了解一下View的工作流程以及自定义View应该注意的地方。<br><a id=\"more\"></a></p>\n<h3 id=\"一、自定义View的分类\"><a href=\"#一、自定义View的分类\" class=\"headerlink\" title=\"一、自定义View的分类\"></a>一、自定义View的分类</h3><h4 id=\"1-1-继承View重写onDraw方法\"><a href=\"#1-1-继承View重写onDraw方法\" class=\"headerlink\" title=\"1.1 继承View重写onDraw方法\"></a>1.1 继承View重写onDraw方法</h4><p>这种方法主要用于实现一些不规则的效果，比如动态或者静态显示一些不规则的图形，采用这种方式需要自己支持<code>wrap_content</code>,并且<code>padding</code>需要自己处理.</p>\n<h4 id=\"1-2-继承ViewGroup派生特殊的Layout\"><a href=\"#1-2-继承ViewGroup派生特殊的Layout\" class=\"headerlink\" title=\"1.2 继承ViewGroup派生特殊的Layout\"></a>1.2 继承ViewGroup派生特殊的Layout</h4><p>这种方式主要用于实现自定义布局，如流式布局。采用这种方式需要合适的处理ViewGroup的测量、布局这两个过程，并同时处理子元素的测量和布局过程。</p>\n<h4 id=\"1-3-继承特定的View-如TextView\"><a href=\"#1-3-继承特定的View-如TextView\" class=\"headerlink\" title=\"1.3 继承特定的View(如TextView)\"></a>1.3 继承特定的View(如TextView)</h4><p>这种方法一般用于扩展某种已有的<code>View</code>的功能，比如<code>TextView</code>，这种方法比较容易实现，不需要自己支持<code>wrap_content</code>和<code>padding</code>。</p>\n<h4 id=\"1-4-继承特定的ViewGroup\"><a href=\"#1-4-继承特定的ViewGroup\" class=\"headerlink\" title=\"1.4 继承特定的ViewGroup\"></a>1.4 继承特定的ViewGroup</h4><p>采用这种方式不需要自己处理<code>ViewGroup</code>的测量和布局这两个过程。</p>\n<h3 id=\"二、值得注意的地方\"><a href=\"#二、值得注意的地方\" class=\"headerlink\" title=\"二、值得注意的地方\"></a>二、值得注意的地方</h3><h4 id=\"2-1-让View支持wrap-content\"><a href=\"#2-1-让View支持wrap-content\" class=\"headerlink\" title=\"2.1 让View支持wrap_content\"></a>2.1 让View支持wrap_content</h4><p>这是因为直接继承View或者ViewGroup的控件，如果不在<code>onMeasure</code>中对<code>wrap_content</code>做特殊处理，那么当外界在适用<code>wrap_content</code>时就无法达到预期的效果。</p>\n<h4 id=\"2-2-如果有必要，让View支持padding\"><a href=\"#2-2-如果有必要，让View支持padding\" class=\"headerlink\" title=\"2.2 如果有必要，让View支持padding\"></a>2.2 如果有必要，让View支持padding</h4><p>这是因为如果直接继承View，如果不在draw方法中处理padding，那么padding属性是无法起作用的。另外，直接继承自ViewGroup的控件需要在<code>onMeasure</code>和<code>onLayout</code>中考虑padding和子元素的margin对其造成的影响，不然将导致padding和子元素的margin失效。</p>\n<h4 id=\"2-3-尽量不要在View中使用Handler，没必要\"><a href=\"#2-3-尽量不要在View中使用Handler，没必要\" class=\"headerlink\" title=\"2.3 尽量不要在View中使用Handler，没必要\"></a>2.3 尽量不要在View中使用Handler，没必要</h4><p>因为View内部本身就提供了post系列的方法， 完全可以替代Handler的作用，当然除非你很明确要使用Handler来发送消息</p>\n<h4 id=\"2-4-及时停止动画和线程\"><a href=\"#2-4-及时停止动画和线程\" class=\"headerlink\" title=\"2.4 及时停止动画和线程\"></a>2.4 及时停止动画和线程</h4><p>如果需要停止线程或者动画，可以在<code>onDetachedFromWindow</code>方法中处理，当包含此View的Activity退出或者当前View被remove时，View的<code>onDetachedFromWindow</code>方法会被调用，和此方法对应的是<code>onAttachedToWindow</code>，当包含此View的Activity启动时，View的<code>onAttachedToWindow</code>方法会被调用。</p>\n<h4 id=\"2-5-View带有滑动嵌套情形时，需要处理好滑动冲突\"><a href=\"#2-5-View带有滑动嵌套情形时，需要处理好滑动冲突\" class=\"headerlink\" title=\"2.5 View带有滑动嵌套情形时，需要处理好滑动冲突\"></a>2.5 View带有滑动嵌套情形时，需要处理好滑动冲突</h4><p>如果有滑动冲突的话，那么要合适的处理滑动冲突，否则将会严重影响View的效果。</p>\n<h3 id=\"三、自定义View\"><a href=\"#三、自定义View\" class=\"headerlink\" title=\"三、自定义View\"></a>三、自定义View</h3><h4 id=\"3-1-继承View重写onDraw方法\"><a href=\"#3-1-继承View重写onDraw方法\" class=\"headerlink\" title=\"3.1 继承View重写onDraw方法\"></a>3.1 继承View重写onDraw方法</h4><p>首先来看一下代码<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">TestCustomCircleView</span> <span class=\"keyword\">extends</span> <span class=\"title\">View</span> </span>&#123;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">int</span> color = Color.RED;</div><div class=\"line\">    <span class=\"keyword\">private</span> Paint paint;</div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">TestCustomCircleView</span><span class=\"params\">(Context context)</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">super</span>(context);</div><div class=\"line\">        init();</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">TestCustomCircleView</span><span class=\"params\">(Context context, AttributeSet attrs)</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">super</span>(context, attrs);</div><div class=\"line\">        init();</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">TestCustomCircleView</span><span class=\"params\">(Context context, AttributeSet attrs, <span class=\"keyword\">int</span> defStyleAttr)</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">super</span>(context, attrs, defStyleAttr);</div><div class=\"line\">        init();</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">init</span><span class=\"params\">()</span></span>&#123;</div><div class=\"line\">        paint = <span class=\"keyword\">new</span> Paint();</div><div class=\"line\">        paint.setColor(color);</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"meta\">@Override</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title\">onDraw</span><span class=\"params\">(Canvas canvas)</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">super</span>.onDraw(canvas);</div><div class=\"line\">        <span class=\"keyword\">int</span> width = getWidth();</div><div class=\"line\">        <span class=\"keyword\">int</span> height = getHeight();</div><div class=\"line\">        <span class=\"keyword\">int</span> radius = Math.min(width,height)/<span class=\"number\">2</span>;</div><div class=\"line\">        canvas.drawCircle(width/<span class=\"number\">2</span>,height/<span class=\"number\">2</span>,radius,paint);</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>上面的代码只是一种初级的实现，当我们进行使用的时候，只支持margin属性，并不支持padding属性。对<code>onDraw</code>方法进行修改，只要在绘制的时候考虑一下padding即可。<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">@Override</span></div><div class=\"line\">   <span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title\">onDraw</span><span class=\"params\">(Canvas canvas)</span> </span>&#123;</div><div class=\"line\">       <span class=\"keyword\">super</span>.onDraw(canvas);</div><div class=\"line\">       <span class=\"keyword\">int</span> paddingLeft = getPaddingLeft();</div><div class=\"line\">       <span class=\"keyword\">int</span> paddingRight = getPaddingRight();</div><div class=\"line\">       <span class=\"keyword\">int</span> paddingTop = getPaddingTop();</div><div class=\"line\">       <span class=\"keyword\">int</span> paddingBottom = getPaddingBottom();</div><div class=\"line\">       <span class=\"keyword\">int</span> width = getWidth() - paddingLeft - paddingRight;</div><div class=\"line\">       <span class=\"keyword\">int</span> height = getHeight() - paddingBottom - paddingTop;</div><div class=\"line\">       <span class=\"keyword\">int</span> radius = Math.min(width, height) / <span class=\"number\">2</span>;</div><div class=\"line\">       canvas.drawCircle(paddingLeft + width / <span class=\"number\">2</span>, paddingTop + height / <span class=\"number\">2</span>, radius, paint);</div><div class=\"line\">   &#125;</div></pre></td></tr></table></figure></p>\n<p>但是现在还不能支持<code>warp_content</code>属性，现在使用<code>wrap_content</code>和使用<code>match_parent</code>没有任何区别：对于直接继承自View的控件，如果不对<code>wrap_content</code>做特殊处理，那么使用<code>wrap_content</code>就相当于使用<code>match_parent</code>.这里就需要我们重写<code>onMeasure</code>方法，当宽高属性为<code>wrap_content</code>时，取一个默认值。<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">@Override</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title\">onMeasure</span><span class=\"params\">(<span class=\"keyword\">int</span> widthMeasureSpec, <span class=\"keyword\">int</span> heightMeasureSpec)</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">int</span> desiredWidth = <span class=\"number\">100</span>;</div><div class=\"line\">    <span class=\"keyword\">int</span> desiredHeight = <span class=\"number\">100</span>;</div><div class=\"line\">    <span class=\"keyword\">int</span> widthMode = MeasureSpec.getMode(widthMeasureSpec);</div><div class=\"line\">    <span class=\"keyword\">int</span> widthSize = MeasureSpec.getSize(widthMeasureSpec);</div><div class=\"line\">    <span class=\"keyword\">int</span> heightMode = MeasureSpec.getMode(heightMeasureSpec);</div><div class=\"line\">    <span class=\"keyword\">int</span> heightSize = MeasureSpec.getSize(heightMeasureSpec);</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">int</span> width;</div><div class=\"line\">    <span class=\"keyword\">int</span> height;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">//宽度</span></div><div class=\"line\">    <span class=\"keyword\">if</span> (widthMode == MeasureSpec.AT_MOST) &#123;</div><div class=\"line\">        width = Math.min(desiredWidth, widthSize);</div><div class=\"line\">    &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (widthMode == MeasureSpec.EXACTLY) &#123;</div><div class=\"line\">        width = widthSize;</div><div class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">        width = desiredWidth;</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"comment\">//高度</span></div><div class=\"line\">    <span class=\"keyword\">if</span> (heightMode == MeasureSpec.AT_MOST) &#123;</div><div class=\"line\">        height = Math.min(desiredHeight, heightSize);</div><div class=\"line\">    &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (heightMode == MeasureSpec.EXACTLY) &#123;</div><div class=\"line\">        height = heightSize;</div><div class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">        height = desiredHeight;</div><div class=\"line\">    &#125;</div><div class=\"line\">    setMeasuredDimension(width, height);</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>这样，当我们使用wrap_content时，就是使用默认的100px的值。</p>\n<h3 id=\"四、使用自定义属性\"><a href=\"#四、使用自定义属性\" class=\"headerlink\" title=\"四、使用自定义属性\"></a>四、使用自定义属性</h3><h4 id=\"4-1-创建自定义的配置文件\"><a href=\"#4-1-创建自定义的配置文件\" class=\"headerlink\" title=\"4.1 创建自定义的配置文件\"></a>4.1 创建自定义的配置文件</h4><p>在values目录下面创建自定义属性的XML，比如attrs.xml，也可以选择类似于attrs_circle<em>view.xml等这种以attrs</em>开头的文件名，当然这个文件名并没有什么限制，可以随便取名字。我们选择创建attrs.xml文件。<br><figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">resources</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">declare-styleable</span> <span class=\"attr\">name</span>=<span class=\"string\">\"TestCustomCircleView\"</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">attr</span> <span class=\"attr\">name</span>=<span class=\"string\">\"circle_color\"</span> <span class=\"attr\">format</span>=<span class=\"string\">\"color\"</span>/&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">declare-styleable</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">resources</span>&gt;</span></div></pre></td></tr></table></figure></p>\n<h4 id=\"4-2-在构造方法中解析自定义的属性值并做相应的处理\"><a href=\"#4-2-在构造方法中解析自定义的属性值并做相应的处理\" class=\"headerlink\" title=\"4.2 在构造方法中解析自定义的属性值并做相应的处理\"></a>4.2 在构造方法中解析自定义的属性值并做相应的处理</h4><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">TestCustomCircleView</span><span class=\"params\">(Context context, AttributeSet attrs, <span class=\"keyword\">int</span> defStyleAttr)</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">super</span>(context, attrs, defStyleAttr);</div><div class=\"line\">    TypedArray typedArray = context.obtainStyledAttributes(attrs, R.styleable.TestCustomCircleView);</div><div class=\"line\">    color = typedArray.getColor(R.styleable.TestCustomCircleView_circle_color,Color.RED);</div><div class=\"line\">    typedArray.recycle();</div><div class=\"line\">    init();</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>首先加载自定义属性集合，接着解析属性集合中<code>TestCustomCircleView_circle_color</code>，如果没有指定属性值，则使用<code>Color.RED</code>作为默认值。</p>\n<h4 id=\"4-3-在布局文件中使用自定义属性\"><a href=\"#4-3-在布局文件中使用自定义属性\" class=\"headerlink\" title=\"4.3 在布局文件中使用自定义属性\"></a>4.3 在布局文件中使用自定义属性</h4><pre><code class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">com.example.huangyuan.custom.TestCustomCircleView</span>\n    <span class=\"attr\">android:layout_width</span>=<span class=\"string\">\"wrap_content\"</span>\n    <span class=\"attr\">android:layout_height</span>=<span class=\"string\">\"wrap_content\"</span>\n    <span class=\"attr\">android:layout_gravity</span>=<span class=\"string\">\"center_horizontal\"</span>\n    <span class=\"attr\">app:circle_color</span>=<span class=\"string\">\"@color/grey\"</span>\n    /&gt;</span>\n</code></pre>\n","excerpt":"<p>通过简单的自定义View(画个圆)，来了解一下View的工作流程以及自定义View应该注意的地方。<br>","more":"</p>\n<h3 id=\"一、自定义View的分类\"><a href=\"#一、自定义View的分类\" class=\"headerlink\" title=\"一、自定义View的分类\"></a>一、自定义View的分类</h3><h4 id=\"1-1-继承View重写onDraw方法\"><a href=\"#1-1-继承View重写onDraw方法\" class=\"headerlink\" title=\"1.1 继承View重写onDraw方法\"></a>1.1 继承View重写onDraw方法</h4><p>这种方法主要用于实现一些不规则的效果，比如动态或者静态显示一些不规则的图形，采用这种方式需要自己支持<code>wrap_content</code>,并且<code>padding</code>需要自己处理.</p>\n<h4 id=\"1-2-继承ViewGroup派生特殊的Layout\"><a href=\"#1-2-继承ViewGroup派生特殊的Layout\" class=\"headerlink\" title=\"1.2 继承ViewGroup派生特殊的Layout\"></a>1.2 继承ViewGroup派生特殊的Layout</h4><p>这种方式主要用于实现自定义布局，如流式布局。采用这种方式需要合适的处理ViewGroup的测量、布局这两个过程，并同时处理子元素的测量和布局过程。</p>\n<h4 id=\"1-3-继承特定的View-如TextView\"><a href=\"#1-3-继承特定的View-如TextView\" class=\"headerlink\" title=\"1.3 继承特定的View(如TextView)\"></a>1.3 继承特定的View(如TextView)</h4><p>这种方法一般用于扩展某种已有的<code>View</code>的功能，比如<code>TextView</code>，这种方法比较容易实现，不需要自己支持<code>wrap_content</code>和<code>padding</code>。</p>\n<h4 id=\"1-4-继承特定的ViewGroup\"><a href=\"#1-4-继承特定的ViewGroup\" class=\"headerlink\" title=\"1.4 继承特定的ViewGroup\"></a>1.4 继承特定的ViewGroup</h4><p>采用这种方式不需要自己处理<code>ViewGroup</code>的测量和布局这两个过程。</p>\n<h3 id=\"二、值得注意的地方\"><a href=\"#二、值得注意的地方\" class=\"headerlink\" title=\"二、值得注意的地方\"></a>二、值得注意的地方</h3><h4 id=\"2-1-让View支持wrap-content\"><a href=\"#2-1-让View支持wrap-content\" class=\"headerlink\" title=\"2.1 让View支持wrap_content\"></a>2.1 让View支持wrap_content</h4><p>这是因为直接继承View或者ViewGroup的控件，如果不在<code>onMeasure</code>中对<code>wrap_content</code>做特殊处理，那么当外界在适用<code>wrap_content</code>时就无法达到预期的效果。</p>\n<h4 id=\"2-2-如果有必要，让View支持padding\"><a href=\"#2-2-如果有必要，让View支持padding\" class=\"headerlink\" title=\"2.2 如果有必要，让View支持padding\"></a>2.2 如果有必要，让View支持padding</h4><p>这是因为如果直接继承View，如果不在draw方法中处理padding，那么padding属性是无法起作用的。另外，直接继承自ViewGroup的控件需要在<code>onMeasure</code>和<code>onLayout</code>中考虑padding和子元素的margin对其造成的影响，不然将导致padding和子元素的margin失效。</p>\n<h4 id=\"2-3-尽量不要在View中使用Handler，没必要\"><a href=\"#2-3-尽量不要在View中使用Handler，没必要\" class=\"headerlink\" title=\"2.3 尽量不要在View中使用Handler，没必要\"></a>2.3 尽量不要在View中使用Handler，没必要</h4><p>因为View内部本身就提供了post系列的方法， 完全可以替代Handler的作用，当然除非你很明确要使用Handler来发送消息</p>\n<h4 id=\"2-4-及时停止动画和线程\"><a href=\"#2-4-及时停止动画和线程\" class=\"headerlink\" title=\"2.4 及时停止动画和线程\"></a>2.4 及时停止动画和线程</h4><p>如果需要停止线程或者动画，可以在<code>onDetachedFromWindow</code>方法中处理，当包含此View的Activity退出或者当前View被remove时，View的<code>onDetachedFromWindow</code>方法会被调用，和此方法对应的是<code>onAttachedToWindow</code>，当包含此View的Activity启动时，View的<code>onAttachedToWindow</code>方法会被调用。</p>\n<h4 id=\"2-5-View带有滑动嵌套情形时，需要处理好滑动冲突\"><a href=\"#2-5-View带有滑动嵌套情形时，需要处理好滑动冲突\" class=\"headerlink\" title=\"2.5 View带有滑动嵌套情形时，需要处理好滑动冲突\"></a>2.5 View带有滑动嵌套情形时，需要处理好滑动冲突</h4><p>如果有滑动冲突的话，那么要合适的处理滑动冲突，否则将会严重影响View的效果。</p>\n<h3 id=\"三、自定义View\"><a href=\"#三、自定义View\" class=\"headerlink\" title=\"三、自定义View\"></a>三、自定义View</h3><h4 id=\"3-1-继承View重写onDraw方法\"><a href=\"#3-1-继承View重写onDraw方法\" class=\"headerlink\" title=\"3.1 继承View重写onDraw方法\"></a>3.1 继承View重写onDraw方法</h4><p>首先来看一下代码<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">TestCustomCircleView</span> <span class=\"keyword\">extends</span> <span class=\"title\">View</span> </span>&#123;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">int</span> color = Color.RED;</div><div class=\"line\">    <span class=\"keyword\">private</span> Paint paint;</div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">TestCustomCircleView</span><span class=\"params\">(Context context)</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">super</span>(context);</div><div class=\"line\">        init();</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">TestCustomCircleView</span><span class=\"params\">(Context context, AttributeSet attrs)</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">super</span>(context, attrs);</div><div class=\"line\">        init();</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">TestCustomCircleView</span><span class=\"params\">(Context context, AttributeSet attrs, <span class=\"keyword\">int</span> defStyleAttr)</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">super</span>(context, attrs, defStyleAttr);</div><div class=\"line\">        init();</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">init</span><span class=\"params\">()</span></span>&#123;</div><div class=\"line\">        paint = <span class=\"keyword\">new</span> Paint();</div><div class=\"line\">        paint.setColor(color);</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"meta\">@Override</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title\">onDraw</span><span class=\"params\">(Canvas canvas)</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">super</span>.onDraw(canvas);</div><div class=\"line\">        <span class=\"keyword\">int</span> width = getWidth();</div><div class=\"line\">        <span class=\"keyword\">int</span> height = getHeight();</div><div class=\"line\">        <span class=\"keyword\">int</span> radius = Math.min(width,height)/<span class=\"number\">2</span>;</div><div class=\"line\">        canvas.drawCircle(width/<span class=\"number\">2</span>,height/<span class=\"number\">2</span>,radius,paint);</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>上面的代码只是一种初级的实现，当我们进行使用的时候，只支持margin属性，并不支持padding属性。对<code>onDraw</code>方法进行修改，只要在绘制的时候考虑一下padding即可。<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">@Override</span></div><div class=\"line\">   <span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title\">onDraw</span><span class=\"params\">(Canvas canvas)</span> </span>&#123;</div><div class=\"line\">       <span class=\"keyword\">super</span>.onDraw(canvas);</div><div class=\"line\">       <span class=\"keyword\">int</span> paddingLeft = getPaddingLeft();</div><div class=\"line\">       <span class=\"keyword\">int</span> paddingRight = getPaddingRight();</div><div class=\"line\">       <span class=\"keyword\">int</span> paddingTop = getPaddingTop();</div><div class=\"line\">       <span class=\"keyword\">int</span> paddingBottom = getPaddingBottom();</div><div class=\"line\">       <span class=\"keyword\">int</span> width = getWidth() - paddingLeft - paddingRight;</div><div class=\"line\">       <span class=\"keyword\">int</span> height = getHeight() - paddingBottom - paddingTop;</div><div class=\"line\">       <span class=\"keyword\">int</span> radius = Math.min(width, height) / <span class=\"number\">2</span>;</div><div class=\"line\">       canvas.drawCircle(paddingLeft + width / <span class=\"number\">2</span>, paddingTop + height / <span class=\"number\">2</span>, radius, paint);</div><div class=\"line\">   &#125;</div></pre></td></tr></table></figure></p>\n<p>但是现在还不能支持<code>warp_content</code>属性，现在使用<code>wrap_content</code>和使用<code>match_parent</code>没有任何区别：对于直接继承自View的控件，如果不对<code>wrap_content</code>做特殊处理，那么使用<code>wrap_content</code>就相当于使用<code>match_parent</code>.这里就需要我们重写<code>onMeasure</code>方法，当宽高属性为<code>wrap_content</code>时，取一个默认值。<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">@Override</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title\">onMeasure</span><span class=\"params\">(<span class=\"keyword\">int</span> widthMeasureSpec, <span class=\"keyword\">int</span> heightMeasureSpec)</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">int</span> desiredWidth = <span class=\"number\">100</span>;</div><div class=\"line\">    <span class=\"keyword\">int</span> desiredHeight = <span class=\"number\">100</span>;</div><div class=\"line\">    <span class=\"keyword\">int</span> widthMode = MeasureSpec.getMode(widthMeasureSpec);</div><div class=\"line\">    <span class=\"keyword\">int</span> widthSize = MeasureSpec.getSize(widthMeasureSpec);</div><div class=\"line\">    <span class=\"keyword\">int</span> heightMode = MeasureSpec.getMode(heightMeasureSpec);</div><div class=\"line\">    <span class=\"keyword\">int</span> heightSize = MeasureSpec.getSize(heightMeasureSpec);</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">int</span> width;</div><div class=\"line\">    <span class=\"keyword\">int</span> height;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">//宽度</span></div><div class=\"line\">    <span class=\"keyword\">if</span> (widthMode == MeasureSpec.AT_MOST) &#123;</div><div class=\"line\">        width = Math.min(desiredWidth, widthSize);</div><div class=\"line\">    &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (widthMode == MeasureSpec.EXACTLY) &#123;</div><div class=\"line\">        width = widthSize;</div><div class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">        width = desiredWidth;</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"comment\">//高度</span></div><div class=\"line\">    <span class=\"keyword\">if</span> (heightMode == MeasureSpec.AT_MOST) &#123;</div><div class=\"line\">        height = Math.min(desiredHeight, heightSize);</div><div class=\"line\">    &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (heightMode == MeasureSpec.EXACTLY) &#123;</div><div class=\"line\">        height = heightSize;</div><div class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">        height = desiredHeight;</div><div class=\"line\">    &#125;</div><div class=\"line\">    setMeasuredDimension(width, height);</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>这样，当我们使用wrap_content时，就是使用默认的100px的值。</p>\n<h3 id=\"四、使用自定义属性\"><a href=\"#四、使用自定义属性\" class=\"headerlink\" title=\"四、使用自定义属性\"></a>四、使用自定义属性</h3><h4 id=\"4-1-创建自定义的配置文件\"><a href=\"#4-1-创建自定义的配置文件\" class=\"headerlink\" title=\"4.1 创建自定义的配置文件\"></a>4.1 创建自定义的配置文件</h4><p>在values目录下面创建自定义属性的XML，比如attrs.xml，也可以选择类似于attrs_circle<em>view.xml等这种以attrs</em>开头的文件名，当然这个文件名并没有什么限制，可以随便取名字。我们选择创建attrs.xml文件。<br><figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">resources</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">declare-styleable</span> <span class=\"attr\">name</span>=<span class=\"string\">\"TestCustomCircleView\"</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">attr</span> <span class=\"attr\">name</span>=<span class=\"string\">\"circle_color\"</span> <span class=\"attr\">format</span>=<span class=\"string\">\"color\"</span>/&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">declare-styleable</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">resources</span>&gt;</span></div></pre></td></tr></table></figure></p>\n<h4 id=\"4-2-在构造方法中解析自定义的属性值并做相应的处理\"><a href=\"#4-2-在构造方法中解析自定义的属性值并做相应的处理\" class=\"headerlink\" title=\"4.2 在构造方法中解析自定义的属性值并做相应的处理\"></a>4.2 在构造方法中解析自定义的属性值并做相应的处理</h4><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">TestCustomCircleView</span><span class=\"params\">(Context context, AttributeSet attrs, <span class=\"keyword\">int</span> defStyleAttr)</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">super</span>(context, attrs, defStyleAttr);</div><div class=\"line\">    TypedArray typedArray = context.obtainStyledAttributes(attrs, R.styleable.TestCustomCircleView);</div><div class=\"line\">    color = typedArray.getColor(R.styleable.TestCustomCircleView_circle_color,Color.RED);</div><div class=\"line\">    typedArray.recycle();</div><div class=\"line\">    init();</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>首先加载自定义属性集合，接着解析属性集合中<code>TestCustomCircleView_circle_color</code>，如果没有指定属性值，则使用<code>Color.RED</code>作为默认值。</p>\n<h4 id=\"4-3-在布局文件中使用自定义属性\"><a href=\"#4-3-在布局文件中使用自定义属性\" class=\"headerlink\" title=\"4.3 在布局文件中使用自定义属性\"></a>4.3 在布局文件中使用自定义属性</h4><pre><code class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">com.example.huangyuan.custom.TestCustomCircleView</span>\n    <span class=\"attr\">android:layout_width</span>=<span class=\"string\">\"wrap_content\"</span>\n    <span class=\"attr\">android:layout_height</span>=<span class=\"string\">\"wrap_content\"</span>\n    <span class=\"attr\">android:layout_gravity</span>=<span class=\"string\">\"center_horizontal\"</span>\n    <span class=\"attr\">app:circle_color</span>=<span class=\"string\">\"@color/grey\"</span>\n    /&gt;</span>\n</code></pre>"},{"title":"面试总结","date":"2018-06-03T06:30:54.000Z","keywords":"面试总结","_content":"最近的面试过程中遇到的面试题，涉及的方面比较广泛，大致分成了一下几个方面：\n操作系统、Java、Android、计算机网络、其他(kotlin、react、安全之类的)。\n<!-- more -->\n\n### 操作系统相关：\n\n#### 进程和线程的区别 \n> * 进程是资源的分配和调度的一个独立单元，而线程是CPU调度的基本单元 \n> * 同一个进程中可以包括多个线程，并且线程共享整个进程的资源（寄存器、堆栈、上下文），一个进行至少包括一个线程。\n> * 进程的创建调用fork或者vfork，而线程的创建调用pthread_create，进程结束后它拥有的所有线程都将销毁，而线程的结束不会影响同个进程中的其他线程的结束\n> * 线程是轻两级的进程，它的创建和销毁所需要的时间比进程小很多，所有操作系统中的执行功能都是创建线程去完成的\n> * 线程中执行时一般都要进行同步和互斥，因为他们共享同一进程的所有资源\n> * 线程有自己的私有属性TCB，线程id，寄存器、硬件上下文，而进程也有自己的私有属性进程控制块PCB，这些私有属性是不被共享的，用来标示一个进程或一个线程的标志\n\n#### 线程调度算法 \n> * SCHED_OTHER：普通任务调度策略。\n> * SCHED_FIFO：实时任务调度策略，先到先服务。一旦占用cpu则一直运行，直到有更高优先级任务到达或自己放弃。\n> * SCHED_RR：实时任务调度策略，时间片轮转。当任务的时间片用完，系统将重新分配时间片，并置于就绪队列尾。放在队列尾\n>具体涉及到N多内容，自行搜索\n\n#### 内存页面置换算法 \n为提高内存利用率，解决内存供不应求的问题，更加合理的使用内存，人们创造了分页式内存抽象。同时有一个虚拟内存的概念，是指将内存中暂时不需要的部分写入硬盘，看上去硬盘扩展了内存的容量，所以叫做“虚拟”内存。使用虚拟内存，应用程序可以使用比实际物理内存更大的内存空间。可以认为这个更大的内存空间就在硬盘上，只有将某一部分需要被用到时，才被写入真实内存；当它暂时不再被用到时，又被写回硬盘。分页式内存管理将物理内存分为等大的小块，每块大小通常为1K、2K、4K等，称为页帧；逻辑内存（使用虚拟内存技术扩大的内存，可认为其位于硬盘上）也被分为等大的小块，称为页；且页和页帧的大小一定是一样的，它是写入真实内存和写回硬盘最小单位。\n> ** Optimal算法（最优算法） **\n　　从内存中移除永远都不再需要的页面或者说是未来最长时间内不再被访问的页面，如果这样的页面存在，则选择最长时间不需要访问的页面。采用最佳置换算法，可以保证较低的页面更新频率。从理论上讲，由于无法预知哪一个页面是未来最长时间内不再被访问的，因而该算法无法实现，但是可用来衡量其他算法。\n\n> ** FIFO（First-In First-Out，先进先出）算法 **\n    该算法总是淘汰最早进入内存的页面，即选择在内存中停留时间最久的页面予以淘汰。\n　　这个算法的实现简单，只需要将进程已调入内存中的页面，按照先后顺序连接成一个队列，设置一个替换指针，总是指向最老的页面。\n　　但是该算法与进程实际的规律并不相适应，因为在进程中，有些页面经常被访问，比如：含有全局变量、常用函数、例程等的页面，FIFO不能保证这些页面不会被淘汰。\n　　正是由于没有考虑页面的重要性的问题，FIFO算法很容易将重要的页换出内存。\n\n> ** Second Chance（第二次机会）算法 **\n　　为了避免FIFO算法将重要的页换出内存，Second Chance算法提供了一些改进。Second Chance算法在将页面换出内存前检查其使用位，如果其使用位为1，证明此页最近有被使用，猜测它还可能被使用，于是不把它置换出内存，但是把其使用位置为0，随后检查下一个页面，直到发现某页的使用位为0，将此页置换出内存。\n\n> ** LRU（Least Recent Used, 最近最少使用）算法 **\n　　在之前的FIFO算法中，依据的是各个页面调入内存的时间，这并不能反映页面的真实使用情况。而LRU（Latest Recently Used）是根据页面调入内存之后的使用情况。由于无法预测页面未来的情况，所以只能利用“最近的过去”来作为预测未来的方法，LRU选择的是最近最久未使用的页面予以淘汰。\n　　该算法赋予每个页面一个访问字段，用来记录一个页面从上次被访问以来所经历的时间t，当需要淘汰一个页面的时候，选择现有页面中t的值最大的页面进行淘汰。\n　　LRU是一种优秀的页面置换算法，但是需要硬件的支持，为了了解一个进程在内存中各个页面各有多少时间未被进程访问，以及如何快速地知道哪一个页面是最近最久未使用的页面，需要 寄存器+栈 来支持。\n\n### java相关：\n#### synchronized 和Lock的区别 以及实现原理\n>   教科书式的应试回答：\n    主要相同点：Lock能完成synchronized所实现的所有功能\n    主要不同点：Lock有比synchronized更精确的线程语义和更好的性能。synchronized会自动释放锁，而Lock一定要求程序员手工释放，并且必须在finally从句中释放。\n\n| 类别 | synchronized | synchronized | \n|: - :| :-: | : -: | \n| 存在层次 | Java的关键字，在jvm层面上 | 是一个类|\n| 锁的释放 | 1、以获取锁的线程执行完同步代码，释放锁 2、线程执行发生异常，jvm会让线程释放锁\t| 在finally中必须释放锁，不然容易造成线程死锁 |\n| 锁的获取 | 假设A线程获得锁，B线程等待。如果A线程阻塞，B线程会一直等待\t| 分情况而定，Lock有多个锁获取的方式，具体下面会说道，大致就是可以尝试获得锁，线程可以不用一直等待|\n| 锁状态 | 无法判断\t| 可以判断|\n| 锁类型 | 可重入 不可中断 非公平 | 可重入 可判断 可公平（两者皆可）|\n|性能 | 少量同步 | 大量同步|\n关于同步类(java.util.concurrent包下)的介绍可以看这个 http://blog.huangyuanlove.com/2018/03/20/Java%E5%B9%B6%E5%8F%91%E5%A4%9A%E7%BA%BF%E7%A8%8B%E5%90%8C%E6%AD%A5/#more\n关于Lock的底层实现可以看这篇：https://blog.csdn.net/Luxia_24/article/details/52403033\n关于synchronized可以看这篇 https://blog.csdn.net/u012403290/article/details/64910926?locationNum=11&fps=1\n\n#### Map、Set、List区别\n这个自己翻一下源码看一下就好\nMap-> HashMap(存入数据的过程，hash冲突了怎么办),TreeMap,LinkedHashMap\nSet-> 使用Map实现的，set中存放的数据对应map中的key，value是内部的一个object字段\nlist-> ArrayList(数组),LinkedList(链表)区别，优缺点\n\n#### Java虚拟机\n这个主要是问内存区域，垃圾回收算法，可以参考这里：\nJVM-内存分配与回收策略 http://blog.huangyuanlove.com/2017/04/07/JVM-%E5%86%85%E5%AD%98%E5%88%86%E9%85%8D%E4%B8%8E%E5%9B%9E%E6%94%B6%E7%AD%96%E7%95%A5/\nJVM-垃圾收集算法与实现  http://blog.huangyuanlove.com/2017/03/30/JVM-%E5%9E%83%E5%9C%BE%E6%94%B6%E9%9B%86%E7%AE%97%E6%B3%95/\nJVM垃圾回收-对象已死？ http://blog.huangyuanlove.com/2017/03/29/JVM%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6-%E5%AF%B9%E8%B1%A1%E5%B7%B2%E6%AD%BB%EF%BC%9F/\nJVM内存区域 http://blog.huangyuanlove.com/2017/03/27/JVM%E5%86%85%E5%AD%98%E5%8C%BA%E5%9F%9F/\n\n#### 捕获子线程异常\n``` java\nnew Thread().setUncaughtExceptionHandler(new Thread.UncaughtExceptionHandler() {\n           @Override\n           public void uncaughtException(Thread t, Throwable e) {\n               \n           }\n       });\nThread.setDefaultUncaughtExceptionHandler(new Thread.UncaughtExceptionHandler() {\n           @Override\n           public void uncaughtException(Thread t, Throwable e) {\n\n           }\n       });\n```\n如果一个线程没有显式的设置它的UncaughtExceptionHandler，JVM就会检查该线程所在的线程组是否设置了UncaughtExceptionHandler，如果已经设置，就是用该UncaughtExceptionHandler；否则查看是否在Thread层面通过静态方法setDefaultUncaughtExceptionHandler()设置了UncaughtExceptionHandler，如果已经设置就是用该UncaughtExceptionHandler；如果上述都没有找到，JVM会在对应的console中打印异常的堆栈信息。\n具体情况可以看一下Java并发编程的艺术\n\n#### 线程池 \n这是个大坑，看源码吧ThreadPoolExecutor.java，还有就是常见线程池的比较。\n\n#### 单例模式 线程安全\n单例的模式的N种写法，像什么double check、懒汉模式、静态内部类，还有就是枚举方式。这里会引出来`volatile`关键字，然后就是线程安全的问题。\n\n\n### Android相关：\n#### 多进程写sp的问题\n还是线程安全的问题，因为SP不支持两个进程同事去执行写操作，否则会导致一定几率的数据丢失，这是因为SP底层通过读写xml文件来实现的，并发写显然是有问题的\n#### sp底层实现\n读写xml文件\n#### Activity和Fragment生命周期,生命周期函数是谁调用的\n声明周期函数是由ActivityThread调度的，具体逻辑封装在Instrumentation类里面。具体读一下这两个类就好。\n#### Activity启动模式，启动过程\n单独开了一篇博客http://blog.huangyuanlove.com/2018/07/26/Activity%E5%90%AF%E5%8A%A8%E6%A8%A1%E5%BC%8F%EF%BC%8C%E5%90%AF%E5%8A%A8%E8%BF%87%E7%A8%8B/#more\n\n#### View点击事件分发流程\nView事件分发：http://blog.huangyuanlove.com/2018/07/29/View事件分发/#more\n\n#### View绘制过程\nView绘制过程：http://blog.huangyuanlove.com//2018/07/29/View绘制过程/#more\n\n#### Handler\nAndroid的消息机制:  http://blog.huangyuanlove.com/2017/03/23/Android%E7%9A%84%E6%B6%88%E6%81%AF%E6%9C%BA%E5%88%B6/#more\n\n#### 省电优化  \n不打扰系统休眠（不监听电量变化等，三方的可以hook  oop  hook住oncreat） \n不做不必要的动作（界面后台要停止动画）\n\n\n#### 广播的底层实现（binder）\nAndroid 广播 ：http://blog.huangyuanlove.com/2018/07/31/Android%E5%B9%BF%E6%92%AD/\n\n\n### 计算机网络相关：\n#### websocket为什么能保持长连接\n#### http、tcp/udp、tcp怎么解决拥塞、滑动窗口、udp\n这个可以看谢希仁的《计算机网络》第六版，tcp:http://blog.huangyuanlove.com/2017/07/03/TCP%E5%8D%8F%E8%AE%AE%E7%9A%84%E7%AE%80%E5%8D%95%E7%90%86%E8%A7%A3/#more 这里简单的记录了一下比较重要的东西。\n\n### 其他：\n\n加固原理 加的什么壳\nkt var  val区别  when中的 is  in\n\n","source":"_posts/面试总结.md","raw":"---\ntitle: 面试总结\ndate: 2018-06-03 14:30:54\ntags: [Android,面试]\nkeywords: 面试总结\n---\n最近的面试过程中遇到的面试题，涉及的方面比较广泛，大致分成了一下几个方面：\n操作系统、Java、Android、计算机网络、其他(kotlin、react、安全之类的)。\n<!-- more -->\n\n### 操作系统相关：\n\n#### 进程和线程的区别 \n> * 进程是资源的分配和调度的一个独立单元，而线程是CPU调度的基本单元 \n> * 同一个进程中可以包括多个线程，并且线程共享整个进程的资源（寄存器、堆栈、上下文），一个进行至少包括一个线程。\n> * 进程的创建调用fork或者vfork，而线程的创建调用pthread_create，进程结束后它拥有的所有线程都将销毁，而线程的结束不会影响同个进程中的其他线程的结束\n> * 线程是轻两级的进程，它的创建和销毁所需要的时间比进程小很多，所有操作系统中的执行功能都是创建线程去完成的\n> * 线程中执行时一般都要进行同步和互斥，因为他们共享同一进程的所有资源\n> * 线程有自己的私有属性TCB，线程id，寄存器、硬件上下文，而进程也有自己的私有属性进程控制块PCB，这些私有属性是不被共享的，用来标示一个进程或一个线程的标志\n\n#### 线程调度算法 \n> * SCHED_OTHER：普通任务调度策略。\n> * SCHED_FIFO：实时任务调度策略，先到先服务。一旦占用cpu则一直运行，直到有更高优先级任务到达或自己放弃。\n> * SCHED_RR：实时任务调度策略，时间片轮转。当任务的时间片用完，系统将重新分配时间片，并置于就绪队列尾。放在队列尾\n>具体涉及到N多内容，自行搜索\n\n#### 内存页面置换算法 \n为提高内存利用率，解决内存供不应求的问题，更加合理的使用内存，人们创造了分页式内存抽象。同时有一个虚拟内存的概念，是指将内存中暂时不需要的部分写入硬盘，看上去硬盘扩展了内存的容量，所以叫做“虚拟”内存。使用虚拟内存，应用程序可以使用比实际物理内存更大的内存空间。可以认为这个更大的内存空间就在硬盘上，只有将某一部分需要被用到时，才被写入真实内存；当它暂时不再被用到时，又被写回硬盘。分页式内存管理将物理内存分为等大的小块，每块大小通常为1K、2K、4K等，称为页帧；逻辑内存（使用虚拟内存技术扩大的内存，可认为其位于硬盘上）也被分为等大的小块，称为页；且页和页帧的大小一定是一样的，它是写入真实内存和写回硬盘最小单位。\n> ** Optimal算法（最优算法） **\n　　从内存中移除永远都不再需要的页面或者说是未来最长时间内不再被访问的页面，如果这样的页面存在，则选择最长时间不需要访问的页面。采用最佳置换算法，可以保证较低的页面更新频率。从理论上讲，由于无法预知哪一个页面是未来最长时间内不再被访问的，因而该算法无法实现，但是可用来衡量其他算法。\n\n> ** FIFO（First-In First-Out，先进先出）算法 **\n    该算法总是淘汰最早进入内存的页面，即选择在内存中停留时间最久的页面予以淘汰。\n　　这个算法的实现简单，只需要将进程已调入内存中的页面，按照先后顺序连接成一个队列，设置一个替换指针，总是指向最老的页面。\n　　但是该算法与进程实际的规律并不相适应，因为在进程中，有些页面经常被访问，比如：含有全局变量、常用函数、例程等的页面，FIFO不能保证这些页面不会被淘汰。\n　　正是由于没有考虑页面的重要性的问题，FIFO算法很容易将重要的页换出内存。\n\n> ** Second Chance（第二次机会）算法 **\n　　为了避免FIFO算法将重要的页换出内存，Second Chance算法提供了一些改进。Second Chance算法在将页面换出内存前检查其使用位，如果其使用位为1，证明此页最近有被使用，猜测它还可能被使用，于是不把它置换出内存，但是把其使用位置为0，随后检查下一个页面，直到发现某页的使用位为0，将此页置换出内存。\n\n> ** LRU（Least Recent Used, 最近最少使用）算法 **\n　　在之前的FIFO算法中，依据的是各个页面调入内存的时间，这并不能反映页面的真实使用情况。而LRU（Latest Recently Used）是根据页面调入内存之后的使用情况。由于无法预测页面未来的情况，所以只能利用“最近的过去”来作为预测未来的方法，LRU选择的是最近最久未使用的页面予以淘汰。\n　　该算法赋予每个页面一个访问字段，用来记录一个页面从上次被访问以来所经历的时间t，当需要淘汰一个页面的时候，选择现有页面中t的值最大的页面进行淘汰。\n　　LRU是一种优秀的页面置换算法，但是需要硬件的支持，为了了解一个进程在内存中各个页面各有多少时间未被进程访问，以及如何快速地知道哪一个页面是最近最久未使用的页面，需要 寄存器+栈 来支持。\n\n### java相关：\n#### synchronized 和Lock的区别 以及实现原理\n>   教科书式的应试回答：\n    主要相同点：Lock能完成synchronized所实现的所有功能\n    主要不同点：Lock有比synchronized更精确的线程语义和更好的性能。synchronized会自动释放锁，而Lock一定要求程序员手工释放，并且必须在finally从句中释放。\n\n| 类别 | synchronized | synchronized | \n|: - :| :-: | : -: | \n| 存在层次 | Java的关键字，在jvm层面上 | 是一个类|\n| 锁的释放 | 1、以获取锁的线程执行完同步代码，释放锁 2、线程执行发生异常，jvm会让线程释放锁\t| 在finally中必须释放锁，不然容易造成线程死锁 |\n| 锁的获取 | 假设A线程获得锁，B线程等待。如果A线程阻塞，B线程会一直等待\t| 分情况而定，Lock有多个锁获取的方式，具体下面会说道，大致就是可以尝试获得锁，线程可以不用一直等待|\n| 锁状态 | 无法判断\t| 可以判断|\n| 锁类型 | 可重入 不可中断 非公平 | 可重入 可判断 可公平（两者皆可）|\n|性能 | 少量同步 | 大量同步|\n关于同步类(java.util.concurrent包下)的介绍可以看这个 http://blog.huangyuanlove.com/2018/03/20/Java%E5%B9%B6%E5%8F%91%E5%A4%9A%E7%BA%BF%E7%A8%8B%E5%90%8C%E6%AD%A5/#more\n关于Lock的底层实现可以看这篇：https://blog.csdn.net/Luxia_24/article/details/52403033\n关于synchronized可以看这篇 https://blog.csdn.net/u012403290/article/details/64910926?locationNum=11&fps=1\n\n#### Map、Set、List区别\n这个自己翻一下源码看一下就好\nMap-> HashMap(存入数据的过程，hash冲突了怎么办),TreeMap,LinkedHashMap\nSet-> 使用Map实现的，set中存放的数据对应map中的key，value是内部的一个object字段\nlist-> ArrayList(数组),LinkedList(链表)区别，优缺点\n\n#### Java虚拟机\n这个主要是问内存区域，垃圾回收算法，可以参考这里：\nJVM-内存分配与回收策略 http://blog.huangyuanlove.com/2017/04/07/JVM-%E5%86%85%E5%AD%98%E5%88%86%E9%85%8D%E4%B8%8E%E5%9B%9E%E6%94%B6%E7%AD%96%E7%95%A5/\nJVM-垃圾收集算法与实现  http://blog.huangyuanlove.com/2017/03/30/JVM-%E5%9E%83%E5%9C%BE%E6%94%B6%E9%9B%86%E7%AE%97%E6%B3%95/\nJVM垃圾回收-对象已死？ http://blog.huangyuanlove.com/2017/03/29/JVM%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6-%E5%AF%B9%E8%B1%A1%E5%B7%B2%E6%AD%BB%EF%BC%9F/\nJVM内存区域 http://blog.huangyuanlove.com/2017/03/27/JVM%E5%86%85%E5%AD%98%E5%8C%BA%E5%9F%9F/\n\n#### 捕获子线程异常\n``` java\nnew Thread().setUncaughtExceptionHandler(new Thread.UncaughtExceptionHandler() {\n           @Override\n           public void uncaughtException(Thread t, Throwable e) {\n               \n           }\n       });\nThread.setDefaultUncaughtExceptionHandler(new Thread.UncaughtExceptionHandler() {\n           @Override\n           public void uncaughtException(Thread t, Throwable e) {\n\n           }\n       });\n```\n如果一个线程没有显式的设置它的UncaughtExceptionHandler，JVM就会检查该线程所在的线程组是否设置了UncaughtExceptionHandler，如果已经设置，就是用该UncaughtExceptionHandler；否则查看是否在Thread层面通过静态方法setDefaultUncaughtExceptionHandler()设置了UncaughtExceptionHandler，如果已经设置就是用该UncaughtExceptionHandler；如果上述都没有找到，JVM会在对应的console中打印异常的堆栈信息。\n具体情况可以看一下Java并发编程的艺术\n\n#### 线程池 \n这是个大坑，看源码吧ThreadPoolExecutor.java，还有就是常见线程池的比较。\n\n#### 单例模式 线程安全\n单例的模式的N种写法，像什么double check、懒汉模式、静态内部类，还有就是枚举方式。这里会引出来`volatile`关键字，然后就是线程安全的问题。\n\n\n### Android相关：\n#### 多进程写sp的问题\n还是线程安全的问题，因为SP不支持两个进程同事去执行写操作，否则会导致一定几率的数据丢失，这是因为SP底层通过读写xml文件来实现的，并发写显然是有问题的\n#### sp底层实现\n读写xml文件\n#### Activity和Fragment生命周期,生命周期函数是谁调用的\n声明周期函数是由ActivityThread调度的，具体逻辑封装在Instrumentation类里面。具体读一下这两个类就好。\n#### Activity启动模式，启动过程\n单独开了一篇博客http://blog.huangyuanlove.com/2018/07/26/Activity%E5%90%AF%E5%8A%A8%E6%A8%A1%E5%BC%8F%EF%BC%8C%E5%90%AF%E5%8A%A8%E8%BF%87%E7%A8%8B/#more\n\n#### View点击事件分发流程\nView事件分发：http://blog.huangyuanlove.com/2018/07/29/View事件分发/#more\n\n#### View绘制过程\nView绘制过程：http://blog.huangyuanlove.com//2018/07/29/View绘制过程/#more\n\n#### Handler\nAndroid的消息机制:  http://blog.huangyuanlove.com/2017/03/23/Android%E7%9A%84%E6%B6%88%E6%81%AF%E6%9C%BA%E5%88%B6/#more\n\n#### 省电优化  \n不打扰系统休眠（不监听电量变化等，三方的可以hook  oop  hook住oncreat） \n不做不必要的动作（界面后台要停止动画）\n\n\n#### 广播的底层实现（binder）\nAndroid 广播 ：http://blog.huangyuanlove.com/2018/07/31/Android%E5%B9%BF%E6%92%AD/\n\n\n### 计算机网络相关：\n#### websocket为什么能保持长连接\n#### http、tcp/udp、tcp怎么解决拥塞、滑动窗口、udp\n这个可以看谢希仁的《计算机网络》第六版，tcp:http://blog.huangyuanlove.com/2017/07/03/TCP%E5%8D%8F%E8%AE%AE%E7%9A%84%E7%AE%80%E5%8D%95%E7%90%86%E8%A7%A3/#more 这里简单的记录了一下比较重要的东西。\n\n### 其他：\n\n加固原理 加的什么壳\nkt var  val区别  when中的 is  in\n\n","slug":"面试总结","published":1,"updated":"2018-08-05T03:41:50.307Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjl3vbtry003qisdgzisc7sx1","content":"<p>最近的面试过程中遇到的面试题，涉及的方面比较广泛，大致分成了一下几个方面：<br>操作系统、Java、Android、计算机网络、其他(kotlin、react、安全之类的)。<br><a id=\"more\"></a></p>\n<h3 id=\"操作系统相关：\"><a href=\"#操作系统相关：\" class=\"headerlink\" title=\"操作系统相关：\"></a>操作系统相关：</h3><h4 id=\"进程和线程的区别\"><a href=\"#进程和线程的区别\" class=\"headerlink\" title=\"进程和线程的区别\"></a>进程和线程的区别</h4><blockquote>\n<ul>\n<li>进程是资源的分配和调度的一个独立单元，而线程是CPU调度的基本单元 </li>\n<li>同一个进程中可以包括多个线程，并且线程共享整个进程的资源（寄存器、堆栈、上下文），一个进行至少包括一个线程。</li>\n<li>进程的创建调用fork或者vfork，而线程的创建调用pthread_create，进程结束后它拥有的所有线程都将销毁，而线程的结束不会影响同个进程中的其他线程的结束</li>\n<li>线程是轻两级的进程，它的创建和销毁所需要的时间比进程小很多，所有操作系统中的执行功能都是创建线程去完成的</li>\n<li>线程中执行时一般都要进行同步和互斥，因为他们共享同一进程的所有资源</li>\n<li>线程有自己的私有属性TCB，线程id，寄存器、硬件上下文，而进程也有自己的私有属性进程控制块PCB，这些私有属性是不被共享的，用来标示一个进程或一个线程的标志</li>\n</ul>\n</blockquote>\n<h4 id=\"线程调度算法\"><a href=\"#线程调度算法\" class=\"headerlink\" title=\"线程调度算法\"></a>线程调度算法</h4><blockquote>\n<ul>\n<li>SCHED_OTHER：普通任务调度策略。</li>\n<li>SCHED_FIFO：实时任务调度策略，先到先服务。一旦占用cpu则一直运行，直到有更高优先级任务到达或自己放弃。</li>\n<li>SCHED_RR：实时任务调度策略，时间片轮转。当任务的时间片用完，系统将重新分配时间片，并置于就绪队列尾。放在队列尾<br>具体涉及到N多内容，自行搜索</li>\n</ul>\n</blockquote>\n<h4 id=\"内存页面置换算法\"><a href=\"#内存页面置换算法\" class=\"headerlink\" title=\"内存页面置换算法\"></a>内存页面置换算法</h4><p>为提高内存利用率，解决内存供不应求的问题，更加合理的使用内存，人们创造了分页式内存抽象。同时有一个虚拟内存的概念，是指将内存中暂时不需要的部分写入硬盘，看上去硬盘扩展了内存的容量，所以叫做“虚拟”内存。使用虚拟内存，应用程序可以使用比实际物理内存更大的内存空间。可以认为这个更大的内存空间就在硬盘上，只有将某一部分需要被用到时，才被写入真实内存；当它暂时不再被用到时，又被写回硬盘。分页式内存管理将物理内存分为等大的小块，每块大小通常为1K、2K、4K等，称为页帧；逻辑内存（使用虚拟内存技术扩大的内存，可认为其位于硬盘上）也被分为等大的小块，称为页；且页和页帧的大小一定是一样的，它是写入真实内存和写回硬盘最小单位。</p>\n<blockquote>\n<p><strong> Optimal算法（最优算法） </strong><br>　　从内存中移除永远都不再需要的页面或者说是未来最长时间内不再被访问的页面，如果这样的页面存在，则选择最长时间不需要访问的页面。采用最佳置换算法，可以保证较低的页面更新频率。从理论上讲，由于无法预知哪一个页面是未来最长时间内不再被访问的，因而该算法无法实现，但是可用来衡量其他算法。</p>\n<p><strong> FIFO（First-In First-Out，先进先出）算法 </strong><br>    该算法总是淘汰最早进入内存的页面，即选择在内存中停留时间最久的页面予以淘汰。<br>　　这个算法的实现简单，只需要将进程已调入内存中的页面，按照先后顺序连接成一个队列，设置一个替换指针，总是指向最老的页面。<br>　　但是该算法与进程实际的规律并不相适应，因为在进程中，有些页面经常被访问，比如：含有全局变量、常用函数、例程等的页面，FIFO不能保证这些页面不会被淘汰。<br>　　正是由于没有考虑页面的重要性的问题，FIFO算法很容易将重要的页换出内存。</p>\n<p><strong> Second Chance（第二次机会）算法 </strong><br>　　为了避免FIFO算法将重要的页换出内存，Second Chance算法提供了一些改进。Second Chance算法在将页面换出内存前检查其使用位，如果其使用位为1，证明此页最近有被使用，猜测它还可能被使用，于是不把它置换出内存，但是把其使用位置为0，随后检查下一个页面，直到发现某页的使用位为0，将此页置换出内存。</p>\n<p><strong> LRU（Least Recent Used, 最近最少使用）算法 </strong><br>　　在之前的FIFO算法中，依据的是各个页面调入内存的时间，这并不能反映页面的真实使用情况。而LRU（Latest Recently Used）是根据页面调入内存之后的使用情况。由于无法预测页面未来的情况，所以只能利用“最近的过去”来作为预测未来的方法，LRU选择的是最近最久未使用的页面予以淘汰。<br>　　该算法赋予每个页面一个访问字段，用来记录一个页面从上次被访问以来所经历的时间t，当需要淘汰一个页面的时候，选择现有页面中t的值最大的页面进行淘汰。<br>　　LRU是一种优秀的页面置换算法，但是需要硬件的支持，为了了解一个进程在内存中各个页面各有多少时间未被进程访问，以及如何快速地知道哪一个页面是最近最久未使用的页面，需要 寄存器+栈 来支持。</p>\n</blockquote>\n<h3 id=\"java相关：\"><a href=\"#java相关：\" class=\"headerlink\" title=\"java相关：\"></a>java相关：</h3><h4 id=\"synchronized-和Lock的区别-以及实现原理\"><a href=\"#synchronized-和Lock的区别-以及实现原理\" class=\"headerlink\" title=\"synchronized 和Lock的区别 以及实现原理\"></a>synchronized 和Lock的区别 以及实现原理</h4><blockquote>\n<p>  教科书式的应试回答：<br>    主要相同点：Lock能完成synchronized所实现的所有功能<br>    主要不同点：Lock有比synchronized更精确的线程语义和更好的性能。synchronized会自动释放锁，而Lock一定要求程序员手工释放，并且必须在finally从句中释放。</p>\n</blockquote>\n<table>\n<thead>\n<tr>\n<th>类别</th>\n<th style=\"text-align:center\">synchronized</th>\n<th>synchronized</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>存在层次</td>\n<td style=\"text-align:center\">Java的关键字，在jvm层面上</td>\n<td>是一个类</td>\n</tr>\n<tr>\n<td>锁的释放</td>\n<td style=\"text-align:center\">1、以获取锁的线程执行完同步代码，释放锁 2、线程执行发生异常，jvm会让线程释放锁</td>\n<td>在finally中必须释放锁，不然容易造成线程死锁</td>\n</tr>\n<tr>\n<td>锁的获取</td>\n<td style=\"text-align:center\">假设A线程获得锁，B线程等待。如果A线程阻塞，B线程会一直等待</td>\n<td>分情况而定，Lock有多个锁获取的方式，具体下面会说道，大致就是可以尝试获得锁，线程可以不用一直等待</td>\n</tr>\n<tr>\n<td>锁状态</td>\n<td style=\"text-align:center\">无法判断</td>\n<td>可以判断</td>\n</tr>\n<tr>\n<td>锁类型</td>\n<td style=\"text-align:center\">可重入 不可中断 非公平</td>\n<td>可重入 可判断 可公平（两者皆可）</td>\n</tr>\n<tr>\n<td>性能</td>\n<td style=\"text-align:center\">少量同步</td>\n<td>大量同步</td>\n</tr>\n</tbody>\n</table>\n<p>关于同步类(java.util.concurrent包下)的介绍可以看这个 <a href=\"http://blog.huangyuanlove.com/2018/03/20/Java%E5%B9%B6%E5%8F%91%E5%A4%9A%E7%BA%BF%E7%A8%8B%E5%90%8C%E6%AD%A5/#more\">http://blog.huangyuanlove.com/2018/03/20/Java%E5%B9%B6%E5%8F%91%E5%A4%9A%E7%BA%BF%E7%A8%8B%E5%90%8C%E6%AD%A5/#more</a><br>关于Lock的底层实现可以看这篇：<a href=\"https://blog.csdn.net/Luxia_24/article/details/52403033\" target=\"_blank\" rel=\"external\">https://blog.csdn.net/Luxia_24/article/details/52403033</a><br>关于synchronized可以看这篇 <a href=\"https://blog.csdn.net/u012403290/article/details/64910926?locationNum=11&amp;fps=1\" target=\"_blank\" rel=\"external\">https://blog.csdn.net/u012403290/article/details/64910926?locationNum=11&amp;fps=1</a></p>\n<h4 id=\"Map、Set、List区别\"><a href=\"#Map、Set、List区别\" class=\"headerlink\" title=\"Map、Set、List区别\"></a>Map、Set、List区别</h4><p>这个自己翻一下源码看一下就好<br>Map-&gt; HashMap(存入数据的过程，hash冲突了怎么办),TreeMap,LinkedHashMap<br>Set-&gt; 使用Map实现的，set中存放的数据对应map中的key，value是内部的一个object字段<br>list-&gt; ArrayList(数组),LinkedList(链表)区别，优缺点</p>\n<h4 id=\"Java虚拟机\"><a href=\"#Java虚拟机\" class=\"headerlink\" title=\"Java虚拟机\"></a>Java虚拟机</h4><p>这个主要是问内存区域，垃圾回收算法，可以参考这里：<br>JVM-内存分配与回收策略 <a href=\"http://blog.huangyuanlove.com/2017/04/07/JVM-%E5%86%85%E5%AD%98%E5%88%86%E9%85%8D%E4%B8%8E%E5%9B%9E%E6%94%B6%E7%AD%96%E7%95%A5/\">http://blog.huangyuanlove.com/2017/04/07/JVM-%E5%86%85%E5%AD%98%E5%88%86%E9%85%8D%E4%B8%8E%E5%9B%9E%E6%94%B6%E7%AD%96%E7%95%A5/</a><br>JVM-垃圾收集算法与实现  <a href=\"http://blog.huangyuanlove.com/2017/03/30/JVM-%E5%9E%83%E5%9C%BE%E6%94%B6%E9%9B%86%E7%AE%97%E6%B3%95/\">http://blog.huangyuanlove.com/2017/03/30/JVM-%E5%9E%83%E5%9C%BE%E6%94%B6%E9%9B%86%E7%AE%97%E6%B3%95/</a><br>JVM垃圾回收-对象已死？ <a href=\"http://blog.huangyuanlove.com/2017/03/29/JVM%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6-%E5%AF%B9%E8%B1%A1%E5%B7%B2%E6%AD%BB%EF%BC%9F/\">http://blog.huangyuanlove.com/2017/03/29/JVM%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6-%E5%AF%B9%E8%B1%A1%E5%B7%B2%E6%AD%BB%EF%BC%9F/</a><br>JVM内存区域 <a href=\"http://blog.huangyuanlove.com/2017/03/27/JVM%E5%86%85%E5%AD%98%E5%8C%BA%E5%9F%9F/\">http://blog.huangyuanlove.com/2017/03/27/JVM%E5%86%85%E5%AD%98%E5%8C%BA%E5%9F%9F/</a></p>\n<h4 id=\"捕获子线程异常\"><a href=\"#捕获子线程异常\" class=\"headerlink\" title=\"捕获子线程异常\"></a>捕获子线程异常</h4><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">new</span> Thread().setUncaughtExceptionHandler(<span class=\"keyword\">new</span> Thread.UncaughtExceptionHandler() &#123;</div><div class=\"line\">           <span class=\"meta\">@Override</span></div><div class=\"line\">           <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">uncaughtException</span><span class=\"params\">(Thread t, Throwable e)</span> </span>&#123;</div><div class=\"line\">               </div><div class=\"line\">           &#125;</div><div class=\"line\">       &#125;);</div><div class=\"line\">Thread.setDefaultUncaughtExceptionHandler(<span class=\"keyword\">new</span> Thread.UncaughtExceptionHandler() &#123;</div><div class=\"line\">           <span class=\"meta\">@Override</span></div><div class=\"line\">           <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">uncaughtException</span><span class=\"params\">(Thread t, Throwable e)</span> </span>&#123;</div><div class=\"line\"></div><div class=\"line\">           &#125;</div><div class=\"line\">       &#125;);</div></pre></td></tr></table></figure>\n<p>如果一个线程没有显式的设置它的UncaughtExceptionHandler，JVM就会检查该线程所在的线程组是否设置了UncaughtExceptionHandler，如果已经设置，就是用该UncaughtExceptionHandler；否则查看是否在Thread层面通过静态方法setDefaultUncaughtExceptionHandler()设置了UncaughtExceptionHandler，如果已经设置就是用该UncaughtExceptionHandler；如果上述都没有找到，JVM会在对应的console中打印异常的堆栈信息。<br>具体情况可以看一下Java并发编程的艺术</p>\n<h4 id=\"线程池\"><a href=\"#线程池\" class=\"headerlink\" title=\"线程池\"></a>线程池</h4><p>这是个大坑，看源码吧ThreadPoolExecutor.java，还有就是常见线程池的比较。</p>\n<h4 id=\"单例模式-线程安全\"><a href=\"#单例模式-线程安全\" class=\"headerlink\" title=\"单例模式 线程安全\"></a>单例模式 线程安全</h4><p>单例的模式的N种写法，像什么double check、懒汉模式、静态内部类，还有就是枚举方式。这里会引出来<code>volatile</code>关键字，然后就是线程安全的问题。</p>\n<h3 id=\"Android相关：\"><a href=\"#Android相关：\" class=\"headerlink\" title=\"Android相关：\"></a>Android相关：</h3><h4 id=\"多进程写sp的问题\"><a href=\"#多进程写sp的问题\" class=\"headerlink\" title=\"多进程写sp的问题\"></a>多进程写sp的问题</h4><p>还是线程安全的问题，因为SP不支持两个进程同事去执行写操作，否则会导致一定几率的数据丢失，这是因为SP底层通过读写xml文件来实现的，并发写显然是有问题的</p>\n<h4 id=\"sp底层实现\"><a href=\"#sp底层实现\" class=\"headerlink\" title=\"sp底层实现\"></a>sp底层实现</h4><p>读写xml文件</p>\n<h4 id=\"Activity和Fragment生命周期-生命周期函数是谁调用的\"><a href=\"#Activity和Fragment生命周期-生命周期函数是谁调用的\" class=\"headerlink\" title=\"Activity和Fragment生命周期,生命周期函数是谁调用的\"></a>Activity和Fragment生命周期,生命周期函数是谁调用的</h4><p>声明周期函数是由ActivityThread调度的，具体逻辑封装在Instrumentation类里面。具体读一下这两个类就好。</p>\n<h4 id=\"Activity启动模式，启动过程\"><a href=\"#Activity启动模式，启动过程\" class=\"headerlink\" title=\"Activity启动模式，启动过程\"></a>Activity启动模式，启动过程</h4><p>单独开了一篇博客<a href=\"http://blog.huangyuanlove.com/2018/07/26/Activity%E5%90%AF%E5%8A%A8%E6%A8%A1%E5%BC%8F%EF%BC%8C%E5%90%AF%E5%8A%A8%E8%BF%87%E7%A8%8B/#more\">http://blog.huangyuanlove.com/2018/07/26/Activity%E5%90%AF%E5%8A%A8%E6%A8%A1%E5%BC%8F%EF%BC%8C%E5%90%AF%E5%8A%A8%E8%BF%87%E7%A8%8B/#more</a></p>\n<h4 id=\"View点击事件分发流程\"><a href=\"#View点击事件分发流程\" class=\"headerlink\" title=\"View点击事件分发流程\"></a>View点击事件分发流程</h4><p>View事件分发：<a href=\"http://blog.huangyuanlove.com/2018/07/29/View事件分发/#more\">http://blog.huangyuanlove.com/2018/07/29/View事件分发/#more</a></p>\n<h4 id=\"View绘制过程\"><a href=\"#View绘制过程\" class=\"headerlink\" title=\"View绘制过程\"></a>View绘制过程</h4><p>View绘制过程：<a href=\"http://blog.huangyuanlove.com//2018/07/29/View绘制过程/#more\">http://blog.huangyuanlove.com//2018/07/29/View绘制过程/#more</a></p>\n<h4 id=\"Handler\"><a href=\"#Handler\" class=\"headerlink\" title=\"Handler\"></a>Handler</h4><p>Android的消息机制:  <a href=\"http://blog.huangyuanlove.com/2017/03/23/Android%E7%9A%84%E6%B6%88%E6%81%AF%E6%9C%BA%E5%88%B6/#more\">http://blog.huangyuanlove.com/2017/03/23/Android%E7%9A%84%E6%B6%88%E6%81%AF%E6%9C%BA%E5%88%B6/#more</a></p>\n<h4 id=\"省电优化\"><a href=\"#省电优化\" class=\"headerlink\" title=\"省电优化\"></a>省电优化</h4><p>不打扰系统休眠（不监听电量变化等，三方的可以hook  oop  hook住oncreat）<br>不做不必要的动作（界面后台要停止动画）</p>\n<h4 id=\"广播的底层实现（binder）\"><a href=\"#广播的底层实现（binder）\" class=\"headerlink\" title=\"广播的底层实现（binder）\"></a>广播的底层实现（binder）</h4><p>Android 广播 ：<a href=\"http://blog.huangyuanlove.com/2018/07/31/Android%E5%B9%BF%E6%92%AD/\">http://blog.huangyuanlove.com/2018/07/31/Android%E5%B9%BF%E6%92%AD/</a></p>\n<h3 id=\"计算机网络相关：\"><a href=\"#计算机网络相关：\" class=\"headerlink\" title=\"计算机网络相关：\"></a>计算机网络相关：</h3><h4 id=\"websocket为什么能保持长连接\"><a href=\"#websocket为什么能保持长连接\" class=\"headerlink\" title=\"websocket为什么能保持长连接\"></a>websocket为什么能保持长连接</h4><h4 id=\"http、tcp-udp、tcp怎么解决拥塞、滑动窗口、udp\"><a href=\"#http、tcp-udp、tcp怎么解决拥塞、滑动窗口、udp\" class=\"headerlink\" title=\"http、tcp/udp、tcp怎么解决拥塞、滑动窗口、udp\"></a>http、tcp/udp、tcp怎么解决拥塞、滑动窗口、udp</h4><p>这个可以看谢希仁的《计算机网络》第六版，tcp:<a href=\"http://blog.huangyuanlove.com/2017/07/03/TCP%E5%8D%8F%E8%AE%AE%E7%9A%84%E7%AE%80%E5%8D%95%E7%90%86%E8%A7%A3/#more\">http://blog.huangyuanlove.com/2017/07/03/TCP%E5%8D%8F%E8%AE%AE%E7%9A%84%E7%AE%80%E5%8D%95%E7%90%86%E8%A7%A3/#more</a> 这里简单的记录了一下比较重要的东西。</p>\n<h3 id=\"其他：\"><a href=\"#其他：\" class=\"headerlink\" title=\"其他：\"></a>其他：</h3><p>加固原理 加的什么壳<br>kt var  val区别  when中的 is  in</p>\n","excerpt":"<p>最近的面试过程中遇到的面试题，涉及的方面比较广泛，大致分成了一下几个方面：<br>操作系统、Java、Android、计算机网络、其他(kotlin、react、安全之类的)。<br>","more":"</p>\n<h3 id=\"操作系统相关：\"><a href=\"#操作系统相关：\" class=\"headerlink\" title=\"操作系统相关：\"></a>操作系统相关：</h3><h4 id=\"进程和线程的区别\"><a href=\"#进程和线程的区别\" class=\"headerlink\" title=\"进程和线程的区别\"></a>进程和线程的区别</h4><blockquote>\n<ul>\n<li>进程是资源的分配和调度的一个独立单元，而线程是CPU调度的基本单元 </li>\n<li>同一个进程中可以包括多个线程，并且线程共享整个进程的资源（寄存器、堆栈、上下文），一个进行至少包括一个线程。</li>\n<li>进程的创建调用fork或者vfork，而线程的创建调用pthread_create，进程结束后它拥有的所有线程都将销毁，而线程的结束不会影响同个进程中的其他线程的结束</li>\n<li>线程是轻两级的进程，它的创建和销毁所需要的时间比进程小很多，所有操作系统中的执行功能都是创建线程去完成的</li>\n<li>线程中执行时一般都要进行同步和互斥，因为他们共享同一进程的所有资源</li>\n<li>线程有自己的私有属性TCB，线程id，寄存器、硬件上下文，而进程也有自己的私有属性进程控制块PCB，这些私有属性是不被共享的，用来标示一个进程或一个线程的标志</li>\n</ul>\n</blockquote>\n<h4 id=\"线程调度算法\"><a href=\"#线程调度算法\" class=\"headerlink\" title=\"线程调度算法\"></a>线程调度算法</h4><blockquote>\n<ul>\n<li>SCHED_OTHER：普通任务调度策略。</li>\n<li>SCHED_FIFO：实时任务调度策略，先到先服务。一旦占用cpu则一直运行，直到有更高优先级任务到达或自己放弃。</li>\n<li>SCHED_RR：实时任务调度策略，时间片轮转。当任务的时间片用完，系统将重新分配时间片，并置于就绪队列尾。放在队列尾<br>具体涉及到N多内容，自行搜索</li>\n</ul>\n</blockquote>\n<h4 id=\"内存页面置换算法\"><a href=\"#内存页面置换算法\" class=\"headerlink\" title=\"内存页面置换算法\"></a>内存页面置换算法</h4><p>为提高内存利用率，解决内存供不应求的问题，更加合理的使用内存，人们创造了分页式内存抽象。同时有一个虚拟内存的概念，是指将内存中暂时不需要的部分写入硬盘，看上去硬盘扩展了内存的容量，所以叫做“虚拟”内存。使用虚拟内存，应用程序可以使用比实际物理内存更大的内存空间。可以认为这个更大的内存空间就在硬盘上，只有将某一部分需要被用到时，才被写入真实内存；当它暂时不再被用到时，又被写回硬盘。分页式内存管理将物理内存分为等大的小块，每块大小通常为1K、2K、4K等，称为页帧；逻辑内存（使用虚拟内存技术扩大的内存，可认为其位于硬盘上）也被分为等大的小块，称为页；且页和页帧的大小一定是一样的，它是写入真实内存和写回硬盘最小单位。</p>\n<blockquote>\n<p><strong> Optimal算法（最优算法） </strong><br>　　从内存中移除永远都不再需要的页面或者说是未来最长时间内不再被访问的页面，如果这样的页面存在，则选择最长时间不需要访问的页面。采用最佳置换算法，可以保证较低的页面更新频率。从理论上讲，由于无法预知哪一个页面是未来最长时间内不再被访问的，因而该算法无法实现，但是可用来衡量其他算法。</p>\n<p><strong> FIFO（First-In First-Out，先进先出）算法 </strong><br>    该算法总是淘汰最早进入内存的页面，即选择在内存中停留时间最久的页面予以淘汰。<br>　　这个算法的实现简单，只需要将进程已调入内存中的页面，按照先后顺序连接成一个队列，设置一个替换指针，总是指向最老的页面。<br>　　但是该算法与进程实际的规律并不相适应，因为在进程中，有些页面经常被访问，比如：含有全局变量、常用函数、例程等的页面，FIFO不能保证这些页面不会被淘汰。<br>　　正是由于没有考虑页面的重要性的问题，FIFO算法很容易将重要的页换出内存。</p>\n<p><strong> Second Chance（第二次机会）算法 </strong><br>　　为了避免FIFO算法将重要的页换出内存，Second Chance算法提供了一些改进。Second Chance算法在将页面换出内存前检查其使用位，如果其使用位为1，证明此页最近有被使用，猜测它还可能被使用，于是不把它置换出内存，但是把其使用位置为0，随后检查下一个页面，直到发现某页的使用位为0，将此页置换出内存。</p>\n<p><strong> LRU（Least Recent Used, 最近最少使用）算法 </strong><br>　　在之前的FIFO算法中，依据的是各个页面调入内存的时间，这并不能反映页面的真实使用情况。而LRU（Latest Recently Used）是根据页面调入内存之后的使用情况。由于无法预测页面未来的情况，所以只能利用“最近的过去”来作为预测未来的方法，LRU选择的是最近最久未使用的页面予以淘汰。<br>　　该算法赋予每个页面一个访问字段，用来记录一个页面从上次被访问以来所经历的时间t，当需要淘汰一个页面的时候，选择现有页面中t的值最大的页面进行淘汰。<br>　　LRU是一种优秀的页面置换算法，但是需要硬件的支持，为了了解一个进程在内存中各个页面各有多少时间未被进程访问，以及如何快速地知道哪一个页面是最近最久未使用的页面，需要 寄存器+栈 来支持。</p>\n</blockquote>\n<h3 id=\"java相关：\"><a href=\"#java相关：\" class=\"headerlink\" title=\"java相关：\"></a>java相关：</h3><h4 id=\"synchronized-和Lock的区别-以及实现原理\"><a href=\"#synchronized-和Lock的区别-以及实现原理\" class=\"headerlink\" title=\"synchronized 和Lock的区别 以及实现原理\"></a>synchronized 和Lock的区别 以及实现原理</h4><blockquote>\n<p>  教科书式的应试回答：<br>    主要相同点：Lock能完成synchronized所实现的所有功能<br>    主要不同点：Lock有比synchronized更精确的线程语义和更好的性能。synchronized会自动释放锁，而Lock一定要求程序员手工释放，并且必须在finally从句中释放。</p>\n</blockquote>\n<table>\n<thead>\n<tr>\n<th>类别</th>\n<th style=\"text-align:center\">synchronized</th>\n<th>synchronized</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>存在层次</td>\n<td style=\"text-align:center\">Java的关键字，在jvm层面上</td>\n<td>是一个类</td>\n</tr>\n<tr>\n<td>锁的释放</td>\n<td style=\"text-align:center\">1、以获取锁的线程执行完同步代码，释放锁 2、线程执行发生异常，jvm会让线程释放锁</td>\n<td>在finally中必须释放锁，不然容易造成线程死锁</td>\n</tr>\n<tr>\n<td>锁的获取</td>\n<td style=\"text-align:center\">假设A线程获得锁，B线程等待。如果A线程阻塞，B线程会一直等待</td>\n<td>分情况而定，Lock有多个锁获取的方式，具体下面会说道，大致就是可以尝试获得锁，线程可以不用一直等待</td>\n</tr>\n<tr>\n<td>锁状态</td>\n<td style=\"text-align:center\">无法判断</td>\n<td>可以判断</td>\n</tr>\n<tr>\n<td>锁类型</td>\n<td style=\"text-align:center\">可重入 不可中断 非公平</td>\n<td>可重入 可判断 可公平（两者皆可）</td>\n</tr>\n<tr>\n<td>性能</td>\n<td style=\"text-align:center\">少量同步</td>\n<td>大量同步</td>\n</tr>\n</tbody>\n</table>\n<p>关于同步类(java.util.concurrent包下)的介绍可以看这个 <a href=\"http://blog.huangyuanlove.com/2018/03/20/Java%E5%B9%B6%E5%8F%91%E5%A4%9A%E7%BA%BF%E7%A8%8B%E5%90%8C%E6%AD%A5/#more\">http://blog.huangyuanlove.com/2018/03/20/Java%E5%B9%B6%E5%8F%91%E5%A4%9A%E7%BA%BF%E7%A8%8B%E5%90%8C%E6%AD%A5/#more</a><br>关于Lock的底层实现可以看这篇：<a href=\"https://blog.csdn.net/Luxia_24/article/details/52403033\">https://blog.csdn.net/Luxia_24/article/details/52403033</a><br>关于synchronized可以看这篇 <a href=\"https://blog.csdn.net/u012403290/article/details/64910926?locationNum=11&amp;fps=1\">https://blog.csdn.net/u012403290/article/details/64910926?locationNum=11&amp;fps=1</a></p>\n<h4 id=\"Map、Set、List区别\"><a href=\"#Map、Set、List区别\" class=\"headerlink\" title=\"Map、Set、List区别\"></a>Map、Set、List区别</h4><p>这个自己翻一下源码看一下就好<br>Map-&gt; HashMap(存入数据的过程，hash冲突了怎么办),TreeMap,LinkedHashMap<br>Set-&gt; 使用Map实现的，set中存放的数据对应map中的key，value是内部的一个object字段<br>list-&gt; ArrayList(数组),LinkedList(链表)区别，优缺点</p>\n<h4 id=\"Java虚拟机\"><a href=\"#Java虚拟机\" class=\"headerlink\" title=\"Java虚拟机\"></a>Java虚拟机</h4><p>这个主要是问内存区域，垃圾回收算法，可以参考这里：<br>JVM-内存分配与回收策略 <a href=\"http://blog.huangyuanlove.com/2017/04/07/JVM-%E5%86%85%E5%AD%98%E5%88%86%E9%85%8D%E4%B8%8E%E5%9B%9E%E6%94%B6%E7%AD%96%E7%95%A5/\">http://blog.huangyuanlove.com/2017/04/07/JVM-%E5%86%85%E5%AD%98%E5%88%86%E9%85%8D%E4%B8%8E%E5%9B%9E%E6%94%B6%E7%AD%96%E7%95%A5/</a><br>JVM-垃圾收集算法与实现  <a href=\"http://blog.huangyuanlove.com/2017/03/30/JVM-%E5%9E%83%E5%9C%BE%E6%94%B6%E9%9B%86%E7%AE%97%E6%B3%95/\">http://blog.huangyuanlove.com/2017/03/30/JVM-%E5%9E%83%E5%9C%BE%E6%94%B6%E9%9B%86%E7%AE%97%E6%B3%95/</a><br>JVM垃圾回收-对象已死？ <a href=\"http://blog.huangyuanlove.com/2017/03/29/JVM%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6-%E5%AF%B9%E8%B1%A1%E5%B7%B2%E6%AD%BB%EF%BC%9F/\">http://blog.huangyuanlove.com/2017/03/29/JVM%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6-%E5%AF%B9%E8%B1%A1%E5%B7%B2%E6%AD%BB%EF%BC%9F/</a><br>JVM内存区域 <a href=\"http://blog.huangyuanlove.com/2017/03/27/JVM%E5%86%85%E5%AD%98%E5%8C%BA%E5%9F%9F/\">http://blog.huangyuanlove.com/2017/03/27/JVM%E5%86%85%E5%AD%98%E5%8C%BA%E5%9F%9F/</a></p>\n<h4 id=\"捕获子线程异常\"><a href=\"#捕获子线程异常\" class=\"headerlink\" title=\"捕获子线程异常\"></a>捕获子线程异常</h4><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">new</span> Thread().setUncaughtExceptionHandler(<span class=\"keyword\">new</span> Thread.UncaughtExceptionHandler() &#123;</div><div class=\"line\">           <span class=\"meta\">@Override</span></div><div class=\"line\">           <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">uncaughtException</span><span class=\"params\">(Thread t, Throwable e)</span> </span>&#123;</div><div class=\"line\">               </div><div class=\"line\">           &#125;</div><div class=\"line\">       &#125;);</div><div class=\"line\">Thread.setDefaultUncaughtExceptionHandler(<span class=\"keyword\">new</span> Thread.UncaughtExceptionHandler() &#123;</div><div class=\"line\">           <span class=\"meta\">@Override</span></div><div class=\"line\">           <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">uncaughtException</span><span class=\"params\">(Thread t, Throwable e)</span> </span>&#123;</div><div class=\"line\"></div><div class=\"line\">           &#125;</div><div class=\"line\">       &#125;);</div></pre></td></tr></table></figure>\n<p>如果一个线程没有显式的设置它的UncaughtExceptionHandler，JVM就会检查该线程所在的线程组是否设置了UncaughtExceptionHandler，如果已经设置，就是用该UncaughtExceptionHandler；否则查看是否在Thread层面通过静态方法setDefaultUncaughtExceptionHandler()设置了UncaughtExceptionHandler，如果已经设置就是用该UncaughtExceptionHandler；如果上述都没有找到，JVM会在对应的console中打印异常的堆栈信息。<br>具体情况可以看一下Java并发编程的艺术</p>\n<h4 id=\"线程池\"><a href=\"#线程池\" class=\"headerlink\" title=\"线程池\"></a>线程池</h4><p>这是个大坑，看源码吧ThreadPoolExecutor.java，还有就是常见线程池的比较。</p>\n<h4 id=\"单例模式-线程安全\"><a href=\"#单例模式-线程安全\" class=\"headerlink\" title=\"单例模式 线程安全\"></a>单例模式 线程安全</h4><p>单例的模式的N种写法，像什么double check、懒汉模式、静态内部类，还有就是枚举方式。这里会引出来<code>volatile</code>关键字，然后就是线程安全的问题。</p>\n<h3 id=\"Android相关：\"><a href=\"#Android相关：\" class=\"headerlink\" title=\"Android相关：\"></a>Android相关：</h3><h4 id=\"多进程写sp的问题\"><a href=\"#多进程写sp的问题\" class=\"headerlink\" title=\"多进程写sp的问题\"></a>多进程写sp的问题</h4><p>还是线程安全的问题，因为SP不支持两个进程同事去执行写操作，否则会导致一定几率的数据丢失，这是因为SP底层通过读写xml文件来实现的，并发写显然是有问题的</p>\n<h4 id=\"sp底层实现\"><a href=\"#sp底层实现\" class=\"headerlink\" title=\"sp底层实现\"></a>sp底层实现</h4><p>读写xml文件</p>\n<h4 id=\"Activity和Fragment生命周期-生命周期函数是谁调用的\"><a href=\"#Activity和Fragment生命周期-生命周期函数是谁调用的\" class=\"headerlink\" title=\"Activity和Fragment生命周期,生命周期函数是谁调用的\"></a>Activity和Fragment生命周期,生命周期函数是谁调用的</h4><p>声明周期函数是由ActivityThread调度的，具体逻辑封装在Instrumentation类里面。具体读一下这两个类就好。</p>\n<h4 id=\"Activity启动模式，启动过程\"><a href=\"#Activity启动模式，启动过程\" class=\"headerlink\" title=\"Activity启动模式，启动过程\"></a>Activity启动模式，启动过程</h4><p>单独开了一篇博客<a href=\"http://blog.huangyuanlove.com/2018/07/26/Activity%E5%90%AF%E5%8A%A8%E6%A8%A1%E5%BC%8F%EF%BC%8C%E5%90%AF%E5%8A%A8%E8%BF%87%E7%A8%8B/#more\">http://blog.huangyuanlove.com/2018/07/26/Activity%E5%90%AF%E5%8A%A8%E6%A8%A1%E5%BC%8F%EF%BC%8C%E5%90%AF%E5%8A%A8%E8%BF%87%E7%A8%8B/#more</a></p>\n<h4 id=\"View点击事件分发流程\"><a href=\"#View点击事件分发流程\" class=\"headerlink\" title=\"View点击事件分发流程\"></a>View点击事件分发流程</h4><p>View事件分发：<a href=\"http://blog.huangyuanlove.com/2018/07/29/View事件分发/#more\">http://blog.huangyuanlove.com/2018/07/29/View事件分发/#more</a></p>\n<h4 id=\"View绘制过程\"><a href=\"#View绘制过程\" class=\"headerlink\" title=\"View绘制过程\"></a>View绘制过程</h4><p>View绘制过程：<a href=\"http://blog.huangyuanlove.com//2018/07/29/View绘制过程/#more\">http://blog.huangyuanlove.com//2018/07/29/View绘制过程/#more</a></p>\n<h4 id=\"Handler\"><a href=\"#Handler\" class=\"headerlink\" title=\"Handler\"></a>Handler</h4><p>Android的消息机制:  <a href=\"http://blog.huangyuanlove.com/2017/03/23/Android%E7%9A%84%E6%B6%88%E6%81%AF%E6%9C%BA%E5%88%B6/#more\">http://blog.huangyuanlove.com/2017/03/23/Android%E7%9A%84%E6%B6%88%E6%81%AF%E6%9C%BA%E5%88%B6/#more</a></p>\n<h4 id=\"省电优化\"><a href=\"#省电优化\" class=\"headerlink\" title=\"省电优化\"></a>省电优化</h4><p>不打扰系统休眠（不监听电量变化等，三方的可以hook  oop  hook住oncreat）<br>不做不必要的动作（界面后台要停止动画）</p>\n<h4 id=\"广播的底层实现（binder）\"><a href=\"#广播的底层实现（binder）\" class=\"headerlink\" title=\"广播的底层实现（binder）\"></a>广播的底层实现（binder）</h4><p>Android 广播 ：<a href=\"http://blog.huangyuanlove.com/2018/07/31/Android%E5%B9%BF%E6%92%AD/\">http://blog.huangyuanlove.com/2018/07/31/Android%E5%B9%BF%E6%92%AD/</a></p>\n<h3 id=\"计算机网络相关：\"><a href=\"#计算机网络相关：\" class=\"headerlink\" title=\"计算机网络相关：\"></a>计算机网络相关：</h3><h4 id=\"websocket为什么能保持长连接\"><a href=\"#websocket为什么能保持长连接\" class=\"headerlink\" title=\"websocket为什么能保持长连接\"></a>websocket为什么能保持长连接</h4><h4 id=\"http、tcp-udp、tcp怎么解决拥塞、滑动窗口、udp\"><a href=\"#http、tcp-udp、tcp怎么解决拥塞、滑动窗口、udp\" class=\"headerlink\" title=\"http、tcp/udp、tcp怎么解决拥塞、滑动窗口、udp\"></a>http、tcp/udp、tcp怎么解决拥塞、滑动窗口、udp</h4><p>这个可以看谢希仁的《计算机网络》第六版，tcp:<a href=\"http://blog.huangyuanlove.com/2017/07/03/TCP%E5%8D%8F%E8%AE%AE%E7%9A%84%E7%AE%80%E5%8D%95%E7%90%86%E8%A7%A3/#more\">http://blog.huangyuanlove.com/2017/07/03/TCP%E5%8D%8F%E8%AE%AE%E7%9A%84%E7%AE%80%E5%8D%95%E7%90%86%E8%A7%A3/#more</a> 这里简单的记录了一下比较重要的东西。</p>\n<h3 id=\"其他：\"><a href=\"#其他：\" class=\"headerlink\" title=\"其他：\"></a>其他：</h3><p>加固原理 加的什么壳<br>kt var  val区别  when中的 is  in</p>"}],"PostAsset":[],"PostCategory":[],"PostTag":[{"post_id":"cjl3vbtpi0001isdgdc5x4sxa","tag_id":"cjl3vbtpr0005isdgb8u08ikv","_id":"cjl3vbtpx000aisdg3gqgedjy"},{"post_id":"cjl3vbtpn0003isdg7cxn1c7e","tag_id":"cjl3vbtpx0009isdgsttb5enf","_id":"cjl3vbtq5000iisdgimh1rgzc"},{"post_id":"cjl3vbtpn0003isdg7cxn1c7e","tag_id":"cjl3vbtpz000disdgnseeii6p","_id":"cjl3vbtq6000kisdg05gwdaqd"},{"post_id":"cjl3vbtq1000fisdgrya640gg","tag_id":"cjl3vbtpz000disdgnseeii6p","_id":"cjl3vbtq9000nisdgiljeutlh"},{"post_id":"cjl3vbtq4000hisdgaccsztim","tag_id":"cjl3vbtpz000disdgnseeii6p","_id":"cjl3vbtqb000pisdgcamv36ai"},{"post_id":"cjl3vbtq5000jisdgdmapqzz3","tag_id":"cjl3vbtpz000disdgnseeii6p","_id":"cjl3vbtql000sisdggljmtt6t"},{"post_id":"cjl3vbtq7000misdguc4hjvhk","tag_id":"cjl3vbtpz000disdgnseeii6p","_id":"cjl3vbtqm000uisdg1ldzeksf"},{"post_id":"cjl3vbtpt0006isdg193wzfpg","tag_id":"cjl3vbtpz000disdgnseeii6p","_id":"cjl3vbtqo000xisdg8v8te3uq"},{"post_id":"cjl3vbtpt0006isdg193wzfpg","tag_id":"cjl3vbtq6000lisdgceu5lpfx","_id":"cjl3vbtqo000zisdgv3v40ov6"},{"post_id":"cjl3vbtqa000oisdgvty331fz","tag_id":"cjl3vbtpz000disdgnseeii6p","_id":"cjl3vbtqq0012isdgcnk2zpts"},{"post_id":"cjl3vbtqc000risdg73rx3pu7","tag_id":"cjl3vbtpz000disdgnseeii6p","_id":"cjl3vbtqr0014isdg47gbiw02"},{"post_id":"cjl3vbtpu0007isdgajmrbb1j","tag_id":"cjl3vbtpz000disdgnseeii6p","_id":"cjl3vbtqs0017isdgrik8bkpr"},{"post_id":"cjl3vbtql000tisdgx7oi5t3u","tag_id":"cjl3vbtpz000disdgnseeii6p","_id":"cjl3vbtqu0019isdgd0p7kb93"},{"post_id":"cjl3vbtpw0008isdgndqdzq2p","tag_id":"cjl3vbtpz000disdgnseeii6p","_id":"cjl3vbtqw001cisdgqjf394s5"},{"post_id":"cjl3vbtqo000yisdgc38t3tc3","tag_id":"cjl3vbtpz000disdgnseeii6p","_id":"cjl3vbtqx001eisdg99z4fs9s"},{"post_id":"cjl3vbtqq0013isdgibc0rs4h","tag_id":"cjl3vbtpz000disdgnseeii6p","_id":"cjl3vbtqz001hisdguqwxmicc"},{"post_id":"cjl3vbtpy000bisdgk51k4o11","tag_id":"cjl3vbtpz000disdgnseeii6p","_id":"cjl3vbtr0001jisdgwzajry9w"},{"post_id":"cjl3vbtpy000bisdgk51k4o11","tag_id":"cjl3vbtqr0015isdgf4pgpdpz","_id":"cjl3vbtr1001misdg14yw2nwl"},{"post_id":"cjl3vbtqu001aisdgce8ykvys","tag_id":"cjl3vbtpz000disdgnseeii6p","_id":"cjl3vbtr3001oisdgo6fm044o"},{"post_id":"cjl3vbtqx001disdgsmtdr08e","tag_id":"cjl3vbtq6000lisdgceu5lpfx","_id":"cjl3vbtr4001risdgefdacxji"},{"post_id":"cjl3vbtpz000cisdgacch2b91","tag_id":"cjl3vbtpz000disdgnseeii6p","_id":"cjl3vbtr6001tisdgc13yvkax"},{"post_id":"cjl3vbtpz000cisdgacch2b91","tag_id":"cjl3vbtqz001gisdgr4gtpkl7","_id":"cjl3vbtr7001visdgr6fupmaw"},{"post_id":"cjl3vbtq0000eisdgoprk0wx7","tag_id":"cjl3vbtpz000disdgnseeii6p","_id":"cjl3vbtr9001yisdgs8cjafxc"},{"post_id":"cjl3vbtq0000eisdgoprk0wx7","tag_id":"cjl3vbtqr0015isdgf4pgpdpz","_id":"cjl3vbtrb0020isdguen2gtbw"},{"post_id":"cjl3vbtqn000wisdgelo9d0dq","tag_id":"cjl3vbtr4001qisdgzjwlxv8e","_id":"cjl3vbtrc0023isdgtqzyr5h0"},{"post_id":"cjl3vbtqp0011isdg0e4vvrhw","tag_id":"cjl3vbtr4001qisdgzjwlxv8e","_id":"cjl3vbtrd0025isdgrzhe0ozy"},{"post_id":"cjl3vbtra001zisdgh4x035ic","tag_id":"cjl3vbtpz000disdgnseeii6p","_id":"cjl3vbtre0028isdgugvu3v21"},{"post_id":"cjl3vbtqr0016isdgs7vkft9i","tag_id":"cjl3vbtr4001qisdgzjwlxv8e","_id":"cjl3vbtrf002aisdgx9n590zx"},{"post_id":"cjl3vbtrd0024isdgzjcavaom","tag_id":"cjl3vbtpz000disdgnseeii6p","_id":"cjl3vbtrf002disdg6zushhfo"},{"post_id":"cjl3vbtre0027isdg1rr7e0zq","tag_id":"cjl3vbtpz000disdgnseeii6p","_id":"cjl3vbtrg002fisdgfnxd4b48"},{"post_id":"cjl3vbtqt0018isdga2ng3byc","tag_id":"cjl3vbtrd0026isdgcngvuxnl","_id":"cjl3vbtrh002iisdg75b8sar0"},{"post_id":"cjl3vbtrf002cisdgtcpcfsu5","tag_id":"cjl3vbtpz000disdgnseeii6p","_id":"cjl3vbtrh002kisdgunuxwmfk"},{"post_id":"cjl3vbtqy001fisdgiklfbgdx","tag_id":"cjl3vbtr4001qisdgzjwlxv8e","_id":"cjl3vbtri002nisdgkhcduwx4"},{"post_id":"cjl3vbtrf002eisdga1hw2sz0","tag_id":"cjl3vbtpz000disdgnseeii6p","_id":"cjl3vbtrj002pisdgc0i2gobl"},{"post_id":"cjl3vbtqz001iisdg0zb6hvun","tag_id":"cjl3vbtrg002gisdgpi7swc6o","_id":"cjl3vbtrl002tisdgcx93099g"},{"post_id":"cjl3vbtqz001iisdg0zb6hvun","tag_id":"cjl3vbtri002misdgso1pacjr","_id":"cjl3vbtrm002visdgygxu1s2f"},{"post_id":"cjl3vbtr0001kisdgwkm6np88","tag_id":"cjl3vbtrd0026isdgcngvuxnl","_id":"cjl3vbtrn002yisdg0z2cdlwj"},{"post_id":"cjl3vbtr2001nisdgf1eh6q9j","tag_id":"cjl3vbtrd0026isdgcngvuxnl","_id":"cjl3vbtrp0032isdgcqwt74fv"},{"post_id":"cjl3vbtrn002zisdg4pz76o5o","tag_id":"cjl3vbtpx0009isdgsttb5enf","_id":"cjl3vbtrq0034isdgcbjuwvvx"},{"post_id":"cjl3vbtrn002zisdg4pz76o5o","tag_id":"cjl3vbtpz000disdgnseeii6p","_id":"cjl3vbtrr0037isdgqzlrk493"},{"post_id":"cjl3vbtro0031isdg5etm2hmm","tag_id":"cjl3vbtpz000disdgnseeii6p","_id":"cjl3vbtrs0039isdgs010p1xj"},{"post_id":"cjl3vbtro0031isdg5etm2hmm","tag_id":"cjl3vbtpx0009isdgsttb5enf","_id":"cjl3vbtru003cisdg9x9j3nju"},{"post_id":"cjl3vbtr3001pisdgqj55nvex","tag_id":"cjl3vbtrd0026isdgcngvuxnl","_id":"cjl3vbtrv003eisdgp0subfgq"},{"post_id":"cjl3vbtrp0033isdgq0osqjtc","tag_id":"cjl3vbtpr0005isdgb8u08ikv","_id":"cjl3vbtrv003hisdgihnfz33i"},{"post_id":"cjl3vbtrr0036isdg9d000m3x","tag_id":"cjl3vbtpr0005isdgb8u08ikv","_id":"cjl3vbtrw003jisdgrvmoqp0c"},{"post_id":"cjl3vbtr4001sisdgygs5zquf","tag_id":"cjl3vbtrd0026isdgcngvuxnl","_id":"cjl3vbtrx003misdg6ksbgadx"},{"post_id":"cjl3vbtr7001uisdg6wgyc41q","tag_id":"cjl3vbtrd0026isdgcngvuxnl","_id":"cjl3vbtry003oisdgpzq4srjl"},{"post_id":"cjl3vbtru003disdguqo607yn","tag_id":"cjl3vbtpz000disdgnseeii6p","_id":"cjl3vbtrz003risdgeq9kj2bd"},{"post_id":"cjl3vbtrw003lisdgnrlwyk23","tag_id":"cjl3vbtpz000disdgnseeii6p","_id":"cjl3vbts0003sisdg31zj1wr3"},{"post_id":"cjl3vbtr8001xisdgblhrmphb","tag_id":"cjl3vbtpz000disdgnseeii6p","_id":"cjl3vbts1003uisdgh75be63s"},{"post_id":"cjl3vbtr8001xisdgblhrmphb","tag_id":"cjl3vbtrv003fisdge8khnv50","_id":"cjl3vbts1003visdgefxb7cga"},{"post_id":"cjl3vbtr8001xisdgblhrmphb","tag_id":"cjl3vbtrw003kisdg64ywgls3","_id":"cjl3vbts1003wisdg4etp89a2"},{"post_id":"cjl3vbtrx003nisdgxube2o7k","tag_id":"cjl3vbtpz000disdgnseeii6p","_id":"cjl3vbts2003yisdg7st48ruu"},{"post_id":"cjl3vbtry003qisdgzisc7sx1","tag_id":"cjl3vbtpz000disdgnseeii6p","_id":"cjl3vbts2003zisdgev7a6yhc"},{"post_id":"cjl3vbtry003qisdgzisc7sx1","tag_id":"cjl3vbtqz001gisdgr4gtpkl7","_id":"cjl3vbts20041isdgucs13xoe"},{"post_id":"cjl3vbtrc0022isdgm5iennv1","tag_id":"cjl3vbtry003pisdgq2o82mb2","_id":"cjl3vbts20042isdg3728nyp0"},{"post_id":"cjl3vbtre0029isdgshoamc5k","tag_id":"cjl3vbts0003tisdglkya1d4e","_id":"cjl3vbts20044isdgtz1jbrq3"},{"post_id":"cjl3vbtre0029isdgshoamc5k","tag_id":"cjl3vbtri002misdgso1pacjr","_id":"cjl3vbts30045isdgz2vwowhw"},{"post_id":"cjl3vbtrg002hisdgyu6fyvip","tag_id":"cjl3vbts20040isdgll2beprj","_id":"cjl3vbts30047isdg2d5y1ikx"},{"post_id":"cjl3vbtrg002hisdgyu6fyvip","tag_id":"cjl3vbts20043isdg3solvps6","_id":"cjl3vbts30048isdgsdvq1f52"},{"post_id":"cjl3vbtrh002jisdga4hao0pq","tag_id":"cjl3vbts30046isdgingdbnte","_id":"cjl3vbts4004aisdgoa5zaajn"},{"post_id":"cjl3vbtrh002lisdglm9m7t65","tag_id":"cjl3vbts30049isdgdgyhsn5q","_id":"cjl3vbts5004eisdgakvp8m2y"},{"post_id":"cjl3vbtrh002lisdglm9m7t65","tag_id":"cjl3vbts4004bisdg1me8k6ex","_id":"cjl3vbts5004fisdg99lus9ic"},{"post_id":"cjl3vbtrh002lisdglm9m7t65","tag_id":"cjl3vbts4004cisdgldy1u8rn","_id":"cjl3vbts5004hisdgqtzqs1i6"},{"post_id":"cjl3vbtri002oisdg1py23koz","tag_id":"cjl3vbts30049isdgdgyhsn5q","_id":"cjl3vbts6004kisdglx1z1oeb"},{"post_id":"cjl3vbtri002oisdg1py23koz","tag_id":"cjl3vbts4004bisdg1me8k6ex","_id":"cjl3vbts7004lisdgvm9iyd4z"},{"post_id":"cjl3vbtri002oisdg1py23koz","tag_id":"cjl3vbts4004cisdgldy1u8rn","_id":"cjl3vbts7004nisdghykblvqk"},{"post_id":"cjl3vbtrj002qisdgnsk2n910","tag_id":"cjl3vbts4004cisdgldy1u8rn","_id":"cjl3vbts8004qisdgjqenlki1"},{"post_id":"cjl3vbtrj002qisdgnsk2n910","tag_id":"cjl3vbts4004bisdg1me8k6ex","_id":"cjl3vbts8004risdg3s0cn3b1"},{"post_id":"cjl3vbtrj002qisdgnsk2n910","tag_id":"cjl3vbts30049isdgdgyhsn5q","_id":"cjl3vbts8004tisdggoqc3zh7"},{"post_id":"cjl3vbtrk002sisdggndgyv98","tag_id":"cjl3vbtpx0009isdgsttb5enf","_id":"cjl3vbts8004uisdgq42zwgqt"},{"post_id":"cjl3vbtrk002sisdggndgyv98","tag_id":"cjl3vbtpz000disdgnseeii6p","_id":"cjl3vbts9004wisdg14r2pi2h"},{"post_id":"cjl3vbtrk002sisdggndgyv98","tag_id":"cjl3vbts7004pisdg8dkk0wx6","_id":"cjl3vbts9004xisdg9jp8posc"},{"post_id":"cjl3vbtrl002uisdgjj2olad5","tag_id":"cjl3vbtpx0009isdgsttb5enf","_id":"cjl3vbts9004zisdg8l9q4gm9"},{"post_id":"cjl3vbtrl002uisdgjj2olad5","tag_id":"cjl3vbtpz000disdgnseeii6p","_id":"cjl3vbts90050isdgl4mi19n3"},{"post_id":"cjl3vbtrl002uisdgjj2olad5","tag_id":"cjl3vbts8004sisdgfz1s1wx0","_id":"cjl3vbtsa0052isdgkj5lqhta"},{"post_id":"cjl3vbtrn002xisdgm4st30b9","tag_id":"cjl3vbtpx0009isdgsttb5enf","_id":"cjl3vbtsa0053isdgxwkehy5l"},{"post_id":"cjl3vbtrn002xisdgm4st30b9","tag_id":"cjl3vbtpz000disdgnseeii6p","_id":"cjl3vbtsa0055isdgfm2gqlac"},{"post_id":"cjl3vbtrn002xisdgm4st30b9","tag_id":"cjl3vbts8004sisdgfz1s1wx0","_id":"cjl3vbtsa0056isdgxm26bx81"},{"post_id":"cjl3vbtrr0038isdgmhrjbod3","tag_id":"cjl3vbts30046isdgingdbnte","_id":"cjl3vbtsb0058isdg73dbgm9a"},{"post_id":"cjl3vbtrr0038isdgmhrjbod3","tag_id":"cjl3vbtri002misdgso1pacjr","_id":"cjl3vbtsb0059isdgja5x3275"},{"post_id":"cjl3vbtrt003bisdgmoe8iz4v","tag_id":"cjl3vbtsa0051isdgsvbbp75n","_id":"cjl3vbtsb005aisdgxlfsxdmj"},{"post_id":"cjl3vbtrv003gisdgokuxty9v","tag_id":"cjl3vbtsa0051isdgsvbbp75n","_id":"cjl3vbtsb005bisdgkimoioaa"},{"post_id":"cjl3vbtrw003iisdgo985fjny","tag_id":"cjl3vbtsa0057isdg0d1nkwhz","_id":"cjl3vbtsb005cisdg5iw6i1aw"},{"post_id":"cjl3vbtrw003iisdgo985fjny","tag_id":"cjl3vbtpr0005isdgb8u08ikv","_id":"cjl3vbtsb005disdgdr7oin22"}],"Tag":[{"name":"乱七八糟","_id":"cjl3vbtpr0005isdgb8u08ikv"},{"name":"Android爬坑之旅","_id":"cjl3vbtpx0009isdgsttb5enf"},{"name":"Android","_id":"cjl3vbtpz000disdgnseeii6p"},{"name":"java","_id":"cjl3vbtq6000lisdgceu5lpfx"},{"name":"WebSocket","_id":"cjl3vbtqr0015isdgf4pgpdpz"},{"name":"面试","_id":"cjl3vbtqz001gisdgr4gtpkl7"},{"name":"JVM","_id":"cjl3vbtr4001qisdgzjwlxv8e"},{"name":"LaTeX","_id":"cjl3vbtrd0026isdgcngvuxnl"},{"name":"jenkins","_id":"cjl3vbtrg002gisdgpi7swc6o"},{"name":"运维","_id":"cjl3vbtri002misdgso1pacjr"},{"name":"热修复","_id":"cjl3vbtrv003fisdge8khnv50"},{"name":"tinker","_id":"cjl3vbtrw003kisdg64ywgls3"},{"name":"tcp协议","_id":"cjl3vbtry003pisdgq2o82mb2"},{"name":"elk","_id":"cjl3vbts0003tisdglkya1d4e"},{"name":"Python","_id":"cjl3vbts20040isdgll2beprj"},{"name":"flask","_id":"cjl3vbts20043isdg3solvps6"},{"name":"git","_id":"cjl3vbts30046isdgingdbnte"},{"name":"hexo","_id":"cjl3vbts30049isdgdgyhsn5q"},{"name":"gitpage","_id":"cjl3vbts4004bisdg1me8k6ex"},{"name":"blog","_id":"cjl3vbts4004cisdgldy1u8rn"},{"name":"融云IM","_id":"cjl3vbts7004pisdg8dkk0wx6"},{"name":"高德地图","_id":"cjl3vbts8004sisdgfz1s1wx0"},{"name":"csdn","_id":"cjl3vbtsa0051isdgsvbbp75n"},{"name":"网站https","_id":"cjl3vbtsa0057isdg0d1nkwhz"}]}}