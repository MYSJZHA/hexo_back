{"meta":{"version":1,"warehouse":"2.2.0"},"models":{"Asset":[{"_id":"source/CNAME","path":"CNAME","modified":1,"renderable":0},{"_id":"source/alipay.png","path":"alipay.png","modified":1,"renderable":0},{"_id":"source/weichat.png","path":"weichat.png","modified":1,"renderable":0},{"_id":"source/favicon.ico","path":"favicon.ico","modified":1,"renderable":0},{"_id":"source/image/location.png","path":"image/location.png","modified":1,"renderable":0},{"_id":"themes/yilia/source/main.2d7529.css","path":"main.2d7529.css","modified":1,"renderable":1},{"_id":"themes/yilia/source/mobile.d238ee.js","path":"mobile.d238ee.js","modified":1,"renderable":1},{"_id":"themes/yilia/source/slider.885efe.js","path":"slider.885efe.js","modified":1,"renderable":1},{"_id":"source/image/new_widget.png","path":"image/new_widget.png","modified":1,"renderable":0},{"_id":"themes/yilia/source/main.2d7529.js","path":"main.2d7529.js","modified":1,"renderable":1},{"_id":"source/image/2018_01_01.png","path":"image/2018_01_01.png","modified":1,"renderable":0},{"_id":"source/image/JVM/JVM_RunTime_Area.png","path":"image/JVM/JVM_RunTime_Area.png","modified":1,"renderable":0},{"_id":"source/image/csdn_blog_title.png","path":"image/csdn_blog_title.png","modified":1,"renderable":0},{"_id":"source/image/gaode/install_run.png","path":"image/gaode/install_run.png","modified":1,"renderable":0},{"_id":"source/image/git/git_diff_tool_codecompare.png","path":"image/git/git_diff_tool_codecompare.png","modified":1,"renderable":0},{"_id":"source/image/git/git_merge_tool_codecompare.png","path":"image/git/git_merge_tool_codecompare.png","modified":1,"renderable":0},{"_id":"source/image/jenkins/jenkins_config_project.png","path":"image/jenkins/jenkins_config_project.png","modified":1,"renderable":0},{"_id":"source/image/jenkins/jenkins_build_history.png","path":"image/jenkins/jenkins_build_history.png","modified":1,"renderable":0},{"_id":"source/image/jenkins/jenkins_maven.png","path":"image/jenkins/jenkins_maven.png","modified":1,"renderable":0},{"_id":"source/image/jenkins/jenkins_index.png","path":"image/jenkins/jenkins_index.png","modified":1,"renderable":0},{"_id":"source/image/jenkins/jenkins_jdk.png","path":"image/jenkins/jenkins_jdk.png","modified":1,"renderable":0},{"_id":"source/image/jenkins/jenkins_project_build.png","path":"image/jenkins/jenkins_project_build.png","modified":1,"renderable":0},{"_id":"source/image/hexo/Catalog.png","path":"image/hexo/Catalog.png","modified":1,"renderable":0},{"_id":"source/image/jenkins/jenkins_start_build_project.png","path":"image/jenkins/jenkins_start_build_project.png","modified":1,"renderable":0},{"_id":"source/image/hexo/hexo-v.png","path":"image/hexo/hexo-v.png","modified":1,"renderable":0},{"_id":"source/image/hexo/npm_install.png","path":"image/hexo/npm_install.png","modified":1,"renderable":0},{"_id":"source/image/hexo/nvm_install_6.6.0.png","path":"image/hexo/nvm_install_6.6.0.png","modified":1,"renderable":0},{"_id":"source/image/hexo/nvm_install_down.png","path":"image/hexo/nvm_install_down.png","modified":1,"renderable":0},{"_id":"source/image/hexo/nvm_ls-remote.png","path":"image/hexo/nvm_ls-remote.png","modified":1,"renderable":0},{"_id":"source/image/tcp/tcp1.png","path":"image/tcp/tcp1.png","modified":1,"renderable":0},{"_id":"source/image/tcp/tcp3.png","path":"image/tcp/tcp3.png","modified":1,"renderable":0},{"_id":"source/image/tcp/tcp4.png","path":"image/tcp/tcp4.png","modified":1,"renderable":0},{"_id":"themes/yilia/source/fonts/iconfont.b7ae25.ttf","path":"fonts/iconfont.b7ae25.ttf","modified":1,"renderable":1},{"_id":"themes/yilia/source/fonts/iconfont.59e68b.eot","path":"fonts/iconfont.59e68b.eot","modified":1,"renderable":1},{"_id":"themes/yilia/source/fonts/default-skin.b257fa.svg","path":"fonts/default-skin.b257fa.svg","modified":1,"renderable":1},{"_id":"themes/yilia/source/fonts/iconfont.dba24b.svg","path":"fonts/iconfont.dba24b.svg","modified":1,"renderable":1},{"_id":"themes/yilia/source/fonts/tooltip.4004ff.svg","path":"fonts/tooltip.4004ff.svg","modified":1,"renderable":1},{"_id":"themes/yilia/source/fonts/iconfont.ca3627.woff","path":"fonts/iconfont.ca3627.woff","modified":1,"renderable":1},{"_id":"themes/yilia/source/img/default-skin.png","path":"img/default-skin.png","modified":1,"renderable":1},{"_id":"themes/yilia/source/img/preloader.gif","path":"img/preloader.gif","modified":1,"renderable":1},{"_id":"themes/yilia/source/img/scrollbar_arrow.png","path":"img/scrollbar_arrow.png","modified":1,"renderable":1},{"_id":"source/image/Library_Plant_specimen2.jpg","path":"image/Library_Plant_specimen2.jpg","modified":1,"renderable":0},{"_id":"source/image/Library_Plant_specimen1.jpg","path":"image/Library_Plant_specimen1.jpg","modified":1,"renderable":0},{"_id":"source/image/Library_Plant_specimen4.jpg","path":"image/Library_Plant_specimen4.jpg","modified":1,"renderable":0},{"_id":"source/image/Library_Plant_specimen3.jpg","path":"image/Library_Plant_specimen3.jpg","modified":1,"renderable":0},{"_id":"source/image/Tsinghua.jpg","path":"image/Tsinghua.jpg","modified":1,"renderable":0},{"_id":"source/image/csdn_home.png","path":"image/csdn_home.png","modified":1,"renderable":0},{"_id":"source/image/gaode/geocoderSearch_bug.png","path":"image/gaode/geocoderSearch_bug.png","modified":1,"renderable":0},{"_id":"source/image/git/git_diff_tool_bc.png","path":"image/git/git_diff_tool_bc.png","modified":1,"renderable":0},{"_id":"source/image/git/git_merge_tool_bc.png","path":"image/git/git_merge_tool_bc.png","modified":1,"renderable":0},{"_id":"source/image/git/git_init_tree.png","path":"image/git/git_init_tree.png","modified":1,"renderable":0},{"_id":"source/image/jenkins/jenkins_build_console_output.png","path":"image/jenkins/jenkins_build_console_output.png","modified":1,"renderable":0},{"_id":"source/image/hexo/duoshuo.png","path":"image/hexo/duoshuo.png","modified":1,"renderable":0},{"_id":"source/image/hexo/hexo_init.png","path":"image/hexo/hexo_init.png","modified":1,"renderable":0},{"_id":"source/image/hexo/hexo_install_nvm.png","path":"image/hexo/hexo_install_nvm.png","modified":1,"renderable":0},{"_id":"source/image/main_building.jpg","path":"image/main_building.jpg","modified":1,"renderable":0},{"_id":"source/image/hexo/npm_install_hexo.png","path":"image/hexo/npm_install_hexo.png","modified":1,"renderable":0},{"_id":"source/image/hexo/yilia_them.png","path":"image/hexo/yilia_them.png","modified":1,"renderable":0},{"_id":"source/image/tcp/tcp2.png","path":"image/tcp/tcp2.png","modified":1,"renderable":0},{"_id":"source/image/tcp/tcp5.png","path":"image/tcp/tcp5.png","modified":1,"renderable":0},{"_id":"source/image/sign.jpg","path":"image/sign.jpg","modified":1,"renderable":0},{"_id":"source/image/Library.jpg","path":"image/Library.jpg","modified":1,"renderable":0},{"_id":"source/image/PHBS1.jpg","path":"image/PHBS1.jpg","modified":1,"renderable":0},{"_id":"source/image/jenkins/jenkins_create_new_project.png","path":"image/jenkins/jenkins_create_new_project.png","modified":1,"renderable":0},{"_id":"source/image/jenkins/jenkins_start.png","path":"image/jenkins/jenkins_start.png","modified":1,"renderable":0},{"_id":"source/image/tcp/tcp6.png","path":"image/tcp/tcp6.png","modified":1,"renderable":0},{"_id":"source/image/tcp/tcp7.png","path":"image/tcp/tcp7.png","modified":1,"renderable":0},{"_id":"source/image/python/Flask/pycharm_project_setting1.png","path":"image/python/Flask/pycharm_project_setting1.png","modified":1,"renderable":0},{"_id":"source/image/python/Flask/pycharm_project_setting2.png","path":"image/python/Flask/pycharm_project_setting2.png","modified":1,"renderable":0},{"_id":"source/image/Beware_of_ snakes.jpg","path":"image/Beware_of_ snakes.jpg","modified":1,"renderable":0},{"_id":"source/image/Meal3.jpg","path":"image/Meal3.jpg","modified":1,"renderable":0},{"_id":"source/image/PHBS.jpg","path":"image/PHBS.jpg","modified":1,"renderable":0},{"_id":"source/image/Restaurant.jpg","path":"image/Restaurant.jpg","modified":1,"renderable":0},{"_id":"source/image/Meal1.jpg","path":"image/Meal1.jpg","modified":1,"renderable":0},{"_id":"source/image/Meal2.jpg","path":"image/Meal2.jpg","modified":1,"renderable":0},{"_id":"source/image/South_Gate.jpg","path":"image/South_Gate.jpg","modified":1,"renderable":0},{"_id":"source/image/gaode/install_run_bug.png","path":"image/gaode/install_run_bug.png","modified":1,"renderable":0},{"_id":"source/image/gaode/walk_route_bug.png","path":"image/gaode/walk_route_bug.png","modified":1,"renderable":0},{"_id":"source/image/hexo/hexo_hello.png","path":"image/hexo/hexo_hello.png","modified":1,"renderable":0}],"Cache":[{"_id":"source/CNAME","hash":"b028dfd1f7007d9ca630d3f65fdcd8465c16d5d7","modified":1514639587218},{"_id":"source/alipay.png","hash":"815b49a7951c8e89e36be54db535e3d700f8f170","modified":1498985337279},{"_id":"source/weichat.png","hash":"efeb49a2c795383181697dc3ee84787e7136d5fc","modified":1498985337414},{"_id":"themes/yilia/.babelrc","hash":"db600d40e93e6d8023737a65d58d3be7370e5e30","modified":1498985337419},{"_id":"themes/yilia/.editorconfig","hash":"daaa8757fac18f8735fadd0a37a42c06f421ca14","modified":1498985337420},{"_id":"themes/yilia/.eslintrc.js","hash":"303d25adf02ad65720e537a16a4a137d14bb755f","modified":1498985337421},{"_id":"themes/yilia/.eslintignore","hash":"ed9d8911ca08c3dd5072c48dd0be4d06f8897730","modified":1498985337421},{"_id":"themes/yilia/.gitattributes","hash":"758cfbecfa7919e99abddf3297f37cde7e3d8d4e","modified":1498985337422},{"_id":"themes/yilia/README.md","hash":"0becd9c18f9d44fc364788a34a4f3ec82ca7940a","modified":1498985337427},{"_id":"themes/yilia/.gitignore","hash":"d5fc575329853ff620b50fc62ad4b18fa09a308a","modified":1498985337423},{"_id":"themes/yilia/_config.yml","hash":"79da47ba39e91a1cc3bde0cd86c624ec5833b2e0","modified":1498985337428},{"_id":"themes/yilia/package.json","hash":"4631f9013f0b1c5fc5d73af4c3624375bfe4d109","modified":1498985337456},{"_id":"themes/yilia/webpack.config.js","hash":"14fe482547b12b15bc78cb981c42a4ca5b6ba770","modified":1498985337485},{"_id":"source/favicon.ico","hash":"f7947fb76cdbd69b54975dc8da017e31a68a61ac","modified":1498985337281},{"_id":"source/_posts/2016国庆.md","hash":"4995e53ae88cdcfd78950bbe8584ba580dae8f40","modified":1514790864418},{"_id":"source/_posts/Android的消息机制.md","hash":"929f479b3faffbbbb704973ce55dd91ed9ce5e91","modified":1514639587220},{"_id":"source/_posts/Android-N-应用内更新.md","hash":"cbdbd26b2eb1b3cc6f7a1a76dc749f11678faea4","modified":1498985337261},{"_id":"source/_posts/Android中使用WebSocket-2.md","hash":"d4e5846d5c24f06d39c162c1acc739b2d39817f6","modified":1514639587219},{"_id":"source/_posts/Android中使用WebSocket.md","hash":"0ad5b5dbd81cd610a9ece65adf0e5a7714e40c54","modified":1514639587219},{"_id":"source/_posts/JVM内存区域.md","hash":"005539c042f52c64bd08947a41af0f7e5a3e958a","modified":1514639587223},{"_id":"source/_posts/JVM-内存分配与回收策略.md","hash":"df4a591ed926ac4dfa12ae91086945c0dc32580f","modified":1514639587221},{"_id":"source/_posts/JVM垃圾回收-对象已死？.md","hash":"1797855e5360c49449c3c0437bacabf60349ced9","modified":1514639587224},{"_id":"source/_posts/Jenkins安装与使用.md","hash":"904cbdbfeb93564cf895ee4cb2eda28e4fedef9c","modified":1498985337266},{"_id":"source/_posts/JVM-垃圾收集算法.md","hash":"e2b4ee5febf3119ea1bb4cbd9cd9cb73028b58a8","modified":1514639587222},{"_id":"source/_posts/flask笔记一(快速入门).md","hash":"9e99e49c5aba2b1f3ffd04016fa50c672768356d","modified":1514639587227},{"_id":"source/_posts/TCP协议的简单理解.md","hash":"2e8f9fd075cefe6cba496d6bbd4aa4b4dd0fffd0","modified":1514639587225},{"_id":"source/_posts/hexo-gitpage搭建自己的博客-一.md","hash":"ace79c95bd30213300d12d0a43a692cafd8ccf98","modified":1514639587229},{"_id":"source/_posts/View的滑动.md","hash":"1ab101ba40a40eec67e2c6e59a84a34ed392a0a2","modified":1514639587226},{"_id":"source/_posts/Window和WindowManager.md","hash":"732a48280bd50e61c3af35ddca45188c68e946bb","modified":1514639587226},{"_id":"source/_posts/git工具.md","hash":"d29fee4efc262d5a5b1fe9c8e1dc3d3b12d80bc9","modified":1514639587228},{"_id":"source/_posts/elk简单环境搭建-for-linux.md","hash":"c3b6cc149dfb30e54eb49ee509cb42ee5f23a504","modified":1498985337268},{"_id":"source/_posts/hexo-gitpage搭建自己的博客-二.md","hash":"5e826f144105aa77d365d4e7051c17bd3ffd72fc","modified":1514639587229},{"_id":"source/_posts/hexo-gitpage搭建自己的博客-三.md","hash":"03c7ff024c0a05c998788719b63d790bb595e57a","modified":1498985337270},{"_id":"source/_posts/《我的安卓爬坑之旅》-融云IM遇到的坑.md","hash":"fe32da36bc9831be7e8fd328ec5a7dde33181956","modified":1514639587230},{"_id":"source/_posts/《我的安卓爬坑之旅》-高德地图遇到的坑-2.md","hash":"e66b72c38a444f3b19022e1a5d0c1697ee1a2232","modified":1514639587231},{"_id":"source/_posts/《我的安卓爬坑之旅》-高德地图遇到的坑-3.md","hash":"cec35721bdea43d4acb74b5dd8fdb0e30a766018","modified":1514639587231},{"_id":"source/_posts/《我的安卓爬坑之旅》-高德地图遇到的坑-1.md","hash":"187c26514cb4b773d2555a7cd51a47a300378314","modified":1498985337272},{"_id":"source/_posts/《我的安卓爬坑之旅》.md","hash":"675378a3624bab3f14a87c801e940dd30c8ae00c","modified":1498985337274},{"_id":"source/_posts/写在2016年末.md","hash":"9e597bc1e2fd772988a59b1f045cdfe8d0da5d2f","modified":1514790876209},{"_id":"source/_posts/写在2018元旦之前-2017的总结.md","hash":"d6dca9dc8065e2d17d3a9e14a69afc27a5275dc4","modified":1514795329006},{"_id":"source/_posts/搭建git服务.md","hash":"cad5de01d923c4ffb997ccc14cef7d1dc4de8428","modified":1514639587233},{"_id":"source/_posts/原CSDN博客.md","hash":"28e67490cd562740a9d346c17d73cc0860ba37c1","modified":1498985337275},{"_id":"source/_posts/如何获取csdn中个人所有文章标题及链接.md","hash":"2ff705e98bc9b522508f0a57d6a04010f764caf4","modified":1514639587232},{"_id":"source/_posts/简单的桌面小部件.md","hash":"42338d4d374db54d197d7e2a5287bf917e685da7","modified":1498985337277},{"_id":"source/_posts/通过简单的自定义view来看View的工作流程.md","hash":"3338882c27e3e58e9b62efe263a86e6ec1d1c846","modified":1498985337279},{"_id":"source/image/location.png","hash":"83316f76819e9949bbc6c6d6672433fd15c8f17e","modified":1498985337408},{"_id":"themes/yilia/.idea/jsLibraryMappings.xml","hash":"f18ac7fbcfb0e7d04eece64e428f806b4e754668","modified":1498985337424},{"_id":"themes/yilia/.idea/misc.xml","hash":"0d81a7654b3ab7b1fa88a882ac9120820be781d1","modified":1498985337425},{"_id":"themes/yilia/.idea/modules.xml","hash":"b26d7723c3a1c9427c9412ae9774b74ec8fc947b","modified":1498985337425},{"_id":"themes/yilia/.idea/workspace.xml","hash":"3065213b31715a75dbf7aed2e537b1e2cd79f727","modified":1498985337426},{"_id":"themes/yilia/.idea/yilia.iml","hash":"c7c4a216364e1a90dc9ebf19e4c967f26c4f8e52","modified":1498985337427},{"_id":"themes/yilia/languages/fr.yml","hash":"b4be1c1592a72012e48df2b3ec41cc9685573e50","modified":1498985337430},{"_id":"themes/yilia/languages/nl.yml","hash":"3d82ec703d0b3287739d7cb4750a715ae83bfcb3","modified":1498985337430},{"_id":"themes/yilia/languages/no.yml","hash":"ddf2035e920a5ecb9076138c184257d9f51896a7","modified":1498985337431},{"_id":"themes/yilia/languages/default.yml","hash":"f26a34a7983d4bc17c65c7f0f14da598e62ce66d","modified":1498985337429},{"_id":"themes/yilia/languages/ru.yml","hash":"2a476b4c6e04900914c81378941640ac5d58a1f0","modified":1498985337432},{"_id":"themes/yilia/languages/zh-CN.yml","hash":"b057f389c6713010f97d461e48ec959b0b6f3b44","modified":1498985337433},{"_id":"themes/yilia/languages/zh-tw.yml","hash":"f5f0ca88185da7a8457760d84bf221781473bd7c","modified":1498985337433},{"_id":"themes/yilia/layout/archive.ejs","hash":"2703b07cc8ac64ae46d1d263f4653013c7e1666b","modified":1498985337452},{"_id":"themes/yilia/layout/category.ejs","hash":"765426a9c8236828dc34759e604cc2c52292835a","modified":1498985337452},{"_id":"themes/yilia/layout/index.ejs","hash":"ec498c6c0606acde997ce195dad97b267418d980","modified":1498985337453},{"_id":"themes/yilia/layout/layout.ejs","hash":"b471ab706d48e0be3f783eab1c94bf5878ef5a94","modified":1498985337454},{"_id":"themes/yilia/layout/page.ejs","hash":"7d80e4e36b14d30a7cd2ac1f61376d9ebf264e8b","modified":1498985337454},{"_id":"themes/yilia/layout/post.ejs","hash":"7d80e4e36b14d30a7cd2ac1f61376d9ebf264e8b","modified":1498985337455},{"_id":"themes/yilia/source-src/css.ejs","hash":"cf7eab48d626433120d1ef9697f719a359817018","modified":1498985337458},{"_id":"themes/yilia/layout/tag.ejs","hash":"eaa7b4ccb2ca7befb90142e4e68995fb1ea68b2e","modified":1498985337456},{"_id":"themes/yilia/source-src/script.ejs","hash":"28abac2426761d7e715b38aadd86ce6549c8ae77","modified":1498985337478},{"_id":"themes/yilia/source/main.2d7529.css","hash":"2eef112e365f9b00664302ba98b517662c75d411","modified":1498985337483},{"_id":"themes/yilia/source/mobile.d238ee.js","hash":"a054884092af1cc5c2c14e5e11a4dac6d9254481","modified":1498985337484},{"_id":"themes/yilia/source/slider.885efe.js","hash":"41a76cb10a2b344d54a15ffac68d17331fc6f3d6","modified":1498985337485},{"_id":"source/image/new_widget.png","hash":"c39ced27f848ef2a69f7e6e28b2b17d5af82dd91","modified":1498985337411},{"_id":"themes/yilia/source/main.2d7529.js","hash":"a0359e7962038f53f9ffbd02dcc52485f8e04da8","modified":1498985337483},{"_id":"source/image/2018_01_01.png","hash":"0396b5d5f4c87a1cfdc2ec70d0685baa4485e343","modified":1514795021207},{"_id":"source/image/JVM/JVM_RunTime_Area.png","hash":"9000bdd0c0cadd3eaf40bdecf081e1baa15e370f","modified":1498985337285},{"_id":"source/image/csdn_blog_title.png","hash":"40a2c69aa442cc5c95dc2ff5491207380af9de69","modified":1498985337314},{"_id":"source/image/gaode/install_run.png","hash":"60e54f63cd184e47523a505e7a52336c2280202a","modified":1498985337317},{"_id":"source/image/git/git_diff_tool_codecompare.png","hash":"df3f29280b14000e0f7e1b0744e9f5b816b30d6d","modified":1498985337376},{"_id":"source/image/git/git_merge_tool_codecompare.png","hash":"c90c690c56b47ea6c0da763f14c106fba47e6836","modified":1498985337382},{"_id":"source/image/jenkins/jenkins_config_project.png","hash":"efb96ad7daa2301f2999799fa43565520451ee97","modified":1498985337400},{"_id":"source/image/jenkins/jenkins_build_history.png","hash":"c8f6cfcd97256588c2c3f4100c4ef496ac8fbbb8","modified":1498985337399},{"_id":"source/image/jenkins/jenkins_maven.png","hash":"c0cfca773937c55a6219576c4795c89aaf1e88ef","modified":1498985337404},{"_id":"source/image/jenkins/jenkins_index.png","hash":"9a56f2aa69c9717a0bdd959b26949e90ff970bf7","modified":1498985337403},{"_id":"source/image/jenkins/jenkins_jdk.png","hash":"ec847c34b6f0127fb30d1798b433d446aaf7f01f","modified":1498985337403},{"_id":"source/image/jenkins/jenkins_project_build.png","hash":"411f3fe3974160ed4d520b89267f2f26bcdb13bc","modified":1498985337405},{"_id":"source/image/hexo/Catalog.png","hash":"c1fb4830a844538a1f3c33645a1d2beb4ef23b85","modified":1498985337383},{"_id":"source/image/jenkins/jenkins_start_build_project.png","hash":"19b4973e82263f805470a6b1bd89c055bbd7b4ae","modified":1498985337407},{"_id":"source/image/hexo/hexo-v.png","hash":"d04daee47710412415a4b1de2718f36e79586f48","modified":1498985337385},{"_id":"source/image/hexo/npm_install.png","hash":"c1586b55472528a70b7e7a9cc1487a2d57ee3f0b","modified":1498985337391},{"_id":"source/image/hexo/nvm_install_6.6.0.png","hash":"d7f18ccf8a4a9ea798752fc9a0ae464da06831f3","modified":1498985337393},{"_id":"source/image/hexo/nvm_install_down.png","hash":"a2a0e01341881c3d3e9e21e7ffe9ad2ee12680fd","modified":1498985337394},{"_id":"source/image/hexo/nvm_ls-remote.png","hash":"9ba963bf4bd2a95349919d66c7b7a56b876a5377","modified":1498985337395},{"_id":"source/image/tcp/tcp1.png","hash":"cd47cb2ecdb3d93bdc0c1abf7b22b01beca2992d","modified":1514639587238},{"_id":"source/image/tcp/tcp3.png","hash":"91ebf7918373ad75930758135a5323fa3a991663","modified":1514639587239},{"_id":"source/image/tcp/tcp4.png","hash":"9bfd72e1cf0c1614397da9ae4baf11298eeb08f3","modified":1514639587240},{"_id":"themes/yilia/layout/_partial/archive-post.ejs","hash":"edc0154b30a4127acda10297bec6aacf754b4ac4","modified":1498985337435},{"_id":"themes/yilia/layout/_partial/after-footer.ejs","hash":"61c95c49baa2c1bfd99cf88c55ba205b44bf3d97","modified":1498985337434},{"_id":"themes/yilia/layout/_partial/archive.ejs","hash":"cc741e1c3a4b81f698ec2f0edee872e0a69bf23c","modified":1498985337436},{"_id":"themes/yilia/layout/_partial/article.ejs","hash":"f3cd5b5f6734beb757dfe9a66fd15c7529b33434","modified":1498985337437},{"_id":"themes/yilia/layout/_partial/baidu-analytics.ejs","hash":"155327c23607f69989b58845f24d842a54e504b8","modified":1498985337437},{"_id":"themes/yilia/layout/_partial/baidu_tongji.ejs","hash":"28e33c7531fe566c2eaa3da3758fd2921b02c0d4","modified":1498985337438},{"_id":"themes/yilia/layout/_partial/google-analytics.ejs","hash":"1ccc627d7697e68fddc367c73ac09920457e5b35","modified":1498985337440},{"_id":"themes/yilia/layout/_partial/css.ejs","hash":"db8c42ab7e339c240b7044896a3987555ea9b5b8","modified":1498985337439},{"_id":"themes/yilia/layout/_partial/footer.ejs","hash":"871f81cacd5d41cb2eb001cd56254217a857dc2f","modified":1498985337439},{"_id":"themes/yilia/layout/_partial/header.ejs","hash":"b69855e07b65117769adc515cb64b803932068c9","modified":1498985337441},{"_id":"themes/yilia/layout/_partial/head.ejs","hash":"ee1576f38f5744aa630275028962fcc128cf4e1a","modified":1514639587245},{"_id":"themes/yilia/layout/_partial/mathjax.ejs","hash":"11550a418921d330e6553be0569a94ab5a217967","modified":1498985337443},{"_id":"themes/yilia/layout/_partial/left-col.ejs","hash":"e2b3f2b3631ef211a4d98d11f0da2d285340f10e","modified":1498985337442},{"_id":"themes/yilia/layout/_partial/js_push_to_baidu.ejs","hash":"002697ed91bb85104aa548dcc52f30c142c41ee7","modified":1514639587245},{"_id":"themes/yilia/layout/_partial/mobile-nav.ejs","hash":"ccec1fc70f021cb50ac85b524e7949878ab93a18","modified":1498985337444},{"_id":"themes/yilia/layout/_partial/script.ejs","hash":"8c295469bd1602e9d3bbf2fee81ff84cacb1d701","modified":1498985337450},{"_id":"themes/yilia/layout/_partial/viewer.ejs","hash":"cc1c39903aed0a0601d104238d2bbd13ad2a36f3","modified":1498985337451},{"_id":"themes/yilia/layout/_partial/tools.ejs","hash":"538b6d35b25cbdba7dc77feec638336625c8ef8b","modified":1498985337450},{"_id":"themes/yilia/source-src/css/_core.scss","hash":"29ba600e98ed55f7af4ade8038272c84cba21188","modified":1498985337458},{"_id":"themes/yilia/source-src/css/_function.scss","hash":"ce227b6f5a9af194fd5d455200630f32c05e151f","modified":1498985337459},{"_id":"themes/yilia/source-src/css/archive.scss","hash":"8a0ae8ee6af8df3f215f1cd4ecc10145a5b92cf0","modified":1498985337459},{"_id":"themes/yilia/source-src/css/article-main.scss","hash":"1577a2336b3ad122f49f60dff2bc1a97d4e7b18b","modified":1498985337461},{"_id":"themes/yilia/source-src/css/article-nav.scss","hash":"9069371dcc65eee63081a21e8a56a9f3dbf64c08","modified":1498985337461},{"_id":"themes/yilia/source-src/css/article-inner.scss","hash":"4115c4518cca3f5cf461018aa7a7321138d017cc","modified":1498985337460},{"_id":"themes/yilia/source-src/css/duoshuo.scss","hash":"948e44c47c3d70584da93e7ce025dede9b7573d7","modified":1498985337464},{"_id":"themes/yilia/source-src/css/article.scss","hash":"55d082fec4c6bb341725567acaa29ce37d50320a","modified":1498985337461},{"_id":"themes/yilia/source-src/css/fonts.scss","hash":"5dc23be94451d54f0757de85747fd75061e8cf52","modified":1498985337464},{"_id":"themes/yilia/source-src/css/footer.scss","hash":"7ca837a4cc34db1c35f01baec85eb10ccc64ea86","modified":1498985337467},{"_id":"themes/yilia/source-src/css/grid.scss","hash":"f53ea8270752b5919ec5d79224d22af91f2eda12","modified":1498985337467},{"_id":"themes/yilia/source-src/css/global.scss","hash":"b4cb4f45a55d4250cd9056f76dab2a3c0dabcec4","modified":1498985337467},{"_id":"themes/yilia/source-src/css/highlight.scss","hash":"40e5aa5056dc0b3b9f51c5b387370b612e265d4e","modified":1498985337468},{"_id":"themes/yilia/source-src/css/left.scss","hash":"1ee3dd6fa50186af5bedb09d4a0e6b47ddb1b57b","modified":1498985337469},{"_id":"themes/yilia/source-src/css/mobile-slider.scss","hash":"19f10fd2f0c3377aa4b165b3c2291ecf86dd9351","modified":1498985337470},{"_id":"themes/yilia/source-src/css/mobile.scss","hash":"28a01c3d85ec3194095f96988642a16d461f1077","modified":1498985337470},{"_id":"themes/yilia/source-src/css/main.scss","hash":"b63c0f9b3bf68efc3bcd7c816bcac6f2fb827528","modified":1498985337470},{"_id":"themes/yilia/source-src/css/reward.scss","hash":"a557a9ed244c82b8b71e9da9de3339d92783499f","modified":1498985337471},{"_id":"themes/yilia/source-src/css/page.scss","hash":"244c4d75c375978ff9edb74acc68825e63c6b235","modified":1498985337471},{"_id":"themes/yilia/source-src/css/scroll.scss","hash":"2495f7e4e3b055735c531f944b5f40a118a351ec","modified":1498985337471},{"_id":"themes/yilia/source-src/css/tags.scss","hash":"915c93edd67c5326695cc7dc84b14c5f154dbcc8","modified":1498985337473},{"_id":"themes/yilia/source-src/css/share.scss","hash":"9d6f6884f40c191882e56a1e1e1192400944a515","modified":1498985337472},{"_id":"themes/yilia/source-src/css/social.scss","hash":"70c2e36b7161717feed1f231271ed693c36407d1","modified":1498985337472},{"_id":"themes/yilia/source-src/css/tools.scss","hash":"f5bed08765a8f0a344af5d4781ff822a57028148","modified":1498985337473},{"_id":"themes/yilia/source-src/css/tags-cloud.scss","hash":"399744e98e7c67939ed9b23c2670d8baad044eda","modified":1498985337472},{"_id":"themes/yilia/source-src/js/anm.js","hash":"d18f6276a352b871390a4112d479b9e58b8cdbbe","modified":1498985337475},{"_id":"themes/yilia/source-src/js/Q.js","hash":"e56d9710afa79b31ca6b9fbd845f6d1895f5214b","modified":1498985337475},{"_id":"themes/yilia/source-src/css/tooltip.scss","hash":"b81cedbe31accca82e597801186911a7b5e6841c","modified":1498985337474},{"_id":"themes/yilia/source-src/js/browser.js","hash":"4dc04845cf27f350922b63f1813a9c82e6e33b05","modified":1498985337475},{"_id":"themes/yilia/source-src/js/fix.js","hash":"eccdcc7ee79adebf450bc655b2e80eb6801421a6","modified":1498985337476},{"_id":"themes/yilia/source-src/js/main.js","hash":"93ca570a646c6087821d7b14cb1646bb2a0274f4","modified":1498985337476},{"_id":"themes/yilia/source-src/js/mobile.js","hash":"461c08ffcbc724d74ec7e0ff38e171eefe0f89fd","modified":1498985337476},{"_id":"themes/yilia/source-src/js/slider.js","hash":"707842efee006e3ea9b6765d7460f4ef4f08e41f","modified":1498985337477},{"_id":"themes/yilia/source-src/js/share.js","hash":"d4ccff8266c37363b3904226f5d035b7db882c61","modified":1498985337477},{"_id":"themes/yilia/source-src/js/report.js","hash":"57680f9a23bd0a1eaafd64ae08cc33e20627ab15","modified":1498985337477},{"_id":"themes/yilia/source-src/js/viewer.js","hash":"3e0fd4479a40ddbd1571c6c953df7e23637b61f5","modified":1498985337478},{"_id":"themes/yilia/source-src/js/util.js","hash":"3bcdeb95072b85600874424e6929e3e22cfddaa0","modified":1498985337478},{"_id":"themes/yilia/source/fonts/iconfont.b7ae25.ttf","hash":"697449e7790edd12e208706ecaa8d5d0eed44cde","modified":1498985337480},{"_id":"themes/yilia/source/fonts/iconfont.59e68b.eot","hash":"b7f28dc802d6e32281e8fe7930d4dd2022d00717","modified":1498985337480},{"_id":"themes/yilia/source/fonts/default-skin.b257fa.svg","hash":"2ac727c9e092331d35cce95af209ccfac6d4c7c7","modified":1498985337479},{"_id":"themes/yilia/source/fonts/iconfont.dba24b.svg","hash":"f6c8d119c14f2124f4362acd6c8e00f209af5613","modified":1498985337481},{"_id":"themes/yilia/source/fonts/tooltip.4004ff.svg","hash":"397fe4b1093bf9b62457dac48aa15dac06b54a3c","modified":1498985337481},{"_id":"themes/yilia/source/fonts/iconfont.ca3627.woff","hash":"cda0ea1dc25dc3d329d7637afe2cd6aec37e351b","modified":1498985337480},{"_id":"themes/yilia/source/img/default-skin.png","hash":"ed95a8e40a2c3478c5915376acb8e5f33677f24d","modified":1498985337482},{"_id":"themes/yilia/source/img/preloader.gif","hash":"6342367c93c82da1b9c620e97c84a389cc43d96d","modified":1498985337482},{"_id":"themes/yilia/source/img/scrollbar_arrow.png","hash":"d64a33c4ddfbdb89deeb6f4e3d36eb84dc4777c0","modified":1498985337482},{"_id":"source/image/Library_Plant_specimen2.jpg","hash":"208aeeefab42ea76fcce53fd8e728ae89c1dec8e","modified":1498985337291},{"_id":"source/image/Library_Plant_specimen1.jpg","hash":"9c7d30409dfa60ef2a7544c2a47918a7b4677226","modified":1498985337289},{"_id":"source/image/Library_Plant_specimen4.jpg","hash":"a353768228d659bc4be4e3a10239449104a81496","modified":1498985337295},{"_id":"source/image/Library_Plant_specimen3.jpg","hash":"c42357f1809801d54076def102b17443da553749","modified":1498985337293},{"_id":"source/image/Tsinghua.jpg","hash":"a6d99a0e0ef2074a08c8ad50aea538c2d7bf9259","modified":1498985337313},{"_id":"source/image/csdn_home.png","hash":"292c008656a76ae9fc32f15869dda084c7cf05c5","modified":1498985337316},{"_id":"source/image/gaode/geocoderSearch_bug.png","hash":"52c6b1fe11a9f6d4f9543ab1cbdbfa28e7e0beb7","modified":1514639587234},{"_id":"source/image/git/git_diff_tool_bc.png","hash":"e26b45a8bbbba5d71ba39ac9e6fd2f36ddd5423d","modified":1498985337374},{"_id":"source/image/git/git_merge_tool_bc.png","hash":"1cdc2137b52d7a8a4219125013288793174f5826","modified":1498985337381},{"_id":"source/image/git/git_init_tree.png","hash":"fb2743b889e407f0e0ed3ed1bf0e1aeec4806870","modified":1498985337379},{"_id":"source/image/jenkins/jenkins_build_console_output.png","hash":"9be0df977f276b563022b1364d70f46e5b65e760","modified":1498985337398},{"_id":"source/image/hexo/duoshuo.png","hash":"4b62f587c27bd0ef13aac14c686131f929653c6a","modified":1498985337384},{"_id":"source/image/hexo/hexo_init.png","hash":"9cd71f4f1c58debe8f2c95de8b78474469c71d6f","modified":1498985337389},{"_id":"source/image/hexo/hexo_install_nvm.png","hash":"ecb0052c629af11483663a4cf84e288267afa026","modified":1498985337390},{"_id":"source/image/main_building.jpg","hash":"8ea5677c82ec30aaeca1457a205d17628f36ae0b","modified":1498985337410},{"_id":"source/image/hexo/npm_install_hexo.png","hash":"13e62cc42f6e2dd02d99467e5254f95124c15b59","modified":1498985337393},{"_id":"source/image/hexo/yilia_them.png","hash":"76c8942f03eb255fe82350f3124d8c4a9d06c703","modified":1498985337396},{"_id":"source/image/tcp/tcp2.png","hash":"18f69b2162d08f290d7701eb0dfbf69f84c7a3d3","modified":1514639587239},{"_id":"source/image/tcp/tcp5.png","hash":"26d24fc87b029c39e6fbbdbb894d77775dd5557b","modified":1514639587241},{"_id":"source/image/sign.jpg","hash":"aeabf18eef5ec58e28eec9b40f470e96294fab1c","modified":1498985337413},{"_id":"source/image/Library.jpg","hash":"8e7bd8fae6ca8c39f1957802125319aadd634a33","modified":1498985337287},{"_id":"source/image/PHBS1.jpg","hash":"06bbf9c907e1a4241917c9c3bcc1f824d51b70d1","modified":1498985337305},{"_id":"source/image/jenkins/jenkins_create_new_project.png","hash":"f0fb7931e5b4b507e5c8ab995b94d9214e8dbe94","modified":1498985337402},{"_id":"source/image/jenkins/jenkins_start.png","hash":"cb99e8a69b30cd80e1e9f62f6fb11cdd6e2676f0","modified":1498985337406},{"_id":"source/image/tcp/tcp6.png","hash":"f221da3156e00b0a2b03eff66d573475148995fd","modified":1514639587242},{"_id":"source/image/tcp/tcp7.png","hash":"5765003f3456656af972553c3181ca5b98e14dad","modified":1514639587243},{"_id":"source/image/python/Flask/pycharm_project_setting1.png","hash":"b87ec9607c452dfb12f166cb85e1900e0c567f47","modified":1514639587236},{"_id":"themes/yilia/layout/_partial/post/duoshuo.ejs","hash":"f6b4c4eaafb5ac386273354b5f64a26139b7a3b0","modified":1498985337446},{"_id":"source/image/python/Flask/pycharm_project_setting2.png","hash":"ba90ef64d5999f7980236422b8d075f8883caade","modified":1514639587237},{"_id":"themes/yilia/layout/_partial/post/date.ejs","hash":"aae96de18d48cd3b9b7bf6fed0100e15b53cca97","modified":1498985337445},{"_id":"themes/yilia/layout/_partial/post/nav.ejs","hash":"b6a97043f9ec37e571aacacfedcda1d4d75e3c7c","modified":1498985337447},{"_id":"themes/yilia/layout/_partial/post/category.ejs","hash":"f75b236818b6c0ec0e5e6c12a517825d6230d756","modified":1498985337445},{"_id":"themes/yilia/layout/_partial/post/share.ejs","hash":"06a2dd18ac9a43fbc9a59c61e6f795f9326e9927","modified":1498985337447},{"_id":"themes/yilia/layout/_partial/post/tag.ejs","hash":"2c4e4ca36c9bb4318506c38aca7127f1f44d827f","modified":1498985337448},{"_id":"themes/yilia/layout/_partial/post/title.ejs","hash":"d4a460a35e2112d0c7414fd5e19b3a16093f1caf","modified":1498985337449},{"_id":"themes/yilia/source-src/css/core/_animation.scss","hash":"1834c3ed8560716e63bb3a50be94cac87fbbeaf3","modified":1498985337462},{"_id":"themes/yilia/source-src/css/core/_media-queries.scss","hash":"262ffcd88775080b7f511db37f58d2bcb1b2bfc7","modified":1498985337462},{"_id":"themes/yilia/source-src/css/core/_mixin.scss","hash":"91db061c9c17628291a005e5bd4936cf9d35a6c4","modified":1498985337463},{"_id":"themes/yilia/source-src/css/core/_reset.scss","hash":"398a49913b4a47d928103562b1ce94520be4026a","modified":1498985337463},{"_id":"themes/yilia/source-src/css/core/_variables.scss","hash":"6e75bdaa46de83094ba0873099c6e7d656a22453","modified":1498985337464},{"_id":"themes/yilia/source-src/css/fonts/iconfont.eot","hash":"b7f28dc802d6e32281e8fe7930d4dd2022d00717","modified":1498985337465},{"_id":"themes/yilia/source-src/css/fonts/iconfont.svg","hash":"f6c8d119c14f2124f4362acd6c8e00f209af5613","modified":1498985337465},{"_id":"themes/yilia/source-src/css/fonts/iconfont.woff","hash":"cda0ea1dc25dc3d329d7637afe2cd6aec37e351b","modified":1498985337466},{"_id":"themes/yilia/source-src/css/fonts/iconfont.ttf","hash":"697449e7790edd12e208706ecaa8d5d0eed44cde","modified":1498985337466},{"_id":"themes/yilia/source-src/css/img/checkered-pattern.png","hash":"049262fa0886989d750637b264bed34ab51c23c8","modified":1498985337468},{"_id":"themes/yilia/source-src/css/img/scrollbar_arrow.png","hash":"d64a33c4ddfbdb89deeb6f4e3d36eb84dc4777c0","modified":1498985337469},{"_id":"themes/yilia/source-src/css/img/tooltip.svg","hash":"397fe4b1093bf9b62457dac48aa15dac06b54a3c","modified":1498985337469},{"_id":"source/image/Beware_of_ snakes.jpg","hash":"6471f822ad10cd2b645437afcc5ef9543dfefdb7","modified":1498985337283},{"_id":"source/image/Meal3.jpg","hash":"3baff3b15acb200de20f59b8853c3fc43b13d625","modified":1498985337301},{"_id":"source/image/PHBS.jpg","hash":"fd6af187cc0c19dc4ca27eb6d54715caae02ee2c","modified":1498985337303},{"_id":"source/image/Restaurant.jpg","hash":"f47251131db6455760f60fabadb37c4d8992dea3","modified":1498985337308},{"_id":"source/image/Meal1.jpg","hash":"f5f734d0074ca071cafa382cd7bf9a5c1f76a748","modified":1498985337297},{"_id":"source/image/Meal2.jpg","hash":"766f4c7d3440f9fa6a891560d02f68d6a709aa7e","modified":1498985337299},{"_id":"source/image/South_Gate.jpg","hash":"0b5a877b30bd09f77bdb872ec98cee524ba1dc1a","modified":1498985337311},{"_id":"source/image/gaode/install_run_bug.png","hash":"ee21105d192d216289fc6f11717b262cc60f4064","modified":1498985337359},{"_id":"source/image/gaode/walk_route_bug.png","hash":"22720160257e40bed07585da07f4b4df71291087","modified":1498985337369},{"_id":"source/image/hexo/hexo_hello.png","hash":"c8b8b02d796afa5fdfa21d2aaf2f180bc9995863","modified":1498985337388},{"_id":"public/content.json","hash":"3e87d8d0ec629ed17dcf68a137cb25c2039b4fb7","modified":1514796640456},{"_id":"public/2017/12/30/写在2018元旦之前-2017的总结/index.html","hash":"4e448c4332ff53484fe305dee64764f4d5f5ae51","modified":1514796640931},{"_id":"public/2017/12/26/Android中使用WebSocket-2/index.html","hash":"1d60dcffd6e34e4e154e9292a24bbff13b70a59c","modified":1514796641218},{"_id":"public/2017/12/25/Android中使用WebSocket/index.html","hash":"6de069dbcec08ac2a395c12ebaf5f255ff641ca2","modified":1514796641233},{"_id":"public/2017/12/19/《我的安卓爬坑之旅》-高德地图遇到的坑-3/index.html","hash":"a8792d1d792919d591e217ba1e5ced4416b1e427","modified":1514796641233},{"_id":"public/2017/07/15/flask笔记一(快速入门)/index.html","hash":"d1f29db0174dbb11b444265b1832875978f94362","modified":1514796641233},{"_id":"public/2017/07/03/TCP协议的简单理解/index.html","hash":"193ff9f30fc3d59f309f8f374f5190e772366dba","modified":1514796641233},{"_id":"public/2017/06/28/Jenkins安装与使用/index.html","hash":"5822036f012a593a895e97ccc20cbbb229c3348d","modified":1514796641233},{"_id":"public/2017/05/10/git工具/index.html","hash":"aa8cdc71cea6f1e667060c5d80eddabc20b8b772","modified":1514796641233},{"_id":"public/2017/06/13/elk简单环境搭建-for-linux/index.html","hash":"6601d279905ca066860a5aec9b19f70f0764b6d7","modified":1514796641233},{"_id":"public/2017/04/15/搭建git服务/index.html","hash":"2a472f4f898f2ed97cc7a5acdfe4632668430069","modified":1514796641234},{"_id":"public/2017/04/07/JVM-内存分配与回收策略/index.html","hash":"ff2d901609e9f90d713028fd02a126998323c357","modified":1514796641242},{"_id":"public/2017/03/30/JVM-垃圾收集算法/index.html","hash":"d0f0e6d2c3ed40b7ba2f37e3c7a4587c17f9886a","modified":1514796641242},{"_id":"public/2017/03/29/JVM垃圾回收-对象已死？/index.html","hash":"a4ea50c3ebd33e94f6f4986eb2ee07151e22d24c","modified":1514796641242},{"_id":"public/2017/03/28/Android-N-应用内更新/index.html","hash":"9b40eb6fdec7c51ce44f9a96c3de4bba578dedcb","modified":1514796641242},{"_id":"public/2017/03/27/JVM内存区域/index.html","hash":"394ee32ae6aed45841607de940a061db1f467daa","modified":1514796641242},{"_id":"public/2017/03/23/Android的消息机制/index.html","hash":"6b47e9dc3cb9da3272ef30f2d005cb569aafe647","modified":1514796641242},{"_id":"public/2017/03/21/Window和WindowManager/index.html","hash":"1e51e360983d96e64a9cc5b98d45d110999a8f04","modified":1514796641242},{"_id":"public/2017/03/20/简单的桌面小部件/index.html","hash":"52e3c905223d88b0e05c315954b663d8ace77a8f","modified":1514796641242},{"_id":"public/2017/03/18/通过简单的自定义view来看View的工作流程/index.html","hash":"44cb0b5d8314c05a6a1135f107a6a7c87740bea5","modified":1514796641242},{"_id":"public/2017/03/15/View的滑动/index.html","hash":"66ed56f00302e1aaae09b6237a8d77d3ffb88be8","modified":1514796641242},{"_id":"public/2016/12/31/写在2016年末/index.html","hash":"608a075741e866b86d3330e00f70cc11b8725509","modified":1514796641242},{"_id":"public/2017/02/25/《我的安卓爬坑之旅》-高德地图遇到的坑-2/index.html","hash":"59e4b431e68a6d0fe7a8d0b36a151fa7bcf890f4","modified":1514796641242},{"_id":"public/2016/11/21/《我的安卓爬坑之旅》/index.html","hash":"ffbfaa112e5d7ec15d995e22017d0b2186f7df37","modified":1514796641243},{"_id":"public/2016/12/18/《我的安卓爬坑之旅》-高德地图遇到的坑-1/index.html","hash":"ed5168cb38e6c58ac317661f1ca68c4484a93c49","modified":1514796641243},{"_id":"public/2016/12/01/《我的安卓爬坑之旅》-融云IM遇到的坑/index.html","hash":"abaa9bebf1d65dddddea6314d6c18b6cc742edcf","modified":1514796641243},{"_id":"public/2016/10/30/hexo-gitpage搭建自己的博客-三/index.html","hash":"9d0994dc17cac6346ae6d74dcba01bdd54c4b5d9","modified":1514796641243},{"_id":"public/2016/10/25/hexo-gitpage搭建自己的博客-二/index.html","hash":"06c0e45526b4e9cbc37eec4a859683e0988577e4","modified":1514796641243},{"_id":"public/2016/10/21/hexo-gitpage搭建自己的博客-一/index.html","hash":"b72f3378c97e7bb7add6ec15818d2afabc428629","modified":1514796641243},{"_id":"public/2016/10/08/2016国庆/index.html","hash":"2362c1dc0218e477dfdcb46a60877efec9ebc7f7","modified":1514796641243},{"_id":"public/2016/10/19/如何获取csdn中个人所有文章标题及链接/index.html","hash":"e5371e6c3d3a9a9cbab0a7c544450e258d88dcfa","modified":1514796641243},{"_id":"public/2016/10/16/原CSDN博客/index.html","hash":"486c08e55711c946a0c3c3f0f3471fa7144ae79c","modified":1514796641243},{"_id":"public/archives/2016/index.html","hash":"02a261caf08b29b37395815a30da034c84816e62","modified":1514796641243},{"_id":"public/archives/index.html","hash":"952b8f135b8605241604be4cd78b2192a4f7324e","modified":1514796641243},{"_id":"public/archives/2016/10/index.html","hash":"2c734271b5326e8a97ecc97648f1074b0502ef17","modified":1514796641243},{"_id":"public/archives/2016/12/index.html","hash":"18e20e3b867872b9420b6591ac54949f1dbea372","modified":1514796641243},{"_id":"public/archives/2016/11/index.html","hash":"9c0de52738f31cceddb206cbc6c7f759cc6ee68c","modified":1514796641243},{"_id":"public/archives/2017/03/index.html","hash":"15d941fdc32df894487b7a744e10364c19c502ba","modified":1514796641243},{"_id":"public/archives/2017/index.html","hash":"3ad8a5e396e3ba03edcff276d05f05826c3edf5f","modified":1514796641243},{"_id":"public/archives/2017/02/index.html","hash":"a9c9180d257bbc7c4d8dfd335fc5f06e83549557","modified":1514796641243},{"_id":"public/archives/2017/04/index.html","hash":"04483171a82ed484204bd3b753405fd270aadec1","modified":1514796641243},{"_id":"public/archives/2017/05/index.html","hash":"5653ecdbda9116834bf2ce6c932d949de1b8d41e","modified":1514796641243},{"_id":"public/tags/Android爬坑之旅/index.html","hash":"12d68b3c0367f86354448bd12cf6df3d2c3cd5c2","modified":1514796641243},{"_id":"public/archives/2017/06/index.html","hash":"ea669af18d7c92408471c3b35ae46854184f77ed","modified":1514796641243},{"_id":"public/archives/2017/07/index.html","hash":"df07b068b13df519fee33d9ee26c6924246772ff","modified":1514796641243},{"_id":"public/archives/2017/12/index.html","hash":"e2c71b4ed86133b1878f5bd287dd208528476b11","modified":1514796641243},{"_id":"public/tags/Android-N/index.html","hash":"65b49de10cddc4ce9e2deccd2951099216ea9aec","modified":1514796641243},{"_id":"public/tags/Android/index.html","hash":"f8dea2279e03fc3679c684e526fc4863fe700edf","modified":1514796641243},{"_id":"public/tags/乱七八糟/index.html","hash":"0206e68b77b978a5f4954b71647f1a8b522c2ce6","modified":1514796641243},{"_id":"public/tags/Andorid/index.html","hash":"cccb991e70a91bd273ca7ec4292e4af7ab41740a","modified":1514796641244},{"_id":"public/tags/WebSocket/index.html","hash":"d0710eb875054277f1fa6af4d90b908eab98b56d","modified":1514796641244},{"_id":"public/tags/Android/page/2/index.html","hash":"5f84d56b4ae9246c43d547b15f4af908146d7434","modified":1514796641244},{"_id":"public/tags/Java/index.html","hash":"8fe5424e0a409a712767f83bbf267da20975a736","modified":1514796641244},{"_id":"public/tags/JVM/index.html","hash":"d8f2754e33974d83043d6950fe8ee4de22da511c","modified":1514796641244},{"_id":"public/tags/java/index.html","hash":"6aaa6c78bf9dc988e93cc6f7566e9e3eeced8e48","modified":1514796641244},{"_id":"public/tags/jenkins/index.html","hash":"c1c13f330e3dedba4d92f73fd9cca05d8004e44c","modified":1514796641244},{"_id":"public/tags/flask/index.html","hash":"5813d0385c10da98386ac3de16966fb3a6dae69c","modified":1514796641244},{"_id":"public/tags/运维/index.html","hash":"3d00cc6d8c83ed2a535525871156b76bef03d8e4","modified":1514796641244},{"_id":"public/tags/服务器/index.html","hash":"058f2c63f95524110591cd8897cad8ce43782de5","modified":1514796641244},{"_id":"public/tags/python/index.html","hash":"4a94315773a41f151fc0590a7af13288c7ea5864","modified":1514796641244},{"_id":"public/tags/tcp协议/index.html","hash":"026c3262e124c6170590dcd153a7c4448510063a","modified":1514796641244},{"_id":"public/tags/blog/index.html","hash":"f84c08c1d47fd0634c91ccd5bdc9ce75a65973a4","modified":1514796641244},{"_id":"public/tags/tcp-ip协议族/index.html","hash":"caf2a048544b043210d4333abacb3681363aad32","modified":1514796641244},{"_id":"public/tags/hexo/index.html","hash":"c3027b8cda9345f0477dd4dd0d1e28ef6a951b04","modified":1514796641244},{"_id":"public/tags/gitpage/index.html","hash":"d0179f3de922646d9c2bb624f8fcf4238d9e19a5","modified":1514796641244},{"_id":"public/tags/git/index.html","hash":"f8b1fed52b0e69a2d72ad8e790cb02cad79b7063","modified":1514796641244},{"_id":"public/tags/git工具/index.html","hash":"69f85940fc0d556cd665f71c1a1d4313b0773349","modified":1514796641245},{"_id":"public/tags/elk/index.html","hash":"5d6c2d9ccbe5620b8ab0d27b506eff795250aea1","modified":1514796641245},{"_id":"public/tags/融云IM/index.html","hash":"219004d06b624a7450855a2dd5f403654d68e1e5","modified":1514796641245},{"_id":"public/tags/高德地图/index.html","hash":"5f5881a03fb625f3c87251a6c06bb22c4d8ddf0b","modified":1514796641245},{"_id":"public/index.html","hash":"1957ec1e132609daf724c7956f86d1b1d6124790","modified":1514796641245},{"_id":"public/tags/android/index.html","hash":"c00da75ac36e3e80bd85cd581b1609b29fc85336","modified":1514796641245},{"_id":"public/tags/bug/index.html","hash":"a54fcfe3d20522b7c35b27c72910544560068634","modified":1514796641245},{"_id":"public/tags/csdn/index.html","hash":"37a091efdb3cfc937065b11d314158749bd48712","modified":1514796641245},{"_id":"public/page/2/index.html","hash":"7e0c20a022c7dd36869e949698cc0d36798edac6","modified":1514796641245},{"_id":"public/page/4/index.html","hash":"d6ccc5c63691197d9bd1851dfc5c2cbfe03dd773","modified":1514796641245},{"_id":"public/page/3/index.html","hash":"6a0a8f4eeef9f8fcfd5bc3ee1b0991a69c0cd5e5","modified":1514796641245},{"_id":"public/CNAME","hash":"b028dfd1f7007d9ca630d3f65fdcd8465c16d5d7","modified":1514796641245},{"_id":"public/alipay.png","hash":"815b49a7951c8e89e36be54db535e3d700f8f170","modified":1514796641245},{"_id":"public/weichat.png","hash":"efeb49a2c795383181697dc3ee84787e7136d5fc","modified":1514796641245},{"_id":"public/image/location.png","hash":"83316f76819e9949bbc6c6d6672433fd15c8f17e","modified":1514796641245},{"_id":"public/image/JVM/JVM_RunTime_Area.png","hash":"9000bdd0c0cadd3eaf40bdecf081e1baa15e370f","modified":1514796641245},{"_id":"public/image/gaode/install_run.png","hash":"60e54f63cd184e47523a505e7a52336c2280202a","modified":1514796641245},{"_id":"public/image/git/git_diff_tool_codecompare.png","hash":"df3f29280b14000e0f7e1b0744e9f5b816b30d6d","modified":1514796641245},{"_id":"public/image/git/git_merge_tool_codecompare.png","hash":"c90c690c56b47ea6c0da763f14c106fba47e6836","modified":1514796641245},{"_id":"public/image/jenkins/jenkins_config_project.png","hash":"efb96ad7daa2301f2999799fa43565520451ee97","modified":1514796641245},{"_id":"public/image/jenkins/jenkins_maven.png","hash":"c0cfca773937c55a6219576c4795c89aaf1e88ef","modified":1514796641245},{"_id":"public/image/jenkins/jenkins_index.png","hash":"9a56f2aa69c9717a0bdd959b26949e90ff970bf7","modified":1514796641246},{"_id":"public/image/jenkins/jenkins_build_history.png","hash":"c8f6cfcd97256588c2c3f4100c4ef496ac8fbbb8","modified":1514796641246},{"_id":"public/image/jenkins/jenkins_jdk.png","hash":"ec847c34b6f0127fb30d1798b433d446aaf7f01f","modified":1514796641246},{"_id":"public/image/jenkins/jenkins_project_build.png","hash":"411f3fe3974160ed4d520b89267f2f26bcdb13bc","modified":1514796641246},{"_id":"public/image/hexo/Catalog.png","hash":"c1fb4830a844538a1f3c33645a1d2beb4ef23b85","modified":1514796641246},{"_id":"public/image/jenkins/jenkins_start_build_project.png","hash":"19b4973e82263f805470a6b1bd89c055bbd7b4ae","modified":1514796641246},{"_id":"public/image/hexo/hexo-v.png","hash":"d04daee47710412415a4b1de2718f36e79586f48","modified":1514796641246},{"_id":"public/image/hexo/nvm_install_6.6.0.png","hash":"d7f18ccf8a4a9ea798752fc9a0ae464da06831f3","modified":1514796641246},{"_id":"public/image/hexo/npm_install.png","hash":"c1586b55472528a70b7e7a9cc1487a2d57ee3f0b","modified":1514796641246},{"_id":"public/image/tcp/tcp1.png","hash":"cd47cb2ecdb3d93bdc0c1abf7b22b01beca2992d","modified":1514796641246},{"_id":"public/image/hexo/nvm_ls-remote.png","hash":"9ba963bf4bd2a95349919d66c7b7a56b876a5377","modified":1514796641246},{"_id":"public/image/tcp/tcp3.png","hash":"91ebf7918373ad75930758135a5323fa3a991663","modified":1514796641246},{"_id":"public/image/hexo/nvm_install_down.png","hash":"a2a0e01341881c3d3e9e21e7ffe9ad2ee12680fd","modified":1514796641246},{"_id":"public/image/tcp/tcp4.png","hash":"9bfd72e1cf0c1614397da9ae4baf11298eeb08f3","modified":1514796641246},{"_id":"public/fonts/iconfont.b7ae25.ttf","hash":"697449e7790edd12e208706ecaa8d5d0eed44cde","modified":1514796641246},{"_id":"public/fonts/iconfont.59e68b.eot","hash":"b7f28dc802d6e32281e8fe7930d4dd2022d00717","modified":1514796641246},{"_id":"public/fonts/iconfont.dba24b.svg","hash":"f6c8d119c14f2124f4362acd6c8e00f209af5613","modified":1514796641246},{"_id":"public/fonts/tooltip.4004ff.svg","hash":"397fe4b1093bf9b62457dac48aa15dac06b54a3c","modified":1514796641246},{"_id":"public/fonts/iconfont.ca3627.woff","hash":"cda0ea1dc25dc3d329d7637afe2cd6aec37e351b","modified":1514796641246},{"_id":"public/img/preloader.gif","hash":"6342367c93c82da1b9c620e97c84a389cc43d96d","modified":1514796641246},{"_id":"public/fonts/default-skin.b257fa.svg","hash":"2ac727c9e092331d35cce95af209ccfac6d4c7c7","modified":1514796641246},{"_id":"public/img/default-skin.png","hash":"ed95a8e40a2c3478c5915376acb8e5f33677f24d","modified":1514796641246},{"_id":"public/img/scrollbar_arrow.png","hash":"d64a33c4ddfbdb89deeb6f4e3d36eb84dc4777c0","modified":1514796641247},{"_id":"public/image/python/Flask/pycharm_project_setting2.png","hash":"ba90ef64d5999f7980236422b8d075f8883caade","modified":1514796641247},{"_id":"public/image/python/Flask/pycharm_project_setting1.png","hash":"b87ec9607c452dfb12f166cb85e1900e0c567f47","modified":1514796641247},{"_id":"public/favicon.ico","hash":"f7947fb76cdbd69b54975dc8da017e31a68a61ac","modified":1514796641253},{"_id":"public/image/new_widget.png","hash":"c39ced27f848ef2a69f7e6e28b2b17d5af82dd91","modified":1514796641253},{"_id":"public/image/gaode/geocoderSearch_bug.png","hash":"52c6b1fe11a9f6d4f9543ab1cbdbfa28e7e0beb7","modified":1514796641256},{"_id":"public/image/git/git_diff_tool_bc.png","hash":"e26b45a8bbbba5d71ba39ac9e6fd2f36ddd5423d","modified":1514796641256},{"_id":"public/image/git/git_merge_tool_bc.png","hash":"1cdc2137b52d7a8a4219125013288793174f5826","modified":1514796641256},{"_id":"public/image/git/git_init_tree.png","hash":"fb2743b889e407f0e0ed3ed1bf0e1aeec4806870","modified":1514796641256},{"_id":"public/image/hexo/hexo_install_nvm.png","hash":"ecb0052c629af11483663a4cf84e288267afa026","modified":1514796641256},{"_id":"public/image/hexo/hexo_init.png","hash":"9cd71f4f1c58debe8f2c95de8b78474469c71d6f","modified":1514796641256},{"_id":"public/image/hexo/duoshuo.png","hash":"4b62f587c27bd0ef13aac14c686131f929653c6a","modified":1514796641256},{"_id":"public/image/jenkins/jenkins_build_console_output.png","hash":"9be0df977f276b563022b1364d70f46e5b65e760","modified":1514796641256},{"_id":"public/image/tcp/tcp5.png","hash":"26d24fc87b029c39e6fbbdbb894d77775dd5557b","modified":1514796641256},{"_id":"public/image/tcp/tcp2.png","hash":"18f69b2162d08f290d7701eb0dfbf69f84c7a3d3","modified":1514796641256},{"_id":"public/image/hexo/npm_install_hexo.png","hash":"13e62cc42f6e2dd02d99467e5254f95124c15b59","modified":1514796641256},{"_id":"public/image/hexo/yilia_them.png","hash":"76c8942f03eb255fe82350f3124d8c4a9d06c703","modified":1514796641256},{"_id":"public/slider.885efe.js","hash":"1f1a6548c6016cc132bf65a1701cc8421a1f8414","modified":1514796641259},{"_id":"public/main.2d7529.css","hash":"2eef112e365f9b00664302ba98b517662c75d411","modified":1514796641259},{"_id":"public/mobile.d238ee.js","hash":"a054884092af1cc5c2c14e5e11a4dac6d9254481","modified":1514796641259},{"_id":"public/main.2d7529.js","hash":"988c141a741441812bcf4c408ef530d7a01522f3","modified":1514796641259},{"_id":"public/image/2018_01_01.png","hash":"0396b5d5f4c87a1cfdc2ec70d0685baa4485e343","modified":1514796641259},{"_id":"public/image/csdn_blog_title.png","hash":"40a2c69aa442cc5c95dc2ff5491207380af9de69","modified":1514796641259},{"_id":"public/image/jenkins/jenkins_start.png","hash":"cb99e8a69b30cd80e1e9f62f6fb11cdd6e2676f0","modified":1514796641259},{"_id":"public/image/tcp/tcp6.png","hash":"f221da3156e00b0a2b03eff66d573475148995fd","modified":1514796641260},{"_id":"public/image/tcp/tcp7.png","hash":"5765003f3456656af972553c3181ca5b98e14dad","modified":1514796641260},{"_id":"public/image/jenkins/jenkins_create_new_project.png","hash":"f0fb7931e5b4b507e5c8ab995b94d9214e8dbe94","modified":1514796641260},{"_id":"public/image/Library_Plant_specimen2.jpg","hash":"208aeeefab42ea76fcce53fd8e728ae89c1dec8e","modified":1514796641269},{"_id":"public/image/Library_Plant_specimen4.jpg","hash":"a353768228d659bc4be4e3a10239449104a81496","modified":1514796641269},{"_id":"public/image/Library_Plant_specimen1.jpg","hash":"9c7d30409dfa60ef2a7544c2a47918a7b4677226","modified":1514796641269},{"_id":"public/image/Tsinghua.jpg","hash":"a6d99a0e0ef2074a08c8ad50aea538c2d7bf9259","modified":1514796641269},{"_id":"public/image/Library_Plant_specimen3.jpg","hash":"c42357f1809801d54076def102b17443da553749","modified":1514796641269},{"_id":"public/image/csdn_home.png","hash":"292c008656a76ae9fc32f15869dda084c7cf05c5","modified":1514796641269},{"_id":"public/image/main_building.jpg","hash":"8ea5677c82ec30aaeca1457a205d17628f36ae0b","modified":1514796641269},{"_id":"public/image/sign.jpg","hash":"aeabf18eef5ec58e28eec9b40f470e96294fab1c","modified":1514796641269},{"_id":"public/image/Library.jpg","hash":"8e7bd8fae6ca8c39f1957802125319aadd634a33","modified":1514796641274},{"_id":"public/image/PHBS1.jpg","hash":"06bbf9c907e1a4241917c9c3bcc1f824d51b70d1","modified":1514796641274},{"_id":"public/image/gaode/install_run_bug.png","hash":"ee21105d192d216289fc6f11717b262cc60f4064","modified":1514796641274},{"_id":"public/image/Meal3.jpg","hash":"3baff3b15acb200de20f59b8853c3fc43b13d625","modified":1514796641277},{"_id":"public/image/Beware_of_ snakes.jpg","hash":"6471f822ad10cd2b645437afcc5ef9543dfefdb7","modified":1514796641277},{"_id":"public/image/Restaurant.jpg","hash":"f47251131db6455760f60fabadb37c4d8992dea3","modified":1514796641278},{"_id":"public/image/PHBS.jpg","hash":"fd6af187cc0c19dc4ca27eb6d54715caae02ee2c","modified":1514796641278},{"_id":"public/image/gaode/walk_route_bug.png","hash":"22720160257e40bed07585da07f4b4df71291087","modified":1514796641278},{"_id":"public/image/Meal1.jpg","hash":"f5f734d0074ca071cafa382cd7bf9a5c1f76a748","modified":1514796641281},{"_id":"public/image/South_Gate.jpg","hash":"0b5a877b30bd09f77bdb872ec98cee524ba1dc1a","modified":1514796641281},{"_id":"public/image/Meal2.jpg","hash":"766f4c7d3440f9fa6a891560d02f68d6a709aa7e","modified":1514796641282},{"_id":"public/image/hexo/hexo_hello.png","hash":"c8b8b02d796afa5fdfa21d2aaf2f180bc9995863","modified":1514796641283}],"Category":[],"Data":[],"Page":[],"Post":[{"title":"Android N 应用内更新","date":"2017-03-28T02:30:31.000Z","_content":"继之前跪在Android M的动态权限之后，最近又跪在了Android N的`StrictMode`上了。所以啊，要对技术持有敬畏的态度。\n场景如下：\n我司内部员工使用的APP需要有应用内更新的功能，意思就是在应用内下载最新版本的应用并且调起安装界面。\n方案：由于每次从新打开app都需要重新登录，那就在登录界面加上检查更新的接口请求，后台对比当前版本App的VersionCode 和 数据库存储的VersionCode对比，如果需要更新，则返回最新版本软件的下载地址，前端进行下载安装。\n当前端解析出下载地址后，弹出提示框，下载或者取消。点击下载则开启线程下载，同时在界面上显示下载进度，下载完成后，调起安装界面进行安装。\n代码很简单，这里放出不涉及我司业务的代码：\n<!--more-->\n``` java\nprivate void downLoadAPK() {\n        downLoadThread = new Thread(new Runnable() {\n            @Override\n            public void run() {\n                try {\n                    URL url = new URL(downLoadUrl);\n\n                    HttpURLConnection conn = (HttpURLConnection) url\n                            .openConnection();\n                    conn.connect();\n                    int length = conn.getContentLength();\n                    InputStream is = conn.getInputStream();\n\n                    File file = new File(\"\");\n                    if (!file.exists()) {\n                        file.mkdir();\n                    }\n                    File apkFile = new File(saveFilePath);\n                    if (apkFile.exists()) {\n                        apkFile.delete();\n                    }\n                    FileOutputStream fos = new FileOutputStream(apkFile);\n\n                    int count = 0;\n                    byte buf[] = new byte[1024];\n\n                    // 点击取消就停止下载.\n                    while (!interceptFlag) {\n                        int numread = is.read(buf);\n                        count += numread;\n                        progress = (int) (((float) count / length) * 100);\n                        // 更新进度\n                        getHandler().sendEmptyMessage(DOWN_UPDATE);\n                        if (numread <= 0) {\n                            // 下载完成通知安装\n                            getHandler().sendEmptyMessage(DOWN_OVER);\n                            interceptFlag = false;\n                        }\n                        fos.write(buf, 0, numread);\n                    }\n                    fos.close();\n                    is.close();\n                } catch (Exception e) {\n                    e.printStackTrace();\n                }\n\n            }\n        });\n        downLoadThread.start();\n    }\n```\n以上为下载文件的代码，逻辑很简单，起一个新线程，使用HttpURLConnection进行文件下载。\n``` java\n    private void installAPK(String filePath) {\n        File apkFile = new File(filePath);\n        Intent intent = new Intent(Intent.ACTION_VIEW);\n        if (!apkFile.exists()) {\n            return;\n        }\n        intent.setDataAndType(Uri.fromFile(apkFile), \"application/vnd.android.package-archive\");\n        context.startActivity(intent);\n    }\n```\n以上代码是刚开始写的安装软件的代码，在Android N 以下运行正常，但是在Android N上却爆出了如下错误，\n``` java\nandroid.os.FileUriExposedException: file: exposed beyond app through Intent.getData()\n\tat android.os.StrictMode.onFileUriExposed(StrictMode.java:1799)\n\tat android.net.Uri.checkFileUriExposed(Uri.java:2346)\n\tat android.content.Intent.prepareToLeaveProcess(Intent.java:8949)\n\tat android.content.Intent.prepareToLeaveProcess(Intent.java:8908)\n\tat android.app.Instrumentation.execStartActivity(Instrumentation.java:1519)\n\tat android.app.ContextImpl.startActivity(ContextImpl.java:829)\n\tat android.app.ContextImpl.startActivity(ContextImpl.java:806)\n\tat android.content.ContextWrapper.startActivity(ContextWrapper.java:366)\n\tat com.mmuu.travel.service.ui.LoginFrg.installAPK(LoginFrg.java:349)\n\tat com.mmuu.travel.service.ui.LoginFrg.access$200(LoginFrg.java:66)\n\tat com.mmuu.travel.service.ui.LoginFrg$1.onFinish(LoginFrg.java:134)\n\tat android.os.CountDownTimer$1.handleMessage(CountDownTimer.java:127)\n\tat android.os.Handler.dispatchMessage(Handler.java:102)\n\tat android.os.Looper.loop(Looper.java:154)\n\tat android.app.ActivityThread.main(ActivityThread.java:6114)\n\tat java.lang.reflect.Method.invoke(Native Method)\n\tat com.android.internal.os.ZygoteInit$MethodAndArgsCaller.run(ZygoteInit.java:874)\n\tat com.android.internal.os.ZygoteInit.main(ZygoteInit.java:764)\n```\n网上搜了一下，是Android N在权限上做了一些修改：[参考链接](https://developer.android.google.cn/about/versions/nougat/android-7.0-changes.html) https://developer.android.google.cn/about/versions/nougat/android-7.0-changes.html\n>系统权限更改\n为了提高私有文件的安全性，面向 Android 7.0 或更高版本的应用私有目录被限制访问　(0700)。此设置可防止私有文件的元数据泄漏，如它们的大小或存在性。此权限更改有多重副作用：\n私有文件的文件权限不应再由所有者放宽，为使用 MODE_WORLD_READABLE 和/或 MODE_WORLD_WRITEABLE 而进行的此类尝试将触发 SecurityException。\n>>注：迄今为止，这种限制尚不能完全执行。应用仍可能使用原生 API 或 File API 来修改它们的私有目录权限。但是，我们强烈反对放宽私有目录的权限。\n\n>传递软件包网域外的 file:// URI 可能给接收器留下无法访问的路径。因此，尝试传递 file:// URI 会触发 FileUriExposedException。分享私有文件内容的推荐方法是使用 FileProvider。\nDownloadManager 不再按文件名分享私人存储的文件。旧版应用在访问 COLUMN_LOCAL_FILENAME 时可能出现无法访问的路径。面向 Android 7.0 或更高版本的应用在尝试访问 COLUMN_LOCAL_FILENAME 时会触发 SecurityException。通过使用 DownloadManager.Request.setDestinationInExternalFilesDir() 或 DownloadManager.Request.setDestinationInExternalPublicDir() 将下载位置设置为公共位置的旧版应用仍可以访问 COLUMN_LOCAL_FILENAME 中的路径，但是我们强烈反对使用这种方法。对于由 DownloadManager 公开的文件，首选的访问方式是使用ContentResolver.openFileDescriptor()。\n\n解决方案：\n1. FileProvider\n1.1 在mainfest中加入FileProvider注册\n``` xml\n<application>\n     <provider\n         android:authorities=\"你的应用名.fileprovider\"\n         android:name=\"android.support.v4.content.FileProvider\"\n         android:grantUriPermissions=\"true\"\n         android:exported=\"false\">\n         <meta-data\n           android:name=\"android.support.FILE_PROVIDER_PATHS\"\n           android:resource=\"@xml/filepaths\"/>\n    </provider>\n\n</application>\n```\n1.2 在`res`文件夹下新建`xml`文件夹，在`xml`文件夹中新建`filepaths`文件，这个文件名字和上面的 Android:resource后面的名字要一致\n编辑该文件：\n``` xml\n<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<paths>\n    <external-path\n        name=\"external_storage_root\"\n        path=\"\" />\n</paths>\n```\n1.3 修改安装代码\n``` java\nprivate void installAPK(String filePath) {\n        File apkFile = new File(filePath);\n        Intent intent = new Intent(Intent.ACTION_VIEW);\n        if (!apkFile.exists()) {\n            return;\n        }\n\n        if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.N) {\n            intent.setFlags(Intent.FLAG_GRANT_READ_URI_PERMISSION);\n            Uri contentUri = FileProvider.getUriForFile(context, BuildConfig.APPLICATION_ID + \".fileProvider\", apkFile);\n            intent.setDataAndType(contentUri, \"application/vnd.android.package-archive\");\n        } else {\n            intent.setDataAndType(Uri.fromFile(apkFile), \"application/vnd.android.package-archive\");\n        }\n        getActivity().getApplicationContext().startActivity(intent);\n        context.finish();\n    }\n```\n首先判断设备的Android版本，N或者N以上使用`FileProvider`进行安装，N一下还是原来的方式。注意调用startActivity要使用ApplicationContext，使用Activity.this会报错。\n2. 使用DownloadManager\n``` java\npublic class ApkDownLoad {\n\n    public static final String DOWNLOAD_FOLDER_NAME = getLocalForderPath();\n    public static final String DOWNLOAD_FILE_NAME = \"XXX.apk\";\n    public static final String APK_DOWNLOAD_ID = \"apkDownloadId\";\n    private Context context;\n    private String url;\n    private String notificationTitle;\n    private String notificationDescription;\n\n    private DownloadManager downloadManager;\n    private CompleteReceiver completeReceiver;\n\n    /**\n     * @param context\n     * @param url                     下载apk的url\n     * @param notificationTitle       通知栏标题\n     * @param notificationDescription 通知栏描述\n     */\n    public ApkDownLoad(Context context, String url, String notificationTitle,\n                       String notificationDescription) {\n        super();\n        this.context = context;\n        this.url = url;\n        this.notificationTitle = notificationTitle;\n        this.notificationDescription = notificationDescription;\n        downloadManager = (DownloadManager) context\n                .getSystemService(Context.DOWNLOAD_SERVICE);\n        completeReceiver = new CompleteReceiver();\n\n        /** register download success broadcast **/\n        context.registerReceiver(completeReceiver, new IntentFilter(\n                DownloadManager.ACTION_DOWNLOAD_COMPLETE));\n    }\n\n    public void execute() {\n\n        // 清除已下载的内容重新下载\n        long downloadId = UpdateUtils.getLong(context, APK_DOWNLOAD_ID);\n        if (downloadId != -1) {\n            downloadManager.remove(downloadId);\n            UpdateUtils.removeSharedPreferenceByKey(context, APK_DOWNLOAD_ID);\n        }\n        Request request = new Request(Uri.parse(url));\n        // 设置Notification中显示的文字\n        request.setTitle(notificationTitle);\n        request.setDescription(notificationDescription);\n        // 设置可用的网络类型\n        request.setAllowedNetworkTypes(Request.NETWORK_MOBILE\n                | Request.NETWORK_WIFI);\n        // 设置状态栏中显示Notification\n        request.setNotificationVisibility(DownloadManager.Request.VISIBILITY_VISIBLE_NOTIFY_COMPLETED);\n        // 不显示下载界面\n        request.setVisibleInDownloadsUi(false);\n        // 设置下载后文件存放的位置\n        File folder = Environment\n                .getExternalStoragePublicDirectory(DOWNLOAD_FOLDER_NAME);\n        if (!folder.exists() || !folder.isDirectory()) {\n            folder.mkdirs();\n        }\n        // 设置下载文件的保存路径\n        request.setDestinationInExternalPublicDir(DOWNLOAD_FOLDER_NAME,\n                DOWNLOAD_FILE_NAME);\n        // 设置文件类型\n        MimeTypeMap mimeTypeMap = MimeTypeMap.getSingleton();\n        String mimeString = mimeTypeMap.getMimeTypeFromExtension(MimeTypeMap\n                .getFileExtensionFromUrl(url));\n        request.setMimeType(mimeString);\n        // 保存返回唯一的downloadId\n        UpdateUtils.putLong(context, APK_DOWNLOAD_ID,\n                downloadManager.enqueue(request));\n    }\n\n    class CompleteReceiver extends BroadcastReceiver {\n\n        @Override\n        public void onReceive(Context context, Intent intent) {\n            /**\n             * get the id of download which have download success, if the id is\n             * my id and it's status is successful, then install it\n             **/\n            long completeDownloadId = intent.getLongExtra(\n                    DownloadManager.EXTRA_DOWNLOAD_ID, 0);\n            long downloadId = UpdateUtils.getLong(context, APK_DOWNLOAD_ID);\n\n            if (completeDownloadId == downloadId) {\n\n                // if download successful\n                if (queryDownloadStatus(downloadManager, downloadId) == DownloadManager.STATUS_SUCCESSFUL) {\n\n                    // clear downloadId\n                    UpdateUtils.removeSharedPreferenceByKey(context,\n                            APK_DOWNLOAD_ID);\n\n                    // unregisterReceiver\n                    context.unregisterReceiver(completeReceiver);\n\n                    // install apk\n                    String apkFilePath = new StringBuilder(Environment\n                            .getExternalStorageDirectory().getAbsolutePath())\n                            .append(File.separator)\n                            .append(DOWNLOAD_FOLDER_NAME)\n                            .append(File.separator).append(DOWNLOAD_FILE_NAME)\n                            .toString();\n                    install(context, apkFilePath);\n                }\n            }\n        }\n    }\n\n    /**\n     * 查询下载状态\n     */\n    public static int queryDownloadStatus(DownloadManager downloadManager,\n                                          long downloadId) {\n        int result = -1;\n        DownloadManager.Query query = new DownloadManager.Query()\n                .setFilterById(downloadId);\n        Cursor c = null;\n        try {\n            c = downloadManager.query(query);\n            if (c != null && c.moveToFirst()) {\n                result = c.getInt(c\n                        .getColumnIndex(DownloadManager.COLUMN_STATUS));\n            }\n        } finally {\n            if (c != null) {\n                c.close();\n            }\n        }\n        return result;\n    }\n\n    /**\n     * install app\n     *\n     * @param context\n     * @param filePath\n     * @return whether apk exist\n     */\n    public static boolean install(Context context, String filePath) {\n        Intent i = new Intent(Intent.ACTION_VIEW);\n        File file = new File(filePath);\n        if (file != null && file.length() > 0 && file.exists() && file.isFile()) {\n            i.setDataAndType(Uri.parse(\"file://\" + filePath),\n                    \"application/vnd.android.package-archive\");\n            i.addFlags(Intent.FLAG_ACTIVITY_NEW_TASK);\n            context.startActivity(i);\n            return true;\n        }\n        return false;\n    }\n\n}\n```\n检测到需要升级时  `new ApkDownLoad().execute()`就可以了，其中`UpdateUtils.getLong()`是一个`SharedPreferences`封装。\n----\n以上两种方式在小米5Android N 上实测有效\n----\n以上","source":"_posts/Android-N-应用内更新.md","raw":"---\ntitle: Android N 应用内更新\ndate: 2017-03-28 10:30:31\ntags: [Android爬坑之旅,Android N]\n---\n继之前跪在Android M的动态权限之后，最近又跪在了Android N的`StrictMode`上了。所以啊，要对技术持有敬畏的态度。\n场景如下：\n我司内部员工使用的APP需要有应用内更新的功能，意思就是在应用内下载最新版本的应用并且调起安装界面。\n方案：由于每次从新打开app都需要重新登录，那就在登录界面加上检查更新的接口请求，后台对比当前版本App的VersionCode 和 数据库存储的VersionCode对比，如果需要更新，则返回最新版本软件的下载地址，前端进行下载安装。\n当前端解析出下载地址后，弹出提示框，下载或者取消。点击下载则开启线程下载，同时在界面上显示下载进度，下载完成后，调起安装界面进行安装。\n代码很简单，这里放出不涉及我司业务的代码：\n<!--more-->\n``` java\nprivate void downLoadAPK() {\n        downLoadThread = new Thread(new Runnable() {\n            @Override\n            public void run() {\n                try {\n                    URL url = new URL(downLoadUrl);\n\n                    HttpURLConnection conn = (HttpURLConnection) url\n                            .openConnection();\n                    conn.connect();\n                    int length = conn.getContentLength();\n                    InputStream is = conn.getInputStream();\n\n                    File file = new File(\"\");\n                    if (!file.exists()) {\n                        file.mkdir();\n                    }\n                    File apkFile = new File(saveFilePath);\n                    if (apkFile.exists()) {\n                        apkFile.delete();\n                    }\n                    FileOutputStream fos = new FileOutputStream(apkFile);\n\n                    int count = 0;\n                    byte buf[] = new byte[1024];\n\n                    // 点击取消就停止下载.\n                    while (!interceptFlag) {\n                        int numread = is.read(buf);\n                        count += numread;\n                        progress = (int) (((float) count / length) * 100);\n                        // 更新进度\n                        getHandler().sendEmptyMessage(DOWN_UPDATE);\n                        if (numread <= 0) {\n                            // 下载完成通知安装\n                            getHandler().sendEmptyMessage(DOWN_OVER);\n                            interceptFlag = false;\n                        }\n                        fos.write(buf, 0, numread);\n                    }\n                    fos.close();\n                    is.close();\n                } catch (Exception e) {\n                    e.printStackTrace();\n                }\n\n            }\n        });\n        downLoadThread.start();\n    }\n```\n以上为下载文件的代码，逻辑很简单，起一个新线程，使用HttpURLConnection进行文件下载。\n``` java\n    private void installAPK(String filePath) {\n        File apkFile = new File(filePath);\n        Intent intent = new Intent(Intent.ACTION_VIEW);\n        if (!apkFile.exists()) {\n            return;\n        }\n        intent.setDataAndType(Uri.fromFile(apkFile), \"application/vnd.android.package-archive\");\n        context.startActivity(intent);\n    }\n```\n以上代码是刚开始写的安装软件的代码，在Android N 以下运行正常，但是在Android N上却爆出了如下错误，\n``` java\nandroid.os.FileUriExposedException: file: exposed beyond app through Intent.getData()\n\tat android.os.StrictMode.onFileUriExposed(StrictMode.java:1799)\n\tat android.net.Uri.checkFileUriExposed(Uri.java:2346)\n\tat android.content.Intent.prepareToLeaveProcess(Intent.java:8949)\n\tat android.content.Intent.prepareToLeaveProcess(Intent.java:8908)\n\tat android.app.Instrumentation.execStartActivity(Instrumentation.java:1519)\n\tat android.app.ContextImpl.startActivity(ContextImpl.java:829)\n\tat android.app.ContextImpl.startActivity(ContextImpl.java:806)\n\tat android.content.ContextWrapper.startActivity(ContextWrapper.java:366)\n\tat com.mmuu.travel.service.ui.LoginFrg.installAPK(LoginFrg.java:349)\n\tat com.mmuu.travel.service.ui.LoginFrg.access$200(LoginFrg.java:66)\n\tat com.mmuu.travel.service.ui.LoginFrg$1.onFinish(LoginFrg.java:134)\n\tat android.os.CountDownTimer$1.handleMessage(CountDownTimer.java:127)\n\tat android.os.Handler.dispatchMessage(Handler.java:102)\n\tat android.os.Looper.loop(Looper.java:154)\n\tat android.app.ActivityThread.main(ActivityThread.java:6114)\n\tat java.lang.reflect.Method.invoke(Native Method)\n\tat com.android.internal.os.ZygoteInit$MethodAndArgsCaller.run(ZygoteInit.java:874)\n\tat com.android.internal.os.ZygoteInit.main(ZygoteInit.java:764)\n```\n网上搜了一下，是Android N在权限上做了一些修改：[参考链接](https://developer.android.google.cn/about/versions/nougat/android-7.0-changes.html) https://developer.android.google.cn/about/versions/nougat/android-7.0-changes.html\n>系统权限更改\n为了提高私有文件的安全性，面向 Android 7.0 或更高版本的应用私有目录被限制访问　(0700)。此设置可防止私有文件的元数据泄漏，如它们的大小或存在性。此权限更改有多重副作用：\n私有文件的文件权限不应再由所有者放宽，为使用 MODE_WORLD_READABLE 和/或 MODE_WORLD_WRITEABLE 而进行的此类尝试将触发 SecurityException。\n>>注：迄今为止，这种限制尚不能完全执行。应用仍可能使用原生 API 或 File API 来修改它们的私有目录权限。但是，我们强烈反对放宽私有目录的权限。\n\n>传递软件包网域外的 file:// URI 可能给接收器留下无法访问的路径。因此，尝试传递 file:// URI 会触发 FileUriExposedException。分享私有文件内容的推荐方法是使用 FileProvider。\nDownloadManager 不再按文件名分享私人存储的文件。旧版应用在访问 COLUMN_LOCAL_FILENAME 时可能出现无法访问的路径。面向 Android 7.0 或更高版本的应用在尝试访问 COLUMN_LOCAL_FILENAME 时会触发 SecurityException。通过使用 DownloadManager.Request.setDestinationInExternalFilesDir() 或 DownloadManager.Request.setDestinationInExternalPublicDir() 将下载位置设置为公共位置的旧版应用仍可以访问 COLUMN_LOCAL_FILENAME 中的路径，但是我们强烈反对使用这种方法。对于由 DownloadManager 公开的文件，首选的访问方式是使用ContentResolver.openFileDescriptor()。\n\n解决方案：\n1. FileProvider\n1.1 在mainfest中加入FileProvider注册\n``` xml\n<application>\n     <provider\n         android:authorities=\"你的应用名.fileprovider\"\n         android:name=\"android.support.v4.content.FileProvider\"\n         android:grantUriPermissions=\"true\"\n         android:exported=\"false\">\n         <meta-data\n           android:name=\"android.support.FILE_PROVIDER_PATHS\"\n           android:resource=\"@xml/filepaths\"/>\n    </provider>\n\n</application>\n```\n1.2 在`res`文件夹下新建`xml`文件夹，在`xml`文件夹中新建`filepaths`文件，这个文件名字和上面的 Android:resource后面的名字要一致\n编辑该文件：\n``` xml\n<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<paths>\n    <external-path\n        name=\"external_storage_root\"\n        path=\"\" />\n</paths>\n```\n1.3 修改安装代码\n``` java\nprivate void installAPK(String filePath) {\n        File apkFile = new File(filePath);\n        Intent intent = new Intent(Intent.ACTION_VIEW);\n        if (!apkFile.exists()) {\n            return;\n        }\n\n        if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.N) {\n            intent.setFlags(Intent.FLAG_GRANT_READ_URI_PERMISSION);\n            Uri contentUri = FileProvider.getUriForFile(context, BuildConfig.APPLICATION_ID + \".fileProvider\", apkFile);\n            intent.setDataAndType(contentUri, \"application/vnd.android.package-archive\");\n        } else {\n            intent.setDataAndType(Uri.fromFile(apkFile), \"application/vnd.android.package-archive\");\n        }\n        getActivity().getApplicationContext().startActivity(intent);\n        context.finish();\n    }\n```\n首先判断设备的Android版本，N或者N以上使用`FileProvider`进行安装，N一下还是原来的方式。注意调用startActivity要使用ApplicationContext，使用Activity.this会报错。\n2. 使用DownloadManager\n``` java\npublic class ApkDownLoad {\n\n    public static final String DOWNLOAD_FOLDER_NAME = getLocalForderPath();\n    public static final String DOWNLOAD_FILE_NAME = \"XXX.apk\";\n    public static final String APK_DOWNLOAD_ID = \"apkDownloadId\";\n    private Context context;\n    private String url;\n    private String notificationTitle;\n    private String notificationDescription;\n\n    private DownloadManager downloadManager;\n    private CompleteReceiver completeReceiver;\n\n    /**\n     * @param context\n     * @param url                     下载apk的url\n     * @param notificationTitle       通知栏标题\n     * @param notificationDescription 通知栏描述\n     */\n    public ApkDownLoad(Context context, String url, String notificationTitle,\n                       String notificationDescription) {\n        super();\n        this.context = context;\n        this.url = url;\n        this.notificationTitle = notificationTitle;\n        this.notificationDescription = notificationDescription;\n        downloadManager = (DownloadManager) context\n                .getSystemService(Context.DOWNLOAD_SERVICE);\n        completeReceiver = new CompleteReceiver();\n\n        /** register download success broadcast **/\n        context.registerReceiver(completeReceiver, new IntentFilter(\n                DownloadManager.ACTION_DOWNLOAD_COMPLETE));\n    }\n\n    public void execute() {\n\n        // 清除已下载的内容重新下载\n        long downloadId = UpdateUtils.getLong(context, APK_DOWNLOAD_ID);\n        if (downloadId != -1) {\n            downloadManager.remove(downloadId);\n            UpdateUtils.removeSharedPreferenceByKey(context, APK_DOWNLOAD_ID);\n        }\n        Request request = new Request(Uri.parse(url));\n        // 设置Notification中显示的文字\n        request.setTitle(notificationTitle);\n        request.setDescription(notificationDescription);\n        // 设置可用的网络类型\n        request.setAllowedNetworkTypes(Request.NETWORK_MOBILE\n                | Request.NETWORK_WIFI);\n        // 设置状态栏中显示Notification\n        request.setNotificationVisibility(DownloadManager.Request.VISIBILITY_VISIBLE_NOTIFY_COMPLETED);\n        // 不显示下载界面\n        request.setVisibleInDownloadsUi(false);\n        // 设置下载后文件存放的位置\n        File folder = Environment\n                .getExternalStoragePublicDirectory(DOWNLOAD_FOLDER_NAME);\n        if (!folder.exists() || !folder.isDirectory()) {\n            folder.mkdirs();\n        }\n        // 设置下载文件的保存路径\n        request.setDestinationInExternalPublicDir(DOWNLOAD_FOLDER_NAME,\n                DOWNLOAD_FILE_NAME);\n        // 设置文件类型\n        MimeTypeMap mimeTypeMap = MimeTypeMap.getSingleton();\n        String mimeString = mimeTypeMap.getMimeTypeFromExtension(MimeTypeMap\n                .getFileExtensionFromUrl(url));\n        request.setMimeType(mimeString);\n        // 保存返回唯一的downloadId\n        UpdateUtils.putLong(context, APK_DOWNLOAD_ID,\n                downloadManager.enqueue(request));\n    }\n\n    class CompleteReceiver extends BroadcastReceiver {\n\n        @Override\n        public void onReceive(Context context, Intent intent) {\n            /**\n             * get the id of download which have download success, if the id is\n             * my id and it's status is successful, then install it\n             **/\n            long completeDownloadId = intent.getLongExtra(\n                    DownloadManager.EXTRA_DOWNLOAD_ID, 0);\n            long downloadId = UpdateUtils.getLong(context, APK_DOWNLOAD_ID);\n\n            if (completeDownloadId == downloadId) {\n\n                // if download successful\n                if (queryDownloadStatus(downloadManager, downloadId) == DownloadManager.STATUS_SUCCESSFUL) {\n\n                    // clear downloadId\n                    UpdateUtils.removeSharedPreferenceByKey(context,\n                            APK_DOWNLOAD_ID);\n\n                    // unregisterReceiver\n                    context.unregisterReceiver(completeReceiver);\n\n                    // install apk\n                    String apkFilePath = new StringBuilder(Environment\n                            .getExternalStorageDirectory().getAbsolutePath())\n                            .append(File.separator)\n                            .append(DOWNLOAD_FOLDER_NAME)\n                            .append(File.separator).append(DOWNLOAD_FILE_NAME)\n                            .toString();\n                    install(context, apkFilePath);\n                }\n            }\n        }\n    }\n\n    /**\n     * 查询下载状态\n     */\n    public static int queryDownloadStatus(DownloadManager downloadManager,\n                                          long downloadId) {\n        int result = -1;\n        DownloadManager.Query query = new DownloadManager.Query()\n                .setFilterById(downloadId);\n        Cursor c = null;\n        try {\n            c = downloadManager.query(query);\n            if (c != null && c.moveToFirst()) {\n                result = c.getInt(c\n                        .getColumnIndex(DownloadManager.COLUMN_STATUS));\n            }\n        } finally {\n            if (c != null) {\n                c.close();\n            }\n        }\n        return result;\n    }\n\n    /**\n     * install app\n     *\n     * @param context\n     * @param filePath\n     * @return whether apk exist\n     */\n    public static boolean install(Context context, String filePath) {\n        Intent i = new Intent(Intent.ACTION_VIEW);\n        File file = new File(filePath);\n        if (file != null && file.length() > 0 && file.exists() && file.isFile()) {\n            i.setDataAndType(Uri.parse(\"file://\" + filePath),\n                    \"application/vnd.android.package-archive\");\n            i.addFlags(Intent.FLAG_ACTIVITY_NEW_TASK);\n            context.startActivity(i);\n            return true;\n        }\n        return false;\n    }\n\n}\n```\n检测到需要升级时  `new ApkDownLoad().execute()`就可以了，其中`UpdateUtils.getLong()`是一个`SharedPreferences`封装。\n----\n以上两种方式在小米5Android N 上实测有效\n----\n以上","slug":"Android-N-应用内更新","published":1,"updated":"2017-07-02T08:48:57.261Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjbvyt3u40000scdgvdob8214","content":"<p>继之前跪在Android M的动态权限之后，最近又跪在了Android N的<code>StrictMode</code>上了。所以啊，要对技术持有敬畏的态度。<br>场景如下：<br>我司内部员工使用的APP需要有应用内更新的功能，意思就是在应用内下载最新版本的应用并且调起安装界面。<br>方案：由于每次从新打开app都需要重新登录，那就在登录界面加上检查更新的接口请求，后台对比当前版本App的VersionCode 和 数据库存储的VersionCode对比，如果需要更新，则返回最新版本软件的下载地址，前端进行下载安装。<br>当前端解析出下载地址后，弹出提示框，下载或者取消。点击下载则开启线程下载，同时在界面上显示下载进度，下载完成后，调起安装界面进行安装。<br>代码很简单，这里放出不涉及我司业务的代码：<br><a id=\"more\"></a><br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">downLoadAPK</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">        downLoadThread = <span class=\"keyword\">new</span> Thread(<span class=\"keyword\">new</span> Runnable() &#123;</div><div class=\"line\">            <span class=\"meta\">@Override</span></div><div class=\"line\">            <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">run</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">                <span class=\"keyword\">try</span> &#123;</div><div class=\"line\">                    URL url = <span class=\"keyword\">new</span> URL(downLoadUrl);</div><div class=\"line\"></div><div class=\"line\">                    HttpURLConnection conn = (HttpURLConnection) url</div><div class=\"line\">                            .openConnection();</div><div class=\"line\">                    conn.connect();</div><div class=\"line\">                    <span class=\"keyword\">int</span> length = conn.getContentLength();</div><div class=\"line\">                    InputStream is = conn.getInputStream();</div><div class=\"line\"></div><div class=\"line\">                    File file = <span class=\"keyword\">new</span> File(<span class=\"string\">\"\"</span>);</div><div class=\"line\">                    <span class=\"keyword\">if</span> (!file.exists()) &#123;</div><div class=\"line\">                        file.mkdir();</div><div class=\"line\">                    &#125;</div><div class=\"line\">                    File apkFile = <span class=\"keyword\">new</span> File(saveFilePath);</div><div class=\"line\">                    <span class=\"keyword\">if</span> (apkFile.exists()) &#123;</div><div class=\"line\">                        apkFile.delete();</div><div class=\"line\">                    &#125;</div><div class=\"line\">                    FileOutputStream fos = <span class=\"keyword\">new</span> FileOutputStream(apkFile);</div><div class=\"line\"></div><div class=\"line\">                    <span class=\"keyword\">int</span> count = <span class=\"number\">0</span>;</div><div class=\"line\">                    <span class=\"keyword\">byte</span> buf[] = <span class=\"keyword\">new</span> <span class=\"keyword\">byte</span>[<span class=\"number\">1024</span>];</div><div class=\"line\"></div><div class=\"line\">                    <span class=\"comment\">// 点击取消就停止下载.</span></div><div class=\"line\">                    <span class=\"keyword\">while</span> (!interceptFlag) &#123;</div><div class=\"line\">                        <span class=\"keyword\">int</span> numread = is.read(buf);</div><div class=\"line\">                        count += numread;</div><div class=\"line\">                        progress = (<span class=\"keyword\">int</span>) (((<span class=\"keyword\">float</span>) count / length) * <span class=\"number\">100</span>);</div><div class=\"line\">                        <span class=\"comment\">// 更新进度</span></div><div class=\"line\">                        getHandler().sendEmptyMessage(DOWN_UPDATE);</div><div class=\"line\">                        <span class=\"keyword\">if</span> (numread &lt;= <span class=\"number\">0</span>) &#123;</div><div class=\"line\">                            <span class=\"comment\">// 下载完成通知安装</span></div><div class=\"line\">                            getHandler().sendEmptyMessage(DOWN_OVER);</div><div class=\"line\">                            interceptFlag = <span class=\"keyword\">false</span>;</div><div class=\"line\">                        &#125;</div><div class=\"line\">                        fos.write(buf, <span class=\"number\">0</span>, numread);</div><div class=\"line\">                    &#125;</div><div class=\"line\">                    fos.close();</div><div class=\"line\">                    is.close();</div><div class=\"line\">                &#125; <span class=\"keyword\">catch</span> (Exception e) &#123;</div><div class=\"line\">                    e.printStackTrace();</div><div class=\"line\">                &#125;</div><div class=\"line\"></div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;);</div><div class=\"line\">        downLoadThread.start();</div><div class=\"line\">    &#125;</div></pre></td></tr></table></figure></p>\n<p>以上为下载文件的代码，逻辑很简单，起一个新线程，使用HttpURLConnection进行文件下载。<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">installAPK</span><span class=\"params\">(String filePath)</span> </span>&#123;</div><div class=\"line\">    File apkFile = <span class=\"keyword\">new</span> File(filePath);</div><div class=\"line\">    Intent intent = <span class=\"keyword\">new</span> Intent(Intent.ACTION_VIEW);</div><div class=\"line\">    <span class=\"keyword\">if</span> (!apkFile.exists()) &#123;</div><div class=\"line\">        <span class=\"keyword\">return</span>;</div><div class=\"line\">    &#125;</div><div class=\"line\">    intent.setDataAndType(Uri.fromFile(apkFile), <span class=\"string\">\"application/vnd.android.package-archive\"</span>);</div><div class=\"line\">    context.startActivity(intent);</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>以上代码是刚开始写的安装软件的代码，在Android N 以下运行正常，但是在Android N上却爆出了如下错误，<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div></pre></td><td class=\"code\"><pre><div class=\"line\">android.os.FileUriExposedException: file: exposed beyond app through Intent.getData()</div><div class=\"line\">\tat android.os.StrictMode.onFileUriExposed(StrictMode.java:<span class=\"number\">1799</span>)</div><div class=\"line\">\tat android.net.Uri.checkFileUriExposed(Uri.java:<span class=\"number\">2346</span>)</div><div class=\"line\">\tat android.content.Intent.prepareToLeaveProcess(Intent.java:<span class=\"number\">8949</span>)</div><div class=\"line\">\tat android.content.Intent.prepareToLeaveProcess(Intent.java:<span class=\"number\">8908</span>)</div><div class=\"line\">\tat android.app.Instrumentation.execStartActivity(Instrumentation.java:<span class=\"number\">1519</span>)</div><div class=\"line\">\tat android.app.ContextImpl.startActivity(ContextImpl.java:<span class=\"number\">829</span>)</div><div class=\"line\">\tat android.app.ContextImpl.startActivity(ContextImpl.java:<span class=\"number\">806</span>)</div><div class=\"line\">\tat android.content.ContextWrapper.startActivity(ContextWrapper.java:<span class=\"number\">366</span>)</div><div class=\"line\">\tat com.mmuu.travel.service.ui.LoginFrg.installAPK(LoginFrg.java:<span class=\"number\">349</span>)</div><div class=\"line\">\tat com.mmuu.travel.service.ui.LoginFrg.access$<span class=\"number\">200</span>(LoginFrg.java:<span class=\"number\">66</span>)</div><div class=\"line\">\tat com.mmuu.travel.service.ui.LoginFrg$<span class=\"number\">1</span>.onFinish(LoginFrg.java:<span class=\"number\">134</span>)</div><div class=\"line\">\tat android.os.CountDownTimer$<span class=\"number\">1</span>.handleMessage(CountDownTimer.java:<span class=\"number\">127</span>)</div><div class=\"line\">\tat android.os.Handler.dispatchMessage(Handler.java:<span class=\"number\">102</span>)</div><div class=\"line\">\tat android.os.Looper.loop(Looper.java:<span class=\"number\">154</span>)</div><div class=\"line\">\tat android.app.ActivityThread.main(ActivityThread.java:<span class=\"number\">6114</span>)</div><div class=\"line\">\tat java.lang.reflect.Method.invoke(Native Method)</div><div class=\"line\">\tat com.android.internal.os.ZygoteInit$MethodAndArgsCaller.run(ZygoteInit.java:<span class=\"number\">874</span>)</div><div class=\"line\">\tat com.android.internal.os.ZygoteInit.main(ZygoteInit.java:<span class=\"number\">764</span>)</div></pre></td></tr></table></figure></p>\n<p>网上搜了一下，是Android N在权限上做了一些修改：<a href=\"https://developer.android.google.cn/about/versions/nougat/android-7.0-changes.html\" target=\"_blank\" rel=\"external\">参考链接</a> <a href=\"https://developer.android.google.cn/about/versions/nougat/android-7.0-changes.html\" target=\"_blank\" rel=\"external\">https://developer.android.google.cn/about/versions/nougat/android-7.0-changes.html</a></p>\n<blockquote>\n<p>系统权限更改<br>为了提高私有文件的安全性，面向 Android 7.0 或更高版本的应用私有目录被限制访问　(0700)。此设置可防止私有文件的元数据泄漏，如它们的大小或存在性。此权限更改有多重副作用：<br>私有文件的文件权限不应再由所有者放宽，为使用 MODE_WORLD_READABLE 和/或 MODE_WORLD_WRITEABLE 而进行的此类尝试将触发 SecurityException。</p>\n<blockquote>\n<p>注：迄今为止，这种限制尚不能完全执行。应用仍可能使用原生 API 或 File API 来修改它们的私有目录权限。但是，我们强烈反对放宽私有目录的权限。</p>\n</blockquote>\n<p>传递软件包网域外的 file:// URI 可能给接收器留下无法访问的路径。因此，尝试传递 file:// URI 会触发 FileUriExposedException。分享私有文件内容的推荐方法是使用 FileProvider。<br>DownloadManager 不再按文件名分享私人存储的文件。旧版应用在访问 COLUMN_LOCAL_FILENAME 时可能出现无法访问的路径。面向 Android 7.0 或更高版本的应用在尝试访问 COLUMN_LOCAL_FILENAME 时会触发 SecurityException。通过使用 DownloadManager.Request.setDestinationInExternalFilesDir() 或 DownloadManager.Request.setDestinationInExternalPublicDir() 将下载位置设置为公共位置的旧版应用仍可以访问 COLUMN_LOCAL_FILENAME 中的路径，但是我们强烈反对使用这种方法。对于由 DownloadManager 公开的文件，首选的访问方式是使用ContentResolver.openFileDescriptor()。</p>\n</blockquote>\n<p>解决方案：</p>\n<ol>\n<li>FileProvider<br>1.1 在mainfest中加入FileProvider注册<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">application</span>&gt;</span></div><div class=\"line\">     <span class=\"tag\">&lt;<span class=\"name\">provider</span></span></div><div class=\"line\">         <span class=\"attr\">android:authorities</span>=<span class=\"string\">\"你的应用名.fileprovider\"</span></div><div class=\"line\">         <span class=\"attr\">android:name</span>=<span class=\"string\">\"android.support.v4.content.FileProvider\"</span></div><div class=\"line\">         <span class=\"attr\">android:grantUriPermissions</span>=<span class=\"string\">\"true\"</span></div><div class=\"line\">         <span class=\"attr\">android:exported</span>=<span class=\"string\">\"false\"</span>&gt;</div><div class=\"line\">         <span class=\"tag\">&lt;<span class=\"name\">meta-data</span></span></div><div class=\"line\">           <span class=\"attr\">android:name</span>=<span class=\"string\">\"android.support.FILE_PROVIDER_PATHS\"</span></div><div class=\"line\">           <span class=\"attr\">android:resource</span>=<span class=\"string\">\"@xml/filepaths\"</span>/&gt;</div><div class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">provider</span>&gt;</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">application</span>&gt;</span></div></pre></td></tr></table></figure>\n</li>\n</ol>\n<p>1.2 在<code>res</code>文件夹下新建<code>xml</code>文件夹，在<code>xml</code>文件夹中新建<code>filepaths</code>文件，这个文件名字和上面的 Android:resource后面的名字要一致<br>编辑该文件：<br><figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;?xml version=\"1.0\" encoding=\"utf-8\"?&gt;</div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">paths</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">external-path</span></span></div><div class=\"line\">        <span class=\"attr\">name</span>=<span class=\"string\">\"external_storage_root\"</span></div><div class=\"line\">        <span class=\"attr\">path</span>=<span class=\"string\">\"\"</span> /&gt;</div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">paths</span>&gt;</span></div></pre></td></tr></table></figure></p>\n<p>1.3 修改安装代码<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">installAPK</span><span class=\"params\">(String filePath)</span> </span>&#123;</div><div class=\"line\">        File apkFile = <span class=\"keyword\">new</span> File(filePath);</div><div class=\"line\">        Intent intent = <span class=\"keyword\">new</span> Intent(Intent.ACTION_VIEW);</div><div class=\"line\">        <span class=\"keyword\">if</span> (!apkFile.exists()) &#123;</div><div class=\"line\">            <span class=\"keyword\">return</span>;</div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\">        <span class=\"keyword\">if</span> (Build.VERSION.SDK_INT &gt;= Build.VERSION_CODES.N) &#123;</div><div class=\"line\">            intent.setFlags(Intent.FLAG_GRANT_READ_URI_PERMISSION);</div><div class=\"line\">            Uri contentUri = FileProvider.getUriForFile(context, BuildConfig.APPLICATION_ID + <span class=\"string\">\".fileProvider\"</span>, apkFile);</div><div class=\"line\">            intent.setDataAndType(contentUri, <span class=\"string\">\"application/vnd.android.package-archive\"</span>);</div><div class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">            intent.setDataAndType(Uri.fromFile(apkFile), <span class=\"string\">\"application/vnd.android.package-archive\"</span>);</div><div class=\"line\">        &#125;</div><div class=\"line\">        getActivity().getApplicationContext().startActivity(intent);</div><div class=\"line\">        context.finish();</div><div class=\"line\">    &#125;</div></pre></td></tr></table></figure></p>\n<p>首先判断设备的Android版本，N或者N以上使用<code>FileProvider</code>进行安装，N一下还是原来的方式。注意调用startActivity要使用ApplicationContext，使用Activity.this会报错。</p>\n<ol>\n<li>使用DownloadManager<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div><div class=\"line\">71</div><div class=\"line\">72</div><div class=\"line\">73</div><div class=\"line\">74</div><div class=\"line\">75</div><div class=\"line\">76</div><div class=\"line\">77</div><div class=\"line\">78</div><div class=\"line\">79</div><div class=\"line\">80</div><div class=\"line\">81</div><div class=\"line\">82</div><div class=\"line\">83</div><div class=\"line\">84</div><div class=\"line\">85</div><div class=\"line\">86</div><div class=\"line\">87</div><div class=\"line\">88</div><div class=\"line\">89</div><div class=\"line\">90</div><div class=\"line\">91</div><div class=\"line\">92</div><div class=\"line\">93</div><div class=\"line\">94</div><div class=\"line\">95</div><div class=\"line\">96</div><div class=\"line\">97</div><div class=\"line\">98</div><div class=\"line\">99</div><div class=\"line\">100</div><div class=\"line\">101</div><div class=\"line\">102</div><div class=\"line\">103</div><div class=\"line\">104</div><div class=\"line\">105</div><div class=\"line\">106</div><div class=\"line\">107</div><div class=\"line\">108</div><div class=\"line\">109</div><div class=\"line\">110</div><div class=\"line\">111</div><div class=\"line\">112</div><div class=\"line\">113</div><div class=\"line\">114</div><div class=\"line\">115</div><div class=\"line\">116</div><div class=\"line\">117</div><div class=\"line\">118</div><div class=\"line\">119</div><div class=\"line\">120</div><div class=\"line\">121</div><div class=\"line\">122</div><div class=\"line\">123</div><div class=\"line\">124</div><div class=\"line\">125</div><div class=\"line\">126</div><div class=\"line\">127</div><div class=\"line\">128</div><div class=\"line\">129</div><div class=\"line\">130</div><div class=\"line\">131</div><div class=\"line\">132</div><div class=\"line\">133</div><div class=\"line\">134</div><div class=\"line\">135</div><div class=\"line\">136</div><div class=\"line\">137</div><div class=\"line\">138</div><div class=\"line\">139</div><div class=\"line\">140</div><div class=\"line\">141</div><div class=\"line\">142</div><div class=\"line\">143</div><div class=\"line\">144</div><div class=\"line\">145</div><div class=\"line\">146</div><div class=\"line\">147</div><div class=\"line\">148</div><div class=\"line\">149</div><div class=\"line\">150</div><div class=\"line\">151</div><div class=\"line\">152</div><div class=\"line\">153</div><div class=\"line\">154</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ApkDownLoad</span> </span>&#123;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> String DOWNLOAD_FOLDER_NAME = getLocalForderPath();</div><div class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> String DOWNLOAD_FILE_NAME = <span class=\"string\">\"XXX.apk\"</span>;</div><div class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> String APK_DOWNLOAD_ID = <span class=\"string\">\"apkDownloadId\"</span>;</div><div class=\"line\">    <span class=\"keyword\">private</span> Context context;</div><div class=\"line\">    <span class=\"keyword\">private</span> String url;</div><div class=\"line\">    <span class=\"keyword\">private</span> String notificationTitle;</div><div class=\"line\">    <span class=\"keyword\">private</span> String notificationDescription;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">private</span> DownloadManager downloadManager;</div><div class=\"line\">    <span class=\"keyword\">private</span> CompleteReceiver completeReceiver;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">/**</span></div><div class=\"line\">     * <span class=\"doctag\">@param</span> context</div><div class=\"line\">     * <span class=\"doctag\">@param</span> url                     下载apk的url</div><div class=\"line\">     * <span class=\"doctag\">@param</span> notificationTitle       通知栏标题</div><div class=\"line\">     * <span class=\"doctag\">@param</span> notificationDescription 通知栏描述</div><div class=\"line\">     */</div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">ApkDownLoad</span><span class=\"params\">(Context context, String url, String notificationTitle,</span></span></div><div class=\"line\">                       String notificationDescription) &#123;</div><div class=\"line\">        <span class=\"keyword\">super</span>();</div><div class=\"line\">        <span class=\"keyword\">this</span>.context = context;</div><div class=\"line\">        <span class=\"keyword\">this</span>.url = url;</div><div class=\"line\">        <span class=\"keyword\">this</span>.notificationTitle = notificationTitle;</div><div class=\"line\">        <span class=\"keyword\">this</span>.notificationDescription = notificationDescription;</div><div class=\"line\">        downloadManager = (DownloadManager) context</div><div class=\"line\">                .getSystemService(Context.DOWNLOAD_SERVICE);</div><div class=\"line\">        completeReceiver = <span class=\"keyword\">new</span> CompleteReceiver();</div><div class=\"line\"></div><div class=\"line\">        <span class=\"comment\">/** register download success broadcast **/</span></div><div class=\"line\">        context.registerReceiver(completeReceiver, <span class=\"keyword\">new</span> IntentFilter(</div><div class=\"line\">                DownloadManager.ACTION_DOWNLOAD_COMPLETE));</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">execute</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\"></div><div class=\"line\">        <span class=\"comment\">// 清除已下载的内容重新下载</span></div><div class=\"line\">        <span class=\"keyword\">long</span> downloadId = UpdateUtils.getLong(context, APK_DOWNLOAD_ID);</div><div class=\"line\">        <span class=\"keyword\">if</span> (downloadId != -<span class=\"number\">1</span>) &#123;</div><div class=\"line\">            downloadManager.remove(downloadId);</div><div class=\"line\">            UpdateUtils.removeSharedPreferenceByKey(context, APK_DOWNLOAD_ID);</div><div class=\"line\">        &#125;</div><div class=\"line\">        Request request = <span class=\"keyword\">new</span> Request(Uri.parse(url));</div><div class=\"line\">        <span class=\"comment\">// 设置Notification中显示的文字</span></div><div class=\"line\">        request.setTitle(notificationTitle);</div><div class=\"line\">        request.setDescription(notificationDescription);</div><div class=\"line\">        <span class=\"comment\">// 设置可用的网络类型</span></div><div class=\"line\">        request.setAllowedNetworkTypes(Request.NETWORK_MOBILE</div><div class=\"line\">                | Request.NETWORK_WIFI);</div><div class=\"line\">        <span class=\"comment\">// 设置状态栏中显示Notification</span></div><div class=\"line\">        request.setNotificationVisibility(DownloadManager.Request.VISIBILITY_VISIBLE_NOTIFY_COMPLETED);</div><div class=\"line\">        <span class=\"comment\">// 不显示下载界面</span></div><div class=\"line\">        request.setVisibleInDownloadsUi(<span class=\"keyword\">false</span>);</div><div class=\"line\">        <span class=\"comment\">// 设置下载后文件存放的位置</span></div><div class=\"line\">        File folder = Environment</div><div class=\"line\">                .getExternalStoragePublicDirectory(DOWNLOAD_FOLDER_NAME);</div><div class=\"line\">        <span class=\"keyword\">if</span> (!folder.exists() || !folder.isDirectory()) &#123;</div><div class=\"line\">            folder.mkdirs();</div><div class=\"line\">        &#125;</div><div class=\"line\">        <span class=\"comment\">// 设置下载文件的保存路径</span></div><div class=\"line\">        request.setDestinationInExternalPublicDir(DOWNLOAD_FOLDER_NAME,</div><div class=\"line\">                DOWNLOAD_FILE_NAME);</div><div class=\"line\">        <span class=\"comment\">// 设置文件类型</span></div><div class=\"line\">        MimeTypeMap mimeTypeMap = MimeTypeMap.getSingleton();</div><div class=\"line\">        String mimeString = mimeTypeMap.getMimeTypeFromExtension(MimeTypeMap</div><div class=\"line\">                .getFileExtensionFromUrl(url));</div><div class=\"line\">        request.setMimeType(mimeString);</div><div class=\"line\">        <span class=\"comment\">// 保存返回唯一的downloadId</span></div><div class=\"line\">        UpdateUtils.putLong(context, APK_DOWNLOAD_ID,</div><div class=\"line\">                downloadManager.enqueue(request));</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">CompleteReceiver</span> <span class=\"keyword\">extends</span> <span class=\"title\">BroadcastReceiver</span> </span>&#123;</div><div class=\"line\"></div><div class=\"line\">        <span class=\"meta\">@Override</span></div><div class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onReceive</span><span class=\"params\">(Context context, Intent intent)</span> </span>&#123;</div><div class=\"line\">            <span class=\"comment\">/**</span></div><div class=\"line\">             * get the id of download which have download success, if the id is</div><div class=\"line\">             * my id and it's status is successful, then install it</div><div class=\"line\">             **/</div><div class=\"line\">            <span class=\"keyword\">long</span> completeDownloadId = intent.getLongExtra(</div><div class=\"line\">                    DownloadManager.EXTRA_DOWNLOAD_ID, <span class=\"number\">0</span>);</div><div class=\"line\">            <span class=\"keyword\">long</span> downloadId = UpdateUtils.getLong(context, APK_DOWNLOAD_ID);</div><div class=\"line\"></div><div class=\"line\">            <span class=\"keyword\">if</span> (completeDownloadId == downloadId) &#123;</div><div class=\"line\"></div><div class=\"line\">                <span class=\"comment\">// if download successful</span></div><div class=\"line\">                <span class=\"keyword\">if</span> (queryDownloadStatus(downloadManager, downloadId) == DownloadManager.STATUS_SUCCESSFUL) &#123;</div><div class=\"line\"></div><div class=\"line\">                    <span class=\"comment\">// clear downloadId</span></div><div class=\"line\">                    UpdateUtils.removeSharedPreferenceByKey(context,</div><div class=\"line\">                            APK_DOWNLOAD_ID);</div><div class=\"line\"></div><div class=\"line\">                    <span class=\"comment\">// unregisterReceiver</span></div><div class=\"line\">                    context.unregisterReceiver(completeReceiver);</div><div class=\"line\"></div><div class=\"line\">                    <span class=\"comment\">// install apk</span></div><div class=\"line\">                    String apkFilePath = <span class=\"keyword\">new</span> StringBuilder(Environment</div><div class=\"line\">                            .getExternalStorageDirectory().getAbsolutePath())</div><div class=\"line\">                            .append(File.separator)</div><div class=\"line\">                            .append(DOWNLOAD_FOLDER_NAME)</div><div class=\"line\">                            .append(File.separator).append(DOWNLOAD_FILE_NAME)</div><div class=\"line\">                            .toString();</div><div class=\"line\">                    install(context, apkFilePath);</div><div class=\"line\">                &#125;</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">/**</span></div><div class=\"line\">     * 查询下载状态</div><div class=\"line\">     */</div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">int</span> <span class=\"title\">queryDownloadStatus</span><span class=\"params\">(DownloadManager downloadManager,</span></span></div><div class=\"line\">                                          <span class=\"keyword\">long</span> downloadId) &#123;</div><div class=\"line\">        <span class=\"keyword\">int</span> result = -<span class=\"number\">1</span>;</div><div class=\"line\">        DownloadManager.Query query = <span class=\"keyword\">new</span> DownloadManager.Query()</div><div class=\"line\">                .setFilterById(downloadId);</div><div class=\"line\">        Cursor c = <span class=\"keyword\">null</span>;</div><div class=\"line\">        <span class=\"keyword\">try</span> &#123;</div><div class=\"line\">            c = downloadManager.query(query);</div><div class=\"line\">            <span class=\"keyword\">if</span> (c != <span class=\"keyword\">null</span> &amp;&amp; c.moveToFirst()) &#123;</div><div class=\"line\">                result = c.getInt(c</div><div class=\"line\">                        .getColumnIndex(DownloadManager.COLUMN_STATUS));</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125; <span class=\"keyword\">finally</span> &#123;</div><div class=\"line\">            <span class=\"keyword\">if</span> (c != <span class=\"keyword\">null</span>) &#123;</div><div class=\"line\">                c.close();</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;</div><div class=\"line\">        <span class=\"keyword\">return</span> result;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">/**</span></div><div class=\"line\">     * install app</div><div class=\"line\">     *</div><div class=\"line\">     * <span class=\"doctag\">@param</span> context</div><div class=\"line\">     * <span class=\"doctag\">@param</span> filePath</div><div class=\"line\">     * <span class=\"doctag\">@return</span> whether apk exist</div><div class=\"line\">     */</div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">boolean</span> <span class=\"title\">install</span><span class=\"params\">(Context context, String filePath)</span> </span>&#123;</div><div class=\"line\">        Intent i = <span class=\"keyword\">new</span> Intent(Intent.ACTION_VIEW);</div><div class=\"line\">        File file = <span class=\"keyword\">new</span> File(filePath);</div><div class=\"line\">        <span class=\"keyword\">if</span> (file != <span class=\"keyword\">null</span> &amp;&amp; file.length() &gt; <span class=\"number\">0</span> &amp;&amp; file.exists() &amp;&amp; file.isFile()) &#123;</div><div class=\"line\">            i.setDataAndType(Uri.parse(<span class=\"string\">\"file://\"</span> + filePath),</div><div class=\"line\">                    <span class=\"string\">\"application/vnd.android.package-archive\"</span>);</div><div class=\"line\">            i.addFlags(Intent.FLAG_ACTIVITY_NEW_TASK);</div><div class=\"line\">            context.startActivity(i);</div><div class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">true</span>;</div><div class=\"line\">        &#125;</div><div class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">false</span>;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n</li>\n</ol>\n<h2 id=\"检测到需要升级时-new-ApkDownLoad-execute-就可以了，其中UpdateUtils-getLong-是一个SharedPreferences封装。\"><a href=\"#检测到需要升级时-new-ApkDownLoad-execute-就可以了，其中UpdateUtils-getLong-是一个SharedPreferences封装。\" class=\"headerlink\" title=\"检测到需要升级时  new ApkDownLoad().execute()就可以了，其中UpdateUtils.getLong()是一个SharedPreferences封装。\"></a>检测到需要升级时  <code>new ApkDownLoad().execute()</code>就可以了，其中<code>UpdateUtils.getLong()</code>是一个<code>SharedPreferences</code>封装。</h2><h2 id=\"以上两种方式在小米5Android-N-上实测有效\"><a href=\"#以上两种方式在小米5Android-N-上实测有效\" class=\"headerlink\" title=\"以上两种方式在小米5Android N 上实测有效\"></a>以上两种方式在小米5Android N 上实测有效</h2><p>以上</p>\n","excerpt":"<p>继之前跪在Android M的动态权限之后，最近又跪在了Android N的<code>StrictMode</code>上了。所以啊，要对技术持有敬畏的态度。<br>场景如下：<br>我司内部员工使用的APP需要有应用内更新的功能，意思就是在应用内下载最新版本的应用并且调起安装界面。<br>方案：由于每次从新打开app都需要重新登录，那就在登录界面加上检查更新的接口请求，后台对比当前版本App的VersionCode 和 数据库存储的VersionCode对比，如果需要更新，则返回最新版本软件的下载地址，前端进行下载安装。<br>当前端解析出下载地址后，弹出提示框，下载或者取消。点击下载则开启线程下载，同时在界面上显示下载进度，下载完成后，调起安装界面进行安装。<br>代码很简单，这里放出不涉及我司业务的代码：<br>","more":"<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">downLoadAPK</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">        downLoadThread = <span class=\"keyword\">new</span> Thread(<span class=\"keyword\">new</span> Runnable() &#123;</div><div class=\"line\">            <span class=\"meta\">@Override</span></div><div class=\"line\">            <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">run</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">                <span class=\"keyword\">try</span> &#123;</div><div class=\"line\">                    URL url = <span class=\"keyword\">new</span> URL(downLoadUrl);</div><div class=\"line\"></div><div class=\"line\">                    HttpURLConnection conn = (HttpURLConnection) url</div><div class=\"line\">                            .openConnection();</div><div class=\"line\">                    conn.connect();</div><div class=\"line\">                    <span class=\"keyword\">int</span> length = conn.getContentLength();</div><div class=\"line\">                    InputStream is = conn.getInputStream();</div><div class=\"line\"></div><div class=\"line\">                    File file = <span class=\"keyword\">new</span> File(<span class=\"string\">\"\"</span>);</div><div class=\"line\">                    <span class=\"keyword\">if</span> (!file.exists()) &#123;</div><div class=\"line\">                        file.mkdir();</div><div class=\"line\">                    &#125;</div><div class=\"line\">                    File apkFile = <span class=\"keyword\">new</span> File(saveFilePath);</div><div class=\"line\">                    <span class=\"keyword\">if</span> (apkFile.exists()) &#123;</div><div class=\"line\">                        apkFile.delete();</div><div class=\"line\">                    &#125;</div><div class=\"line\">                    FileOutputStream fos = <span class=\"keyword\">new</span> FileOutputStream(apkFile);</div><div class=\"line\"></div><div class=\"line\">                    <span class=\"keyword\">int</span> count = <span class=\"number\">0</span>;</div><div class=\"line\">                    <span class=\"keyword\">byte</span> buf[] = <span class=\"keyword\">new</span> <span class=\"keyword\">byte</span>[<span class=\"number\">1024</span>];</div><div class=\"line\"></div><div class=\"line\">                    <span class=\"comment\">// 点击取消就停止下载.</span></div><div class=\"line\">                    <span class=\"keyword\">while</span> (!interceptFlag) &#123;</div><div class=\"line\">                        <span class=\"keyword\">int</span> numread = is.read(buf);</div><div class=\"line\">                        count += numread;</div><div class=\"line\">                        progress = (<span class=\"keyword\">int</span>) (((<span class=\"keyword\">float</span>) count / length) * <span class=\"number\">100</span>);</div><div class=\"line\">                        <span class=\"comment\">// 更新进度</span></div><div class=\"line\">                        getHandler().sendEmptyMessage(DOWN_UPDATE);</div><div class=\"line\">                        <span class=\"keyword\">if</span> (numread &lt;= <span class=\"number\">0</span>) &#123;</div><div class=\"line\">                            <span class=\"comment\">// 下载完成通知安装</span></div><div class=\"line\">                            getHandler().sendEmptyMessage(DOWN_OVER);</div><div class=\"line\">                            interceptFlag = <span class=\"keyword\">false</span>;</div><div class=\"line\">                        &#125;</div><div class=\"line\">                        fos.write(buf, <span class=\"number\">0</span>, numread);</div><div class=\"line\">                    &#125;</div><div class=\"line\">                    fos.close();</div><div class=\"line\">                    is.close();</div><div class=\"line\">                &#125; <span class=\"keyword\">catch</span> (Exception e) &#123;</div><div class=\"line\">                    e.printStackTrace();</div><div class=\"line\">                &#125;</div><div class=\"line\"></div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;);</div><div class=\"line\">        downLoadThread.start();</div><div class=\"line\">    &#125;</div></pre></td></tr></table></figure></p>\n<p>以上为下载文件的代码，逻辑很简单，起一个新线程，使用HttpURLConnection进行文件下载。<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">installAPK</span><span class=\"params\">(String filePath)</span> </span>&#123;</div><div class=\"line\">    File apkFile = <span class=\"keyword\">new</span> File(filePath);</div><div class=\"line\">    Intent intent = <span class=\"keyword\">new</span> Intent(Intent.ACTION_VIEW);</div><div class=\"line\">    <span class=\"keyword\">if</span> (!apkFile.exists()) &#123;</div><div class=\"line\">        <span class=\"keyword\">return</span>;</div><div class=\"line\">    &#125;</div><div class=\"line\">    intent.setDataAndType(Uri.fromFile(apkFile), <span class=\"string\">\"application/vnd.android.package-archive\"</span>);</div><div class=\"line\">    context.startActivity(intent);</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>以上代码是刚开始写的安装软件的代码，在Android N 以下运行正常，但是在Android N上却爆出了如下错误，<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div></pre></td><td class=\"code\"><pre><div class=\"line\">android.os.FileUriExposedException: file: exposed beyond app through Intent.getData()</div><div class=\"line\">\tat android.os.StrictMode.onFileUriExposed(StrictMode.java:<span class=\"number\">1799</span>)</div><div class=\"line\">\tat android.net.Uri.checkFileUriExposed(Uri.java:<span class=\"number\">2346</span>)</div><div class=\"line\">\tat android.content.Intent.prepareToLeaveProcess(Intent.java:<span class=\"number\">8949</span>)</div><div class=\"line\">\tat android.content.Intent.prepareToLeaveProcess(Intent.java:<span class=\"number\">8908</span>)</div><div class=\"line\">\tat android.app.Instrumentation.execStartActivity(Instrumentation.java:<span class=\"number\">1519</span>)</div><div class=\"line\">\tat android.app.ContextImpl.startActivity(ContextImpl.java:<span class=\"number\">829</span>)</div><div class=\"line\">\tat android.app.ContextImpl.startActivity(ContextImpl.java:<span class=\"number\">806</span>)</div><div class=\"line\">\tat android.content.ContextWrapper.startActivity(ContextWrapper.java:<span class=\"number\">366</span>)</div><div class=\"line\">\tat com.mmuu.travel.service.ui.LoginFrg.installAPK(LoginFrg.java:<span class=\"number\">349</span>)</div><div class=\"line\">\tat com.mmuu.travel.service.ui.LoginFrg.access$<span class=\"number\">200</span>(LoginFrg.java:<span class=\"number\">66</span>)</div><div class=\"line\">\tat com.mmuu.travel.service.ui.LoginFrg$<span class=\"number\">1</span>.onFinish(LoginFrg.java:<span class=\"number\">134</span>)</div><div class=\"line\">\tat android.os.CountDownTimer$<span class=\"number\">1</span>.handleMessage(CountDownTimer.java:<span class=\"number\">127</span>)</div><div class=\"line\">\tat android.os.Handler.dispatchMessage(Handler.java:<span class=\"number\">102</span>)</div><div class=\"line\">\tat android.os.Looper.loop(Looper.java:<span class=\"number\">154</span>)</div><div class=\"line\">\tat android.app.ActivityThread.main(ActivityThread.java:<span class=\"number\">6114</span>)</div><div class=\"line\">\tat java.lang.reflect.Method.invoke(Native Method)</div><div class=\"line\">\tat com.android.internal.os.ZygoteInit$MethodAndArgsCaller.run(ZygoteInit.java:<span class=\"number\">874</span>)</div><div class=\"line\">\tat com.android.internal.os.ZygoteInit.main(ZygoteInit.java:<span class=\"number\">764</span>)</div></pre></td></tr></table></figure></p>\n<p>网上搜了一下，是Android N在权限上做了一些修改：<a href=\"https://developer.android.google.cn/about/versions/nougat/android-7.0-changes.html\">参考链接</a> <a href=\"https://developer.android.google.cn/about/versions/nougat/android-7.0-changes.html\">https://developer.android.google.cn/about/versions/nougat/android-7.0-changes.html</a></p>\n<blockquote>\n<p>系统权限更改<br>为了提高私有文件的安全性，面向 Android 7.0 或更高版本的应用私有目录被限制访问　(0700)。此设置可防止私有文件的元数据泄漏，如它们的大小或存在性。此权限更改有多重副作用：<br>私有文件的文件权限不应再由所有者放宽，为使用 MODE_WORLD_READABLE 和/或 MODE_WORLD_WRITEABLE 而进行的此类尝试将触发 SecurityException。</p>\n<blockquote>\n<p>注：迄今为止，这种限制尚不能完全执行。应用仍可能使用原生 API 或 File API 来修改它们的私有目录权限。但是，我们强烈反对放宽私有目录的权限。</p>\n</blockquote>\n<p>传递软件包网域外的 file:// URI 可能给接收器留下无法访问的路径。因此，尝试传递 file:// URI 会触发 FileUriExposedException。分享私有文件内容的推荐方法是使用 FileProvider。<br>DownloadManager 不再按文件名分享私人存储的文件。旧版应用在访问 COLUMN_LOCAL_FILENAME 时可能出现无法访问的路径。面向 Android 7.0 或更高版本的应用在尝试访问 COLUMN_LOCAL_FILENAME 时会触发 SecurityException。通过使用 DownloadManager.Request.setDestinationInExternalFilesDir() 或 DownloadManager.Request.setDestinationInExternalPublicDir() 将下载位置设置为公共位置的旧版应用仍可以访问 COLUMN_LOCAL_FILENAME 中的路径，但是我们强烈反对使用这种方法。对于由 DownloadManager 公开的文件，首选的访问方式是使用ContentResolver.openFileDescriptor()。</p>\n</blockquote>\n<p>解决方案：</p>\n<ol>\n<li>FileProvider<br>1.1 在mainfest中加入FileProvider注册<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">application</span>&gt;</span></div><div class=\"line\">     <span class=\"tag\">&lt;<span class=\"name\">provider</span></div><div class=\"line\">         <span class=\"attr\">android:authorities</span>=<span class=\"string\">\"你的应用名.fileprovider\"</span></div><div class=\"line\">         <span class=\"attr\">android:name</span>=<span class=\"string\">\"android.support.v4.content.FileProvider\"</span></div><div class=\"line\">         <span class=\"attr\">android:grantUriPermissions</span>=<span class=\"string\">\"true\"</span></div><div class=\"line\">         <span class=\"attr\">android:exported</span>=<span class=\"string\">\"false\"</span>&gt;</span></div><div class=\"line\">         <span class=\"tag\">&lt;<span class=\"name\">meta-data</span></div><div class=\"line\">           <span class=\"attr\">android:name</span>=<span class=\"string\">\"android.support.FILE_PROVIDER_PATHS\"</span></div><div class=\"line\">           <span class=\"attr\">android:resource</span>=<span class=\"string\">\"@xml/filepaths\"</span>/&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">provider</span>&gt;</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">application</span>&gt;</span></div></pre></td></tr></table></figure>\n</li>\n</ol>\n<p>1.2 在<code>res</code>文件夹下新建<code>xml</code>文件夹，在<code>xml</code>文件夹中新建<code>filepaths</code>文件，这个文件名字和上面的 Android:resource后面的名字要一致<br>编辑该文件：<br><figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;?xml version=\"1.0\" encoding=\"utf-8\"?&gt;</div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">paths</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">external-path</span></div><div class=\"line\">        <span class=\"attr\">name</span>=<span class=\"string\">\"external_storage_root\"</span></div><div class=\"line\">        <span class=\"attr\">path</span>=<span class=\"string\">\"\"</span> /&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">paths</span>&gt;</span></div></pre></td></tr></table></figure></p>\n<p>1.3 修改安装代码<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">installAPK</span><span class=\"params\">(String filePath)</span> </span>&#123;</div><div class=\"line\">        File apkFile = <span class=\"keyword\">new</span> File(filePath);</div><div class=\"line\">        Intent intent = <span class=\"keyword\">new</span> Intent(Intent.ACTION_VIEW);</div><div class=\"line\">        <span class=\"keyword\">if</span> (!apkFile.exists()) &#123;</div><div class=\"line\">            <span class=\"keyword\">return</span>;</div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\">        <span class=\"keyword\">if</span> (Build.VERSION.SDK_INT &gt;= Build.VERSION_CODES.N) &#123;</div><div class=\"line\">            intent.setFlags(Intent.FLAG_GRANT_READ_URI_PERMISSION);</div><div class=\"line\">            Uri contentUri = FileProvider.getUriForFile(context, BuildConfig.APPLICATION_ID + <span class=\"string\">\".fileProvider\"</span>, apkFile);</div><div class=\"line\">            intent.setDataAndType(contentUri, <span class=\"string\">\"application/vnd.android.package-archive\"</span>);</div><div class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">            intent.setDataAndType(Uri.fromFile(apkFile), <span class=\"string\">\"application/vnd.android.package-archive\"</span>);</div><div class=\"line\">        &#125;</div><div class=\"line\">        getActivity().getApplicationContext().startActivity(intent);</div><div class=\"line\">        context.finish();</div><div class=\"line\">    &#125;</div></pre></td></tr></table></figure></p>\n<p>首先判断设备的Android版本，N或者N以上使用<code>FileProvider</code>进行安装，N一下还是原来的方式。注意调用startActivity要使用ApplicationContext，使用Activity.this会报错。</p>\n<ol>\n<li>使用DownloadManager<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div><div class=\"line\">71</div><div class=\"line\">72</div><div class=\"line\">73</div><div class=\"line\">74</div><div class=\"line\">75</div><div class=\"line\">76</div><div class=\"line\">77</div><div class=\"line\">78</div><div class=\"line\">79</div><div class=\"line\">80</div><div class=\"line\">81</div><div class=\"line\">82</div><div class=\"line\">83</div><div class=\"line\">84</div><div class=\"line\">85</div><div class=\"line\">86</div><div class=\"line\">87</div><div class=\"line\">88</div><div class=\"line\">89</div><div class=\"line\">90</div><div class=\"line\">91</div><div class=\"line\">92</div><div class=\"line\">93</div><div class=\"line\">94</div><div class=\"line\">95</div><div class=\"line\">96</div><div class=\"line\">97</div><div class=\"line\">98</div><div class=\"line\">99</div><div class=\"line\">100</div><div class=\"line\">101</div><div class=\"line\">102</div><div class=\"line\">103</div><div class=\"line\">104</div><div class=\"line\">105</div><div class=\"line\">106</div><div class=\"line\">107</div><div class=\"line\">108</div><div class=\"line\">109</div><div class=\"line\">110</div><div class=\"line\">111</div><div class=\"line\">112</div><div class=\"line\">113</div><div class=\"line\">114</div><div class=\"line\">115</div><div class=\"line\">116</div><div class=\"line\">117</div><div class=\"line\">118</div><div class=\"line\">119</div><div class=\"line\">120</div><div class=\"line\">121</div><div class=\"line\">122</div><div class=\"line\">123</div><div class=\"line\">124</div><div class=\"line\">125</div><div class=\"line\">126</div><div class=\"line\">127</div><div class=\"line\">128</div><div class=\"line\">129</div><div class=\"line\">130</div><div class=\"line\">131</div><div class=\"line\">132</div><div class=\"line\">133</div><div class=\"line\">134</div><div class=\"line\">135</div><div class=\"line\">136</div><div class=\"line\">137</div><div class=\"line\">138</div><div class=\"line\">139</div><div class=\"line\">140</div><div class=\"line\">141</div><div class=\"line\">142</div><div class=\"line\">143</div><div class=\"line\">144</div><div class=\"line\">145</div><div class=\"line\">146</div><div class=\"line\">147</div><div class=\"line\">148</div><div class=\"line\">149</div><div class=\"line\">150</div><div class=\"line\">151</div><div class=\"line\">152</div><div class=\"line\">153</div><div class=\"line\">154</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ApkDownLoad</span> </span>&#123;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> String DOWNLOAD_FOLDER_NAME = getLocalForderPath();</div><div class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> String DOWNLOAD_FILE_NAME = <span class=\"string\">\"XXX.apk\"</span>;</div><div class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> String APK_DOWNLOAD_ID = <span class=\"string\">\"apkDownloadId\"</span>;</div><div class=\"line\">    <span class=\"keyword\">private</span> Context context;</div><div class=\"line\">    <span class=\"keyword\">private</span> String url;</div><div class=\"line\">    <span class=\"keyword\">private</span> String notificationTitle;</div><div class=\"line\">    <span class=\"keyword\">private</span> String notificationDescription;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">private</span> DownloadManager downloadManager;</div><div class=\"line\">    <span class=\"keyword\">private</span> CompleteReceiver completeReceiver;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">/**</div><div class=\"line\">     * <span class=\"doctag\">@param</span> context</div><div class=\"line\">     * <span class=\"doctag\">@param</span> url                     下载apk的url</div><div class=\"line\">     * <span class=\"doctag\">@param</span> notificationTitle       通知栏标题</div><div class=\"line\">     * <span class=\"doctag\">@param</span> notificationDescription 通知栏描述</div><div class=\"line\">     */</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">ApkDownLoad</span><span class=\"params\">(Context context, String url, String notificationTitle,</div><div class=\"line\">                       String notificationDescription)</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">super</span>();</div><div class=\"line\">        <span class=\"keyword\">this</span>.context = context;</div><div class=\"line\">        <span class=\"keyword\">this</span>.url = url;</div><div class=\"line\">        <span class=\"keyword\">this</span>.notificationTitle = notificationTitle;</div><div class=\"line\">        <span class=\"keyword\">this</span>.notificationDescription = notificationDescription;</div><div class=\"line\">        downloadManager = (DownloadManager) context</div><div class=\"line\">                .getSystemService(Context.DOWNLOAD_SERVICE);</div><div class=\"line\">        completeReceiver = <span class=\"keyword\">new</span> CompleteReceiver();</div><div class=\"line\"></div><div class=\"line\">        <span class=\"comment\">/** register download success broadcast **/</span></div><div class=\"line\">        context.registerReceiver(completeReceiver, <span class=\"keyword\">new</span> IntentFilter(</div><div class=\"line\">                DownloadManager.ACTION_DOWNLOAD_COMPLETE));</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">execute</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\"></div><div class=\"line\">        <span class=\"comment\">// 清除已下载的内容重新下载</span></div><div class=\"line\">        <span class=\"keyword\">long</span> downloadId = UpdateUtils.getLong(context, APK_DOWNLOAD_ID);</div><div class=\"line\">        <span class=\"keyword\">if</span> (downloadId != -<span class=\"number\">1</span>) &#123;</div><div class=\"line\">            downloadManager.remove(downloadId);</div><div class=\"line\">            UpdateUtils.removeSharedPreferenceByKey(context, APK_DOWNLOAD_ID);</div><div class=\"line\">        &#125;</div><div class=\"line\">        Request request = <span class=\"keyword\">new</span> Request(Uri.parse(url));</div><div class=\"line\">        <span class=\"comment\">// 设置Notification中显示的文字</span></div><div class=\"line\">        request.setTitle(notificationTitle);</div><div class=\"line\">        request.setDescription(notificationDescription);</div><div class=\"line\">        <span class=\"comment\">// 设置可用的网络类型</span></div><div class=\"line\">        request.setAllowedNetworkTypes(Request.NETWORK_MOBILE</div><div class=\"line\">                | Request.NETWORK_WIFI);</div><div class=\"line\">        <span class=\"comment\">// 设置状态栏中显示Notification</span></div><div class=\"line\">        request.setNotificationVisibility(DownloadManager.Request.VISIBILITY_VISIBLE_NOTIFY_COMPLETED);</div><div class=\"line\">        <span class=\"comment\">// 不显示下载界面</span></div><div class=\"line\">        request.setVisibleInDownloadsUi(<span class=\"keyword\">false</span>);</div><div class=\"line\">        <span class=\"comment\">// 设置下载后文件存放的位置</span></div><div class=\"line\">        File folder = Environment</div><div class=\"line\">                .getExternalStoragePublicDirectory(DOWNLOAD_FOLDER_NAME);</div><div class=\"line\">        <span class=\"keyword\">if</span> (!folder.exists() || !folder.isDirectory()) &#123;</div><div class=\"line\">            folder.mkdirs();</div><div class=\"line\">        &#125;</div><div class=\"line\">        <span class=\"comment\">// 设置下载文件的保存路径</span></div><div class=\"line\">        request.setDestinationInExternalPublicDir(DOWNLOAD_FOLDER_NAME,</div><div class=\"line\">                DOWNLOAD_FILE_NAME);</div><div class=\"line\">        <span class=\"comment\">// 设置文件类型</span></div><div class=\"line\">        MimeTypeMap mimeTypeMap = MimeTypeMap.getSingleton();</div><div class=\"line\">        String mimeString = mimeTypeMap.getMimeTypeFromExtension(MimeTypeMap</div><div class=\"line\">                .getFileExtensionFromUrl(url));</div><div class=\"line\">        request.setMimeType(mimeString);</div><div class=\"line\">        <span class=\"comment\">// 保存返回唯一的downloadId</span></div><div class=\"line\">        UpdateUtils.putLong(context, APK_DOWNLOAD_ID,</div><div class=\"line\">                downloadManager.enqueue(request));</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">CompleteReceiver</span> <span class=\"keyword\">extends</span> <span class=\"title\">BroadcastReceiver</span> </span>&#123;</div><div class=\"line\"></div><div class=\"line\">        <span class=\"meta\">@Override</span></div><div class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onReceive</span><span class=\"params\">(Context context, Intent intent)</span> </span>&#123;</div><div class=\"line\">            <span class=\"comment\">/**</div><div class=\"line\">             * get the id of download which have download success, if the id is</div><div class=\"line\">             * my id and it's status is successful, then install it</div><div class=\"line\">             **/</span></div><div class=\"line\">            <span class=\"keyword\">long</span> completeDownloadId = intent.getLongExtra(</div><div class=\"line\">                    DownloadManager.EXTRA_DOWNLOAD_ID, <span class=\"number\">0</span>);</div><div class=\"line\">            <span class=\"keyword\">long</span> downloadId = UpdateUtils.getLong(context, APK_DOWNLOAD_ID);</div><div class=\"line\"></div><div class=\"line\">            <span class=\"keyword\">if</span> (completeDownloadId == downloadId) &#123;</div><div class=\"line\"></div><div class=\"line\">                <span class=\"comment\">// if download successful</span></div><div class=\"line\">                <span class=\"keyword\">if</span> (queryDownloadStatus(downloadManager, downloadId) == DownloadManager.STATUS_SUCCESSFUL) &#123;</div><div class=\"line\"></div><div class=\"line\">                    <span class=\"comment\">// clear downloadId</span></div><div class=\"line\">                    UpdateUtils.removeSharedPreferenceByKey(context,</div><div class=\"line\">                            APK_DOWNLOAD_ID);</div><div class=\"line\"></div><div class=\"line\">                    <span class=\"comment\">// unregisterReceiver</span></div><div class=\"line\">                    context.unregisterReceiver(completeReceiver);</div><div class=\"line\"></div><div class=\"line\">                    <span class=\"comment\">// install apk</span></div><div class=\"line\">                    String apkFilePath = <span class=\"keyword\">new</span> StringBuilder(Environment</div><div class=\"line\">                            .getExternalStorageDirectory().getAbsolutePath())</div><div class=\"line\">                            .append(File.separator)</div><div class=\"line\">                            .append(DOWNLOAD_FOLDER_NAME)</div><div class=\"line\">                            .append(File.separator).append(DOWNLOAD_FILE_NAME)</div><div class=\"line\">                            .toString();</div><div class=\"line\">                    install(context, apkFilePath);</div><div class=\"line\">                &#125;</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">/**</div><div class=\"line\">     * 查询下载状态</div><div class=\"line\">     */</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">int</span> <span class=\"title\">queryDownloadStatus</span><span class=\"params\">(DownloadManager downloadManager,</div><div class=\"line\">                                          <span class=\"keyword\">long</span> downloadId)</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">int</span> result = -<span class=\"number\">1</span>;</div><div class=\"line\">        DownloadManager.Query query = <span class=\"keyword\">new</span> DownloadManager.Query()</div><div class=\"line\">                .setFilterById(downloadId);</div><div class=\"line\">        Cursor c = <span class=\"keyword\">null</span>;</div><div class=\"line\">        <span class=\"keyword\">try</span> &#123;</div><div class=\"line\">            c = downloadManager.query(query);</div><div class=\"line\">            <span class=\"keyword\">if</span> (c != <span class=\"keyword\">null</span> &amp;&amp; c.moveToFirst()) &#123;</div><div class=\"line\">                result = c.getInt(c</div><div class=\"line\">                        .getColumnIndex(DownloadManager.COLUMN_STATUS));</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125; <span class=\"keyword\">finally</span> &#123;</div><div class=\"line\">            <span class=\"keyword\">if</span> (c != <span class=\"keyword\">null</span>) &#123;</div><div class=\"line\">                c.close();</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;</div><div class=\"line\">        <span class=\"keyword\">return</span> result;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">/**</div><div class=\"line\">     * install app</div><div class=\"line\">     *</div><div class=\"line\">     * <span class=\"doctag\">@param</span> context</div><div class=\"line\">     * <span class=\"doctag\">@param</span> filePath</div><div class=\"line\">     * <span class=\"doctag\">@return</span> whether apk exist</div><div class=\"line\">     */</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">boolean</span> <span class=\"title\">install</span><span class=\"params\">(Context context, String filePath)</span> </span>&#123;</div><div class=\"line\">        Intent i = <span class=\"keyword\">new</span> Intent(Intent.ACTION_VIEW);</div><div class=\"line\">        File file = <span class=\"keyword\">new</span> File(filePath);</div><div class=\"line\">        <span class=\"keyword\">if</span> (file != <span class=\"keyword\">null</span> &amp;&amp; file.length() &gt; <span class=\"number\">0</span> &amp;&amp; file.exists() &amp;&amp; file.isFile()) &#123;</div><div class=\"line\">            i.setDataAndType(Uri.parse(<span class=\"string\">\"file://\"</span> + filePath),</div><div class=\"line\">                    <span class=\"string\">\"application/vnd.android.package-archive\"</span>);</div><div class=\"line\">            i.addFlags(Intent.FLAG_ACTIVITY_NEW_TASK);</div><div class=\"line\">            context.startActivity(i);</div><div class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">true</span>;</div><div class=\"line\">        &#125;</div><div class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">false</span>;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n</li>\n</ol>\n<h2 id=\"检测到需要升级时-new-ApkDownLoad-execute-就可以了，其中UpdateUtils-getLong-是一个SharedPreferences封装。\"><a href=\"#检测到需要升级时-new-ApkDownLoad-execute-就可以了，其中UpdateUtils-getLong-是一个SharedPreferences封装。\" class=\"headerlink\" title=\"检测到需要升级时  new ApkDownLoad().execute()就可以了，其中UpdateUtils.getLong()是一个SharedPreferences封装。\"></a>检测到需要升级时  <code>new ApkDownLoad().execute()</code>就可以了，其中<code>UpdateUtils.getLong()</code>是一个<code>SharedPreferences</code>封装。</h2><h2 id=\"以上两种方式在小米5Android-N-上实测有效\"><a href=\"#以上两种方式在小米5Android-N-上实测有效\" class=\"headerlink\" title=\"以上两种方式在小米5Android N 上实测有效\"></a>以上两种方式在小米5Android N 上实测有效</h2><p>以上</p>"},{"title":"2016年国庆-在深圳","date":"2016-10-08T04:42:33.000Z","_content":"国庆之前,辞了工作,跑到深圳找妹子玩了几天.妹子在哈工大深圳校区读研究生,去了之后也没有出去逛,吃饭,图书馆,写作业,折腾hexo写博客.\n也就在校园里逛了一下,拍了几张照片.\n在深圳市南山区的大学城里面,好像是有清华北大哈工大三所研究生院校组成的,据说哈工大深研院开始招本科生了.\n<br/>\n<!-- more -->\n**南门** ,没去其他的门,就从这边进去的,别问为啥,近.\n ![南门](/image/South_Gate.jpg)\n<br/>\n **哈工大深研院的标志?**不知道是不是标志性建筑\n ![标志](/image/main_building.jpg)\n ![标志](/image/sign.jpg)\n<br/>\n **图书馆**,吐槽一下,图书馆的书好少.电梯的海报上面说是有电影放映,但是我们沉迷于学习无法自拔,理所当然的错过了.\n ![图书馆](/image/Library.jpg)\n<br/>\n **图书馆门口的植物标本**,我也不知道是啥,装作看懂的样子\n ![植物标本](/image/Library_Plant_specimen1.jpg)\n ![植物标本](/image/Library_Plant_specimen2.jpg)\n ![植物标本](/image/Library_Plant_specimen3.jpg)\n ![植物标本](/image/Library_Plant_specimen4.jpg)\n<br/>\n **食堂**,食堂的饭菜还是不错的,听说非学校人员也能在里面办卡,只是比学生买饭要贵40%.表示理解.\n![荔园餐厅](/image/Restaurant.jpg)\n![食堂饭](/image/Meal1.jpg)\n![食堂饭](/image/Meal2.jpg)\n![食堂饭](/image/Meal3.jpg)\n<br/>\n  **北大汇丰商学院**,就在图书馆旁边\n![北大汇丰商学院](/image/PHBS.jpg)\n![北大汇丰商学院](/image/PHBS1.jpg)\n<br/>\n**小树林里面有蛇**,晚上去吃饭的时候路过的小树林,里面真的有蛇,亲眼所见,大概有食指粗细,一尺来长,黑灰色.可惜没拍到.\n![小心有蛇](/image/Beware_of_ snakes.jpg)\n<br/>\n**清华大学深研院**,不知道是不是这么叫的,吃完晚饭去瞻仰了一下\n![清华大学深研院](/image/Tsinghua.jpg)\n<br/>\n 本打算去蹭课来着,但是看着妹子的作业就不想去了,我觉得我应该听不大懂.\n<hr/>\n 就这些,待了貌似有四五天的样子,然后就滚回北京找工作了.\n 以上.\n \n","source":"_posts/2016国庆.md","raw":"---\ntitle: 2016年国庆-在深圳\ndate: 2016-10-08 12:42:33\ntags: [乱七八糟]\n---\n国庆之前,辞了工作,跑到深圳找妹子玩了几天.妹子在哈工大深圳校区读研究生,去了之后也没有出去逛,吃饭,图书馆,写作业,折腾hexo写博客.\n也就在校园里逛了一下,拍了几张照片.\n在深圳市南山区的大学城里面,好像是有清华北大哈工大三所研究生院校组成的,据说哈工大深研院开始招本科生了.\n<br/>\n<!-- more -->\n**南门** ,没去其他的门,就从这边进去的,别问为啥,近.\n ![南门](/image/South_Gate.jpg)\n<br/>\n **哈工大深研院的标志?**不知道是不是标志性建筑\n ![标志](/image/main_building.jpg)\n ![标志](/image/sign.jpg)\n<br/>\n **图书馆**,吐槽一下,图书馆的书好少.电梯的海报上面说是有电影放映,但是我们沉迷于学习无法自拔,理所当然的错过了.\n ![图书馆](/image/Library.jpg)\n<br/>\n **图书馆门口的植物标本**,我也不知道是啥,装作看懂的样子\n ![植物标本](/image/Library_Plant_specimen1.jpg)\n ![植物标本](/image/Library_Plant_specimen2.jpg)\n ![植物标本](/image/Library_Plant_specimen3.jpg)\n ![植物标本](/image/Library_Plant_specimen4.jpg)\n<br/>\n **食堂**,食堂的饭菜还是不错的,听说非学校人员也能在里面办卡,只是比学生买饭要贵40%.表示理解.\n![荔园餐厅](/image/Restaurant.jpg)\n![食堂饭](/image/Meal1.jpg)\n![食堂饭](/image/Meal2.jpg)\n![食堂饭](/image/Meal3.jpg)\n<br/>\n  **北大汇丰商学院**,就在图书馆旁边\n![北大汇丰商学院](/image/PHBS.jpg)\n![北大汇丰商学院](/image/PHBS1.jpg)\n<br/>\n**小树林里面有蛇**,晚上去吃饭的时候路过的小树林,里面真的有蛇,亲眼所见,大概有食指粗细,一尺来长,黑灰色.可惜没拍到.\n![小心有蛇](/image/Beware_of_ snakes.jpg)\n<br/>\n**清华大学深研院**,不知道是不是这么叫的,吃完晚饭去瞻仰了一下\n![清华大学深研院](/image/Tsinghua.jpg)\n<br/>\n 本打算去蹭课来着,但是看着妹子的作业就不想去了,我觉得我应该听不大懂.\n<hr/>\n 就这些,待了貌似有四五天的样子,然后就滚回北京找工作了.\n 以上.\n \n","slug":"2016国庆","published":1,"updated":"2018-01-01T07:14:24.418Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjbvyt3u70001scdgwnfzt7xn","content":"<p>国庆之前,辞了工作,跑到深圳找妹子玩了几天.妹子在哈工大深圳校区读研究生,去了之后也没有出去逛,吃饭,图书馆,写作业,折腾hexo写博客.<br>也就在校园里逛了一下,拍了几张照片.<br>在深圳市南山区的大学城里面,好像是有清华北大哈工大三所研究生院校组成的,据说哈工大深研院开始招本科生了.<br><br><br><a id=\"more\"></a><br><strong>南门</strong> ,没去其他的门,就从这边进去的,别问为啥,近.<br> <img src=\"/image/South_Gate.jpg\" alt=\"南门\"><br><br><br> <strong>哈工大深研院的标志?</strong>不知道是不是标志性建筑<br> <img src=\"/image/main_building.jpg\" alt=\"标志\"><br> <img src=\"/image/sign.jpg\" alt=\"标志\"><br><br><br> <strong>图书馆</strong>,吐槽一下,图书馆的书好少.电梯的海报上面说是有电影放映,但是我们沉迷于学习无法自拔,理所当然的错过了.<br> <img src=\"/image/Library.jpg\" alt=\"图书馆\"><br><br><br> <strong>图书馆门口的植物标本</strong>,我也不知道是啥,装作看懂的样子<br> <img src=\"/image/Library_Plant_specimen1.jpg\" alt=\"植物标本\"><br> <img src=\"/image/Library_Plant_specimen2.jpg\" alt=\"植物标本\"><br> <img src=\"/image/Library_Plant_specimen3.jpg\" alt=\"植物标本\"><br> <img src=\"/image/Library_Plant_specimen4.jpg\" alt=\"植物标本\"><br><br><br> <strong>食堂</strong>,食堂的饭菜还是不错的,听说非学校人员也能在里面办卡,只是比学生买饭要贵40%.表示理解.<br><img src=\"/image/Restaurant.jpg\" alt=\"荔园餐厅\"><br><img src=\"/image/Meal1.jpg\" alt=\"食堂饭\"><br><img src=\"/image/Meal2.jpg\" alt=\"食堂饭\"><br><img src=\"/image/Meal3.jpg\" alt=\"食堂饭\"><br><br><br>  <strong>北大汇丰商学院</strong>,就在图书馆旁边<br><img src=\"/image/PHBS.jpg\" alt=\"北大汇丰商学院\"><br><img src=\"/image/PHBS1.jpg\" alt=\"北大汇丰商学院\"><br><br><br><strong>小树林里面有蛇</strong>,晚上去吃饭的时候路过的小树林,里面真的有蛇,亲眼所见,大概有食指粗细,一尺来长,黑灰色.可惜没拍到.<br><img src=\"/image/Beware_of_ snakes.jpg\" alt=\"小心有蛇\"><br><br><br><strong>清华大学深研院</strong>,不知道是不是这么叫的,吃完晚饭去瞻仰了一下<br><img src=\"/image/Tsinghua.jpg\" alt=\"清华大学深研院\"><br><br><br> 本打算去蹭课来着,但是看着妹子的作业就不想去了,我觉得我应该听不大懂.</p>\n<p><hr><br> 就这些,待了貌似有四五天的样子,然后就滚回北京找工作了.<br> 以上.</p>\n","excerpt":"<p>国庆之前,辞了工作,跑到深圳找妹子玩了几天.妹子在哈工大深圳校区读研究生,去了之后也没有出去逛,吃饭,图书馆,写作业,折腾hexo写博客.<br>也就在校园里逛了一下,拍了几张照片.<br>在深圳市南山区的大学城里面,好像是有清华北大哈工大三所研究生院校组成的,据说哈工大深研院开始招本科生了.<br><br/><br>","more":"<br><strong>南门</strong> ,没去其他的门,就从这边进去的,别问为啥,近.<br> <img src=\"/image/South_Gate.jpg\" alt=\"南门\"><br><br/><br> <strong>哈工大深研院的标志?</strong>不知道是不是标志性建筑<br> <img src=\"/image/main_building.jpg\" alt=\"标志\"><br> <img src=\"/image/sign.jpg\" alt=\"标志\"><br><br/><br> <strong>图书馆</strong>,吐槽一下,图书馆的书好少.电梯的海报上面说是有电影放映,但是我们沉迷于学习无法自拔,理所当然的错过了.<br> <img src=\"/image/Library.jpg\" alt=\"图书馆\"><br><br/><br> <strong>图书馆门口的植物标本</strong>,我也不知道是啥,装作看懂的样子<br> <img src=\"/image/Library_Plant_specimen1.jpg\" alt=\"植物标本\"><br> <img src=\"/image/Library_Plant_specimen2.jpg\" alt=\"植物标本\"><br> <img src=\"/image/Library_Plant_specimen3.jpg\" alt=\"植物标本\"><br> <img src=\"/image/Library_Plant_specimen4.jpg\" alt=\"植物标本\"><br><br/><br> <strong>食堂</strong>,食堂的饭菜还是不错的,听说非学校人员也能在里面办卡,只是比学生买饭要贵40%.表示理解.<br><img src=\"/image/Restaurant.jpg\" alt=\"荔园餐厅\"><br><img src=\"/image/Meal1.jpg\" alt=\"食堂饭\"><br><img src=\"/image/Meal2.jpg\" alt=\"食堂饭\"><br><img src=\"/image/Meal3.jpg\" alt=\"食堂饭\"><br><br/><br>  <strong>北大汇丰商学院</strong>,就在图书馆旁边<br><img src=\"/image/PHBS.jpg\" alt=\"北大汇丰商学院\"><br><img src=\"/image/PHBS1.jpg\" alt=\"北大汇丰商学院\"><br><br/><br><strong>小树林里面有蛇</strong>,晚上去吃饭的时候路过的小树林,里面真的有蛇,亲眼所见,大概有食指粗细,一尺来长,黑灰色.可惜没拍到.<br><img src=\"/image/Beware_of_ snakes.jpg\" alt=\"小心有蛇\"><br><br/><br><strong>清华大学深研院</strong>,不知道是不是这么叫的,吃完晚饭去瞻仰了一下<br><img src=\"/image/Tsinghua.jpg\" alt=\"清华大学深研院\"><br><br/><br> 本打算去蹭课来着,但是看着妹子的作业就不想去了,我觉得我应该听不大懂.</p>\n<p><hr/><br> 就这些,待了貌似有四五天的样子,然后就滚回北京找工作了.<br> 以上.</p>"},{"title":"Android中使用WebSocket","date":"2017-12-25T08:23:46.000Z","_content":"背景：后端逻辑框架调整，将原来的推送和轮询方式改成了使用`WebSocket`通信。原来的请求方式是由app发起请求，appServer对请求进行分发，中转中继服务器将具体请求下发到对应的物联网服务器，物联网服务器将指令下发到指定的设备。整个流程涉及到很多层http请求，并且每个服务的回调接口还不一致，只能在app发情请求之后，接着去轮询服务器，服务器端去查询设备状态、是否对指令有响应。\n改版后涉及到对物联网的请求全部改成`WebSocket`,不在轮询，而是被动等待。\n后端使用的是`Spring`实现的`WebSocket`,app端使用的是[https://github.com/TooTallNate/Java-WebSocket](https://github.com/TooTallNate/Java-WebSocket)这个开源项目。\n<!-- more -->\n#### APP端实现\n1. 添加依赖`compile \"org.java-websocket:Java-WebSocket:1.3.7\"`\n2. 我们只需要关心三方库中`WebSocketClient`类就可以了，其他细节底层已经封装好了。\n3. 类中有四个方法需要重写：\n``` java\n/**打开连接*/\n public void onOpen(ServerHandshake handshakedata)\n /**服务端返回消息*/\n public void onMessage(String message) \n /**关闭连接*/\n public void onClose(int code, String reason, boolean remote)\n /**出现异常*/\n public void onError(Exception ex)\n```\n4. 一个简单的小测试，app端定义了一个发送按钮，和一个展示消息的文本\n``` xml\n<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<LinearLayout xmlns:android=\"http://schemas.android.com/apk/res/android\"\n    xmlns:tools=\"http://schemas.android.com/tools\"\n    android:layout_width=\"match_parent\"\n    android:layout_height=\"match_parent\"\n    android:orientation=\"vertical\"\n    tools:context=\"com.huangyuanlove.testwebsocket.MainActivity\">\n\n    <ScrollView\n        android:layout_width=\"match_parent\"\n        android:layout_height=\"0dp\"\n        android:layout_weight=\"1\">\n\n        <TextView\n            android:id=\"@+id/show_message\"\n            android:layout_width=\"wrap_content\"\n            android:layout_height=\"wrap_content\" />\n    </ScrollView>\n\n    <LinearLayout\n        android:layout_width=\"match_parent\"\n        android:layout_height=\"wrap_content\"\n        android:orientation=\"horizontal\">\n\n        <EditText\n            android:id=\"@+id/edit_text\"\n            android:layout_width=\"0dp\"\n            android:layout_height=\"wrap_content\"\n            android:layout_weight=\"1\" />\n\n        <TextView\n            android:id=\"@+id/send\"\n            android:layout_width=\"wrap_content\"\n            android:layout_height=\"wrap_content\"\n            android:background=\"@color/colorAccent\"\n            android:padding=\"10dp\"\n            android:text=\"发送\"\n            android:textColor=\"@android:color/black\" />\n    </LinearLayout>\n\n</LinearLayout>\n```\n5. 在代码里面处理具体逻辑：\n``` java\nimport android.os.Bundle;\nimport android.os.Handler;\nimport android.os.Message;\nimport android.support.design.widget.Snackbar;\nimport android.support.v7.app.AppCompatActivity;\nimport android.view.View;\nimport android.widget.EditText;\nimport android.widget.TextView;\n\nimport org.java_websocket.client.WebSocketClient;\nimport org.java_websocket.handshake.ServerHandshake;\n\nimport java.net.URI;\nimport java.util.Date;\n\npublic class MainActivity extends AppCompatActivity implements View.OnClickListener {\n\n\n    private TextView showMessage;\n    private EditText editText;\n    private WebSocketClient webSocketClient;\n    private StringBuilder sb = new StringBuilder();\n\n    private Handler handler = new Handler(new Handler.Callback() {\n        @Override\n        public boolean handleMessage(Message msg) {\n            sb.append(\"服务器返回数据：\");\n            sb.append(msg.obj.toString());\n            sb.append(\"\\n\");\n            showMessage.setText(sb.toString());\n            return true;\n        }\n    });\n\n    @Override\n    protected void onCreate(Bundle savedInstanceState) {\n        super.onCreate(savedInstanceState);\n        setContentView(R.layout.activity_main);\n        showMessage = findViewById(R.id.show_message);\n        editText = findViewById(R.id.edit_text);\n        findViewById(R.id.send).setOnClickListener(this);\n        URI serverURI = URI.create(\"ws://192.168.1.199:8887\");\n        webSocketClient = new WebSocketClient(serverURI) {\n            @Override\n            public void onOpen(ServerHandshake handshakedata) {\n                sb.append(\"onOpen at time：\");\n                sb.append(new Date());\n                sb.append(\"服务器状态：\");\n                sb.append(handshakedata.getHttpStatusMessage());\n                sb.append(\"\\n\");\n                showMessage.setText(sb.toString());\n            }\n            @Override\n            public void onMessage(String message) {\n                Message handlerMessage = Message.obtain();\n                handlerMessage.obj = message;\n                handler.sendMessage(handlerMessage);\n            }\n            @Override\n            public void onClose(int code, String reason, boolean remote) {\n                sb.append(\"onClose at time：\");\n                sb.append(new Date());\n                sb.append(\"\\n\");\n                sb.append(\"onClose info:\");\n                sb.append(code);\n                sb.append(reason);\n                sb.append(remote);\n                sb.append(\"\\n\");\n                showMessage.setText(sb.toString());\n            }\n\n            @Override\n            public void onError(Exception ex) {\n                sb.append(\"onError at time：\");\n                sb.append(new Date());\n                sb.append(\"\\n\");\n                sb.append(ex);\n                sb.append(\"\\n\");\n                showMessage.setText(sb.toString());\n            }\n        };\n        webSocketClient.connect();\n\n\n    }\n\n    @Override\n    public void onClick(View v) {\n        switch (v.getId()) {\n            case R.id.send:\n                if(webSocketClient.isClosed() || webSocketClient.isClosing()){\n                    Snackbar.make(v,\"Client正在关闭\",Snackbar.LENGTH_SHORT).show();\n                    webSocketClient.connect();\n                    break;\n                }\n                webSocketClient.send(editText.getText().toString().trim());\n                sb.append(\"客户端发送消息：\");\n                sb.append(new Date());\n                sb.append(\"\\n\");\n                sb.append(editText.getText().toString().trim());\n                sb.append(\"\\n\");\n                showMessage.setText(sb.toString());\n                editText.setText(\"\");\n                break;\n            default:\n                break;\n        }\n    }\n}\n\n```\n#### 服务端实现\n上面提到我们后端使用的Spring中的WebSocket实现，其实用什么实现服务端无所谓，只要遵循协议就可以。个人在本地做测试的时候用的还是这个开源项目。\n1. 服务端只需要关心`WebSocketServer`这个类就好，这个类里面有五个方法需要重写：\n``` java\n/**服务开启*/\npublic void onStart() \n/**有客户端连接*/\npublic void onOpen(WebSocket webSocket, ClientHandshake clientHandshake)\n/**服务端关闭*/\npublic void onClose(WebSocket webSocket, int i, String s, boolean b)\n/**收到客户端的消息*/\npublic void onMessage(WebSocket webSocket, String s)\n/**出现异常*/\n public void onError(WebSocket webSocket, Exception e) \n```\n2. 具体代码如下：\n``` java\npackage com.huangyuanlove;\n\nimport org.java_websocket.WebSocket;\nimport org.java_websocket.WebSocketImpl;\nimport org.java_websocket.handshake.ClientHandshake;\nimport org.java_websocket.server.WebSocketServer;\n\nimport java.io.BufferedReader;\nimport java.io.InputStreamReader;\nimport java.net.InetSocketAddress;\nimport java.net.UnknownHostException;\n\npublic class TestWebSocket extends WebSocketServer {\n    public TestWebSocket(int port) throws UnknownHostException {\n        super(new InetSocketAddress(port));\n    }\n\n    public TestWebSocket(InetSocketAddress address) {\n        super(address);\n    }\n\n    public static void main(String[] args) {\n        WebSocketImpl.DEBUG = true;\n        try {\n            int port = 8887; // 843 flash policy port\n            TestWebSocket s = new TestWebSocket(port);\n            s.start();\n            System.out.println(\"ChatServer started on port: \" + s.getPort());\n\n            BufferedReader sysin = new BufferedReader(new InputStreamReader(System.in));\n            while (true) {\n                String in = sysin.readLine();\n                s.broadcast(in);\n                if (in.equals(\"exit\")) {\n                    s.stop(1000);\n                    break;\n                }\n            }\n        } catch (Exception ex) {\n            ex.printStackTrace();\n        }\n    }\n\n    @Override\n    public void onOpen(WebSocket webSocket, ClientHandshake clientHandshake) {\n\n        broadcast(\"new connection: \" + clientHandshake.getResourceDescriptor());\n        System.out.println(webSocket.getRemoteSocketAddress().getAddress().getHostAddress() + \" entered the room!\");\n    }\n\n    @Override\n    public void onClose(WebSocket webSocket, int i, String s, boolean b) {\n        broadcast(webSocket + \" onClose\");\n        System.out.println(webSocket + \" onClose\");\n    }\n\n    @Override\n    public void onMessage(WebSocket webSocket, String s) {\n\n        broadcast(s);\n        System.out.println(webSocket + \": \" + s);\n    }\n\n    @Override\n    public void onError(WebSocket webSocket, Exception e) {\n        e.printStackTrace();\n        if (webSocket != null) {\n            // some errors like port binding failed may not be assignable to a specific websocket\n        }\n    }\n\n    @Override\n    public void onStart() {\n        System.out.println(\"Server started!\");\n    }\n}\n```\n上面代码中`onMessage`方法中的`broadcast`方法是向所有连接到服务器的客户端发送消息(广播发送，其实就是一个小型的局域网聊天室)，如果只是谁发来的消息就回复给谁，可以调用`webSocket.send()`方法。\n是用的时候先开启服务端，然后开启客户端(app)，需要注意是的，在客户端中重写的方法都不是在主线程中，如果需要更新UI，请切换到UI线程。\n或者在客户端中使用`Service`,在`Service`中收到消息之后，广播给UI界面。\n\n----\n以上","source":"_posts/Android中使用WebSocket.md","raw":"---\ntitle: Android中使用WebSocket\ndate: 2017-12-25 16:23:46\ntags: [Andorid,WebSocket]\n---\n背景：后端逻辑框架调整，将原来的推送和轮询方式改成了使用`WebSocket`通信。原来的请求方式是由app发起请求，appServer对请求进行分发，中转中继服务器将具体请求下发到对应的物联网服务器，物联网服务器将指令下发到指定的设备。整个流程涉及到很多层http请求，并且每个服务的回调接口还不一致，只能在app发情请求之后，接着去轮询服务器，服务器端去查询设备状态、是否对指令有响应。\n改版后涉及到对物联网的请求全部改成`WebSocket`,不在轮询，而是被动等待。\n后端使用的是`Spring`实现的`WebSocket`,app端使用的是[https://github.com/TooTallNate/Java-WebSocket](https://github.com/TooTallNate/Java-WebSocket)这个开源项目。\n<!-- more -->\n#### APP端实现\n1. 添加依赖`compile \"org.java-websocket:Java-WebSocket:1.3.7\"`\n2. 我们只需要关心三方库中`WebSocketClient`类就可以了，其他细节底层已经封装好了。\n3. 类中有四个方法需要重写：\n``` java\n/**打开连接*/\n public void onOpen(ServerHandshake handshakedata)\n /**服务端返回消息*/\n public void onMessage(String message) \n /**关闭连接*/\n public void onClose(int code, String reason, boolean remote)\n /**出现异常*/\n public void onError(Exception ex)\n```\n4. 一个简单的小测试，app端定义了一个发送按钮，和一个展示消息的文本\n``` xml\n<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<LinearLayout xmlns:android=\"http://schemas.android.com/apk/res/android\"\n    xmlns:tools=\"http://schemas.android.com/tools\"\n    android:layout_width=\"match_parent\"\n    android:layout_height=\"match_parent\"\n    android:orientation=\"vertical\"\n    tools:context=\"com.huangyuanlove.testwebsocket.MainActivity\">\n\n    <ScrollView\n        android:layout_width=\"match_parent\"\n        android:layout_height=\"0dp\"\n        android:layout_weight=\"1\">\n\n        <TextView\n            android:id=\"@+id/show_message\"\n            android:layout_width=\"wrap_content\"\n            android:layout_height=\"wrap_content\" />\n    </ScrollView>\n\n    <LinearLayout\n        android:layout_width=\"match_parent\"\n        android:layout_height=\"wrap_content\"\n        android:orientation=\"horizontal\">\n\n        <EditText\n            android:id=\"@+id/edit_text\"\n            android:layout_width=\"0dp\"\n            android:layout_height=\"wrap_content\"\n            android:layout_weight=\"1\" />\n\n        <TextView\n            android:id=\"@+id/send\"\n            android:layout_width=\"wrap_content\"\n            android:layout_height=\"wrap_content\"\n            android:background=\"@color/colorAccent\"\n            android:padding=\"10dp\"\n            android:text=\"发送\"\n            android:textColor=\"@android:color/black\" />\n    </LinearLayout>\n\n</LinearLayout>\n```\n5. 在代码里面处理具体逻辑：\n``` java\nimport android.os.Bundle;\nimport android.os.Handler;\nimport android.os.Message;\nimport android.support.design.widget.Snackbar;\nimport android.support.v7.app.AppCompatActivity;\nimport android.view.View;\nimport android.widget.EditText;\nimport android.widget.TextView;\n\nimport org.java_websocket.client.WebSocketClient;\nimport org.java_websocket.handshake.ServerHandshake;\n\nimport java.net.URI;\nimport java.util.Date;\n\npublic class MainActivity extends AppCompatActivity implements View.OnClickListener {\n\n\n    private TextView showMessage;\n    private EditText editText;\n    private WebSocketClient webSocketClient;\n    private StringBuilder sb = new StringBuilder();\n\n    private Handler handler = new Handler(new Handler.Callback() {\n        @Override\n        public boolean handleMessage(Message msg) {\n            sb.append(\"服务器返回数据：\");\n            sb.append(msg.obj.toString());\n            sb.append(\"\\n\");\n            showMessage.setText(sb.toString());\n            return true;\n        }\n    });\n\n    @Override\n    protected void onCreate(Bundle savedInstanceState) {\n        super.onCreate(savedInstanceState);\n        setContentView(R.layout.activity_main);\n        showMessage = findViewById(R.id.show_message);\n        editText = findViewById(R.id.edit_text);\n        findViewById(R.id.send).setOnClickListener(this);\n        URI serverURI = URI.create(\"ws://192.168.1.199:8887\");\n        webSocketClient = new WebSocketClient(serverURI) {\n            @Override\n            public void onOpen(ServerHandshake handshakedata) {\n                sb.append(\"onOpen at time：\");\n                sb.append(new Date());\n                sb.append(\"服务器状态：\");\n                sb.append(handshakedata.getHttpStatusMessage());\n                sb.append(\"\\n\");\n                showMessage.setText(sb.toString());\n            }\n            @Override\n            public void onMessage(String message) {\n                Message handlerMessage = Message.obtain();\n                handlerMessage.obj = message;\n                handler.sendMessage(handlerMessage);\n            }\n            @Override\n            public void onClose(int code, String reason, boolean remote) {\n                sb.append(\"onClose at time：\");\n                sb.append(new Date());\n                sb.append(\"\\n\");\n                sb.append(\"onClose info:\");\n                sb.append(code);\n                sb.append(reason);\n                sb.append(remote);\n                sb.append(\"\\n\");\n                showMessage.setText(sb.toString());\n            }\n\n            @Override\n            public void onError(Exception ex) {\n                sb.append(\"onError at time：\");\n                sb.append(new Date());\n                sb.append(\"\\n\");\n                sb.append(ex);\n                sb.append(\"\\n\");\n                showMessage.setText(sb.toString());\n            }\n        };\n        webSocketClient.connect();\n\n\n    }\n\n    @Override\n    public void onClick(View v) {\n        switch (v.getId()) {\n            case R.id.send:\n                if(webSocketClient.isClosed() || webSocketClient.isClosing()){\n                    Snackbar.make(v,\"Client正在关闭\",Snackbar.LENGTH_SHORT).show();\n                    webSocketClient.connect();\n                    break;\n                }\n                webSocketClient.send(editText.getText().toString().trim());\n                sb.append(\"客户端发送消息：\");\n                sb.append(new Date());\n                sb.append(\"\\n\");\n                sb.append(editText.getText().toString().trim());\n                sb.append(\"\\n\");\n                showMessage.setText(sb.toString());\n                editText.setText(\"\");\n                break;\n            default:\n                break;\n        }\n    }\n}\n\n```\n#### 服务端实现\n上面提到我们后端使用的Spring中的WebSocket实现，其实用什么实现服务端无所谓，只要遵循协议就可以。个人在本地做测试的时候用的还是这个开源项目。\n1. 服务端只需要关心`WebSocketServer`这个类就好，这个类里面有五个方法需要重写：\n``` java\n/**服务开启*/\npublic void onStart() \n/**有客户端连接*/\npublic void onOpen(WebSocket webSocket, ClientHandshake clientHandshake)\n/**服务端关闭*/\npublic void onClose(WebSocket webSocket, int i, String s, boolean b)\n/**收到客户端的消息*/\npublic void onMessage(WebSocket webSocket, String s)\n/**出现异常*/\n public void onError(WebSocket webSocket, Exception e) \n```\n2. 具体代码如下：\n``` java\npackage com.huangyuanlove;\n\nimport org.java_websocket.WebSocket;\nimport org.java_websocket.WebSocketImpl;\nimport org.java_websocket.handshake.ClientHandshake;\nimport org.java_websocket.server.WebSocketServer;\n\nimport java.io.BufferedReader;\nimport java.io.InputStreamReader;\nimport java.net.InetSocketAddress;\nimport java.net.UnknownHostException;\n\npublic class TestWebSocket extends WebSocketServer {\n    public TestWebSocket(int port) throws UnknownHostException {\n        super(new InetSocketAddress(port));\n    }\n\n    public TestWebSocket(InetSocketAddress address) {\n        super(address);\n    }\n\n    public static void main(String[] args) {\n        WebSocketImpl.DEBUG = true;\n        try {\n            int port = 8887; // 843 flash policy port\n            TestWebSocket s = new TestWebSocket(port);\n            s.start();\n            System.out.println(\"ChatServer started on port: \" + s.getPort());\n\n            BufferedReader sysin = new BufferedReader(new InputStreamReader(System.in));\n            while (true) {\n                String in = sysin.readLine();\n                s.broadcast(in);\n                if (in.equals(\"exit\")) {\n                    s.stop(1000);\n                    break;\n                }\n            }\n        } catch (Exception ex) {\n            ex.printStackTrace();\n        }\n    }\n\n    @Override\n    public void onOpen(WebSocket webSocket, ClientHandshake clientHandshake) {\n\n        broadcast(\"new connection: \" + clientHandshake.getResourceDescriptor());\n        System.out.println(webSocket.getRemoteSocketAddress().getAddress().getHostAddress() + \" entered the room!\");\n    }\n\n    @Override\n    public void onClose(WebSocket webSocket, int i, String s, boolean b) {\n        broadcast(webSocket + \" onClose\");\n        System.out.println(webSocket + \" onClose\");\n    }\n\n    @Override\n    public void onMessage(WebSocket webSocket, String s) {\n\n        broadcast(s);\n        System.out.println(webSocket + \": \" + s);\n    }\n\n    @Override\n    public void onError(WebSocket webSocket, Exception e) {\n        e.printStackTrace();\n        if (webSocket != null) {\n            // some errors like port binding failed may not be assignable to a specific websocket\n        }\n    }\n\n    @Override\n    public void onStart() {\n        System.out.println(\"Server started!\");\n    }\n}\n```\n上面代码中`onMessage`方法中的`broadcast`方法是向所有连接到服务器的客户端发送消息(广播发送，其实就是一个小型的局域网聊天室)，如果只是谁发来的消息就回复给谁，可以调用`webSocket.send()`方法。\n是用的时候先开启服务端，然后开启客户端(app)，需要注意是的，在客户端中重写的方法都不是在主线程中，如果需要更新UI，请切换到UI线程。\n或者在客户端中使用`Service`,在`Service`中收到消息之后，广播给UI界面。\n\n----\n以上","slug":"Android中使用WebSocket","published":1,"updated":"2017-12-30T13:13:07.219Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjbvyt3ub0003scdga9iovuz0","content":"<p>背景：后端逻辑框架调整，将原来的推送和轮询方式改成了使用<code>WebSocket</code>通信。原来的请求方式是由app发起请求，appServer对请求进行分发，中转中继服务器将具体请求下发到对应的物联网服务器，物联网服务器将指令下发到指定的设备。整个流程涉及到很多层http请求，并且每个服务的回调接口还不一致，只能在app发情请求之后，接着去轮询服务器，服务器端去查询设备状态、是否对指令有响应。<br>改版后涉及到对物联网的请求全部改成<code>WebSocket</code>,不在轮询，而是被动等待。<br>后端使用的是<code>Spring</code>实现的<code>WebSocket</code>,app端使用的是<a href=\"https://github.com/TooTallNate/Java-WebSocket\" target=\"_blank\" rel=\"external\">https://github.com/TooTallNate/Java-WebSocket</a>这个开源项目。<br><a id=\"more\"></a></p>\n<h4 id=\"APP端实现\"><a href=\"#APP端实现\" class=\"headerlink\" title=\"APP端实现\"></a>APP端实现</h4><ol>\n<li>添加依赖<code>compile &quot;org.java-websocket:Java-WebSocket:1.3.7&quot;</code></li>\n<li>我们只需要关心三方库中<code>WebSocketClient</code>类就可以了，其他细节底层已经封装好了。</li>\n<li><p>类中有四个方法需要重写：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">/**打开连接*/</span></div><div class=\"line\"> <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onOpen</span><span class=\"params\">(ServerHandshake handshakedata)</span></span></div><div class=\"line\"> <span class=\"comment\">/**服务端返回消息*/</span></div><div class=\"line\"> <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onMessage</span><span class=\"params\">(String message)</span> </div><div class=\"line\"> <span class=\"comment\">/**关闭连接*/</span></div><div class=\"line\"> <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onClose</span><span class=\"params\">(<span class=\"keyword\">int</span> code, String reason, <span class=\"keyword\">boolean</span> remote)</span></div><div class=\"line\"> <span class=\"comment\">/**出现异常*/</span></div><div class=\"line\"> <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onError</span><span class=\"params\">(Exception ex)</span></div></pre></td></tr></table></figure>\n</li>\n<li><p>一个简单的小测试，app端定义了一个发送按钮，和一个展示消息的文本</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;?xml version=\"1.0\" encoding=\"utf-8\"?&gt;</div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">LinearLayout</span> <span class=\"attr\">xmlns:android</span>=<span class=\"string\">\"http://schemas.android.com/apk/res/android\"</span></span></div><div class=\"line\">    <span class=\"attr\">xmlns:tools</span>=<span class=\"string\">\"http://schemas.android.com/tools\"</span></div><div class=\"line\">    <span class=\"attr\">android:layout_width</span>=<span class=\"string\">\"match_parent\"</span></div><div class=\"line\">    <span class=\"attr\">android:layout_height</span>=<span class=\"string\">\"match_parent\"</span></div><div class=\"line\">    <span class=\"attr\">android:orientation</span>=<span class=\"string\">\"vertical\"</span></div><div class=\"line\">    <span class=\"attr\">tools:context</span>=<span class=\"string\">\"com.huangyuanlove.testwebsocket.MainActivity\"</span>&gt;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">ScrollView</span></span></div><div class=\"line\">        <span class=\"attr\">android:layout_width</span>=<span class=\"string\">\"match_parent\"</span></div><div class=\"line\">        <span class=\"attr\">android:layout_height</span>=<span class=\"string\">\"0dp\"</span></div><div class=\"line\">        <span class=\"attr\">android:layout_weight</span>=<span class=\"string\">\"1\"</span>&gt;</div><div class=\"line\"></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">TextView</span></span></div><div class=\"line\">            <span class=\"attr\">android:id</span>=<span class=\"string\">\"@+id/show_message\"</span></div><div class=\"line\">            <span class=\"attr\">android:layout_width</span>=<span class=\"string\">\"wrap_content\"</span></div><div class=\"line\">            <span class=\"attr\">android:layout_height</span>=<span class=\"string\">\"wrap_content\"</span> /&gt;</div><div class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">ScrollView</span>&gt;</span></div><div class=\"line\"></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">LinearLayout</span></span></div><div class=\"line\">        <span class=\"attr\">android:layout_width</span>=<span class=\"string\">\"match_parent\"</span></div><div class=\"line\">        <span class=\"attr\">android:layout_height</span>=<span class=\"string\">\"wrap_content\"</span></div><div class=\"line\">        <span class=\"attr\">android:orientation</span>=<span class=\"string\">\"horizontal\"</span>&gt;</div><div class=\"line\"></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">EditText</span></span></div><div class=\"line\">            <span class=\"attr\">android:id</span>=<span class=\"string\">\"@+id/edit_text\"</span></div><div class=\"line\">            <span class=\"attr\">android:layout_width</span>=<span class=\"string\">\"0dp\"</span></div><div class=\"line\">            <span class=\"attr\">android:layout_height</span>=<span class=\"string\">\"wrap_content\"</span></div><div class=\"line\">            <span class=\"attr\">android:layout_weight</span>=<span class=\"string\">\"1\"</span> /&gt;</div><div class=\"line\"></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">TextView</span></span></div><div class=\"line\">            <span class=\"attr\">android:id</span>=<span class=\"string\">\"@+id/send\"</span></div><div class=\"line\">            <span class=\"attr\">android:layout_width</span>=<span class=\"string\">\"wrap_content\"</span></div><div class=\"line\">            <span class=\"attr\">android:layout_height</span>=<span class=\"string\">\"wrap_content\"</span></div><div class=\"line\">            <span class=\"attr\">android:background</span>=<span class=\"string\">\"@color/colorAccent\"</span></div><div class=\"line\">            <span class=\"attr\">android:padding</span>=<span class=\"string\">\"10dp\"</span></div><div class=\"line\">            <span class=\"attr\">android:text</span>=<span class=\"string\">\"发送\"</span></div><div class=\"line\">            <span class=\"attr\">android:textColor</span>=<span class=\"string\">\"@android:color/black\"</span> /&gt;</div><div class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">LinearLayout</span>&gt;</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">LinearLayout</span>&gt;</span></div></pre></td></tr></table></figure>\n</li>\n<li><p>在代码里面处理具体逻辑：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div><div class=\"line\">71</div><div class=\"line\">72</div><div class=\"line\">73</div><div class=\"line\">74</div><div class=\"line\">75</div><div class=\"line\">76</div><div class=\"line\">77</div><div class=\"line\">78</div><div class=\"line\">79</div><div class=\"line\">80</div><div class=\"line\">81</div><div class=\"line\">82</div><div class=\"line\">83</div><div class=\"line\">84</div><div class=\"line\">85</div><div class=\"line\">86</div><div class=\"line\">87</div><div class=\"line\">88</div><div class=\"line\">89</div><div class=\"line\">90</div><div class=\"line\">91</div><div class=\"line\">92</div><div class=\"line\">93</div><div class=\"line\">94</div><div class=\"line\">95</div><div class=\"line\">96</div><div class=\"line\">97</div><div class=\"line\">98</div><div class=\"line\">99</div><div class=\"line\">100</div><div class=\"line\">101</div><div class=\"line\">102</div><div class=\"line\">103</div><div class=\"line\">104</div><div class=\"line\">105</div><div class=\"line\">106</div><div class=\"line\">107</div><div class=\"line\">108</div><div class=\"line\">109</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">import</span> android.os.Bundle;</div><div class=\"line\"><span class=\"keyword\">import</span> android.os.Handler;</div><div class=\"line\"><span class=\"keyword\">import</span> android.os.Message;</div><div class=\"line\"><span class=\"keyword\">import</span> android.support.design.widget.Snackbar;</div><div class=\"line\"><span class=\"keyword\">import</span> android.support.v7.app.AppCompatActivity;</div><div class=\"line\"><span class=\"keyword\">import</span> android.view.View;</div><div class=\"line\"><span class=\"keyword\">import</span> android.widget.EditText;</div><div class=\"line\"><span class=\"keyword\">import</span> android.widget.TextView;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">import</span> org.java_websocket.client.WebSocketClient;</div><div class=\"line\"><span class=\"keyword\">import</span> org.java_websocket.handshake.ServerHandshake;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">import</span> java.net.URI;</div><div class=\"line\"><span class=\"keyword\">import</span> java.util.Date;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MainActivity</span> <span class=\"keyword\">extends</span> <span class=\"title\">AppCompatActivity</span> <span class=\"keyword\">implements</span> <span class=\"title\">View</span>.<span class=\"title\">OnClickListener</span> </span>&#123;</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">private</span> TextView showMessage;</div><div class=\"line\">    <span class=\"keyword\">private</span> EditText editText;</div><div class=\"line\">    <span class=\"keyword\">private</span> WebSocketClient webSocketClient;</div><div class=\"line\">    <span class=\"keyword\">private</span> StringBuilder sb = <span class=\"keyword\">new</span> StringBuilder();</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">private</span> Handler handler = <span class=\"keyword\">new</span> Handler(<span class=\"keyword\">new</span> Handler.Callback() &#123;</div><div class=\"line\">        <span class=\"meta\">@Override</span></div><div class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">handleMessage</span><span class=\"params\">(Message msg)</span> </span>&#123;</div><div class=\"line\">            sb.append(<span class=\"string\">\"服务器返回数据：\"</span>);</div><div class=\"line\">            sb.append(msg.obj.toString());</div><div class=\"line\">            sb.append(<span class=\"string\">\"\\n\"</span>);</div><div class=\"line\">            showMessage.setText(sb.toString());</div><div class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">true</span>;</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;);</div><div class=\"line\"></div><div class=\"line\">    <span class=\"meta\">@Override</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title\">onCreate</span><span class=\"params\">(Bundle savedInstanceState)</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">super</span>.onCreate(savedInstanceState);</div><div class=\"line\">        setContentView(R.layout.activity_main);</div><div class=\"line\">        showMessage = findViewById(R.id.show_message);</div><div class=\"line\">        editText = findViewById(R.id.edit_text);</div><div class=\"line\">        findViewById(R.id.send).setOnClickListener(<span class=\"keyword\">this</span>);</div><div class=\"line\">        URI serverURI = URI.create(<span class=\"string\">\"ws://192.168.1.199:8887\"</span>);</div><div class=\"line\">        webSocketClient = <span class=\"keyword\">new</span> WebSocketClient(serverURI) &#123;</div><div class=\"line\">            <span class=\"meta\">@Override</span></div><div class=\"line\">            <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onOpen</span><span class=\"params\">(ServerHandshake handshakedata)</span> </span>&#123;</div><div class=\"line\">                sb.append(<span class=\"string\">\"onOpen at time：\"</span>);</div><div class=\"line\">                sb.append(<span class=\"keyword\">new</span> Date());</div><div class=\"line\">                sb.append(<span class=\"string\">\"服务器状态：\"</span>);</div><div class=\"line\">                sb.append(handshakedata.getHttpStatusMessage());</div><div class=\"line\">                sb.append(<span class=\"string\">\"\\n\"</span>);</div><div class=\"line\">                showMessage.setText(sb.toString());</div><div class=\"line\">            &#125;</div><div class=\"line\">            <span class=\"meta\">@Override</span></div><div class=\"line\">            <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onMessage</span><span class=\"params\">(String message)</span> </span>&#123;</div><div class=\"line\">                Message handlerMessage = Message.obtain();</div><div class=\"line\">                handlerMessage.obj = message;</div><div class=\"line\">                handler.sendMessage(handlerMessage);</div><div class=\"line\">            &#125;</div><div class=\"line\">            <span class=\"meta\">@Override</span></div><div class=\"line\">            <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onClose</span><span class=\"params\">(<span class=\"keyword\">int</span> code, String reason, <span class=\"keyword\">boolean</span> remote)</span> </span>&#123;</div><div class=\"line\">                sb.append(<span class=\"string\">\"onClose at time：\"</span>);</div><div class=\"line\">                sb.append(<span class=\"keyword\">new</span> Date());</div><div class=\"line\">                sb.append(<span class=\"string\">\"\\n\"</span>);</div><div class=\"line\">                sb.append(<span class=\"string\">\"onClose info:\"</span>);</div><div class=\"line\">                sb.append(code);</div><div class=\"line\">                sb.append(reason);</div><div class=\"line\">                sb.append(remote);</div><div class=\"line\">                sb.append(<span class=\"string\">\"\\n\"</span>);</div><div class=\"line\">                showMessage.setText(sb.toString());</div><div class=\"line\">            &#125;</div><div class=\"line\"></div><div class=\"line\">            <span class=\"meta\">@Override</span></div><div class=\"line\">            <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onError</span><span class=\"params\">(Exception ex)</span> </span>&#123;</div><div class=\"line\">                sb.append(<span class=\"string\">\"onError at time：\"</span>);</div><div class=\"line\">                sb.append(<span class=\"keyword\">new</span> Date());</div><div class=\"line\">                sb.append(<span class=\"string\">\"\\n\"</span>);</div><div class=\"line\">                sb.append(ex);</div><div class=\"line\">                sb.append(<span class=\"string\">\"\\n\"</span>);</div><div class=\"line\">                showMessage.setText(sb.toString());</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;;</div><div class=\"line\">        webSocketClient.connect();</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"meta\">@Override</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onClick</span><span class=\"params\">(View v)</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">switch</span> (v.getId()) &#123;</div><div class=\"line\">            <span class=\"keyword\">case</span> R.id.send:</div><div class=\"line\">                <span class=\"keyword\">if</span>(webSocketClient.isClosed() || webSocketClient.isClosing())&#123;</div><div class=\"line\">                    Snackbar.make(v,<span class=\"string\">\"Client正在关闭\"</span>,Snackbar.LENGTH_SHORT).show();</div><div class=\"line\">                    webSocketClient.connect();</div><div class=\"line\">                    <span class=\"keyword\">break</span>;</div><div class=\"line\">                &#125;</div><div class=\"line\">                webSocketClient.send(editText.getText().toString().trim());</div><div class=\"line\">                sb.append(<span class=\"string\">\"客户端发送消息：\"</span>);</div><div class=\"line\">                sb.append(<span class=\"keyword\">new</span> Date());</div><div class=\"line\">                sb.append(<span class=\"string\">\"\\n\"</span>);</div><div class=\"line\">                sb.append(editText.getText().toString().trim());</div><div class=\"line\">                sb.append(<span class=\"string\">\"\\n\"</span>);</div><div class=\"line\">                showMessage.setText(sb.toString());</div><div class=\"line\">                editText.setText(<span class=\"string\">\"\"</span>);</div><div class=\"line\">                <span class=\"keyword\">break</span>;</div><div class=\"line\">            <span class=\"keyword\">default</span>:</div><div class=\"line\">                <span class=\"keyword\">break</span>;</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n</li>\n</ol>\n<h4 id=\"服务端实现\"><a href=\"#服务端实现\" class=\"headerlink\" title=\"服务端实现\"></a>服务端实现</h4><p>上面提到我们后端使用的Spring中的WebSocket实现，其实用什么实现服务端无所谓，只要遵循协议就可以。个人在本地做测试的时候用的还是这个开源项目。</p>\n<ol>\n<li><p>服务端只需要关心<code>WebSocketServer</code>这个类就好，这个类里面有五个方法需要重写：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">/**服务开启*/</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onStart</span><span class=\"params\">()</span> </span></div><div class=\"line\"><span class=\"comment\">/**有客户端连接*/</span></div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onOpen</span><span class=\"params\">(WebSocket webSocket, ClientHandshake clientHandshake)</span></div><div class=\"line\"><span class=\"comment\">/**服务端关闭*/</span></div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onClose</span><span class=\"params\">(WebSocket webSocket, <span class=\"keyword\">int</span> i, String s, <span class=\"keyword\">boolean</span> b)</span></div><div class=\"line\"><span class=\"comment\">/**收到客户端的消息*/</span></div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onMessage</span><span class=\"params\">(WebSocket webSocket, String s)</span></div><div class=\"line\"><span class=\"comment\">/**出现异常*/</span></div><div class=\"line\"> <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onError</span><span class=\"params\">(WebSocket webSocket, Exception e)</span></div></pre></td></tr></table></figure>\n</li>\n<li><p>具体代码如下：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div><div class=\"line\">71</div><div class=\"line\">72</div><div class=\"line\">73</div><div class=\"line\">74</div><div class=\"line\">75</div><div class=\"line\">76</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">package</span> com.huangyuanlove;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">import</span> org.java_websocket.WebSocket;</div><div class=\"line\"><span class=\"keyword\">import</span> org.java_websocket.WebSocketImpl;</div><div class=\"line\"><span class=\"keyword\">import</span> org.java_websocket.handshake.ClientHandshake;</div><div class=\"line\"><span class=\"keyword\">import</span> org.java_websocket.server.WebSocketServer;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">import</span> java.io.BufferedReader;</div><div class=\"line\"><span class=\"keyword\">import</span> java.io.InputStreamReader;</div><div class=\"line\"><span class=\"keyword\">import</span> java.net.InetSocketAddress;</div><div class=\"line\"><span class=\"keyword\">import</span> java.net.UnknownHostException;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">TestWebSocket</span> <span class=\"keyword\">extends</span> <span class=\"title\">WebSocketServer</span> </span>&#123;</div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">TestWebSocket</span><span class=\"params\">(<span class=\"keyword\">int</span> port)</span> <span class=\"keyword\">throws</span> UnknownHostException </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">super</span>(<span class=\"keyword\">new</span> InetSocketAddress(port));</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">TestWebSocket</span><span class=\"params\">(InetSocketAddress address)</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">super</span>(address);</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</div><div class=\"line\">        WebSocketImpl.DEBUG = <span class=\"keyword\">true</span>;</div><div class=\"line\">        <span class=\"keyword\">try</span> &#123;</div><div class=\"line\">            <span class=\"keyword\">int</span> port = <span class=\"number\">8887</span>; <span class=\"comment\">// 843 flash policy port</span></div><div class=\"line\">            TestWebSocket s = <span class=\"keyword\">new</span> TestWebSocket(port);</div><div class=\"line\">            s.start();</div><div class=\"line\">            System.out.println(<span class=\"string\">\"ChatServer started on port: \"</span> + s.getPort());</div><div class=\"line\"></div><div class=\"line\">            BufferedReader sysin = <span class=\"keyword\">new</span> BufferedReader(<span class=\"keyword\">new</span> InputStreamReader(System.in));</div><div class=\"line\">            <span class=\"keyword\">while</span> (<span class=\"keyword\">true</span>) &#123;</div><div class=\"line\">                String in = sysin.readLine();</div><div class=\"line\">                s.broadcast(in);</div><div class=\"line\">                <span class=\"keyword\">if</span> (in.equals(<span class=\"string\">\"exit\"</span>)) &#123;</div><div class=\"line\">                    s.stop(<span class=\"number\">1000</span>);</div><div class=\"line\">                    <span class=\"keyword\">break</span>;</div><div class=\"line\">                &#125;</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125; <span class=\"keyword\">catch</span> (Exception ex) &#123;</div><div class=\"line\">            ex.printStackTrace();</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"meta\">@Override</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onOpen</span><span class=\"params\">(WebSocket webSocket, ClientHandshake clientHandshake)</span> </span>&#123;</div><div class=\"line\"></div><div class=\"line\">        broadcast(<span class=\"string\">\"new connection: \"</span> + clientHandshake.getResourceDescriptor());</div><div class=\"line\">        System.out.println(webSocket.getRemoteSocketAddress().getAddress().getHostAddress() + <span class=\"string\">\" entered the room!\"</span>);</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"meta\">@Override</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onClose</span><span class=\"params\">(WebSocket webSocket, <span class=\"keyword\">int</span> i, String s, <span class=\"keyword\">boolean</span> b)</span> </span>&#123;</div><div class=\"line\">        broadcast(webSocket + <span class=\"string\">\" onClose\"</span>);</div><div class=\"line\">        System.out.println(webSocket + <span class=\"string\">\" onClose\"</span>);</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"meta\">@Override</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onMessage</span><span class=\"params\">(WebSocket webSocket, String s)</span> </span>&#123;</div><div class=\"line\"></div><div class=\"line\">        broadcast(s);</div><div class=\"line\">        System.out.println(webSocket + <span class=\"string\">\": \"</span> + s);</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"meta\">@Override</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onError</span><span class=\"params\">(WebSocket webSocket, Exception e)</span> </span>&#123;</div><div class=\"line\">        e.printStackTrace();</div><div class=\"line\">        <span class=\"keyword\">if</span> (webSocket != <span class=\"keyword\">null</span>) &#123;</div><div class=\"line\">            <span class=\"comment\">// some errors like port binding failed may not be assignable to a specific websocket</span></div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"meta\">@Override</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onStart</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">        System.out.println(<span class=\"string\">\"Server started!\"</span>);</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n</li>\n</ol>\n<p>上面代码中<code>onMessage</code>方法中的<code>broadcast</code>方法是向所有连接到服务器的客户端发送消息(广播发送，其实就是一个小型的局域网聊天室)，如果只是谁发来的消息就回复给谁，可以调用<code>webSocket.send()</code>方法。<br>是用的时候先开启服务端，然后开启客户端(app)，需要注意是的，在客户端中重写的方法都不是在主线程中，如果需要更新UI，请切换到UI线程。<br>或者在客户端中使用<code>Service</code>,在<code>Service</code>中收到消息之后，广播给UI界面。</p>\n<hr>\n<p>以上</p>\n","excerpt":"<p>背景：后端逻辑框架调整，将原来的推送和轮询方式改成了使用<code>WebSocket</code>通信。原来的请求方式是由app发起请求，appServer对请求进行分发，中转中继服务器将具体请求下发到对应的物联网服务器，物联网服务器将指令下发到指定的设备。整个流程涉及到很多层http请求，并且每个服务的回调接口还不一致，只能在app发情请求之后，接着去轮询服务器，服务器端去查询设备状态、是否对指令有响应。<br>改版后涉及到对物联网的请求全部改成<code>WebSocket</code>,不在轮询，而是被动等待。<br>后端使用的是<code>Spring</code>实现的<code>WebSocket</code>,app端使用的是<a href=\"https://github.com/TooTallNate/Java-WebSocket\">https://github.com/TooTallNate/Java-WebSocket</a>这个开源项目。<br>","more":"</p>\n<h4 id=\"APP端实现\"><a href=\"#APP端实现\" class=\"headerlink\" title=\"APP端实现\"></a>APP端实现</h4><ol>\n<li>添加依赖<code>compile &quot;org.java-websocket:Java-WebSocket:1.3.7&quot;</code></li>\n<li>我们只需要关心三方库中<code>WebSocketClient</code>类就可以了，其他细节底层已经封装好了。</li>\n<li><p>类中有四个方法需要重写：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">/**打开连接*/</span></div><div class=\"line\"> <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onOpen</span><span class=\"params\">(ServerHandshake handshakedata)</span></div><div class=\"line\"> <span class=\"comment\">/**服务端返回消息*/</span></div><div class=\"line\"> <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onMessage</span><span class=\"params\">(String message)</span> </div><div class=\"line\"> <span class=\"comment\">/**关闭连接*/</span></div><div class=\"line\"> <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onClose</span><span class=\"params\">(<span class=\"keyword\">int</span> code, String reason, <span class=\"keyword\">boolean</span> remote)</span></div><div class=\"line\"> <span class=\"comment\">/**出现异常*/</span></div><div class=\"line\"> <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onError</span><span class=\"params\">(Exception ex)</span></span></div></pre></td></tr></table></figure>\n</li>\n<li><p>一个简单的小测试，app端定义了一个发送按钮，和一个展示消息的文本</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;?xml version=\"1.0\" encoding=\"utf-8\"?&gt;</div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">LinearLayout</span> <span class=\"attr\">xmlns:android</span>=<span class=\"string\">\"http://schemas.android.com/apk/res/android\"</span></div><div class=\"line\">    <span class=\"attr\">xmlns:tools</span>=<span class=\"string\">\"http://schemas.android.com/tools\"</span></div><div class=\"line\">    <span class=\"attr\">android:layout_width</span>=<span class=\"string\">\"match_parent\"</span></div><div class=\"line\">    <span class=\"attr\">android:layout_height</span>=<span class=\"string\">\"match_parent\"</span></div><div class=\"line\">    <span class=\"attr\">android:orientation</span>=<span class=\"string\">\"vertical\"</span></div><div class=\"line\">    <span class=\"attr\">tools:context</span>=<span class=\"string\">\"com.huangyuanlove.testwebsocket.MainActivity\"</span>&gt;</span></div><div class=\"line\"></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">ScrollView</span></div><div class=\"line\">        <span class=\"attr\">android:layout_width</span>=<span class=\"string\">\"match_parent\"</span></div><div class=\"line\">        <span class=\"attr\">android:layout_height</span>=<span class=\"string\">\"0dp\"</span></div><div class=\"line\">        <span class=\"attr\">android:layout_weight</span>=<span class=\"string\">\"1\"</span>&gt;</span></div><div class=\"line\"></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">TextView</span></div><div class=\"line\">            <span class=\"attr\">android:id</span>=<span class=\"string\">\"@+id/show_message\"</span></div><div class=\"line\">            <span class=\"attr\">android:layout_width</span>=<span class=\"string\">\"wrap_content\"</span></div><div class=\"line\">            <span class=\"attr\">android:layout_height</span>=<span class=\"string\">\"wrap_content\"</span> /&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">ScrollView</span>&gt;</span></div><div class=\"line\"></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">LinearLayout</span></div><div class=\"line\">        <span class=\"attr\">android:layout_width</span>=<span class=\"string\">\"match_parent\"</span></div><div class=\"line\">        <span class=\"attr\">android:layout_height</span>=<span class=\"string\">\"wrap_content\"</span></div><div class=\"line\">        <span class=\"attr\">android:orientation</span>=<span class=\"string\">\"horizontal\"</span>&gt;</span></div><div class=\"line\"></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">EditText</span></div><div class=\"line\">            <span class=\"attr\">android:id</span>=<span class=\"string\">\"@+id/edit_text\"</span></div><div class=\"line\">            <span class=\"attr\">android:layout_width</span>=<span class=\"string\">\"0dp\"</span></div><div class=\"line\">            <span class=\"attr\">android:layout_height</span>=<span class=\"string\">\"wrap_content\"</span></div><div class=\"line\">            <span class=\"attr\">android:layout_weight</span>=<span class=\"string\">\"1\"</span> /&gt;</span></div><div class=\"line\"></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">TextView</span></div><div class=\"line\">            <span class=\"attr\">android:id</span>=<span class=\"string\">\"@+id/send\"</span></div><div class=\"line\">            <span class=\"attr\">android:layout_width</span>=<span class=\"string\">\"wrap_content\"</span></div><div class=\"line\">            <span class=\"attr\">android:layout_height</span>=<span class=\"string\">\"wrap_content\"</span></div><div class=\"line\">            <span class=\"attr\">android:background</span>=<span class=\"string\">\"@color/colorAccent\"</span></div><div class=\"line\">            <span class=\"attr\">android:padding</span>=<span class=\"string\">\"10dp\"</span></div><div class=\"line\">            <span class=\"attr\">android:text</span>=<span class=\"string\">\"发送\"</span></div><div class=\"line\">            <span class=\"attr\">android:textColor</span>=<span class=\"string\">\"@android:color/black\"</span> /&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">LinearLayout</span>&gt;</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">LinearLayout</span>&gt;</span></div></pre></td></tr></table></figure>\n</li>\n<li><p>在代码里面处理具体逻辑：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div><div class=\"line\">71</div><div class=\"line\">72</div><div class=\"line\">73</div><div class=\"line\">74</div><div class=\"line\">75</div><div class=\"line\">76</div><div class=\"line\">77</div><div class=\"line\">78</div><div class=\"line\">79</div><div class=\"line\">80</div><div class=\"line\">81</div><div class=\"line\">82</div><div class=\"line\">83</div><div class=\"line\">84</div><div class=\"line\">85</div><div class=\"line\">86</div><div class=\"line\">87</div><div class=\"line\">88</div><div class=\"line\">89</div><div class=\"line\">90</div><div class=\"line\">91</div><div class=\"line\">92</div><div class=\"line\">93</div><div class=\"line\">94</div><div class=\"line\">95</div><div class=\"line\">96</div><div class=\"line\">97</div><div class=\"line\">98</div><div class=\"line\">99</div><div class=\"line\">100</div><div class=\"line\">101</div><div class=\"line\">102</div><div class=\"line\">103</div><div class=\"line\">104</div><div class=\"line\">105</div><div class=\"line\">106</div><div class=\"line\">107</div><div class=\"line\">108</div><div class=\"line\">109</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">import</span> android.os.Bundle;</div><div class=\"line\"><span class=\"keyword\">import</span> android.os.Handler;</div><div class=\"line\"><span class=\"keyword\">import</span> android.os.Message;</div><div class=\"line\"><span class=\"keyword\">import</span> android.support.design.widget.Snackbar;</div><div class=\"line\"><span class=\"keyword\">import</span> android.support.v7.app.AppCompatActivity;</div><div class=\"line\"><span class=\"keyword\">import</span> android.view.View;</div><div class=\"line\"><span class=\"keyword\">import</span> android.widget.EditText;</div><div class=\"line\"><span class=\"keyword\">import</span> android.widget.TextView;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">import</span> org.java_websocket.client.WebSocketClient;</div><div class=\"line\"><span class=\"keyword\">import</span> org.java_websocket.handshake.ServerHandshake;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">import</span> java.net.URI;</div><div class=\"line\"><span class=\"keyword\">import</span> java.util.Date;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MainActivity</span> <span class=\"keyword\">extends</span> <span class=\"title\">AppCompatActivity</span> <span class=\"keyword\">implements</span> <span class=\"title\">View</span>.<span class=\"title\">OnClickListener</span> </span>&#123;</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">private</span> TextView showMessage;</div><div class=\"line\">    <span class=\"keyword\">private</span> EditText editText;</div><div class=\"line\">    <span class=\"keyword\">private</span> WebSocketClient webSocketClient;</div><div class=\"line\">    <span class=\"keyword\">private</span> StringBuilder sb = <span class=\"keyword\">new</span> StringBuilder();</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">private</span> Handler handler = <span class=\"keyword\">new</span> Handler(<span class=\"keyword\">new</span> Handler.Callback() &#123;</div><div class=\"line\">        <span class=\"meta\">@Override</span></div><div class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">handleMessage</span><span class=\"params\">(Message msg)</span> </span>&#123;</div><div class=\"line\">            sb.append(<span class=\"string\">\"服务器返回数据：\"</span>);</div><div class=\"line\">            sb.append(msg.obj.toString());</div><div class=\"line\">            sb.append(<span class=\"string\">\"\\n\"</span>);</div><div class=\"line\">            showMessage.setText(sb.toString());</div><div class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">true</span>;</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;);</div><div class=\"line\"></div><div class=\"line\">    <span class=\"meta\">@Override</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title\">onCreate</span><span class=\"params\">(Bundle savedInstanceState)</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">super</span>.onCreate(savedInstanceState);</div><div class=\"line\">        setContentView(R.layout.activity_main);</div><div class=\"line\">        showMessage = findViewById(R.id.show_message);</div><div class=\"line\">        editText = findViewById(R.id.edit_text);</div><div class=\"line\">        findViewById(R.id.send).setOnClickListener(<span class=\"keyword\">this</span>);</div><div class=\"line\">        URI serverURI = URI.create(<span class=\"string\">\"ws://192.168.1.199:8887\"</span>);</div><div class=\"line\">        webSocketClient = <span class=\"keyword\">new</span> WebSocketClient(serverURI) &#123;</div><div class=\"line\">            <span class=\"meta\">@Override</span></div><div class=\"line\">            <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onOpen</span><span class=\"params\">(ServerHandshake handshakedata)</span> </span>&#123;</div><div class=\"line\">                sb.append(<span class=\"string\">\"onOpen at time：\"</span>);</div><div class=\"line\">                sb.append(<span class=\"keyword\">new</span> Date());</div><div class=\"line\">                sb.append(<span class=\"string\">\"服务器状态：\"</span>);</div><div class=\"line\">                sb.append(handshakedata.getHttpStatusMessage());</div><div class=\"line\">                sb.append(<span class=\"string\">\"\\n\"</span>);</div><div class=\"line\">                showMessage.setText(sb.toString());</div><div class=\"line\">            &#125;</div><div class=\"line\">            <span class=\"meta\">@Override</span></div><div class=\"line\">            <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onMessage</span><span class=\"params\">(String message)</span> </span>&#123;</div><div class=\"line\">                Message handlerMessage = Message.obtain();</div><div class=\"line\">                handlerMessage.obj = message;</div><div class=\"line\">                handler.sendMessage(handlerMessage);</div><div class=\"line\">            &#125;</div><div class=\"line\">            <span class=\"meta\">@Override</span></div><div class=\"line\">            <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onClose</span><span class=\"params\">(<span class=\"keyword\">int</span> code, String reason, <span class=\"keyword\">boolean</span> remote)</span> </span>&#123;</div><div class=\"line\">                sb.append(<span class=\"string\">\"onClose at time：\"</span>);</div><div class=\"line\">                sb.append(<span class=\"keyword\">new</span> Date());</div><div class=\"line\">                sb.append(<span class=\"string\">\"\\n\"</span>);</div><div class=\"line\">                sb.append(<span class=\"string\">\"onClose info:\"</span>);</div><div class=\"line\">                sb.append(code);</div><div class=\"line\">                sb.append(reason);</div><div class=\"line\">                sb.append(remote);</div><div class=\"line\">                sb.append(<span class=\"string\">\"\\n\"</span>);</div><div class=\"line\">                showMessage.setText(sb.toString());</div><div class=\"line\">            &#125;</div><div class=\"line\"></div><div class=\"line\">            <span class=\"meta\">@Override</span></div><div class=\"line\">            <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onError</span><span class=\"params\">(Exception ex)</span> </span>&#123;</div><div class=\"line\">                sb.append(<span class=\"string\">\"onError at time：\"</span>);</div><div class=\"line\">                sb.append(<span class=\"keyword\">new</span> Date());</div><div class=\"line\">                sb.append(<span class=\"string\">\"\\n\"</span>);</div><div class=\"line\">                sb.append(ex);</div><div class=\"line\">                sb.append(<span class=\"string\">\"\\n\"</span>);</div><div class=\"line\">                showMessage.setText(sb.toString());</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;;</div><div class=\"line\">        webSocketClient.connect();</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"meta\">@Override</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onClick</span><span class=\"params\">(View v)</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">switch</span> (v.getId()) &#123;</div><div class=\"line\">            <span class=\"keyword\">case</span> R.id.send:</div><div class=\"line\">                <span class=\"keyword\">if</span>(webSocketClient.isClosed() || webSocketClient.isClosing())&#123;</div><div class=\"line\">                    Snackbar.make(v,<span class=\"string\">\"Client正在关闭\"</span>,Snackbar.LENGTH_SHORT).show();</div><div class=\"line\">                    webSocketClient.connect();</div><div class=\"line\">                    <span class=\"keyword\">break</span>;</div><div class=\"line\">                &#125;</div><div class=\"line\">                webSocketClient.send(editText.getText().toString().trim());</div><div class=\"line\">                sb.append(<span class=\"string\">\"客户端发送消息：\"</span>);</div><div class=\"line\">                sb.append(<span class=\"keyword\">new</span> Date());</div><div class=\"line\">                sb.append(<span class=\"string\">\"\\n\"</span>);</div><div class=\"line\">                sb.append(editText.getText().toString().trim());</div><div class=\"line\">                sb.append(<span class=\"string\">\"\\n\"</span>);</div><div class=\"line\">                showMessage.setText(sb.toString());</div><div class=\"line\">                editText.setText(<span class=\"string\">\"\"</span>);</div><div class=\"line\">                <span class=\"keyword\">break</span>;</div><div class=\"line\">            <span class=\"keyword\">default</span>:</div><div class=\"line\">                <span class=\"keyword\">break</span>;</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n</li>\n</ol>\n<h4 id=\"服务端实现\"><a href=\"#服务端实现\" class=\"headerlink\" title=\"服务端实现\"></a>服务端实现</h4><p>上面提到我们后端使用的Spring中的WebSocket实现，其实用什么实现服务端无所谓，只要遵循协议就可以。个人在本地做测试的时候用的还是这个开源项目。</p>\n<ol>\n<li><p>服务端只需要关心<code>WebSocketServer</code>这个类就好，这个类里面有五个方法需要重写：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">/**服务开启*/</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onStart</span><span class=\"params\">()</span> </div><div class=\"line\"><span class=\"comment\">/**有客户端连接*/</span></div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onOpen</span><span class=\"params\">(WebSocket webSocket, ClientHandshake clientHandshake)</span></div><div class=\"line\"><span class=\"comment\">/**服务端关闭*/</span></div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onClose</span><span class=\"params\">(WebSocket webSocket, <span class=\"keyword\">int</span> i, String s, <span class=\"keyword\">boolean</span> b)</span></div><div class=\"line\"><span class=\"comment\">/**收到客户端的消息*/</span></div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onMessage</span><span class=\"params\">(WebSocket webSocket, String s)</span></div><div class=\"line\"><span class=\"comment\">/**出现异常*/</span></div><div class=\"line\"> <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onError</span><span class=\"params\">(WebSocket webSocket, Exception e)</span></span></div></pre></td></tr></table></figure>\n</li>\n<li><p>具体代码如下：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div><div class=\"line\">71</div><div class=\"line\">72</div><div class=\"line\">73</div><div class=\"line\">74</div><div class=\"line\">75</div><div class=\"line\">76</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">package</span> com.huangyuanlove;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">import</span> org.java_websocket.WebSocket;</div><div class=\"line\"><span class=\"keyword\">import</span> org.java_websocket.WebSocketImpl;</div><div class=\"line\"><span class=\"keyword\">import</span> org.java_websocket.handshake.ClientHandshake;</div><div class=\"line\"><span class=\"keyword\">import</span> org.java_websocket.server.WebSocketServer;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">import</span> java.io.BufferedReader;</div><div class=\"line\"><span class=\"keyword\">import</span> java.io.InputStreamReader;</div><div class=\"line\"><span class=\"keyword\">import</span> java.net.InetSocketAddress;</div><div class=\"line\"><span class=\"keyword\">import</span> java.net.UnknownHostException;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">TestWebSocket</span> <span class=\"keyword\">extends</span> <span class=\"title\">WebSocketServer</span> </span>&#123;</div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">TestWebSocket</span><span class=\"params\">(<span class=\"keyword\">int</span> port)</span> <span class=\"keyword\">throws</span> UnknownHostException </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">super</span>(<span class=\"keyword\">new</span> InetSocketAddress(port));</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">TestWebSocket</span><span class=\"params\">(InetSocketAddress address)</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">super</span>(address);</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</div><div class=\"line\">        WebSocketImpl.DEBUG = <span class=\"keyword\">true</span>;</div><div class=\"line\">        <span class=\"keyword\">try</span> &#123;</div><div class=\"line\">            <span class=\"keyword\">int</span> port = <span class=\"number\">8887</span>; <span class=\"comment\">// 843 flash policy port</span></div><div class=\"line\">            TestWebSocket s = <span class=\"keyword\">new</span> TestWebSocket(port);</div><div class=\"line\">            s.start();</div><div class=\"line\">            System.out.println(<span class=\"string\">\"ChatServer started on port: \"</span> + s.getPort());</div><div class=\"line\"></div><div class=\"line\">            BufferedReader sysin = <span class=\"keyword\">new</span> BufferedReader(<span class=\"keyword\">new</span> InputStreamReader(System.in));</div><div class=\"line\">            <span class=\"keyword\">while</span> (<span class=\"keyword\">true</span>) &#123;</div><div class=\"line\">                String in = sysin.readLine();</div><div class=\"line\">                s.broadcast(in);</div><div class=\"line\">                <span class=\"keyword\">if</span> (in.equals(<span class=\"string\">\"exit\"</span>)) &#123;</div><div class=\"line\">                    s.stop(<span class=\"number\">1000</span>);</div><div class=\"line\">                    <span class=\"keyword\">break</span>;</div><div class=\"line\">                &#125;</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125; <span class=\"keyword\">catch</span> (Exception ex) &#123;</div><div class=\"line\">            ex.printStackTrace();</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"meta\">@Override</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onOpen</span><span class=\"params\">(WebSocket webSocket, ClientHandshake clientHandshake)</span> </span>&#123;</div><div class=\"line\"></div><div class=\"line\">        broadcast(<span class=\"string\">\"new connection: \"</span> + clientHandshake.getResourceDescriptor());</div><div class=\"line\">        System.out.println(webSocket.getRemoteSocketAddress().getAddress().getHostAddress() + <span class=\"string\">\" entered the room!\"</span>);</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"meta\">@Override</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onClose</span><span class=\"params\">(WebSocket webSocket, <span class=\"keyword\">int</span> i, String s, <span class=\"keyword\">boolean</span> b)</span> </span>&#123;</div><div class=\"line\">        broadcast(webSocket + <span class=\"string\">\" onClose\"</span>);</div><div class=\"line\">        System.out.println(webSocket + <span class=\"string\">\" onClose\"</span>);</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"meta\">@Override</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onMessage</span><span class=\"params\">(WebSocket webSocket, String s)</span> </span>&#123;</div><div class=\"line\"></div><div class=\"line\">        broadcast(s);</div><div class=\"line\">        System.out.println(webSocket + <span class=\"string\">\": \"</span> + s);</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"meta\">@Override</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onError</span><span class=\"params\">(WebSocket webSocket, Exception e)</span> </span>&#123;</div><div class=\"line\">        e.printStackTrace();</div><div class=\"line\">        <span class=\"keyword\">if</span> (webSocket != <span class=\"keyword\">null</span>) &#123;</div><div class=\"line\">            <span class=\"comment\">// some errors like port binding failed may not be assignable to a specific websocket</span></div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"meta\">@Override</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onStart</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">        System.out.println(<span class=\"string\">\"Server started!\"</span>);</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n</li>\n</ol>\n<p>上面代码中<code>onMessage</code>方法中的<code>broadcast</code>方法是向所有连接到服务器的客户端发送消息(广播发送，其实就是一个小型的局域网聊天室)，如果只是谁发来的消息就回复给谁，可以调用<code>webSocket.send()</code>方法。<br>是用的时候先开启服务端，然后开启客户端(app)，需要注意是的，在客户端中重写的方法都不是在主线程中，如果需要更新UI，请切换到UI线程。<br>或者在客户端中使用<code>Service</code>,在<code>Service</code>中收到消息之后，广播给UI界面。</p>\n<hr>\n<p>以上</p>"},{"title":"Android的消息机制","date":"2017-03-23T06:00:09.000Z","_content":"　　Android消息机制主要是指Handler的运行机制，Handler的运行需要底层的MessageQueue和Looper的支撑。MessageQueue的中文翻译是消息队列，他的内部存储了一组消息，以队列的形式对外提供插入和删除的工作。虽然叫消息队列，但是它的内部存储结构并不是真正的队列，而是采用单链表的数据机构来存储消息队列，但是它的内部存储结构并不是真正的队列，而是采用单链表的数据结构来存储消息列表。Looper可以理解为消息循环。由于MessageQueue只是一个消息的存储单元，它不能去处理消息，而Looper就填补了这个功能，Looper会以无限昏眩的形式去查找是否有新消息，如果有的话就处理消息，否则就等待。Looper中海油一个特殊的概念，那就是ThreadLocal，ThreadLocal并不是现成，它的作用是可以在每个现成中存储数据。Handler创建的时候会采用当前线程的Looper来构造消息循环系统，ThreadLocal可以在不同的线程中互不干扰的存储并提供数据，Handler可以通过ThreadLocal轻松获取每个现成的Looper。需要注意的是，现成默认是没有Looper的，如果需要使用Handler就必须为现成创建Looper，我们经常提到的主线程，也叫UI线程，它就是ActivityThread，ActivityThread被创建时就会初始化Looper，这也是在主线程中默认可以使用Handler的原因。\n<!--more-->\n\n### ThreadLocal的工作原理\nThreadLocal是一个县城内部的数据存储类，通过它可以在制定的线程中存储数据，数据存储以后，只能在制定的线程中才可以获取到存储的数据，对于其他线程来说则无法获取到，我们在使用的时候：\n``` java\n final ThreadLocal<Boolean> mBooleanThreadLocal = new ThreadLocal<>();\n        new Thread(\"Thread#1\"){\n            @Override\n            public void run() {\n                mBooleanThreadLocal.set(false);\n                Log.d(\"huangyuan\",\"Thread#1\" + mBooleanThreadLocal.get());\n            }\n        }.start();\n\n        new Thread(\"Thread#2\"){\n\n            @Override\n            public void run() {\n                mBooleanThreadLocal.set(true);\n                Log.d(\"huangyuan\",\"Thread#2\" + mBooleanThreadLocal.get());\n            }\n        }.start();\n```\n　　这样，我们虽然在不同的线程中访问的是同一个ThreadLocal对象，但是他们的值确是不一样的。这是因为不同的线程访问同一个ThreadLocal的get方法，ThreadLocal内部会从各自的线程中取出一个数组，然后再从数组中根据当前ThreadLocal的索引去查找出对应的value值。\nThreadLocal是一个泛型类，定义为`public class ThreadLocal<T>`,首先看ThreadLocal的set方法，如下：\n``` java\n public void set(T value) {\n        Thread t = Thread.currentThread();\n        ThreadLocalMap map = getMap(t);\n        if (map != null)\n            map.set(this, value);\n        else\n            createMap(t, value);\n    }\n```\n　　上面的方法中，首先会通过getMap方法获取ThreadLocalMap（存储线程的ThreadLocal数据），ThreadLocalMap是ThreadLocal类的静态内部类，其内部包含了一个静态内部类Entry，声明如下`static class Entry extends WeakReference<ThreadLocal>`,ThreadLocalMap类中有一个Entry类型的数组`private Entry[] table;`,下面是set方法的具体实现：\n``` java\n  private void set(ThreadLocal key, Object value) {\n\n            // We don't use a fast path as with get() because it is at\n            // least as common to use set() to create new entries as\n            // it is to replace existing ones, in which case, a fast\n            // path would fail more often than not.\n\n            Entry[] tab = table;\n            int len = tab.length;\n            int i = key.threadLocalHashCode & (len-1);\n\n            for (Entry e = tab[i];\n                 e != null;\n                 e = tab[i = nextIndex(i, len)]) {\n                ThreadLocal k = e.get();\n\n                if (k == key) {\n                    e.value = value;\n                    return;\n                }\n\n                if (k == null) {\n                    replaceStaleEntry(key, value, i);\n                    return;\n                }\n            }\n\n            tab[i] = new Entry(key, value);\n            int sz = ++size;\n            if (!cleanSomeSlots(i, sz) && sz >= threshold)\n                rehash();\n        }\n```\nThreadLocal的get方法如下：\n``` java\npublic T get() {\n        Thread t = Thread.currentThread();\n        ThreadLocalMap map = getMap(t);\n        if (map != null) {\n            ThreadLocalMap.Entry e = map.getEntry(this);\n            if (e != null)\n                return (T)e.value;\n        }\n        return setInitialValue();\n    } \n```\n　　从ThreadLocal的set和get方法可以看出，他们所操作的对象都是当前线程的ThreadLocalMap对象的table数组，因此在不同线程中访问同一个ThreadLocal的set和get方法，他们对ThreadLocal所做的读写操作仅限于各自线程的内部，这就是为什么ThreadLocal可以在多个线程中互不干扰的存储和修改数据。\n### 消息队列的工作原理\n　　消息队列在Android中指的是MessageQueue，MessageQueue主要包含两个操作，插入和读取。读取操作本身会伴随着删除操作，插入和读取对应的方法分别为enqueueMessage和next，其中enqueueMessage的作用是往消息队列中插入一跳消息，而next的作用是从消息队列中取出一条消息并将其从消息队列中移除，尽管MessageQueue叫消息队列，但是它的内部实现并不是用的队列，实际上它是通过一个单链表的数据结构来维护消息列表，单链表在插入和删除上比较有优势。下面是enqueueMessage的实现：\n``` java\nboolean enqueueMessage(Message msg, long when) {\n        if (msg.target == null) {\n            throw new IllegalArgumentException(\"Message must have a target.\");\n        }\n        if (msg.isInUse()) {\n            throw new IllegalStateException(msg + \" This message is already in use.\");\n        }\n\n        synchronized (this) {\n            if (mQuitting) {\n                IllegalStateException e = new IllegalStateException(\n                        msg.target + \" sending message to a Handler on a dead thread\");\n                Log.w(TAG, e.getMessage(), e);\n                msg.recycle();\n                return false;\n            }\n\n            msg.markInUse();\n            msg.when = when;\n            Message p = mMessages;\n            boolean needWake;\n            if (p == null || when == 0 || when < p.when) {\n                // New head, wake up the event queue if blocked.\n                msg.next = p;\n                mMessages = msg;\n                needWake = mBlocked;\n            } else {\n                // Inserted within the middle of the queue.  Usually we don't have to wake\n                // up the event queue unless there is a barrier at the head of the queue\n                // and the message is the earliest asynchronous message in the queue.\n                needWake = mBlocked && p.target == null && msg.isAsynchronous();\n                Message prev;\n                for (;;) {\n                    prev = p;\n                    p = p.next;\n                    if (p == null || when < p.when) {\n                        break;\n                    }\n                    if (needWake && p.isAsynchronous()) {\n                        needWake = false;\n                    }\n                }\n                msg.next = p; // invariant: p == prev.next\n                prev.next = msg;\n            }\n\n            // We can assume mPtr != 0 because mQuitting is false.\n            if (needWake) {\n                nativeWake(mPtr);\n            }\n        }\n        return true;\n    }\n```\n从其实现来安，主要操作其实就是单链表的插入操作。\nnext的实现如下：\n``` java\nMessage next() {\n        // Return here if the message loop has already quit and been disposed.\n        // This can happen if the application tries to restart a looper after quit\n        // which is not supported.\n        final long ptr = mPtr;\n        if (ptr == 0) {\n            return null;\n        }\n\n        int pendingIdleHandlerCount = -1; // -1 only during first iteration\n        int nextPollTimeoutMillis = 0;\n        for (;;) {\n            if (nextPollTimeoutMillis != 0) {\n                Binder.flushPendingCommands();\n            }\n\n            nativePollOnce(ptr, nextPollTimeoutMillis);\n\n            synchronized (this) {\n                // Try to retrieve the next message.  Return if found.\n                final long now = SystemClock.uptimeMillis();\n                Message prevMsg = null;\n                Message msg = mMessages;\n                if (msg != null && msg.target == null) {\n                    // Stalled by a barrier.  Find the next asynchronous message in the queue.\n                    do {\n                        prevMsg = msg;\n                        msg = msg.next;\n                    } while (msg != null && !msg.isAsynchronous());\n                }\n                if (msg != null) {\n                    if (now < msg.when) {\n                        // Next message is not ready.  Set a timeout to wake up when it is ready.\n                        nextPollTimeoutMillis = (int) Math.min(msg.when - now, Integer.MAX_VALUE);\n                    } else {\n                        // Got a message.\n                        mBlocked = false;\n                        if (prevMsg != null) {\n                            prevMsg.next = msg.next;\n                        } else {\n                            mMessages = msg.next;\n                        }\n                        msg.next = null;\n                        if (DEBUG) Log.v(TAG, \"Returning message: \" + msg);\n                        msg.markInUse();\n                        return msg;\n                    }\n                } else {\n                    // No more messages.\n                    nextPollTimeoutMillis = -1;\n                }\n\n                // Process the quit message now that all pending messages have been handled.\n                if (mQuitting) {\n                    dispose();\n                    return null;\n                }\n\n                // If first time idle, then get the number of idlers to run.\n                // Idle handles only run if the queue is empty or if the first message\n                // in the queue (possibly a barrier) is due to be handled in the future.\n                if (pendingIdleHandlerCount < 0\n                        && (mMessages == null || now < mMessages.when)) {\n                    pendingIdleHandlerCount = mIdleHandlers.size();\n                }\n                if (pendingIdleHandlerCount <= 0) {\n                    // No idle handlers to run.  Loop and wait some more.\n                    mBlocked = true;\n                    continue;\n                }\n\n                if (mPendingIdleHandlers == null) {\n                    mPendingIdleHandlers = new IdleHandler[Math.max(pendingIdleHandlerCount, 4)];\n                }\n                mPendingIdleHandlers = mIdleHandlers.toArray(mPendingIdleHandlers);\n            }\n\n            // Run the idle handlers.\n            // We only ever reach this code block during the first iteration.\n            for (int i = 0; i < pendingIdleHandlerCount; i++) {\n                final IdleHandler idler = mPendingIdleHandlers[i];\n                mPendingIdleHandlers[i] = null; // release the reference to the handler\n\n                boolean keep = false;\n                try {\n                    keep = idler.queueIdle();\n                } catch (Throwable t) {\n                    Log.wtf(TAG, \"IdleHandler threw exception\", t);\n                }\n\n                if (!keep) {\n                    synchronized (this) {\n                        mIdleHandlers.remove(idler);\n                    }\n                }\n            }\n\n            // Reset the idle handler count to 0 so we do not run them again.\n            pendingIdleHandlerCount = 0;\n\n            // While calling an idle handler, a new message could have been delivered\n            // so go back and look again for a pending message without waiting.\n            nextPollTimeoutMillis = 0;\n        }\n    }\n```\n可以返现next方法是一个无线循环的方法，如果消息队列为空，那么next方法会一直阻塞在这里，当有消息到来时，next方法会返回这条消息并将其从单链表中移除\n### Looper的工作原理\n　　Looper在Android的消息机制中扮演者消息循环的角色，具体来说就是它会不停地从MessageQueue中查看是否有新消息，如果有新消息就会立刻处理，否则就一直阻塞在那里。首先看一下它的构造方法，在构造中它会创建一个MessageQueue也就是消息队列，然后将当前线程的对象保存起来，如下：\n``` java\n  private Looper(boolean quitAllowed) {\n        mQueue = new MessageQueue(quitAllowed);\n        mThread = Thread.currentThread();\n    }\n```\n　　Handler的工作需要Looper，没有Looper的线程就会报错，我们可以通过Looper.prepare()即可为当前线程创建一个Looper，接着通过Looper.loop()来开启消息循环。Looper除了prepare方法外，还提供了prepareMainLoop方法，这个方法主要是给主线程也就是ActivityThread创建Looper使用的，其本质也是通过prepare方法来实现的。由于主线程的Looper比较特殊，所有Looper提供了一个getMainLooper方法，通过它可以在任何地方获取到主线程的Looper。Looper也是可以退出的，Looper提供了quit个quitSafely来退出一个Looper，二者的区别是：quit会直接突出Looper，而quitSafely只是设定一个退出标记，然后把消息队列中的已有消息处理完毕后才安全的退出。Looper退出后，通过Handler发送的消息会失败，这个时候Handler的send方法会返回false。在子线程中，如果手动为其创建了Looper，那么在所有的事情完成以后应该调用quit方法来总之消息循环，否则这个子线程就会一直处于等待的状态，而如果退出Looper以后，这个县城就会立刻终止，因此甲乙不需要的时候终止Looper。\n Looper最重要的一个方法是loop方法，只有调用了loop后，消息循环系统才会真正的起作用，实现如下：\n ``` java\n  /**\n     * Run the message queue in this thread. Be sure to call\n     * {@link #quit()} to end the loop.\n     */\n    public static void loop() {\n        final Looper me = myLooper();\n        if (me == null) {\n            throw new RuntimeException(\"No Looper; Looper.prepare() wasn't called on this thread.\");\n        }\n        final MessageQueue queue = me.mQueue;\n\n        // Make sure the identity of this thread is that of the local process,\n        // and keep track of what that identity token actually is.\n        Binder.clearCallingIdentity();\n        final long ident = Binder.clearCallingIdentity();\n\n        for (;;) {\n            Message msg = queue.next(); // might block\n            if (msg == null) {\n                // No message indicates that the message queue is quitting.\n                return;\n            }\n\n            // This must be in a local variable, in case a UI event sets the logger\n            final Printer logging = me.mLogging;\n            if (logging != null) {\n                logging.println(\">>>>> Dispatching to \" + msg.target + \" \" +\n                        msg.callback + \": \" + msg.what);\n            }\n\n            final long traceTag = me.mTraceTag;\n            if (traceTag != 0) {\n                Trace.traceBegin(traceTag, msg.target.getTraceName(msg));\n            }\n            try {\n                msg.target.dispatchMessage(msg);\n            } finally {\n                if (traceTag != 0) {\n                    Trace.traceEnd(traceTag);\n                }\n            }\n\n            if (logging != null) {\n                logging.println(\"<<<<< Finished to \" + msg.target + \" \" + msg.callback);\n            }\n\n            // Make sure that during the course of dispatching the\n            // identity of the thread wasn't corrupted.\n            final long newIdent = Binder.clearCallingIdentity();\n            if (ident != newIdent) {\n                Log.wtf(TAG, \"Thread identity changed from 0x\"\n                        + Long.toHexString(ident) + \" to 0x\"\n                        + Long.toHexString(newIdent) + \" while dispatching to \"\n                        + msg.target.getClass().getName() + \" \"\n                        + msg.callback + \" what=\" + msg.what);\n            }\n\n            msg.recycleUnchecked();\n        }\n    }\n ```\n 　　loop方法是一个死循环，唯一跳出循环的方式是MessageQueue的next方法返回了null，当Looper的quit方法被调用时，Looper就会通知消息队列退出，当消息队列被标记为退出状态时，它的next方法就会返回null，也就是说，Looper必须退出，否则loop方法就会无限循环下去，loop方法会调用MessageQueue的next方法来获取新消息，而next方法是一个阻塞操作，当没有消息时，next方法会一直阻塞在那里，这也导致loop方法一直阻塞在那里，如果MessageQueue的next方法返回了新消息，Looper就会处理这条消息，  msg.target.dispatchMessage(msg)，这里的  msg.target是发送这条消息的handler对象，这样Handler发送的消息最终又交个它的  dispatchMessage(msg);方法来处理了，但是这里不同的是，Handler的dispatchMessahe方法是在创建Handler时所使用的Looper中执行的，这样就成功的将代码逻辑切换到指定的线程中去执行了。\n ### Handler的工作原理\n Handler的工作主要包含消息的发送和接收过程。消息的发送可以通过post的一系列方法以及send的一系列方法来实现，post的一系列方法最终是通过send的一列方法来实现的。发送一条消息的典型过程如下：\n ``` java\n  public final boolean sendMessage(Message msg)\n    {\n        return sendMessageDelayed(msg, 0);\n    }\n\tpublic final boolean sendMessageDelayed(Message msg, long delayMillis)\n    {\n        if (delayMillis < 0) {\n            delayMillis = 0;\n        }\n        return sendMessageAtTime(msg, SystemClock.uptimeMillis() + delayMillis);\n    }\n\tpublic boolean sendMessageAtTime(Message msg, long uptimeMillis) {\n        MessageQueue queue = mQueue;\n        if (queue == null) {\n            RuntimeException e = new RuntimeException(\n                    this + \" sendMessageAtTime() called with no mQueue\");\n            Log.w(\"Looper\", e.getMessage(), e);\n            return false;\n        }\n        return enqueueMessage(queue, msg, uptimeMillis);\n    }\n\tprivate boolean enqueueMessage(MessageQueue queue, Message msg, long uptimeMillis) {\n        msg.target = this;\n        if (mAsynchronous) {\n            msg.setAsynchronous(true);\n        }\n        return queue.enqueueMessage(msg, uptimeMillis);\n    }\n ```\n 　　可以发现，Handler发送消息的过程仅仅是向消息队列中插入了一条消息，MessageQueue的next方法就会返回这条消息给Looper，Looper收到消息后就开始处理了，最终消息由Looper交由Handler处理，即Handler的dispatchMessage方法会被调用，这时Handler就是进入了处理消息的阶段。dispatchMessage的实现如下：\n ``` java\n    public void dispatchMessage(Message msg) {\n        if (msg.callback != null) {\n            handleCallback(msg);\n        } else {\n            if (mCallback != null) {\n                if (mCallback.handleMessage(msg)) {\n                    return;\n                }\n            }\n            handleMessage(msg);\n        }\n    }\n ```\n Handler处理消息的过程如下：\n 1. 检查Message的callback是否为null，不为null就通过handleCallback来处理消息，Message的callback是一个Runnable对象，实际上就是Handler的post方法所传递的Runnable参数。handleCallback的逻辑如下：\n ``` java\n private static void handleCallback(Message message) {\n        message.callback.run();\n    }\n ```\n 2. 其次，检查mCallback是否为null，不为null就调用没CallBack的HandlerMessage方法来处理消息，Callback是个接口，它的定义如下：\n \n ``` java\n\t/**\n     * Callback interface you can use when instantiating a Handler to avoid\n     * having to implement your own subclass of Handler.\n     *\n     * @param msg A {@link android.os.Message Message} object\n     * @return True if no further handling is desired\n     */\n    public interface Callback {\n        public boolean handleMessage(Message msg);\n    }\n``` \n通过Callback可以采用如下方式来创建Handler对象：Handler handler = new Handler(callback)。\n\n3. 最后，调用Handler的handleMessahe方法来处理消息。\n***\n以上","source":"_posts/Android的消息机制.md","raw":"---\ntitle: Android的消息机制\ndate: 2017-03-23 14:00:09\ntags: [Android]\n---\n　　Android消息机制主要是指Handler的运行机制，Handler的运行需要底层的MessageQueue和Looper的支撑。MessageQueue的中文翻译是消息队列，他的内部存储了一组消息，以队列的形式对外提供插入和删除的工作。虽然叫消息队列，但是它的内部存储结构并不是真正的队列，而是采用单链表的数据机构来存储消息队列，但是它的内部存储结构并不是真正的队列，而是采用单链表的数据结构来存储消息列表。Looper可以理解为消息循环。由于MessageQueue只是一个消息的存储单元，它不能去处理消息，而Looper就填补了这个功能，Looper会以无限昏眩的形式去查找是否有新消息，如果有的话就处理消息，否则就等待。Looper中海油一个特殊的概念，那就是ThreadLocal，ThreadLocal并不是现成，它的作用是可以在每个现成中存储数据。Handler创建的时候会采用当前线程的Looper来构造消息循环系统，ThreadLocal可以在不同的线程中互不干扰的存储并提供数据，Handler可以通过ThreadLocal轻松获取每个现成的Looper。需要注意的是，现成默认是没有Looper的，如果需要使用Handler就必须为现成创建Looper，我们经常提到的主线程，也叫UI线程，它就是ActivityThread，ActivityThread被创建时就会初始化Looper，这也是在主线程中默认可以使用Handler的原因。\n<!--more-->\n\n### ThreadLocal的工作原理\nThreadLocal是一个县城内部的数据存储类，通过它可以在制定的线程中存储数据，数据存储以后，只能在制定的线程中才可以获取到存储的数据，对于其他线程来说则无法获取到，我们在使用的时候：\n``` java\n final ThreadLocal<Boolean> mBooleanThreadLocal = new ThreadLocal<>();\n        new Thread(\"Thread#1\"){\n            @Override\n            public void run() {\n                mBooleanThreadLocal.set(false);\n                Log.d(\"huangyuan\",\"Thread#1\" + mBooleanThreadLocal.get());\n            }\n        }.start();\n\n        new Thread(\"Thread#2\"){\n\n            @Override\n            public void run() {\n                mBooleanThreadLocal.set(true);\n                Log.d(\"huangyuan\",\"Thread#2\" + mBooleanThreadLocal.get());\n            }\n        }.start();\n```\n　　这样，我们虽然在不同的线程中访问的是同一个ThreadLocal对象，但是他们的值确是不一样的。这是因为不同的线程访问同一个ThreadLocal的get方法，ThreadLocal内部会从各自的线程中取出一个数组，然后再从数组中根据当前ThreadLocal的索引去查找出对应的value值。\nThreadLocal是一个泛型类，定义为`public class ThreadLocal<T>`,首先看ThreadLocal的set方法，如下：\n``` java\n public void set(T value) {\n        Thread t = Thread.currentThread();\n        ThreadLocalMap map = getMap(t);\n        if (map != null)\n            map.set(this, value);\n        else\n            createMap(t, value);\n    }\n```\n　　上面的方法中，首先会通过getMap方法获取ThreadLocalMap（存储线程的ThreadLocal数据），ThreadLocalMap是ThreadLocal类的静态内部类，其内部包含了一个静态内部类Entry，声明如下`static class Entry extends WeakReference<ThreadLocal>`,ThreadLocalMap类中有一个Entry类型的数组`private Entry[] table;`,下面是set方法的具体实现：\n``` java\n  private void set(ThreadLocal key, Object value) {\n\n            // We don't use a fast path as with get() because it is at\n            // least as common to use set() to create new entries as\n            // it is to replace existing ones, in which case, a fast\n            // path would fail more often than not.\n\n            Entry[] tab = table;\n            int len = tab.length;\n            int i = key.threadLocalHashCode & (len-1);\n\n            for (Entry e = tab[i];\n                 e != null;\n                 e = tab[i = nextIndex(i, len)]) {\n                ThreadLocal k = e.get();\n\n                if (k == key) {\n                    e.value = value;\n                    return;\n                }\n\n                if (k == null) {\n                    replaceStaleEntry(key, value, i);\n                    return;\n                }\n            }\n\n            tab[i] = new Entry(key, value);\n            int sz = ++size;\n            if (!cleanSomeSlots(i, sz) && sz >= threshold)\n                rehash();\n        }\n```\nThreadLocal的get方法如下：\n``` java\npublic T get() {\n        Thread t = Thread.currentThread();\n        ThreadLocalMap map = getMap(t);\n        if (map != null) {\n            ThreadLocalMap.Entry e = map.getEntry(this);\n            if (e != null)\n                return (T)e.value;\n        }\n        return setInitialValue();\n    } \n```\n　　从ThreadLocal的set和get方法可以看出，他们所操作的对象都是当前线程的ThreadLocalMap对象的table数组，因此在不同线程中访问同一个ThreadLocal的set和get方法，他们对ThreadLocal所做的读写操作仅限于各自线程的内部，这就是为什么ThreadLocal可以在多个线程中互不干扰的存储和修改数据。\n### 消息队列的工作原理\n　　消息队列在Android中指的是MessageQueue，MessageQueue主要包含两个操作，插入和读取。读取操作本身会伴随着删除操作，插入和读取对应的方法分别为enqueueMessage和next，其中enqueueMessage的作用是往消息队列中插入一跳消息，而next的作用是从消息队列中取出一条消息并将其从消息队列中移除，尽管MessageQueue叫消息队列，但是它的内部实现并不是用的队列，实际上它是通过一个单链表的数据结构来维护消息列表，单链表在插入和删除上比较有优势。下面是enqueueMessage的实现：\n``` java\nboolean enqueueMessage(Message msg, long when) {\n        if (msg.target == null) {\n            throw new IllegalArgumentException(\"Message must have a target.\");\n        }\n        if (msg.isInUse()) {\n            throw new IllegalStateException(msg + \" This message is already in use.\");\n        }\n\n        synchronized (this) {\n            if (mQuitting) {\n                IllegalStateException e = new IllegalStateException(\n                        msg.target + \" sending message to a Handler on a dead thread\");\n                Log.w(TAG, e.getMessage(), e);\n                msg.recycle();\n                return false;\n            }\n\n            msg.markInUse();\n            msg.when = when;\n            Message p = mMessages;\n            boolean needWake;\n            if (p == null || when == 0 || when < p.when) {\n                // New head, wake up the event queue if blocked.\n                msg.next = p;\n                mMessages = msg;\n                needWake = mBlocked;\n            } else {\n                // Inserted within the middle of the queue.  Usually we don't have to wake\n                // up the event queue unless there is a barrier at the head of the queue\n                // and the message is the earliest asynchronous message in the queue.\n                needWake = mBlocked && p.target == null && msg.isAsynchronous();\n                Message prev;\n                for (;;) {\n                    prev = p;\n                    p = p.next;\n                    if (p == null || when < p.when) {\n                        break;\n                    }\n                    if (needWake && p.isAsynchronous()) {\n                        needWake = false;\n                    }\n                }\n                msg.next = p; // invariant: p == prev.next\n                prev.next = msg;\n            }\n\n            // We can assume mPtr != 0 because mQuitting is false.\n            if (needWake) {\n                nativeWake(mPtr);\n            }\n        }\n        return true;\n    }\n```\n从其实现来安，主要操作其实就是单链表的插入操作。\nnext的实现如下：\n``` java\nMessage next() {\n        // Return here if the message loop has already quit and been disposed.\n        // This can happen if the application tries to restart a looper after quit\n        // which is not supported.\n        final long ptr = mPtr;\n        if (ptr == 0) {\n            return null;\n        }\n\n        int pendingIdleHandlerCount = -1; // -1 only during first iteration\n        int nextPollTimeoutMillis = 0;\n        for (;;) {\n            if (nextPollTimeoutMillis != 0) {\n                Binder.flushPendingCommands();\n            }\n\n            nativePollOnce(ptr, nextPollTimeoutMillis);\n\n            synchronized (this) {\n                // Try to retrieve the next message.  Return if found.\n                final long now = SystemClock.uptimeMillis();\n                Message prevMsg = null;\n                Message msg = mMessages;\n                if (msg != null && msg.target == null) {\n                    // Stalled by a barrier.  Find the next asynchronous message in the queue.\n                    do {\n                        prevMsg = msg;\n                        msg = msg.next;\n                    } while (msg != null && !msg.isAsynchronous());\n                }\n                if (msg != null) {\n                    if (now < msg.when) {\n                        // Next message is not ready.  Set a timeout to wake up when it is ready.\n                        nextPollTimeoutMillis = (int) Math.min(msg.when - now, Integer.MAX_VALUE);\n                    } else {\n                        // Got a message.\n                        mBlocked = false;\n                        if (prevMsg != null) {\n                            prevMsg.next = msg.next;\n                        } else {\n                            mMessages = msg.next;\n                        }\n                        msg.next = null;\n                        if (DEBUG) Log.v(TAG, \"Returning message: \" + msg);\n                        msg.markInUse();\n                        return msg;\n                    }\n                } else {\n                    // No more messages.\n                    nextPollTimeoutMillis = -1;\n                }\n\n                // Process the quit message now that all pending messages have been handled.\n                if (mQuitting) {\n                    dispose();\n                    return null;\n                }\n\n                // If first time idle, then get the number of idlers to run.\n                // Idle handles only run if the queue is empty or if the first message\n                // in the queue (possibly a barrier) is due to be handled in the future.\n                if (pendingIdleHandlerCount < 0\n                        && (mMessages == null || now < mMessages.when)) {\n                    pendingIdleHandlerCount = mIdleHandlers.size();\n                }\n                if (pendingIdleHandlerCount <= 0) {\n                    // No idle handlers to run.  Loop and wait some more.\n                    mBlocked = true;\n                    continue;\n                }\n\n                if (mPendingIdleHandlers == null) {\n                    mPendingIdleHandlers = new IdleHandler[Math.max(pendingIdleHandlerCount, 4)];\n                }\n                mPendingIdleHandlers = mIdleHandlers.toArray(mPendingIdleHandlers);\n            }\n\n            // Run the idle handlers.\n            // We only ever reach this code block during the first iteration.\n            for (int i = 0; i < pendingIdleHandlerCount; i++) {\n                final IdleHandler idler = mPendingIdleHandlers[i];\n                mPendingIdleHandlers[i] = null; // release the reference to the handler\n\n                boolean keep = false;\n                try {\n                    keep = idler.queueIdle();\n                } catch (Throwable t) {\n                    Log.wtf(TAG, \"IdleHandler threw exception\", t);\n                }\n\n                if (!keep) {\n                    synchronized (this) {\n                        mIdleHandlers.remove(idler);\n                    }\n                }\n            }\n\n            // Reset the idle handler count to 0 so we do not run them again.\n            pendingIdleHandlerCount = 0;\n\n            // While calling an idle handler, a new message could have been delivered\n            // so go back and look again for a pending message without waiting.\n            nextPollTimeoutMillis = 0;\n        }\n    }\n```\n可以返现next方法是一个无线循环的方法，如果消息队列为空，那么next方法会一直阻塞在这里，当有消息到来时，next方法会返回这条消息并将其从单链表中移除\n### Looper的工作原理\n　　Looper在Android的消息机制中扮演者消息循环的角色，具体来说就是它会不停地从MessageQueue中查看是否有新消息，如果有新消息就会立刻处理，否则就一直阻塞在那里。首先看一下它的构造方法，在构造中它会创建一个MessageQueue也就是消息队列，然后将当前线程的对象保存起来，如下：\n``` java\n  private Looper(boolean quitAllowed) {\n        mQueue = new MessageQueue(quitAllowed);\n        mThread = Thread.currentThread();\n    }\n```\n　　Handler的工作需要Looper，没有Looper的线程就会报错，我们可以通过Looper.prepare()即可为当前线程创建一个Looper，接着通过Looper.loop()来开启消息循环。Looper除了prepare方法外，还提供了prepareMainLoop方法，这个方法主要是给主线程也就是ActivityThread创建Looper使用的，其本质也是通过prepare方法来实现的。由于主线程的Looper比较特殊，所有Looper提供了一个getMainLooper方法，通过它可以在任何地方获取到主线程的Looper。Looper也是可以退出的，Looper提供了quit个quitSafely来退出一个Looper，二者的区别是：quit会直接突出Looper，而quitSafely只是设定一个退出标记，然后把消息队列中的已有消息处理完毕后才安全的退出。Looper退出后，通过Handler发送的消息会失败，这个时候Handler的send方法会返回false。在子线程中，如果手动为其创建了Looper，那么在所有的事情完成以后应该调用quit方法来总之消息循环，否则这个子线程就会一直处于等待的状态，而如果退出Looper以后，这个县城就会立刻终止，因此甲乙不需要的时候终止Looper。\n Looper最重要的一个方法是loop方法，只有调用了loop后，消息循环系统才会真正的起作用，实现如下：\n ``` java\n  /**\n     * Run the message queue in this thread. Be sure to call\n     * {@link #quit()} to end the loop.\n     */\n    public static void loop() {\n        final Looper me = myLooper();\n        if (me == null) {\n            throw new RuntimeException(\"No Looper; Looper.prepare() wasn't called on this thread.\");\n        }\n        final MessageQueue queue = me.mQueue;\n\n        // Make sure the identity of this thread is that of the local process,\n        // and keep track of what that identity token actually is.\n        Binder.clearCallingIdentity();\n        final long ident = Binder.clearCallingIdentity();\n\n        for (;;) {\n            Message msg = queue.next(); // might block\n            if (msg == null) {\n                // No message indicates that the message queue is quitting.\n                return;\n            }\n\n            // This must be in a local variable, in case a UI event sets the logger\n            final Printer logging = me.mLogging;\n            if (logging != null) {\n                logging.println(\">>>>> Dispatching to \" + msg.target + \" \" +\n                        msg.callback + \": \" + msg.what);\n            }\n\n            final long traceTag = me.mTraceTag;\n            if (traceTag != 0) {\n                Trace.traceBegin(traceTag, msg.target.getTraceName(msg));\n            }\n            try {\n                msg.target.dispatchMessage(msg);\n            } finally {\n                if (traceTag != 0) {\n                    Trace.traceEnd(traceTag);\n                }\n            }\n\n            if (logging != null) {\n                logging.println(\"<<<<< Finished to \" + msg.target + \" \" + msg.callback);\n            }\n\n            // Make sure that during the course of dispatching the\n            // identity of the thread wasn't corrupted.\n            final long newIdent = Binder.clearCallingIdentity();\n            if (ident != newIdent) {\n                Log.wtf(TAG, \"Thread identity changed from 0x\"\n                        + Long.toHexString(ident) + \" to 0x\"\n                        + Long.toHexString(newIdent) + \" while dispatching to \"\n                        + msg.target.getClass().getName() + \" \"\n                        + msg.callback + \" what=\" + msg.what);\n            }\n\n            msg.recycleUnchecked();\n        }\n    }\n ```\n 　　loop方法是一个死循环，唯一跳出循环的方式是MessageQueue的next方法返回了null，当Looper的quit方法被调用时，Looper就会通知消息队列退出，当消息队列被标记为退出状态时，它的next方法就会返回null，也就是说，Looper必须退出，否则loop方法就会无限循环下去，loop方法会调用MessageQueue的next方法来获取新消息，而next方法是一个阻塞操作，当没有消息时，next方法会一直阻塞在那里，这也导致loop方法一直阻塞在那里，如果MessageQueue的next方法返回了新消息，Looper就会处理这条消息，  msg.target.dispatchMessage(msg)，这里的  msg.target是发送这条消息的handler对象，这样Handler发送的消息最终又交个它的  dispatchMessage(msg);方法来处理了，但是这里不同的是，Handler的dispatchMessahe方法是在创建Handler时所使用的Looper中执行的，这样就成功的将代码逻辑切换到指定的线程中去执行了。\n ### Handler的工作原理\n Handler的工作主要包含消息的发送和接收过程。消息的发送可以通过post的一系列方法以及send的一系列方法来实现，post的一系列方法最终是通过send的一列方法来实现的。发送一条消息的典型过程如下：\n ``` java\n  public final boolean sendMessage(Message msg)\n    {\n        return sendMessageDelayed(msg, 0);\n    }\n\tpublic final boolean sendMessageDelayed(Message msg, long delayMillis)\n    {\n        if (delayMillis < 0) {\n            delayMillis = 0;\n        }\n        return sendMessageAtTime(msg, SystemClock.uptimeMillis() + delayMillis);\n    }\n\tpublic boolean sendMessageAtTime(Message msg, long uptimeMillis) {\n        MessageQueue queue = mQueue;\n        if (queue == null) {\n            RuntimeException e = new RuntimeException(\n                    this + \" sendMessageAtTime() called with no mQueue\");\n            Log.w(\"Looper\", e.getMessage(), e);\n            return false;\n        }\n        return enqueueMessage(queue, msg, uptimeMillis);\n    }\n\tprivate boolean enqueueMessage(MessageQueue queue, Message msg, long uptimeMillis) {\n        msg.target = this;\n        if (mAsynchronous) {\n            msg.setAsynchronous(true);\n        }\n        return queue.enqueueMessage(msg, uptimeMillis);\n    }\n ```\n 　　可以发现，Handler发送消息的过程仅仅是向消息队列中插入了一条消息，MessageQueue的next方法就会返回这条消息给Looper，Looper收到消息后就开始处理了，最终消息由Looper交由Handler处理，即Handler的dispatchMessage方法会被调用，这时Handler就是进入了处理消息的阶段。dispatchMessage的实现如下：\n ``` java\n    public void dispatchMessage(Message msg) {\n        if (msg.callback != null) {\n            handleCallback(msg);\n        } else {\n            if (mCallback != null) {\n                if (mCallback.handleMessage(msg)) {\n                    return;\n                }\n            }\n            handleMessage(msg);\n        }\n    }\n ```\n Handler处理消息的过程如下：\n 1. 检查Message的callback是否为null，不为null就通过handleCallback来处理消息，Message的callback是一个Runnable对象，实际上就是Handler的post方法所传递的Runnable参数。handleCallback的逻辑如下：\n ``` java\n private static void handleCallback(Message message) {\n        message.callback.run();\n    }\n ```\n 2. 其次，检查mCallback是否为null，不为null就调用没CallBack的HandlerMessage方法来处理消息，Callback是个接口，它的定义如下：\n \n ``` java\n\t/**\n     * Callback interface you can use when instantiating a Handler to avoid\n     * having to implement your own subclass of Handler.\n     *\n     * @param msg A {@link android.os.Message Message} object\n     * @return True if no further handling is desired\n     */\n    public interface Callback {\n        public boolean handleMessage(Message msg);\n    }\n``` \n通过Callback可以采用如下方式来创建Handler对象：Handler handler = new Handler(callback)。\n\n3. 最后，调用Handler的handleMessahe方法来处理消息。\n***\n以上","slug":"Android的消息机制","published":1,"updated":"2017-12-30T13:13:07.220Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjbvyt3uc0004scdgdcph7zyc","content":"<p>　　Android消息机制主要是指Handler的运行机制，Handler的运行需要底层的MessageQueue和Looper的支撑。MessageQueue的中文翻译是消息队列，他的内部存储了一组消息，以队列的形式对外提供插入和删除的工作。虽然叫消息队列，但是它的内部存储结构并不是真正的队列，而是采用单链表的数据机构来存储消息队列，但是它的内部存储结构并不是真正的队列，而是采用单链表的数据结构来存储消息列表。Looper可以理解为消息循环。由于MessageQueue只是一个消息的存储单元，它不能去处理消息，而Looper就填补了这个功能，Looper会以无限昏眩的形式去查找是否有新消息，如果有的话就处理消息，否则就等待。Looper中海油一个特殊的概念，那就是ThreadLocal，ThreadLocal并不是现成，它的作用是可以在每个现成中存储数据。Handler创建的时候会采用当前线程的Looper来构造消息循环系统，ThreadLocal可以在不同的线程中互不干扰的存储并提供数据，Handler可以通过ThreadLocal轻松获取每个现成的Looper。需要注意的是，现成默认是没有Looper的，如果需要使用Handler就必须为现成创建Looper，我们经常提到的主线程，也叫UI线程，它就是ActivityThread，ActivityThread被创建时就会初始化Looper，这也是在主线程中默认可以使用Handler的原因。<br><a id=\"more\"></a></p>\n<h3 id=\"ThreadLocal的工作原理\"><a href=\"#ThreadLocal的工作原理\" class=\"headerlink\" title=\"ThreadLocal的工作原理\"></a>ThreadLocal的工作原理</h3><p>ThreadLocal是一个县城内部的数据存储类，通过它可以在制定的线程中存储数据，数据存储以后，只能在制定的线程中才可以获取到存储的数据，对于其他线程来说则无法获取到，我们在使用的时候：<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">final</span> ThreadLocal&lt;Boolean&gt; mBooleanThreadLocal = <span class=\"keyword\">new</span> ThreadLocal&lt;&gt;();</div><div class=\"line\">       <span class=\"keyword\">new</span> Thread(<span class=\"string\">\"Thread#1\"</span>)&#123;</div><div class=\"line\">           <span class=\"meta\">@Override</span></div><div class=\"line\">           <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">run</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">               mBooleanThreadLocal.set(<span class=\"keyword\">false</span>);</div><div class=\"line\">               Log.d(<span class=\"string\">\"huangyuan\"</span>,<span class=\"string\">\"Thread#1\"</span> + mBooleanThreadLocal.get());</div><div class=\"line\">           &#125;</div><div class=\"line\">       &#125;.start();</div><div class=\"line\"></div><div class=\"line\">       <span class=\"keyword\">new</span> Thread(<span class=\"string\">\"Thread#2\"</span>)&#123;</div><div class=\"line\"></div><div class=\"line\">           <span class=\"meta\">@Override</span></div><div class=\"line\">           <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">run</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">               mBooleanThreadLocal.set(<span class=\"keyword\">true</span>);</div><div class=\"line\">               Log.d(<span class=\"string\">\"huangyuan\"</span>,<span class=\"string\">\"Thread#2\"</span> + mBooleanThreadLocal.get());</div><div class=\"line\">           &#125;</div><div class=\"line\">       &#125;.start();</div></pre></td></tr></table></figure></p>\n<p>　　这样，我们虽然在不同的线程中访问的是同一个ThreadLocal对象，但是他们的值确是不一样的。这是因为不同的线程访问同一个ThreadLocal的get方法，ThreadLocal内部会从各自的线程中取出一个数组，然后再从数组中根据当前ThreadLocal的索引去查找出对应的value值。<br>ThreadLocal是一个泛型类，定义为<code>public class ThreadLocal&lt;T&gt;</code>,首先看ThreadLocal的set方法，如下：<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">set</span><span class=\"params\">(T value)</span> </span>&#123;</div><div class=\"line\">       Thread t = Thread.currentThread();</div><div class=\"line\">       ThreadLocalMap map = getMap(t);</div><div class=\"line\">       <span class=\"keyword\">if</span> (map != <span class=\"keyword\">null</span>)</div><div class=\"line\">           map.set(<span class=\"keyword\">this</span>, value);</div><div class=\"line\">       <span class=\"keyword\">else</span></div><div class=\"line\">           createMap(t, value);</div><div class=\"line\">   &#125;</div></pre></td></tr></table></figure></p>\n<p>　　上面的方法中，首先会通过getMap方法获取ThreadLocalMap（存储线程的ThreadLocal数据），ThreadLocalMap是ThreadLocal类的静态内部类，其内部包含了一个静态内部类Entry，声明如下<code>static class Entry extends WeakReference&lt;ThreadLocal&gt;</code>,ThreadLocalMap类中有一个Entry类型的数组<code>private Entry[] table;</code>,下面是set方法的具体实现：<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">set</span><span class=\"params\">(ThreadLocal key, Object value)</span> </span>&#123;</div><div class=\"line\"></div><div class=\"line\">          <span class=\"comment\">// We don't use a fast path as with get() because it is at</span></div><div class=\"line\">          <span class=\"comment\">// least as common to use set() to create new entries as</span></div><div class=\"line\">          <span class=\"comment\">// it is to replace existing ones, in which case, a fast</span></div><div class=\"line\">          <span class=\"comment\">// path would fail more often than not.</span></div><div class=\"line\"></div><div class=\"line\">          Entry[] tab = table;</div><div class=\"line\">          <span class=\"keyword\">int</span> len = tab.length;</div><div class=\"line\">          <span class=\"keyword\">int</span> i = key.threadLocalHashCode &amp; (len-<span class=\"number\">1</span>);</div><div class=\"line\"></div><div class=\"line\">          <span class=\"keyword\">for</span> (Entry e = tab[i];</div><div class=\"line\">               e != <span class=\"keyword\">null</span>;</div><div class=\"line\">               e = tab[i = nextIndex(i, len)]) &#123;</div><div class=\"line\">              ThreadLocal k = e.get();</div><div class=\"line\"></div><div class=\"line\">              <span class=\"keyword\">if</span> (k == key) &#123;</div><div class=\"line\">                  e.value = value;</div><div class=\"line\">                  <span class=\"keyword\">return</span>;</div><div class=\"line\">              &#125;</div><div class=\"line\"></div><div class=\"line\">              <span class=\"keyword\">if</span> (k == <span class=\"keyword\">null</span>) &#123;</div><div class=\"line\">                  replaceStaleEntry(key, value, i);</div><div class=\"line\">                  <span class=\"keyword\">return</span>;</div><div class=\"line\">              &#125;</div><div class=\"line\">          &#125;</div><div class=\"line\"></div><div class=\"line\">          tab[i] = <span class=\"keyword\">new</span> Entry(key, value);</div><div class=\"line\">          <span class=\"keyword\">int</span> sz = ++size;</div><div class=\"line\">          <span class=\"keyword\">if</span> (!cleanSomeSlots(i, sz) &amp;&amp; sz &gt;= threshold)</div><div class=\"line\">              rehash();</div><div class=\"line\">      &#125;</div></pre></td></tr></table></figure></p>\n<p>ThreadLocal的get方法如下：<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> T <span class=\"title\">get</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">        Thread t = Thread.currentThread();</div><div class=\"line\">        ThreadLocalMap map = getMap(t);</div><div class=\"line\">        <span class=\"keyword\">if</span> (map != <span class=\"keyword\">null</span>) &#123;</div><div class=\"line\">            ThreadLocalMap.Entry e = map.getEntry(<span class=\"keyword\">this</span>);</div><div class=\"line\">            <span class=\"keyword\">if</span> (e != <span class=\"keyword\">null</span>)</div><div class=\"line\">                <span class=\"keyword\">return</span> (T)e.value;</div><div class=\"line\">        &#125;</div><div class=\"line\">        <span class=\"keyword\">return</span> setInitialValue();</div><div class=\"line\">    &#125;</div></pre></td></tr></table></figure></p>\n<p>　　从ThreadLocal的set和get方法可以看出，他们所操作的对象都是当前线程的ThreadLocalMap对象的table数组，因此在不同线程中访问同一个ThreadLocal的set和get方法，他们对ThreadLocal所做的读写操作仅限于各自线程的内部，这就是为什么ThreadLocal可以在多个线程中互不干扰的存储和修改数据。</p>\n<h3 id=\"消息队列的工作原理\"><a href=\"#消息队列的工作原理\" class=\"headerlink\" title=\"消息队列的工作原理\"></a>消息队列的工作原理</h3><p>　　消息队列在Android中指的是MessageQueue，MessageQueue主要包含两个操作，插入和读取。读取操作本身会伴随着删除操作，插入和读取对应的方法分别为enqueueMessage和next，其中enqueueMessage的作用是往消息队列中插入一跳消息，而next的作用是从消息队列中取出一条消息并将其从消息队列中移除，尽管MessageQueue叫消息队列，但是它的内部实现并不是用的队列，实际上它是通过一个单链表的数据结构来维护消息列表，单链表在插入和删除上比较有优势。下面是enqueueMessage的实现：<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">boolean</span> <span class=\"title\">enqueueMessage</span><span class=\"params\">(Message msg, <span class=\"keyword\">long</span> when)</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">if</span> (msg.target == <span class=\"keyword\">null</span>) &#123;</div><div class=\"line\">            <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> IllegalArgumentException(<span class=\"string\">\"Message must have a target.\"</span>);</div><div class=\"line\">        &#125;</div><div class=\"line\">        <span class=\"keyword\">if</span> (msg.isInUse()) &#123;</div><div class=\"line\">            <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> IllegalStateException(msg + <span class=\"string\">\" This message is already in use.\"</span>);</div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\">        <span class=\"keyword\">synchronized</span> (<span class=\"keyword\">this</span>) &#123;</div><div class=\"line\">            <span class=\"keyword\">if</span> (mQuitting) &#123;</div><div class=\"line\">                IllegalStateException e = <span class=\"keyword\">new</span> IllegalStateException(</div><div class=\"line\">                        msg.target + <span class=\"string\">\" sending message to a Handler on a dead thread\"</span>);</div><div class=\"line\">                Log.w(TAG, e.getMessage(), e);</div><div class=\"line\">                msg.recycle();</div><div class=\"line\">                <span class=\"keyword\">return</span> <span class=\"keyword\">false</span>;</div><div class=\"line\">            &#125;</div><div class=\"line\"></div><div class=\"line\">            msg.markInUse();</div><div class=\"line\">            msg.when = when;</div><div class=\"line\">            Message p = mMessages;</div><div class=\"line\">            <span class=\"keyword\">boolean</span> needWake;</div><div class=\"line\">            <span class=\"keyword\">if</span> (p == <span class=\"keyword\">null</span> || when == <span class=\"number\">0</span> || when &lt; p.when) &#123;</div><div class=\"line\">                <span class=\"comment\">// New head, wake up the event queue if blocked.</span></div><div class=\"line\">                msg.next = p;</div><div class=\"line\">                mMessages = msg;</div><div class=\"line\">                needWake = mBlocked;</div><div class=\"line\">            &#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">                <span class=\"comment\">// Inserted within the middle of the queue.  Usually we don't have to wake</span></div><div class=\"line\">                <span class=\"comment\">// up the event queue unless there is a barrier at the head of the queue</span></div><div class=\"line\">                <span class=\"comment\">// and the message is the earliest asynchronous message in the queue.</span></div><div class=\"line\">                needWake = mBlocked &amp;&amp; p.target == <span class=\"keyword\">null</span> &amp;&amp; msg.isAsynchronous();</div><div class=\"line\">                Message prev;</div><div class=\"line\">                <span class=\"keyword\">for</span> (;;) &#123;</div><div class=\"line\">                    prev = p;</div><div class=\"line\">                    p = p.next;</div><div class=\"line\">                    <span class=\"keyword\">if</span> (p == <span class=\"keyword\">null</span> || when &lt; p.when) &#123;</div><div class=\"line\">                        <span class=\"keyword\">break</span>;</div><div class=\"line\">                    &#125;</div><div class=\"line\">                    <span class=\"keyword\">if</span> (needWake &amp;&amp; p.isAsynchronous()) &#123;</div><div class=\"line\">                        needWake = <span class=\"keyword\">false</span>;</div><div class=\"line\">                    &#125;</div><div class=\"line\">                &#125;</div><div class=\"line\">                msg.next = p; <span class=\"comment\">// invariant: p == prev.next</span></div><div class=\"line\">                prev.next = msg;</div><div class=\"line\">            &#125;</div><div class=\"line\"></div><div class=\"line\">            <span class=\"comment\">// We can assume mPtr != 0 because mQuitting is false.</span></div><div class=\"line\">            <span class=\"keyword\">if</span> (needWake) &#123;</div><div class=\"line\">                nativeWake(mPtr);</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;</div><div class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">true</span>;</div><div class=\"line\">    &#125;</div></pre></td></tr></table></figure></p>\n<p>从其实现来安，主要操作其实就是单链表的插入操作。<br>next的实现如下：<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div><div class=\"line\">71</div><div class=\"line\">72</div><div class=\"line\">73</div><div class=\"line\">74</div><div class=\"line\">75</div><div class=\"line\">76</div><div class=\"line\">77</div><div class=\"line\">78</div><div class=\"line\">79</div><div class=\"line\">80</div><div class=\"line\">81</div><div class=\"line\">82</div><div class=\"line\">83</div><div class=\"line\">84</div><div class=\"line\">85</div><div class=\"line\">86</div><div class=\"line\">87</div><div class=\"line\">88</div><div class=\"line\">89</div><div class=\"line\">90</div><div class=\"line\">91</div><div class=\"line\">92</div><div class=\"line\">93</div><div class=\"line\">94</div><div class=\"line\">95</div><div class=\"line\">96</div><div class=\"line\">97</div><div class=\"line\">98</div><div class=\"line\">99</div><div class=\"line\">100</div><div class=\"line\">101</div><div class=\"line\">102</div><div class=\"line\">103</div><div class=\"line\">104</div><div class=\"line\">105</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\">Message <span class=\"title\">next</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">        <span class=\"comment\">// Return here if the message loop has already quit and been disposed.</span></div><div class=\"line\">        <span class=\"comment\">// This can happen if the application tries to restart a looper after quit</span></div><div class=\"line\">        <span class=\"comment\">// which is not supported.</span></div><div class=\"line\">        <span class=\"keyword\">final</span> <span class=\"keyword\">long</span> ptr = mPtr;</div><div class=\"line\">        <span class=\"keyword\">if</span> (ptr == <span class=\"number\">0</span>) &#123;</div><div class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">null</span>;</div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\">        <span class=\"keyword\">int</span> pendingIdleHandlerCount = -<span class=\"number\">1</span>; <span class=\"comment\">// -1 only during first iteration</span></div><div class=\"line\">        <span class=\"keyword\">int</span> nextPollTimeoutMillis = <span class=\"number\">0</span>;</div><div class=\"line\">        <span class=\"keyword\">for</span> (;;) &#123;</div><div class=\"line\">            <span class=\"keyword\">if</span> (nextPollTimeoutMillis != <span class=\"number\">0</span>) &#123;</div><div class=\"line\">                Binder.flushPendingCommands();</div><div class=\"line\">            &#125;</div><div class=\"line\"></div><div class=\"line\">            nativePollOnce(ptr, nextPollTimeoutMillis);</div><div class=\"line\"></div><div class=\"line\">            <span class=\"keyword\">synchronized</span> (<span class=\"keyword\">this</span>) &#123;</div><div class=\"line\">                <span class=\"comment\">// Try to retrieve the next message.  Return if found.</span></div><div class=\"line\">                <span class=\"keyword\">final</span> <span class=\"keyword\">long</span> now = SystemClock.uptimeMillis();</div><div class=\"line\">                Message prevMsg = <span class=\"keyword\">null</span>;</div><div class=\"line\">                Message msg = mMessages;</div><div class=\"line\">                <span class=\"keyword\">if</span> (msg != <span class=\"keyword\">null</span> &amp;&amp; msg.target == <span class=\"keyword\">null</span>) &#123;</div><div class=\"line\">                    <span class=\"comment\">// Stalled by a barrier.  Find the next asynchronous message in the queue.</span></div><div class=\"line\">                    do &#123;</div><div class=\"line\">                        prevMsg = msg;</div><div class=\"line\">                        msg = msg.next;</div><div class=\"line\">                    &#125; <span class=\"keyword\">while</span> (msg != <span class=\"keyword\">null</span> &amp;&amp; !msg.isAsynchronous());</div><div class=\"line\">                &#125;</div><div class=\"line\">                <span class=\"keyword\">if</span> (msg != <span class=\"keyword\">null</span>) &#123;</div><div class=\"line\">                    <span class=\"keyword\">if</span> (now &lt; msg.when) &#123;</div><div class=\"line\">                        <span class=\"comment\">// Next message is not ready.  Set a timeout to wake up when it is ready.</span></div><div class=\"line\">                        nextPollTimeoutMillis = (<span class=\"keyword\">int</span>) Math.min(msg.when - now, Integer.MAX_VALUE);</div><div class=\"line\">                    &#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">                        <span class=\"comment\">// Got a message.</span></div><div class=\"line\">                        mBlocked = <span class=\"keyword\">false</span>;</div><div class=\"line\">                        <span class=\"keyword\">if</span> (prevMsg != <span class=\"keyword\">null</span>) &#123;</div><div class=\"line\">                            prevMsg.next = msg.next;</div><div class=\"line\">                        &#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">                            mMessages = msg.next;</div><div class=\"line\">                        &#125;</div><div class=\"line\">                        msg.next = <span class=\"keyword\">null</span>;</div><div class=\"line\">                        <span class=\"keyword\">if</span> (DEBUG) Log.v(TAG, <span class=\"string\">\"Returning message: \"</span> + msg);</div><div class=\"line\">                        msg.markInUse();</div><div class=\"line\">                        <span class=\"keyword\">return</span> msg;</div><div class=\"line\">                    &#125;</div><div class=\"line\">                &#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">                    <span class=\"comment\">// No more messages.</span></div><div class=\"line\">                    nextPollTimeoutMillis = -<span class=\"number\">1</span>;</div><div class=\"line\">                &#125;</div><div class=\"line\"></div><div class=\"line\">                <span class=\"comment\">// Process the quit message now that all pending messages have been handled.</span></div><div class=\"line\">                <span class=\"keyword\">if</span> (mQuitting) &#123;</div><div class=\"line\">                    dispose();</div><div class=\"line\">                    <span class=\"keyword\">return</span> <span class=\"keyword\">null</span>;</div><div class=\"line\">                &#125;</div><div class=\"line\"></div><div class=\"line\">                <span class=\"comment\">// If first time idle, then get the number of idlers to run.</span></div><div class=\"line\">                <span class=\"comment\">// Idle handles only run if the queue is empty or if the first message</span></div><div class=\"line\">                <span class=\"comment\">// in the queue (possibly a barrier) is due to be handled in the future.</span></div><div class=\"line\">                <span class=\"keyword\">if</span> (pendingIdleHandlerCount &lt; <span class=\"number\">0</span></div><div class=\"line\">                        &amp;&amp; (mMessages == <span class=\"keyword\">null</span> || now &lt; mMessages.when)) &#123;</div><div class=\"line\">                    pendingIdleHandlerCount = mIdleHandlers.size();</div><div class=\"line\">                &#125;</div><div class=\"line\">                <span class=\"keyword\">if</span> (pendingIdleHandlerCount &lt;= <span class=\"number\">0</span>) &#123;</div><div class=\"line\">                    <span class=\"comment\">// No idle handlers to run.  Loop and wait some more.</span></div><div class=\"line\">                    mBlocked = <span class=\"keyword\">true</span>;</div><div class=\"line\">                    <span class=\"keyword\">continue</span>;</div><div class=\"line\">                &#125;</div><div class=\"line\"></div><div class=\"line\">                <span class=\"keyword\">if</span> (mPendingIdleHandlers == <span class=\"keyword\">null</span>) &#123;</div><div class=\"line\">                    mPendingIdleHandlers = <span class=\"keyword\">new</span> IdleHandler[Math.max(pendingIdleHandlerCount, <span class=\"number\">4</span>)];</div><div class=\"line\">                &#125;</div><div class=\"line\">                mPendingIdleHandlers = mIdleHandlers.toArray(mPendingIdleHandlers);</div><div class=\"line\">            &#125;</div><div class=\"line\"></div><div class=\"line\">            <span class=\"comment\">// Run the idle handlers.</span></div><div class=\"line\">            <span class=\"comment\">// We only ever reach this code block during the first iteration.</span></div><div class=\"line\">            <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; pendingIdleHandlerCount; i++) &#123;</div><div class=\"line\">                <span class=\"keyword\">final</span> IdleHandler idler = mPendingIdleHandlers[i];</div><div class=\"line\">                mPendingIdleHandlers[i] = <span class=\"keyword\">null</span>; <span class=\"comment\">// release the reference to the handler</span></div><div class=\"line\"></div><div class=\"line\">                <span class=\"keyword\">boolean</span> keep = <span class=\"keyword\">false</span>;</div><div class=\"line\">                <span class=\"keyword\">try</span> &#123;</div><div class=\"line\">                    keep = idler.queueIdle();</div><div class=\"line\">                &#125; <span class=\"keyword\">catch</span> (Throwable t) &#123;</div><div class=\"line\">                    Log.wtf(TAG, <span class=\"string\">\"IdleHandler threw exception\"</span>, t);</div><div class=\"line\">                &#125;</div><div class=\"line\"></div><div class=\"line\">                <span class=\"keyword\">if</span> (!keep) &#123;</div><div class=\"line\">                    <span class=\"keyword\">synchronized</span> (<span class=\"keyword\">this</span>) &#123;</div><div class=\"line\">                        mIdleHandlers.remove(idler);</div><div class=\"line\">                    &#125;</div><div class=\"line\">                &#125;</div><div class=\"line\">            &#125;</div><div class=\"line\"></div><div class=\"line\">            <span class=\"comment\">// Reset the idle handler count to 0 so we do not run them again.</span></div><div class=\"line\">            pendingIdleHandlerCount = <span class=\"number\">0</span>;</div><div class=\"line\"></div><div class=\"line\">            <span class=\"comment\">// While calling an idle handler, a new message could have been delivered</span></div><div class=\"line\">            <span class=\"comment\">// so go back and look again for a pending message without waiting.</span></div><div class=\"line\">            nextPollTimeoutMillis = <span class=\"number\">0</span>;</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div></pre></td></tr></table></figure></p>\n<p>可以返现next方法是一个无线循环的方法，如果消息队列为空，那么next方法会一直阻塞在这里，当有消息到来时，next方法会返回这条消息并将其从单链表中移除</p>\n<h3 id=\"Looper的工作原理\"><a href=\"#Looper的工作原理\" class=\"headerlink\" title=\"Looper的工作原理\"></a>Looper的工作原理</h3><p>　　Looper在Android的消息机制中扮演者消息循环的角色，具体来说就是它会不停地从MessageQueue中查看是否有新消息，如果有新消息就会立刻处理，否则就一直阻塞在那里。首先看一下它的构造方法，在构造中它会创建一个MessageQueue也就是消息队列，然后将当前线程的对象保存起来，如下：<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> <span class=\"title\">Looper</span><span class=\"params\">(<span class=\"keyword\">boolean</span> quitAllowed)</span> </span>&#123;</div><div class=\"line\">      mQueue = <span class=\"keyword\">new</span> MessageQueue(quitAllowed);</div><div class=\"line\">      mThread = Thread.currentThread();</div><div class=\"line\">  &#125;</div></pre></td></tr></table></figure></p>\n<p>　　Handler的工作需要Looper，没有Looper的线程就会报错，我们可以通过Looper.prepare()即可为当前线程创建一个Looper，接着通过Looper.loop()来开启消息循环。Looper除了prepare方法外，还提供了prepareMainLoop方法，这个方法主要是给主线程也就是ActivityThread创建Looper使用的，其本质也是通过prepare方法来实现的。由于主线程的Looper比较特殊，所有Looper提供了一个getMainLooper方法，通过它可以在任何地方获取到主线程的Looper。Looper也是可以退出的，Looper提供了quit个quitSafely来退出一个Looper，二者的区别是：quit会直接突出Looper，而quitSafely只是设定一个退出标记，然后把消息队列中的已有消息处理完毕后才安全的退出。Looper退出后，通过Handler发送的消息会失败，这个时候Handler的send方法会返回false。在子线程中，如果手动为其创建了Looper，那么在所有的事情完成以后应该调用quit方法来总之消息循环，否则这个子线程就会一直处于等待的状态，而如果退出Looper以后，这个县城就会立刻终止，因此甲乙不需要的时候终止Looper。<br> Looper最重要的一个方法是loop方法，只有调用了loop后，消息循环系统才会真正的起作用，实现如下：<br> <figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">/**</span></div><div class=\"line\">   * Run the message queue in this thread. Be sure to call</div><div class=\"line\">   * &#123;<span class=\"doctag\">@link</span> #quit()&#125; to end the loop.</div><div class=\"line\">   */</div><div class=\"line\">  <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">loop</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">      <span class=\"keyword\">final</span> Looper me = myLooper();</div><div class=\"line\">      <span class=\"keyword\">if</span> (me == <span class=\"keyword\">null</span>) &#123;</div><div class=\"line\">          <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> RuntimeException(<span class=\"string\">\"No Looper; Looper.prepare() wasn't called on this thread.\"</span>);</div><div class=\"line\">      &#125;</div><div class=\"line\">      <span class=\"keyword\">final</span> MessageQueue queue = me.mQueue;</div><div class=\"line\"></div><div class=\"line\">      <span class=\"comment\">// Make sure the identity of this thread is that of the local process,</span></div><div class=\"line\">      <span class=\"comment\">// and keep track of what that identity token actually is.</span></div><div class=\"line\">      Binder.clearCallingIdentity();</div><div class=\"line\">      <span class=\"keyword\">final</span> <span class=\"keyword\">long</span> ident = Binder.clearCallingIdentity();</div><div class=\"line\"></div><div class=\"line\">      <span class=\"keyword\">for</span> (;;) &#123;</div><div class=\"line\">          Message msg = queue.next(); <span class=\"comment\">// might block</span></div><div class=\"line\">          <span class=\"keyword\">if</span> (msg == <span class=\"keyword\">null</span>) &#123;</div><div class=\"line\">              <span class=\"comment\">// No message indicates that the message queue is quitting.</span></div><div class=\"line\">              <span class=\"keyword\">return</span>;</div><div class=\"line\">          &#125;</div><div class=\"line\"></div><div class=\"line\">          <span class=\"comment\">// This must be in a local variable, in case a UI event sets the logger</span></div><div class=\"line\">          <span class=\"keyword\">final</span> Printer logging = me.mLogging;</div><div class=\"line\">          <span class=\"keyword\">if</span> (logging != <span class=\"keyword\">null</span>) &#123;</div><div class=\"line\">              logging.println(<span class=\"string\">\"&gt;&gt;&gt;&gt;&gt; Dispatching to \"</span> + msg.target + <span class=\"string\">\" \"</span> +</div><div class=\"line\">                      msg.callback + <span class=\"string\">\": \"</span> + msg.what);</div><div class=\"line\">          &#125;</div><div class=\"line\"></div><div class=\"line\">          <span class=\"keyword\">final</span> <span class=\"keyword\">long</span> traceTag = me.mTraceTag;</div><div class=\"line\">          <span class=\"keyword\">if</span> (traceTag != <span class=\"number\">0</span>) &#123;</div><div class=\"line\">              Trace.traceBegin(traceTag, msg.target.getTraceName(msg));</div><div class=\"line\">          &#125;</div><div class=\"line\">          <span class=\"keyword\">try</span> &#123;</div><div class=\"line\">              msg.target.dispatchMessage(msg);</div><div class=\"line\">          &#125; <span class=\"keyword\">finally</span> &#123;</div><div class=\"line\">              <span class=\"keyword\">if</span> (traceTag != <span class=\"number\">0</span>) &#123;</div><div class=\"line\">                  Trace.traceEnd(traceTag);</div><div class=\"line\">              &#125;</div><div class=\"line\">          &#125;</div><div class=\"line\"></div><div class=\"line\">          <span class=\"keyword\">if</span> (logging != <span class=\"keyword\">null</span>) &#123;</div><div class=\"line\">              logging.println(<span class=\"string\">\"&lt;&lt;&lt;&lt;&lt; Finished to \"</span> + msg.target + <span class=\"string\">\" \"</span> + msg.callback);</div><div class=\"line\">          &#125;</div><div class=\"line\"></div><div class=\"line\">          <span class=\"comment\">// Make sure that during the course of dispatching the</span></div><div class=\"line\">          <span class=\"comment\">// identity of the thread wasn't corrupted.</span></div><div class=\"line\">          <span class=\"keyword\">final</span> <span class=\"keyword\">long</span> newIdent = Binder.clearCallingIdentity();</div><div class=\"line\">          <span class=\"keyword\">if</span> (ident != newIdent) &#123;</div><div class=\"line\">              Log.wtf(TAG, <span class=\"string\">\"Thread identity changed from 0x\"</span></div><div class=\"line\">                      + Long.toHexString(ident) + <span class=\"string\">\" to 0x\"</span></div><div class=\"line\">                      + Long.toHexString(newIdent) + <span class=\"string\">\" while dispatching to \"</span></div><div class=\"line\">                      + msg.target.getClass().getName() + <span class=\"string\">\" \"</span></div><div class=\"line\">                      + msg.callback + <span class=\"string\">\" what=\"</span> + msg.what);</div><div class=\"line\">          &#125;</div><div class=\"line\"></div><div class=\"line\">          msg.recycleUnchecked();</div><div class=\"line\">      &#125;</div><div class=\"line\">  &#125;</div></pre></td></tr></table></figure></p>\n<p> 　　loop方法是一个死循环，唯一跳出循环的方式是MessageQueue的next方法返回了null，当Looper的quit方法被调用时，Looper就会通知消息队列退出，当消息队列被标记为退出状态时，它的next方法就会返回null，也就是说，Looper必须退出，否则loop方法就会无限循环下去，loop方法会调用MessageQueue的next方法来获取新消息，而next方法是一个阻塞操作，当没有消息时，next方法会一直阻塞在那里，这也导致loop方法一直阻塞在那里，如果MessageQueue的next方法返回了新消息，Looper就会处理这条消息，  msg.target.dispatchMessage(msg)，这里的  msg.target是发送这条消息的handler对象，这样Handler发送的消息最终又交个它的  dispatchMessage(msg);方法来处理了，但是这里不同的是，Handler的dispatchMessahe方法是在创建Handler时所使用的Looper中执行的，这样就成功的将代码逻辑切换到指定的线程中去执行了。</p>\n<h3 id=\"Handler的工作原理\"><a href=\"#Handler的工作原理\" class=\"headerlink\" title=\"Handler的工作原理\"></a>Handler的工作原理</h3><p> Handler的工作主要包含消息的发送和接收过程。消息的发送可以通过post的一系列方法以及send的一系列方法来实现，post的一系列方法最终是通过send的一列方法来实现的。发送一条消息的典型过程如下：<br> <figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div></pre></td><td class=\"code\"><pre><div class=\"line\"> <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">final</span> <span class=\"keyword\">boolean</span> <span class=\"title\">sendMessage</span><span class=\"params\">(Message msg)</span></span></div><div class=\"line\">   &#123;</div><div class=\"line\">       <span class=\"keyword\">return</span> sendMessageDelayed(msg, <span class=\"number\">0</span>);</div><div class=\"line\">   &#125;</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">final</span> <span class=\"keyword\">boolean</span> <span class=\"title\">sendMessageDelayed</span><span class=\"params\">(Message msg, <span class=\"keyword\">long</span> delayMillis)</span></span></div><div class=\"line\">   &#123;</div><div class=\"line\">       <span class=\"keyword\">if</span> (delayMillis &lt; <span class=\"number\">0</span>) &#123;</div><div class=\"line\">           delayMillis = <span class=\"number\">0</span>;</div><div class=\"line\">       &#125;</div><div class=\"line\">       <span class=\"keyword\">return</span> sendMessageAtTime(msg, SystemClock.uptimeMillis() + delayMillis);</div><div class=\"line\">   &#125;</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">sendMessageAtTime</span><span class=\"params\">(Message msg, <span class=\"keyword\">long</span> uptimeMillis)</span> </span>&#123;</div><div class=\"line\">       MessageQueue queue = mQueue;</div><div class=\"line\">       <span class=\"keyword\">if</span> (queue == <span class=\"keyword\">null</span>) &#123;</div><div class=\"line\">           RuntimeException e = <span class=\"keyword\">new</span> RuntimeException(</div><div class=\"line\">                   <span class=\"keyword\">this</span> + <span class=\"string\">\" sendMessageAtTime() called with no mQueue\"</span>);</div><div class=\"line\">           Log.w(<span class=\"string\">\"Looper\"</span>, e.getMessage(), e);</div><div class=\"line\">           <span class=\"keyword\">return</span> <span class=\"keyword\">false</span>;</div><div class=\"line\">       &#125;</div><div class=\"line\">       <span class=\"keyword\">return</span> enqueueMessage(queue, msg, uptimeMillis);</div><div class=\"line\">   &#125;</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">boolean</span> <span class=\"title\">enqueueMessage</span><span class=\"params\">(MessageQueue queue, Message msg, <span class=\"keyword\">long</span> uptimeMillis)</span> </span>&#123;</div><div class=\"line\">       msg.target = <span class=\"keyword\">this</span>;</div><div class=\"line\">       <span class=\"keyword\">if</span> (mAsynchronous) &#123;</div><div class=\"line\">           msg.setAsynchronous(<span class=\"keyword\">true</span>);</div><div class=\"line\">       &#125;</div><div class=\"line\">       <span class=\"keyword\">return</span> queue.enqueueMessage(msg, uptimeMillis);</div><div class=\"line\">   &#125;</div></pre></td></tr></table></figure></p>\n<p> 　　可以发现，Handler发送消息的过程仅仅是向消息队列中插入了一条消息，MessageQueue的next方法就会返回这条消息给Looper，Looper收到消息后就开始处理了，最终消息由Looper交由Handler处理，即Handler的dispatchMessage方法会被调用，这时Handler就是进入了处理消息的阶段。dispatchMessage的实现如下：<br> <figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">dispatchMessage</span><span class=\"params\">(Message msg)</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">if</span> (msg.callback != <span class=\"keyword\">null</span>) &#123;</div><div class=\"line\">        handleCallback(msg);</div><div class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">        <span class=\"keyword\">if</span> (mCallback != <span class=\"keyword\">null</span>) &#123;</div><div class=\"line\">            <span class=\"keyword\">if</span> (mCallback.handleMessage(msg)) &#123;</div><div class=\"line\">                <span class=\"keyword\">return</span>;</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;</div><div class=\"line\">        handleMessage(msg);</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p> Handler处理消息的过程如下：</p>\n<ol>\n<li><p>检查Message的callback是否为null，不为null就通过handleCallback来处理消息，Message的callback是一个Runnable对象，实际上就是Handler的post方法所传递的Runnable参数。handleCallback的逻辑如下：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">handleCallback</span><span class=\"params\">(Message message)</span> </span>&#123;</div><div class=\"line\">       message.callback.run();</div><div class=\"line\">   &#125;</div></pre></td></tr></table></figure>\n</li>\n<li><p>其次，检查mCallback是否为null，不为null就调用没CallBack的HandlerMessage方法来处理消息，Callback是个接口，它的定义如下：</p>\n<pre><code class=\"java\"><span class=\"comment\">/**\n * Callback interface you can use when instantiating a Handler to avoid\n * having to implement your own subclass of Handler.\n *\n * <span class=\"doctag\">@param</span> msg A {<span class=\"doctag\">@link</span> android.os.Message Message} object\n * <span class=\"doctag\">@return</span> True if no further handling is desired\n */</span>\n<span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">interface</span> <span class=\"title\">Callback</span> </span>{\n    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">handleMessage</span><span class=\"params\">(Message msg)</span></span>;\n}\n</code></pre>\n<p>通过Callback可以采用如下方式来创建Handler对象：Handler handler = new Handler(callback)。</p>\n</li>\n</ol>\n<ol>\n<li>最后，调用Handler的handleMessahe方法来处理消息。</li>\n</ol>\n<hr>\n<p>以上</p>\n","excerpt":"<p>　　Android消息机制主要是指Handler的运行机制，Handler的运行需要底层的MessageQueue和Looper的支撑。MessageQueue的中文翻译是消息队列，他的内部存储了一组消息，以队列的形式对外提供插入和删除的工作。虽然叫消息队列，但是它的内部存储结构并不是真正的队列，而是采用单链表的数据机构来存储消息队列，但是它的内部存储结构并不是真正的队列，而是采用单链表的数据结构来存储消息列表。Looper可以理解为消息循环。由于MessageQueue只是一个消息的存储单元，它不能去处理消息，而Looper就填补了这个功能，Looper会以无限昏眩的形式去查找是否有新消息，如果有的话就处理消息，否则就等待。Looper中海油一个特殊的概念，那就是ThreadLocal，ThreadLocal并不是现成，它的作用是可以在每个现成中存储数据。Handler创建的时候会采用当前线程的Looper来构造消息循环系统，ThreadLocal可以在不同的线程中互不干扰的存储并提供数据，Handler可以通过ThreadLocal轻松获取每个现成的Looper。需要注意的是，现成默认是没有Looper的，如果需要使用Handler就必须为现成创建Looper，我们经常提到的主线程，也叫UI线程，它就是ActivityThread，ActivityThread被创建时就会初始化Looper，这也是在主线程中默认可以使用Handler的原因。<br>","more":"</p>\n<h3 id=\"ThreadLocal的工作原理\"><a href=\"#ThreadLocal的工作原理\" class=\"headerlink\" title=\"ThreadLocal的工作原理\"></a>ThreadLocal的工作原理</h3><p>ThreadLocal是一个县城内部的数据存储类，通过它可以在制定的线程中存储数据，数据存储以后，只能在制定的线程中才可以获取到存储的数据，对于其他线程来说则无法获取到，我们在使用的时候：<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">final</span> ThreadLocal&lt;Boolean&gt; mBooleanThreadLocal = <span class=\"keyword\">new</span> ThreadLocal&lt;&gt;();</div><div class=\"line\">       <span class=\"keyword\">new</span> Thread(<span class=\"string\">\"Thread#1\"</span>)&#123;</div><div class=\"line\">           <span class=\"meta\">@Override</span></div><div class=\"line\">           <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">run</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">               mBooleanThreadLocal.set(<span class=\"keyword\">false</span>);</div><div class=\"line\">               Log.d(<span class=\"string\">\"huangyuan\"</span>,<span class=\"string\">\"Thread#1\"</span> + mBooleanThreadLocal.get());</div><div class=\"line\">           &#125;</div><div class=\"line\">       &#125;.start();</div><div class=\"line\"></div><div class=\"line\">       <span class=\"keyword\">new</span> Thread(<span class=\"string\">\"Thread#2\"</span>)&#123;</div><div class=\"line\"></div><div class=\"line\">           <span class=\"meta\">@Override</span></div><div class=\"line\">           <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">run</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">               mBooleanThreadLocal.set(<span class=\"keyword\">true</span>);</div><div class=\"line\">               Log.d(<span class=\"string\">\"huangyuan\"</span>,<span class=\"string\">\"Thread#2\"</span> + mBooleanThreadLocal.get());</div><div class=\"line\">           &#125;</div><div class=\"line\">       &#125;.start();</div></pre></td></tr></table></figure></p>\n<p>　　这样，我们虽然在不同的线程中访问的是同一个ThreadLocal对象，但是他们的值确是不一样的。这是因为不同的线程访问同一个ThreadLocal的get方法，ThreadLocal内部会从各自的线程中取出一个数组，然后再从数组中根据当前ThreadLocal的索引去查找出对应的value值。<br>ThreadLocal是一个泛型类，定义为<code>public class ThreadLocal&lt;T&gt;</code>,首先看ThreadLocal的set方法，如下：<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">set</span><span class=\"params\">(T value)</span> </span>&#123;</div><div class=\"line\">       Thread t = Thread.currentThread();</div><div class=\"line\">       ThreadLocalMap map = getMap(t);</div><div class=\"line\">       <span class=\"keyword\">if</span> (map != <span class=\"keyword\">null</span>)</div><div class=\"line\">           map.set(<span class=\"keyword\">this</span>, value);</div><div class=\"line\">       <span class=\"keyword\">else</span></div><div class=\"line\">           createMap(t, value);</div><div class=\"line\">   &#125;</div></pre></td></tr></table></figure></p>\n<p>　　上面的方法中，首先会通过getMap方法获取ThreadLocalMap（存储线程的ThreadLocal数据），ThreadLocalMap是ThreadLocal类的静态内部类，其内部包含了一个静态内部类Entry，声明如下<code>static class Entry extends WeakReference&lt;ThreadLocal&gt;</code>,ThreadLocalMap类中有一个Entry类型的数组<code>private Entry[] table;</code>,下面是set方法的具体实现：<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">set</span><span class=\"params\">(ThreadLocal key, Object value)</span> </span>&#123;</div><div class=\"line\"></div><div class=\"line\">          <span class=\"comment\">// We don't use a fast path as with get() because it is at</span></div><div class=\"line\">          <span class=\"comment\">// least as common to use set() to create new entries as</span></div><div class=\"line\">          <span class=\"comment\">// it is to replace existing ones, in which case, a fast</span></div><div class=\"line\">          <span class=\"comment\">// path would fail more often than not.</span></div><div class=\"line\"></div><div class=\"line\">          Entry[] tab = table;</div><div class=\"line\">          <span class=\"keyword\">int</span> len = tab.length;</div><div class=\"line\">          <span class=\"keyword\">int</span> i = key.threadLocalHashCode &amp; (len-<span class=\"number\">1</span>);</div><div class=\"line\"></div><div class=\"line\">          <span class=\"keyword\">for</span> (Entry e = tab[i];</div><div class=\"line\">               e != <span class=\"keyword\">null</span>;</div><div class=\"line\">               e = tab[i = nextIndex(i, len)]) &#123;</div><div class=\"line\">              ThreadLocal k = e.get();</div><div class=\"line\"></div><div class=\"line\">              <span class=\"keyword\">if</span> (k == key) &#123;</div><div class=\"line\">                  e.value = value;</div><div class=\"line\">                  <span class=\"keyword\">return</span>;</div><div class=\"line\">              &#125;</div><div class=\"line\"></div><div class=\"line\">              <span class=\"keyword\">if</span> (k == <span class=\"keyword\">null</span>) &#123;</div><div class=\"line\">                  replaceStaleEntry(key, value, i);</div><div class=\"line\">                  <span class=\"keyword\">return</span>;</div><div class=\"line\">              &#125;</div><div class=\"line\">          &#125;</div><div class=\"line\"></div><div class=\"line\">          tab[i] = <span class=\"keyword\">new</span> Entry(key, value);</div><div class=\"line\">          <span class=\"keyword\">int</span> sz = ++size;</div><div class=\"line\">          <span class=\"keyword\">if</span> (!cleanSomeSlots(i, sz) &amp;&amp; sz &gt;= threshold)</div><div class=\"line\">              rehash();</div><div class=\"line\">      &#125;</div></pre></td></tr></table></figure></p>\n<p>ThreadLocal的get方法如下：<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> T <span class=\"title\">get</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">        Thread t = Thread.currentThread();</div><div class=\"line\">        ThreadLocalMap map = getMap(t);</div><div class=\"line\">        <span class=\"keyword\">if</span> (map != <span class=\"keyword\">null</span>) &#123;</div><div class=\"line\">            ThreadLocalMap.Entry e = map.getEntry(<span class=\"keyword\">this</span>);</div><div class=\"line\">            <span class=\"keyword\">if</span> (e != <span class=\"keyword\">null</span>)</div><div class=\"line\">                <span class=\"keyword\">return</span> (T)e.value;</div><div class=\"line\">        &#125;</div><div class=\"line\">        <span class=\"keyword\">return</span> setInitialValue();</div><div class=\"line\">    &#125;</div></pre></td></tr></table></figure></p>\n<p>　　从ThreadLocal的set和get方法可以看出，他们所操作的对象都是当前线程的ThreadLocalMap对象的table数组，因此在不同线程中访问同一个ThreadLocal的set和get方法，他们对ThreadLocal所做的读写操作仅限于各自线程的内部，这就是为什么ThreadLocal可以在多个线程中互不干扰的存储和修改数据。</p>\n<h3 id=\"消息队列的工作原理\"><a href=\"#消息队列的工作原理\" class=\"headerlink\" title=\"消息队列的工作原理\"></a>消息队列的工作原理</h3><p>　　消息队列在Android中指的是MessageQueue，MessageQueue主要包含两个操作，插入和读取。读取操作本身会伴随着删除操作，插入和读取对应的方法分别为enqueueMessage和next，其中enqueueMessage的作用是往消息队列中插入一跳消息，而next的作用是从消息队列中取出一条消息并将其从消息队列中移除，尽管MessageQueue叫消息队列，但是它的内部实现并不是用的队列，实际上它是通过一个单链表的数据结构来维护消息列表，单链表在插入和删除上比较有优势。下面是enqueueMessage的实现：<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">boolean</span> <span class=\"title\">enqueueMessage</span><span class=\"params\">(Message msg, <span class=\"keyword\">long</span> when)</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">if</span> (msg.target == <span class=\"keyword\">null</span>) &#123;</div><div class=\"line\">            <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> IllegalArgumentException(<span class=\"string\">\"Message must have a target.\"</span>);</div><div class=\"line\">        &#125;</div><div class=\"line\">        <span class=\"keyword\">if</span> (msg.isInUse()) &#123;</div><div class=\"line\">            <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> IllegalStateException(msg + <span class=\"string\">\" This message is already in use.\"</span>);</div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\">        <span class=\"keyword\">synchronized</span> (<span class=\"keyword\">this</span>) &#123;</div><div class=\"line\">            <span class=\"keyword\">if</span> (mQuitting) &#123;</div><div class=\"line\">                IllegalStateException e = <span class=\"keyword\">new</span> IllegalStateException(</div><div class=\"line\">                        msg.target + <span class=\"string\">\" sending message to a Handler on a dead thread\"</span>);</div><div class=\"line\">                Log.w(TAG, e.getMessage(), e);</div><div class=\"line\">                msg.recycle();</div><div class=\"line\">                <span class=\"keyword\">return</span> <span class=\"keyword\">false</span>;</div><div class=\"line\">            &#125;</div><div class=\"line\"></div><div class=\"line\">            msg.markInUse();</div><div class=\"line\">            msg.when = when;</div><div class=\"line\">            Message p = mMessages;</div><div class=\"line\">            <span class=\"keyword\">boolean</span> needWake;</div><div class=\"line\">            <span class=\"keyword\">if</span> (p == <span class=\"keyword\">null</span> || when == <span class=\"number\">0</span> || when &lt; p.when) &#123;</div><div class=\"line\">                <span class=\"comment\">// New head, wake up the event queue if blocked.</span></div><div class=\"line\">                msg.next = p;</div><div class=\"line\">                mMessages = msg;</div><div class=\"line\">                needWake = mBlocked;</div><div class=\"line\">            &#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">                <span class=\"comment\">// Inserted within the middle of the queue.  Usually we don't have to wake</span></div><div class=\"line\">                <span class=\"comment\">// up the event queue unless there is a barrier at the head of the queue</span></div><div class=\"line\">                <span class=\"comment\">// and the message is the earliest asynchronous message in the queue.</span></div><div class=\"line\">                needWake = mBlocked &amp;&amp; p.target == <span class=\"keyword\">null</span> &amp;&amp; msg.isAsynchronous();</div><div class=\"line\">                Message prev;</div><div class=\"line\">                <span class=\"keyword\">for</span> (;;) &#123;</div><div class=\"line\">                    prev = p;</div><div class=\"line\">                    p = p.next;</div><div class=\"line\">                    <span class=\"keyword\">if</span> (p == <span class=\"keyword\">null</span> || when &lt; p.when) &#123;</div><div class=\"line\">                        <span class=\"keyword\">break</span>;</div><div class=\"line\">                    &#125;</div><div class=\"line\">                    <span class=\"keyword\">if</span> (needWake &amp;&amp; p.isAsynchronous()) &#123;</div><div class=\"line\">                        needWake = <span class=\"keyword\">false</span>;</div><div class=\"line\">                    &#125;</div><div class=\"line\">                &#125;</div><div class=\"line\">                msg.next = p; <span class=\"comment\">// invariant: p == prev.next</span></div><div class=\"line\">                prev.next = msg;</div><div class=\"line\">            &#125;</div><div class=\"line\"></div><div class=\"line\">            <span class=\"comment\">// We can assume mPtr != 0 because mQuitting is false.</span></div><div class=\"line\">            <span class=\"keyword\">if</span> (needWake) &#123;</div><div class=\"line\">                nativeWake(mPtr);</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;</div><div class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">true</span>;</div><div class=\"line\">    &#125;</div></pre></td></tr></table></figure></p>\n<p>从其实现来安，主要操作其实就是单链表的插入操作。<br>next的实现如下：<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div><div class=\"line\">71</div><div class=\"line\">72</div><div class=\"line\">73</div><div class=\"line\">74</div><div class=\"line\">75</div><div class=\"line\">76</div><div class=\"line\">77</div><div class=\"line\">78</div><div class=\"line\">79</div><div class=\"line\">80</div><div class=\"line\">81</div><div class=\"line\">82</div><div class=\"line\">83</div><div class=\"line\">84</div><div class=\"line\">85</div><div class=\"line\">86</div><div class=\"line\">87</div><div class=\"line\">88</div><div class=\"line\">89</div><div class=\"line\">90</div><div class=\"line\">91</div><div class=\"line\">92</div><div class=\"line\">93</div><div class=\"line\">94</div><div class=\"line\">95</div><div class=\"line\">96</div><div class=\"line\">97</div><div class=\"line\">98</div><div class=\"line\">99</div><div class=\"line\">100</div><div class=\"line\">101</div><div class=\"line\">102</div><div class=\"line\">103</div><div class=\"line\">104</div><div class=\"line\">105</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\">Message <span class=\"title\">next</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">        <span class=\"comment\">// Return here if the message loop has already quit and been disposed.</span></div><div class=\"line\">        <span class=\"comment\">// This can happen if the application tries to restart a looper after quit</span></div><div class=\"line\">        <span class=\"comment\">// which is not supported.</span></div><div class=\"line\">        <span class=\"keyword\">final</span> <span class=\"keyword\">long</span> ptr = mPtr;</div><div class=\"line\">        <span class=\"keyword\">if</span> (ptr == <span class=\"number\">0</span>) &#123;</div><div class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">null</span>;</div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\">        <span class=\"keyword\">int</span> pendingIdleHandlerCount = -<span class=\"number\">1</span>; <span class=\"comment\">// -1 only during first iteration</span></div><div class=\"line\">        <span class=\"keyword\">int</span> nextPollTimeoutMillis = <span class=\"number\">0</span>;</div><div class=\"line\">        <span class=\"keyword\">for</span> (;;) &#123;</div><div class=\"line\">            <span class=\"keyword\">if</span> (nextPollTimeoutMillis != <span class=\"number\">0</span>) &#123;</div><div class=\"line\">                Binder.flushPendingCommands();</div><div class=\"line\">            &#125;</div><div class=\"line\"></div><div class=\"line\">            nativePollOnce(ptr, nextPollTimeoutMillis);</div><div class=\"line\"></div><div class=\"line\">            <span class=\"keyword\">synchronized</span> (<span class=\"keyword\">this</span>) &#123;</div><div class=\"line\">                <span class=\"comment\">// Try to retrieve the next message.  Return if found.</span></div><div class=\"line\">                <span class=\"keyword\">final</span> <span class=\"keyword\">long</span> now = SystemClock.uptimeMillis();</div><div class=\"line\">                Message prevMsg = <span class=\"keyword\">null</span>;</div><div class=\"line\">                Message msg = mMessages;</div><div class=\"line\">                <span class=\"keyword\">if</span> (msg != <span class=\"keyword\">null</span> &amp;&amp; msg.target == <span class=\"keyword\">null</span>) &#123;</div><div class=\"line\">                    <span class=\"comment\">// Stalled by a barrier.  Find the next asynchronous message in the queue.</span></div><div class=\"line\">                    do &#123;</div><div class=\"line\">                        prevMsg = msg;</div><div class=\"line\">                        msg = msg.next;</div><div class=\"line\">                    &#125; <span class=\"keyword\">while</span> (msg != <span class=\"keyword\">null</span> &amp;&amp; !msg.isAsynchronous());</div><div class=\"line\">                &#125;</div><div class=\"line\">                <span class=\"keyword\">if</span> (msg != <span class=\"keyword\">null</span>) &#123;</div><div class=\"line\">                    <span class=\"keyword\">if</span> (now &lt; msg.when) &#123;</div><div class=\"line\">                        <span class=\"comment\">// Next message is not ready.  Set a timeout to wake up when it is ready.</span></div><div class=\"line\">                        nextPollTimeoutMillis = (<span class=\"keyword\">int</span>) Math.min(msg.when - now, Integer.MAX_VALUE);</div><div class=\"line\">                    &#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">                        <span class=\"comment\">// Got a message.</span></div><div class=\"line\">                        mBlocked = <span class=\"keyword\">false</span>;</div><div class=\"line\">                        <span class=\"keyword\">if</span> (prevMsg != <span class=\"keyword\">null</span>) &#123;</div><div class=\"line\">                            prevMsg.next = msg.next;</div><div class=\"line\">                        &#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">                            mMessages = msg.next;</div><div class=\"line\">                        &#125;</div><div class=\"line\">                        msg.next = <span class=\"keyword\">null</span>;</div><div class=\"line\">                        <span class=\"keyword\">if</span> (DEBUG) Log.v(TAG, <span class=\"string\">\"Returning message: \"</span> + msg);</div><div class=\"line\">                        msg.markInUse();</div><div class=\"line\">                        <span class=\"keyword\">return</span> msg;</div><div class=\"line\">                    &#125;</div><div class=\"line\">                &#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">                    <span class=\"comment\">// No more messages.</span></div><div class=\"line\">                    nextPollTimeoutMillis = -<span class=\"number\">1</span>;</div><div class=\"line\">                &#125;</div><div class=\"line\"></div><div class=\"line\">                <span class=\"comment\">// Process the quit message now that all pending messages have been handled.</span></div><div class=\"line\">                <span class=\"keyword\">if</span> (mQuitting) &#123;</div><div class=\"line\">                    dispose();</div><div class=\"line\">                    <span class=\"keyword\">return</span> <span class=\"keyword\">null</span>;</div><div class=\"line\">                &#125;</div><div class=\"line\"></div><div class=\"line\">                <span class=\"comment\">// If first time idle, then get the number of idlers to run.</span></div><div class=\"line\">                <span class=\"comment\">// Idle handles only run if the queue is empty or if the first message</span></div><div class=\"line\">                <span class=\"comment\">// in the queue (possibly a barrier) is due to be handled in the future.</span></div><div class=\"line\">                <span class=\"keyword\">if</span> (pendingIdleHandlerCount &lt; <span class=\"number\">0</span></div><div class=\"line\">                        &amp;&amp; (mMessages == <span class=\"keyword\">null</span> || now &lt; mMessages.when)) &#123;</div><div class=\"line\">                    pendingIdleHandlerCount = mIdleHandlers.size();</div><div class=\"line\">                &#125;</div><div class=\"line\">                <span class=\"keyword\">if</span> (pendingIdleHandlerCount &lt;= <span class=\"number\">0</span>) &#123;</div><div class=\"line\">                    <span class=\"comment\">// No idle handlers to run.  Loop and wait some more.</span></div><div class=\"line\">                    mBlocked = <span class=\"keyword\">true</span>;</div><div class=\"line\">                    <span class=\"keyword\">continue</span>;</div><div class=\"line\">                &#125;</div><div class=\"line\"></div><div class=\"line\">                <span class=\"keyword\">if</span> (mPendingIdleHandlers == <span class=\"keyword\">null</span>) &#123;</div><div class=\"line\">                    mPendingIdleHandlers = <span class=\"keyword\">new</span> IdleHandler[Math.max(pendingIdleHandlerCount, <span class=\"number\">4</span>)];</div><div class=\"line\">                &#125;</div><div class=\"line\">                mPendingIdleHandlers = mIdleHandlers.toArray(mPendingIdleHandlers);</div><div class=\"line\">            &#125;</div><div class=\"line\"></div><div class=\"line\">            <span class=\"comment\">// Run the idle handlers.</span></div><div class=\"line\">            <span class=\"comment\">// We only ever reach this code block during the first iteration.</span></div><div class=\"line\">            <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; pendingIdleHandlerCount; i++) &#123;</div><div class=\"line\">                <span class=\"keyword\">final</span> IdleHandler idler = mPendingIdleHandlers[i];</div><div class=\"line\">                mPendingIdleHandlers[i] = <span class=\"keyword\">null</span>; <span class=\"comment\">// release the reference to the handler</span></div><div class=\"line\"></div><div class=\"line\">                <span class=\"keyword\">boolean</span> keep = <span class=\"keyword\">false</span>;</div><div class=\"line\">                <span class=\"keyword\">try</span> &#123;</div><div class=\"line\">                    keep = idler.queueIdle();</div><div class=\"line\">                &#125; <span class=\"keyword\">catch</span> (Throwable t) &#123;</div><div class=\"line\">                    Log.wtf(TAG, <span class=\"string\">\"IdleHandler threw exception\"</span>, t);</div><div class=\"line\">                &#125;</div><div class=\"line\"></div><div class=\"line\">                <span class=\"keyword\">if</span> (!keep) &#123;</div><div class=\"line\">                    <span class=\"keyword\">synchronized</span> (<span class=\"keyword\">this</span>) &#123;</div><div class=\"line\">                        mIdleHandlers.remove(idler);</div><div class=\"line\">                    &#125;</div><div class=\"line\">                &#125;</div><div class=\"line\">            &#125;</div><div class=\"line\"></div><div class=\"line\">            <span class=\"comment\">// Reset the idle handler count to 0 so we do not run them again.</span></div><div class=\"line\">            pendingIdleHandlerCount = <span class=\"number\">0</span>;</div><div class=\"line\"></div><div class=\"line\">            <span class=\"comment\">// While calling an idle handler, a new message could have been delivered</span></div><div class=\"line\">            <span class=\"comment\">// so go back and look again for a pending message without waiting.</span></div><div class=\"line\">            nextPollTimeoutMillis = <span class=\"number\">0</span>;</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div></pre></td></tr></table></figure></p>\n<p>可以返现next方法是一个无线循环的方法，如果消息队列为空，那么next方法会一直阻塞在这里，当有消息到来时，next方法会返回这条消息并将其从单链表中移除</p>\n<h3 id=\"Looper的工作原理\"><a href=\"#Looper的工作原理\" class=\"headerlink\" title=\"Looper的工作原理\"></a>Looper的工作原理</h3><p>　　Looper在Android的消息机制中扮演者消息循环的角色，具体来说就是它会不停地从MessageQueue中查看是否有新消息，如果有新消息就会立刻处理，否则就一直阻塞在那里。首先看一下它的构造方法，在构造中它会创建一个MessageQueue也就是消息队列，然后将当前线程的对象保存起来，如下：<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> <span class=\"title\">Looper</span><span class=\"params\">(<span class=\"keyword\">boolean</span> quitAllowed)</span> </span>&#123;</div><div class=\"line\">      mQueue = <span class=\"keyword\">new</span> MessageQueue(quitAllowed);</div><div class=\"line\">      mThread = Thread.currentThread();</div><div class=\"line\">  &#125;</div></pre></td></tr></table></figure></p>\n<p>　　Handler的工作需要Looper，没有Looper的线程就会报错，我们可以通过Looper.prepare()即可为当前线程创建一个Looper，接着通过Looper.loop()来开启消息循环。Looper除了prepare方法外，还提供了prepareMainLoop方法，这个方法主要是给主线程也就是ActivityThread创建Looper使用的，其本质也是通过prepare方法来实现的。由于主线程的Looper比较特殊，所有Looper提供了一个getMainLooper方法，通过它可以在任何地方获取到主线程的Looper。Looper也是可以退出的，Looper提供了quit个quitSafely来退出一个Looper，二者的区别是：quit会直接突出Looper，而quitSafely只是设定一个退出标记，然后把消息队列中的已有消息处理完毕后才安全的退出。Looper退出后，通过Handler发送的消息会失败，这个时候Handler的send方法会返回false。在子线程中，如果手动为其创建了Looper，那么在所有的事情完成以后应该调用quit方法来总之消息循环，否则这个子线程就会一直处于等待的状态，而如果退出Looper以后，这个县城就会立刻终止，因此甲乙不需要的时候终止Looper。<br> Looper最重要的一个方法是loop方法，只有调用了loop后，消息循环系统才会真正的起作用，实现如下：<br> <figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">/**</div><div class=\"line\">   * Run the message queue in this thread. Be sure to call</div><div class=\"line\">   * &#123;<span class=\"doctag\">@link</span> #quit()&#125; to end the loop.</div><div class=\"line\">   */</span></div><div class=\"line\">  <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">loop</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">      <span class=\"keyword\">final</span> Looper me = myLooper();</div><div class=\"line\">      <span class=\"keyword\">if</span> (me == <span class=\"keyword\">null</span>) &#123;</div><div class=\"line\">          <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> RuntimeException(<span class=\"string\">\"No Looper; Looper.prepare() wasn't called on this thread.\"</span>);</div><div class=\"line\">      &#125;</div><div class=\"line\">      <span class=\"keyword\">final</span> MessageQueue queue = me.mQueue;</div><div class=\"line\"></div><div class=\"line\">      <span class=\"comment\">// Make sure the identity of this thread is that of the local process,</span></div><div class=\"line\">      <span class=\"comment\">// and keep track of what that identity token actually is.</span></div><div class=\"line\">      Binder.clearCallingIdentity();</div><div class=\"line\">      <span class=\"keyword\">final</span> <span class=\"keyword\">long</span> ident = Binder.clearCallingIdentity();</div><div class=\"line\"></div><div class=\"line\">      <span class=\"keyword\">for</span> (;;) &#123;</div><div class=\"line\">          Message msg = queue.next(); <span class=\"comment\">// might block</span></div><div class=\"line\">          <span class=\"keyword\">if</span> (msg == <span class=\"keyword\">null</span>) &#123;</div><div class=\"line\">              <span class=\"comment\">// No message indicates that the message queue is quitting.</span></div><div class=\"line\">              <span class=\"keyword\">return</span>;</div><div class=\"line\">          &#125;</div><div class=\"line\"></div><div class=\"line\">          <span class=\"comment\">// This must be in a local variable, in case a UI event sets the logger</span></div><div class=\"line\">          <span class=\"keyword\">final</span> Printer logging = me.mLogging;</div><div class=\"line\">          <span class=\"keyword\">if</span> (logging != <span class=\"keyword\">null</span>) &#123;</div><div class=\"line\">              logging.println(<span class=\"string\">\"&gt;&gt;&gt;&gt;&gt; Dispatching to \"</span> + msg.target + <span class=\"string\">\" \"</span> +</div><div class=\"line\">                      msg.callback + <span class=\"string\">\": \"</span> + msg.what);</div><div class=\"line\">          &#125;</div><div class=\"line\"></div><div class=\"line\">          <span class=\"keyword\">final</span> <span class=\"keyword\">long</span> traceTag = me.mTraceTag;</div><div class=\"line\">          <span class=\"keyword\">if</span> (traceTag != <span class=\"number\">0</span>) &#123;</div><div class=\"line\">              Trace.traceBegin(traceTag, msg.target.getTraceName(msg));</div><div class=\"line\">          &#125;</div><div class=\"line\">          <span class=\"keyword\">try</span> &#123;</div><div class=\"line\">              msg.target.dispatchMessage(msg);</div><div class=\"line\">          &#125; <span class=\"keyword\">finally</span> &#123;</div><div class=\"line\">              <span class=\"keyword\">if</span> (traceTag != <span class=\"number\">0</span>) &#123;</div><div class=\"line\">                  Trace.traceEnd(traceTag);</div><div class=\"line\">              &#125;</div><div class=\"line\">          &#125;</div><div class=\"line\"></div><div class=\"line\">          <span class=\"keyword\">if</span> (logging != <span class=\"keyword\">null</span>) &#123;</div><div class=\"line\">              logging.println(<span class=\"string\">\"&lt;&lt;&lt;&lt;&lt; Finished to \"</span> + msg.target + <span class=\"string\">\" \"</span> + msg.callback);</div><div class=\"line\">          &#125;</div><div class=\"line\"></div><div class=\"line\">          <span class=\"comment\">// Make sure that during the course of dispatching the</span></div><div class=\"line\">          <span class=\"comment\">// identity of the thread wasn't corrupted.</span></div><div class=\"line\">          <span class=\"keyword\">final</span> <span class=\"keyword\">long</span> newIdent = Binder.clearCallingIdentity();</div><div class=\"line\">          <span class=\"keyword\">if</span> (ident != newIdent) &#123;</div><div class=\"line\">              Log.wtf(TAG, <span class=\"string\">\"Thread identity changed from 0x\"</span></div><div class=\"line\">                      + Long.toHexString(ident) + <span class=\"string\">\" to 0x\"</span></div><div class=\"line\">                      + Long.toHexString(newIdent) + <span class=\"string\">\" while dispatching to \"</span></div><div class=\"line\">                      + msg.target.getClass().getName() + <span class=\"string\">\" \"</span></div><div class=\"line\">                      + msg.callback + <span class=\"string\">\" what=\"</span> + msg.what);</div><div class=\"line\">          &#125;</div><div class=\"line\"></div><div class=\"line\">          msg.recycleUnchecked();</div><div class=\"line\">      &#125;</div><div class=\"line\">  &#125;</div></pre></td></tr></table></figure></p>\n<p> 　　loop方法是一个死循环，唯一跳出循环的方式是MessageQueue的next方法返回了null，当Looper的quit方法被调用时，Looper就会通知消息队列退出，当消息队列被标记为退出状态时，它的next方法就会返回null，也就是说，Looper必须退出，否则loop方法就会无限循环下去，loop方法会调用MessageQueue的next方法来获取新消息，而next方法是一个阻塞操作，当没有消息时，next方法会一直阻塞在那里，这也导致loop方法一直阻塞在那里，如果MessageQueue的next方法返回了新消息，Looper就会处理这条消息，  msg.target.dispatchMessage(msg)，这里的  msg.target是发送这条消息的handler对象，这样Handler发送的消息最终又交个它的  dispatchMessage(msg);方法来处理了，但是这里不同的是，Handler的dispatchMessahe方法是在创建Handler时所使用的Looper中执行的，这样就成功的将代码逻辑切换到指定的线程中去执行了。</p>\n<h3 id=\"Handler的工作原理\"><a href=\"#Handler的工作原理\" class=\"headerlink\" title=\"Handler的工作原理\"></a>Handler的工作原理</h3><p> Handler的工作主要包含消息的发送和接收过程。消息的发送可以通过post的一系列方法以及send的一系列方法来实现，post的一系列方法最终是通过send的一列方法来实现的。发送一条消息的典型过程如下：<br> <figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div></pre></td><td class=\"code\"><pre><div class=\"line\"> <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">final</span> <span class=\"keyword\">boolean</span> <span class=\"title\">sendMessage</span><span class=\"params\">(Message msg)</span></div><div class=\"line\">   </span>&#123;</div><div class=\"line\">       <span class=\"keyword\">return</span> sendMessageDelayed(msg, <span class=\"number\">0</span>);</div><div class=\"line\">   &#125;</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">final</span> <span class=\"keyword\">boolean</span> <span class=\"title\">sendMessageDelayed</span><span class=\"params\">(Message msg, <span class=\"keyword\">long</span> delayMillis)</span></div><div class=\"line\">   </span>&#123;</div><div class=\"line\">       <span class=\"keyword\">if</span> (delayMillis &lt; <span class=\"number\">0</span>) &#123;</div><div class=\"line\">           delayMillis = <span class=\"number\">0</span>;</div><div class=\"line\">       &#125;</div><div class=\"line\">       <span class=\"keyword\">return</span> sendMessageAtTime(msg, SystemClock.uptimeMillis() + delayMillis);</div><div class=\"line\">   &#125;</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">sendMessageAtTime</span><span class=\"params\">(Message msg, <span class=\"keyword\">long</span> uptimeMillis)</span> </span>&#123;</div><div class=\"line\">       MessageQueue queue = mQueue;</div><div class=\"line\">       <span class=\"keyword\">if</span> (queue == <span class=\"keyword\">null</span>) &#123;</div><div class=\"line\">           RuntimeException e = <span class=\"keyword\">new</span> RuntimeException(</div><div class=\"line\">                   <span class=\"keyword\">this</span> + <span class=\"string\">\" sendMessageAtTime() called with no mQueue\"</span>);</div><div class=\"line\">           Log.w(<span class=\"string\">\"Looper\"</span>, e.getMessage(), e);</div><div class=\"line\">           <span class=\"keyword\">return</span> <span class=\"keyword\">false</span>;</div><div class=\"line\">       &#125;</div><div class=\"line\">       <span class=\"keyword\">return</span> enqueueMessage(queue, msg, uptimeMillis);</div><div class=\"line\">   &#125;</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">boolean</span> <span class=\"title\">enqueueMessage</span><span class=\"params\">(MessageQueue queue, Message msg, <span class=\"keyword\">long</span> uptimeMillis)</span> </span>&#123;</div><div class=\"line\">       msg.target = <span class=\"keyword\">this</span>;</div><div class=\"line\">       <span class=\"keyword\">if</span> (mAsynchronous) &#123;</div><div class=\"line\">           msg.setAsynchronous(<span class=\"keyword\">true</span>);</div><div class=\"line\">       &#125;</div><div class=\"line\">       <span class=\"keyword\">return</span> queue.enqueueMessage(msg, uptimeMillis);</div><div class=\"line\">   &#125;</div></pre></td></tr></table></figure></p>\n<p> 　　可以发现，Handler发送消息的过程仅仅是向消息队列中插入了一条消息，MessageQueue的next方法就会返回这条消息给Looper，Looper收到消息后就开始处理了，最终消息由Looper交由Handler处理，即Handler的dispatchMessage方法会被调用，这时Handler就是进入了处理消息的阶段。dispatchMessage的实现如下：<br> <figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">dispatchMessage</span><span class=\"params\">(Message msg)</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">if</span> (msg.callback != <span class=\"keyword\">null</span>) &#123;</div><div class=\"line\">        handleCallback(msg);</div><div class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">        <span class=\"keyword\">if</span> (mCallback != <span class=\"keyword\">null</span>) &#123;</div><div class=\"line\">            <span class=\"keyword\">if</span> (mCallback.handleMessage(msg)) &#123;</div><div class=\"line\">                <span class=\"keyword\">return</span>;</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;</div><div class=\"line\">        handleMessage(msg);</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p> Handler处理消息的过程如下：</p>\n<ol>\n<li><p>检查Message的callback是否为null，不为null就通过handleCallback来处理消息，Message的callback是一个Runnable对象，实际上就是Handler的post方法所传递的Runnable参数。handleCallback的逻辑如下：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">handleCallback</span><span class=\"params\">(Message message)</span> </span>&#123;</div><div class=\"line\">       message.callback.run();</div><div class=\"line\">   &#125;</div></pre></td></tr></table></figure>\n</li>\n<li><p>其次，检查mCallback是否为null，不为null就调用没CallBack的HandlerMessage方法来处理消息，Callback是个接口，它的定义如下：</p>\n<pre><code class=\"java\"><span class=\"comment\">/**\n * Callback interface you can use when instantiating a Handler to avoid\n * having to implement your own subclass of Handler.\n *\n * <span class=\"doctag\">@param</span> msg A {<span class=\"doctag\">@link</span> android.os.Message Message} object\n * <span class=\"doctag\">@return</span> True if no further handling is desired\n */</span>\n<span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">interface</span> <span class=\"title\">Callback</span> </span>{\n    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">handleMessage</span><span class=\"params\">(Message msg)</span></span>;\n}\n</code></pre>\n<p>通过Callback可以采用如下方式来创建Handler对象：Handler handler = new Handler(callback)。</p>\n</li>\n</ol>\n<ol>\n<li>最后，调用Handler的handleMessahe方法来处理消息。</li>\n</ol>\n<hr>\n<p>以上</p>"},{"title":"Android中使用WebSocket-2","date":"2017-12-26T08:37:37.000Z","_content":"上一篇提到在Android中使用WebSocket和服务端进行通信。是直接在Activity里面进行操作的这样会保持一个长连接，一个应用里面没必要也不应该保持多个长连接，所以我们可以把WebSocket客户端挪到Service里面，使用广播和Activity进行通信。\n<!-- more -->\n1. APP端：\n继承`BroadcastReceiver`，重写`public void onReceive(Context context, Intent intent)`方法，在该方法中进行业务处理。\n``` java\n\npublic class MainActivity extends AppCompatActivity implements View.OnClickListener {\n\n    private TextView showMessage;\n    private EditText editText;\n    private StringBuilder sb = new StringBuilder();\n    private WebSocketBroadcastReceiver webSocketBroadcastReceiver;\n\n    @Override\n    protected void onCreate(Bundle savedInstanceState) {\n        super.onCreate(savedInstanceState);\n        setContentView(R.layout.activity_main);\n        Intent intent = new Intent(this, WebSocketService.class);\n        startService(intent);\n        showMessage = findViewById(R.id.show_message);\n        editText = findViewById(R.id.edit_text);\n        findViewById(R.id.send).setOnClickListener(this);\n        webSocketBroadcastReceiver = new WebSocketBroadcastReceiver();\n        IntentFilter intentFilter = new IntentFilter(\"web_socket\");\n        registerReceiver(webSocketBroadcastReceiver, intentFilter);\n    }\n\n    @Override\n    public void onClick(View v) {\n        switch (v.getId()) {\n            case R.id.send:\n\n                sb.append(\"客户端发送消息：\");\n                sb.append(new Date().toLocaleString());\n                sb.append(\"\\n\");\n                sb.append(editText.getText().toString().trim());\n                sb.append(\"\\n\");\n                showMessage.setText(sb.toString());\n                Intent intent = new Intent(this, WebSocketService.class);\n                intent.putExtra(\"message\", editText.getText().toString().trim());\n                startService(intent);\n                editText.setText(\"\");\n                break;\n            default:\n                break;\n        }\n    }\n\n    class WebSocketBroadcastReceiver extends BroadcastReceiver {\n\n        @Override\n        public void onReceive(Context context, Intent intent) {\n            String message = intent.getStringExtra(\"message\");\n            sb.append(\"服务端返回消息：\");\n            sb.append(new Date().toLocaleString());\n            sb.append(\"\\n\");\n            sb.append(message);\n            sb.append(\"\\n\");\n            showMessage.setText(sb.toString());\n\n    }\n}\n\n    @Override\n    protected void onDestroy() {\n        Intent intent = new Intent(this, WebSocketService.class);\n        stopService(intent);\n        unregisterReceiver(webSocketBroadcastReceiver);\n        super.onDestroy();\n    }\n}\n```\n2. Service\n继承`Service`,在`onCreate()`方法里面创建`WebSocketClient`并和服务端进行连接。在`AndroidManifest.xml`中注册服务。\n``` java\n\npublic class WebSocketService extends Service {\n    private IoTWebSocketClient ioTWebSocketClient;\n    private Intent broadcastIntent;\n\n    @Override\n    public IBinder onBind(Intent intent) {\n        return null;\n    }\n\n    @Override\n    public void onCreate() {\n        super.onCreate();\n        broadcastIntent = new Intent();\n        broadcastIntent.setAction(\"web_socket\");\n        ioTWebSocketClient = new IoTWebSocketClient(URI.create(\"ws://192.168.1.64:8887\"));\n        ioTWebSocketClient.connect();\n    }\n\n    @Override\n    public int onStartCommand(Intent intent, int flags, int startId) {\n        String message = intent.getStringExtra(\"message\");\n        if(ioTWebSocketClient.isClosing() || ioTWebSocketClient.isClosed()){\n            stopSelf();\n            return super.onStartCommand(intent, flags, startId);\n        }\n        try {\n            ioTWebSocketClient.send(message);\n        }catch (Exception e){\n            e.printStackTrace();\n        }\n        return super.onStartCommand(intent, flags, startId);\n    }\n\n    @Override\n    public void onDestroy() {\n        ioTWebSocketClient.close();\n        ioTWebSocketClient = null;\n        super.onDestroy();\n    }\n\n    class IoTWebSocketClient extends WebSocketClient {\n\n        IoTWebSocketClient(URI serverUri) {\n            super(serverUri);\n        }\n\n        @Override\n        public void onOpen(ServerHandshake handshakedata) {\n        }\n\n        @Override\n        public void onMessage(String message) {\n            broadcastIntent.putExtra(\"message\", message);\n            WebSocketService.this.sendBroadcast(broadcastIntent);\n        }\n\n        @Override\n        public void onClose(int code, String reason, boolean remote) {\n        }\n\n        @Override\n        public void onError(Exception ex) {\n            stopSelf();\n        }\n    }\n}\n```\n在`onStartCommand()`方法里面，对发送消息方法的调用进行异常捕获，是因为这时候可能服务端重启或者服务端还没有准备好，这是发送消息会抛出异常，可以根据自己的业务需求进行改进。\n\n----\n以上","source":"_posts/Android中使用WebSocket-2.md","raw":"---\ntitle: Android中使用WebSocket-2\ndate: 2017-12-26 16:37:37\ntags: [Andorid,WebSocket]\n---\n上一篇提到在Android中使用WebSocket和服务端进行通信。是直接在Activity里面进行操作的这样会保持一个长连接，一个应用里面没必要也不应该保持多个长连接，所以我们可以把WebSocket客户端挪到Service里面，使用广播和Activity进行通信。\n<!-- more -->\n1. APP端：\n继承`BroadcastReceiver`，重写`public void onReceive(Context context, Intent intent)`方法，在该方法中进行业务处理。\n``` java\n\npublic class MainActivity extends AppCompatActivity implements View.OnClickListener {\n\n    private TextView showMessage;\n    private EditText editText;\n    private StringBuilder sb = new StringBuilder();\n    private WebSocketBroadcastReceiver webSocketBroadcastReceiver;\n\n    @Override\n    protected void onCreate(Bundle savedInstanceState) {\n        super.onCreate(savedInstanceState);\n        setContentView(R.layout.activity_main);\n        Intent intent = new Intent(this, WebSocketService.class);\n        startService(intent);\n        showMessage = findViewById(R.id.show_message);\n        editText = findViewById(R.id.edit_text);\n        findViewById(R.id.send).setOnClickListener(this);\n        webSocketBroadcastReceiver = new WebSocketBroadcastReceiver();\n        IntentFilter intentFilter = new IntentFilter(\"web_socket\");\n        registerReceiver(webSocketBroadcastReceiver, intentFilter);\n    }\n\n    @Override\n    public void onClick(View v) {\n        switch (v.getId()) {\n            case R.id.send:\n\n                sb.append(\"客户端发送消息：\");\n                sb.append(new Date().toLocaleString());\n                sb.append(\"\\n\");\n                sb.append(editText.getText().toString().trim());\n                sb.append(\"\\n\");\n                showMessage.setText(sb.toString());\n                Intent intent = new Intent(this, WebSocketService.class);\n                intent.putExtra(\"message\", editText.getText().toString().trim());\n                startService(intent);\n                editText.setText(\"\");\n                break;\n            default:\n                break;\n        }\n    }\n\n    class WebSocketBroadcastReceiver extends BroadcastReceiver {\n\n        @Override\n        public void onReceive(Context context, Intent intent) {\n            String message = intent.getStringExtra(\"message\");\n            sb.append(\"服务端返回消息：\");\n            sb.append(new Date().toLocaleString());\n            sb.append(\"\\n\");\n            sb.append(message);\n            sb.append(\"\\n\");\n            showMessage.setText(sb.toString());\n\n    }\n}\n\n    @Override\n    protected void onDestroy() {\n        Intent intent = new Intent(this, WebSocketService.class);\n        stopService(intent);\n        unregisterReceiver(webSocketBroadcastReceiver);\n        super.onDestroy();\n    }\n}\n```\n2. Service\n继承`Service`,在`onCreate()`方法里面创建`WebSocketClient`并和服务端进行连接。在`AndroidManifest.xml`中注册服务。\n``` java\n\npublic class WebSocketService extends Service {\n    private IoTWebSocketClient ioTWebSocketClient;\n    private Intent broadcastIntent;\n\n    @Override\n    public IBinder onBind(Intent intent) {\n        return null;\n    }\n\n    @Override\n    public void onCreate() {\n        super.onCreate();\n        broadcastIntent = new Intent();\n        broadcastIntent.setAction(\"web_socket\");\n        ioTWebSocketClient = new IoTWebSocketClient(URI.create(\"ws://192.168.1.64:8887\"));\n        ioTWebSocketClient.connect();\n    }\n\n    @Override\n    public int onStartCommand(Intent intent, int flags, int startId) {\n        String message = intent.getStringExtra(\"message\");\n        if(ioTWebSocketClient.isClosing() || ioTWebSocketClient.isClosed()){\n            stopSelf();\n            return super.onStartCommand(intent, flags, startId);\n        }\n        try {\n            ioTWebSocketClient.send(message);\n        }catch (Exception e){\n            e.printStackTrace();\n        }\n        return super.onStartCommand(intent, flags, startId);\n    }\n\n    @Override\n    public void onDestroy() {\n        ioTWebSocketClient.close();\n        ioTWebSocketClient = null;\n        super.onDestroy();\n    }\n\n    class IoTWebSocketClient extends WebSocketClient {\n\n        IoTWebSocketClient(URI serverUri) {\n            super(serverUri);\n        }\n\n        @Override\n        public void onOpen(ServerHandshake handshakedata) {\n        }\n\n        @Override\n        public void onMessage(String message) {\n            broadcastIntent.putExtra(\"message\", message);\n            WebSocketService.this.sendBroadcast(broadcastIntent);\n        }\n\n        @Override\n        public void onClose(int code, String reason, boolean remote) {\n        }\n\n        @Override\n        public void onError(Exception ex) {\n            stopSelf();\n        }\n    }\n}\n```\n在`onStartCommand()`方法里面，对发送消息方法的调用进行异常捕获，是因为这时候可能服务端重启或者服务端还没有准备好，这是发送消息会抛出异常，可以根据自己的业务需求进行改进。\n\n----\n以上","slug":"Android中使用WebSocket-2","published":1,"updated":"2017-12-30T13:13:07.219Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjbvyt3ud0005scdgzo516m1i","content":"<p>上一篇提到在Android中使用WebSocket和服务端进行通信。是直接在Activity里面进行操作的这样会保持一个长连接，一个应用里面没必要也不应该保持多个长连接，所以我们可以把WebSocket客户端挪到Service里面，使用广播和Activity进行通信。<br><a id=\"more\"></a></p>\n<ol>\n<li><p>APP端：<br>继承<code>BroadcastReceiver</code>，重写<code>public void onReceive(Context context, Intent intent)</code>方法，在该方法中进行业务处理。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MainActivity</span> <span class=\"keyword\">extends</span> <span class=\"title\">AppCompatActivity</span> <span class=\"keyword\">implements</span> <span class=\"title\">View</span>.<span class=\"title\">OnClickListener</span> </span>&#123;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">private</span> TextView showMessage;</div><div class=\"line\">    <span class=\"keyword\">private</span> EditText editText;</div><div class=\"line\">    <span class=\"keyword\">private</span> StringBuilder sb = <span class=\"keyword\">new</span> StringBuilder();</div><div class=\"line\">    <span class=\"keyword\">private</span> WebSocketBroadcastReceiver webSocketBroadcastReceiver;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"meta\">@Override</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title\">onCreate</span><span class=\"params\">(Bundle savedInstanceState)</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">super</span>.onCreate(savedInstanceState);</div><div class=\"line\">        setContentView(R.layout.activity_main);</div><div class=\"line\">        Intent intent = <span class=\"keyword\">new</span> Intent(<span class=\"keyword\">this</span>, WebSocketService.class);</div><div class=\"line\">        startService(intent);</div><div class=\"line\">        showMessage = findViewById(R.id.show_message);</div><div class=\"line\">        editText = findViewById(R.id.edit_text);</div><div class=\"line\">        findViewById(R.id.send).setOnClickListener(<span class=\"keyword\">this</span>);</div><div class=\"line\">        webSocketBroadcastReceiver = <span class=\"keyword\">new</span> WebSocketBroadcastReceiver();</div><div class=\"line\">        IntentFilter intentFilter = <span class=\"keyword\">new</span> IntentFilter(<span class=\"string\">\"web_socket\"</span>);</div><div class=\"line\">        registerReceiver(webSocketBroadcastReceiver, intentFilter);</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"meta\">@Override</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onClick</span><span class=\"params\">(View v)</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">switch</span> (v.getId()) &#123;</div><div class=\"line\">            <span class=\"keyword\">case</span> R.id.send:</div><div class=\"line\"></div><div class=\"line\">                sb.append(<span class=\"string\">\"客户端发送消息：\"</span>);</div><div class=\"line\">                sb.append(<span class=\"keyword\">new</span> Date().toLocaleString());</div><div class=\"line\">                sb.append(<span class=\"string\">\"\\n\"</span>);</div><div class=\"line\">                sb.append(editText.getText().toString().trim());</div><div class=\"line\">                sb.append(<span class=\"string\">\"\\n\"</span>);</div><div class=\"line\">                showMessage.setText(sb.toString());</div><div class=\"line\">                Intent intent = <span class=\"keyword\">new</span> Intent(<span class=\"keyword\">this</span>, WebSocketService.class);</div><div class=\"line\">                intent.putExtra(<span class=\"string\">\"message\"</span>, editText.getText().toString().trim());</div><div class=\"line\">                startService(intent);</div><div class=\"line\">                editText.setText(<span class=\"string\">\"\"</span>);</div><div class=\"line\">                <span class=\"keyword\">break</span>;</div><div class=\"line\">            <span class=\"keyword\">default</span>:</div><div class=\"line\">                <span class=\"keyword\">break</span>;</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">WebSocketBroadcastReceiver</span> <span class=\"keyword\">extends</span> <span class=\"title\">BroadcastReceiver</span> </span>&#123;</div><div class=\"line\"></div><div class=\"line\">        <span class=\"meta\">@Override</span></div><div class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onReceive</span><span class=\"params\">(Context context, Intent intent)</span> </span>&#123;</div><div class=\"line\">            String message = intent.getStringExtra(<span class=\"string\">\"message\"</span>);</div><div class=\"line\">            sb.append(<span class=\"string\">\"服务端返回消息：\"</span>);</div><div class=\"line\">            sb.append(<span class=\"keyword\">new</span> Date().toLocaleString());</div><div class=\"line\">            sb.append(<span class=\"string\">\"\\n\"</span>);</div><div class=\"line\">            sb.append(message);</div><div class=\"line\">            sb.append(<span class=\"string\">\"\\n\"</span>);</div><div class=\"line\">            showMessage.setText(sb.toString());</div><div class=\"line\"></div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"meta\">@Override</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title\">onDestroy</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">        Intent intent = <span class=\"keyword\">new</span> Intent(<span class=\"keyword\">this</span>, WebSocketService.class);</div><div class=\"line\">        stopService(intent);</div><div class=\"line\">        unregisterReceiver(webSocketBroadcastReceiver);</div><div class=\"line\">        <span class=\"keyword\">super</span>.onDestroy();</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n</li>\n<li><p>Service<br>继承<code>Service</code>,在<code>onCreate()</code>方法里面创建<code>WebSocketClient</code>并和服务端进行连接。在<code>AndroidManifest.xml</code>中注册服务。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">WebSocketService</span> <span class=\"keyword\">extends</span> <span class=\"title\">Service</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">private</span> IoTWebSocketClient ioTWebSocketClient;</div><div class=\"line\">    <span class=\"keyword\">private</span> Intent broadcastIntent;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"meta\">@Override</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> IBinder <span class=\"title\">onBind</span><span class=\"params\">(Intent intent)</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">null</span>;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"meta\">@Override</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onCreate</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">super</span>.onCreate();</div><div class=\"line\">        broadcastIntent = <span class=\"keyword\">new</span> Intent();</div><div class=\"line\">        broadcastIntent.setAction(<span class=\"string\">\"web_socket\"</span>);</div><div class=\"line\">        ioTWebSocketClient = <span class=\"keyword\">new</span> IoTWebSocketClient(URI.create(<span class=\"string\">\"ws://192.168.1.64:8887\"</span>));</div><div class=\"line\">        ioTWebSocketClient.connect();</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"meta\">@Override</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">onStartCommand</span><span class=\"params\">(Intent intent, <span class=\"keyword\">int</span> flags, <span class=\"keyword\">int</span> startId)</span> </span>&#123;</div><div class=\"line\">        String message = intent.getStringExtra(<span class=\"string\">\"message\"</span>);</div><div class=\"line\">        <span class=\"keyword\">if</span>(ioTWebSocketClient.isClosing() || ioTWebSocketClient.isClosed())&#123;</div><div class=\"line\">            stopSelf();</div><div class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">super</span>.onStartCommand(intent, flags, startId);</div><div class=\"line\">        &#125;</div><div class=\"line\">        <span class=\"keyword\">try</span> &#123;</div><div class=\"line\">            ioTWebSocketClient.send(message);</div><div class=\"line\">        &#125;<span class=\"keyword\">catch</span> (Exception e)&#123;</div><div class=\"line\">            e.printStackTrace();</div><div class=\"line\">        &#125;</div><div class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">super</span>.onStartCommand(intent, flags, startId);</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"meta\">@Override</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onDestroy</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">        ioTWebSocketClient.close();</div><div class=\"line\">        ioTWebSocketClient = <span class=\"keyword\">null</span>;</div><div class=\"line\">        <span class=\"keyword\">super</span>.onDestroy();</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">IoTWebSocketClient</span> <span class=\"keyword\">extends</span> <span class=\"title\">WebSocketClient</span> </span>&#123;</div><div class=\"line\"></div><div class=\"line\">        IoTWebSocketClient(URI serverUri) &#123;</div><div class=\"line\">            <span class=\"keyword\">super</span>(serverUri);</div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\">        <span class=\"meta\">@Override</span></div><div class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onOpen</span><span class=\"params\">(ServerHandshake handshakedata)</span> </span>&#123;</div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\">        <span class=\"meta\">@Override</span></div><div class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onMessage</span><span class=\"params\">(String message)</span> </span>&#123;</div><div class=\"line\">            broadcastIntent.putExtra(<span class=\"string\">\"message\"</span>, message);</div><div class=\"line\">            WebSocketService.<span class=\"keyword\">this</span>.sendBroadcast(broadcastIntent);</div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\">        <span class=\"meta\">@Override</span></div><div class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onClose</span><span class=\"params\">(<span class=\"keyword\">int</span> code, String reason, <span class=\"keyword\">boolean</span> remote)</span> </span>&#123;</div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\">        <span class=\"meta\">@Override</span></div><div class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onError</span><span class=\"params\">(Exception ex)</span> </span>&#123;</div><div class=\"line\">            stopSelf();</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n</li>\n</ol>\n<p>在<code>onStartCommand()</code>方法里面，对发送消息方法的调用进行异常捕获，是因为这时候可能服务端重启或者服务端还没有准备好，这是发送消息会抛出异常，可以根据自己的业务需求进行改进。</p>\n<hr>\n<p>以上</p>\n","excerpt":"<p>上一篇提到在Android中使用WebSocket和服务端进行通信。是直接在Activity里面进行操作的这样会保持一个长连接，一个应用里面没必要也不应该保持多个长连接，所以我们可以把WebSocket客户端挪到Service里面，使用广播和Activity进行通信。<br>","more":"</p>\n<ol>\n<li><p>APP端：<br>继承<code>BroadcastReceiver</code>，重写<code>public void onReceive(Context context, Intent intent)</code>方法，在该方法中进行业务处理。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MainActivity</span> <span class=\"keyword\">extends</span> <span class=\"title\">AppCompatActivity</span> <span class=\"keyword\">implements</span> <span class=\"title\">View</span>.<span class=\"title\">OnClickListener</span> </span>&#123;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">private</span> TextView showMessage;</div><div class=\"line\">    <span class=\"keyword\">private</span> EditText editText;</div><div class=\"line\">    <span class=\"keyword\">private</span> StringBuilder sb = <span class=\"keyword\">new</span> StringBuilder();</div><div class=\"line\">    <span class=\"keyword\">private</span> WebSocketBroadcastReceiver webSocketBroadcastReceiver;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"meta\">@Override</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title\">onCreate</span><span class=\"params\">(Bundle savedInstanceState)</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">super</span>.onCreate(savedInstanceState);</div><div class=\"line\">        setContentView(R.layout.activity_main);</div><div class=\"line\">        Intent intent = <span class=\"keyword\">new</span> Intent(<span class=\"keyword\">this</span>, WebSocketService.class);</div><div class=\"line\">        startService(intent);</div><div class=\"line\">        showMessage = findViewById(R.id.show_message);</div><div class=\"line\">        editText = findViewById(R.id.edit_text);</div><div class=\"line\">        findViewById(R.id.send).setOnClickListener(<span class=\"keyword\">this</span>);</div><div class=\"line\">        webSocketBroadcastReceiver = <span class=\"keyword\">new</span> WebSocketBroadcastReceiver();</div><div class=\"line\">        IntentFilter intentFilter = <span class=\"keyword\">new</span> IntentFilter(<span class=\"string\">\"web_socket\"</span>);</div><div class=\"line\">        registerReceiver(webSocketBroadcastReceiver, intentFilter);</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"meta\">@Override</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onClick</span><span class=\"params\">(View v)</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">switch</span> (v.getId()) &#123;</div><div class=\"line\">            <span class=\"keyword\">case</span> R.id.send:</div><div class=\"line\"></div><div class=\"line\">                sb.append(<span class=\"string\">\"客户端发送消息：\"</span>);</div><div class=\"line\">                sb.append(<span class=\"keyword\">new</span> Date().toLocaleString());</div><div class=\"line\">                sb.append(<span class=\"string\">\"\\n\"</span>);</div><div class=\"line\">                sb.append(editText.getText().toString().trim());</div><div class=\"line\">                sb.append(<span class=\"string\">\"\\n\"</span>);</div><div class=\"line\">                showMessage.setText(sb.toString());</div><div class=\"line\">                Intent intent = <span class=\"keyword\">new</span> Intent(<span class=\"keyword\">this</span>, WebSocketService.class);</div><div class=\"line\">                intent.putExtra(<span class=\"string\">\"message\"</span>, editText.getText().toString().trim());</div><div class=\"line\">                startService(intent);</div><div class=\"line\">                editText.setText(<span class=\"string\">\"\"</span>);</div><div class=\"line\">                <span class=\"keyword\">break</span>;</div><div class=\"line\">            <span class=\"keyword\">default</span>:</div><div class=\"line\">                <span class=\"keyword\">break</span>;</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">WebSocketBroadcastReceiver</span> <span class=\"keyword\">extends</span> <span class=\"title\">BroadcastReceiver</span> </span>&#123;</div><div class=\"line\"></div><div class=\"line\">        <span class=\"meta\">@Override</span></div><div class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onReceive</span><span class=\"params\">(Context context, Intent intent)</span> </span>&#123;</div><div class=\"line\">            String message = intent.getStringExtra(<span class=\"string\">\"message\"</span>);</div><div class=\"line\">            sb.append(<span class=\"string\">\"服务端返回消息：\"</span>);</div><div class=\"line\">            sb.append(<span class=\"keyword\">new</span> Date().toLocaleString());</div><div class=\"line\">            sb.append(<span class=\"string\">\"\\n\"</span>);</div><div class=\"line\">            sb.append(message);</div><div class=\"line\">            sb.append(<span class=\"string\">\"\\n\"</span>);</div><div class=\"line\">            showMessage.setText(sb.toString());</div><div class=\"line\"></div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"meta\">@Override</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title\">onDestroy</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">        Intent intent = <span class=\"keyword\">new</span> Intent(<span class=\"keyword\">this</span>, WebSocketService.class);</div><div class=\"line\">        stopService(intent);</div><div class=\"line\">        unregisterReceiver(webSocketBroadcastReceiver);</div><div class=\"line\">        <span class=\"keyword\">super</span>.onDestroy();</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n</li>\n<li><p>Service<br>继承<code>Service</code>,在<code>onCreate()</code>方法里面创建<code>WebSocketClient</code>并和服务端进行连接。在<code>AndroidManifest.xml</code>中注册服务。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">WebSocketService</span> <span class=\"keyword\">extends</span> <span class=\"title\">Service</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">private</span> IoTWebSocketClient ioTWebSocketClient;</div><div class=\"line\">    <span class=\"keyword\">private</span> Intent broadcastIntent;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"meta\">@Override</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> IBinder <span class=\"title\">onBind</span><span class=\"params\">(Intent intent)</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">null</span>;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"meta\">@Override</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onCreate</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">super</span>.onCreate();</div><div class=\"line\">        broadcastIntent = <span class=\"keyword\">new</span> Intent();</div><div class=\"line\">        broadcastIntent.setAction(<span class=\"string\">\"web_socket\"</span>);</div><div class=\"line\">        ioTWebSocketClient = <span class=\"keyword\">new</span> IoTWebSocketClient(URI.create(<span class=\"string\">\"ws://192.168.1.64:8887\"</span>));</div><div class=\"line\">        ioTWebSocketClient.connect();</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"meta\">@Override</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">onStartCommand</span><span class=\"params\">(Intent intent, <span class=\"keyword\">int</span> flags, <span class=\"keyword\">int</span> startId)</span> </span>&#123;</div><div class=\"line\">        String message = intent.getStringExtra(<span class=\"string\">\"message\"</span>);</div><div class=\"line\">        <span class=\"keyword\">if</span>(ioTWebSocketClient.isClosing() || ioTWebSocketClient.isClosed())&#123;</div><div class=\"line\">            stopSelf();</div><div class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">super</span>.onStartCommand(intent, flags, startId);</div><div class=\"line\">        &#125;</div><div class=\"line\">        <span class=\"keyword\">try</span> &#123;</div><div class=\"line\">            ioTWebSocketClient.send(message);</div><div class=\"line\">        &#125;<span class=\"keyword\">catch</span> (Exception e)&#123;</div><div class=\"line\">            e.printStackTrace();</div><div class=\"line\">        &#125;</div><div class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">super</span>.onStartCommand(intent, flags, startId);</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"meta\">@Override</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onDestroy</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">        ioTWebSocketClient.close();</div><div class=\"line\">        ioTWebSocketClient = <span class=\"keyword\">null</span>;</div><div class=\"line\">        <span class=\"keyword\">super</span>.onDestroy();</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">IoTWebSocketClient</span> <span class=\"keyword\">extends</span> <span class=\"title\">WebSocketClient</span> </span>&#123;</div><div class=\"line\"></div><div class=\"line\">        IoTWebSocketClient(URI serverUri) &#123;</div><div class=\"line\">            <span class=\"keyword\">super</span>(serverUri);</div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\">        <span class=\"meta\">@Override</span></div><div class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onOpen</span><span class=\"params\">(ServerHandshake handshakedata)</span> </span>&#123;</div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\">        <span class=\"meta\">@Override</span></div><div class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onMessage</span><span class=\"params\">(String message)</span> </span>&#123;</div><div class=\"line\">            broadcastIntent.putExtra(<span class=\"string\">\"message\"</span>, message);</div><div class=\"line\">            WebSocketService.<span class=\"keyword\">this</span>.sendBroadcast(broadcastIntent);</div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\">        <span class=\"meta\">@Override</span></div><div class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onClose</span><span class=\"params\">(<span class=\"keyword\">int</span> code, String reason, <span class=\"keyword\">boolean</span> remote)</span> </span>&#123;</div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\">        <span class=\"meta\">@Override</span></div><div class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onError</span><span class=\"params\">(Exception ex)</span> </span>&#123;</div><div class=\"line\">            stopSelf();</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n</li>\n</ol>\n<p>在<code>onStartCommand()</code>方法里面，对发送消息方法的调用进行异常捕获，是因为这时候可能服务端重启或者服务端还没有准备好，这是发送消息会抛出异常，可以根据自己的业务需求进行改进。</p>\n<hr>\n<p>以上</p>"},{"title":"JVM内存区域","date":"2017-03-27T10:00:21.000Z","_content":"　　Java虚拟机在执行Java程序的过程中会把它所管理的内存划分为若干个不同的数据区域.这些区域都有各自的用途,以及创建和销毁的时间.有的区域随着虚拟机进程的启动而存在,有些区域则依赖用户线程的启动和结束而建立和销毁.根据《Java虚拟机规范(JavaSE 7版)》的规定,Java虚拟机所管理的内存将会包括以下几个运行时数据区域.如下所示:\n![JVM内存区域](/image/JVM/JVM_RunTime_Area.png)\n<!--more-->\n### 程序计数器\n　　`程序计数器`(Program Counter Register)是一块较小的内存空间,它可以看作是当前线程所执行的字节码的行号指示器.在虚拟机的概念模型里(仅是概念模型,各种虚拟机可能会通过一些更高效的方式去实现),字节码解释器工作时就是通过改变这个计数器的值来选取下一条需要执行的字节码指令,分支、循环、跳转、异常处理、线程恢复等基础功能都需要依赖这个计数器来完成.\n由于Java虚拟机的多线程是通过线程轮流切换并分配处理器执行时间的方式来实现的,在任何一个确定的时刻,一个处理器(对于多核处理器来说是一个内核)都只会执行一条线程中的指令.因此,为了线程切换后能恢复到正确的执行位置,每条线程都需要有一个独立的程序计数器,各条线程之间计数器互不影响,独立存储,我们称这类内存区域为\"线程私有\"的内存.如果线程正在执行的是一个Java方法,这个计数器记录的是正在执行的虚拟机字节码指令的地址;如果正在执行的是Native方法,这个计数器值则为空(Undefined).此内存区域是唯一一个在Java虚拟机规范中没有规定任何`OutOfMemoryError`情况的区域.\n\n### Java虚拟机栈\n　　与程序计数器一样,Java虚拟机栈(Java Virtual Machine Stacks)也是线程私有的,它的生命周期与线程相同.虚拟机栈描述的是Java方法执行的内存模型:每个方法在执行的同时都会创建一个栈帧(Stack Frame)用于存储局部变量表、操作数栈、动态链接、方法出口等信息.每一个方法从调用直至执行完成的过程,就对应着一个栈帧在虚拟机栈中入栈到出栈的过程.经常有人把Java内存区分为堆内存(Heap)和栈内存(Stack),这种分法比较粗糙,Java内存区域的划分实际上远比这复杂. 这种划分方式的流行只能说明大多数程序员最关注的、与对象内存分配关系最密切的内存区域是这两块.所指的\"栈\"就是现在讲的虚拟机栈,或者说是虚拟机栈中局部变量表部分.局部变量表存放了编译期可知的各种基本数据类型(boolean、byte、char、short、int、float、long、double)、对象引用(reference类型,它不等同于对象本身,可能是一个指向对象起始地址的引用指针,也可能是指向一个代表对象的句柄或其他与此对象相关的位置)和returnAddress类型(指向了一条字节码指令的地址).其中64位长度的long和double类型的数据会占用2个局部变量空间(Slot),其余的数据类型只占用1个. 局部变量表所需的内存空间在编译期间完成分配,当进入一个方法时,这个方法需要在帧中分配多大的局部变量空间是完全确定的,在方法运行期间不会改变局部变量表的大小.在Java虚拟机规范中,对这个区域规定了两种异常状况:如果线程请求的栈深度大于虚拟机所允许的深度,将抛出`StackOverflowError`异常;如果虚拟机栈可以动态扩展(当前大部分的Java虚拟机都可动态扩展,只不过Java虚拟机规范中也允许固定长度的虚拟机栈),如果扩展时无法申请到足够的内存,就会抛出`OutOfMemoryError`异常.\n### 本地方法栈\n　　本地方法栈(Native Method Stack)与虚拟机栈所发挥的作用是非常相似的,它们之间的区别不过是虚拟机栈为虚拟机执行Java方法(也就是字节码)服务,而本地方法栈则为虚拟机使用到的Native方法服务. 在虚拟机规范中对本地方法栈中方法使用的语言、 使用方式与数据结构并没有强制规定,因此具体的虚拟机可以自由实现它. 甚至有的虚拟机(譬如Sun HotSpot虚拟机)直接就把本地方法栈和虚拟机栈合二为一. 与虚拟机栈一样,本地方法栈区域也会抛出`StackOverflowError`和`OutOfMemoryError`异常.\n### Java堆\n　　对于大多数应用来说,Java堆(Java Heap)是Java虚拟机所管理的内存中最大的一块.Java堆是被所有线程共享的一块内存区域,在虚拟机启动时创建.此内存区域的唯一目的就是存放对象实例,几乎所有的对象实例都在这里分配内存.这一点在Java虚拟机规范中的描述是:所有的对象实例以及数组都要在堆上分配,但是随着JIT编译器的发展与逃逸分析技术逐渐成熟,栈上分配、标量替换优化技术将会导致一些微妙的变化发生,所有的对象都分配在堆上也渐渐变得不是那么\"绝对\"了.Java堆是垃圾收集器管理的主要区域,因此很多时候也被称做\"GC堆\"(Garbage Collected Heap).从内存回收的角度来看,由于现在收集器基本都采用分代收集算法,所以Java堆中还可以细分为:新生代和老年代;再细致一点的有Eden空间、From Survivor空间、To Survivor空间等.从内存分配的角度来看,线程共享的Java堆中可能划分出多个线程私有的分配缓冲区(Thread Local Allocation Buffer,TLAB).不过无论如何划分,都与存放内容无关,无论哪个区域,存储的都仍然是对象实例,进一步划分的目的是为了更好地回收内存,或者更快地分配内存.根据Java虚拟机规范的规定,Java堆可以处于物理上不连续的内存空间中,只要逻辑上是连续的即可,就像我们的磁盘空间一样.在实现时,既可以实现成固定大小的,也可以是可扩展的,不过当前主流的虚拟机都是按照可扩展来实现的(通过-Xmx和-Xms控制). 如果在堆中没有内存完成实例分配,并且堆也无法再扩展时,将会抛出`OutOfMemoryError`异常.\n### 方法区\n　　方法区(Method Area)与Java堆一样,是各个线程共享的内存区域,它用于存储已被虚拟机加载的类信息、常量、静态变量、即时编译器编译后的代码等数据.虽然Java虚拟机规范把方法区描述为堆的一个逻辑部分,但是它却有一个别名叫做Non-Heap(非堆),目的应该是与Java堆区分开来.对于习惯在HotSpot虚拟机上开发、 部署程序的开发者来说,很多人都更愿意把方法区称为\"永久代\"(Permanent Generation),本质上两者并不等价,仅仅是因为HotSpot虚拟机的设计团队选择把GC分代收集扩展至方法区,或者说使用永久代来实现方法区而已,这样HotSpot的垃圾收集器可以像管理Java堆一样管理这部分内存,能够省去专门为方法区编写内存管理代码的工作.对于其他虚拟机(如BEA JRockit、 IBM J9等)来说是不存在永久代的概念的.原则上,如何实现方法区属于虚拟机实现细节,不受虚拟机规范约束,但使用永久代来实现方法区,现在看来并不是一个好主意,因为这样更容易遇到内存溢出问题(永久代有-XX:MaxPermSize的上限,J9和JRockit只要没有触碰到进程可用内存的上限,例如32位系统中的4GB,就不会出现问题),而且有极少数方法(例如String.intern())会因这个原因导致不同虚拟机下有不同的表现. 因此,对于HotSpot虚拟机,根据官方发布的路线图信息,现在也有放弃永久代并逐步改为采用Native Memory来实现方法区的规划了,在目前已经发布的JDK1.7的HotSpot中,已经把原本放在永久代的字符串常量池移出.Java虚拟机规范对方法区的限制非常宽松,除了和Java堆一样不需要连续的内存和可以选择固定大小或者可扩展外,还可以选择不实现垃圾收集.相对而言,垃圾收集行为在这个区域是比较少出现的,但并非数据进入了方法区就如永久代的名字一样\"永久\"存在了.这区域的内存回收目标主要是针对常量池的回收和对类型的卸载,一般来说,这个区域的回收\"成绩\"比较难以令人满意,尤其是类型的卸载,条件相当苛刻,但是这部分区域的回收确实是必要的.根据Java虚拟机规范的规定,当方法区无法满足内存分配需求时,将抛出`OutOfMemoryError`异常.\n### 运行时常量池\n　　运行时常量池(Runtime Constant Pool)是方法区的一部分. Class文件中除了有类的版本、字段、方法、接口等描述信息外,还有一项信息是常量池(Constant Pool Table),用于存放编译期生成的各种字面量和符号引用,这部分内容将在类加载后进入方法区的运行时常量池中存放.Java虚拟机对Class文件每一部分(自然也包括常量池)的格式都有严格规定,每一个字节用于存储哪种数据都必须符合规范上的要求才会被虚拟机认可、装载和执行,但对于运行时常量池,Java虚拟机规范没有做任何细节的要求,不同的提供商实现的虚拟机可以按照自己的需要来实现这个内存区域.不过,一般来说,除了保存Class文件中描述的符号引用外,还会把翻译出来的直接引用也存储在运行时常量池中.运行时常量池相对于Class文件常量池的另外一个重要特征是具备动态性,Java语言并不要求常量一定只有编译期才能产生,也就是并非预置入Class文件中常量池的内容才能进入方法区运行时常量池,运行期间也可能将新的常量放入池中,这种特性被开发人员利用得比较多的便是String类的intern()方法.既然运行时常量池是方法区的一部分,自然受到方法区内存的限制,当常量池无法再申请到内存时会抛出`OutOfMemoryError`异常.\n### 直接内存\n　　直接内存(Direct Memory)并不是虚拟机运行时数据区的一部分,也不是Java虚拟机规范中定义的内存区域.但是这部分内存也被频繁地使用,而且也可能导致`OutOfMemoryError`异常出现,所以我们放到这里一起讲解.在JDK 1.4中新加入了NIO(New Input/Output)类,引入了一种基于通道(Channel)与缓冲区(Buffer)的I/O方式,它可以使用Native函数库直接分配堆外内存,然后通过一个存储在Java堆中的DirectByteBuffer对象作为这块内存的引用进行操作.这样能在一些场景中显著提高性能,因为避免了在Java堆和Native堆中来回复制数据.显然,本机直接内存的分配不会受到Java堆大小的限制,但是,既然是内存,肯定还是会受到本机总内存(包括RAM以及SWAP区或者分页文件)大小以及处理器寻址空间的限制.服务器管理员在配置虚拟机参数时,会根据实际内存设置-Xmx等参数信息,但经常忽略直接内存,使得各个内存区域总和大于物理内存限制(包括物理的和操作系统级的限制),从而导致动态扩展时出现`OutOfMemoryError`异常.\n***\n以上","source":"_posts/JVM内存区域.md","raw":"---\ntitle: JVM内存区域\ndate: 2017-03-27 18:00:21\ntags: [Java,JVM]\n---\n　　Java虚拟机在执行Java程序的过程中会把它所管理的内存划分为若干个不同的数据区域.这些区域都有各自的用途,以及创建和销毁的时间.有的区域随着虚拟机进程的启动而存在,有些区域则依赖用户线程的启动和结束而建立和销毁.根据《Java虚拟机规范(JavaSE 7版)》的规定,Java虚拟机所管理的内存将会包括以下几个运行时数据区域.如下所示:\n![JVM内存区域](/image/JVM/JVM_RunTime_Area.png)\n<!--more-->\n### 程序计数器\n　　`程序计数器`(Program Counter Register)是一块较小的内存空间,它可以看作是当前线程所执行的字节码的行号指示器.在虚拟机的概念模型里(仅是概念模型,各种虚拟机可能会通过一些更高效的方式去实现),字节码解释器工作时就是通过改变这个计数器的值来选取下一条需要执行的字节码指令,分支、循环、跳转、异常处理、线程恢复等基础功能都需要依赖这个计数器来完成.\n由于Java虚拟机的多线程是通过线程轮流切换并分配处理器执行时间的方式来实现的,在任何一个确定的时刻,一个处理器(对于多核处理器来说是一个内核)都只会执行一条线程中的指令.因此,为了线程切换后能恢复到正确的执行位置,每条线程都需要有一个独立的程序计数器,各条线程之间计数器互不影响,独立存储,我们称这类内存区域为\"线程私有\"的内存.如果线程正在执行的是一个Java方法,这个计数器记录的是正在执行的虚拟机字节码指令的地址;如果正在执行的是Native方法,这个计数器值则为空(Undefined).此内存区域是唯一一个在Java虚拟机规范中没有规定任何`OutOfMemoryError`情况的区域.\n\n### Java虚拟机栈\n　　与程序计数器一样,Java虚拟机栈(Java Virtual Machine Stacks)也是线程私有的,它的生命周期与线程相同.虚拟机栈描述的是Java方法执行的内存模型:每个方法在执行的同时都会创建一个栈帧(Stack Frame)用于存储局部变量表、操作数栈、动态链接、方法出口等信息.每一个方法从调用直至执行完成的过程,就对应着一个栈帧在虚拟机栈中入栈到出栈的过程.经常有人把Java内存区分为堆内存(Heap)和栈内存(Stack),这种分法比较粗糙,Java内存区域的划分实际上远比这复杂. 这种划分方式的流行只能说明大多数程序员最关注的、与对象内存分配关系最密切的内存区域是这两块.所指的\"栈\"就是现在讲的虚拟机栈,或者说是虚拟机栈中局部变量表部分.局部变量表存放了编译期可知的各种基本数据类型(boolean、byte、char、short、int、float、long、double)、对象引用(reference类型,它不等同于对象本身,可能是一个指向对象起始地址的引用指针,也可能是指向一个代表对象的句柄或其他与此对象相关的位置)和returnAddress类型(指向了一条字节码指令的地址).其中64位长度的long和double类型的数据会占用2个局部变量空间(Slot),其余的数据类型只占用1个. 局部变量表所需的内存空间在编译期间完成分配,当进入一个方法时,这个方法需要在帧中分配多大的局部变量空间是完全确定的,在方法运行期间不会改变局部变量表的大小.在Java虚拟机规范中,对这个区域规定了两种异常状况:如果线程请求的栈深度大于虚拟机所允许的深度,将抛出`StackOverflowError`异常;如果虚拟机栈可以动态扩展(当前大部分的Java虚拟机都可动态扩展,只不过Java虚拟机规范中也允许固定长度的虚拟机栈),如果扩展时无法申请到足够的内存,就会抛出`OutOfMemoryError`异常.\n### 本地方法栈\n　　本地方法栈(Native Method Stack)与虚拟机栈所发挥的作用是非常相似的,它们之间的区别不过是虚拟机栈为虚拟机执行Java方法(也就是字节码)服务,而本地方法栈则为虚拟机使用到的Native方法服务. 在虚拟机规范中对本地方法栈中方法使用的语言、 使用方式与数据结构并没有强制规定,因此具体的虚拟机可以自由实现它. 甚至有的虚拟机(譬如Sun HotSpot虚拟机)直接就把本地方法栈和虚拟机栈合二为一. 与虚拟机栈一样,本地方法栈区域也会抛出`StackOverflowError`和`OutOfMemoryError`异常.\n### Java堆\n　　对于大多数应用来说,Java堆(Java Heap)是Java虚拟机所管理的内存中最大的一块.Java堆是被所有线程共享的一块内存区域,在虚拟机启动时创建.此内存区域的唯一目的就是存放对象实例,几乎所有的对象实例都在这里分配内存.这一点在Java虚拟机规范中的描述是:所有的对象实例以及数组都要在堆上分配,但是随着JIT编译器的发展与逃逸分析技术逐渐成熟,栈上分配、标量替换优化技术将会导致一些微妙的变化发生,所有的对象都分配在堆上也渐渐变得不是那么\"绝对\"了.Java堆是垃圾收集器管理的主要区域,因此很多时候也被称做\"GC堆\"(Garbage Collected Heap).从内存回收的角度来看,由于现在收集器基本都采用分代收集算法,所以Java堆中还可以细分为:新生代和老年代;再细致一点的有Eden空间、From Survivor空间、To Survivor空间等.从内存分配的角度来看,线程共享的Java堆中可能划分出多个线程私有的分配缓冲区(Thread Local Allocation Buffer,TLAB).不过无论如何划分,都与存放内容无关,无论哪个区域,存储的都仍然是对象实例,进一步划分的目的是为了更好地回收内存,或者更快地分配内存.根据Java虚拟机规范的规定,Java堆可以处于物理上不连续的内存空间中,只要逻辑上是连续的即可,就像我们的磁盘空间一样.在实现时,既可以实现成固定大小的,也可以是可扩展的,不过当前主流的虚拟机都是按照可扩展来实现的(通过-Xmx和-Xms控制). 如果在堆中没有内存完成实例分配,并且堆也无法再扩展时,将会抛出`OutOfMemoryError`异常.\n### 方法区\n　　方法区(Method Area)与Java堆一样,是各个线程共享的内存区域,它用于存储已被虚拟机加载的类信息、常量、静态变量、即时编译器编译后的代码等数据.虽然Java虚拟机规范把方法区描述为堆的一个逻辑部分,但是它却有一个别名叫做Non-Heap(非堆),目的应该是与Java堆区分开来.对于习惯在HotSpot虚拟机上开发、 部署程序的开发者来说,很多人都更愿意把方法区称为\"永久代\"(Permanent Generation),本质上两者并不等价,仅仅是因为HotSpot虚拟机的设计团队选择把GC分代收集扩展至方法区,或者说使用永久代来实现方法区而已,这样HotSpot的垃圾收集器可以像管理Java堆一样管理这部分内存,能够省去专门为方法区编写内存管理代码的工作.对于其他虚拟机(如BEA JRockit、 IBM J9等)来说是不存在永久代的概念的.原则上,如何实现方法区属于虚拟机实现细节,不受虚拟机规范约束,但使用永久代来实现方法区,现在看来并不是一个好主意,因为这样更容易遇到内存溢出问题(永久代有-XX:MaxPermSize的上限,J9和JRockit只要没有触碰到进程可用内存的上限,例如32位系统中的4GB,就不会出现问题),而且有极少数方法(例如String.intern())会因这个原因导致不同虚拟机下有不同的表现. 因此,对于HotSpot虚拟机,根据官方发布的路线图信息,现在也有放弃永久代并逐步改为采用Native Memory来实现方法区的规划了,在目前已经发布的JDK1.7的HotSpot中,已经把原本放在永久代的字符串常量池移出.Java虚拟机规范对方法区的限制非常宽松,除了和Java堆一样不需要连续的内存和可以选择固定大小或者可扩展外,还可以选择不实现垃圾收集.相对而言,垃圾收集行为在这个区域是比较少出现的,但并非数据进入了方法区就如永久代的名字一样\"永久\"存在了.这区域的内存回收目标主要是针对常量池的回收和对类型的卸载,一般来说,这个区域的回收\"成绩\"比较难以令人满意,尤其是类型的卸载,条件相当苛刻,但是这部分区域的回收确实是必要的.根据Java虚拟机规范的规定,当方法区无法满足内存分配需求时,将抛出`OutOfMemoryError`异常.\n### 运行时常量池\n　　运行时常量池(Runtime Constant Pool)是方法区的一部分. Class文件中除了有类的版本、字段、方法、接口等描述信息外,还有一项信息是常量池(Constant Pool Table),用于存放编译期生成的各种字面量和符号引用,这部分内容将在类加载后进入方法区的运行时常量池中存放.Java虚拟机对Class文件每一部分(自然也包括常量池)的格式都有严格规定,每一个字节用于存储哪种数据都必须符合规范上的要求才会被虚拟机认可、装载和执行,但对于运行时常量池,Java虚拟机规范没有做任何细节的要求,不同的提供商实现的虚拟机可以按照自己的需要来实现这个内存区域.不过,一般来说,除了保存Class文件中描述的符号引用外,还会把翻译出来的直接引用也存储在运行时常量池中.运行时常量池相对于Class文件常量池的另外一个重要特征是具备动态性,Java语言并不要求常量一定只有编译期才能产生,也就是并非预置入Class文件中常量池的内容才能进入方法区运行时常量池,运行期间也可能将新的常量放入池中,这种特性被开发人员利用得比较多的便是String类的intern()方法.既然运行时常量池是方法区的一部分,自然受到方法区内存的限制,当常量池无法再申请到内存时会抛出`OutOfMemoryError`异常.\n### 直接内存\n　　直接内存(Direct Memory)并不是虚拟机运行时数据区的一部分,也不是Java虚拟机规范中定义的内存区域.但是这部分内存也被频繁地使用,而且也可能导致`OutOfMemoryError`异常出现,所以我们放到这里一起讲解.在JDK 1.4中新加入了NIO(New Input/Output)类,引入了一种基于通道(Channel)与缓冲区(Buffer)的I/O方式,它可以使用Native函数库直接分配堆外内存,然后通过一个存储在Java堆中的DirectByteBuffer对象作为这块内存的引用进行操作.这样能在一些场景中显著提高性能,因为避免了在Java堆和Native堆中来回复制数据.显然,本机直接内存的分配不会受到Java堆大小的限制,但是,既然是内存,肯定还是会受到本机总内存(包括RAM以及SWAP区或者分页文件)大小以及处理器寻址空间的限制.服务器管理员在配置虚拟机参数时,会根据实际内存设置-Xmx等参数信息,但经常忽略直接内存,使得各个内存区域总和大于物理内存限制(包括物理的和操作系统级的限制),从而导致动态扩展时出现`OutOfMemoryError`异常.\n***\n以上","slug":"JVM内存区域","published":1,"updated":"2017-12-30T13:13:07.223Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjbvyt3uf0007scdgsaa07z01","content":"<p>　　Java虚拟机在执行Java程序的过程中会把它所管理的内存划分为若干个不同的数据区域.这些区域都有各自的用途,以及创建和销毁的时间.有的区域随着虚拟机进程的启动而存在,有些区域则依赖用户线程的启动和结束而建立和销毁.根据《Java虚拟机规范(JavaSE 7版)》的规定,Java虚拟机所管理的内存将会包括以下几个运行时数据区域.如下所示:<br><img src=\"/image/JVM/JVM_RunTime_Area.png\" alt=\"JVM内存区域\"><br><a id=\"more\"></a></p>\n<h3 id=\"程序计数器\"><a href=\"#程序计数器\" class=\"headerlink\" title=\"程序计数器\"></a>程序计数器</h3><p>　　<code>程序计数器</code>(Program Counter Register)是一块较小的内存空间,它可以看作是当前线程所执行的字节码的行号指示器.在虚拟机的概念模型里(仅是概念模型,各种虚拟机可能会通过一些更高效的方式去实现),字节码解释器工作时就是通过改变这个计数器的值来选取下一条需要执行的字节码指令,分支、循环、跳转、异常处理、线程恢复等基础功能都需要依赖这个计数器来完成.<br>由于Java虚拟机的多线程是通过线程轮流切换并分配处理器执行时间的方式来实现的,在任何一个确定的时刻,一个处理器(对于多核处理器来说是一个内核)都只会执行一条线程中的指令.因此,为了线程切换后能恢复到正确的执行位置,每条线程都需要有一个独立的程序计数器,各条线程之间计数器互不影响,独立存储,我们称这类内存区域为”线程私有”的内存.如果线程正在执行的是一个Java方法,这个计数器记录的是正在执行的虚拟机字节码指令的地址;如果正在执行的是Native方法,这个计数器值则为空(Undefined).此内存区域是唯一一个在Java虚拟机规范中没有规定任何<code>OutOfMemoryError</code>情况的区域.</p>\n<h3 id=\"Java虚拟机栈\"><a href=\"#Java虚拟机栈\" class=\"headerlink\" title=\"Java虚拟机栈\"></a>Java虚拟机栈</h3><p>　　与程序计数器一样,Java虚拟机栈(Java Virtual Machine Stacks)也是线程私有的,它的生命周期与线程相同.虚拟机栈描述的是Java方法执行的内存模型:每个方法在执行的同时都会创建一个栈帧(Stack Frame)用于存储局部变量表、操作数栈、动态链接、方法出口等信息.每一个方法从调用直至执行完成的过程,就对应着一个栈帧在虚拟机栈中入栈到出栈的过程.经常有人把Java内存区分为堆内存(Heap)和栈内存(Stack),这种分法比较粗糙,Java内存区域的划分实际上远比这复杂. 这种划分方式的流行只能说明大多数程序员最关注的、与对象内存分配关系最密切的内存区域是这两块.所指的”栈”就是现在讲的虚拟机栈,或者说是虚拟机栈中局部变量表部分.局部变量表存放了编译期可知的各种基本数据类型(boolean、byte、char、short、int、float、long、double)、对象引用(reference类型,它不等同于对象本身,可能是一个指向对象起始地址的引用指针,也可能是指向一个代表对象的句柄或其他与此对象相关的位置)和returnAddress类型(指向了一条字节码指令的地址).其中64位长度的long和double类型的数据会占用2个局部变量空间(Slot),其余的数据类型只占用1个. 局部变量表所需的内存空间在编译期间完成分配,当进入一个方法时,这个方法需要在帧中分配多大的局部变量空间是完全确定的,在方法运行期间不会改变局部变量表的大小.在Java虚拟机规范中,对这个区域规定了两种异常状况:如果线程请求的栈深度大于虚拟机所允许的深度,将抛出<code>StackOverflowError</code>异常;如果虚拟机栈可以动态扩展(当前大部分的Java虚拟机都可动态扩展,只不过Java虚拟机规范中也允许固定长度的虚拟机栈),如果扩展时无法申请到足够的内存,就会抛出<code>OutOfMemoryError</code>异常.</p>\n<h3 id=\"本地方法栈\"><a href=\"#本地方法栈\" class=\"headerlink\" title=\"本地方法栈\"></a>本地方法栈</h3><p>　　本地方法栈(Native Method Stack)与虚拟机栈所发挥的作用是非常相似的,它们之间的区别不过是虚拟机栈为虚拟机执行Java方法(也就是字节码)服务,而本地方法栈则为虚拟机使用到的Native方法服务. 在虚拟机规范中对本地方法栈中方法使用的语言、 使用方式与数据结构并没有强制规定,因此具体的虚拟机可以自由实现它. 甚至有的虚拟机(譬如Sun HotSpot虚拟机)直接就把本地方法栈和虚拟机栈合二为一. 与虚拟机栈一样,本地方法栈区域也会抛出<code>StackOverflowError</code>和<code>OutOfMemoryError</code>异常.</p>\n<h3 id=\"Java堆\"><a href=\"#Java堆\" class=\"headerlink\" title=\"Java堆\"></a>Java堆</h3><p>　　对于大多数应用来说,Java堆(Java Heap)是Java虚拟机所管理的内存中最大的一块.Java堆是被所有线程共享的一块内存区域,在虚拟机启动时创建.此内存区域的唯一目的就是存放对象实例,几乎所有的对象实例都在这里分配内存.这一点在Java虚拟机规范中的描述是:所有的对象实例以及数组都要在堆上分配,但是随着JIT编译器的发展与逃逸分析技术逐渐成熟,栈上分配、标量替换优化技术将会导致一些微妙的变化发生,所有的对象都分配在堆上也渐渐变得不是那么”绝对”了.Java堆是垃圾收集器管理的主要区域,因此很多时候也被称做”GC堆”(Garbage Collected Heap).从内存回收的角度来看,由于现在收集器基本都采用分代收集算法,所以Java堆中还可以细分为:新生代和老年代;再细致一点的有Eden空间、From Survivor空间、To Survivor空间等.从内存分配的角度来看,线程共享的Java堆中可能划分出多个线程私有的分配缓冲区(Thread Local Allocation Buffer,TLAB).不过无论如何划分,都与存放内容无关,无论哪个区域,存储的都仍然是对象实例,进一步划分的目的是为了更好地回收内存,或者更快地分配内存.根据Java虚拟机规范的规定,Java堆可以处于物理上不连续的内存空间中,只要逻辑上是连续的即可,就像我们的磁盘空间一样.在实现时,既可以实现成固定大小的,也可以是可扩展的,不过当前主流的虚拟机都是按照可扩展来实现的(通过-Xmx和-Xms控制). 如果在堆中没有内存完成实例分配,并且堆也无法再扩展时,将会抛出<code>OutOfMemoryError</code>异常.</p>\n<h3 id=\"方法区\"><a href=\"#方法区\" class=\"headerlink\" title=\"方法区\"></a>方法区</h3><p>　　方法区(Method Area)与Java堆一样,是各个线程共享的内存区域,它用于存储已被虚拟机加载的类信息、常量、静态变量、即时编译器编译后的代码等数据.虽然Java虚拟机规范把方法区描述为堆的一个逻辑部分,但是它却有一个别名叫做Non-Heap(非堆),目的应该是与Java堆区分开来.对于习惯在HotSpot虚拟机上开发、 部署程序的开发者来说,很多人都更愿意把方法区称为”永久代”(Permanent Generation),本质上两者并不等价,仅仅是因为HotSpot虚拟机的设计团队选择把GC分代收集扩展至方法区,或者说使用永久代来实现方法区而已,这样HotSpot的垃圾收集器可以像管理Java堆一样管理这部分内存,能够省去专门为方法区编写内存管理代码的工作.对于其他虚拟机(如BEA JRockit、 IBM J9等)来说是不存在永久代的概念的.原则上,如何实现方法区属于虚拟机实现细节,不受虚拟机规范约束,但使用永久代来实现方法区,现在看来并不是一个好主意,因为这样更容易遇到内存溢出问题(永久代有-XX:MaxPermSize的上限,J9和JRockit只要没有触碰到进程可用内存的上限,例如32位系统中的4GB,就不会出现问题),而且有极少数方法(例如String.intern())会因这个原因导致不同虚拟机下有不同的表现. 因此,对于HotSpot虚拟机,根据官方发布的路线图信息,现在也有放弃永久代并逐步改为采用Native Memory来实现方法区的规划了,在目前已经发布的JDK1.7的HotSpot中,已经把原本放在永久代的字符串常量池移出.Java虚拟机规范对方法区的限制非常宽松,除了和Java堆一样不需要连续的内存和可以选择固定大小或者可扩展外,还可以选择不实现垃圾收集.相对而言,垃圾收集行为在这个区域是比较少出现的,但并非数据进入了方法区就如永久代的名字一样”永久”存在了.这区域的内存回收目标主要是针对常量池的回收和对类型的卸载,一般来说,这个区域的回收”成绩”比较难以令人满意,尤其是类型的卸载,条件相当苛刻,但是这部分区域的回收确实是必要的.根据Java虚拟机规范的规定,当方法区无法满足内存分配需求时,将抛出<code>OutOfMemoryError</code>异常.</p>\n<h3 id=\"运行时常量池\"><a href=\"#运行时常量池\" class=\"headerlink\" title=\"运行时常量池\"></a>运行时常量池</h3><p>　　运行时常量池(Runtime Constant Pool)是方法区的一部分. Class文件中除了有类的版本、字段、方法、接口等描述信息外,还有一项信息是常量池(Constant Pool Table),用于存放编译期生成的各种字面量和符号引用,这部分内容将在类加载后进入方法区的运行时常量池中存放.Java虚拟机对Class文件每一部分(自然也包括常量池)的格式都有严格规定,每一个字节用于存储哪种数据都必须符合规范上的要求才会被虚拟机认可、装载和执行,但对于运行时常量池,Java虚拟机规范没有做任何细节的要求,不同的提供商实现的虚拟机可以按照自己的需要来实现这个内存区域.不过,一般来说,除了保存Class文件中描述的符号引用外,还会把翻译出来的直接引用也存储在运行时常量池中.运行时常量池相对于Class文件常量池的另外一个重要特征是具备动态性,Java语言并不要求常量一定只有编译期才能产生,也就是并非预置入Class文件中常量池的内容才能进入方法区运行时常量池,运行期间也可能将新的常量放入池中,这种特性被开发人员利用得比较多的便是String类的intern()方法.既然运行时常量池是方法区的一部分,自然受到方法区内存的限制,当常量池无法再申请到内存时会抛出<code>OutOfMemoryError</code>异常.</p>\n<h3 id=\"直接内存\"><a href=\"#直接内存\" class=\"headerlink\" title=\"直接内存\"></a>直接内存</h3><p>　　直接内存(Direct Memory)并不是虚拟机运行时数据区的一部分,也不是Java虚拟机规范中定义的内存区域.但是这部分内存也被频繁地使用,而且也可能导致<code>OutOfMemoryError</code>异常出现,所以我们放到这里一起讲解.在JDK 1.4中新加入了NIO(New Input/Output)类,引入了一种基于通道(Channel)与缓冲区(Buffer)的I/O方式,它可以使用Native函数库直接分配堆外内存,然后通过一个存储在Java堆中的DirectByteBuffer对象作为这块内存的引用进行操作.这样能在一些场景中显著提高性能,因为避免了在Java堆和Native堆中来回复制数据.显然,本机直接内存的分配不会受到Java堆大小的限制,但是,既然是内存,肯定还是会受到本机总内存(包括RAM以及SWAP区或者分页文件)大小以及处理器寻址空间的限制.服务器管理员在配置虚拟机参数时,会根据实际内存设置-Xmx等参数信息,但经常忽略直接内存,使得各个内存区域总和大于物理内存限制(包括物理的和操作系统级的限制),从而导致动态扩展时出现<code>OutOfMemoryError</code>异常.</p>\n<hr>\n<p>以上</p>\n","excerpt":"<p>　　Java虚拟机在执行Java程序的过程中会把它所管理的内存划分为若干个不同的数据区域.这些区域都有各自的用途,以及创建和销毁的时间.有的区域随着虚拟机进程的启动而存在,有些区域则依赖用户线程的启动和结束而建立和销毁.根据《Java虚拟机规范(JavaSE 7版)》的规定,Java虚拟机所管理的内存将会包括以下几个运行时数据区域.如下所示:<br><img src=\"/image/JVM/JVM_RunTime_Area.png\" alt=\"JVM内存区域\"><br>","more":"</p>\n<h3 id=\"程序计数器\"><a href=\"#程序计数器\" class=\"headerlink\" title=\"程序计数器\"></a>程序计数器</h3><p>　　<code>程序计数器</code>(Program Counter Register)是一块较小的内存空间,它可以看作是当前线程所执行的字节码的行号指示器.在虚拟机的概念模型里(仅是概念模型,各种虚拟机可能会通过一些更高效的方式去实现),字节码解释器工作时就是通过改变这个计数器的值来选取下一条需要执行的字节码指令,分支、循环、跳转、异常处理、线程恢复等基础功能都需要依赖这个计数器来完成.<br>由于Java虚拟机的多线程是通过线程轮流切换并分配处理器执行时间的方式来实现的,在任何一个确定的时刻,一个处理器(对于多核处理器来说是一个内核)都只会执行一条线程中的指令.因此,为了线程切换后能恢复到正确的执行位置,每条线程都需要有一个独立的程序计数器,各条线程之间计数器互不影响,独立存储,我们称这类内存区域为”线程私有”的内存.如果线程正在执行的是一个Java方法,这个计数器记录的是正在执行的虚拟机字节码指令的地址;如果正在执行的是Native方法,这个计数器值则为空(Undefined).此内存区域是唯一一个在Java虚拟机规范中没有规定任何<code>OutOfMemoryError</code>情况的区域.</p>\n<h3 id=\"Java虚拟机栈\"><a href=\"#Java虚拟机栈\" class=\"headerlink\" title=\"Java虚拟机栈\"></a>Java虚拟机栈</h3><p>　　与程序计数器一样,Java虚拟机栈(Java Virtual Machine Stacks)也是线程私有的,它的生命周期与线程相同.虚拟机栈描述的是Java方法执行的内存模型:每个方法在执行的同时都会创建一个栈帧(Stack Frame)用于存储局部变量表、操作数栈、动态链接、方法出口等信息.每一个方法从调用直至执行完成的过程,就对应着一个栈帧在虚拟机栈中入栈到出栈的过程.经常有人把Java内存区分为堆内存(Heap)和栈内存(Stack),这种分法比较粗糙,Java内存区域的划分实际上远比这复杂. 这种划分方式的流行只能说明大多数程序员最关注的、与对象内存分配关系最密切的内存区域是这两块.所指的”栈”就是现在讲的虚拟机栈,或者说是虚拟机栈中局部变量表部分.局部变量表存放了编译期可知的各种基本数据类型(boolean、byte、char、short、int、float、long、double)、对象引用(reference类型,它不等同于对象本身,可能是一个指向对象起始地址的引用指针,也可能是指向一个代表对象的句柄或其他与此对象相关的位置)和returnAddress类型(指向了一条字节码指令的地址).其中64位长度的long和double类型的数据会占用2个局部变量空间(Slot),其余的数据类型只占用1个. 局部变量表所需的内存空间在编译期间完成分配,当进入一个方法时,这个方法需要在帧中分配多大的局部变量空间是完全确定的,在方法运行期间不会改变局部变量表的大小.在Java虚拟机规范中,对这个区域规定了两种异常状况:如果线程请求的栈深度大于虚拟机所允许的深度,将抛出<code>StackOverflowError</code>异常;如果虚拟机栈可以动态扩展(当前大部分的Java虚拟机都可动态扩展,只不过Java虚拟机规范中也允许固定长度的虚拟机栈),如果扩展时无法申请到足够的内存,就会抛出<code>OutOfMemoryError</code>异常.</p>\n<h3 id=\"本地方法栈\"><a href=\"#本地方法栈\" class=\"headerlink\" title=\"本地方法栈\"></a>本地方法栈</h3><p>　　本地方法栈(Native Method Stack)与虚拟机栈所发挥的作用是非常相似的,它们之间的区别不过是虚拟机栈为虚拟机执行Java方法(也就是字节码)服务,而本地方法栈则为虚拟机使用到的Native方法服务. 在虚拟机规范中对本地方法栈中方法使用的语言、 使用方式与数据结构并没有强制规定,因此具体的虚拟机可以自由实现它. 甚至有的虚拟机(譬如Sun HotSpot虚拟机)直接就把本地方法栈和虚拟机栈合二为一. 与虚拟机栈一样,本地方法栈区域也会抛出<code>StackOverflowError</code>和<code>OutOfMemoryError</code>异常.</p>\n<h3 id=\"Java堆\"><a href=\"#Java堆\" class=\"headerlink\" title=\"Java堆\"></a>Java堆</h3><p>　　对于大多数应用来说,Java堆(Java Heap)是Java虚拟机所管理的内存中最大的一块.Java堆是被所有线程共享的一块内存区域,在虚拟机启动时创建.此内存区域的唯一目的就是存放对象实例,几乎所有的对象实例都在这里分配内存.这一点在Java虚拟机规范中的描述是:所有的对象实例以及数组都要在堆上分配,但是随着JIT编译器的发展与逃逸分析技术逐渐成熟,栈上分配、标量替换优化技术将会导致一些微妙的变化发生,所有的对象都分配在堆上也渐渐变得不是那么”绝对”了.Java堆是垃圾收集器管理的主要区域,因此很多时候也被称做”GC堆”(Garbage Collected Heap).从内存回收的角度来看,由于现在收集器基本都采用分代收集算法,所以Java堆中还可以细分为:新生代和老年代;再细致一点的有Eden空间、From Survivor空间、To Survivor空间等.从内存分配的角度来看,线程共享的Java堆中可能划分出多个线程私有的分配缓冲区(Thread Local Allocation Buffer,TLAB).不过无论如何划分,都与存放内容无关,无论哪个区域,存储的都仍然是对象实例,进一步划分的目的是为了更好地回收内存,或者更快地分配内存.根据Java虚拟机规范的规定,Java堆可以处于物理上不连续的内存空间中,只要逻辑上是连续的即可,就像我们的磁盘空间一样.在实现时,既可以实现成固定大小的,也可以是可扩展的,不过当前主流的虚拟机都是按照可扩展来实现的(通过-Xmx和-Xms控制). 如果在堆中没有内存完成实例分配,并且堆也无法再扩展时,将会抛出<code>OutOfMemoryError</code>异常.</p>\n<h3 id=\"方法区\"><a href=\"#方法区\" class=\"headerlink\" title=\"方法区\"></a>方法区</h3><p>　　方法区(Method Area)与Java堆一样,是各个线程共享的内存区域,它用于存储已被虚拟机加载的类信息、常量、静态变量、即时编译器编译后的代码等数据.虽然Java虚拟机规范把方法区描述为堆的一个逻辑部分,但是它却有一个别名叫做Non-Heap(非堆),目的应该是与Java堆区分开来.对于习惯在HotSpot虚拟机上开发、 部署程序的开发者来说,很多人都更愿意把方法区称为”永久代”(Permanent Generation),本质上两者并不等价,仅仅是因为HotSpot虚拟机的设计团队选择把GC分代收集扩展至方法区,或者说使用永久代来实现方法区而已,这样HotSpot的垃圾收集器可以像管理Java堆一样管理这部分内存,能够省去专门为方法区编写内存管理代码的工作.对于其他虚拟机(如BEA JRockit、 IBM J9等)来说是不存在永久代的概念的.原则上,如何实现方法区属于虚拟机实现细节,不受虚拟机规范约束,但使用永久代来实现方法区,现在看来并不是一个好主意,因为这样更容易遇到内存溢出问题(永久代有-XX:MaxPermSize的上限,J9和JRockit只要没有触碰到进程可用内存的上限,例如32位系统中的4GB,就不会出现问题),而且有极少数方法(例如String.intern())会因这个原因导致不同虚拟机下有不同的表现. 因此,对于HotSpot虚拟机,根据官方发布的路线图信息,现在也有放弃永久代并逐步改为采用Native Memory来实现方法区的规划了,在目前已经发布的JDK1.7的HotSpot中,已经把原本放在永久代的字符串常量池移出.Java虚拟机规范对方法区的限制非常宽松,除了和Java堆一样不需要连续的内存和可以选择固定大小或者可扩展外,还可以选择不实现垃圾收集.相对而言,垃圾收集行为在这个区域是比较少出现的,但并非数据进入了方法区就如永久代的名字一样”永久”存在了.这区域的内存回收目标主要是针对常量池的回收和对类型的卸载,一般来说,这个区域的回收”成绩”比较难以令人满意,尤其是类型的卸载,条件相当苛刻,但是这部分区域的回收确实是必要的.根据Java虚拟机规范的规定,当方法区无法满足内存分配需求时,将抛出<code>OutOfMemoryError</code>异常.</p>\n<h3 id=\"运行时常量池\"><a href=\"#运行时常量池\" class=\"headerlink\" title=\"运行时常量池\"></a>运行时常量池</h3><p>　　运行时常量池(Runtime Constant Pool)是方法区的一部分. Class文件中除了有类的版本、字段、方法、接口等描述信息外,还有一项信息是常量池(Constant Pool Table),用于存放编译期生成的各种字面量和符号引用,这部分内容将在类加载后进入方法区的运行时常量池中存放.Java虚拟机对Class文件每一部分(自然也包括常量池)的格式都有严格规定,每一个字节用于存储哪种数据都必须符合规范上的要求才会被虚拟机认可、装载和执行,但对于运行时常量池,Java虚拟机规范没有做任何细节的要求,不同的提供商实现的虚拟机可以按照自己的需要来实现这个内存区域.不过,一般来说,除了保存Class文件中描述的符号引用外,还会把翻译出来的直接引用也存储在运行时常量池中.运行时常量池相对于Class文件常量池的另外一个重要特征是具备动态性,Java语言并不要求常量一定只有编译期才能产生,也就是并非预置入Class文件中常量池的内容才能进入方法区运行时常量池,运行期间也可能将新的常量放入池中,这种特性被开发人员利用得比较多的便是String类的intern()方法.既然运行时常量池是方法区的一部分,自然受到方法区内存的限制,当常量池无法再申请到内存时会抛出<code>OutOfMemoryError</code>异常.</p>\n<h3 id=\"直接内存\"><a href=\"#直接内存\" class=\"headerlink\" title=\"直接内存\"></a>直接内存</h3><p>　　直接内存(Direct Memory)并不是虚拟机运行时数据区的一部分,也不是Java虚拟机规范中定义的内存区域.但是这部分内存也被频繁地使用,而且也可能导致<code>OutOfMemoryError</code>异常出现,所以我们放到这里一起讲解.在JDK 1.4中新加入了NIO(New Input/Output)类,引入了一种基于通道(Channel)与缓冲区(Buffer)的I/O方式,它可以使用Native函数库直接分配堆外内存,然后通过一个存储在Java堆中的DirectByteBuffer对象作为这块内存的引用进行操作.这样能在一些场景中显著提高性能,因为避免了在Java堆和Native堆中来回复制数据.显然,本机直接内存的分配不会受到Java堆大小的限制,但是,既然是内存,肯定还是会受到本机总内存(包括RAM以及SWAP区或者分页文件)大小以及处理器寻址空间的限制.服务器管理员在配置虚拟机参数时,会根据实际内存设置-Xmx等参数信息,但经常忽略直接内存,使得各个内存区域总和大于物理内存限制(包括物理的和操作系统级的限制),从而导致动态扩展时出现<code>OutOfMemoryError</code>异常.</p>\n<hr>\n<p>以上</p>"},{"title":"JVM垃圾回收-对象已死？","date":"2017-03-29T09:23:36.000Z","_content":"　　在堆里面存放着Java世界中几乎所有的对象实例，垃圾收集器在对堆进行回收前，第一件事情就是要确定这些对象之中哪些还`存活`着，哪些已经`死去`(即不能再被任何途径使用的对象)。\n<!--more-->\n### 引用计数算法\n　　很多教科书判断对象是否存活的算法是这样的：给对象中添加一个引用计数器，每当有一个地方引用它时，计数器值就加1;当引用失效时，计数器就减1；任何时刻计数器为0的对象就是不可能再被使用的。\n客观来讲，引用计数法(Reference Counting)的实现简单，判定效率也很高，在大部分情况下它都是一个不错的算法，但是，至少主流的Java虚拟机里面没有选用引用计数器算法来管理内存，其中主要的原因是它很难解决对象之间相互循环引用的问题。\n### 可达性分析算法\n　　在主流的商用程序语言的主流实现中，都是通过可达性分析(Reachability Analysis)来判定对象是否存活的。这个算吗的基本思路就是通过一系列的称为`GC Roots`的对象作为起始点，从这些节点开始向下搜索，搜索所走过的路径称为引用链(Reference Chain),当一个对象到GC Roots没有任何引用链相连时(在图论中，就是从GC Roots到这个对象不可达)，则证明此对象是不可用的。在Java语言中，可作为GC Roots的对象包括一下几种：\n* 虚拟机栈(栈帧中的本地变量表)中引用的对象。\n* 方法区中静态属性引用的对象。\n* 方法区中常量引用的对象。\n* 本地方法栈中JNI(一般说的Native方法)引用的对象\n\n### 生存还是死亡\n　　即使在可达性分析算法中不可达的对象，也并非是非死不可的，这时候他们暂时处于缓刑阶段，要真正宣告一个对象死亡，至少要经历两次标记过程：如果对象在进行可达性分析后发现没有与GC Roots相连接的引用链，那它将会被第一次标记并且进行一次筛选，筛选的条件是此对象是否有必要执行finalize()方法。当对象没有覆盖finalize()方法，或者finalize()方法已经被虚拟机调用过，虚拟机将这两种情况都视为\"没有必要执行\"。\n如果这个对象呗判定为有必要执行finalize()方法，那么这个对象将会放置在一个叫做`F-Queue`的队列之中，并在稍后由一个虚拟机自动建立的、优先级低的Finalizer线程去执行它。这里所谓的执行是指虚拟机会触发这个方法，但并不承诺会等待它运行结束，这样做的原因是：如果一个对象在finalize()方法中执行缓慢，或者发生了死循环，将很可能会导致`F-Queue`队列中其他对象永久处于等待，甚至导致整个内存回收系统崩溃。finalize()方法是对象 逃脱死亡命运的最后一次机会，稍后GC将对`F-Queue`中的对象进行第二次小规模的标记。\n### 回收方法区\n　　很多人认为方法区是没有垃圾收集的，Java虚拟机规范中确实说过可以不要求虚拟机方法区实现垃圾收集，而且在方法区中进行垃圾收集的性价比一般比较低：在堆中，尤其是在新生代中，常规应用进行一次垃圾收集一般可以回收70%-95%的空间，而永久代的垃圾收集效率远低于此。\n永久代的垃圾收集主要回收两部分内容：废弃常量和无用的类。回收废弃常量与回收Java堆中的对象非常类似。以常量池中字面量的回收为例：假如一个字符串\"ABC\"已经进入了常量池中，但是当前系统没有任何一个String对象是叫做\"ABC\"的，换句话说，就是没有任何String对象引用常量池中的\"ABC\"常量，也没有其他地方引用了这个字面量，如果这时繁盛内存回收，而且必要的话，这个\"ABC\"常量就会被系统清理出常量池，常量池中的其他类、方法、字段的符号引用也与此类似。\n判定一个常量是否是\"废弃常量\"比较简单，而要判定一个类是否是\"无用的类\"的条件则相对苛刻许多。类需要同时满足下面三个调教才能算是\"无用的类\"：\n* 该类所有的实例都已经被回收，也就是Java堆中不存在该类的任何实例。\n* 加载该类的ClassLoader已经被回收。\n* 该类对用的java.lang.Class对象没有在任何对方被引用，无法在任何地方通过反射访问该类的方法。\n　　虚拟机可以对满足上述3个条件的无用类进行回收，这里说的仅仅是“可以”，而并不是和对象一样，不使用了就必然会回收。 是否对类进行回收，HotSpot虚拟机提供了-Xnoclassgc参数进行控制，还可以使用-verbose：class以及-XX：+TraceClassLoading、 -XX：+TraceClassUnLoading查看类加载和卸载信息，其中-verbose：class和-XX：+TraceClassLoading可以在Product版的虚拟机中使用，-XX：+TraceClassUnLoading参数需要FastDebug版的虚拟机支持。在大量使用反射、 动态代理、 CGLib等ByteCode框架、 动态生成JSP以及OSGi这类频繁自定义ClassLoader的场景都需要虚拟机具备类卸载的功能，以保证永久代不会溢出。\n----\n以上\n","source":"_posts/JVM垃圾回收-对象已死？.md","raw":"---\ntitle: JVM垃圾回收-对象已死？\ndate: 2017-03-29 17:23:36\ntags: [Java,JVM]\n---\n　　在堆里面存放着Java世界中几乎所有的对象实例，垃圾收集器在对堆进行回收前，第一件事情就是要确定这些对象之中哪些还`存活`着，哪些已经`死去`(即不能再被任何途径使用的对象)。\n<!--more-->\n### 引用计数算法\n　　很多教科书判断对象是否存活的算法是这样的：给对象中添加一个引用计数器，每当有一个地方引用它时，计数器值就加1;当引用失效时，计数器就减1；任何时刻计数器为0的对象就是不可能再被使用的。\n客观来讲，引用计数法(Reference Counting)的实现简单，判定效率也很高，在大部分情况下它都是一个不错的算法，但是，至少主流的Java虚拟机里面没有选用引用计数器算法来管理内存，其中主要的原因是它很难解决对象之间相互循环引用的问题。\n### 可达性分析算法\n　　在主流的商用程序语言的主流实现中，都是通过可达性分析(Reachability Analysis)来判定对象是否存活的。这个算吗的基本思路就是通过一系列的称为`GC Roots`的对象作为起始点，从这些节点开始向下搜索，搜索所走过的路径称为引用链(Reference Chain),当一个对象到GC Roots没有任何引用链相连时(在图论中，就是从GC Roots到这个对象不可达)，则证明此对象是不可用的。在Java语言中，可作为GC Roots的对象包括一下几种：\n* 虚拟机栈(栈帧中的本地变量表)中引用的对象。\n* 方法区中静态属性引用的对象。\n* 方法区中常量引用的对象。\n* 本地方法栈中JNI(一般说的Native方法)引用的对象\n\n### 生存还是死亡\n　　即使在可达性分析算法中不可达的对象，也并非是非死不可的，这时候他们暂时处于缓刑阶段，要真正宣告一个对象死亡，至少要经历两次标记过程：如果对象在进行可达性分析后发现没有与GC Roots相连接的引用链，那它将会被第一次标记并且进行一次筛选，筛选的条件是此对象是否有必要执行finalize()方法。当对象没有覆盖finalize()方法，或者finalize()方法已经被虚拟机调用过，虚拟机将这两种情况都视为\"没有必要执行\"。\n如果这个对象呗判定为有必要执行finalize()方法，那么这个对象将会放置在一个叫做`F-Queue`的队列之中，并在稍后由一个虚拟机自动建立的、优先级低的Finalizer线程去执行它。这里所谓的执行是指虚拟机会触发这个方法，但并不承诺会等待它运行结束，这样做的原因是：如果一个对象在finalize()方法中执行缓慢，或者发生了死循环，将很可能会导致`F-Queue`队列中其他对象永久处于等待，甚至导致整个内存回收系统崩溃。finalize()方法是对象 逃脱死亡命运的最后一次机会，稍后GC将对`F-Queue`中的对象进行第二次小规模的标记。\n### 回收方法区\n　　很多人认为方法区是没有垃圾收集的，Java虚拟机规范中确实说过可以不要求虚拟机方法区实现垃圾收集，而且在方法区中进行垃圾收集的性价比一般比较低：在堆中，尤其是在新生代中，常规应用进行一次垃圾收集一般可以回收70%-95%的空间，而永久代的垃圾收集效率远低于此。\n永久代的垃圾收集主要回收两部分内容：废弃常量和无用的类。回收废弃常量与回收Java堆中的对象非常类似。以常量池中字面量的回收为例：假如一个字符串\"ABC\"已经进入了常量池中，但是当前系统没有任何一个String对象是叫做\"ABC\"的，换句话说，就是没有任何String对象引用常量池中的\"ABC\"常量，也没有其他地方引用了这个字面量，如果这时繁盛内存回收，而且必要的话，这个\"ABC\"常量就会被系统清理出常量池，常量池中的其他类、方法、字段的符号引用也与此类似。\n判定一个常量是否是\"废弃常量\"比较简单，而要判定一个类是否是\"无用的类\"的条件则相对苛刻许多。类需要同时满足下面三个调教才能算是\"无用的类\"：\n* 该类所有的实例都已经被回收，也就是Java堆中不存在该类的任何实例。\n* 加载该类的ClassLoader已经被回收。\n* 该类对用的java.lang.Class对象没有在任何对方被引用，无法在任何地方通过反射访问该类的方法。\n　　虚拟机可以对满足上述3个条件的无用类进行回收，这里说的仅仅是“可以”，而并不是和对象一样，不使用了就必然会回收。 是否对类进行回收，HotSpot虚拟机提供了-Xnoclassgc参数进行控制，还可以使用-verbose：class以及-XX：+TraceClassLoading、 -XX：+TraceClassUnLoading查看类加载和卸载信息，其中-verbose：class和-XX：+TraceClassLoading可以在Product版的虚拟机中使用，-XX：+TraceClassUnLoading参数需要FastDebug版的虚拟机支持。在大量使用反射、 动态代理、 CGLib等ByteCode框架、 动态生成JSP以及OSGi这类频繁自定义ClassLoader的场景都需要虚拟机具备类卸载的功能，以保证永久代不会溢出。\n----\n以上\n","slug":"JVM垃圾回收-对象已死？","published":1,"updated":"2017-12-30T13:13:07.224Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjbvyt3ug0008scdgl4z30rea","content":"<p>　　在堆里面存放着Java世界中几乎所有的对象实例，垃圾收集器在对堆进行回收前，第一件事情就是要确定这些对象之中哪些还<code>存活</code>着，哪些已经<code>死去</code>(即不能再被任何途径使用的对象)。<br><a id=\"more\"></a></p>\n<h3 id=\"引用计数算法\"><a href=\"#引用计数算法\" class=\"headerlink\" title=\"引用计数算法\"></a>引用计数算法</h3><p>　　很多教科书判断对象是否存活的算法是这样的：给对象中添加一个引用计数器，每当有一个地方引用它时，计数器值就加1;当引用失效时，计数器就减1；任何时刻计数器为0的对象就是不可能再被使用的。<br>客观来讲，引用计数法(Reference Counting)的实现简单，判定效率也很高，在大部分情况下它都是一个不错的算法，但是，至少主流的Java虚拟机里面没有选用引用计数器算法来管理内存，其中主要的原因是它很难解决对象之间相互循环引用的问题。</p>\n<h3 id=\"可达性分析算法\"><a href=\"#可达性分析算法\" class=\"headerlink\" title=\"可达性分析算法\"></a>可达性分析算法</h3><p>　　在主流的商用程序语言的主流实现中，都是通过可达性分析(Reachability Analysis)来判定对象是否存活的。这个算吗的基本思路就是通过一系列的称为<code>GC Roots</code>的对象作为起始点，从这些节点开始向下搜索，搜索所走过的路径称为引用链(Reference Chain),当一个对象到GC Roots没有任何引用链相连时(在图论中，就是从GC Roots到这个对象不可达)，则证明此对象是不可用的。在Java语言中，可作为GC Roots的对象包括一下几种：</p>\n<ul>\n<li>虚拟机栈(栈帧中的本地变量表)中引用的对象。</li>\n<li>方法区中静态属性引用的对象。</li>\n<li>方法区中常量引用的对象。</li>\n<li>本地方法栈中JNI(一般说的Native方法)引用的对象</li>\n</ul>\n<h3 id=\"生存还是死亡\"><a href=\"#生存还是死亡\" class=\"headerlink\" title=\"生存还是死亡\"></a>生存还是死亡</h3><p>　　即使在可达性分析算法中不可达的对象，也并非是非死不可的，这时候他们暂时处于缓刑阶段，要真正宣告一个对象死亡，至少要经历两次标记过程：如果对象在进行可达性分析后发现没有与GC Roots相连接的引用链，那它将会被第一次标记并且进行一次筛选，筛选的条件是此对象是否有必要执行finalize()方法。当对象没有覆盖finalize()方法，或者finalize()方法已经被虚拟机调用过，虚拟机将这两种情况都视为”没有必要执行”。<br>如果这个对象呗判定为有必要执行finalize()方法，那么这个对象将会放置在一个叫做<code>F-Queue</code>的队列之中，并在稍后由一个虚拟机自动建立的、优先级低的Finalizer线程去执行它。这里所谓的执行是指虚拟机会触发这个方法，但并不承诺会等待它运行结束，这样做的原因是：如果一个对象在finalize()方法中执行缓慢，或者发生了死循环，将很可能会导致<code>F-Queue</code>队列中其他对象永久处于等待，甚至导致整个内存回收系统崩溃。finalize()方法是对象 逃脱死亡命运的最后一次机会，稍后GC将对<code>F-Queue</code>中的对象进行第二次小规模的标记。</p>\n<h3 id=\"回收方法区\"><a href=\"#回收方法区\" class=\"headerlink\" title=\"回收方法区\"></a>回收方法区</h3><p>　　很多人认为方法区是没有垃圾收集的，Java虚拟机规范中确实说过可以不要求虚拟机方法区实现垃圾收集，而且在方法区中进行垃圾收集的性价比一般比较低：在堆中，尤其是在新生代中，常规应用进行一次垃圾收集一般可以回收70%-95%的空间，而永久代的垃圾收集效率远低于此。<br>永久代的垃圾收集主要回收两部分内容：废弃常量和无用的类。回收废弃常量与回收Java堆中的对象非常类似。以常量池中字面量的回收为例：假如一个字符串”ABC”已经进入了常量池中，但是当前系统没有任何一个String对象是叫做”ABC”的，换句话说，就是没有任何String对象引用常量池中的”ABC”常量，也没有其他地方引用了这个字面量，如果这时繁盛内存回收，而且必要的话，这个”ABC”常量就会被系统清理出常量池，常量池中的其他类、方法、字段的符号引用也与此类似。<br>判定一个常量是否是”废弃常量”比较简单，而要判定一个类是否是”无用的类”的条件则相对苛刻许多。类需要同时满足下面三个调教才能算是”无用的类”：</p>\n<ul>\n<li>该类所有的实例都已经被回收，也就是Java堆中不存在该类的任何实例。</li>\n<li>加载该类的ClassLoader已经被回收。</li>\n<li>该类对用的java.lang.Class对象没有在任何对方被引用，无法在任何地方通过反射访问该类的方法。<br>　　虚拟机可以对满足上述3个条件的无用类进行回收，这里说的仅仅是“可以”，而并不是和对象一样，不使用了就必然会回收。 是否对类进行回收，HotSpot虚拟机提供了-Xnoclassgc参数进行控制，还可以使用-verbose：class以及-XX：+TraceClassLoading、 -XX：+TraceClassUnLoading查看类加载和卸载信息，其中-verbose：class和-XX：+TraceClassLoading可以在Product版的虚拟机中使用，-XX：+TraceClassUnLoading参数需要FastDebug版的虚拟机支持。在大量使用反射、 动态代理、 CGLib等ByteCode框架、 动态生成JSP以及OSGi这类频繁自定义ClassLoader的场景都需要虚拟机具备类卸载的功能，以保证永久代不会溢出。</li>\n</ul>\n<hr>\n<p>以上</p>\n","excerpt":"<p>　　在堆里面存放着Java世界中几乎所有的对象实例，垃圾收集器在对堆进行回收前，第一件事情就是要确定这些对象之中哪些还<code>存活</code>着，哪些已经<code>死去</code>(即不能再被任何途径使用的对象)。<br>","more":"</p>\n<h3 id=\"引用计数算法\"><a href=\"#引用计数算法\" class=\"headerlink\" title=\"引用计数算法\"></a>引用计数算法</h3><p>　　很多教科书判断对象是否存活的算法是这样的：给对象中添加一个引用计数器，每当有一个地方引用它时，计数器值就加1;当引用失效时，计数器就减1；任何时刻计数器为0的对象就是不可能再被使用的。<br>客观来讲，引用计数法(Reference Counting)的实现简单，判定效率也很高，在大部分情况下它都是一个不错的算法，但是，至少主流的Java虚拟机里面没有选用引用计数器算法来管理内存，其中主要的原因是它很难解决对象之间相互循环引用的问题。</p>\n<h3 id=\"可达性分析算法\"><a href=\"#可达性分析算法\" class=\"headerlink\" title=\"可达性分析算法\"></a>可达性分析算法</h3><p>　　在主流的商用程序语言的主流实现中，都是通过可达性分析(Reachability Analysis)来判定对象是否存活的。这个算吗的基本思路就是通过一系列的称为<code>GC Roots</code>的对象作为起始点，从这些节点开始向下搜索，搜索所走过的路径称为引用链(Reference Chain),当一个对象到GC Roots没有任何引用链相连时(在图论中，就是从GC Roots到这个对象不可达)，则证明此对象是不可用的。在Java语言中，可作为GC Roots的对象包括一下几种：</p>\n<ul>\n<li>虚拟机栈(栈帧中的本地变量表)中引用的对象。</li>\n<li>方法区中静态属性引用的对象。</li>\n<li>方法区中常量引用的对象。</li>\n<li>本地方法栈中JNI(一般说的Native方法)引用的对象</li>\n</ul>\n<h3 id=\"生存还是死亡\"><a href=\"#生存还是死亡\" class=\"headerlink\" title=\"生存还是死亡\"></a>生存还是死亡</h3><p>　　即使在可达性分析算法中不可达的对象，也并非是非死不可的，这时候他们暂时处于缓刑阶段，要真正宣告一个对象死亡，至少要经历两次标记过程：如果对象在进行可达性分析后发现没有与GC Roots相连接的引用链，那它将会被第一次标记并且进行一次筛选，筛选的条件是此对象是否有必要执行finalize()方法。当对象没有覆盖finalize()方法，或者finalize()方法已经被虚拟机调用过，虚拟机将这两种情况都视为”没有必要执行”。<br>如果这个对象呗判定为有必要执行finalize()方法，那么这个对象将会放置在一个叫做<code>F-Queue</code>的队列之中，并在稍后由一个虚拟机自动建立的、优先级低的Finalizer线程去执行它。这里所谓的执行是指虚拟机会触发这个方法，但并不承诺会等待它运行结束，这样做的原因是：如果一个对象在finalize()方法中执行缓慢，或者发生了死循环，将很可能会导致<code>F-Queue</code>队列中其他对象永久处于等待，甚至导致整个内存回收系统崩溃。finalize()方法是对象 逃脱死亡命运的最后一次机会，稍后GC将对<code>F-Queue</code>中的对象进行第二次小规模的标记。</p>\n<h3 id=\"回收方法区\"><a href=\"#回收方法区\" class=\"headerlink\" title=\"回收方法区\"></a>回收方法区</h3><p>　　很多人认为方法区是没有垃圾收集的，Java虚拟机规范中确实说过可以不要求虚拟机方法区实现垃圾收集，而且在方法区中进行垃圾收集的性价比一般比较低：在堆中，尤其是在新生代中，常规应用进行一次垃圾收集一般可以回收70%-95%的空间，而永久代的垃圾收集效率远低于此。<br>永久代的垃圾收集主要回收两部分内容：废弃常量和无用的类。回收废弃常量与回收Java堆中的对象非常类似。以常量池中字面量的回收为例：假如一个字符串”ABC”已经进入了常量池中，但是当前系统没有任何一个String对象是叫做”ABC”的，换句话说，就是没有任何String对象引用常量池中的”ABC”常量，也没有其他地方引用了这个字面量，如果这时繁盛内存回收，而且必要的话，这个”ABC”常量就会被系统清理出常量池，常量池中的其他类、方法、字段的符号引用也与此类似。<br>判定一个常量是否是”废弃常量”比较简单，而要判定一个类是否是”无用的类”的条件则相对苛刻许多。类需要同时满足下面三个调教才能算是”无用的类”：</p>\n<ul>\n<li>该类所有的实例都已经被回收，也就是Java堆中不存在该类的任何实例。</li>\n<li>加载该类的ClassLoader已经被回收。</li>\n<li>该类对用的java.lang.Class对象没有在任何对方被引用，无法在任何地方通过反射访问该类的方法。<br>　　虚拟机可以对满足上述3个条件的无用类进行回收，这里说的仅仅是“可以”，而并不是和对象一样，不使用了就必然会回收。 是否对类进行回收，HotSpot虚拟机提供了-Xnoclassgc参数进行控制，还可以使用-verbose：class以及-XX：+TraceClassLoading、 -XX：+TraceClassUnLoading查看类加载和卸载信息，其中-verbose：class和-XX：+TraceClassLoading可以在Product版的虚拟机中使用，-XX：+TraceClassUnLoading参数需要FastDebug版的虚拟机支持。在大量使用反射、 动态代理、 CGLib等ByteCode框架、 动态生成JSP以及OSGi这类频繁自定义ClassLoader的场景都需要虚拟机具备类卸载的功能，以保证永久代不会溢出。</li>\n</ul>\n<hr>\n<p>以上</p>"},{"title":"JVM-内存分配与回收策略","date":"2017-04-07T07:27:46.000Z","_content":"　　Java技术体系中所提倡的自动内存管理最终可以归结为自动化的解决了两个问题：给对象分配内存以及回收分配给对象的内存。对象的内存分配，往大方向讲，就是在堆上分配(但也可能经过JIT编译后被拆散为标量类型并间接地栈上分配)，对象主要分配在新生代的Eden区上，如果启动了本地线程分配缓冲，将按线程优先在TLAB上分配。少数情况下也可能会直接分配在老年代中，分配的规则并不是百分百固定的，其细节取决于当前使用的是哪一种垃圾回收器组合，还有虚拟机中与内存相关的参数设置。\n<!--more-->\n### 对象优先在Eden分配\n　　大多数情况下，对象在新生代Eden区中分配，当Eden区没有足够空间进行分配时，虚拟机将发起一次Minor GC。虚拟机提供了-XX：+PrintGCDetails这个收集器日志参数，告诉虚拟机在发生垃圾收集行为时打印内存回收日志，并且在进程退出的时候输出当前的内存各区域分配情况。\n　　新生代GC(Minor GC):指发生在新生代的垃圾收集动作，因为Java对象大多都具备朝生夕灭的特性，所以Minor GC非常频繁，一般回收速度也比较快。\n　　老年代GC(Major GC/Full GC):指发生在老年代的GC，出现了Major GC，经常会伴随至少一次的Minor GC，(但非绝对的，在Parallel Scavenge收集器的手机策略里就有直接进行Major GC的策略选择过程)。Major GC的速度一般会比Minor GC慢10倍以上。\n### 大对象直接进入老年代\n　　所谓的大对象是指，需要大量连续内存空间的Java对象，最典型的大对象就是那种很长的字符串以及数组，大对象对虚拟机的内存分配来说就是一个坏消息，经常出现大对象容易导致内存还有不少空间时就提前出发垃圾收集以获取足够的连续空间来\"安置\"它们。\n### 长期存活的对象将进入老年代\n　　既然虚拟机采用了分代收集的思想来管理内存，那么内存回收时就必须能识别哪些对象应放在新生代，哪些对象应放在老年代中。为了做到这点，虚拟机给每个对象定义了一个对象年龄(Age)计数器。如果对象在Eden出生并经过第一个Minor GC后仍然存活，并且能被Survivor容纳的话，将被移动到Survivor空间中，并且对象年龄设为1。对象在Survivor区中每经过一个Minor GC，年龄就增加1岁，当它的年龄增加到一定程度(默认是15岁)，就会被晋升到老年代中。对象晋升老年代的年龄阈值，可以通过参数-XX：\nMaxTenuringThreshold设置。\n### 动态对象年龄判定\n　　为了能更好的适应不同程序的内存状况，虚拟机并不是永远的要求对象的年龄必须达到了MaxTenuringThreshold才能晋升到老年代，如果Survivor空间中相同的年龄所有对象大小的总和大于Survivor空间的一般，年龄大于或等于改年龄的对象就可以直接进入老年代，无序等到MaxTenuringThreshold中要求的年龄。\n### 空间分配担保\n　　在发生Minor GC之前，虚拟机会先检查老年代最大可用的连续空间是否大于新生代所有对象总空间，如果这个条件成立，那么Minor GC可以确保是安全的。如果不成立，则虚拟机会查看HandlePromotionFailure设置值是否允许担保失败。如果允许，那么会继续检查老年代最大可用的连续空间是否大于历次晋升到老年代对象的平均大小，如果大于，将尝试着进行一次Minor GC，尽管这次Minor GC是有风险的；如果小于，或者HandlePromotionFailure设置不允许冒险，那这时也要改为进行一次Full GC。\n新生代使用复制收集算法，但为了内存利用率，只使用其中一个Survivor空间来作为轮换备份，因此当出现大量对象在Minor GC后仍然存活的情况(最极端的情况就是内存回收后新生代中所有对象都存活)，就需要老年代进行分配担保，把Survivor无法容纳的对象直接进入老年代。 与生活中的贷款担保类似，老年代要进行这样的担保，前提是老年代本身还有容纳这些对象的剩余空间，一共有多少对象会活下来在实际完成内存回收之前是无法明确知道的，所以只好取之前每一次回收晋升到老年代对象容量的平均大小值作为经验值，与老年代的剩余空间进行比较，决定是否进行Full GC来让老年代腾出更多空间。\n取平均值进行比较其实仍然是一种动态概率的手段，也就是说，如果某次Minor GC存活后的对象突增，远远高于平均值的话，依然会导致担保失败(Handle Promotion Failure)。如果出现了HandlePromotionFailure失败，那就只好在失败后重新发起一次Full GC。 虽然担保失败时绕的圈子是最大的，但大部分情况下都还是会将HandlePromotionFailure开关打开，避免Full GC过于频繁。\n\n----\n以上\n","source":"_posts/JVM-内存分配与回收策略.md","raw":"---\ntitle: JVM-内存分配与回收策略\ndate: 2017-04-07 15:27:46\ntags: [java,JVM]\n---\n　　Java技术体系中所提倡的自动内存管理最终可以归结为自动化的解决了两个问题：给对象分配内存以及回收分配给对象的内存。对象的内存分配，往大方向讲，就是在堆上分配(但也可能经过JIT编译后被拆散为标量类型并间接地栈上分配)，对象主要分配在新生代的Eden区上，如果启动了本地线程分配缓冲，将按线程优先在TLAB上分配。少数情况下也可能会直接分配在老年代中，分配的规则并不是百分百固定的，其细节取决于当前使用的是哪一种垃圾回收器组合，还有虚拟机中与内存相关的参数设置。\n<!--more-->\n### 对象优先在Eden分配\n　　大多数情况下，对象在新生代Eden区中分配，当Eden区没有足够空间进行分配时，虚拟机将发起一次Minor GC。虚拟机提供了-XX：+PrintGCDetails这个收集器日志参数，告诉虚拟机在发生垃圾收集行为时打印内存回收日志，并且在进程退出的时候输出当前的内存各区域分配情况。\n　　新生代GC(Minor GC):指发生在新生代的垃圾收集动作，因为Java对象大多都具备朝生夕灭的特性，所以Minor GC非常频繁，一般回收速度也比较快。\n　　老年代GC(Major GC/Full GC):指发生在老年代的GC，出现了Major GC，经常会伴随至少一次的Minor GC，(但非绝对的，在Parallel Scavenge收集器的手机策略里就有直接进行Major GC的策略选择过程)。Major GC的速度一般会比Minor GC慢10倍以上。\n### 大对象直接进入老年代\n　　所谓的大对象是指，需要大量连续内存空间的Java对象，最典型的大对象就是那种很长的字符串以及数组，大对象对虚拟机的内存分配来说就是一个坏消息，经常出现大对象容易导致内存还有不少空间时就提前出发垃圾收集以获取足够的连续空间来\"安置\"它们。\n### 长期存活的对象将进入老年代\n　　既然虚拟机采用了分代收集的思想来管理内存，那么内存回收时就必须能识别哪些对象应放在新生代，哪些对象应放在老年代中。为了做到这点，虚拟机给每个对象定义了一个对象年龄(Age)计数器。如果对象在Eden出生并经过第一个Minor GC后仍然存活，并且能被Survivor容纳的话，将被移动到Survivor空间中，并且对象年龄设为1。对象在Survivor区中每经过一个Minor GC，年龄就增加1岁，当它的年龄增加到一定程度(默认是15岁)，就会被晋升到老年代中。对象晋升老年代的年龄阈值，可以通过参数-XX：\nMaxTenuringThreshold设置。\n### 动态对象年龄判定\n　　为了能更好的适应不同程序的内存状况，虚拟机并不是永远的要求对象的年龄必须达到了MaxTenuringThreshold才能晋升到老年代，如果Survivor空间中相同的年龄所有对象大小的总和大于Survivor空间的一般，年龄大于或等于改年龄的对象就可以直接进入老年代，无序等到MaxTenuringThreshold中要求的年龄。\n### 空间分配担保\n　　在发生Minor GC之前，虚拟机会先检查老年代最大可用的连续空间是否大于新生代所有对象总空间，如果这个条件成立，那么Minor GC可以确保是安全的。如果不成立，则虚拟机会查看HandlePromotionFailure设置值是否允许担保失败。如果允许，那么会继续检查老年代最大可用的连续空间是否大于历次晋升到老年代对象的平均大小，如果大于，将尝试着进行一次Minor GC，尽管这次Minor GC是有风险的；如果小于，或者HandlePromotionFailure设置不允许冒险，那这时也要改为进行一次Full GC。\n新生代使用复制收集算法，但为了内存利用率，只使用其中一个Survivor空间来作为轮换备份，因此当出现大量对象在Minor GC后仍然存活的情况(最极端的情况就是内存回收后新生代中所有对象都存活)，就需要老年代进行分配担保，把Survivor无法容纳的对象直接进入老年代。 与生活中的贷款担保类似，老年代要进行这样的担保，前提是老年代本身还有容纳这些对象的剩余空间，一共有多少对象会活下来在实际完成内存回收之前是无法明确知道的，所以只好取之前每一次回收晋升到老年代对象容量的平均大小值作为经验值，与老年代的剩余空间进行比较，决定是否进行Full GC来让老年代腾出更多空间。\n取平均值进行比较其实仍然是一种动态概率的手段，也就是说，如果某次Minor GC存活后的对象突增，远远高于平均值的话，依然会导致担保失败(Handle Promotion Failure)。如果出现了HandlePromotionFailure失败，那就只好在失败后重新发起一次Full GC。 虽然担保失败时绕的圈子是最大的，但大部分情况下都还是会将HandlePromotionFailure开关打开，避免Full GC过于频繁。\n\n----\n以上\n","slug":"JVM-内存分配与回收策略","published":1,"updated":"2017-12-30T13:13:07.221Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjbvyt3uj000ascdg79zob0d0","content":"<p>　　Java技术体系中所提倡的自动内存管理最终可以归结为自动化的解决了两个问题：给对象分配内存以及回收分配给对象的内存。对象的内存分配，往大方向讲，就是在堆上分配(但也可能经过JIT编译后被拆散为标量类型并间接地栈上分配)，对象主要分配在新生代的Eden区上，如果启动了本地线程分配缓冲，将按线程优先在TLAB上分配。少数情况下也可能会直接分配在老年代中，分配的规则并不是百分百固定的，其细节取决于当前使用的是哪一种垃圾回收器组合，还有虚拟机中与内存相关的参数设置。<br><a id=\"more\"></a></p>\n<h3 id=\"对象优先在Eden分配\"><a href=\"#对象优先在Eden分配\" class=\"headerlink\" title=\"对象优先在Eden分配\"></a>对象优先在Eden分配</h3><p>　　大多数情况下，对象在新生代Eden区中分配，当Eden区没有足够空间进行分配时，虚拟机将发起一次Minor GC。虚拟机提供了-XX：+PrintGCDetails这个收集器日志参数，告诉虚拟机在发生垃圾收集行为时打印内存回收日志，并且在进程退出的时候输出当前的内存各区域分配情况。<br>　　新生代GC(Minor GC):指发生在新生代的垃圾收集动作，因为Java对象大多都具备朝生夕灭的特性，所以Minor GC非常频繁，一般回收速度也比较快。<br>　　老年代GC(Major GC/Full GC):指发生在老年代的GC，出现了Major GC，经常会伴随至少一次的Minor GC，(但非绝对的，在Parallel Scavenge收集器的手机策略里就有直接进行Major GC的策略选择过程)。Major GC的速度一般会比Minor GC慢10倍以上。</p>\n<h3 id=\"大对象直接进入老年代\"><a href=\"#大对象直接进入老年代\" class=\"headerlink\" title=\"大对象直接进入老年代\"></a>大对象直接进入老年代</h3><p>　　所谓的大对象是指，需要大量连续内存空间的Java对象，最典型的大对象就是那种很长的字符串以及数组，大对象对虚拟机的内存分配来说就是一个坏消息，经常出现大对象容易导致内存还有不少空间时就提前出发垃圾收集以获取足够的连续空间来”安置”它们。</p>\n<h3 id=\"长期存活的对象将进入老年代\"><a href=\"#长期存活的对象将进入老年代\" class=\"headerlink\" title=\"长期存活的对象将进入老年代\"></a>长期存活的对象将进入老年代</h3><p>　　既然虚拟机采用了分代收集的思想来管理内存，那么内存回收时就必须能识别哪些对象应放在新生代，哪些对象应放在老年代中。为了做到这点，虚拟机给每个对象定义了一个对象年龄(Age)计数器。如果对象在Eden出生并经过第一个Minor GC后仍然存活，并且能被Survivor容纳的话，将被移动到Survivor空间中，并且对象年龄设为1。对象在Survivor区中每经过一个Minor GC，年龄就增加1岁，当它的年龄增加到一定程度(默认是15岁)，就会被晋升到老年代中。对象晋升老年代的年龄阈值，可以通过参数-XX：<br>MaxTenuringThreshold设置。</p>\n<h3 id=\"动态对象年龄判定\"><a href=\"#动态对象年龄判定\" class=\"headerlink\" title=\"动态对象年龄判定\"></a>动态对象年龄判定</h3><p>　　为了能更好的适应不同程序的内存状况，虚拟机并不是永远的要求对象的年龄必须达到了MaxTenuringThreshold才能晋升到老年代，如果Survivor空间中相同的年龄所有对象大小的总和大于Survivor空间的一般，年龄大于或等于改年龄的对象就可以直接进入老年代，无序等到MaxTenuringThreshold中要求的年龄。</p>\n<h3 id=\"空间分配担保\"><a href=\"#空间分配担保\" class=\"headerlink\" title=\"空间分配担保\"></a>空间分配担保</h3><p>　　在发生Minor GC之前，虚拟机会先检查老年代最大可用的连续空间是否大于新生代所有对象总空间，如果这个条件成立，那么Minor GC可以确保是安全的。如果不成立，则虚拟机会查看HandlePromotionFailure设置值是否允许担保失败。如果允许，那么会继续检查老年代最大可用的连续空间是否大于历次晋升到老年代对象的平均大小，如果大于，将尝试着进行一次Minor GC，尽管这次Minor GC是有风险的；如果小于，或者HandlePromotionFailure设置不允许冒险，那这时也要改为进行一次Full GC。<br>新生代使用复制收集算法，但为了内存利用率，只使用其中一个Survivor空间来作为轮换备份，因此当出现大量对象在Minor GC后仍然存活的情况(最极端的情况就是内存回收后新生代中所有对象都存活)，就需要老年代进行分配担保，把Survivor无法容纳的对象直接进入老年代。 与生活中的贷款担保类似，老年代要进行这样的担保，前提是老年代本身还有容纳这些对象的剩余空间，一共有多少对象会活下来在实际完成内存回收之前是无法明确知道的，所以只好取之前每一次回收晋升到老年代对象容量的平均大小值作为经验值，与老年代的剩余空间进行比较，决定是否进行Full GC来让老年代腾出更多空间。<br>取平均值进行比较其实仍然是一种动态概率的手段，也就是说，如果某次Minor GC存活后的对象突增，远远高于平均值的话，依然会导致担保失败(Handle Promotion Failure)。如果出现了HandlePromotionFailure失败，那就只好在失败后重新发起一次Full GC。 虽然担保失败时绕的圈子是最大的，但大部分情况下都还是会将HandlePromotionFailure开关打开，避免Full GC过于频繁。</p>\n<hr>\n<p>以上</p>\n","excerpt":"<p>　　Java技术体系中所提倡的自动内存管理最终可以归结为自动化的解决了两个问题：给对象分配内存以及回收分配给对象的内存。对象的内存分配，往大方向讲，就是在堆上分配(但也可能经过JIT编译后被拆散为标量类型并间接地栈上分配)，对象主要分配在新生代的Eden区上，如果启动了本地线程分配缓冲，将按线程优先在TLAB上分配。少数情况下也可能会直接分配在老年代中，分配的规则并不是百分百固定的，其细节取决于当前使用的是哪一种垃圾回收器组合，还有虚拟机中与内存相关的参数设置。<br>","more":"</p>\n<h3 id=\"对象优先在Eden分配\"><a href=\"#对象优先在Eden分配\" class=\"headerlink\" title=\"对象优先在Eden分配\"></a>对象优先在Eden分配</h3><p>　　大多数情况下，对象在新生代Eden区中分配，当Eden区没有足够空间进行分配时，虚拟机将发起一次Minor GC。虚拟机提供了-XX：+PrintGCDetails这个收集器日志参数，告诉虚拟机在发生垃圾收集行为时打印内存回收日志，并且在进程退出的时候输出当前的内存各区域分配情况。<br>　　新生代GC(Minor GC):指发生在新生代的垃圾收集动作，因为Java对象大多都具备朝生夕灭的特性，所以Minor GC非常频繁，一般回收速度也比较快。<br>　　老年代GC(Major GC/Full GC):指发生在老年代的GC，出现了Major GC，经常会伴随至少一次的Minor GC，(但非绝对的，在Parallel Scavenge收集器的手机策略里就有直接进行Major GC的策略选择过程)。Major GC的速度一般会比Minor GC慢10倍以上。</p>\n<h3 id=\"大对象直接进入老年代\"><a href=\"#大对象直接进入老年代\" class=\"headerlink\" title=\"大对象直接进入老年代\"></a>大对象直接进入老年代</h3><p>　　所谓的大对象是指，需要大量连续内存空间的Java对象，最典型的大对象就是那种很长的字符串以及数组，大对象对虚拟机的内存分配来说就是一个坏消息，经常出现大对象容易导致内存还有不少空间时就提前出发垃圾收集以获取足够的连续空间来”安置”它们。</p>\n<h3 id=\"长期存活的对象将进入老年代\"><a href=\"#长期存活的对象将进入老年代\" class=\"headerlink\" title=\"长期存活的对象将进入老年代\"></a>长期存活的对象将进入老年代</h3><p>　　既然虚拟机采用了分代收集的思想来管理内存，那么内存回收时就必须能识别哪些对象应放在新生代，哪些对象应放在老年代中。为了做到这点，虚拟机给每个对象定义了一个对象年龄(Age)计数器。如果对象在Eden出生并经过第一个Minor GC后仍然存活，并且能被Survivor容纳的话，将被移动到Survivor空间中，并且对象年龄设为1。对象在Survivor区中每经过一个Minor GC，年龄就增加1岁，当它的年龄增加到一定程度(默认是15岁)，就会被晋升到老年代中。对象晋升老年代的年龄阈值，可以通过参数-XX：<br>MaxTenuringThreshold设置。</p>\n<h3 id=\"动态对象年龄判定\"><a href=\"#动态对象年龄判定\" class=\"headerlink\" title=\"动态对象年龄判定\"></a>动态对象年龄判定</h3><p>　　为了能更好的适应不同程序的内存状况，虚拟机并不是永远的要求对象的年龄必须达到了MaxTenuringThreshold才能晋升到老年代，如果Survivor空间中相同的年龄所有对象大小的总和大于Survivor空间的一般，年龄大于或等于改年龄的对象就可以直接进入老年代，无序等到MaxTenuringThreshold中要求的年龄。</p>\n<h3 id=\"空间分配担保\"><a href=\"#空间分配担保\" class=\"headerlink\" title=\"空间分配担保\"></a>空间分配担保</h3><p>　　在发生Minor GC之前，虚拟机会先检查老年代最大可用的连续空间是否大于新生代所有对象总空间，如果这个条件成立，那么Minor GC可以确保是安全的。如果不成立，则虚拟机会查看HandlePromotionFailure设置值是否允许担保失败。如果允许，那么会继续检查老年代最大可用的连续空间是否大于历次晋升到老年代对象的平均大小，如果大于，将尝试着进行一次Minor GC，尽管这次Minor GC是有风险的；如果小于，或者HandlePromotionFailure设置不允许冒险，那这时也要改为进行一次Full GC。<br>新生代使用复制收集算法，但为了内存利用率，只使用其中一个Survivor空间来作为轮换备份，因此当出现大量对象在Minor GC后仍然存活的情况(最极端的情况就是内存回收后新生代中所有对象都存活)，就需要老年代进行分配担保，把Survivor无法容纳的对象直接进入老年代。 与生活中的贷款担保类似，老年代要进行这样的担保，前提是老年代本身还有容纳这些对象的剩余空间，一共有多少对象会活下来在实际完成内存回收之前是无法明确知道的，所以只好取之前每一次回收晋升到老年代对象容量的平均大小值作为经验值，与老年代的剩余空间进行比较，决定是否进行Full GC来让老年代腾出更多空间。<br>取平均值进行比较其实仍然是一种动态概率的手段，也就是说，如果某次Minor GC存活后的对象突增，远远高于平均值的话，依然会导致担保失败(Handle Promotion Failure)。如果出现了HandlePromotionFailure失败，那就只好在失败后重新发起一次Full GC。 虽然担保失败时绕的圈子是最大的，但大部分情况下都还是会将HandlePromotionFailure开关打开，避免Full GC过于频繁。</p>\n<hr>\n<p>以上</p>"},{"title":"Jenkins安装与使用","date":"2017-06-28T09:30:42.000Z","_content":"公司需求，业务越来越多，服务器越来越多，后台部署项目麻烦的要死，于是上了`jenkins`这货。\n关于这货是干嘛的，请移步这里[https://jenkins.io/](https://jenkins.io/),下载请移步这里[https://jenkins.io/download/](https://jenkins.io/download/)\n安装环境：ubuntu 16.04、tomcat7(这个是因为Jenkins是个war包)、maven(这个是因为后台的项目是maven工程)、jdk8(这个是因为需要tomcat)、gradle(构建Android工程)、SDK(构建Android工程)\n<!--more-->\n#### Jenkins 环境\n安装JDK、Tomcat、MAVEN(如有需要)、gradle(构建Android工程)、SDK(构建Android工程)\n#### 安装Jenkins\n在上面的下载地址下载war，丢到tomcat的webapps文件夹下，然后启动tomcat，浏览器访问jenkin工程`127.0.0.1:8080/jenkins`如下图所示：\n![jenkins首次启动](/image/jenkins/jenkins_start.png)\n打开红字提示的文件，里面是首次进入时需要的密码,点击右下角continue。\n##### jenkins安装插件\n可以自定义也可以安装推荐的插件，我这里安装的是建议的插件.稍等一会，插件安装完成后会自动跳转到创建jenkins用户的界面\n##### 创建jenkins用户\n按照提示创建即可，点击右下角`Save and finish`\n##### 配置Jenkins\n以后再次访问jenkins的时候就不用再去使用初始密码，只需要使用上一步创建的账号即可，登录后首界面如下，\n![jenkins首页](/image/jenkins/jenkins_index.png)\n点击左侧的`系统管理`，在中间列出的工具里面点击`Global Tool Configuration`，指定JDK和MAVEN的路径，如下\n![jenkins配置JDK](/image/jenkins/jenkins_jdk.png)\n![jenkins配置MAVEN](/image/jenkins/jenkins_maven.png)\n然后Save保存\n#### 创建一个新的Maven工程\n点击左侧菜单栏`新建`,输入工程名字，然后选择`构建一个只有风格的软件项目`,然后`ok`\n![jenkins创建新工程](/image/jenkins/jenkins_create_new_project.png)\n#### 配置工程\n在新的界面可以配置项目的构建、源码管理等\n我的工程是存放在git上面的，所以就选择git\n![jenkins源码管理](/image/jenkins/jenkins_config_project.png)\n构建触发器可以配置在什么时间配置，我们暂时没有，需要手动点击构建才行\n构建环境没有配置\n构建一项选择 `Invoke top-level Maven target`,当然根据需求可以选择其他构建方式\n`Maven Version`是上面配置maven时选择的别名，`Goals`是需要执行的maven命令(前面不需要加maven)\n![jenkins构建项目](/image/jenkins/jenkins_project_build.png)\n点击左下角保存\n#### 开始构建\n点击左侧的立即构建，可以在构建历史中查看原来构建的个过程\n![jenkins构建](/image/jenkins/jenkins_start_build_project.png)\n点击构建历史列表里面对应构建历史的小圆点，可以查看控制台输出\n![jenkins构建历史](/image/jenkins/jenkins_build_history.png)\n![jenkins](/image/jenkins/jenkins_build_console_output)\nps：如果是普通用户启动的tomcat，使用git管理源码，则下载下来的工程源码在`/home/username/.jenkins/workspace`，如果是root用户，则在 `/root/.jenkins/workspace`下\npps:据说`jenkins`的包不需要tomcat也可以，执行`java -jar ***.war`即可","source":"_posts/Jenkins安装与使用.md","raw":"---\ntitle: Jenkins安装与使用\ndate: 2017-06-28 17:30:42\ntags: [jenkins,运维,服务器]\n---\n公司需求，业务越来越多，服务器越来越多，后台部署项目麻烦的要死，于是上了`jenkins`这货。\n关于这货是干嘛的，请移步这里[https://jenkins.io/](https://jenkins.io/),下载请移步这里[https://jenkins.io/download/](https://jenkins.io/download/)\n安装环境：ubuntu 16.04、tomcat7(这个是因为Jenkins是个war包)、maven(这个是因为后台的项目是maven工程)、jdk8(这个是因为需要tomcat)、gradle(构建Android工程)、SDK(构建Android工程)\n<!--more-->\n#### Jenkins 环境\n安装JDK、Tomcat、MAVEN(如有需要)、gradle(构建Android工程)、SDK(构建Android工程)\n#### 安装Jenkins\n在上面的下载地址下载war，丢到tomcat的webapps文件夹下，然后启动tomcat，浏览器访问jenkin工程`127.0.0.1:8080/jenkins`如下图所示：\n![jenkins首次启动](/image/jenkins/jenkins_start.png)\n打开红字提示的文件，里面是首次进入时需要的密码,点击右下角continue。\n##### jenkins安装插件\n可以自定义也可以安装推荐的插件，我这里安装的是建议的插件.稍等一会，插件安装完成后会自动跳转到创建jenkins用户的界面\n##### 创建jenkins用户\n按照提示创建即可，点击右下角`Save and finish`\n##### 配置Jenkins\n以后再次访问jenkins的时候就不用再去使用初始密码，只需要使用上一步创建的账号即可，登录后首界面如下，\n![jenkins首页](/image/jenkins/jenkins_index.png)\n点击左侧的`系统管理`，在中间列出的工具里面点击`Global Tool Configuration`，指定JDK和MAVEN的路径，如下\n![jenkins配置JDK](/image/jenkins/jenkins_jdk.png)\n![jenkins配置MAVEN](/image/jenkins/jenkins_maven.png)\n然后Save保存\n#### 创建一个新的Maven工程\n点击左侧菜单栏`新建`,输入工程名字，然后选择`构建一个只有风格的软件项目`,然后`ok`\n![jenkins创建新工程](/image/jenkins/jenkins_create_new_project.png)\n#### 配置工程\n在新的界面可以配置项目的构建、源码管理等\n我的工程是存放在git上面的，所以就选择git\n![jenkins源码管理](/image/jenkins/jenkins_config_project.png)\n构建触发器可以配置在什么时间配置，我们暂时没有，需要手动点击构建才行\n构建环境没有配置\n构建一项选择 `Invoke top-level Maven target`,当然根据需求可以选择其他构建方式\n`Maven Version`是上面配置maven时选择的别名，`Goals`是需要执行的maven命令(前面不需要加maven)\n![jenkins构建项目](/image/jenkins/jenkins_project_build.png)\n点击左下角保存\n#### 开始构建\n点击左侧的立即构建，可以在构建历史中查看原来构建的个过程\n![jenkins构建](/image/jenkins/jenkins_start_build_project.png)\n点击构建历史列表里面对应构建历史的小圆点，可以查看控制台输出\n![jenkins构建历史](/image/jenkins/jenkins_build_history.png)\n![jenkins](/image/jenkins/jenkins_build_console_output)\nps：如果是普通用户启动的tomcat，使用git管理源码，则下载下来的工程源码在`/home/username/.jenkins/workspace`，如果是root用户，则在 `/root/.jenkins/workspace`下\npps:据说`jenkins`的包不需要tomcat也可以，执行`java -jar ***.war`即可","slug":"Jenkins安装与使用","published":1,"updated":"2017-07-02T08:48:57.266Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjbvyt3uk000cscdgya8kdq2e","content":"<p>公司需求，业务越来越多，服务器越来越多，后台部署项目麻烦的要死，于是上了<code>jenkins</code>这货。<br>关于这货是干嘛的，请移步这里<a href=\"https://jenkins.io/\" target=\"_blank\" rel=\"external\">https://jenkins.io/</a>,下载请移步这里<a href=\"https://jenkins.io/download/\" target=\"_blank\" rel=\"external\">https://jenkins.io/download/</a><br>安装环境：ubuntu 16.04、tomcat7(这个是因为Jenkins是个war包)、maven(这个是因为后台的项目是maven工程)、jdk8(这个是因为需要tomcat)、gradle(构建Android工程)、SDK(构建Android工程)<br><a id=\"more\"></a></p>\n<h4 id=\"Jenkins-环境\"><a href=\"#Jenkins-环境\" class=\"headerlink\" title=\"Jenkins 环境\"></a>Jenkins 环境</h4><p>安装JDK、Tomcat、MAVEN(如有需要)、gradle(构建Android工程)、SDK(构建Android工程)</p>\n<h4 id=\"安装Jenkins\"><a href=\"#安装Jenkins\" class=\"headerlink\" title=\"安装Jenkins\"></a>安装Jenkins</h4><p>在上面的下载地址下载war，丢到tomcat的webapps文件夹下，然后启动tomcat，浏览器访问jenkin工程<code>127.0.0.1:8080/jenkins</code>如下图所示：<br><img src=\"/image/jenkins/jenkins_start.png\" alt=\"jenkins首次启动\"><br>打开红字提示的文件，里面是首次进入时需要的密码,点击右下角continue。</p>\n<h5 id=\"jenkins安装插件\"><a href=\"#jenkins安装插件\" class=\"headerlink\" title=\"jenkins安装插件\"></a>jenkins安装插件</h5><p>可以自定义也可以安装推荐的插件，我这里安装的是建议的插件.稍等一会，插件安装完成后会自动跳转到创建jenkins用户的界面</p>\n<h5 id=\"创建jenkins用户\"><a href=\"#创建jenkins用户\" class=\"headerlink\" title=\"创建jenkins用户\"></a>创建jenkins用户</h5><p>按照提示创建即可，点击右下角<code>Save and finish</code></p>\n<h5 id=\"配置Jenkins\"><a href=\"#配置Jenkins\" class=\"headerlink\" title=\"配置Jenkins\"></a>配置Jenkins</h5><p>以后再次访问jenkins的时候就不用再去使用初始密码，只需要使用上一步创建的账号即可，登录后首界面如下，<br><img src=\"/image/jenkins/jenkins_index.png\" alt=\"jenkins首页\"><br>点击左侧的<code>系统管理</code>，在中间列出的工具里面点击<code>Global Tool Configuration</code>，指定JDK和MAVEN的路径，如下<br><img src=\"/image/jenkins/jenkins_jdk.png\" alt=\"jenkins配置JDK\"><br><img src=\"/image/jenkins/jenkins_maven.png\" alt=\"jenkins配置MAVEN\"><br>然后Save保存</p>\n<h4 id=\"创建一个新的Maven工程\"><a href=\"#创建一个新的Maven工程\" class=\"headerlink\" title=\"创建一个新的Maven工程\"></a>创建一个新的Maven工程</h4><p>点击左侧菜单栏<code>新建</code>,输入工程名字，然后选择<code>构建一个只有风格的软件项目</code>,然后<code>ok</code><br><img src=\"/image/jenkins/jenkins_create_new_project.png\" alt=\"jenkins创建新工程\"></p>\n<h4 id=\"配置工程\"><a href=\"#配置工程\" class=\"headerlink\" title=\"配置工程\"></a>配置工程</h4><p>在新的界面可以配置项目的构建、源码管理等<br>我的工程是存放在git上面的，所以就选择git<br><img src=\"/image/jenkins/jenkins_config_project.png\" alt=\"jenkins源码管理\"><br>构建触发器可以配置在什么时间配置，我们暂时没有，需要手动点击构建才行<br>构建环境没有配置<br>构建一项选择 <code>Invoke top-level Maven target</code>,当然根据需求可以选择其他构建方式<br><code>Maven Version</code>是上面配置maven时选择的别名，<code>Goals</code>是需要执行的maven命令(前面不需要加maven)<br><img src=\"/image/jenkins/jenkins_project_build.png\" alt=\"jenkins构建项目\"><br>点击左下角保存</p>\n<h4 id=\"开始构建\"><a href=\"#开始构建\" class=\"headerlink\" title=\"开始构建\"></a>开始构建</h4><p>点击左侧的立即构建，可以在构建历史中查看原来构建的个过程<br><img src=\"/image/jenkins/jenkins_start_build_project.png\" alt=\"jenkins构建\"><br>点击构建历史列表里面对应构建历史的小圆点，可以查看控制台输出<br><img src=\"/image/jenkins/jenkins_build_history.png\" alt=\"jenkins构建历史\"><br><img src=\"/image/jenkins/jenkins_build_console_output\" alt=\"jenkins\"><br>ps：如果是普通用户启动的tomcat，使用git管理源码，则下载下来的工程源码在<code>/home/username/.jenkins/workspace</code>，如果是root用户，则在 <code>/root/.jenkins/workspace</code>下<br>pps:据说<code>jenkins</code>的包不需要tomcat也可以，执行<code>java -jar ***.war</code>即可</p>\n","excerpt":"<p>公司需求，业务越来越多，服务器越来越多，后台部署项目麻烦的要死，于是上了<code>jenkins</code>这货。<br>关于这货是干嘛的，请移步这里<a href=\"https://jenkins.io/\">https://jenkins.io/</a>,下载请移步这里<a href=\"https://jenkins.io/download/\">https://jenkins.io/download/</a><br>安装环境：ubuntu 16.04、tomcat7(这个是因为Jenkins是个war包)、maven(这个是因为后台的项目是maven工程)、jdk8(这个是因为需要tomcat)、gradle(构建Android工程)、SDK(构建Android工程)<br>","more":"</p>\n<h4 id=\"Jenkins-环境\"><a href=\"#Jenkins-环境\" class=\"headerlink\" title=\"Jenkins 环境\"></a>Jenkins 环境</h4><p>安装JDK、Tomcat、MAVEN(如有需要)、gradle(构建Android工程)、SDK(构建Android工程)</p>\n<h4 id=\"安装Jenkins\"><a href=\"#安装Jenkins\" class=\"headerlink\" title=\"安装Jenkins\"></a>安装Jenkins</h4><p>在上面的下载地址下载war，丢到tomcat的webapps文件夹下，然后启动tomcat，浏览器访问jenkin工程<code>127.0.0.1:8080/jenkins</code>如下图所示：<br><img src=\"/image/jenkins/jenkins_start.png\" alt=\"jenkins首次启动\"><br>打开红字提示的文件，里面是首次进入时需要的密码,点击右下角continue。</p>\n<h5 id=\"jenkins安装插件\"><a href=\"#jenkins安装插件\" class=\"headerlink\" title=\"jenkins安装插件\"></a>jenkins安装插件</h5><p>可以自定义也可以安装推荐的插件，我这里安装的是建议的插件.稍等一会，插件安装完成后会自动跳转到创建jenkins用户的界面</p>\n<h5 id=\"创建jenkins用户\"><a href=\"#创建jenkins用户\" class=\"headerlink\" title=\"创建jenkins用户\"></a>创建jenkins用户</h5><p>按照提示创建即可，点击右下角<code>Save and finish</code></p>\n<h5 id=\"配置Jenkins\"><a href=\"#配置Jenkins\" class=\"headerlink\" title=\"配置Jenkins\"></a>配置Jenkins</h5><p>以后再次访问jenkins的时候就不用再去使用初始密码，只需要使用上一步创建的账号即可，登录后首界面如下，<br><img src=\"/image/jenkins/jenkins_index.png\" alt=\"jenkins首页\"><br>点击左侧的<code>系统管理</code>，在中间列出的工具里面点击<code>Global Tool Configuration</code>，指定JDK和MAVEN的路径，如下<br><img src=\"/image/jenkins/jenkins_jdk.png\" alt=\"jenkins配置JDK\"><br><img src=\"/image/jenkins/jenkins_maven.png\" alt=\"jenkins配置MAVEN\"><br>然后Save保存</p>\n<h4 id=\"创建一个新的Maven工程\"><a href=\"#创建一个新的Maven工程\" class=\"headerlink\" title=\"创建一个新的Maven工程\"></a>创建一个新的Maven工程</h4><p>点击左侧菜单栏<code>新建</code>,输入工程名字，然后选择<code>构建一个只有风格的软件项目</code>,然后<code>ok</code><br><img src=\"/image/jenkins/jenkins_create_new_project.png\" alt=\"jenkins创建新工程\"></p>\n<h4 id=\"配置工程\"><a href=\"#配置工程\" class=\"headerlink\" title=\"配置工程\"></a>配置工程</h4><p>在新的界面可以配置项目的构建、源码管理等<br>我的工程是存放在git上面的，所以就选择git<br><img src=\"/image/jenkins/jenkins_config_project.png\" alt=\"jenkins源码管理\"><br>构建触发器可以配置在什么时间配置，我们暂时没有，需要手动点击构建才行<br>构建环境没有配置<br>构建一项选择 <code>Invoke top-level Maven target</code>,当然根据需求可以选择其他构建方式<br><code>Maven Version</code>是上面配置maven时选择的别名，<code>Goals</code>是需要执行的maven命令(前面不需要加maven)<br><img src=\"/image/jenkins/jenkins_project_build.png\" alt=\"jenkins构建项目\"><br>点击左下角保存</p>\n<h4 id=\"开始构建\"><a href=\"#开始构建\" class=\"headerlink\" title=\"开始构建\"></a>开始构建</h4><p>点击左侧的立即构建，可以在构建历史中查看原来构建的个过程<br><img src=\"/image/jenkins/jenkins_start_build_project.png\" alt=\"jenkins构建\"><br>点击构建历史列表里面对应构建历史的小圆点，可以查看控制台输出<br><img src=\"/image/jenkins/jenkins_build_history.png\" alt=\"jenkins构建历史\"><br><img src=\"/image/jenkins/jenkins_build_console_output\" alt=\"jenkins\"><br>ps：如果是普通用户启动的tomcat，使用git管理源码，则下载下来的工程源码在<code>/home/username/.jenkins/workspace</code>，如果是root用户，则在 <code>/root/.jenkins/workspace</code>下<br>pps:据说<code>jenkins</code>的包不需要tomcat也可以，执行<code>java -jar ***.war</code>即可</p>"},{"title":"JVM-垃圾收集算法与实现","date":"2017-03-30T02:27:05.000Z","_content":"　　由于垃圾收集算法的实现涉及大量的程序细节，而且各个平台的虚拟机操作内存的方法又各不相同，这里只是介绍几种算法的思想及其发展过程。\n<!--more-->\n### 垃圾收集算法\n#### 标记-清除算法\n　　最基础的算法是\"标记-清除\"(Mark-Sweep)算法，算法分为'标记'和'清除'两个阶段：首先标记处所有需要回收的对象，在标记后统一回收所有被标记的对象。它的主要不足有两个：一个事效率问题，标记和清除两个过程的效率都不高；另外一个事空间问题，标记清除之后会产生大量不连续的内存碎片，空间碎片太多可能会导致以后再程序运行过程中需要分配较大对象时，无法找到足够的连续内存而不得不提前触发另一次垃圾收集动作。\n#### 1. 复制算法\n　　它将可用内存按容量划分为大小相等的两块，每次只使用其中的一块，当这一块的内存用完了，就将还存活着的对象复制到另外一块上面，然后把已经使用过的内存空间一次清理掉。这样使得每次都是对整个半区进行内存回收，内存分配时也就不用考虑内存碎片等复杂情况。只要移动堆顶指针，按顺序分配内存即可，实现简单，运行高效，只是这种算法的代价是将内存缩小为了原来的一般，代价太高。\n现在的商业虚拟机都采用这种手机算法回收新生代，IBM公司的专门研究表明，新生代中的对象98%是朝生夕死的，所以并不需要按照1:1的比例来划分内存空间，而是将内存分为一块较大的Eden空间和两块较小的Survivor空间，每次使用Eden和其中一块Survivor空间上，最后清理掉Eden和刚才用过的Survivor中还存活着的对象一次性复制到另外一块Survivor空间上，最后清理掉Eden和刚才用过的Survivor空间。\n#### 2. 标记-整理算法\n　　复制收集短发在对象存活率较高时就要进行较多的复制操作，效率将会变低。更关键的是，如果不想浪费一半的空间，就需要额外的控件进行分配担保，以应对被使用的的内存中所有对象都100%存活的极端情况，所以在老年代一半不能直接选用这种算法。\n根据老年代的特点，有人提出了另外一种\"标记-整理\"(Mark-Compact)算法，标记过程任然与\"标记-清除\"算法一样，但后续步骤不是直接对可回收对象进行清理，而是让所有存活的对象都向一端移动，然后直接清理掉端便捷以外的内存。\n#### 3. 分代收集算法\n　　当前商业虚拟机的垃圾收集都采用\"分代收集\"(Generational Collection)算法，这种算法并没有什么新的思想，只是根据对象的存货周期的不同将内存划分为几块，一般是把Java堆分为新生代和老年代，这样就可以根据各个年代的特点采用最适当的收集算法。在新生代中，每次垃圾收集时都发现有大批对象死去，只有少量存活，那就选用复制算法，只需要付出少量存活对象的复制成本就可以完成收集。而老年代中因为对象存活率高、没有额外空间对它进行分配担保，就必须使用\"标记-清理\"或者\"标记-整理\"算法来进行回收。\n### HotSpot算法实现\n#### 枚举根节点\n　　从可达性分析中从GC Roots节点引用链这个操作为例，可作为GC Roots的节点主要在全局性的引用(例如常量或类静态属性)与执行上下文(例如栈帧中的本地变量表)中，现在很多应用仅仅方法区就有数百兆，如果要逐个检查这里面的引用，那么必然会消耗很多时间。\n另外，可达性分析对执行时间的敏感还体现在GC停顿上，因为这项分析工作必须在一个能确保一致性的快照中进行----这里`一致性`的意思是指在这个分析期间整个执行系统看起来就像被冻结在某个时间点上，不可以出现分析过程中对象引用关系还在不断变化的情况，该点不满足的话分析结果准确性就无法得到抱枕。这点是导致GC进行时必须停顿所有Java执行线程(Sun将这件事情称为\"Stop The World\")的其中一个重要原因，即使是在号称几乎不会发生停顿的CMS收集器中，枚举根节点时也是必须要停顿的。\n由于目前的主流java虚拟机使用的都是准确式GC，所以当执行系统停顿下来后，并不需要一个不漏的检查完所有执行上下文和全局引用位置，虚拟机应当是有办法直接得知哪些地方存放着对象引用。在HotSpot的实现中，是使用一组称为OopMap的数据结构来达到这个目的的，在类加载完成的时候，HotSpot就把对象内什么偏移量上是什么类型的数据计算出来，在JIT编译过程中，也会在特定的位置记录下栈和寄存器中哪些位置是引用，这样，GC在扫描时就可以直接得知这些信息了。\n#### 安全点\n　　在OopMap的协助下，HotSpot可以快速且准确地完成GC Roots枚举，但一个很现实的问题随之而来：可能导致引用关系变化，或者说OopMap内容变化的指令非常多，如果为每一条指令都生成对应的OopMap，那将会需要大量的额外空间，这样GC的空间成本将会变得很高。实际上，HotSpot也的确没有为每条指令都生成OopMap，前面已经提到，只是在“特定的位置”记录了这些信息，这些位置称为安全点（Safepoint），即程序执行时并非在所有地方都能停顿下来开始GC，只有在到达安全点时才能暂停。 Safepoint的选定既不能太少以致于让GC等待时间太长，也不能过于频繁以致于过分增大运行时的负荷。 所以，安全点的选定基本上是以程序“是否具有让程序长时间执行的特征”为标准进行选定的——因为每条指令执行的时间都非常短暂，程序不太可能因为指令流长度太长这个原因而过长时间运行，“长时间执行”的最明显特征就是指令序列复用，例如方法调用、循环跳转、 异常跳转等，所以具有这些功能的指令才会产生Safepoint。\n对于Sefepoint，另一个需要考虑的问题是如何在GC发生时让所有线程（这里不包括执行JNI调用的线程）都“跑”到最近的安全点上再停顿下来。 这里有两种方案可供选择：抢先式中断（Preemptive Suspension）和主动式中断（Voluntary Suspension），其中抢先式中断不需要线程的执行代码主动去配合，在GC发生时，首先把所有线程全部中断，如果发现有线程中断的地方不在安全点上，就恢复线程，让它“跑”到安全点上。 现在几乎没有虚拟机实现采用抢先式中断来暂停线程从而响应GC事件。\n而主动式中断的思想是当GC需要中断线程的时候，不直接对线程操作，仅仅简单地设置一个标志，各个线程执行时主动去轮询这个标志，发现中断标志为真时就自己中断挂起。轮询标志的地方和安全点是重合的，另外再加上创建对象需要分配内存的地方。\n#### 安全区域\n　　使用Safepoint似乎已经完美地解决了如何进入GC的问题，但实际情况却并不一定。Safepoint机制保证了程序执行时，在不太长的时间内就会遇到可进入GC的Safepoint。但是，程序“不执行”的时候呢？所谓的程序不执行就是没有分配CPU时间，典型的例子就是线程处于Sleep状态或者Blocked状态，这时候线程无法响应JVM的中断请求，“走”到安全的地方去中断挂起，JVM也显然不太可能等待线程重新被分配CPU时间。 对于这种情况，就需要安全区域（Safe Region）来解决。\n安全区域是指在一段代码片段之中，引用关系不会发生变化。 在这个区域中的任意地方开始GC都是安全的。 我们也可以把Safe Region看做是被扩展了的Safepoint。\n在线程执行到Safe Region中的代码时，首先标识自己已经进入了Safe Region，那样，当在这段时间里JVM要发起GC时，就不用管标识自己为Safe Region状态的线程了。在线程要离开Safe Region时，它要检查系统是否已经完成了根节点枚举（或者是整个GC过程），如果完成了，那线程就继续执行，否则它就必须等待直到收到可以安全离开Safe Region的信号为止。\n----\n以上","source":"_posts/JVM-垃圾收集算法.md","raw":"---\ntitle: JVM-垃圾收集算法与实现\ndate: 2017-03-30 10:27:05\ntags: [Java,JVM]\n---\n　　由于垃圾收集算法的实现涉及大量的程序细节，而且各个平台的虚拟机操作内存的方法又各不相同，这里只是介绍几种算法的思想及其发展过程。\n<!--more-->\n### 垃圾收集算法\n#### 标记-清除算法\n　　最基础的算法是\"标记-清除\"(Mark-Sweep)算法，算法分为'标记'和'清除'两个阶段：首先标记处所有需要回收的对象，在标记后统一回收所有被标记的对象。它的主要不足有两个：一个事效率问题，标记和清除两个过程的效率都不高；另外一个事空间问题，标记清除之后会产生大量不连续的内存碎片，空间碎片太多可能会导致以后再程序运行过程中需要分配较大对象时，无法找到足够的连续内存而不得不提前触发另一次垃圾收集动作。\n#### 1. 复制算法\n　　它将可用内存按容量划分为大小相等的两块，每次只使用其中的一块，当这一块的内存用完了，就将还存活着的对象复制到另外一块上面，然后把已经使用过的内存空间一次清理掉。这样使得每次都是对整个半区进行内存回收，内存分配时也就不用考虑内存碎片等复杂情况。只要移动堆顶指针，按顺序分配内存即可，实现简单，运行高效，只是这种算法的代价是将内存缩小为了原来的一般，代价太高。\n现在的商业虚拟机都采用这种手机算法回收新生代，IBM公司的专门研究表明，新生代中的对象98%是朝生夕死的，所以并不需要按照1:1的比例来划分内存空间，而是将内存分为一块较大的Eden空间和两块较小的Survivor空间，每次使用Eden和其中一块Survivor空间上，最后清理掉Eden和刚才用过的Survivor中还存活着的对象一次性复制到另外一块Survivor空间上，最后清理掉Eden和刚才用过的Survivor空间。\n#### 2. 标记-整理算法\n　　复制收集短发在对象存活率较高时就要进行较多的复制操作，效率将会变低。更关键的是，如果不想浪费一半的空间，就需要额外的控件进行分配担保，以应对被使用的的内存中所有对象都100%存活的极端情况，所以在老年代一半不能直接选用这种算法。\n根据老年代的特点，有人提出了另外一种\"标记-整理\"(Mark-Compact)算法，标记过程任然与\"标记-清除\"算法一样，但后续步骤不是直接对可回收对象进行清理，而是让所有存活的对象都向一端移动，然后直接清理掉端便捷以外的内存。\n#### 3. 分代收集算法\n　　当前商业虚拟机的垃圾收集都采用\"分代收集\"(Generational Collection)算法，这种算法并没有什么新的思想，只是根据对象的存货周期的不同将内存划分为几块，一般是把Java堆分为新生代和老年代，这样就可以根据各个年代的特点采用最适当的收集算法。在新生代中，每次垃圾收集时都发现有大批对象死去，只有少量存活，那就选用复制算法，只需要付出少量存活对象的复制成本就可以完成收集。而老年代中因为对象存活率高、没有额外空间对它进行分配担保，就必须使用\"标记-清理\"或者\"标记-整理\"算法来进行回收。\n### HotSpot算法实现\n#### 枚举根节点\n　　从可达性分析中从GC Roots节点引用链这个操作为例，可作为GC Roots的节点主要在全局性的引用(例如常量或类静态属性)与执行上下文(例如栈帧中的本地变量表)中，现在很多应用仅仅方法区就有数百兆，如果要逐个检查这里面的引用，那么必然会消耗很多时间。\n另外，可达性分析对执行时间的敏感还体现在GC停顿上，因为这项分析工作必须在一个能确保一致性的快照中进行----这里`一致性`的意思是指在这个分析期间整个执行系统看起来就像被冻结在某个时间点上，不可以出现分析过程中对象引用关系还在不断变化的情况，该点不满足的话分析结果准确性就无法得到抱枕。这点是导致GC进行时必须停顿所有Java执行线程(Sun将这件事情称为\"Stop The World\")的其中一个重要原因，即使是在号称几乎不会发生停顿的CMS收集器中，枚举根节点时也是必须要停顿的。\n由于目前的主流java虚拟机使用的都是准确式GC，所以当执行系统停顿下来后，并不需要一个不漏的检查完所有执行上下文和全局引用位置，虚拟机应当是有办法直接得知哪些地方存放着对象引用。在HotSpot的实现中，是使用一组称为OopMap的数据结构来达到这个目的的，在类加载完成的时候，HotSpot就把对象内什么偏移量上是什么类型的数据计算出来，在JIT编译过程中，也会在特定的位置记录下栈和寄存器中哪些位置是引用，这样，GC在扫描时就可以直接得知这些信息了。\n#### 安全点\n　　在OopMap的协助下，HotSpot可以快速且准确地完成GC Roots枚举，但一个很现实的问题随之而来：可能导致引用关系变化，或者说OopMap内容变化的指令非常多，如果为每一条指令都生成对应的OopMap，那将会需要大量的额外空间，这样GC的空间成本将会变得很高。实际上，HotSpot也的确没有为每条指令都生成OopMap，前面已经提到，只是在“特定的位置”记录了这些信息，这些位置称为安全点（Safepoint），即程序执行时并非在所有地方都能停顿下来开始GC，只有在到达安全点时才能暂停。 Safepoint的选定既不能太少以致于让GC等待时间太长，也不能过于频繁以致于过分增大运行时的负荷。 所以，安全点的选定基本上是以程序“是否具有让程序长时间执行的特征”为标准进行选定的——因为每条指令执行的时间都非常短暂，程序不太可能因为指令流长度太长这个原因而过长时间运行，“长时间执行”的最明显特征就是指令序列复用，例如方法调用、循环跳转、 异常跳转等，所以具有这些功能的指令才会产生Safepoint。\n对于Sefepoint，另一个需要考虑的问题是如何在GC发生时让所有线程（这里不包括执行JNI调用的线程）都“跑”到最近的安全点上再停顿下来。 这里有两种方案可供选择：抢先式中断（Preemptive Suspension）和主动式中断（Voluntary Suspension），其中抢先式中断不需要线程的执行代码主动去配合，在GC发生时，首先把所有线程全部中断，如果发现有线程中断的地方不在安全点上，就恢复线程，让它“跑”到安全点上。 现在几乎没有虚拟机实现采用抢先式中断来暂停线程从而响应GC事件。\n而主动式中断的思想是当GC需要中断线程的时候，不直接对线程操作，仅仅简单地设置一个标志，各个线程执行时主动去轮询这个标志，发现中断标志为真时就自己中断挂起。轮询标志的地方和安全点是重合的，另外再加上创建对象需要分配内存的地方。\n#### 安全区域\n　　使用Safepoint似乎已经完美地解决了如何进入GC的问题，但实际情况却并不一定。Safepoint机制保证了程序执行时，在不太长的时间内就会遇到可进入GC的Safepoint。但是，程序“不执行”的时候呢？所谓的程序不执行就是没有分配CPU时间，典型的例子就是线程处于Sleep状态或者Blocked状态，这时候线程无法响应JVM的中断请求，“走”到安全的地方去中断挂起，JVM也显然不太可能等待线程重新被分配CPU时间。 对于这种情况，就需要安全区域（Safe Region）来解决。\n安全区域是指在一段代码片段之中，引用关系不会发生变化。 在这个区域中的任意地方开始GC都是安全的。 我们也可以把Safe Region看做是被扩展了的Safepoint。\n在线程执行到Safe Region中的代码时，首先标识自己已经进入了Safe Region，那样，当在这段时间里JVM要发起GC时，就不用管标识自己为Safe Region状态的线程了。在线程要离开Safe Region时，它要检查系统是否已经完成了根节点枚举（或者是整个GC过程），如果完成了，那线程就继续执行，否则它就必须等待直到收到可以安全离开Safe Region的信号为止。\n----\n以上","slug":"JVM-垃圾收集算法","published":1,"updated":"2017-12-30T13:13:07.222Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjbvyt3um000fscdges93pnsi","content":"<p>　　由于垃圾收集算法的实现涉及大量的程序细节，而且各个平台的虚拟机操作内存的方法又各不相同，这里只是介绍几种算法的思想及其发展过程。<br><a id=\"more\"></a></p>\n<h3 id=\"垃圾收集算法\"><a href=\"#垃圾收集算法\" class=\"headerlink\" title=\"垃圾收集算法\"></a>垃圾收集算法</h3><h4 id=\"标记-清除算法\"><a href=\"#标记-清除算法\" class=\"headerlink\" title=\"标记-清除算法\"></a>标记-清除算法</h4><p>　　最基础的算法是”标记-清除”(Mark-Sweep)算法，算法分为’标记’和’清除’两个阶段：首先标记处所有需要回收的对象，在标记后统一回收所有被标记的对象。它的主要不足有两个：一个事效率问题，标记和清除两个过程的效率都不高；另外一个事空间问题，标记清除之后会产生大量不连续的内存碎片，空间碎片太多可能会导致以后再程序运行过程中需要分配较大对象时，无法找到足够的连续内存而不得不提前触发另一次垃圾收集动作。</p>\n<h4 id=\"1-复制算法\"><a href=\"#1-复制算法\" class=\"headerlink\" title=\"1. 复制算法\"></a>1. 复制算法</h4><p>　　它将可用内存按容量划分为大小相等的两块，每次只使用其中的一块，当这一块的内存用完了，就将还存活着的对象复制到另外一块上面，然后把已经使用过的内存空间一次清理掉。这样使得每次都是对整个半区进行内存回收，内存分配时也就不用考虑内存碎片等复杂情况。只要移动堆顶指针，按顺序分配内存即可，实现简单，运行高效，只是这种算法的代价是将内存缩小为了原来的一般，代价太高。<br>现在的商业虚拟机都采用这种手机算法回收新生代，IBM公司的专门研究表明，新生代中的对象98%是朝生夕死的，所以并不需要按照1:1的比例来划分内存空间，而是将内存分为一块较大的Eden空间和两块较小的Survivor空间，每次使用Eden和其中一块Survivor空间上，最后清理掉Eden和刚才用过的Survivor中还存活着的对象一次性复制到另外一块Survivor空间上，最后清理掉Eden和刚才用过的Survivor空间。</p>\n<h4 id=\"2-标记-整理算法\"><a href=\"#2-标记-整理算法\" class=\"headerlink\" title=\"2. 标记-整理算法\"></a>2. 标记-整理算法</h4><p>　　复制收集短发在对象存活率较高时就要进行较多的复制操作，效率将会变低。更关键的是，如果不想浪费一半的空间，就需要额外的控件进行分配担保，以应对被使用的的内存中所有对象都100%存活的极端情况，所以在老年代一半不能直接选用这种算法。<br>根据老年代的特点，有人提出了另外一种”标记-整理”(Mark-Compact)算法，标记过程任然与”标记-清除”算法一样，但后续步骤不是直接对可回收对象进行清理，而是让所有存活的对象都向一端移动，然后直接清理掉端便捷以外的内存。</p>\n<h4 id=\"3-分代收集算法\"><a href=\"#3-分代收集算法\" class=\"headerlink\" title=\"3. 分代收集算法\"></a>3. 分代收集算法</h4><p>　　当前商业虚拟机的垃圾收集都采用”分代收集”(Generational Collection)算法，这种算法并没有什么新的思想，只是根据对象的存货周期的不同将内存划分为几块，一般是把Java堆分为新生代和老年代，这样就可以根据各个年代的特点采用最适当的收集算法。在新生代中，每次垃圾收集时都发现有大批对象死去，只有少量存活，那就选用复制算法，只需要付出少量存活对象的复制成本就可以完成收集。而老年代中因为对象存活率高、没有额外空间对它进行分配担保，就必须使用”标记-清理”或者”标记-整理”算法来进行回收。</p>\n<h3 id=\"HotSpot算法实现\"><a href=\"#HotSpot算法实现\" class=\"headerlink\" title=\"HotSpot算法实现\"></a>HotSpot算法实现</h3><h4 id=\"枚举根节点\"><a href=\"#枚举根节点\" class=\"headerlink\" title=\"枚举根节点\"></a>枚举根节点</h4><p>　　从可达性分析中从GC Roots节点引用链这个操作为例，可作为GC Roots的节点主要在全局性的引用(例如常量或类静态属性)与执行上下文(例如栈帧中的本地变量表)中，现在很多应用仅仅方法区就有数百兆，如果要逐个检查这里面的引用，那么必然会消耗很多时间。<br>另外，可达性分析对执行时间的敏感还体现在GC停顿上，因为这项分析工作必须在一个能确保一致性的快照中进行—-这里<code>一致性</code>的意思是指在这个分析期间整个执行系统看起来就像被冻结在某个时间点上，不可以出现分析过程中对象引用关系还在不断变化的情况，该点不满足的话分析结果准确性就无法得到抱枕。这点是导致GC进行时必须停顿所有Java执行线程(Sun将这件事情称为”Stop The World”)的其中一个重要原因，即使是在号称几乎不会发生停顿的CMS收集器中，枚举根节点时也是必须要停顿的。<br>由于目前的主流java虚拟机使用的都是准确式GC，所以当执行系统停顿下来后，并不需要一个不漏的检查完所有执行上下文和全局引用位置，虚拟机应当是有办法直接得知哪些地方存放着对象引用。在HotSpot的实现中，是使用一组称为OopMap的数据结构来达到这个目的的，在类加载完成的时候，HotSpot就把对象内什么偏移量上是什么类型的数据计算出来，在JIT编译过程中，也会在特定的位置记录下栈和寄存器中哪些位置是引用，这样，GC在扫描时就可以直接得知这些信息了。</p>\n<h4 id=\"安全点\"><a href=\"#安全点\" class=\"headerlink\" title=\"安全点\"></a>安全点</h4><p>　　在OopMap的协助下，HotSpot可以快速且准确地完成GC Roots枚举，但一个很现实的问题随之而来：可能导致引用关系变化，或者说OopMap内容变化的指令非常多，如果为每一条指令都生成对应的OopMap，那将会需要大量的额外空间，这样GC的空间成本将会变得很高。实际上，HotSpot也的确没有为每条指令都生成OopMap，前面已经提到，只是在“特定的位置”记录了这些信息，这些位置称为安全点（Safepoint），即程序执行时并非在所有地方都能停顿下来开始GC，只有在到达安全点时才能暂停。 Safepoint的选定既不能太少以致于让GC等待时间太长，也不能过于频繁以致于过分增大运行时的负荷。 所以，安全点的选定基本上是以程序“是否具有让程序长时间执行的特征”为标准进行选定的——因为每条指令执行的时间都非常短暂，程序不太可能因为指令流长度太长这个原因而过长时间运行，“长时间执行”的最明显特征就是指令序列复用，例如方法调用、循环跳转、 异常跳转等，所以具有这些功能的指令才会产生Safepoint。<br>对于Sefepoint，另一个需要考虑的问题是如何在GC发生时让所有线程（这里不包括执行JNI调用的线程）都“跑”到最近的安全点上再停顿下来。 这里有两种方案可供选择：抢先式中断（Preemptive Suspension）和主动式中断（Voluntary Suspension），其中抢先式中断不需要线程的执行代码主动去配合，在GC发生时，首先把所有线程全部中断，如果发现有线程中断的地方不在安全点上，就恢复线程，让它“跑”到安全点上。 现在几乎没有虚拟机实现采用抢先式中断来暂停线程从而响应GC事件。<br>而主动式中断的思想是当GC需要中断线程的时候，不直接对线程操作，仅仅简单地设置一个标志，各个线程执行时主动去轮询这个标志，发现中断标志为真时就自己中断挂起。轮询标志的地方和安全点是重合的，另外再加上创建对象需要分配内存的地方。</p>\n<h4 id=\"安全区域\"><a href=\"#安全区域\" class=\"headerlink\" title=\"安全区域\"></a>安全区域</h4><p>　　使用Safepoint似乎已经完美地解决了如何进入GC的问题，但实际情况却并不一定。Safepoint机制保证了程序执行时，在不太长的时间内就会遇到可进入GC的Safepoint。但是，程序“不执行”的时候呢？所谓的程序不执行就是没有分配CPU时间，典型的例子就是线程处于Sleep状态或者Blocked状态，这时候线程无法响应JVM的中断请求，“走”到安全的地方去中断挂起，JVM也显然不太可能等待线程重新被分配CPU时间。 对于这种情况，就需要安全区域（Safe Region）来解决。<br>安全区域是指在一段代码片段之中，引用关系不会发生变化。 在这个区域中的任意地方开始GC都是安全的。 我们也可以把Safe Region看做是被扩展了的Safepoint。</p>\n<h2 id=\"在线程执行到Safe-Region中的代码时，首先标识自己已经进入了Safe-Region，那样，当在这段时间里JVM要发起GC时，就不用管标识自己为Safe-Region状态的线程了。在线程要离开Safe-Region时，它要检查系统是否已经完成了根节点枚举（或者是整个GC过程），如果完成了，那线程就继续执行，否则它就必须等待直到收到可以安全离开Safe-Region的信号为止。\"><a href=\"#在线程执行到Safe-Region中的代码时，首先标识自己已经进入了Safe-Region，那样，当在这段时间里JVM要发起GC时，就不用管标识自己为Safe-Region状态的线程了。在线程要离开Safe-Region时，它要检查系统是否已经完成了根节点枚举（或者是整个GC过程），如果完成了，那线程就继续执行，否则它就必须等待直到收到可以安全离开Safe-Region的信号为止。\" class=\"headerlink\" title=\"在线程执行到Safe Region中的代码时，首先标识自己已经进入了Safe Region，那样，当在这段时间里JVM要发起GC时，就不用管标识自己为Safe Region状态的线程了。在线程要离开Safe Region时，它要检查系统是否已经完成了根节点枚举（或者是整个GC过程），如果完成了，那线程就继续执行，否则它就必须等待直到收到可以安全离开Safe Region的信号为止。\"></a>在线程执行到Safe Region中的代码时，首先标识自己已经进入了Safe Region，那样，当在这段时间里JVM要发起GC时，就不用管标识自己为Safe Region状态的线程了。在线程要离开Safe Region时，它要检查系统是否已经完成了根节点枚举（或者是整个GC过程），如果完成了，那线程就继续执行，否则它就必须等待直到收到可以安全离开Safe Region的信号为止。</h2><p>以上</p>\n","excerpt":"<p>　　由于垃圾收集算法的实现涉及大量的程序细节，而且各个平台的虚拟机操作内存的方法又各不相同，这里只是介绍几种算法的思想及其发展过程。<br>","more":"</p>\n<h3 id=\"垃圾收集算法\"><a href=\"#垃圾收集算法\" class=\"headerlink\" title=\"垃圾收集算法\"></a>垃圾收集算法</h3><h4 id=\"标记-清除算法\"><a href=\"#标记-清除算法\" class=\"headerlink\" title=\"标记-清除算法\"></a>标记-清除算法</h4><p>　　最基础的算法是”标记-清除”(Mark-Sweep)算法，算法分为’标记’和’清除’两个阶段：首先标记处所有需要回收的对象，在标记后统一回收所有被标记的对象。它的主要不足有两个：一个事效率问题，标记和清除两个过程的效率都不高；另外一个事空间问题，标记清除之后会产生大量不连续的内存碎片，空间碎片太多可能会导致以后再程序运行过程中需要分配较大对象时，无法找到足够的连续内存而不得不提前触发另一次垃圾收集动作。</p>\n<h4 id=\"1-复制算法\"><a href=\"#1-复制算法\" class=\"headerlink\" title=\"1. 复制算法\"></a>1. 复制算法</h4><p>　　它将可用内存按容量划分为大小相等的两块，每次只使用其中的一块，当这一块的内存用完了，就将还存活着的对象复制到另外一块上面，然后把已经使用过的内存空间一次清理掉。这样使得每次都是对整个半区进行内存回收，内存分配时也就不用考虑内存碎片等复杂情况。只要移动堆顶指针，按顺序分配内存即可，实现简单，运行高效，只是这种算法的代价是将内存缩小为了原来的一般，代价太高。<br>现在的商业虚拟机都采用这种手机算法回收新生代，IBM公司的专门研究表明，新生代中的对象98%是朝生夕死的，所以并不需要按照1:1的比例来划分内存空间，而是将内存分为一块较大的Eden空间和两块较小的Survivor空间，每次使用Eden和其中一块Survivor空间上，最后清理掉Eden和刚才用过的Survivor中还存活着的对象一次性复制到另外一块Survivor空间上，最后清理掉Eden和刚才用过的Survivor空间。</p>\n<h4 id=\"2-标记-整理算法\"><a href=\"#2-标记-整理算法\" class=\"headerlink\" title=\"2. 标记-整理算法\"></a>2. 标记-整理算法</h4><p>　　复制收集短发在对象存活率较高时就要进行较多的复制操作，效率将会变低。更关键的是，如果不想浪费一半的空间，就需要额外的控件进行分配担保，以应对被使用的的内存中所有对象都100%存活的极端情况，所以在老年代一半不能直接选用这种算法。<br>根据老年代的特点，有人提出了另外一种”标记-整理”(Mark-Compact)算法，标记过程任然与”标记-清除”算法一样，但后续步骤不是直接对可回收对象进行清理，而是让所有存活的对象都向一端移动，然后直接清理掉端便捷以外的内存。</p>\n<h4 id=\"3-分代收集算法\"><a href=\"#3-分代收集算法\" class=\"headerlink\" title=\"3. 分代收集算法\"></a>3. 分代收集算法</h4><p>　　当前商业虚拟机的垃圾收集都采用”分代收集”(Generational Collection)算法，这种算法并没有什么新的思想，只是根据对象的存货周期的不同将内存划分为几块，一般是把Java堆分为新生代和老年代，这样就可以根据各个年代的特点采用最适当的收集算法。在新生代中，每次垃圾收集时都发现有大批对象死去，只有少量存活，那就选用复制算法，只需要付出少量存活对象的复制成本就可以完成收集。而老年代中因为对象存活率高、没有额外空间对它进行分配担保，就必须使用”标记-清理”或者”标记-整理”算法来进行回收。</p>\n<h3 id=\"HotSpot算法实现\"><a href=\"#HotSpot算法实现\" class=\"headerlink\" title=\"HotSpot算法实现\"></a>HotSpot算法实现</h3><h4 id=\"枚举根节点\"><a href=\"#枚举根节点\" class=\"headerlink\" title=\"枚举根节点\"></a>枚举根节点</h4><p>　　从可达性分析中从GC Roots节点引用链这个操作为例，可作为GC Roots的节点主要在全局性的引用(例如常量或类静态属性)与执行上下文(例如栈帧中的本地变量表)中，现在很多应用仅仅方法区就有数百兆，如果要逐个检查这里面的引用，那么必然会消耗很多时间。<br>另外，可达性分析对执行时间的敏感还体现在GC停顿上，因为这项分析工作必须在一个能确保一致性的快照中进行—-这里<code>一致性</code>的意思是指在这个分析期间整个执行系统看起来就像被冻结在某个时间点上，不可以出现分析过程中对象引用关系还在不断变化的情况，该点不满足的话分析结果准确性就无法得到抱枕。这点是导致GC进行时必须停顿所有Java执行线程(Sun将这件事情称为”Stop The World”)的其中一个重要原因，即使是在号称几乎不会发生停顿的CMS收集器中，枚举根节点时也是必须要停顿的。<br>由于目前的主流java虚拟机使用的都是准确式GC，所以当执行系统停顿下来后，并不需要一个不漏的检查完所有执行上下文和全局引用位置，虚拟机应当是有办法直接得知哪些地方存放着对象引用。在HotSpot的实现中，是使用一组称为OopMap的数据结构来达到这个目的的，在类加载完成的时候，HotSpot就把对象内什么偏移量上是什么类型的数据计算出来，在JIT编译过程中，也会在特定的位置记录下栈和寄存器中哪些位置是引用，这样，GC在扫描时就可以直接得知这些信息了。</p>\n<h4 id=\"安全点\"><a href=\"#安全点\" class=\"headerlink\" title=\"安全点\"></a>安全点</h4><p>　　在OopMap的协助下，HotSpot可以快速且准确地完成GC Roots枚举，但一个很现实的问题随之而来：可能导致引用关系变化，或者说OopMap内容变化的指令非常多，如果为每一条指令都生成对应的OopMap，那将会需要大量的额外空间，这样GC的空间成本将会变得很高。实际上，HotSpot也的确没有为每条指令都生成OopMap，前面已经提到，只是在“特定的位置”记录了这些信息，这些位置称为安全点（Safepoint），即程序执行时并非在所有地方都能停顿下来开始GC，只有在到达安全点时才能暂停。 Safepoint的选定既不能太少以致于让GC等待时间太长，也不能过于频繁以致于过分增大运行时的负荷。 所以，安全点的选定基本上是以程序“是否具有让程序长时间执行的特征”为标准进行选定的——因为每条指令执行的时间都非常短暂，程序不太可能因为指令流长度太长这个原因而过长时间运行，“长时间执行”的最明显特征就是指令序列复用，例如方法调用、循环跳转、 异常跳转等，所以具有这些功能的指令才会产生Safepoint。<br>对于Sefepoint，另一个需要考虑的问题是如何在GC发生时让所有线程（这里不包括执行JNI调用的线程）都“跑”到最近的安全点上再停顿下来。 这里有两种方案可供选择：抢先式中断（Preemptive Suspension）和主动式中断（Voluntary Suspension），其中抢先式中断不需要线程的执行代码主动去配合，在GC发生时，首先把所有线程全部中断，如果发现有线程中断的地方不在安全点上，就恢复线程，让它“跑”到安全点上。 现在几乎没有虚拟机实现采用抢先式中断来暂停线程从而响应GC事件。<br>而主动式中断的思想是当GC需要中断线程的时候，不直接对线程操作，仅仅简单地设置一个标志，各个线程执行时主动去轮询这个标志，发现中断标志为真时就自己中断挂起。轮询标志的地方和安全点是重合的，另外再加上创建对象需要分配内存的地方。</p>\n<h4 id=\"安全区域\"><a href=\"#安全区域\" class=\"headerlink\" title=\"安全区域\"></a>安全区域</h4><p>　　使用Safepoint似乎已经完美地解决了如何进入GC的问题，但实际情况却并不一定。Safepoint机制保证了程序执行时，在不太长的时间内就会遇到可进入GC的Safepoint。但是，程序“不执行”的时候呢？所谓的程序不执行就是没有分配CPU时间，典型的例子就是线程处于Sleep状态或者Blocked状态，这时候线程无法响应JVM的中断请求，“走”到安全的地方去中断挂起，JVM也显然不太可能等待线程重新被分配CPU时间。 对于这种情况，就需要安全区域（Safe Region）来解决。<br>安全区域是指在一段代码片段之中，引用关系不会发生变化。 在这个区域中的任意地方开始GC都是安全的。 我们也可以把Safe Region看做是被扩展了的Safepoint。</p>\n<h2 id=\"在线程执行到Safe-Region中的代码时，首先标识自己已经进入了Safe-Region，那样，当在这段时间里JVM要发起GC时，就不用管标识自己为Safe-Region状态的线程了。在线程要离开Safe-Region时，它要检查系统是否已经完成了根节点枚举（或者是整个GC过程），如果完成了，那线程就继续执行，否则它就必须等待直到收到可以安全离开Safe-Region的信号为止。\"><a href=\"#在线程执行到Safe-Region中的代码时，首先标识自己已经进入了Safe-Region，那样，当在这段时间里JVM要发起GC时，就不用管标识自己为Safe-Region状态的线程了。在线程要离开Safe-Region时，它要检查系统是否已经完成了根节点枚举（或者是整个GC过程），如果完成了，那线程就继续执行，否则它就必须等待直到收到可以安全离开Safe-Region的信号为止。\" class=\"headerlink\" title=\"在线程执行到Safe Region中的代码时，首先标识自己已经进入了Safe Region，那样，当在这段时间里JVM要发起GC时，就不用管标识自己为Safe Region状态的线程了。在线程要离开Safe Region时，它要检查系统是否已经完成了根节点枚举（或者是整个GC过程），如果完成了，那线程就继续执行，否则它就必须等待直到收到可以安全离开Safe Region的信号为止。\"></a>在线程执行到Safe Region中的代码时，首先标识自己已经进入了Safe Region，那样，当在这段时间里JVM要发起GC时，就不用管标识自己为Safe Region状态的线程了。在线程要离开Safe Region时，它要检查系统是否已经完成了根节点枚举（或者是整个GC过程），如果完成了，那线程就继续执行，否则它就必须等待直到收到可以安全离开Safe Region的信号为止。</h2><p>以上</p>"},{"title":"flask笔记一 快速入门","date":"2017-07-15T01:55:52.000Z","_content":"学习python和flask中看过的资料和自己的实践总结\n[Flask英文](http://flask.pocoo.org/)\n以下内容来自[flask中文](http://docs.jinkan.org/docs/flask)\n<!--more-->\n#### 环境安装\nFlask依赖两个外部库：Werkzeug和Jinja2。Werkzeug是一个WSGI工具集、Jinja2负责渲染模板。首先需要python2.6或者更高的版本，python3.X安装方式可能有所不一致。\n###### virtualenv\nvirtualenv 为每个不同项目提供一份 Python 安装。它并没有真正安装多个 Python 副本，但是它确实提供了一种巧妙的方式来让各项目环境保持独立。\n`sudo apt-get install python-virtualenv`\nvirtualenv安装完成后，用IDE比如pycharm创建一个Flask的项目工程，并在其下创建一个venv文件夹\n```shell\n$ mkdir myproject\n$ cd myproject\n$ virtualenv venv\nNew python executable in venv/bin/python\nInstalling distribute............done.\n```\n然后激活相应的环境\n`$ . venv/bin/activate`\n然后激活virtualenv中的Flask\n`$ pip install Flask`\n#### 项目配置\n在pycharm中，打开setting\n![项目设置](/image/python/Flask/pycharm_project_setting1.png)\n在Project Interpreter中选择当前工程文件下的virtualenv\n打开工程的Configuration\n![项目设置](/image/python/Flask/pycharm_project_setting2.png)\n在python interpreter中选择当前工程文件下的virtualenv\n#### 项目说明\n###### 总述\n刚刚新建的工程看起来会是这样的\n``` python\nfrom flask import Flask\napp = Flask(__name__)\n\n@app.route('/')\ndef hello_world():\n    return 'Hello World!'\n\nif __name__ == '__main__':\n    app.run()\n```\n运行这段程序(文件名不要是 flask.py，这会和已有的文件冲突)，浏览器访问`127.0.0.1:5000`，然后就会看到熟悉的`hello world`.\n那么，这段代码做了什么？\n\n1. 首先，我们导入了 Flask 类。这个类的实例将会是我们的 WSGI 应用程序。\n接下来，我们创建一个该类的实例，第一个参数是应用模块或者包的名称。 如果你使用单一的模块（如本例），你应该使用 __name__ ，因为模块的名称将会因其作为单独应用启动还是作为模块导入而有不同（ 也即是 '__main__' 或实际的导入名）。这是必须的，这样 Flask 才知道到哪去找模板、静态文件等等。详情见 Flask 的文档。\n2. 然后，我们使用 route() 装饰器告诉 Flask 什么样的URL 能触发我们的函数。\n这个函数的名字也在生成 URL 时被特定的函数采用，这个函数返回我们想要显示在用户浏览器中的信息。\n3. 最后我们用 run() 函数来让应用运行在本地服务器上。 其中 if __name__ == '__main__': 确保服务器只会在该脚本被 Python 解释器直接执行的时候才会运行，而不是作为模块导入的时候。\n  欲关闭服务器，按 Ctrl+C。\n你会发现它只能从自己的计算机上访问，网络中其他任何地方都不能访问，我们可以修改run()方法使该服务公开可用\n`app.run(host='0.0.0.0')`\n这样会让操作系统监听所有的公网IP\n同样可以开启debug模式\n`app.debug = True;app.run()`\n或者\n`app.run(debug=True)` \n###### 路由\n如上面的代码所示，route()装饰其吧一个函数绑定到对应的URL上\n``` python\n@app.route('/')\ndef index():\n    return 'Index Page'\n\n@app.route('/hello')\ndef hello():\n    return 'Hello World'\n```\n不仅如此，还可以构造含有动态部分的URL，也可以在一个函数上附着多个规则\n###### 变量规则\n要给 URL 添加变量部分，你可以把这些特殊的字段标记为 <variable_name> ， 这个部分将会作为命名参数传递到你的函数。规则可以用 <converter:variable_name> 指定一个可选的转换器。如下所示\n\n``` python\n@app.route('/user/<username>')\ndef show_user_profile(username):\n    # show the user profile for that user\n    return 'User %s' % username\n\n@app.route('/post/<int:post_id>')\ndef show_post(post_id):\n    # show the post with the given id, the id is an integer\n    return 'Post %d' % post_id\n```\n###### HTTP方法\nHTTP有许多不同的访问URL方法。默认情况下，路由只回应GET请求，但是通过route()装饰器传递methods参数可以改变这个行为。\n\n``` python\n@app.route('/login', methods=['GET', 'POST'])\ndef login():\n    if request.method == 'POST':\n        do_the_login()\n    else:\n        show_the_login_form()\n```\n###### 模板渲染\n像javaweb一样，不会直接用servlet直接输出html代码，Flask可以使用render_template()方法来渲染模板，Flask配备Jinja2模板引擎[Jinja2中文](http://docs.jinkan.org/docs/jinja2/)，[Jinja2英文](http://jinja.pocoo.org/)\n```python\nfrom flask import render_template\n\n@app.route('/hello/')\n@app.route('/hello/<name>')\ndef hello(name=None):\n    return render_template('hello.html', name=name)\n```\nFlask 会在 templates 文件夹里寻找模板。所以，如果你的应用是个模块，这个文件夹应该与模块同级；如果它是一个包，那么这个文件夹作为包的子目录:\n情况 1: 模块:\n```\n/application.py\n/templates\n    /hello.html\n```\n情况 2: 包:\n```\n/application\n    /__init__.py\n    /templates\n        /hello.html\n```\n下面是`hello.html`文件内容\n``` Jinja2\n<!doctype html>\n<title>Hello from Flask</title>\n{% if name %}\n  <h1>Hello {{ name }}!</h1>\n{% else %}\n  <h1>Hello World!</h1>\n{% endif %}\n```\n###### 访问请求数据\n可以通过`request.form`属性来访问表单数据。\n``` python\n@app.route(\"/signin\", methods=[\"POST\"])\ndef signin():\n    print request.args.get(\"username\")\n    username = request.form[\"username\"]\n    return render_template('hello.html', name=username)\n```\n如果form表单中不存在所要获取的键，会抛出特殊的KeyError异常。\n###### 文件上传\n首先确保HTML表单中设置 `enctype=\"multipart/form-data\" `属性，否则浏览器根本不会发送文件。\n已上传的文件存储在内存或是文件系统中一个临时的位置。可以通过请求对象的`file`属性访问它。每个上传的文件都会存储在这个字典里。同时它还有一个`save()`方法，这个方法允许把文件保额哦村到服务器的文件系统上。如果像知道上传的文件在客户端是什么名字，可以访问`filename`属性\n``` python\nfrom flask import request\n\n@app.route('/upload', methods=['GET', 'POST'])\ndef upload_file():\n    if request.method == 'POST':\n        f = request.files['the_file']\n        f.save('/var/www/uploads/uploaded_file.txt')\n```\n###### Cookies\n可以通过`cookies`属性来访问Cookies，用响应对象的`set_cookie`方法来设置Cookies。请求对象的`cookies`属性是一个内容为客户端提交的所有Cookies的字典.\n读取cookies：\n```python\nfrom flask import request\n\n@app.route('/')\ndef index():\n    username = request.cookies.get('username')\n    # use cookies.get(key) instead of cookies[key] to not get a\n    # KeyError if the cookie is missing.\n```\n存储cookie：\n``` python\nfrom flask import make_response\n\n@app.route('/')\ndef index():\n    resp = make_response(render_template(...))\n    resp.set_cookie('username', 'the username')\n    return resp\n```\n需要注意的是，Cookies是设置在响应对象上的。由于通常视图函数只是返回字符串，之后Flask将字符串转换为响应对象。\n###### 重定向和错误\n可以使用`redirect()`函数把用户重定向到其他地方。用`abort()`函数放弃请求并返回错误代码，如下：\n``` python\nfrom flask import abort, redirect, url_for\n\n@app.route('/')\ndef index():\n    return redirect(url_for('login'))\n\n@app.route('/login')\ndef login():\n    abort(401)\n    this_is_never_executed()\n```\n这是一个完全没有任何意义的代码，因为用户会从主页重定向到一个不能访问的页面。默认情况下，错误代码会显示一个黑白的错误页面，如果要定制错误页面，可以使用`errorhandler()`装饰器\n```python\nfrom flask import render_template\n\n@app.errorhandler(404)\ndef page_not_found(error):\n    return render_template('page_not_found.html'), 404\n```\n注意`render_template()调用之后的404，这告诉Flask，该页的错误代码是404。默认是200,也就是一切正常\n###### 关于响应\n视图函数的返回值会被自动转换为一个响应对象。如果返回值是一个字符串， 它被转换为该字符串为主体的、状态码为 200 OK``的 、 MIME 类型是 ``text/html 的响应对象。Flask 把返回值转换为响应对象的逻辑是这样：\n1. 如果返回的是一个合法的响应对象，它会从视图直接返回。\n2. 如果返回的是一个字符串，响应对象会用字符串数据和默认参数创建。\n3. 如果返回的是一个元组，且元组中的元素可以提供额外的信息。这样的元组必须是 (response, status, headers) 的形式，且至少包含一个元素。 status 值会覆盖状态代码， headers 可以是一个列表或字典，作为额外的消息标头值。\n4. 如果上述条件均不满足， Flask 会假设返回值是一个合法的 WSGI 应用程序，并转换为一个请求对象。\n如果你想在视图里操纵上述步骤结果的响应对象，可以使用 make_response() 函数。\n\n譬如你有这样一个视图:\n```python\n@app.errorhandler(404)\ndef not_found(error):\n    return render_template('error.html'), 404\n```\n只需要把返回值表达式传递给`make_response()`，获取结果对象并修改，然后再返回它:\n``` python \n@app.errorhandler(404)\ndef not_found(error):\n    resp = make_response(render_template('error.html'), 404)\n    resp.headers['X-Something'] = 'A value'\n    return resp\n```\n###### 会话\n除请求对象之后，还有一个`session`对象，它允许你在不同请求间存储特定用户的信息。他是在Cookies的基础上实现，并且对Cookies进行密钥签名。这意味着用户可以查看你Cookie的内容，但却不能修改它，除非用户知道签名的密钥。\n要使用会话，需要设置一个密钥\n``` python\nfrom flask import Flask, session, redirect, url_for, escape, request\n\napp = Flask(__name__)\n\n@app.route('/')\ndef index():\n    if 'username' in session:\n        return 'Logged in as %s' % escape(session['username'])\n    return 'You are not logged in'\n\n@app.route('/login', methods=['GET', 'POST'])\ndef login():\n    if request.method == 'POST':\n        session['username'] = request.form['username']\n        return redirect(url_for('index'))\n    return '''\n        <form action=\"\" method=\"post\">\n            <p><input type=text name=username>\n            <p><input type=submit value=Login>\n        </form>\n    '''\n\n@app.route('/logout')\ndef logout():\n    # remove the username from the session if it's there\n    session.pop('username', None)\n    return redirect(url_for('index'))\n\n# set the secret key.  keep this really secret:\napp.secret_key = 'A0Zr98j/3yX R~XHH!jmN]LWX/,?RT'\n```\n这里提到的`escape()`可以在模板引擎外做转义\n\n----\n以上","source":"_posts/flask笔记一(快速入门).md","raw":"---\ntitle: flask笔记一 快速入门\ndate: 2017-07-15 09:55:52\ntags: [python,flask]\n---\n学习python和flask中看过的资料和自己的实践总结\n[Flask英文](http://flask.pocoo.org/)\n以下内容来自[flask中文](http://docs.jinkan.org/docs/flask)\n<!--more-->\n#### 环境安装\nFlask依赖两个外部库：Werkzeug和Jinja2。Werkzeug是一个WSGI工具集、Jinja2负责渲染模板。首先需要python2.6或者更高的版本，python3.X安装方式可能有所不一致。\n###### virtualenv\nvirtualenv 为每个不同项目提供一份 Python 安装。它并没有真正安装多个 Python 副本，但是它确实提供了一种巧妙的方式来让各项目环境保持独立。\n`sudo apt-get install python-virtualenv`\nvirtualenv安装完成后，用IDE比如pycharm创建一个Flask的项目工程，并在其下创建一个venv文件夹\n```shell\n$ mkdir myproject\n$ cd myproject\n$ virtualenv venv\nNew python executable in venv/bin/python\nInstalling distribute............done.\n```\n然后激活相应的环境\n`$ . venv/bin/activate`\n然后激活virtualenv中的Flask\n`$ pip install Flask`\n#### 项目配置\n在pycharm中，打开setting\n![项目设置](/image/python/Flask/pycharm_project_setting1.png)\n在Project Interpreter中选择当前工程文件下的virtualenv\n打开工程的Configuration\n![项目设置](/image/python/Flask/pycharm_project_setting2.png)\n在python interpreter中选择当前工程文件下的virtualenv\n#### 项目说明\n###### 总述\n刚刚新建的工程看起来会是这样的\n``` python\nfrom flask import Flask\napp = Flask(__name__)\n\n@app.route('/')\ndef hello_world():\n    return 'Hello World!'\n\nif __name__ == '__main__':\n    app.run()\n```\n运行这段程序(文件名不要是 flask.py，这会和已有的文件冲突)，浏览器访问`127.0.0.1:5000`，然后就会看到熟悉的`hello world`.\n那么，这段代码做了什么？\n\n1. 首先，我们导入了 Flask 类。这个类的实例将会是我们的 WSGI 应用程序。\n接下来，我们创建一个该类的实例，第一个参数是应用模块或者包的名称。 如果你使用单一的模块（如本例），你应该使用 __name__ ，因为模块的名称将会因其作为单独应用启动还是作为模块导入而有不同（ 也即是 '__main__' 或实际的导入名）。这是必须的，这样 Flask 才知道到哪去找模板、静态文件等等。详情见 Flask 的文档。\n2. 然后，我们使用 route() 装饰器告诉 Flask 什么样的URL 能触发我们的函数。\n这个函数的名字也在生成 URL 时被特定的函数采用，这个函数返回我们想要显示在用户浏览器中的信息。\n3. 最后我们用 run() 函数来让应用运行在本地服务器上。 其中 if __name__ == '__main__': 确保服务器只会在该脚本被 Python 解释器直接执行的时候才会运行，而不是作为模块导入的时候。\n  欲关闭服务器，按 Ctrl+C。\n你会发现它只能从自己的计算机上访问，网络中其他任何地方都不能访问，我们可以修改run()方法使该服务公开可用\n`app.run(host='0.0.0.0')`\n这样会让操作系统监听所有的公网IP\n同样可以开启debug模式\n`app.debug = True;app.run()`\n或者\n`app.run(debug=True)` \n###### 路由\n如上面的代码所示，route()装饰其吧一个函数绑定到对应的URL上\n``` python\n@app.route('/')\ndef index():\n    return 'Index Page'\n\n@app.route('/hello')\ndef hello():\n    return 'Hello World'\n```\n不仅如此，还可以构造含有动态部分的URL，也可以在一个函数上附着多个规则\n###### 变量规则\n要给 URL 添加变量部分，你可以把这些特殊的字段标记为 <variable_name> ， 这个部分将会作为命名参数传递到你的函数。规则可以用 <converter:variable_name> 指定一个可选的转换器。如下所示\n\n``` python\n@app.route('/user/<username>')\ndef show_user_profile(username):\n    # show the user profile for that user\n    return 'User %s' % username\n\n@app.route('/post/<int:post_id>')\ndef show_post(post_id):\n    # show the post with the given id, the id is an integer\n    return 'Post %d' % post_id\n```\n###### HTTP方法\nHTTP有许多不同的访问URL方法。默认情况下，路由只回应GET请求，但是通过route()装饰器传递methods参数可以改变这个行为。\n\n``` python\n@app.route('/login', methods=['GET', 'POST'])\ndef login():\n    if request.method == 'POST':\n        do_the_login()\n    else:\n        show_the_login_form()\n```\n###### 模板渲染\n像javaweb一样，不会直接用servlet直接输出html代码，Flask可以使用render_template()方法来渲染模板，Flask配备Jinja2模板引擎[Jinja2中文](http://docs.jinkan.org/docs/jinja2/)，[Jinja2英文](http://jinja.pocoo.org/)\n```python\nfrom flask import render_template\n\n@app.route('/hello/')\n@app.route('/hello/<name>')\ndef hello(name=None):\n    return render_template('hello.html', name=name)\n```\nFlask 会在 templates 文件夹里寻找模板。所以，如果你的应用是个模块，这个文件夹应该与模块同级；如果它是一个包，那么这个文件夹作为包的子目录:\n情况 1: 模块:\n```\n/application.py\n/templates\n    /hello.html\n```\n情况 2: 包:\n```\n/application\n    /__init__.py\n    /templates\n        /hello.html\n```\n下面是`hello.html`文件内容\n``` Jinja2\n<!doctype html>\n<title>Hello from Flask</title>\n{% if name %}\n  <h1>Hello {{ name }}!</h1>\n{% else %}\n  <h1>Hello World!</h1>\n{% endif %}\n```\n###### 访问请求数据\n可以通过`request.form`属性来访问表单数据。\n``` python\n@app.route(\"/signin\", methods=[\"POST\"])\ndef signin():\n    print request.args.get(\"username\")\n    username = request.form[\"username\"]\n    return render_template('hello.html', name=username)\n```\n如果form表单中不存在所要获取的键，会抛出特殊的KeyError异常。\n###### 文件上传\n首先确保HTML表单中设置 `enctype=\"multipart/form-data\" `属性，否则浏览器根本不会发送文件。\n已上传的文件存储在内存或是文件系统中一个临时的位置。可以通过请求对象的`file`属性访问它。每个上传的文件都会存储在这个字典里。同时它还有一个`save()`方法，这个方法允许把文件保额哦村到服务器的文件系统上。如果像知道上传的文件在客户端是什么名字，可以访问`filename`属性\n``` python\nfrom flask import request\n\n@app.route('/upload', methods=['GET', 'POST'])\ndef upload_file():\n    if request.method == 'POST':\n        f = request.files['the_file']\n        f.save('/var/www/uploads/uploaded_file.txt')\n```\n###### Cookies\n可以通过`cookies`属性来访问Cookies，用响应对象的`set_cookie`方法来设置Cookies。请求对象的`cookies`属性是一个内容为客户端提交的所有Cookies的字典.\n读取cookies：\n```python\nfrom flask import request\n\n@app.route('/')\ndef index():\n    username = request.cookies.get('username')\n    # use cookies.get(key) instead of cookies[key] to not get a\n    # KeyError if the cookie is missing.\n```\n存储cookie：\n``` python\nfrom flask import make_response\n\n@app.route('/')\ndef index():\n    resp = make_response(render_template(...))\n    resp.set_cookie('username', 'the username')\n    return resp\n```\n需要注意的是，Cookies是设置在响应对象上的。由于通常视图函数只是返回字符串，之后Flask将字符串转换为响应对象。\n###### 重定向和错误\n可以使用`redirect()`函数把用户重定向到其他地方。用`abort()`函数放弃请求并返回错误代码，如下：\n``` python\nfrom flask import abort, redirect, url_for\n\n@app.route('/')\ndef index():\n    return redirect(url_for('login'))\n\n@app.route('/login')\ndef login():\n    abort(401)\n    this_is_never_executed()\n```\n这是一个完全没有任何意义的代码，因为用户会从主页重定向到一个不能访问的页面。默认情况下，错误代码会显示一个黑白的错误页面，如果要定制错误页面，可以使用`errorhandler()`装饰器\n```python\nfrom flask import render_template\n\n@app.errorhandler(404)\ndef page_not_found(error):\n    return render_template('page_not_found.html'), 404\n```\n注意`render_template()调用之后的404，这告诉Flask，该页的错误代码是404。默认是200,也就是一切正常\n###### 关于响应\n视图函数的返回值会被自动转换为一个响应对象。如果返回值是一个字符串， 它被转换为该字符串为主体的、状态码为 200 OK``的 、 MIME 类型是 ``text/html 的响应对象。Flask 把返回值转换为响应对象的逻辑是这样：\n1. 如果返回的是一个合法的响应对象，它会从视图直接返回。\n2. 如果返回的是一个字符串，响应对象会用字符串数据和默认参数创建。\n3. 如果返回的是一个元组，且元组中的元素可以提供额外的信息。这样的元组必须是 (response, status, headers) 的形式，且至少包含一个元素。 status 值会覆盖状态代码， headers 可以是一个列表或字典，作为额外的消息标头值。\n4. 如果上述条件均不满足， Flask 会假设返回值是一个合法的 WSGI 应用程序，并转换为一个请求对象。\n如果你想在视图里操纵上述步骤结果的响应对象，可以使用 make_response() 函数。\n\n譬如你有这样一个视图:\n```python\n@app.errorhandler(404)\ndef not_found(error):\n    return render_template('error.html'), 404\n```\n只需要把返回值表达式传递给`make_response()`，获取结果对象并修改，然后再返回它:\n``` python \n@app.errorhandler(404)\ndef not_found(error):\n    resp = make_response(render_template('error.html'), 404)\n    resp.headers['X-Something'] = 'A value'\n    return resp\n```\n###### 会话\n除请求对象之后，还有一个`session`对象，它允许你在不同请求间存储特定用户的信息。他是在Cookies的基础上实现，并且对Cookies进行密钥签名。这意味着用户可以查看你Cookie的内容，但却不能修改它，除非用户知道签名的密钥。\n要使用会话，需要设置一个密钥\n``` python\nfrom flask import Flask, session, redirect, url_for, escape, request\n\napp = Flask(__name__)\n\n@app.route('/')\ndef index():\n    if 'username' in session:\n        return 'Logged in as %s' % escape(session['username'])\n    return 'You are not logged in'\n\n@app.route('/login', methods=['GET', 'POST'])\ndef login():\n    if request.method == 'POST':\n        session['username'] = request.form['username']\n        return redirect(url_for('index'))\n    return '''\n        <form action=\"\" method=\"post\">\n            <p><input type=text name=username>\n            <p><input type=submit value=Login>\n        </form>\n    '''\n\n@app.route('/logout')\ndef logout():\n    # remove the username from the session if it's there\n    session.pop('username', None)\n    return redirect(url_for('index'))\n\n# set the secret key.  keep this really secret:\napp.secret_key = 'A0Zr98j/3yX R~XHH!jmN]LWX/,?RT'\n```\n这里提到的`escape()`可以在模板引擎外做转义\n\n----\n以上","slug":"flask笔记一(快速入门)","published":1,"updated":"2017-12-30T13:13:07.227Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjbvyt3uo000hscdgyziprl5k","content":"<p>学习python和flask中看过的资料和自己的实践总结<br><a href=\"http://flask.pocoo.org/\" target=\"_blank\" rel=\"external\">Flask英文</a><br>以下内容来自<a href=\"http://docs.jinkan.org/docs/flask\" target=\"_blank\" rel=\"external\">flask中文</a><br><a id=\"more\"></a></p>\n<h4 id=\"环境安装\"><a href=\"#环境安装\" class=\"headerlink\" title=\"环境安装\"></a>环境安装</h4><p>Flask依赖两个外部库：Werkzeug和Jinja2。Werkzeug是一个WSGI工具集、Jinja2负责渲染模板。首先需要python2.6或者更高的版本，python3.X安装方式可能有所不一致。</p>\n<h6 id=\"virtualenv\"><a href=\"#virtualenv\" class=\"headerlink\" title=\"virtualenv\"></a>virtualenv</h6><p>virtualenv 为每个不同项目提供一份 Python 安装。它并没有真正安装多个 Python 副本，但是它确实提供了一种巧妙的方式来让各项目环境保持独立。<br><code>sudo apt-get install python-virtualenv</code><br>virtualenv安装完成后，用IDE比如pycharm创建一个Flask的项目工程，并在其下创建一个venv文件夹<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ mkdir myproject</div><div class=\"line\">$ cd myproject</div><div class=\"line\">$ virtualenv venv</div><div class=\"line\">New python executable in venv/bin/python</div><div class=\"line\">Installing distribute............done.</div></pre></td></tr></table></figure></p>\n<p>然后激活相应的环境<br><code>$ . venv/bin/activate</code><br>然后激活virtualenv中的Flask<br><code>$ pip install Flask</code></p>\n<h4 id=\"项目配置\"><a href=\"#项目配置\" class=\"headerlink\" title=\"项目配置\"></a>项目配置</h4><p>在pycharm中，打开setting<br><img src=\"/image/python/Flask/pycharm_project_setting1.png\" alt=\"项目设置\"><br>在Project Interpreter中选择当前工程文件下的virtualenv<br>打开工程的Configuration<br><img src=\"/image/python/Flask/pycharm_project_setting2.png\" alt=\"项目设置\"><br>在python interpreter中选择当前工程文件下的virtualenv</p>\n<h4 id=\"项目说明\"><a href=\"#项目说明\" class=\"headerlink\" title=\"项目说明\"></a>项目说明</h4><h6 id=\"总述\"><a href=\"#总述\" class=\"headerlink\" title=\"总述\"></a>总述</h6><p>刚刚新建的工程看起来会是这样的<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">from</span> flask <span class=\"keyword\">import</span> Flask</div><div class=\"line\">app = Flask(__name__)</div><div class=\"line\"></div><div class=\"line\"><span class=\"meta\">@app.route('/')</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">hello_world</span><span class=\"params\">()</span>:</span></div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"string\">'Hello World!'</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">if</span> __name__ == <span class=\"string\">'__main__'</span>:</div><div class=\"line\">    app.run()</div></pre></td></tr></table></figure></p>\n<p>运行这段程序(文件名不要是 flask.py，这会和已有的文件冲突)，浏览器访问<code>127.0.0.1:5000</code>，然后就会看到熟悉的<code>hello world</code>.<br>那么，这段代码做了什么？</p>\n<ol>\n<li>首先，我们导入了 Flask 类。这个类的实例将会是我们的 WSGI 应用程序。<br>接下来，我们创建一个该类的实例，第一个参数是应用模块或者包的名称。 如果你使用单一的模块（如本例），你应该使用 <strong>name</strong> ，因为模块的名称将会因其作为单独应用启动还是作为模块导入而有不同（ 也即是 ‘<strong>main</strong>‘ 或实际的导入名）。这是必须的，这样 Flask 才知道到哪去找模板、静态文件等等。详情见 Flask 的文档。</li>\n<li>然后，我们使用 route() 装饰器告诉 Flask 什么样的URL 能触发我们的函数。<br>这个函数的名字也在生成 URL 时被特定的函数采用，这个函数返回我们想要显示在用户浏览器中的信息。</li>\n<li>最后我们用 run() 函数来让应用运行在本地服务器上。 其中 if <strong>name</strong> == ‘<strong>main</strong>‘: 确保服务器只会在该脚本被 Python 解释器直接执行的时候才会运行，而不是作为模块导入的时候。<br>欲关闭服务器，按 Ctrl+C。<br>你会发现它只能从自己的计算机上访问，网络中其他任何地方都不能访问，我们可以修改run()方法使该服务公开可用<br><code>app.run(host=&#39;0.0.0.0&#39;)</code><br>这样会让操作系统监听所有的公网IP<br>同样可以开启debug模式<br><code>app.debug = True;app.run()</code><br>或者<br><code>app.run(debug=True)</code> <h6 id=\"路由\"><a href=\"#路由\" class=\"headerlink\" title=\"路由\"></a>路由</h6>如上面的代码所示，route()装饰其吧一个函数绑定到对应的URL上<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">@app.route('/')</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">index</span><span class=\"params\">()</span>:</span></div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"string\">'Index Page'</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"meta\">@app.route('/hello')</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">hello</span><span class=\"params\">()</span>:</span></div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"string\">'Hello World'</span></div></pre></td></tr></table></figure>\n</li>\n</ol>\n<p>不仅如此，还可以构造含有动态部分的URL，也可以在一个函数上附着多个规则</p>\n<h6 id=\"变量规则\"><a href=\"#变量规则\" class=\"headerlink\" title=\"变量规则\"></a>变量规则</h6><p>要给 URL 添加变量部分，你可以把这些特殊的字段标记为 <variable_name> ， 这个部分将会作为命名参数传递到你的函数。规则可以用 <converter:variable_name> 指定一个可选的转换器。如下所示</converter:variable_name></variable_name></p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">@app.route('/user/&lt;username&gt;')</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">show_user_profile</span><span class=\"params\">(username)</span>:</span></div><div class=\"line\">    <span class=\"comment\"># show the user profile for that user</span></div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"string\">'User %s'</span> % username</div><div class=\"line\"></div><div class=\"line\"><span class=\"meta\">@app.route('/post/&lt;int:post_id&gt;')</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">show_post</span><span class=\"params\">(post_id)</span>:</span></div><div class=\"line\">    <span class=\"comment\"># show the post with the given id, the id is an integer</span></div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"string\">'Post %d'</span> % post_id</div></pre></td></tr></table></figure>\n<h6 id=\"HTTP方法\"><a href=\"#HTTP方法\" class=\"headerlink\" title=\"HTTP方法\"></a>HTTP方法</h6><p>HTTP有许多不同的访问URL方法。默认情况下，路由只回应GET请求，但是通过route()装饰器传递methods参数可以改变这个行为。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">@app.route('/login', methods=['GET', 'POST'])</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">login</span><span class=\"params\">()</span>:</span></div><div class=\"line\">    <span class=\"keyword\">if</span> request.method == <span class=\"string\">'POST'</span>:</div><div class=\"line\">        do_the_login()</div><div class=\"line\">    <span class=\"keyword\">else</span>:</div><div class=\"line\">        show_the_login_form()</div></pre></td></tr></table></figure>\n<h6 id=\"模板渲染\"><a href=\"#模板渲染\" class=\"headerlink\" title=\"模板渲染\"></a>模板渲染</h6><p>像javaweb一样，不会直接用servlet直接输出html代码，Flask可以使用render_template()方法来渲染模板，Flask配备Jinja2模板引擎<a href=\"http://docs.jinkan.org/docs/jinja2/\" target=\"_blank\" rel=\"external\">Jinja2中文</a>，<a href=\"http://jinja.pocoo.org/\" target=\"_blank\" rel=\"external\">Jinja2英文</a><br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">from</span> flask <span class=\"keyword\">import</span> render_template</div><div class=\"line\"></div><div class=\"line\"><span class=\"meta\">@app.route('/hello/')</span></div><div class=\"line\"><span class=\"meta\">@app.route('/hello/&lt;name&gt;')</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">hello</span><span class=\"params\">(name=None)</span>:</span></div><div class=\"line\">    <span class=\"keyword\">return</span> render_template(<span class=\"string\">'hello.html'</span>, name=name)</div></pre></td></tr></table></figure></p>\n<p>Flask 会在 templates 文件夹里寻找模板。所以，如果你的应用是个模块，这个文件夹应该与模块同级；如果它是一个包，那么这个文件夹作为包的子目录:<br>情况 1: 模块:<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">/application.py</div><div class=\"line\">/templates</div><div class=\"line\">    /hello.html</div></pre></td></tr></table></figure></p>\n<p>情况 2: 包:<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">/application</div><div class=\"line\">    /__init__.py</div><div class=\"line\">    /templates</div><div class=\"line\">        /hello.html</div></pre></td></tr></table></figure></p>\n<p>下面是<code>hello.html</code>文件内容<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;!doctype html&gt;</div><div class=\"line\">&lt;title&gt;Hello from Flask&lt;/title&gt;</div><div class=\"line\">&#123;% if name %&#125;</div><div class=\"line\">  &lt;h1&gt;Hello &#123;&#123; name &#125;&#125;!&lt;/h1&gt;</div><div class=\"line\">&#123;% else %&#125;</div><div class=\"line\">  &lt;h1&gt;Hello World!&lt;/h1&gt;</div><div class=\"line\">&#123;% endif %&#125;</div></pre></td></tr></table></figure></p>\n<h6 id=\"访问请求数据\"><a href=\"#访问请求数据\" class=\"headerlink\" title=\"访问请求数据\"></a>访问请求数据</h6><p>可以通过<code>request.form</code>属性来访问表单数据。<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">@app.route(\"/signin\", methods=[\"POST\"])</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">signin</span><span class=\"params\">()</span>:</span></div><div class=\"line\">    <span class=\"keyword\">print</span> request.args.get(<span class=\"string\">\"username\"</span>)</div><div class=\"line\">    username = request.form[<span class=\"string\">\"username\"</span>]</div><div class=\"line\">    <span class=\"keyword\">return</span> render_template(<span class=\"string\">'hello.html'</span>, name=username)</div></pre></td></tr></table></figure></p>\n<p>如果form表单中不存在所要获取的键，会抛出特殊的KeyError异常。</p>\n<h6 id=\"文件上传\"><a href=\"#文件上传\" class=\"headerlink\" title=\"文件上传\"></a>文件上传</h6><p>首先确保HTML表单中设置 <code>enctype=&quot;multipart/form-data&quot;</code>属性，否则浏览器根本不会发送文件。<br>已上传的文件存储在内存或是文件系统中一个临时的位置。可以通过请求对象的<code>file</code>属性访问它。每个上传的文件都会存储在这个字典里。同时它还有一个<code>save()</code>方法，这个方法允许把文件保额哦村到服务器的文件系统上。如果像知道上传的文件在客户端是什么名字，可以访问<code>filename</code>属性<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">from</span> flask <span class=\"keyword\">import</span> request</div><div class=\"line\"></div><div class=\"line\"><span class=\"meta\">@app.route('/upload', methods=['GET', 'POST'])</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">upload_file</span><span class=\"params\">()</span>:</span></div><div class=\"line\">    <span class=\"keyword\">if</span> request.method == <span class=\"string\">'POST'</span>:</div><div class=\"line\">        f = request.files[<span class=\"string\">'the_file'</span>]</div><div class=\"line\">        f.save(<span class=\"string\">'/var/www/uploads/uploaded_file.txt'</span>)</div></pre></td></tr></table></figure></p>\n<h6 id=\"Cookies\"><a href=\"#Cookies\" class=\"headerlink\" title=\"Cookies\"></a>Cookies</h6><p>可以通过<code>cookies</code>属性来访问Cookies，用响应对象的<code>set_cookie</code>方法来设置Cookies。请求对象的<code>cookies</code>属性是一个内容为客户端提交的所有Cookies的字典.<br>读取cookies：<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">from</span> flask <span class=\"keyword\">import</span> request</div><div class=\"line\"></div><div class=\"line\"><span class=\"meta\">@app.route('/')</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">index</span><span class=\"params\">()</span>:</span></div><div class=\"line\">    username = request.cookies.get(<span class=\"string\">'username'</span>)</div><div class=\"line\">    <span class=\"comment\"># use cookies.get(key) instead of cookies[key] to not get a</span></div><div class=\"line\">    <span class=\"comment\"># KeyError if the cookie is missing.</span></div></pre></td></tr></table></figure></p>\n<p>存储cookie：<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">from</span> flask <span class=\"keyword\">import</span> make_response</div><div class=\"line\"></div><div class=\"line\"><span class=\"meta\">@app.route('/')</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">index</span><span class=\"params\">()</span>:</span></div><div class=\"line\">    resp = make_response(render_template(...))</div><div class=\"line\">    resp.set_cookie(<span class=\"string\">'username'</span>, <span class=\"string\">'the username'</span>)</div><div class=\"line\">    <span class=\"keyword\">return</span> resp</div></pre></td></tr></table></figure></p>\n<p>需要注意的是，Cookies是设置在响应对象上的。由于通常视图函数只是返回字符串，之后Flask将字符串转换为响应对象。</p>\n<h6 id=\"重定向和错误\"><a href=\"#重定向和错误\" class=\"headerlink\" title=\"重定向和错误\"></a>重定向和错误</h6><p>可以使用<code>redirect()</code>函数把用户重定向到其他地方。用<code>abort()</code>函数放弃请求并返回错误代码，如下：<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">from</span> flask <span class=\"keyword\">import</span> abort, redirect, url_for</div><div class=\"line\"></div><div class=\"line\"><span class=\"meta\">@app.route('/')</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">index</span><span class=\"params\">()</span>:</span></div><div class=\"line\">    <span class=\"keyword\">return</span> redirect(url_for(<span class=\"string\">'login'</span>))</div><div class=\"line\"></div><div class=\"line\"><span class=\"meta\">@app.route('/login')</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">login</span><span class=\"params\">()</span>:</span></div><div class=\"line\">    abort(<span class=\"number\">401</span>)</div><div class=\"line\">    this_is_never_executed()</div></pre></td></tr></table></figure></p>\n<p>这是一个完全没有任何意义的代码，因为用户会从主页重定向到一个不能访问的页面。默认情况下，错误代码会显示一个黑白的错误页面，如果要定制错误页面，可以使用<code>errorhandler()</code>装饰器<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">from</span> flask <span class=\"keyword\">import</span> render_template</div><div class=\"line\"></div><div class=\"line\"><span class=\"meta\">@app.errorhandler(404)</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">page_not_found</span><span class=\"params\">(error)</span>:</span></div><div class=\"line\">    <span class=\"keyword\">return</span> render_template(<span class=\"string\">'page_not_found.html'</span>), <span class=\"number\">404</span></div></pre></td></tr></table></figure></p>\n<p>注意`render_template()调用之后的404，这告诉Flask，该页的错误代码是404。默认是200,也就是一切正常</p>\n<h6 id=\"关于响应\"><a href=\"#关于响应\" class=\"headerlink\" title=\"关于响应\"></a>关于响应</h6><p>视图函数的返回值会被自动转换为一个响应对象。如果返回值是一个字符串， 它被转换为该字符串为主体的、状态码为 200 OK<code>的 、 MIME 类型是</code>text/html 的响应对象。Flask 把返回值转换为响应对象的逻辑是这样：</p>\n<ol>\n<li>如果返回的是一个合法的响应对象，它会从视图直接返回。</li>\n<li>如果返回的是一个字符串，响应对象会用字符串数据和默认参数创建。</li>\n<li>如果返回的是一个元组，且元组中的元素可以提供额外的信息。这样的元组必须是 (response, status, headers) 的形式，且至少包含一个元素。 status 值会覆盖状态代码， headers 可以是一个列表或字典，作为额外的消息标头值。</li>\n<li>如果上述条件均不满足， Flask 会假设返回值是一个合法的 WSGI 应用程序，并转换为一个请求对象。<br>如果你想在视图里操纵上述步骤结果的响应对象，可以使用 make_response() 函数。</li>\n</ol>\n<p>譬如你有这样一个视图:<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">@app.errorhandler(404)</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">not_found</span><span class=\"params\">(error)</span>:</span></div><div class=\"line\">    <span class=\"keyword\">return</span> render_template(<span class=\"string\">'error.html'</span>), <span class=\"number\">404</span></div></pre></td></tr></table></figure></p>\n<p>只需要把返回值表达式传递给<code>make_response()</code>，获取结果对象并修改，然后再返回它:<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">@app.errorhandler(404)</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">not_found</span><span class=\"params\">(error)</span>:</span></div><div class=\"line\">    resp = make_response(render_template(<span class=\"string\">'error.html'</span>), <span class=\"number\">404</span>)</div><div class=\"line\">    resp.headers[<span class=\"string\">'X-Something'</span>] = <span class=\"string\">'A value'</span></div><div class=\"line\">    <span class=\"keyword\">return</span> resp</div></pre></td></tr></table></figure></p>\n<h6 id=\"会话\"><a href=\"#会话\" class=\"headerlink\" title=\"会话\"></a>会话</h6><p>除请求对象之后，还有一个<code>session</code>对象，它允许你在不同请求间存储特定用户的信息。他是在Cookies的基础上实现，并且对Cookies进行密钥签名。这意味着用户可以查看你Cookie的内容，但却不能修改它，除非用户知道签名的密钥。<br>要使用会话，需要设置一个密钥<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">from</span> flask <span class=\"keyword\">import</span> Flask, session, redirect, url_for, escape, request</div><div class=\"line\"></div><div class=\"line\">app = Flask(__name__)</div><div class=\"line\"></div><div class=\"line\"><span class=\"meta\">@app.route('/')</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">index</span><span class=\"params\">()</span>:</span></div><div class=\"line\">    <span class=\"keyword\">if</span> <span class=\"string\">'username'</span> <span class=\"keyword\">in</span> session:</div><div class=\"line\">        <span class=\"keyword\">return</span> <span class=\"string\">'Logged in as %s'</span> % escape(session[<span class=\"string\">'username'</span>])</div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"string\">'You are not logged in'</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"meta\">@app.route('/login', methods=['GET', 'POST'])</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">login</span><span class=\"params\">()</span>:</span></div><div class=\"line\">    <span class=\"keyword\">if</span> request.method == <span class=\"string\">'POST'</span>:</div><div class=\"line\">        session[<span class=\"string\">'username'</span>] = request.form[<span class=\"string\">'username'</span>]</div><div class=\"line\">        <span class=\"keyword\">return</span> redirect(url_for(<span class=\"string\">'index'</span>))</div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"string\">'''</span></div><div class=\"line\">        &lt;form action=\"\" method=\"post\"&gt;</div><div class=\"line\">            &lt;p&gt;&lt;input type=text name=username&gt;</div><div class=\"line\">            &lt;p&gt;&lt;input type=submit value=Login&gt;</div><div class=\"line\">        &lt;/form&gt;</div><div class=\"line\">    '''</div><div class=\"line\"></div><div class=\"line\"><span class=\"meta\">@app.route('/logout')</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">logout</span><span class=\"params\">()</span>:</span></div><div class=\"line\">    <span class=\"comment\"># remove the username from the session if it's there</span></div><div class=\"line\">    session.pop(<span class=\"string\">'username'</span>, <span class=\"keyword\">None</span>)</div><div class=\"line\">    <span class=\"keyword\">return</span> redirect(url_for(<span class=\"string\">'index'</span>))</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\"># set the secret key.  keep this really secret:</span></div><div class=\"line\">app.secret_key = <span class=\"string\">'A0Zr98j/3yX R~XHH!jmN]LWX/,?RT'</span></div></pre></td></tr></table></figure></p>\n<p>这里提到的<code>escape()</code>可以在模板引擎外做转义</p>\n<hr>\n<p>以上</p>\n","excerpt":"<p>学习python和flask中看过的资料和自己的实践总结<br><a href=\"http://flask.pocoo.org/\">Flask英文</a><br>以下内容来自<a href=\"http://docs.jinkan.org/docs/flask\">flask中文</a><br>","more":"</p>\n<h4 id=\"环境安装\"><a href=\"#环境安装\" class=\"headerlink\" title=\"环境安装\"></a>环境安装</h4><p>Flask依赖两个外部库：Werkzeug和Jinja2。Werkzeug是一个WSGI工具集、Jinja2负责渲染模板。首先需要python2.6或者更高的版本，python3.X安装方式可能有所不一致。</p>\n<h6 id=\"virtualenv\"><a href=\"#virtualenv\" class=\"headerlink\" title=\"virtualenv\"></a>virtualenv</h6><p>virtualenv 为每个不同项目提供一份 Python 安装。它并没有真正安装多个 Python 副本，但是它确实提供了一种巧妙的方式来让各项目环境保持独立。<br><code>sudo apt-get install python-virtualenv</code><br>virtualenv安装完成后，用IDE比如pycharm创建一个Flask的项目工程，并在其下创建一个venv文件夹<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ mkdir myproject</div><div class=\"line\">$ cd myproject</div><div class=\"line\">$ virtualenv venv</div><div class=\"line\">New python executable in venv/bin/python</div><div class=\"line\">Installing distribute............done.</div></pre></td></tr></table></figure></p>\n<p>然后激活相应的环境<br><code>$ . venv/bin/activate</code><br>然后激活virtualenv中的Flask<br><code>$ pip install Flask</code></p>\n<h4 id=\"项目配置\"><a href=\"#项目配置\" class=\"headerlink\" title=\"项目配置\"></a>项目配置</h4><p>在pycharm中，打开setting<br><img src=\"/image/python/Flask/pycharm_project_setting1.png\" alt=\"项目设置\"><br>在Project Interpreter中选择当前工程文件下的virtualenv<br>打开工程的Configuration<br><img src=\"/image/python/Flask/pycharm_project_setting2.png\" alt=\"项目设置\"><br>在python interpreter中选择当前工程文件下的virtualenv</p>\n<h4 id=\"项目说明\"><a href=\"#项目说明\" class=\"headerlink\" title=\"项目说明\"></a>项目说明</h4><h6 id=\"总述\"><a href=\"#总述\" class=\"headerlink\" title=\"总述\"></a>总述</h6><p>刚刚新建的工程看起来会是这样的<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">from</span> flask <span class=\"keyword\">import</span> Flask</div><div class=\"line\">app = Flask(__name__)</div><div class=\"line\"></div><div class=\"line\"><span class=\"meta\">@app.route('/')</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">hello_world</span><span class=\"params\">()</span>:</span></div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"string\">'Hello World!'</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">if</span> __name__ == <span class=\"string\">'__main__'</span>:</div><div class=\"line\">    app.run()</div></pre></td></tr></table></figure></p>\n<p>运行这段程序(文件名不要是 flask.py，这会和已有的文件冲突)，浏览器访问<code>127.0.0.1:5000</code>，然后就会看到熟悉的<code>hello world</code>.<br>那么，这段代码做了什么？</p>\n<ol>\n<li>首先，我们导入了 Flask 类。这个类的实例将会是我们的 WSGI 应用程序。<br>接下来，我们创建一个该类的实例，第一个参数是应用模块或者包的名称。 如果你使用单一的模块（如本例），你应该使用 <strong>name</strong> ，因为模块的名称将会因其作为单独应用启动还是作为模块导入而有不同（ 也即是 ‘<strong>main</strong>‘ 或实际的导入名）。这是必须的，这样 Flask 才知道到哪去找模板、静态文件等等。详情见 Flask 的文档。</li>\n<li>然后，我们使用 route() 装饰器告诉 Flask 什么样的URL 能触发我们的函数。<br>这个函数的名字也在生成 URL 时被特定的函数采用，这个函数返回我们想要显示在用户浏览器中的信息。</li>\n<li>最后我们用 run() 函数来让应用运行在本地服务器上。 其中 if <strong>name</strong> == ‘<strong>main</strong>‘: 确保服务器只会在该脚本被 Python 解释器直接执行的时候才会运行，而不是作为模块导入的时候。<br>欲关闭服务器，按 Ctrl+C。<br>你会发现它只能从自己的计算机上访问，网络中其他任何地方都不能访问，我们可以修改run()方法使该服务公开可用<br><code>app.run(host=&#39;0.0.0.0&#39;)</code><br>这样会让操作系统监听所有的公网IP<br>同样可以开启debug模式<br><code>app.debug = True;app.run()</code><br>或者<br><code>app.run(debug=True)</code> <h6 id=\"路由\"><a href=\"#路由\" class=\"headerlink\" title=\"路由\"></a>路由</h6>如上面的代码所示，route()装饰其吧一个函数绑定到对应的URL上<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">@app.route('/')</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">index</span><span class=\"params\">()</span>:</span></div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"string\">'Index Page'</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"meta\">@app.route('/hello')</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">hello</span><span class=\"params\">()</span>:</span></div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"string\">'Hello World'</span></div></pre></td></tr></table></figure>\n</li>\n</ol>\n<p>不仅如此，还可以构造含有动态部分的URL，也可以在一个函数上附着多个规则</p>\n<h6 id=\"变量规则\"><a href=\"#变量规则\" class=\"headerlink\" title=\"变量规则\"></a>变量规则</h6><p>要给 URL 添加变量部分，你可以把这些特殊的字段标记为 <variable_name> ， 这个部分将会作为命名参数传递到你的函数。规则可以用 <converter:variable_name> 指定一个可选的转换器。如下所示</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">@app.route('/user/&lt;username&gt;')</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">show_user_profile</span><span class=\"params\">(username)</span>:</span></div><div class=\"line\">    <span class=\"comment\"># show the user profile for that user</span></div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"string\">'User %s'</span> % username</div><div class=\"line\"></div><div class=\"line\"><span class=\"meta\">@app.route('/post/&lt;int:post_id&gt;')</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">show_post</span><span class=\"params\">(post_id)</span>:</span></div><div class=\"line\">    <span class=\"comment\"># show the post with the given id, the id is an integer</span></div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"string\">'Post %d'</span> % post_id</div></pre></td></tr></table></figure>\n<h6 id=\"HTTP方法\"><a href=\"#HTTP方法\" class=\"headerlink\" title=\"HTTP方法\"></a>HTTP方法</h6><p>HTTP有许多不同的访问URL方法。默认情况下，路由只回应GET请求，但是通过route()装饰器传递methods参数可以改变这个行为。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">@app.route('/login', methods=['GET', 'POST'])</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">login</span><span class=\"params\">()</span>:</span></div><div class=\"line\">    <span class=\"keyword\">if</span> request.method == <span class=\"string\">'POST'</span>:</div><div class=\"line\">        do_the_login()</div><div class=\"line\">    <span class=\"keyword\">else</span>:</div><div class=\"line\">        show_the_login_form()</div></pre></td></tr></table></figure>\n<h6 id=\"模板渲染\"><a href=\"#模板渲染\" class=\"headerlink\" title=\"模板渲染\"></a>模板渲染</h6><p>像javaweb一样，不会直接用servlet直接输出html代码，Flask可以使用render_template()方法来渲染模板，Flask配备Jinja2模板引擎<a href=\"http://docs.jinkan.org/docs/jinja2/\">Jinja2中文</a>，<a href=\"http://jinja.pocoo.org/\">Jinja2英文</a><br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">from</span> flask <span class=\"keyword\">import</span> render_template</div><div class=\"line\"></div><div class=\"line\"><span class=\"meta\">@app.route('/hello/')</span></div><div class=\"line\"><span class=\"meta\">@app.route('/hello/&lt;name&gt;')</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">hello</span><span class=\"params\">(name=None)</span>:</span></div><div class=\"line\">    <span class=\"keyword\">return</span> render_template(<span class=\"string\">'hello.html'</span>, name=name)</div></pre></td></tr></table></figure></p>\n<p>Flask 会在 templates 文件夹里寻找模板。所以，如果你的应用是个模块，这个文件夹应该与模块同级；如果它是一个包，那么这个文件夹作为包的子目录:<br>情况 1: 模块:<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">/application.py</div><div class=\"line\">/templates</div><div class=\"line\">    /hello.html</div></pre></td></tr></table></figure></p>\n<p>情况 2: 包:<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">/application</div><div class=\"line\">    /__init__.py</div><div class=\"line\">    /templates</div><div class=\"line\">        /hello.html</div></pre></td></tr></table></figure></p>\n<p>下面是<code>hello.html</code>文件内容<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;!doctype html&gt;</div><div class=\"line\">&lt;title&gt;Hello from Flask&lt;/title&gt;</div><div class=\"line\">&#123;% if name %&#125;</div><div class=\"line\">  &lt;h1&gt;Hello &#123;&#123; name &#125;&#125;!&lt;/h1&gt;</div><div class=\"line\">&#123;% else %&#125;</div><div class=\"line\">  &lt;h1&gt;Hello World!&lt;/h1&gt;</div><div class=\"line\">&#123;% endif %&#125;</div></pre></td></tr></table></figure></p>\n<h6 id=\"访问请求数据\"><a href=\"#访问请求数据\" class=\"headerlink\" title=\"访问请求数据\"></a>访问请求数据</h6><p>可以通过<code>request.form</code>属性来访问表单数据。<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">@app.route(\"/signin\", methods=[\"POST\"])</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">signin</span><span class=\"params\">()</span>:</span></div><div class=\"line\">    <span class=\"keyword\">print</span> request.args.get(<span class=\"string\">\"username\"</span>)</div><div class=\"line\">    username = request.form[<span class=\"string\">\"username\"</span>]</div><div class=\"line\">    <span class=\"keyword\">return</span> render_template(<span class=\"string\">'hello.html'</span>, name=username)</div></pre></td></tr></table></figure></p>\n<p>如果form表单中不存在所要获取的键，会抛出特殊的KeyError异常。</p>\n<h6 id=\"文件上传\"><a href=\"#文件上传\" class=\"headerlink\" title=\"文件上传\"></a>文件上传</h6><p>首先确保HTML表单中设置 <code>enctype=&quot;multipart/form-data&quot;</code>属性，否则浏览器根本不会发送文件。<br>已上传的文件存储在内存或是文件系统中一个临时的位置。可以通过请求对象的<code>file</code>属性访问它。每个上传的文件都会存储在这个字典里。同时它还有一个<code>save()</code>方法，这个方法允许把文件保额哦村到服务器的文件系统上。如果像知道上传的文件在客户端是什么名字，可以访问<code>filename</code>属性<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">from</span> flask <span class=\"keyword\">import</span> request</div><div class=\"line\"></div><div class=\"line\"><span class=\"meta\">@app.route('/upload', methods=['GET', 'POST'])</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">upload_file</span><span class=\"params\">()</span>:</span></div><div class=\"line\">    <span class=\"keyword\">if</span> request.method == <span class=\"string\">'POST'</span>:</div><div class=\"line\">        f = request.files[<span class=\"string\">'the_file'</span>]</div><div class=\"line\">        f.save(<span class=\"string\">'/var/www/uploads/uploaded_file.txt'</span>)</div></pre></td></tr></table></figure></p>\n<h6 id=\"Cookies\"><a href=\"#Cookies\" class=\"headerlink\" title=\"Cookies\"></a>Cookies</h6><p>可以通过<code>cookies</code>属性来访问Cookies，用响应对象的<code>set_cookie</code>方法来设置Cookies。请求对象的<code>cookies</code>属性是一个内容为客户端提交的所有Cookies的字典.<br>读取cookies：<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">from</span> flask <span class=\"keyword\">import</span> request</div><div class=\"line\"></div><div class=\"line\"><span class=\"meta\">@app.route('/')</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">index</span><span class=\"params\">()</span>:</span></div><div class=\"line\">    username = request.cookies.get(<span class=\"string\">'username'</span>)</div><div class=\"line\">    <span class=\"comment\"># use cookies.get(key) instead of cookies[key] to not get a</span></div><div class=\"line\">    <span class=\"comment\"># KeyError if the cookie is missing.</span></div></pre></td></tr></table></figure></p>\n<p>存储cookie：<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">from</span> flask <span class=\"keyword\">import</span> make_response</div><div class=\"line\"></div><div class=\"line\"><span class=\"meta\">@app.route('/')</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">index</span><span class=\"params\">()</span>:</span></div><div class=\"line\">    resp = make_response(render_template(...))</div><div class=\"line\">    resp.set_cookie(<span class=\"string\">'username'</span>, <span class=\"string\">'the username'</span>)</div><div class=\"line\">    <span class=\"keyword\">return</span> resp</div></pre></td></tr></table></figure></p>\n<p>需要注意的是，Cookies是设置在响应对象上的。由于通常视图函数只是返回字符串，之后Flask将字符串转换为响应对象。</p>\n<h6 id=\"重定向和错误\"><a href=\"#重定向和错误\" class=\"headerlink\" title=\"重定向和错误\"></a>重定向和错误</h6><p>可以使用<code>redirect()</code>函数把用户重定向到其他地方。用<code>abort()</code>函数放弃请求并返回错误代码，如下：<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">from</span> flask <span class=\"keyword\">import</span> abort, redirect, url_for</div><div class=\"line\"></div><div class=\"line\"><span class=\"meta\">@app.route('/')</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">index</span><span class=\"params\">()</span>:</span></div><div class=\"line\">    <span class=\"keyword\">return</span> redirect(url_for(<span class=\"string\">'login'</span>))</div><div class=\"line\"></div><div class=\"line\"><span class=\"meta\">@app.route('/login')</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">login</span><span class=\"params\">()</span>:</span></div><div class=\"line\">    abort(<span class=\"number\">401</span>)</div><div class=\"line\">    this_is_never_executed()</div></pre></td></tr></table></figure></p>\n<p>这是一个完全没有任何意义的代码，因为用户会从主页重定向到一个不能访问的页面。默认情况下，错误代码会显示一个黑白的错误页面，如果要定制错误页面，可以使用<code>errorhandler()</code>装饰器<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">from</span> flask <span class=\"keyword\">import</span> render_template</div><div class=\"line\"></div><div class=\"line\"><span class=\"meta\">@app.errorhandler(404)</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">page_not_found</span><span class=\"params\">(error)</span>:</span></div><div class=\"line\">    <span class=\"keyword\">return</span> render_template(<span class=\"string\">'page_not_found.html'</span>), <span class=\"number\">404</span></div></pre></td></tr></table></figure></p>\n<p>注意`render_template()调用之后的404，这告诉Flask，该页的错误代码是404。默认是200,也就是一切正常</p>\n<h6 id=\"关于响应\"><a href=\"#关于响应\" class=\"headerlink\" title=\"关于响应\"></a>关于响应</h6><p>视图函数的返回值会被自动转换为一个响应对象。如果返回值是一个字符串， 它被转换为该字符串为主体的、状态码为 200 OK<code>的 、 MIME 类型是</code>text/html 的响应对象。Flask 把返回值转换为响应对象的逻辑是这样：</p>\n<ol>\n<li>如果返回的是一个合法的响应对象，它会从视图直接返回。</li>\n<li>如果返回的是一个字符串，响应对象会用字符串数据和默认参数创建。</li>\n<li>如果返回的是一个元组，且元组中的元素可以提供额外的信息。这样的元组必须是 (response, status, headers) 的形式，且至少包含一个元素。 status 值会覆盖状态代码， headers 可以是一个列表或字典，作为额外的消息标头值。</li>\n<li>如果上述条件均不满足， Flask 会假设返回值是一个合法的 WSGI 应用程序，并转换为一个请求对象。<br>如果你想在视图里操纵上述步骤结果的响应对象，可以使用 make_response() 函数。</li>\n</ol>\n<p>譬如你有这样一个视图:<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">@app.errorhandler(404)</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">not_found</span><span class=\"params\">(error)</span>:</span></div><div class=\"line\">    <span class=\"keyword\">return</span> render_template(<span class=\"string\">'error.html'</span>), <span class=\"number\">404</span></div></pre></td></tr></table></figure></p>\n<p>只需要把返回值表达式传递给<code>make_response()</code>，获取结果对象并修改，然后再返回它:<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">@app.errorhandler(404)</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">not_found</span><span class=\"params\">(error)</span>:</span></div><div class=\"line\">    resp = make_response(render_template(<span class=\"string\">'error.html'</span>), <span class=\"number\">404</span>)</div><div class=\"line\">    resp.headers[<span class=\"string\">'X-Something'</span>] = <span class=\"string\">'A value'</span></div><div class=\"line\">    <span class=\"keyword\">return</span> resp</div></pre></td></tr></table></figure></p>\n<h6 id=\"会话\"><a href=\"#会话\" class=\"headerlink\" title=\"会话\"></a>会话</h6><p>除请求对象之后，还有一个<code>session</code>对象，它允许你在不同请求间存储特定用户的信息。他是在Cookies的基础上实现，并且对Cookies进行密钥签名。这意味着用户可以查看你Cookie的内容，但却不能修改它，除非用户知道签名的密钥。<br>要使用会话，需要设置一个密钥<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">from</span> flask <span class=\"keyword\">import</span> Flask, session, redirect, url_for, escape, request</div><div class=\"line\"></div><div class=\"line\">app = Flask(__name__)</div><div class=\"line\"></div><div class=\"line\"><span class=\"meta\">@app.route('/')</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">index</span><span class=\"params\">()</span>:</span></div><div class=\"line\">    <span class=\"keyword\">if</span> <span class=\"string\">'username'</span> <span class=\"keyword\">in</span> session:</div><div class=\"line\">        <span class=\"keyword\">return</span> <span class=\"string\">'Logged in as %s'</span> % escape(session[<span class=\"string\">'username'</span>])</div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"string\">'You are not logged in'</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"meta\">@app.route('/login', methods=['GET', 'POST'])</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">login</span><span class=\"params\">()</span>:</span></div><div class=\"line\">    <span class=\"keyword\">if</span> request.method == <span class=\"string\">'POST'</span>:</div><div class=\"line\">        session[<span class=\"string\">'username'</span>] = request.form[<span class=\"string\">'username'</span>]</div><div class=\"line\">        <span class=\"keyword\">return</span> redirect(url_for(<span class=\"string\">'index'</span>))</div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"string\">'''</div><div class=\"line\">        &lt;form action=\"\" method=\"post\"&gt;</div><div class=\"line\">            &lt;p&gt;&lt;input type=text name=username&gt;</div><div class=\"line\">            &lt;p&gt;&lt;input type=submit value=Login&gt;</div><div class=\"line\">        &lt;/form&gt;</div><div class=\"line\">    '''</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"meta\">@app.route('/logout')</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">logout</span><span class=\"params\">()</span>:</span></div><div class=\"line\">    <span class=\"comment\"># remove the username from the session if it's there</span></div><div class=\"line\">    session.pop(<span class=\"string\">'username'</span>, <span class=\"keyword\">None</span>)</div><div class=\"line\">    <span class=\"keyword\">return</span> redirect(url_for(<span class=\"string\">'index'</span>))</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\"># set the secret key.  keep this really secret:</span></div><div class=\"line\">app.secret_key = <span class=\"string\">'A0Zr98j/3yX R~XHH!jmN]LWX/,?RT'</span></div></pre></td></tr></table></figure></p>\n<p>这里提到的<code>escape()</code>可以在模板引擎外做转义</p>\n<hr>\n<p>以上</p>"},{"title":"TCP协议的简单理解","date":"2017-07-03T08:28:36.000Z","_content":"尽管TCP和UDP都使用相同的网络层(IP)，TCP却向应用层提供与UDP完全不同的服务。TCP提供一种面向连接的、可靠的字节流服务。这里的面向连接是指：两个使用TCP的应用（通常是一个客户一个服务器）在彼此交换数据之前必须先建立一个TCP连接。\n<!-- more -->\n#### TCP的主要特点\n* TCP是面向连接的运输层协议\n* 每一条TCP连接只能两个短点，每一条TCP都是点对点的\n* 提供可靠交付服务\n* 提供全双工服务\n* 面向字节流\n#### TCP通过下列方式来提供可靠性\n* 应用数据被分割成TCP认为最合适发送的数据块。这个UDP完全不同，应用程序产生的数据报长度将保持不变。由TCP传递给IP的信息单位称为报文段或段(segment)\n* 当TCP发出一个段之后，它将启动一个定时器，等待目的端确认收到这个报文段，如果目的端不能及时确认接收，将重发这个报文段\n* 当TCP收到发至TCP连接的另一端的数据，它将发送一个确认。\n* TCP保持它首部和数据的检验和。这是一个端到端的检验和，目的是检测数据在传输过程中的任何变化。如果检验和有差错，TCP将丢弃这个报文段和不确认接收此报文段，并希望另一端重传此报文段。\n* 既然TCP报文段作为IP数据报来传输，而IP数据报的到达可能会失序，因此TCP报文段的到达也可能会失序。如果必要，TCP将对收到的数据进行重新排序，将收到的数据以正确的顺序交给应用层。\n* 既然IP数据报会发生重复，TCP的接收端必须丢弃重复的数据。\n* TCP还能提供流量控制。TCP连接的每一方都有固定大小的缓冲空间，TCP的接收端只允许另一端发送接收端缓冲区所能接纳的数据。这将防止较快主机致使较慢主机缓冲区溢出。\n#### 停止等待协议\n停止等待协议用下面的图来说明：图片来源于《计算机网络第六版》谢希仁编著\n在全双工通信的情况下，每一端既是接收方也是发送方，为方便，简化为A向B发送数据.\n1. 在无差错的情况下，A向B发送数据分组M1，发送完了就等待B的确认。B确认接收M1之后向A发送确认收到M1的数据。A收到B发送的\"确认收到M1\"的消息后，再向B发送下一组数据分组。\n2. 在有差错的情况下，B收到的数据分组可能是内容不对，B就把数据直接丢弃；也可能是数据分组在 传输过程中丢失了，B什么也没有接收到。这两种情况下，B什么也不操作（不通知A数据有错或者没收到数据。等到过一段时间，A没有收到B的确认消息，就认为刚刚发送的数据丢失了，然后重新传输刚才发送的分组。这要求A在每次发送一个数据分组时，都要设计一个超时计数器。\n    但是要注意\n    1) A在发送完一个分组后，必须暂时保留已发送的分组的副本（超时重传）。只有等到分组确认后才能清除暂时保留的副本\n    2) 分组和确认分组必须都进行编号\n    3) 超时及时器设置的重传时间应当比数据在分组传输的平均往返时间更长一些。\n![无差错左/有差错右](/image/tcp/tcp1.png)\n3. 确认丢失和确认迟到\n下图左边的情况是B向A发送的确认收到M1的消息丢失了。A在设定的超时重传时间内没有收到确认，但并无法知道是自己发送的分组出错、丢失，或者是B发送的确认丢失了，因此A在超时计时器到期后就要重传M1。假定B又收到了重传的分组M1.这时应采取两个行动：\n    1) 丢弃这个重复的分组M1，不向上层交付。\n    2) 向A发送确认，不能认为已经发送过确认就不再发送，因为A之所以重传M1就表示A没有收到M1的确认。\n下图右边的情况是传输过程中没有出现差错，但是B对分组M1的确认迟到了，A会收到重复确认，然后丢弃掉，但是这时A已经重发数据分组M1了，B收到重复的分组M1胡同样丢弃重复的分组M1，并重传确认分组。\n![确认丢失左/确认迟到右](/image/tcp/tcp2.png)\n#### 连续ARQ协议 \n　　滑动窗口协议比较复杂。图片来源于《计算机网络第六版》谢希仁编著\n下图a表示发送发维持的发送窗口，它的意义是：位于发送窗口内的5个分组都可以连续发送出去，而不需要等待对方确认。\n连续ARQ协议规定，发送方每收到一个确认，就把窗口向前滑动一个分组的位置，b表示发送发收到了对第一个分组的确认，于是把发送的分组向前移动一个分组的位置。\n接收方一般都是采用**累计确认**的方式。这就是说，接收方不必对收到的分组逐个发送确认，而是在收到几个分组后，对按序到达的的最后一个分组发送确认，这就表示：到这个分组为止的所有分组都已经正确收到了。\n![发送窗口](/image/tcp/tcp3.png)\n#### 滑动窗口\n　　TCP的滑动窗口是以字节为单位的。现在假定A收到了B发来的确认报文段，其中窗口是20，而确认号是31(这表明B期望收到的下一个序号是31,到序号30为止的数据已经收到了)。根据这两个数据，A就构造出自己的发送窗口，如下图所示\n![滑动窗口](/image/tcp/tcp4.png)\n　　发送窗口表示：在没有收到B的确认情况下，A可以把窗口内的数据都发送出去。凡是已经发送过的数据，在未收到确认之前都必须暂时保留，以便在超时重传时使用。\n发送窗口里面的序号表示允许发送的序号。显然，窗口越大，发送方就可以在收到对方确认之前连续发送更多的数据，因而可能获得更高的传输效率。但是接收方必须来得及处理这些收到的数据。\n发送窗口后延的后面部分表示已发送且已收到了确认。这些数据显然不需要再保留。而发送窗口前沿的前面部分表示不允许发送的，因为接收方都没有为这部分数据保留临时存放的缓存空间。\n　　发送窗口的位置由窗口前沿和后延的位置共同确定。发送窗口后沿的变换情况有两种可能，即不懂(没有收到新的确认)和前移(收到了新的确认)。发送窗口后沿不可能向后移动，因为不能撤销掉已收到的确认。发送窗口前沿通常是不断向前移动，但也有可能不动。这对应于两种情况：一时没有收到信的确认，对方通知的窗口大小也不变；二是收到了新的确认但对方通知的窗口缩小了，使得发送窗口前沿正好不动。发送窗口前沿也可能向后收缩，但是TCP的标准强烈不赞成这么做。\n#### TCP连接的建立\n假定主机A运行的是TCP客户程序，而B运行TCP服务器程序。最初两端的TCP进程都处于CLOSED(关闭)状态。如下图所示。现在A主动打开连接，而B是被动打开连接。\n![三次握手](/image/tcp/tcp5.png)\n　　B的TCP服务器先创建传输控制块TCB，准备接受客户程序的连接请求，然后服务器进场就处于LISTEN(监听)状态，等待客户端的连接请求。如果有，即作出响应。\n　　A的TCP客户进程也是首先创建传输控制模块TCB，然后向B发出连接请求报文段，这时首部中的同部位SYN=1，同时选择一个初始序号 seq=x 。TCP规定，SYN报文段(即SYN=1的报文段)不能携带数据，但要消耗掉一个序号。这时，TCP客户进程进入SYN-SENT(同步已发送)状态。\n　　B收到连接请求报文段后，如果同意建立连接，则向A发送确认。在确认报文段中应把SYN位和ACK位都置1，确认号是ack=x+1 ,同时也为自己选择一个初始序号seq=y。这个报文段也不能携带数据，但同样要消耗掉一个序号。这时TCP服务器进程进入SYN-RCVD(同步收到)状态。\n　　TCP客户进程收到B的确认后，还要向B给出确认。确认报文段的ACK置1，确认号ack=y+1，而自己的序号seq=x+1。TCP的标准规定，ACK报文段可以携带数据。但如果不携带数据则不消耗序号，在这种情况下，下一个数据报文段的序号仍然是seq=x+1。这时TCP连接已经建立，A进入ESTABLISHED(已建立连接)状态。\n　　当B收到A的确认后，也进入ESTABLISHED状态\n　　A最后发送一次确认主要是为了防止已失效的连接请求报文段突然又传送到了B，因而产生错误。\n#### TCP连接的释放\n数据传输结束后，通信的双方都可释放连接。\n![四次挥手](/image/tcp/tcp6.png)\n　　现在A和B都处于ESTABLISHED状态，A的应用进程先向其TCP发出连接释放报文段，并停止再发送数据，主动关闭TCP连接，A把连接释放报文段首部的宗旨控制位FIN置1，其序号seq=u，它等于前面已传送过的数据的最后一个直接的序号加1.这时A进入FIN-WAIT-1(终止等待1)状态，等待B的确认。TCP规定，FIN报文段即使不携带数据，它也消耗掉一个序号。\n　　B收到连接释放报文段后即发出确认，确认号是ack=u+1，而这个报文段自己的序号是v，等于B前面已传送过的数据的最后一个字节的序号加1。然后B就进入CLOSE-WAIT(关闭等待)状态。TCP服务器进程这时应通知高层应用进程，因而从A到B这个方向的连接就释放了，这时的TCP连接处于半关闭(half-close)状态，即A已经没有数据要发送了，但B若发送数据，A仍要接收，就是说，从B到A这个方向的连接并未关闭，这个状态可能会持续一些时间。\n　　A收到来自B的确认后，就进图FIN-WAIT-2(终止等待2)状态，等待B发出的连接释放报文段。\n　　若B已经没有要向A发送的数据，其应用进程就通知TCP释放连接。这时B发出的连接释放报文段必须使用FIN=1.现在假定B的序号为w(在半关闭状态B可能又发送了一些数据)，B还必须重复上次已发送过的确认号ack=u+1。这时B就进入LAST-ACK(最后确认)状态，等待A的确认。\n　　A在收到B的连接释放报文段后，必须对此发出确认。在确认报文段中把ACK置1，确认号ack=w+1，而自己的序号是seq=u+1，TCP规定，前面发送的FIN报文段要消耗一个序号。然后进入到TIME-WAIT(时间等待)状态。现在TCP连接还没有释放掉。必须经过时间等待计时器(TIME-WAIT timer)设置的时间2MSL后，A才进入到CLOSED状态，时间MSL叫做最长报文段寿命。\n　　B只要收到了A发出的确认，就进入CLOSED状态。同样，B在撤销相应的出书控制块TCB后，就结束了这次的TCP连接。B结束TCP连接的时间要比A早一些。\n#### TCP有限状态机\n![有限状态机](/image/tcp/tcp7.png)\n粗实线箭头表示对客户进程的正常变迁、粗虚线箭头表示对服务器进程的正常变迁、另一种细线箭头表示异常变迁。\n----\n\n以上文字和图片均来自于《计算机网络第6版》谢希仁著\n\n----\n以上\n\n","source":"_posts/TCP协议的简单理解.md","raw":"---\ntitle: TCP协议的简单理解\ndate: 2017-07-03 16:28:36\ntags: [tcp协议,tcp/ip协议族]\n---\n尽管TCP和UDP都使用相同的网络层(IP)，TCP却向应用层提供与UDP完全不同的服务。TCP提供一种面向连接的、可靠的字节流服务。这里的面向连接是指：两个使用TCP的应用（通常是一个客户一个服务器）在彼此交换数据之前必须先建立一个TCP连接。\n<!-- more -->\n#### TCP的主要特点\n* TCP是面向连接的运输层协议\n* 每一条TCP连接只能两个短点，每一条TCP都是点对点的\n* 提供可靠交付服务\n* 提供全双工服务\n* 面向字节流\n#### TCP通过下列方式来提供可靠性\n* 应用数据被分割成TCP认为最合适发送的数据块。这个UDP完全不同，应用程序产生的数据报长度将保持不变。由TCP传递给IP的信息单位称为报文段或段(segment)\n* 当TCP发出一个段之后，它将启动一个定时器，等待目的端确认收到这个报文段，如果目的端不能及时确认接收，将重发这个报文段\n* 当TCP收到发至TCP连接的另一端的数据，它将发送一个确认。\n* TCP保持它首部和数据的检验和。这是一个端到端的检验和，目的是检测数据在传输过程中的任何变化。如果检验和有差错，TCP将丢弃这个报文段和不确认接收此报文段，并希望另一端重传此报文段。\n* 既然TCP报文段作为IP数据报来传输，而IP数据报的到达可能会失序，因此TCP报文段的到达也可能会失序。如果必要，TCP将对收到的数据进行重新排序，将收到的数据以正确的顺序交给应用层。\n* 既然IP数据报会发生重复，TCP的接收端必须丢弃重复的数据。\n* TCP还能提供流量控制。TCP连接的每一方都有固定大小的缓冲空间，TCP的接收端只允许另一端发送接收端缓冲区所能接纳的数据。这将防止较快主机致使较慢主机缓冲区溢出。\n#### 停止等待协议\n停止等待协议用下面的图来说明：图片来源于《计算机网络第六版》谢希仁编著\n在全双工通信的情况下，每一端既是接收方也是发送方，为方便，简化为A向B发送数据.\n1. 在无差错的情况下，A向B发送数据分组M1，发送完了就等待B的确认。B确认接收M1之后向A发送确认收到M1的数据。A收到B发送的\"确认收到M1\"的消息后，再向B发送下一组数据分组。\n2. 在有差错的情况下，B收到的数据分组可能是内容不对，B就把数据直接丢弃；也可能是数据分组在 传输过程中丢失了，B什么也没有接收到。这两种情况下，B什么也不操作（不通知A数据有错或者没收到数据。等到过一段时间，A没有收到B的确认消息，就认为刚刚发送的数据丢失了，然后重新传输刚才发送的分组。这要求A在每次发送一个数据分组时，都要设计一个超时计数器。\n    但是要注意\n    1) A在发送完一个分组后，必须暂时保留已发送的分组的副本（超时重传）。只有等到分组确认后才能清除暂时保留的副本\n    2) 分组和确认分组必须都进行编号\n    3) 超时及时器设置的重传时间应当比数据在分组传输的平均往返时间更长一些。\n![无差错左/有差错右](/image/tcp/tcp1.png)\n3. 确认丢失和确认迟到\n下图左边的情况是B向A发送的确认收到M1的消息丢失了。A在设定的超时重传时间内没有收到确认，但并无法知道是自己发送的分组出错、丢失，或者是B发送的确认丢失了，因此A在超时计时器到期后就要重传M1。假定B又收到了重传的分组M1.这时应采取两个行动：\n    1) 丢弃这个重复的分组M1，不向上层交付。\n    2) 向A发送确认，不能认为已经发送过确认就不再发送，因为A之所以重传M1就表示A没有收到M1的确认。\n下图右边的情况是传输过程中没有出现差错，但是B对分组M1的确认迟到了，A会收到重复确认，然后丢弃掉，但是这时A已经重发数据分组M1了，B收到重复的分组M1胡同样丢弃重复的分组M1，并重传确认分组。\n![确认丢失左/确认迟到右](/image/tcp/tcp2.png)\n#### 连续ARQ协议 \n　　滑动窗口协议比较复杂。图片来源于《计算机网络第六版》谢希仁编著\n下图a表示发送发维持的发送窗口，它的意义是：位于发送窗口内的5个分组都可以连续发送出去，而不需要等待对方确认。\n连续ARQ协议规定，发送方每收到一个确认，就把窗口向前滑动一个分组的位置，b表示发送发收到了对第一个分组的确认，于是把发送的分组向前移动一个分组的位置。\n接收方一般都是采用**累计确认**的方式。这就是说，接收方不必对收到的分组逐个发送确认，而是在收到几个分组后，对按序到达的的最后一个分组发送确认，这就表示：到这个分组为止的所有分组都已经正确收到了。\n![发送窗口](/image/tcp/tcp3.png)\n#### 滑动窗口\n　　TCP的滑动窗口是以字节为单位的。现在假定A收到了B发来的确认报文段，其中窗口是20，而确认号是31(这表明B期望收到的下一个序号是31,到序号30为止的数据已经收到了)。根据这两个数据，A就构造出自己的发送窗口，如下图所示\n![滑动窗口](/image/tcp/tcp4.png)\n　　发送窗口表示：在没有收到B的确认情况下，A可以把窗口内的数据都发送出去。凡是已经发送过的数据，在未收到确认之前都必须暂时保留，以便在超时重传时使用。\n发送窗口里面的序号表示允许发送的序号。显然，窗口越大，发送方就可以在收到对方确认之前连续发送更多的数据，因而可能获得更高的传输效率。但是接收方必须来得及处理这些收到的数据。\n发送窗口后延的后面部分表示已发送且已收到了确认。这些数据显然不需要再保留。而发送窗口前沿的前面部分表示不允许发送的，因为接收方都没有为这部分数据保留临时存放的缓存空间。\n　　发送窗口的位置由窗口前沿和后延的位置共同确定。发送窗口后沿的变换情况有两种可能，即不懂(没有收到新的确认)和前移(收到了新的确认)。发送窗口后沿不可能向后移动，因为不能撤销掉已收到的确认。发送窗口前沿通常是不断向前移动，但也有可能不动。这对应于两种情况：一时没有收到信的确认，对方通知的窗口大小也不变；二是收到了新的确认但对方通知的窗口缩小了，使得发送窗口前沿正好不动。发送窗口前沿也可能向后收缩，但是TCP的标准强烈不赞成这么做。\n#### TCP连接的建立\n假定主机A运行的是TCP客户程序，而B运行TCP服务器程序。最初两端的TCP进程都处于CLOSED(关闭)状态。如下图所示。现在A主动打开连接，而B是被动打开连接。\n![三次握手](/image/tcp/tcp5.png)\n　　B的TCP服务器先创建传输控制块TCB，准备接受客户程序的连接请求，然后服务器进场就处于LISTEN(监听)状态，等待客户端的连接请求。如果有，即作出响应。\n　　A的TCP客户进程也是首先创建传输控制模块TCB，然后向B发出连接请求报文段，这时首部中的同部位SYN=1，同时选择一个初始序号 seq=x 。TCP规定，SYN报文段(即SYN=1的报文段)不能携带数据，但要消耗掉一个序号。这时，TCP客户进程进入SYN-SENT(同步已发送)状态。\n　　B收到连接请求报文段后，如果同意建立连接，则向A发送确认。在确认报文段中应把SYN位和ACK位都置1，确认号是ack=x+1 ,同时也为自己选择一个初始序号seq=y。这个报文段也不能携带数据，但同样要消耗掉一个序号。这时TCP服务器进程进入SYN-RCVD(同步收到)状态。\n　　TCP客户进程收到B的确认后，还要向B给出确认。确认报文段的ACK置1，确认号ack=y+1，而自己的序号seq=x+1。TCP的标准规定，ACK报文段可以携带数据。但如果不携带数据则不消耗序号，在这种情况下，下一个数据报文段的序号仍然是seq=x+1。这时TCP连接已经建立，A进入ESTABLISHED(已建立连接)状态。\n　　当B收到A的确认后，也进入ESTABLISHED状态\n　　A最后发送一次确认主要是为了防止已失效的连接请求报文段突然又传送到了B，因而产生错误。\n#### TCP连接的释放\n数据传输结束后，通信的双方都可释放连接。\n![四次挥手](/image/tcp/tcp6.png)\n　　现在A和B都处于ESTABLISHED状态，A的应用进程先向其TCP发出连接释放报文段，并停止再发送数据，主动关闭TCP连接，A把连接释放报文段首部的宗旨控制位FIN置1，其序号seq=u，它等于前面已传送过的数据的最后一个直接的序号加1.这时A进入FIN-WAIT-1(终止等待1)状态，等待B的确认。TCP规定，FIN报文段即使不携带数据，它也消耗掉一个序号。\n　　B收到连接释放报文段后即发出确认，确认号是ack=u+1，而这个报文段自己的序号是v，等于B前面已传送过的数据的最后一个字节的序号加1。然后B就进入CLOSE-WAIT(关闭等待)状态。TCP服务器进程这时应通知高层应用进程，因而从A到B这个方向的连接就释放了，这时的TCP连接处于半关闭(half-close)状态，即A已经没有数据要发送了，但B若发送数据，A仍要接收，就是说，从B到A这个方向的连接并未关闭，这个状态可能会持续一些时间。\n　　A收到来自B的确认后，就进图FIN-WAIT-2(终止等待2)状态，等待B发出的连接释放报文段。\n　　若B已经没有要向A发送的数据，其应用进程就通知TCP释放连接。这时B发出的连接释放报文段必须使用FIN=1.现在假定B的序号为w(在半关闭状态B可能又发送了一些数据)，B还必须重复上次已发送过的确认号ack=u+1。这时B就进入LAST-ACK(最后确认)状态，等待A的确认。\n　　A在收到B的连接释放报文段后，必须对此发出确认。在确认报文段中把ACK置1，确认号ack=w+1，而自己的序号是seq=u+1，TCP规定，前面发送的FIN报文段要消耗一个序号。然后进入到TIME-WAIT(时间等待)状态。现在TCP连接还没有释放掉。必须经过时间等待计时器(TIME-WAIT timer)设置的时间2MSL后，A才进入到CLOSED状态，时间MSL叫做最长报文段寿命。\n　　B只要收到了A发出的确认，就进入CLOSED状态。同样，B在撤销相应的出书控制块TCB后，就结束了这次的TCP连接。B结束TCP连接的时间要比A早一些。\n#### TCP有限状态机\n![有限状态机](/image/tcp/tcp7.png)\n粗实线箭头表示对客户进程的正常变迁、粗虚线箭头表示对服务器进程的正常变迁、另一种细线箭头表示异常变迁。\n----\n\n以上文字和图片均来自于《计算机网络第6版》谢希仁著\n\n----\n以上\n\n","slug":"TCP协议的简单理解","published":1,"updated":"2017-12-30T13:13:07.225Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjbvyt3uq000jscdgp2a81ls9","content":"<p>尽管TCP和UDP都使用相同的网络层(IP)，TCP却向应用层提供与UDP完全不同的服务。TCP提供一种面向连接的、可靠的字节流服务。这里的面向连接是指：两个使用TCP的应用（通常是一个客户一个服务器）在彼此交换数据之前必须先建立一个TCP连接。<br><a id=\"more\"></a></p>\n<h4 id=\"TCP的主要特点\"><a href=\"#TCP的主要特点\" class=\"headerlink\" title=\"TCP的主要特点\"></a>TCP的主要特点</h4><ul>\n<li>TCP是面向连接的运输层协议</li>\n<li>每一条TCP连接只能两个短点，每一条TCP都是点对点的</li>\n<li>提供可靠交付服务</li>\n<li>提供全双工服务</li>\n<li>面向字节流<h4 id=\"TCP通过下列方式来提供可靠性\"><a href=\"#TCP通过下列方式来提供可靠性\" class=\"headerlink\" title=\"TCP通过下列方式来提供可靠性\"></a>TCP通过下列方式来提供可靠性</h4></li>\n<li>应用数据被分割成TCP认为最合适发送的数据块。这个UDP完全不同，应用程序产生的数据报长度将保持不变。由TCP传递给IP的信息单位称为报文段或段(segment)</li>\n<li>当TCP发出一个段之后，它将启动一个定时器，等待目的端确认收到这个报文段，如果目的端不能及时确认接收，将重发这个报文段</li>\n<li>当TCP收到发至TCP连接的另一端的数据，它将发送一个确认。</li>\n<li>TCP保持它首部和数据的检验和。这是一个端到端的检验和，目的是检测数据在传输过程中的任何变化。如果检验和有差错，TCP将丢弃这个报文段和不确认接收此报文段，并希望另一端重传此报文段。</li>\n<li>既然TCP报文段作为IP数据报来传输，而IP数据报的到达可能会失序，因此TCP报文段的到达也可能会失序。如果必要，TCP将对收到的数据进行重新排序，将收到的数据以正确的顺序交给应用层。</li>\n<li>既然IP数据报会发生重复，TCP的接收端必须丢弃重复的数据。</li>\n<li>TCP还能提供流量控制。TCP连接的每一方都有固定大小的缓冲空间，TCP的接收端只允许另一端发送接收端缓冲区所能接纳的数据。这将防止较快主机致使较慢主机缓冲区溢出。<h4 id=\"停止等待协议\"><a href=\"#停止等待协议\" class=\"headerlink\" title=\"停止等待协议\"></a>停止等待协议</h4>停止等待协议用下面的图来说明：图片来源于《计算机网络第六版》谢希仁编著<br>在全双工通信的情况下，每一端既是接收方也是发送方，为方便，简化为A向B发送数据.</li>\n</ul>\n<ol>\n<li>在无差错的情况下，A向B发送数据分组M1，发送完了就等待B的确认。B确认接收M1之后向A发送确认收到M1的数据。A收到B发送的”确认收到M1”的消息后，再向B发送下一组数据分组。</li>\n<li>在有差错的情况下，B收到的数据分组可能是内容不对，B就把数据直接丢弃；也可能是数据分组在 传输过程中丢失了，B什么也没有接收到。这两种情况下，B什么也不操作（不通知A数据有错或者没收到数据。等到过一段时间，A没有收到B的确认消息，就认为刚刚发送的数据丢失了，然后重新传输刚才发送的分组。这要求A在每次发送一个数据分组时，都要设计一个超时计数器。<br> 但是要注意<br> 1) A在发送完一个分组后，必须暂时保留已发送的分组的副本（超时重传）。只有等到分组确认后才能清除暂时保留的副本<br> 2) 分组和确认分组必须都进行编号<br> 3) 超时及时器设置的重传时间应当比数据在分组传输的平均往返时间更长一些。<br><img src=\"/image/tcp/tcp1.png\" alt=\"无差错左/有差错右\"></li>\n<li>确认丢失和确认迟到<br>下图左边的情况是B向A发送的确认收到M1的消息丢失了。A在设定的超时重传时间内没有收到确认，但并无法知道是自己发送的分组出错、丢失，或者是B发送的确认丢失了，因此A在超时计时器到期后就要重传M1。假定B又收到了重传的分组M1.这时应采取两个行动：<br> 1) 丢弃这个重复的分组M1，不向上层交付。<br> 2) 向A发送确认，不能认为已经发送过确认就不再发送，因为A之所以重传M1就表示A没有收到M1的确认。<br>下图右边的情况是传输过程中没有出现差错，但是B对分组M1的确认迟到了，A会收到重复确认，然后丢弃掉，但是这时A已经重发数据分组M1了，B收到重复的分组M1胡同样丢弃重复的分组M1，并重传确认分组。<br><img src=\"/image/tcp/tcp2.png\" alt=\"确认丢失左/确认迟到右\"><h4 id=\"连续ARQ协议\"><a href=\"#连续ARQ协议\" class=\"headerlink\" title=\"连续ARQ协议\"></a>连续ARQ协议</h4>　　滑动窗口协议比较复杂。图片来源于《计算机网络第六版》谢希仁编著<br>下图a表示发送发维持的发送窗口，它的意义是：位于发送窗口内的5个分组都可以连续发送出去，而不需要等待对方确认。<br>连续ARQ协议规定，发送方每收到一个确认，就把窗口向前滑动一个分组的位置，b表示发送发收到了对第一个分组的确认，于是把发送的分组向前移动一个分组的位置。<br>接收方一般都是采用<strong>累计确认</strong>的方式。这就是说，接收方不必对收到的分组逐个发送确认，而是在收到几个分组后，对按序到达的的最后一个分组发送确认，这就表示：到这个分组为止的所有分组都已经正确收到了。<br><img src=\"/image/tcp/tcp3.png\" alt=\"发送窗口\"><h4 id=\"滑动窗口\"><a href=\"#滑动窗口\" class=\"headerlink\" title=\"滑动窗口\"></a>滑动窗口</h4>　　TCP的滑动窗口是以字节为单位的。现在假定A收到了B发来的确认报文段，其中窗口是20，而确认号是31(这表明B期望收到的下一个序号是31,到序号30为止的数据已经收到了)。根据这两个数据，A就构造出自己的发送窗口，如下图所示<br><img src=\"/image/tcp/tcp4.png\" alt=\"滑动窗口\"><br>　　发送窗口表示：在没有收到B的确认情况下，A可以把窗口内的数据都发送出去。凡是已经发送过的数据，在未收到确认之前都必须暂时保留，以便在超时重传时使用。<br>发送窗口里面的序号表示允许发送的序号。显然，窗口越大，发送方就可以在收到对方确认之前连续发送更多的数据，因而可能获得更高的传输效率。但是接收方必须来得及处理这些收到的数据。<br>发送窗口后延的后面部分表示已发送且已收到了确认。这些数据显然不需要再保留。而发送窗口前沿的前面部分表示不允许发送的，因为接收方都没有为这部分数据保留临时存放的缓存空间。<br>　　发送窗口的位置由窗口前沿和后延的位置共同确定。发送窗口后沿的变换情况有两种可能，即不懂(没有收到新的确认)和前移(收到了新的确认)。发送窗口后沿不可能向后移动，因为不能撤销掉已收到的确认。发送窗口前沿通常是不断向前移动，但也有可能不动。这对应于两种情况：一时没有收到信的确认，对方通知的窗口大小也不变；二是收到了新的确认但对方通知的窗口缩小了，使得发送窗口前沿正好不动。发送窗口前沿也可能向后收缩，但是TCP的标准强烈不赞成这么做。<h4 id=\"TCP连接的建立\"><a href=\"#TCP连接的建立\" class=\"headerlink\" title=\"TCP连接的建立\"></a>TCP连接的建立</h4>假定主机A运行的是TCP客户程序，而B运行TCP服务器程序。最初两端的TCP进程都处于CLOSED(关闭)状态。如下图所示。现在A主动打开连接，而B是被动打开连接。<br><img src=\"/image/tcp/tcp5.png\" alt=\"三次握手\"><br>　　B的TCP服务器先创建传输控制块TCB，准备接受客户程序的连接请求，然后服务器进场就处于LISTEN(监听)状态，等待客户端的连接请求。如果有，即作出响应。<br>　　A的TCP客户进程也是首先创建传输控制模块TCB，然后向B发出连接请求报文段，这时首部中的同部位SYN=1，同时选择一个初始序号 seq=x 。TCP规定，SYN报文段(即SYN=1的报文段)不能携带数据，但要消耗掉一个序号。这时，TCP客户进程进入SYN-SENT(同步已发送)状态。<br>　　B收到连接请求报文段后，如果同意建立连接，则向A发送确认。在确认报文段中应把SYN位和ACK位都置1，确认号是ack=x+1 ,同时也为自己选择一个初始序号seq=y。这个报文段也不能携带数据，但同样要消耗掉一个序号。这时TCP服务器进程进入SYN-RCVD(同步收到)状态。<br>　　TCP客户进程收到B的确认后，还要向B给出确认。确认报文段的ACK置1，确认号ack=y+1，而自己的序号seq=x+1。TCP的标准规定，ACK报文段可以携带数据。但如果不携带数据则不消耗序号，在这种情况下，下一个数据报文段的序号仍然是seq=x+1。这时TCP连接已经建立，A进入ESTABLISHED(已建立连接)状态。<br>　　当B收到A的确认后，也进入ESTABLISHED状态<br>　　A最后发送一次确认主要是为了防止已失效的连接请求报文段突然又传送到了B，因而产生错误。<h4 id=\"TCP连接的释放\"><a href=\"#TCP连接的释放\" class=\"headerlink\" title=\"TCP连接的释放\"></a>TCP连接的释放</h4>数据传输结束后，通信的双方都可释放连接。<br><img src=\"/image/tcp/tcp6.png\" alt=\"四次挥手\"><br>　　现在A和B都处于ESTABLISHED状态，A的应用进程先向其TCP发出连接释放报文段，并停止再发送数据，主动关闭TCP连接，A把连接释放报文段首部的宗旨控制位FIN置1，其序号seq=u，它等于前面已传送过的数据的最后一个直接的序号加1.这时A进入FIN-WAIT-1(终止等待1)状态，等待B的确认。TCP规定，FIN报文段即使不携带数据，它也消耗掉一个序号。<br>　　B收到连接释放报文段后即发出确认，确认号是ack=u+1，而这个报文段自己的序号是v，等于B前面已传送过的数据的最后一个字节的序号加1。然后B就进入CLOSE-WAIT(关闭等待)状态。TCP服务器进程这时应通知高层应用进程，因而从A到B这个方向的连接就释放了，这时的TCP连接处于半关闭(half-close)状态，即A已经没有数据要发送了，但B若发送数据，A仍要接收，就是说，从B到A这个方向的连接并未关闭，这个状态可能会持续一些时间。<br>　　A收到来自B的确认后，就进图FIN-WAIT-2(终止等待2)状态，等待B发出的连接释放报文段。<br>　　若B已经没有要向A发送的数据，其应用进程就通知TCP释放连接。这时B发出的连接释放报文段必须使用FIN=1.现在假定B的序号为w(在半关闭状态B可能又发送了一些数据)，B还必须重复上次已发送过的确认号ack=u+1。这时B就进入LAST-ACK(最后确认)状态，等待A的确认。<br>　　A在收到B的连接释放报文段后，必须对此发出确认。在确认报文段中把ACK置1，确认号ack=w+1，而自己的序号是seq=u+1，TCP规定，前面发送的FIN报文段要消耗一个序号。然后进入到TIME-WAIT(时间等待)状态。现在TCP连接还没有释放掉。必须经过时间等待计时器(TIME-WAIT timer)设置的时间2MSL后，A才进入到CLOSED状态，时间MSL叫做最长报文段寿命。<br>　　B只要收到了A发出的确认，就进入CLOSED状态。同样，B在撤销相应的出书控制块TCB后，就结束了这次的TCP连接。B结束TCP连接的时间要比A早一些。<h4 id=\"TCP有限状态机\"><a href=\"#TCP有限状态机\" class=\"headerlink\" title=\"TCP有限状态机\"></a>TCP有限状态机</h4><img src=\"/image/tcp/tcp7.png\" alt=\"有限状态机\"><br>粗实线箭头表示对客户进程的正常变迁、粗虚线箭头表示对服务器进程的正常变迁、另一种细线箭头表示异常变迁。</li>\n</ol>\n<hr>\n<p>以上文字和图片均来自于《计算机网络第6版》谢希仁著</p>\n<hr>\n<p>以上</p>\n","excerpt":"<p>尽管TCP和UDP都使用相同的网络层(IP)，TCP却向应用层提供与UDP完全不同的服务。TCP提供一种面向连接的、可靠的字节流服务。这里的面向连接是指：两个使用TCP的应用（通常是一个客户一个服务器）在彼此交换数据之前必须先建立一个TCP连接。<br>","more":"</p>\n<h4 id=\"TCP的主要特点\"><a href=\"#TCP的主要特点\" class=\"headerlink\" title=\"TCP的主要特点\"></a>TCP的主要特点</h4><ul>\n<li>TCP是面向连接的运输层协议</li>\n<li>每一条TCP连接只能两个短点，每一条TCP都是点对点的</li>\n<li>提供可靠交付服务</li>\n<li>提供全双工服务</li>\n<li>面向字节流<h4 id=\"TCP通过下列方式来提供可靠性\"><a href=\"#TCP通过下列方式来提供可靠性\" class=\"headerlink\" title=\"TCP通过下列方式来提供可靠性\"></a>TCP通过下列方式来提供可靠性</h4></li>\n<li>应用数据被分割成TCP认为最合适发送的数据块。这个UDP完全不同，应用程序产生的数据报长度将保持不变。由TCP传递给IP的信息单位称为报文段或段(segment)</li>\n<li>当TCP发出一个段之后，它将启动一个定时器，等待目的端确认收到这个报文段，如果目的端不能及时确认接收，将重发这个报文段</li>\n<li>当TCP收到发至TCP连接的另一端的数据，它将发送一个确认。</li>\n<li>TCP保持它首部和数据的检验和。这是一个端到端的检验和，目的是检测数据在传输过程中的任何变化。如果检验和有差错，TCP将丢弃这个报文段和不确认接收此报文段，并希望另一端重传此报文段。</li>\n<li>既然TCP报文段作为IP数据报来传输，而IP数据报的到达可能会失序，因此TCP报文段的到达也可能会失序。如果必要，TCP将对收到的数据进行重新排序，将收到的数据以正确的顺序交给应用层。</li>\n<li>既然IP数据报会发生重复，TCP的接收端必须丢弃重复的数据。</li>\n<li>TCP还能提供流量控制。TCP连接的每一方都有固定大小的缓冲空间，TCP的接收端只允许另一端发送接收端缓冲区所能接纳的数据。这将防止较快主机致使较慢主机缓冲区溢出。<h4 id=\"停止等待协议\"><a href=\"#停止等待协议\" class=\"headerlink\" title=\"停止等待协议\"></a>停止等待协议</h4>停止等待协议用下面的图来说明：图片来源于《计算机网络第六版》谢希仁编著<br>在全双工通信的情况下，每一端既是接收方也是发送方，为方便，简化为A向B发送数据.</li>\n</ul>\n<ol>\n<li>在无差错的情况下，A向B发送数据分组M1，发送完了就等待B的确认。B确认接收M1之后向A发送确认收到M1的数据。A收到B发送的”确认收到M1”的消息后，再向B发送下一组数据分组。</li>\n<li>在有差错的情况下，B收到的数据分组可能是内容不对，B就把数据直接丢弃；也可能是数据分组在 传输过程中丢失了，B什么也没有接收到。这两种情况下，B什么也不操作（不通知A数据有错或者没收到数据。等到过一段时间，A没有收到B的确认消息，就认为刚刚发送的数据丢失了，然后重新传输刚才发送的分组。这要求A在每次发送一个数据分组时，都要设计一个超时计数器。<br> 但是要注意<br> 1) A在发送完一个分组后，必须暂时保留已发送的分组的副本（超时重传）。只有等到分组确认后才能清除暂时保留的副本<br> 2) 分组和确认分组必须都进行编号<br> 3) 超时及时器设置的重传时间应当比数据在分组传输的平均往返时间更长一些。<br><img src=\"/image/tcp/tcp1.png\" alt=\"无差错左/有差错右\"></li>\n<li>确认丢失和确认迟到<br>下图左边的情况是B向A发送的确认收到M1的消息丢失了。A在设定的超时重传时间内没有收到确认，但并无法知道是自己发送的分组出错、丢失，或者是B发送的确认丢失了，因此A在超时计时器到期后就要重传M1。假定B又收到了重传的分组M1.这时应采取两个行动：<br> 1) 丢弃这个重复的分组M1，不向上层交付。<br> 2) 向A发送确认，不能认为已经发送过确认就不再发送，因为A之所以重传M1就表示A没有收到M1的确认。<br>下图右边的情况是传输过程中没有出现差错，但是B对分组M1的确认迟到了，A会收到重复确认，然后丢弃掉，但是这时A已经重发数据分组M1了，B收到重复的分组M1胡同样丢弃重复的分组M1，并重传确认分组。<br><img src=\"/image/tcp/tcp2.png\" alt=\"确认丢失左/确认迟到右\"><h4 id=\"连续ARQ协议\"><a href=\"#连续ARQ协议\" class=\"headerlink\" title=\"连续ARQ协议\"></a>连续ARQ协议</h4>　　滑动窗口协议比较复杂。图片来源于《计算机网络第六版》谢希仁编著<br>下图a表示发送发维持的发送窗口，它的意义是：位于发送窗口内的5个分组都可以连续发送出去，而不需要等待对方确认。<br>连续ARQ协议规定，发送方每收到一个确认，就把窗口向前滑动一个分组的位置，b表示发送发收到了对第一个分组的确认，于是把发送的分组向前移动一个分组的位置。<br>接收方一般都是采用<strong>累计确认</strong>的方式。这就是说，接收方不必对收到的分组逐个发送确认，而是在收到几个分组后，对按序到达的的最后一个分组发送确认，这就表示：到这个分组为止的所有分组都已经正确收到了。<br><img src=\"/image/tcp/tcp3.png\" alt=\"发送窗口\"><h4 id=\"滑动窗口\"><a href=\"#滑动窗口\" class=\"headerlink\" title=\"滑动窗口\"></a>滑动窗口</h4>　　TCP的滑动窗口是以字节为单位的。现在假定A收到了B发来的确认报文段，其中窗口是20，而确认号是31(这表明B期望收到的下一个序号是31,到序号30为止的数据已经收到了)。根据这两个数据，A就构造出自己的发送窗口，如下图所示<br><img src=\"/image/tcp/tcp4.png\" alt=\"滑动窗口\"><br>　　发送窗口表示：在没有收到B的确认情况下，A可以把窗口内的数据都发送出去。凡是已经发送过的数据，在未收到确认之前都必须暂时保留，以便在超时重传时使用。<br>发送窗口里面的序号表示允许发送的序号。显然，窗口越大，发送方就可以在收到对方确认之前连续发送更多的数据，因而可能获得更高的传输效率。但是接收方必须来得及处理这些收到的数据。<br>发送窗口后延的后面部分表示已发送且已收到了确认。这些数据显然不需要再保留。而发送窗口前沿的前面部分表示不允许发送的，因为接收方都没有为这部分数据保留临时存放的缓存空间。<br>　　发送窗口的位置由窗口前沿和后延的位置共同确定。发送窗口后沿的变换情况有两种可能，即不懂(没有收到新的确认)和前移(收到了新的确认)。发送窗口后沿不可能向后移动，因为不能撤销掉已收到的确认。发送窗口前沿通常是不断向前移动，但也有可能不动。这对应于两种情况：一时没有收到信的确认，对方通知的窗口大小也不变；二是收到了新的确认但对方通知的窗口缩小了，使得发送窗口前沿正好不动。发送窗口前沿也可能向后收缩，但是TCP的标准强烈不赞成这么做。<h4 id=\"TCP连接的建立\"><a href=\"#TCP连接的建立\" class=\"headerlink\" title=\"TCP连接的建立\"></a>TCP连接的建立</h4>假定主机A运行的是TCP客户程序，而B运行TCP服务器程序。最初两端的TCP进程都处于CLOSED(关闭)状态。如下图所示。现在A主动打开连接，而B是被动打开连接。<br><img src=\"/image/tcp/tcp5.png\" alt=\"三次握手\"><br>　　B的TCP服务器先创建传输控制块TCB，准备接受客户程序的连接请求，然后服务器进场就处于LISTEN(监听)状态，等待客户端的连接请求。如果有，即作出响应。<br>　　A的TCP客户进程也是首先创建传输控制模块TCB，然后向B发出连接请求报文段，这时首部中的同部位SYN=1，同时选择一个初始序号 seq=x 。TCP规定，SYN报文段(即SYN=1的报文段)不能携带数据，但要消耗掉一个序号。这时，TCP客户进程进入SYN-SENT(同步已发送)状态。<br>　　B收到连接请求报文段后，如果同意建立连接，则向A发送确认。在确认报文段中应把SYN位和ACK位都置1，确认号是ack=x+1 ,同时也为自己选择一个初始序号seq=y。这个报文段也不能携带数据，但同样要消耗掉一个序号。这时TCP服务器进程进入SYN-RCVD(同步收到)状态。<br>　　TCP客户进程收到B的确认后，还要向B给出确认。确认报文段的ACK置1，确认号ack=y+1，而自己的序号seq=x+1。TCP的标准规定，ACK报文段可以携带数据。但如果不携带数据则不消耗序号，在这种情况下，下一个数据报文段的序号仍然是seq=x+1。这时TCP连接已经建立，A进入ESTABLISHED(已建立连接)状态。<br>　　当B收到A的确认后，也进入ESTABLISHED状态<br>　　A最后发送一次确认主要是为了防止已失效的连接请求报文段突然又传送到了B，因而产生错误。<h4 id=\"TCP连接的释放\"><a href=\"#TCP连接的释放\" class=\"headerlink\" title=\"TCP连接的释放\"></a>TCP连接的释放</h4>数据传输结束后，通信的双方都可释放连接。<br><img src=\"/image/tcp/tcp6.png\" alt=\"四次挥手\"><br>　　现在A和B都处于ESTABLISHED状态，A的应用进程先向其TCP发出连接释放报文段，并停止再发送数据，主动关闭TCP连接，A把连接释放报文段首部的宗旨控制位FIN置1，其序号seq=u，它等于前面已传送过的数据的最后一个直接的序号加1.这时A进入FIN-WAIT-1(终止等待1)状态，等待B的确认。TCP规定，FIN报文段即使不携带数据，它也消耗掉一个序号。<br>　　B收到连接释放报文段后即发出确认，确认号是ack=u+1，而这个报文段自己的序号是v，等于B前面已传送过的数据的最后一个字节的序号加1。然后B就进入CLOSE-WAIT(关闭等待)状态。TCP服务器进程这时应通知高层应用进程，因而从A到B这个方向的连接就释放了，这时的TCP连接处于半关闭(half-close)状态，即A已经没有数据要发送了，但B若发送数据，A仍要接收，就是说，从B到A这个方向的连接并未关闭，这个状态可能会持续一些时间。<br>　　A收到来自B的确认后，就进图FIN-WAIT-2(终止等待2)状态，等待B发出的连接释放报文段。<br>　　若B已经没有要向A发送的数据，其应用进程就通知TCP释放连接。这时B发出的连接释放报文段必须使用FIN=1.现在假定B的序号为w(在半关闭状态B可能又发送了一些数据)，B还必须重复上次已发送过的确认号ack=u+1。这时B就进入LAST-ACK(最后确认)状态，等待A的确认。<br>　　A在收到B的连接释放报文段后，必须对此发出确认。在确认报文段中把ACK置1，确认号ack=w+1，而自己的序号是seq=u+1，TCP规定，前面发送的FIN报文段要消耗一个序号。然后进入到TIME-WAIT(时间等待)状态。现在TCP连接还没有释放掉。必须经过时间等待计时器(TIME-WAIT timer)设置的时间2MSL后，A才进入到CLOSED状态，时间MSL叫做最长报文段寿命。<br>　　B只要收到了A发出的确认，就进入CLOSED状态。同样，B在撤销相应的出书控制块TCB后，就结束了这次的TCP连接。B结束TCP连接的时间要比A早一些。<h4 id=\"TCP有限状态机\"><a href=\"#TCP有限状态机\" class=\"headerlink\" title=\"TCP有限状态机\"></a>TCP有限状态机</h4><img src=\"/image/tcp/tcp7.png\" alt=\"有限状态机\"><br>粗实线箭头表示对客户进程的正常变迁、粗虚线箭头表示对服务器进程的正常变迁、另一种细线箭头表示异常变迁。</li>\n</ol>\n<hr>\n<p>以上文字和图片均来自于《计算机网络第6版》谢希仁著</p>\n<hr>\n<p>以上</p>"},{"title":"hexo+gitpage搭建自己的博客(一)","date":"2016-10-20T16:04:26.000Z","_content":"**不说环境直接写配置的行为都是耍流氓**\n按照惯例,先说自己的环境:`ubunu`,然后就没有然后了.<hr>\n<!-- more -->\n　　`hexo`类似`wordpress`的博客框架,`gitpage`是`github`的一个服务,请原谅我这个不大准确的表达,事实上真的差不多.\n安装`hexo`需要安装`nodejs`,使用`gitpage`需要`git`,至于如何安装`git`,在原来的csdn博客上有,[点击这里](http://blog.csdn.net/huangyuan_xuan/article/details/49125597) http://blog.csdn.net/huangyuan_xuan/article/details/49125597.\n之后需要在自己的github上创建一个仓库,名称结构如下:`username.github.io`,例如我的github主页是`https://github.com/huangyuanlove`,那么我的`gitpage`就是`huangyuanlove.github.io`.\n到这里,默认大家的gitpage和git已经配置好了,包括sshkey之类的东西.\n***\n　　我安装`node`是用`nvm`(node version manager)安装的,然后使用`node`中的`npm`(node package manager)安装hexo.windows下安装请转[这里](https://github.com/coreybutler/nvm-windows) https://github.com/coreybutler/nvm-windows\n首先安装`nvm`:\n> `wget -qO- https://raw.github.com/creationix/nvm/master/install.sh | sh  `\n\n![安装nvm](/image/hexo/hexo_install_nvm.png  \"安装nvm图片\")\n安装时间长短视网速而定,我安装了大概十多分钟,然后重启一下终端.\n然后使用 `nvm ls-remote`查看一下有哪些本版可以安装,我当时安装的最新版是`6.6.0`,现在不知道是哪一版,如下\n![nvm ls-remote](/image/hexo/nvm_ls-remote.png)\n找一个合适的版本使用如下命令安装\n`nvm install version`,例如 `nvm install 6.6.0`\n![nvm ls-remote](/image/hexo/nvm_install_6.6.0.png),安装时间还是视网速而定,我也忘了装了多长时间了.\n安装完成之后是这样的\n![nvm_install_down](/image/hexo/nvm_install_down.png)\n之后`npm install -g hexo`安装`hexo`,`-g`参数是全局安装\n![npm_install_hexo](/image/hexo/npm_install_hexo.png)\n安装完成之后使用`hexo -v`查看hexo的版本号\n![hexo-v](/image/hexo/hexo-v.png)\n到此`hexo`安装完成,接下来就是初始化,进行配置了.下一篇再说吧,睡觉了.\n***\n以上.\n","source":"_posts/hexo-gitpage搭建自己的博客-一.md","raw":"---\ntitle: hexo+gitpage搭建自己的博客(一)\ndate: 2016-10-21 00:04:26\ntags: [hexo,gitpage,blog]\n---\n**不说环境直接写配置的行为都是耍流氓**\n按照惯例,先说自己的环境:`ubunu`,然后就没有然后了.<hr>\n<!-- more -->\n　　`hexo`类似`wordpress`的博客框架,`gitpage`是`github`的一个服务,请原谅我这个不大准确的表达,事实上真的差不多.\n安装`hexo`需要安装`nodejs`,使用`gitpage`需要`git`,至于如何安装`git`,在原来的csdn博客上有,[点击这里](http://blog.csdn.net/huangyuan_xuan/article/details/49125597) http://blog.csdn.net/huangyuan_xuan/article/details/49125597.\n之后需要在自己的github上创建一个仓库,名称结构如下:`username.github.io`,例如我的github主页是`https://github.com/huangyuanlove`,那么我的`gitpage`就是`huangyuanlove.github.io`.\n到这里,默认大家的gitpage和git已经配置好了,包括sshkey之类的东西.\n***\n　　我安装`node`是用`nvm`(node version manager)安装的,然后使用`node`中的`npm`(node package manager)安装hexo.windows下安装请转[这里](https://github.com/coreybutler/nvm-windows) https://github.com/coreybutler/nvm-windows\n首先安装`nvm`:\n> `wget -qO- https://raw.github.com/creationix/nvm/master/install.sh | sh  `\n\n![安装nvm](/image/hexo/hexo_install_nvm.png  \"安装nvm图片\")\n安装时间长短视网速而定,我安装了大概十多分钟,然后重启一下终端.\n然后使用 `nvm ls-remote`查看一下有哪些本版可以安装,我当时安装的最新版是`6.6.0`,现在不知道是哪一版,如下\n![nvm ls-remote](/image/hexo/nvm_ls-remote.png)\n找一个合适的版本使用如下命令安装\n`nvm install version`,例如 `nvm install 6.6.0`\n![nvm ls-remote](/image/hexo/nvm_install_6.6.0.png),安装时间还是视网速而定,我也忘了装了多长时间了.\n安装完成之后是这样的\n![nvm_install_down](/image/hexo/nvm_install_down.png)\n之后`npm install -g hexo`安装`hexo`,`-g`参数是全局安装\n![npm_install_hexo](/image/hexo/npm_install_hexo.png)\n安装完成之后使用`hexo -v`查看hexo的版本号\n![hexo-v](/image/hexo/hexo-v.png)\n到此`hexo`安装完成,接下来就是初始化,进行配置了.下一篇再说吧,睡觉了.\n***\n以上.\n","slug":"hexo-gitpage搭建自己的博客-一","published":1,"updated":"2017-12-30T13:13:07.229Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjbvyt3ur000kscdgx1boet3h","content":"<p><strong>不说环境直接写配置的行为都是耍流氓</strong><br>按照惯例,先说自己的环境:<code>ubunu</code>,然后就没有然后了.<hr><br><a id=\"more\"></a><br>　　<code>hexo</code>类似<code>wordpress</code>的博客框架,<code>gitpage</code>是<code>github</code>的一个服务,请原谅我这个不大准确的表达,事实上真的差不多.<br>安装<code>hexo</code>需要安装<code>nodejs</code>,使用<code>gitpage</code>需要<code>git</code>,至于如何安装<code>git</code>,在原来的csdn博客上有,<a href=\"http://blog.csdn.net/huangyuan_xuan/article/details/49125597\" target=\"_blank\" rel=\"external\">点击这里</a> <a href=\"http://blog.csdn.net/huangyuan_xuan/article/details/49125597\" target=\"_blank\" rel=\"external\">http://blog.csdn.net/huangyuan_xuan/article/details/49125597</a>.<br>之后需要在自己的github上创建一个仓库,名称结构如下:<code>username.github.io</code>,例如我的github主页是<code>https://github.com/huangyuanlove</code>,那么我的<code>gitpage</code>就是<code>huangyuanlove.github.io</code>.<br>到这里,默认大家的gitpage和git已经配置好了,包括sshkey之类的东西.</p>\n<hr>\n<p>　　我安装<code>node</code>是用<code>nvm</code>(node version manager)安装的,然后使用<code>node</code>中的<code>npm</code>(node package manager)安装hexo.windows下安装请转<a href=\"https://github.com/coreybutler/nvm-windows\" target=\"_blank\" rel=\"external\">这里</a> <a href=\"https://github.com/coreybutler/nvm-windows\" target=\"_blank\" rel=\"external\">https://github.com/coreybutler/nvm-windows</a><br>首先安装<code>nvm</code>:</p>\n<blockquote>\n<p><code>wget -qO- https://raw.github.com/creationix/nvm/master/install.sh | sh</code></p>\n</blockquote>\n<p><img src=\"/image/hexo/hexo_install_nvm.png\" alt=\"安装nvm\" title=\"安装nvm图片\"><br>安装时间长短视网速而定,我安装了大概十多分钟,然后重启一下终端.<br>然后使用 <code>nvm ls-remote</code>查看一下有哪些本版可以安装,我当时安装的最新版是<code>6.6.0</code>,现在不知道是哪一版,如下<br><img src=\"/image/hexo/nvm_ls-remote.png\" alt=\"nvm ls-remote\"><br>找一个合适的版本使用如下命令安装<br><code>nvm install version</code>,例如 <code>nvm install 6.6.0</code><br><img src=\"/image/hexo/nvm_install_6.6.0.png\" alt=\"nvm ls-remote\">,安装时间还是视网速而定,我也忘了装了多长时间了.<br>安装完成之后是这样的<br><img src=\"/image/hexo/nvm_install_down.png\" alt=\"nvm_install_down\"><br>之后<code>npm install -g hexo</code>安装<code>hexo</code>,<code>-g</code>参数是全局安装<br><img src=\"/image/hexo/npm_install_hexo.png\" alt=\"npm_install_hexo\"><br>安装完成之后使用<code>hexo -v</code>查看hexo的版本号<br><img src=\"/image/hexo/hexo-v.png\" alt=\"hexo-v\"><br>到此<code>hexo</code>安装完成,接下来就是初始化,进行配置了.下一篇再说吧,睡觉了.</p>\n<hr>\n<p>以上.</p>\n","excerpt":"<p><strong>不说环境直接写配置的行为都是耍流氓</strong><br>按照惯例,先说自己的环境:<code>ubunu</code>,然后就没有然后了.<hr><br>","more":"<br>　　<code>hexo</code>类似<code>wordpress</code>的博客框架,<code>gitpage</code>是<code>github</code>的一个服务,请原谅我这个不大准确的表达,事实上真的差不多.<br>安装<code>hexo</code>需要安装<code>nodejs</code>,使用<code>gitpage</code>需要<code>git</code>,至于如何安装<code>git</code>,在原来的csdn博客上有,<a href=\"http://blog.csdn.net/huangyuan_xuan/article/details/49125597\">点击这里</a> <a href=\"http://blog.csdn.net/huangyuan_xuan/article/details/49125597\">http://blog.csdn.net/huangyuan_xuan/article/details/49125597</a>.<br>之后需要在自己的github上创建一个仓库,名称结构如下:<code>username.github.io</code>,例如我的github主页是<code>https://github.com/huangyuanlove</code>,那么我的<code>gitpage</code>就是<code>huangyuanlove.github.io</code>.<br>到这里,默认大家的gitpage和git已经配置好了,包括sshkey之类的东西.</p>\n<hr>\n<p>　　我安装<code>node</code>是用<code>nvm</code>(node version manager)安装的,然后使用<code>node</code>中的<code>npm</code>(node package manager)安装hexo.windows下安装请转<a href=\"https://github.com/coreybutler/nvm-windows\">这里</a> <a href=\"https://github.com/coreybutler/nvm-windows\">https://github.com/coreybutler/nvm-windows</a><br>首先安装<code>nvm</code>:</p>\n<blockquote>\n<p><code>wget -qO- https://raw.github.com/creationix/nvm/master/install.sh | sh</code></p>\n</blockquote>\n<p><img src=\"/image/hexo/hexo_install_nvm.png\" alt=\"安装nvm\" title=\"安装nvm图片\"><br>安装时间长短视网速而定,我安装了大概十多分钟,然后重启一下终端.<br>然后使用 <code>nvm ls-remote</code>查看一下有哪些本版可以安装,我当时安装的最新版是<code>6.6.0</code>,现在不知道是哪一版,如下<br><img src=\"/image/hexo/nvm_ls-remote.png\" alt=\"nvm ls-remote\"><br>找一个合适的版本使用如下命令安装<br><code>nvm install version</code>,例如 <code>nvm install 6.6.0</code><br><img src=\"/image/hexo/nvm_install_6.6.0.png\" alt=\"nvm ls-remote\">,安装时间还是视网速而定,我也忘了装了多长时间了.<br>安装完成之后是这样的<br><img src=\"/image/hexo/nvm_install_down.png\" alt=\"nvm_install_down\"><br>之后<code>npm install -g hexo</code>安装<code>hexo</code>,<code>-g</code>参数是全局安装<br><img src=\"/image/hexo/npm_install_hexo.png\" alt=\"npm_install_hexo\"><br>安装完成之后使用<code>hexo -v</code>查看hexo的版本号<br><img src=\"/image/hexo/hexo-v.png\" alt=\"hexo-v\"><br>到此<code>hexo</code>安装完成,接下来就是初始化,进行配置了.下一篇再说吧,睡觉了.</p>\n<hr>\n<p>以上.</p>"},{"title":"Window和WindowManager","date":"2017-03-21T12:05:01.000Z","_content":"　　Window表示一个窗口的概念，在日常开发中直接接触WIndow的机会并不对，再试在某些特殊时候我们需要在桌面上显示一个类似悬浮窗的东西，那么这种效果就需要用到Window来实现。\n　　Window只是个抽象类，它的具体实现是PhoneWindow。创建一个Window是很简单的事，只需要通过WindowManager即可完成，WindowManager是外界访问Window的入口，Window的具体实现位于WindowMangerService中，WindowMnager和WindowManager的交互是一个IPC过程，Android中所有的视图都是通过Window来呈现的，不管是Activity、Dialog还是Toast，它们的视图实际上都是附加在Window上的，因此Window实际是View的直接管理者。\n<!--more-->\n### Window的内部机制\n　　Window是一个抽象的概念，每一个Window都对应着一个View和一个ViewRootImpl，Window和View通过ViewRootImpl来建立联系，因此Window并不是实际存在的，它是以View的形式存在，。这点从WindowManager的定义也可以看出，它提供的三个接口方法addView,updateViewLayout以及removeView都是针对View，这说明View才是Window存在的实体。在实际使用中无法直接访问Window，对Window的访问必须通过WindowManger。\n\n#### Window的添加过程\n　　Window的添加过程需要通过WindowManager的addView来实现，WindowManager是一个接口，它的真正实现是WindowManagerImpl类，在WindowManagerImpl中Window的三大操作实现如下：\n```java\n\t@Override\n    public void addView(@NonNull View view, @NonNull ViewGroup.LayoutParams params) {\n        applyDefaultToken(params);\n        mGlobal.addView(view, params, mContext.getDisplay(), mParentWindow);\n    }\n    \n\t@Override\n    public void updateViewLayout(@NonNull View view, @NonNull ViewGroup.LayoutParams params) {\n        applyDefaultToken(params);\n        mGlobal.updateViewLayout(view, params);\n    }\n\t\n\t@Override\n    public void removeView(View view) {\n        mGlobal.removeView(view, false);\n    }\n\n    @Override\n    public void removeViewImmediate(View view) {\n        mGlobal.removeView(view, true);\n    }\n```\n　　WindowManagerImpl并没有直接实现Window的三大操作，而是全部交给了WindowManagerGlobal来处理，WindowManagerGlobal以工厂的形式向外提供自己的实现，WindowManagerImpl这种工作模式是典型的桥接模式，将所有的操作全部委托给WindowManagerGlobal来实现。在WindowManagerGlobal的addView方法主要分为如下几步：\n1. **检查参数是否合法，如果是子Window，那么还需要调整一些布局参数。**\n\n``` java\n public void addView(View view, ViewGroup.LayoutParams params,\n            Display display, Window parentWindow) {\n        if (view == null) {\n            throw new IllegalArgumentException(\"view must not be null\");\n        }\n        if (display == null) {\n            throw new IllegalArgumentException(\"display must not be null\");\n        }\n        if (!(params instanceof WindowManager.LayoutParams)) {\n            throw new IllegalArgumentException(\"Params must be WindowManager.LayoutParams\");\n        }\n\n        final WindowManager.LayoutParams wparams = (WindowManager.LayoutParams) params;\n        if (parentWindow != null) {\n            parentWindow.adjustLayoutParamsForSubWindow(wparams);\n        } else {\n            // If there's no parent, then hardware acceleration for this view is\n            // set from the application's hardware acceleration setting.\n            final Context context = view.getContext();\n            if (context != null\n                    && (context.getApplicationInfo().flags\n                            & ApplicationInfo.FLAG_HARDWARE_ACCELERATED) != 0) {\n                wparams.flags |= WindowManager.LayoutParams.FLAG_HARDWARE_ACCELERATED;\n            }\n        }\n\t}\n```\n\n2. **创建ViewRootImpl并将View添加到列表中。**\n在WindowManagerGlobal内部有如下几个列表比较重要：\n\n``` java\n\tprivate final ArrayList<View> mViews = new ArrayList<View>();\n    private final ArrayList<ViewRootImpl> mRoots = new ArrayList<ViewRootImpl>();\n    private final ArrayList<WindowManager.LayoutParams> mParams =\n            new ArrayList<WindowManager.LayoutParams>();\n    private final ArraySet<View> mDyingViews = new ArraySet<View>();\n```\n　　在以上声明中，mView存储的是多有WIndow所对应的View,mRoots存储的是所有Window所对应的ViewRootImpl，mParams存储的是所有Window所对应的布局参数，而mDyingView则存储了那些正在被删除的View对象，或者说是那些已经调用removeView方法但是删除操作还未完成的Window对象，在addView中通过如下方式将Window的一系列对象添加到列表中：\n``` java\n\troot = new ViewRootImpl(view.getContext(), display);\n    view.setLayoutParams(wparams);\n    mViews.add(view);\n    mRoots.add(root);\n    mParams.add(wparams);\n```\n3. **通过ViewRootImpl来更新界面并完成Window的添加过程。**\n这个过程由ViewRootImpl的setView方法来完成：\n``` java\n // do this last because it fires off messages to start doing things\n        try {\n            root.setView(view, wparams, panelParentView);\n        } catch (RuntimeException e) {\n            // BadTokenException or InvalidDisplayException, clean up.\n            synchronized (mLock) {\n                final int index = findViewLocked(view, false);\n                if (index >= 0) {\n                    removeViewLocked(index, true);\n                }\n            }\n            throw e;\n        }\n```\n在setView内部会通过requestLayout来完成异步刷新请求。在下面的代码中，scheduleTraversals实际是View绘制的入口：\n``` java\n @Override\n    public void requestLayout() {\n        if (!mHandlingLayoutInLayoutRequest) {\n            checkThread();\n            mLayoutRequested = true;\n            scheduleTraversals();\n        }\n    }\n```\n接着会通过WindowSession最终来完成Window的添加过程。\n#### Window的删除过程\nWindow的删除过程和添加过程一样，都是先通过WindowManagerImpl后，再进一步通过WindowManagerGlobal来实现的，如下：\n``` java\npublic void removeView(View view, boolean immediate) {\n        if (view == null) {\n            throw new IllegalArgumentException(\"view must not be null\");\n        }\n\n        synchronized (mLock) {\n            int index = findViewLocked(view, true);\n            View curView = mRoots.get(index).getView();\n            removeViewLocked(index, immediate);\n            if (curView == view) {\n                return;\n            }\n\n            throw new IllegalStateException(\"Calling with view \" + view\n                    + \" but the ViewAncestor is attached to \" + curView);\n        }\n    }\n```\n　　removeView的逻辑很清晰，首先通过findViewLocked来查找待删除的View的索引，这个查找过程就是建立的数据遍历，然后再通过调用removeViewLocked来做进一步的删除，如下：\n``` java\nprivate void removeViewLocked(int index, boolean immediate) {\n        ViewRootImpl root = mRoots.get(index);\n        View view = root.getView();\n\n        if (view != null) {\n            InputMethodManager imm = InputMethodManager.getInstance();\n            if (imm != null) {\n                imm.windowDismissed(mViews.get(index).getWindowToken());\n            }\n        }\n        boolean deferred = root.die(immediate);\n        if (view != null) {\n            view.assignParent(null);\n            if (deferred) {\n                mDyingViews.add(view);\n            }\n        }\n    }\n```\n　　removeViewLocked是通过ViewRootImpl来完成删除操作的，在WindowManager中提供了两种删除接口removeView和removeViewImmediate,它们分别表示异步删除和同步删除，一般不需要使用removeViewImmediate这个方法。这里主要说异步删除的情况：具体的删除操作由ViewRootImpl的die方法来完成，在异步删除的情况下，die方法只是发送了一个请求删除的消息后就立刻返回了，**这个时候View并没有完成删除操作**，所以最后会将其添加到mDyingView中。ViewRootImpl的die方法如下：\n``` java\n\tboolean die(boolean immediate) {\n    // Make sure we do execute immediately if we are in the middle of a traversal or the damage\n    // done by dispatchDetachedFromWindow will cause havoc on return.\n    if (immediate && !mIsInTraversal) {\n        doDie();\n        return false;\n    }\n\n    if (!mIsDrawing) {\n        destroyHardwareRenderer();\n    } else {\n        Log.e(mTag, \"Attempting to destroy the window while drawing!\\n\" +\n                \"  window=\" + this + \", title=\" + mWindowAttributes.getTitle());\n    }\n    mHandler.sendEmptyMessage(MSG_DIE);\n    return true;\n    }\n```\n　　在die方法中只是做了简单的判断，如果是异步删除，那么就发送一个MSG_DIE的消息，ViewRootImpl中的Handler会处理此消息并调用doDie方法，如果是同步删除，那么就不发送消息直接调用doDie方法。在doDie内部会调用dispatchDetachedFromWindow方法，真正删除View的逻辑在dispatchDetachedFromWindow方法内部实现。dispatchDetachedFromWindow方法主要做四件事：\n1. 垃圾回收相关的工作，比如清除数据和消息，移除回调等。\n2. 通过Session的remove方法删除Window：mWindowSession.remove(mWindow)，这同样是一个IPC过程，最终会调用WindowManagerService的removeWindow方法。\n3. 调用View的dispatchDetachedFromWindow方法，在内部会调用View的onDetachedFromWindow以及onDetachedFromWindowInternal()。\n4. 调用WindowManagerGlobal的doRemoveView方法刷新数据，包括mRoots、mParams以及mDyingViews，需要将当前Window锁关联的这三类对象从列表中删除。\n#### Window的更新过程\n``` java\n\tpublic void updateViewLayout(View view, ViewGroup.LayoutParams params) {\n        if (view == null) {\n            throw new IllegalArgumentException(\"view must not be null\");\n        }\n        if (!(params instanceof WindowManager.LayoutParams)) {\n            throw new IllegalArgumentException(\"Params must be WindowManager.LayoutParams\");\n        }\n\n        final WindowManager.LayoutParams wparams = (WindowManager.LayoutParams)params;\n\n        view.setLayoutParams(wparams);\n\n        synchronized (mLock) {\n            int index = findViewLocked(view, true);\n            ViewRootImpl root = mRoots.get(index);\n            mParams.remove(index);\n            mParams.add(index, wparams);\n            root.setLayoutParams(wparams, false);\n        }\n    }\n```\n首先它需要更新View的LayoutParams并替换掉老的LayoutParams，接着再更新ViewRootImpl中的layoutParams，这一步是通过ViewRootImpl的setLayoutParams方法来实现的。在ViewRootImpl中会通过scheduleTraversals方法来对View重新布局，包括测量、布局、重绘这三个过程，除了View本身的重绘以外，ViewRootImpl还会通过WindowSession开更新Window的视图，这个过程最终是由WindowManagerService的relayoutWindow()来具体实现，它同样是一个IPC的过程。\n***\n以上\n","source":"_posts/Window和WindowManager.md","raw":"---\ntitle: Window和WindowManager\ndate: 2017-03-21 20:05:01\ntags: [Android]\n---\n　　Window表示一个窗口的概念，在日常开发中直接接触WIndow的机会并不对，再试在某些特殊时候我们需要在桌面上显示一个类似悬浮窗的东西，那么这种效果就需要用到Window来实现。\n　　Window只是个抽象类，它的具体实现是PhoneWindow。创建一个Window是很简单的事，只需要通过WindowManager即可完成，WindowManager是外界访问Window的入口，Window的具体实现位于WindowMangerService中，WindowMnager和WindowManager的交互是一个IPC过程，Android中所有的视图都是通过Window来呈现的，不管是Activity、Dialog还是Toast，它们的视图实际上都是附加在Window上的，因此Window实际是View的直接管理者。\n<!--more-->\n### Window的内部机制\n　　Window是一个抽象的概念，每一个Window都对应着一个View和一个ViewRootImpl，Window和View通过ViewRootImpl来建立联系，因此Window并不是实际存在的，它是以View的形式存在，。这点从WindowManager的定义也可以看出，它提供的三个接口方法addView,updateViewLayout以及removeView都是针对View，这说明View才是Window存在的实体。在实际使用中无法直接访问Window，对Window的访问必须通过WindowManger。\n\n#### Window的添加过程\n　　Window的添加过程需要通过WindowManager的addView来实现，WindowManager是一个接口，它的真正实现是WindowManagerImpl类，在WindowManagerImpl中Window的三大操作实现如下：\n```java\n\t@Override\n    public void addView(@NonNull View view, @NonNull ViewGroup.LayoutParams params) {\n        applyDefaultToken(params);\n        mGlobal.addView(view, params, mContext.getDisplay(), mParentWindow);\n    }\n    \n\t@Override\n    public void updateViewLayout(@NonNull View view, @NonNull ViewGroup.LayoutParams params) {\n        applyDefaultToken(params);\n        mGlobal.updateViewLayout(view, params);\n    }\n\t\n\t@Override\n    public void removeView(View view) {\n        mGlobal.removeView(view, false);\n    }\n\n    @Override\n    public void removeViewImmediate(View view) {\n        mGlobal.removeView(view, true);\n    }\n```\n　　WindowManagerImpl并没有直接实现Window的三大操作，而是全部交给了WindowManagerGlobal来处理，WindowManagerGlobal以工厂的形式向外提供自己的实现，WindowManagerImpl这种工作模式是典型的桥接模式，将所有的操作全部委托给WindowManagerGlobal来实现。在WindowManagerGlobal的addView方法主要分为如下几步：\n1. **检查参数是否合法，如果是子Window，那么还需要调整一些布局参数。**\n\n``` java\n public void addView(View view, ViewGroup.LayoutParams params,\n            Display display, Window parentWindow) {\n        if (view == null) {\n            throw new IllegalArgumentException(\"view must not be null\");\n        }\n        if (display == null) {\n            throw new IllegalArgumentException(\"display must not be null\");\n        }\n        if (!(params instanceof WindowManager.LayoutParams)) {\n            throw new IllegalArgumentException(\"Params must be WindowManager.LayoutParams\");\n        }\n\n        final WindowManager.LayoutParams wparams = (WindowManager.LayoutParams) params;\n        if (parentWindow != null) {\n            parentWindow.adjustLayoutParamsForSubWindow(wparams);\n        } else {\n            // If there's no parent, then hardware acceleration for this view is\n            // set from the application's hardware acceleration setting.\n            final Context context = view.getContext();\n            if (context != null\n                    && (context.getApplicationInfo().flags\n                            & ApplicationInfo.FLAG_HARDWARE_ACCELERATED) != 0) {\n                wparams.flags |= WindowManager.LayoutParams.FLAG_HARDWARE_ACCELERATED;\n            }\n        }\n\t}\n```\n\n2. **创建ViewRootImpl并将View添加到列表中。**\n在WindowManagerGlobal内部有如下几个列表比较重要：\n\n``` java\n\tprivate final ArrayList<View> mViews = new ArrayList<View>();\n    private final ArrayList<ViewRootImpl> mRoots = new ArrayList<ViewRootImpl>();\n    private final ArrayList<WindowManager.LayoutParams> mParams =\n            new ArrayList<WindowManager.LayoutParams>();\n    private final ArraySet<View> mDyingViews = new ArraySet<View>();\n```\n　　在以上声明中，mView存储的是多有WIndow所对应的View,mRoots存储的是所有Window所对应的ViewRootImpl，mParams存储的是所有Window所对应的布局参数，而mDyingView则存储了那些正在被删除的View对象，或者说是那些已经调用removeView方法但是删除操作还未完成的Window对象，在addView中通过如下方式将Window的一系列对象添加到列表中：\n``` java\n\troot = new ViewRootImpl(view.getContext(), display);\n    view.setLayoutParams(wparams);\n    mViews.add(view);\n    mRoots.add(root);\n    mParams.add(wparams);\n```\n3. **通过ViewRootImpl来更新界面并完成Window的添加过程。**\n这个过程由ViewRootImpl的setView方法来完成：\n``` java\n // do this last because it fires off messages to start doing things\n        try {\n            root.setView(view, wparams, panelParentView);\n        } catch (RuntimeException e) {\n            // BadTokenException or InvalidDisplayException, clean up.\n            synchronized (mLock) {\n                final int index = findViewLocked(view, false);\n                if (index >= 0) {\n                    removeViewLocked(index, true);\n                }\n            }\n            throw e;\n        }\n```\n在setView内部会通过requestLayout来完成异步刷新请求。在下面的代码中，scheduleTraversals实际是View绘制的入口：\n``` java\n @Override\n    public void requestLayout() {\n        if (!mHandlingLayoutInLayoutRequest) {\n            checkThread();\n            mLayoutRequested = true;\n            scheduleTraversals();\n        }\n    }\n```\n接着会通过WindowSession最终来完成Window的添加过程。\n#### Window的删除过程\nWindow的删除过程和添加过程一样，都是先通过WindowManagerImpl后，再进一步通过WindowManagerGlobal来实现的，如下：\n``` java\npublic void removeView(View view, boolean immediate) {\n        if (view == null) {\n            throw new IllegalArgumentException(\"view must not be null\");\n        }\n\n        synchronized (mLock) {\n            int index = findViewLocked(view, true);\n            View curView = mRoots.get(index).getView();\n            removeViewLocked(index, immediate);\n            if (curView == view) {\n                return;\n            }\n\n            throw new IllegalStateException(\"Calling with view \" + view\n                    + \" but the ViewAncestor is attached to \" + curView);\n        }\n    }\n```\n　　removeView的逻辑很清晰，首先通过findViewLocked来查找待删除的View的索引，这个查找过程就是建立的数据遍历，然后再通过调用removeViewLocked来做进一步的删除，如下：\n``` java\nprivate void removeViewLocked(int index, boolean immediate) {\n        ViewRootImpl root = mRoots.get(index);\n        View view = root.getView();\n\n        if (view != null) {\n            InputMethodManager imm = InputMethodManager.getInstance();\n            if (imm != null) {\n                imm.windowDismissed(mViews.get(index).getWindowToken());\n            }\n        }\n        boolean deferred = root.die(immediate);\n        if (view != null) {\n            view.assignParent(null);\n            if (deferred) {\n                mDyingViews.add(view);\n            }\n        }\n    }\n```\n　　removeViewLocked是通过ViewRootImpl来完成删除操作的，在WindowManager中提供了两种删除接口removeView和removeViewImmediate,它们分别表示异步删除和同步删除，一般不需要使用removeViewImmediate这个方法。这里主要说异步删除的情况：具体的删除操作由ViewRootImpl的die方法来完成，在异步删除的情况下，die方法只是发送了一个请求删除的消息后就立刻返回了，**这个时候View并没有完成删除操作**，所以最后会将其添加到mDyingView中。ViewRootImpl的die方法如下：\n``` java\n\tboolean die(boolean immediate) {\n    // Make sure we do execute immediately if we are in the middle of a traversal or the damage\n    // done by dispatchDetachedFromWindow will cause havoc on return.\n    if (immediate && !mIsInTraversal) {\n        doDie();\n        return false;\n    }\n\n    if (!mIsDrawing) {\n        destroyHardwareRenderer();\n    } else {\n        Log.e(mTag, \"Attempting to destroy the window while drawing!\\n\" +\n                \"  window=\" + this + \", title=\" + mWindowAttributes.getTitle());\n    }\n    mHandler.sendEmptyMessage(MSG_DIE);\n    return true;\n    }\n```\n　　在die方法中只是做了简单的判断，如果是异步删除，那么就发送一个MSG_DIE的消息，ViewRootImpl中的Handler会处理此消息并调用doDie方法，如果是同步删除，那么就不发送消息直接调用doDie方法。在doDie内部会调用dispatchDetachedFromWindow方法，真正删除View的逻辑在dispatchDetachedFromWindow方法内部实现。dispatchDetachedFromWindow方法主要做四件事：\n1. 垃圾回收相关的工作，比如清除数据和消息，移除回调等。\n2. 通过Session的remove方法删除Window：mWindowSession.remove(mWindow)，这同样是一个IPC过程，最终会调用WindowManagerService的removeWindow方法。\n3. 调用View的dispatchDetachedFromWindow方法，在内部会调用View的onDetachedFromWindow以及onDetachedFromWindowInternal()。\n4. 调用WindowManagerGlobal的doRemoveView方法刷新数据，包括mRoots、mParams以及mDyingViews，需要将当前Window锁关联的这三类对象从列表中删除。\n#### Window的更新过程\n``` java\n\tpublic void updateViewLayout(View view, ViewGroup.LayoutParams params) {\n        if (view == null) {\n            throw new IllegalArgumentException(\"view must not be null\");\n        }\n        if (!(params instanceof WindowManager.LayoutParams)) {\n            throw new IllegalArgumentException(\"Params must be WindowManager.LayoutParams\");\n        }\n\n        final WindowManager.LayoutParams wparams = (WindowManager.LayoutParams)params;\n\n        view.setLayoutParams(wparams);\n\n        synchronized (mLock) {\n            int index = findViewLocked(view, true);\n            ViewRootImpl root = mRoots.get(index);\n            mParams.remove(index);\n            mParams.add(index, wparams);\n            root.setLayoutParams(wparams, false);\n        }\n    }\n```\n首先它需要更新View的LayoutParams并替换掉老的LayoutParams，接着再更新ViewRootImpl中的layoutParams，这一步是通过ViewRootImpl的setLayoutParams方法来实现的。在ViewRootImpl中会通过scheduleTraversals方法来对View重新布局，包括测量、布局、重绘这三个过程，除了View本身的重绘以外，ViewRootImpl还会通过WindowSession开更新Window的视图，这个过程最终是由WindowManagerService的relayoutWindow()来具体实现，它同样是一个IPC的过程。\n***\n以上\n","slug":"Window和WindowManager","published":1,"updated":"2017-12-30T13:13:07.226Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjbvyt3ur000lscdgj0oh7abb","content":"<p>　　Window表示一个窗口的概念，在日常开发中直接接触WIndow的机会并不对，再试在某些特殊时候我们需要在桌面上显示一个类似悬浮窗的东西，那么这种效果就需要用到Window来实现。<br>　　Window只是个抽象类，它的具体实现是PhoneWindow。创建一个Window是很简单的事，只需要通过WindowManager即可完成，WindowManager是外界访问Window的入口，Window的具体实现位于WindowMangerService中，WindowMnager和WindowManager的交互是一个IPC过程，Android中所有的视图都是通过Window来呈现的，不管是Activity、Dialog还是Toast，它们的视图实际上都是附加在Window上的，因此Window实际是View的直接管理者。<br><a id=\"more\"></a></p>\n<h3 id=\"Window的内部机制\"><a href=\"#Window的内部机制\" class=\"headerlink\" title=\"Window的内部机制\"></a>Window的内部机制</h3><p>　　Window是一个抽象的概念，每一个Window都对应着一个View和一个ViewRootImpl，Window和View通过ViewRootImpl来建立联系，因此Window并不是实际存在的，它是以View的形式存在，。这点从WindowManager的定义也可以看出，它提供的三个接口方法addView,updateViewLayout以及removeView都是针对View，这说明View才是Window存在的实体。在实际使用中无法直接访问Window，对Window的访问必须通过WindowManger。</p>\n<h4 id=\"Window的添加过程\"><a href=\"#Window的添加过程\" class=\"headerlink\" title=\"Window的添加过程\"></a>Window的添加过程</h4><p>　　Window的添加过程需要通过WindowManager的addView来实现，WindowManager是一个接口，它的真正实现是WindowManagerImpl类，在WindowManagerImpl中Window的三大操作实现如下：<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">@Override</span></div><div class=\"line\">   <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">addView</span><span class=\"params\">(@NonNull View view, @NonNull ViewGroup.LayoutParams params)</span> </span>&#123;</div><div class=\"line\">       applyDefaultToken(params);</div><div class=\"line\">       mGlobal.addView(view, params, mContext.getDisplay(), mParentWindow);</div><div class=\"line\">   &#125;</div><div class=\"line\">   </div><div class=\"line\"><span class=\"meta\">@Override</span></div><div class=\"line\">   <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">updateViewLayout</span><span class=\"params\">(@NonNull View view, @NonNull ViewGroup.LayoutParams params)</span> </span>&#123;</div><div class=\"line\">       applyDefaultToken(params);</div><div class=\"line\">       mGlobal.updateViewLayout(view, params);</div><div class=\"line\">   &#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"meta\">@Override</span></div><div class=\"line\">   <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">removeView</span><span class=\"params\">(View view)</span> </span>&#123;</div><div class=\"line\">       mGlobal.removeView(view, <span class=\"keyword\">false</span>);</div><div class=\"line\">   &#125;</div><div class=\"line\"></div><div class=\"line\">   <span class=\"meta\">@Override</span></div><div class=\"line\">   <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">removeViewImmediate</span><span class=\"params\">(View view)</span> </span>&#123;</div><div class=\"line\">       mGlobal.removeView(view, <span class=\"keyword\">true</span>);</div><div class=\"line\">   &#125;</div></pre></td></tr></table></figure></p>\n<p>　　WindowManagerImpl并没有直接实现Window的三大操作，而是全部交给了WindowManagerGlobal来处理，WindowManagerGlobal以工厂的形式向外提供自己的实现，WindowManagerImpl这种工作模式是典型的桥接模式，将所有的操作全部委托给WindowManagerGlobal来实现。在WindowManagerGlobal的addView方法主要分为如下几步：</p>\n<ol>\n<li><strong>检查参数是否合法，如果是子Window，那么还需要调整一些布局参数。</strong></li>\n</ol>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">addView</span><span class=\"params\">(View view, ViewGroup.LayoutParams params,</span></span></div><div class=\"line\">           Display display, Window parentWindow) &#123;</div><div class=\"line\">       <span class=\"keyword\">if</span> (view == <span class=\"keyword\">null</span>) &#123;</div><div class=\"line\">           <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> IllegalArgumentException(<span class=\"string\">\"view must not be null\"</span>);</div><div class=\"line\">       &#125;</div><div class=\"line\">       <span class=\"keyword\">if</span> (display == <span class=\"keyword\">null</span>) &#123;</div><div class=\"line\">           <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> IllegalArgumentException(<span class=\"string\">\"display must not be null\"</span>);</div><div class=\"line\">       &#125;</div><div class=\"line\">       <span class=\"keyword\">if</span> (!(params <span class=\"keyword\">instanceof</span> WindowManager.LayoutParams)) &#123;</div><div class=\"line\">           <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> IllegalArgumentException(<span class=\"string\">\"Params must be WindowManager.LayoutParams\"</span>);</div><div class=\"line\">       &#125;</div><div class=\"line\"></div><div class=\"line\">       <span class=\"keyword\">final</span> WindowManager.LayoutParams wparams = (WindowManager.LayoutParams) params;</div><div class=\"line\">       <span class=\"keyword\">if</span> (parentWindow != <span class=\"keyword\">null</span>) &#123;</div><div class=\"line\">           parentWindow.adjustLayoutParamsForSubWindow(wparams);</div><div class=\"line\">       &#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">           <span class=\"comment\">// If there's no parent, then hardware acceleration for this view is</span></div><div class=\"line\">           <span class=\"comment\">// set from the application's hardware acceleration setting.</span></div><div class=\"line\">           <span class=\"keyword\">final</span> Context context = view.getContext();</div><div class=\"line\">           <span class=\"keyword\">if</span> (context != <span class=\"keyword\">null</span></div><div class=\"line\">                   &amp;&amp; (context.getApplicationInfo().flags</div><div class=\"line\">                           &amp; ApplicationInfo.FLAG_HARDWARE_ACCELERATED) != <span class=\"number\">0</span>) &#123;</div><div class=\"line\">               wparams.flags |= WindowManager.LayoutParams.FLAG_HARDWARE_ACCELERATED;</div><div class=\"line\">           &#125;</div><div class=\"line\">       &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<ol>\n<li><strong>创建ViewRootImpl并将View添加到列表中。</strong><br>在WindowManagerGlobal内部有如下几个列表比较重要：</li>\n</ol>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">private</span> <span class=\"keyword\">final</span> ArrayList&lt;View&gt; mViews = <span class=\"keyword\">new</span> ArrayList&lt;View&gt;();</div><div class=\"line\">   <span class=\"keyword\">private</span> <span class=\"keyword\">final</span> ArrayList&lt;ViewRootImpl&gt; mRoots = <span class=\"keyword\">new</span> ArrayList&lt;ViewRootImpl&gt;();</div><div class=\"line\">   <span class=\"keyword\">private</span> <span class=\"keyword\">final</span> ArrayList&lt;WindowManager.LayoutParams&gt; mParams =</div><div class=\"line\">           <span class=\"keyword\">new</span> ArrayList&lt;WindowManager.LayoutParams&gt;();</div><div class=\"line\">   <span class=\"keyword\">private</span> <span class=\"keyword\">final</span> ArraySet&lt;View&gt; mDyingViews = <span class=\"keyword\">new</span> ArraySet&lt;View&gt;();</div></pre></td></tr></table></figure>\n<p>　　在以上声明中，mView存储的是多有WIndow所对应的View,mRoots存储的是所有Window所对应的ViewRootImpl，mParams存储的是所有Window所对应的布局参数，而mDyingView则存储了那些正在被删除的View对象，或者说是那些已经调用removeView方法但是删除操作还未完成的Window对象，在addView中通过如下方式将Window的一系列对象添加到列表中：<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">root = <span class=\"keyword\">new</span> ViewRootImpl(view.getContext(), display);</div><div class=\"line\">   view.setLayoutParams(wparams);</div><div class=\"line\">   mViews.add(view);</div><div class=\"line\">   mRoots.add(root);</div><div class=\"line\">   mParams.add(wparams);</div></pre></td></tr></table></figure></p>\n<ol>\n<li><strong>通过ViewRootImpl来更新界面并完成Window的添加过程。</strong><br>这个过程由ViewRootImpl的setView方法来完成：<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// do this last because it fires off messages to start doing things</span></div><div class=\"line\">       <span class=\"keyword\">try</span> &#123;</div><div class=\"line\">           root.setView(view, wparams, panelParentView);</div><div class=\"line\">       &#125; <span class=\"keyword\">catch</span> (RuntimeException e) &#123;</div><div class=\"line\">           <span class=\"comment\">// BadTokenException or InvalidDisplayException, clean up.</span></div><div class=\"line\">           <span class=\"keyword\">synchronized</span> (mLock) &#123;</div><div class=\"line\">               <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> index = findViewLocked(view, <span class=\"keyword\">false</span>);</div><div class=\"line\">               <span class=\"keyword\">if</span> (index &gt;= <span class=\"number\">0</span>) &#123;</div><div class=\"line\">                   removeViewLocked(index, <span class=\"keyword\">true</span>);</div><div class=\"line\">               &#125;</div><div class=\"line\">           &#125;</div><div class=\"line\">           <span class=\"keyword\">throw</span> e;</div><div class=\"line\">       &#125;</div></pre></td></tr></table></figure>\n</li>\n</ol>\n<p>在setView内部会通过requestLayout来完成异步刷新请求。在下面的代码中，scheduleTraversals实际是View绘制的入口：<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">@Override</span></div><div class=\"line\">   <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">requestLayout</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">       <span class=\"keyword\">if</span> (!mHandlingLayoutInLayoutRequest) &#123;</div><div class=\"line\">           checkThread();</div><div class=\"line\">           mLayoutRequested = <span class=\"keyword\">true</span>;</div><div class=\"line\">           scheduleTraversals();</div><div class=\"line\">       &#125;</div><div class=\"line\">   &#125;</div></pre></td></tr></table></figure></p>\n<p>接着会通过WindowSession最终来完成Window的添加过程。</p>\n<h4 id=\"Window的删除过程\"><a href=\"#Window的删除过程\" class=\"headerlink\" title=\"Window的删除过程\"></a>Window的删除过程</h4><p>Window的删除过程和添加过程一样，都是先通过WindowManagerImpl后，再进一步通过WindowManagerGlobal来实现的，如下：<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">removeView</span><span class=\"params\">(View view, <span class=\"keyword\">boolean</span> immediate)</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">if</span> (view == <span class=\"keyword\">null</span>) &#123;</div><div class=\"line\">            <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> IllegalArgumentException(<span class=\"string\">\"view must not be null\"</span>);</div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\">        <span class=\"keyword\">synchronized</span> (mLock) &#123;</div><div class=\"line\">            <span class=\"keyword\">int</span> index = findViewLocked(view, <span class=\"keyword\">true</span>);</div><div class=\"line\">            View curView = mRoots.get(index).getView();</div><div class=\"line\">            removeViewLocked(index, immediate);</div><div class=\"line\">            <span class=\"keyword\">if</span> (curView == view) &#123;</div><div class=\"line\">                <span class=\"keyword\">return</span>;</div><div class=\"line\">            &#125;</div><div class=\"line\"></div><div class=\"line\">            <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> IllegalStateException(<span class=\"string\">\"Calling with view \"</span> + view</div><div class=\"line\">                    + <span class=\"string\">\" but the ViewAncestor is attached to \"</span> + curView);</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div></pre></td></tr></table></figure></p>\n<p>　　removeView的逻辑很清晰，首先通过findViewLocked来查找待删除的View的索引，这个查找过程就是建立的数据遍历，然后再通过调用removeViewLocked来做进一步的删除，如下：<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">removeViewLocked</span><span class=\"params\">(<span class=\"keyword\">int</span> index, <span class=\"keyword\">boolean</span> immediate)</span> </span>&#123;</div><div class=\"line\">        ViewRootImpl root = mRoots.get(index);</div><div class=\"line\">        View view = root.getView();</div><div class=\"line\"></div><div class=\"line\">        <span class=\"keyword\">if</span> (view != <span class=\"keyword\">null</span>) &#123;</div><div class=\"line\">            InputMethodManager imm = InputMethodManager.getInstance();</div><div class=\"line\">            <span class=\"keyword\">if</span> (imm != <span class=\"keyword\">null</span>) &#123;</div><div class=\"line\">                imm.windowDismissed(mViews.get(index).getWindowToken());</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;</div><div class=\"line\">        <span class=\"keyword\">boolean</span> deferred = root.die(immediate);</div><div class=\"line\">        <span class=\"keyword\">if</span> (view != <span class=\"keyword\">null</span>) &#123;</div><div class=\"line\">            view.assignParent(<span class=\"keyword\">null</span>);</div><div class=\"line\">            <span class=\"keyword\">if</span> (deferred) &#123;</div><div class=\"line\">                mDyingViews.add(view);</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div></pre></td></tr></table></figure></p>\n<p>　　removeViewLocked是通过ViewRootImpl来完成删除操作的，在WindowManager中提供了两种删除接口removeView和removeViewImmediate,它们分别表示异步删除和同步删除，一般不需要使用removeViewImmediate这个方法。这里主要说异步删除的情况：具体的删除操作由ViewRootImpl的die方法来完成，在异步删除的情况下，die方法只是发送了一个请求删除的消息后就立刻返回了，<strong>这个时候View并没有完成删除操作</strong>，所以最后会将其添加到mDyingView中。ViewRootImpl的die方法如下：<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">boolean</span> <span class=\"title\">die</span><span class=\"params\">(<span class=\"keyword\">boolean</span> immediate)</span> </span>&#123;</div><div class=\"line\">   <span class=\"comment\">// Make sure we do execute immediately if we are in the middle of a traversal or the damage</span></div><div class=\"line\">   <span class=\"comment\">// done by dispatchDetachedFromWindow will cause havoc on return.</span></div><div class=\"line\">   <span class=\"keyword\">if</span> (immediate &amp;&amp; !mIsInTraversal) &#123;</div><div class=\"line\">       doDie();</div><div class=\"line\">       <span class=\"keyword\">return</span> <span class=\"keyword\">false</span>;</div><div class=\"line\">   &#125;</div><div class=\"line\"></div><div class=\"line\">   <span class=\"keyword\">if</span> (!mIsDrawing) &#123;</div><div class=\"line\">       destroyHardwareRenderer();</div><div class=\"line\">   &#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">       Log.e(mTag, <span class=\"string\">\"Attempting to destroy the window while drawing!\\n\"</span> +</div><div class=\"line\">               <span class=\"string\">\"  window=\"</span> + <span class=\"keyword\">this</span> + <span class=\"string\">\", title=\"</span> + mWindowAttributes.getTitle());</div><div class=\"line\">   &#125;</div><div class=\"line\">   mHandler.sendEmptyMessage(MSG_DIE);</div><div class=\"line\">   <span class=\"keyword\">return</span> <span class=\"keyword\">true</span>;</div><div class=\"line\">   &#125;</div></pre></td></tr></table></figure></p>\n<p>　　在die方法中只是做了简单的判断，如果是异步删除，那么就发送一个MSG_DIE的消息，ViewRootImpl中的Handler会处理此消息并调用doDie方法，如果是同步删除，那么就不发送消息直接调用doDie方法。在doDie内部会调用dispatchDetachedFromWindow方法，真正删除View的逻辑在dispatchDetachedFromWindow方法内部实现。dispatchDetachedFromWindow方法主要做四件事：</p>\n<ol>\n<li>垃圾回收相关的工作，比如清除数据和消息，移除回调等。</li>\n<li>通过Session的remove方法删除Window：mWindowSession.remove(mWindow)，这同样是一个IPC过程，最终会调用WindowManagerService的removeWindow方法。</li>\n<li>调用View的dispatchDetachedFromWindow方法，在内部会调用View的onDetachedFromWindow以及onDetachedFromWindowInternal()。</li>\n<li>调用WindowManagerGlobal的doRemoveView方法刷新数据，包括mRoots、mParams以及mDyingViews，需要将当前Window锁关联的这三类对象从列表中删除。<h4 id=\"Window的更新过程\"><a href=\"#Window的更新过程\" class=\"headerlink\" title=\"Window的更新过程\"></a>Window的更新过程</h4><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">updateViewLayout</span><span class=\"params\">(View view, ViewGroup.LayoutParams params)</span> </span>&#123;</div><div class=\"line\">       <span class=\"keyword\">if</span> (view == <span class=\"keyword\">null</span>) &#123;</div><div class=\"line\">           <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> IllegalArgumentException(<span class=\"string\">\"view must not be null\"</span>);</div><div class=\"line\">       &#125;</div><div class=\"line\">       <span class=\"keyword\">if</span> (!(params <span class=\"keyword\">instanceof</span> WindowManager.LayoutParams)) &#123;</div><div class=\"line\">           <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> IllegalArgumentException(<span class=\"string\">\"Params must be WindowManager.LayoutParams\"</span>);</div><div class=\"line\">       &#125;</div><div class=\"line\"></div><div class=\"line\">       <span class=\"keyword\">final</span> WindowManager.LayoutParams wparams = (WindowManager.LayoutParams)params;</div><div class=\"line\"></div><div class=\"line\">       view.setLayoutParams(wparams);</div><div class=\"line\"></div><div class=\"line\">       <span class=\"keyword\">synchronized</span> (mLock) &#123;</div><div class=\"line\">           <span class=\"keyword\">int</span> index = findViewLocked(view, <span class=\"keyword\">true</span>);</div><div class=\"line\">           ViewRootImpl root = mRoots.get(index);</div><div class=\"line\">           mParams.remove(index);</div><div class=\"line\">           mParams.add(index, wparams);</div><div class=\"line\">           root.setLayoutParams(wparams, <span class=\"keyword\">false</span>);</div><div class=\"line\">       &#125;</div><div class=\"line\">   &#125;</div></pre></td></tr></table></figure>\n</li>\n</ol>\n<p>首先它需要更新View的LayoutParams并替换掉老的LayoutParams，接着再更新ViewRootImpl中的layoutParams，这一步是通过ViewRootImpl的setLayoutParams方法来实现的。在ViewRootImpl中会通过scheduleTraversals方法来对View重新布局，包括测量、布局、重绘这三个过程，除了View本身的重绘以外，ViewRootImpl还会通过WindowSession开更新Window的视图，这个过程最终是由WindowManagerService的relayoutWindow()来具体实现，它同样是一个IPC的过程。</p>\n<hr>\n<p>以上</p>\n","excerpt":"<p>　　Window表示一个窗口的概念，在日常开发中直接接触WIndow的机会并不对，再试在某些特殊时候我们需要在桌面上显示一个类似悬浮窗的东西，那么这种效果就需要用到Window来实现。<br>　　Window只是个抽象类，它的具体实现是PhoneWindow。创建一个Window是很简单的事，只需要通过WindowManager即可完成，WindowManager是外界访问Window的入口，Window的具体实现位于WindowMangerService中，WindowMnager和WindowManager的交互是一个IPC过程，Android中所有的视图都是通过Window来呈现的，不管是Activity、Dialog还是Toast，它们的视图实际上都是附加在Window上的，因此Window实际是View的直接管理者。<br>","more":"</p>\n<h3 id=\"Window的内部机制\"><a href=\"#Window的内部机制\" class=\"headerlink\" title=\"Window的内部机制\"></a>Window的内部机制</h3><p>　　Window是一个抽象的概念，每一个Window都对应着一个View和一个ViewRootImpl，Window和View通过ViewRootImpl来建立联系，因此Window并不是实际存在的，它是以View的形式存在，。这点从WindowManager的定义也可以看出，它提供的三个接口方法addView,updateViewLayout以及removeView都是针对View，这说明View才是Window存在的实体。在实际使用中无法直接访问Window，对Window的访问必须通过WindowManger。</p>\n<h4 id=\"Window的添加过程\"><a href=\"#Window的添加过程\" class=\"headerlink\" title=\"Window的添加过程\"></a>Window的添加过程</h4><p>　　Window的添加过程需要通过WindowManager的addView来实现，WindowManager是一个接口，它的真正实现是WindowManagerImpl类，在WindowManagerImpl中Window的三大操作实现如下：<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">@Override</span></div><div class=\"line\">   <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">addView</span><span class=\"params\">(@NonNull View view, @NonNull ViewGroup.LayoutParams params)</span> </span>&#123;</div><div class=\"line\">       applyDefaultToken(params);</div><div class=\"line\">       mGlobal.addView(view, params, mContext.getDisplay(), mParentWindow);</div><div class=\"line\">   &#125;</div><div class=\"line\">   </div><div class=\"line\"><span class=\"meta\">@Override</span></div><div class=\"line\">   <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">updateViewLayout</span><span class=\"params\">(@NonNull View view, @NonNull ViewGroup.LayoutParams params)</span> </span>&#123;</div><div class=\"line\">       applyDefaultToken(params);</div><div class=\"line\">       mGlobal.updateViewLayout(view, params);</div><div class=\"line\">   &#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"meta\">@Override</span></div><div class=\"line\">   <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">removeView</span><span class=\"params\">(View view)</span> </span>&#123;</div><div class=\"line\">       mGlobal.removeView(view, <span class=\"keyword\">false</span>);</div><div class=\"line\">   &#125;</div><div class=\"line\"></div><div class=\"line\">   <span class=\"meta\">@Override</span></div><div class=\"line\">   <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">removeViewImmediate</span><span class=\"params\">(View view)</span> </span>&#123;</div><div class=\"line\">       mGlobal.removeView(view, <span class=\"keyword\">true</span>);</div><div class=\"line\">   &#125;</div></pre></td></tr></table></figure></p>\n<p>　　WindowManagerImpl并没有直接实现Window的三大操作，而是全部交给了WindowManagerGlobal来处理，WindowManagerGlobal以工厂的形式向外提供自己的实现，WindowManagerImpl这种工作模式是典型的桥接模式，将所有的操作全部委托给WindowManagerGlobal来实现。在WindowManagerGlobal的addView方法主要分为如下几步：</p>\n<ol>\n<li><strong>检查参数是否合法，如果是子Window，那么还需要调整一些布局参数。</strong></li>\n</ol>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">addView</span><span class=\"params\">(View view, ViewGroup.LayoutParams params,</div><div class=\"line\">           Display display, Window parentWindow)</span> </span>&#123;</div><div class=\"line\">       <span class=\"keyword\">if</span> (view == <span class=\"keyword\">null</span>) &#123;</div><div class=\"line\">           <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> IllegalArgumentException(<span class=\"string\">\"view must not be null\"</span>);</div><div class=\"line\">       &#125;</div><div class=\"line\">       <span class=\"keyword\">if</span> (display == <span class=\"keyword\">null</span>) &#123;</div><div class=\"line\">           <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> IllegalArgumentException(<span class=\"string\">\"display must not be null\"</span>);</div><div class=\"line\">       &#125;</div><div class=\"line\">       <span class=\"keyword\">if</span> (!(params <span class=\"keyword\">instanceof</span> WindowManager.LayoutParams)) &#123;</div><div class=\"line\">           <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> IllegalArgumentException(<span class=\"string\">\"Params must be WindowManager.LayoutParams\"</span>);</div><div class=\"line\">       &#125;</div><div class=\"line\"></div><div class=\"line\">       <span class=\"keyword\">final</span> WindowManager.LayoutParams wparams = (WindowManager.LayoutParams) params;</div><div class=\"line\">       <span class=\"keyword\">if</span> (parentWindow != <span class=\"keyword\">null</span>) &#123;</div><div class=\"line\">           parentWindow.adjustLayoutParamsForSubWindow(wparams);</div><div class=\"line\">       &#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">           <span class=\"comment\">// If there's no parent, then hardware acceleration for this view is</span></div><div class=\"line\">           <span class=\"comment\">// set from the application's hardware acceleration setting.</span></div><div class=\"line\">           <span class=\"keyword\">final</span> Context context = view.getContext();</div><div class=\"line\">           <span class=\"keyword\">if</span> (context != <span class=\"keyword\">null</span></div><div class=\"line\">                   &amp;&amp; (context.getApplicationInfo().flags</div><div class=\"line\">                           &amp; ApplicationInfo.FLAG_HARDWARE_ACCELERATED) != <span class=\"number\">0</span>) &#123;</div><div class=\"line\">               wparams.flags |= WindowManager.LayoutParams.FLAG_HARDWARE_ACCELERATED;</div><div class=\"line\">           &#125;</div><div class=\"line\">       &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<ol>\n<li><strong>创建ViewRootImpl并将View添加到列表中。</strong><br>在WindowManagerGlobal内部有如下几个列表比较重要：</li>\n</ol>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">private</span> <span class=\"keyword\">final</span> ArrayList&lt;View&gt; mViews = <span class=\"keyword\">new</span> ArrayList&lt;View&gt;();</div><div class=\"line\">   <span class=\"keyword\">private</span> <span class=\"keyword\">final</span> ArrayList&lt;ViewRootImpl&gt; mRoots = <span class=\"keyword\">new</span> ArrayList&lt;ViewRootImpl&gt;();</div><div class=\"line\">   <span class=\"keyword\">private</span> <span class=\"keyword\">final</span> ArrayList&lt;WindowManager.LayoutParams&gt; mParams =</div><div class=\"line\">           <span class=\"keyword\">new</span> ArrayList&lt;WindowManager.LayoutParams&gt;();</div><div class=\"line\">   <span class=\"keyword\">private</span> <span class=\"keyword\">final</span> ArraySet&lt;View&gt; mDyingViews = <span class=\"keyword\">new</span> ArraySet&lt;View&gt;();</div></pre></td></tr></table></figure>\n<p>　　在以上声明中，mView存储的是多有WIndow所对应的View,mRoots存储的是所有Window所对应的ViewRootImpl，mParams存储的是所有Window所对应的布局参数，而mDyingView则存储了那些正在被删除的View对象，或者说是那些已经调用removeView方法但是删除操作还未完成的Window对象，在addView中通过如下方式将Window的一系列对象添加到列表中：<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">root = <span class=\"keyword\">new</span> ViewRootImpl(view.getContext(), display);</div><div class=\"line\">   view.setLayoutParams(wparams);</div><div class=\"line\">   mViews.add(view);</div><div class=\"line\">   mRoots.add(root);</div><div class=\"line\">   mParams.add(wparams);</div></pre></td></tr></table></figure></p>\n<ol>\n<li><strong>通过ViewRootImpl来更新界面并完成Window的添加过程。</strong><br>这个过程由ViewRootImpl的setView方法来完成：<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// do this last because it fires off messages to start doing things</span></div><div class=\"line\">       <span class=\"keyword\">try</span> &#123;</div><div class=\"line\">           root.setView(view, wparams, panelParentView);</div><div class=\"line\">       &#125; <span class=\"keyword\">catch</span> (RuntimeException e) &#123;</div><div class=\"line\">           <span class=\"comment\">// BadTokenException or InvalidDisplayException, clean up.</span></div><div class=\"line\">           <span class=\"keyword\">synchronized</span> (mLock) &#123;</div><div class=\"line\">               <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> index = findViewLocked(view, <span class=\"keyword\">false</span>);</div><div class=\"line\">               <span class=\"keyword\">if</span> (index &gt;= <span class=\"number\">0</span>) &#123;</div><div class=\"line\">                   removeViewLocked(index, <span class=\"keyword\">true</span>);</div><div class=\"line\">               &#125;</div><div class=\"line\">           &#125;</div><div class=\"line\">           <span class=\"keyword\">throw</span> e;</div><div class=\"line\">       &#125;</div></pre></td></tr></table></figure>\n</li>\n</ol>\n<p>在setView内部会通过requestLayout来完成异步刷新请求。在下面的代码中，scheduleTraversals实际是View绘制的入口：<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">@Override</span></div><div class=\"line\">   <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">requestLayout</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">       <span class=\"keyword\">if</span> (!mHandlingLayoutInLayoutRequest) &#123;</div><div class=\"line\">           checkThread();</div><div class=\"line\">           mLayoutRequested = <span class=\"keyword\">true</span>;</div><div class=\"line\">           scheduleTraversals();</div><div class=\"line\">       &#125;</div><div class=\"line\">   &#125;</div></pre></td></tr></table></figure></p>\n<p>接着会通过WindowSession最终来完成Window的添加过程。</p>\n<h4 id=\"Window的删除过程\"><a href=\"#Window的删除过程\" class=\"headerlink\" title=\"Window的删除过程\"></a>Window的删除过程</h4><p>Window的删除过程和添加过程一样，都是先通过WindowManagerImpl后，再进一步通过WindowManagerGlobal来实现的，如下：<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">removeView</span><span class=\"params\">(View view, <span class=\"keyword\">boolean</span> immediate)</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">if</span> (view == <span class=\"keyword\">null</span>) &#123;</div><div class=\"line\">            <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> IllegalArgumentException(<span class=\"string\">\"view must not be null\"</span>);</div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\">        <span class=\"keyword\">synchronized</span> (mLock) &#123;</div><div class=\"line\">            <span class=\"keyword\">int</span> index = findViewLocked(view, <span class=\"keyword\">true</span>);</div><div class=\"line\">            View curView = mRoots.get(index).getView();</div><div class=\"line\">            removeViewLocked(index, immediate);</div><div class=\"line\">            <span class=\"keyword\">if</span> (curView == view) &#123;</div><div class=\"line\">                <span class=\"keyword\">return</span>;</div><div class=\"line\">            &#125;</div><div class=\"line\"></div><div class=\"line\">            <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> IllegalStateException(<span class=\"string\">\"Calling with view \"</span> + view</div><div class=\"line\">                    + <span class=\"string\">\" but the ViewAncestor is attached to \"</span> + curView);</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div></pre></td></tr></table></figure></p>\n<p>　　removeView的逻辑很清晰，首先通过findViewLocked来查找待删除的View的索引，这个查找过程就是建立的数据遍历，然后再通过调用removeViewLocked来做进一步的删除，如下：<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">removeViewLocked</span><span class=\"params\">(<span class=\"keyword\">int</span> index, <span class=\"keyword\">boolean</span> immediate)</span> </span>&#123;</div><div class=\"line\">        ViewRootImpl root = mRoots.get(index);</div><div class=\"line\">        View view = root.getView();</div><div class=\"line\"></div><div class=\"line\">        <span class=\"keyword\">if</span> (view != <span class=\"keyword\">null</span>) &#123;</div><div class=\"line\">            InputMethodManager imm = InputMethodManager.getInstance();</div><div class=\"line\">            <span class=\"keyword\">if</span> (imm != <span class=\"keyword\">null</span>) &#123;</div><div class=\"line\">                imm.windowDismissed(mViews.get(index).getWindowToken());</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;</div><div class=\"line\">        <span class=\"keyword\">boolean</span> deferred = root.die(immediate);</div><div class=\"line\">        <span class=\"keyword\">if</span> (view != <span class=\"keyword\">null</span>) &#123;</div><div class=\"line\">            view.assignParent(<span class=\"keyword\">null</span>);</div><div class=\"line\">            <span class=\"keyword\">if</span> (deferred) &#123;</div><div class=\"line\">                mDyingViews.add(view);</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div></pre></td></tr></table></figure></p>\n<p>　　removeViewLocked是通过ViewRootImpl来完成删除操作的，在WindowManager中提供了两种删除接口removeView和removeViewImmediate,它们分别表示异步删除和同步删除，一般不需要使用removeViewImmediate这个方法。这里主要说异步删除的情况：具体的删除操作由ViewRootImpl的die方法来完成，在异步删除的情况下，die方法只是发送了一个请求删除的消息后就立刻返回了，<strong>这个时候View并没有完成删除操作</strong>，所以最后会将其添加到mDyingView中。ViewRootImpl的die方法如下：<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">boolean</span> <span class=\"title\">die</span><span class=\"params\">(<span class=\"keyword\">boolean</span> immediate)</span> </span>&#123;</div><div class=\"line\">   <span class=\"comment\">// Make sure we do execute immediately if we are in the middle of a traversal or the damage</span></div><div class=\"line\">   <span class=\"comment\">// done by dispatchDetachedFromWindow will cause havoc on return.</span></div><div class=\"line\">   <span class=\"keyword\">if</span> (immediate &amp;&amp; !mIsInTraversal) &#123;</div><div class=\"line\">       doDie();</div><div class=\"line\">       <span class=\"keyword\">return</span> <span class=\"keyword\">false</span>;</div><div class=\"line\">   &#125;</div><div class=\"line\"></div><div class=\"line\">   <span class=\"keyword\">if</span> (!mIsDrawing) &#123;</div><div class=\"line\">       destroyHardwareRenderer();</div><div class=\"line\">   &#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">       Log.e(mTag, <span class=\"string\">\"Attempting to destroy the window while drawing!\\n\"</span> +</div><div class=\"line\">               <span class=\"string\">\"  window=\"</span> + <span class=\"keyword\">this</span> + <span class=\"string\">\", title=\"</span> + mWindowAttributes.getTitle());</div><div class=\"line\">   &#125;</div><div class=\"line\">   mHandler.sendEmptyMessage(MSG_DIE);</div><div class=\"line\">   <span class=\"keyword\">return</span> <span class=\"keyword\">true</span>;</div><div class=\"line\">   &#125;</div></pre></td></tr></table></figure></p>\n<p>　　在die方法中只是做了简单的判断，如果是异步删除，那么就发送一个MSG_DIE的消息，ViewRootImpl中的Handler会处理此消息并调用doDie方法，如果是同步删除，那么就不发送消息直接调用doDie方法。在doDie内部会调用dispatchDetachedFromWindow方法，真正删除View的逻辑在dispatchDetachedFromWindow方法内部实现。dispatchDetachedFromWindow方法主要做四件事：</p>\n<ol>\n<li>垃圾回收相关的工作，比如清除数据和消息，移除回调等。</li>\n<li>通过Session的remove方法删除Window：mWindowSession.remove(mWindow)，这同样是一个IPC过程，最终会调用WindowManagerService的removeWindow方法。</li>\n<li>调用View的dispatchDetachedFromWindow方法，在内部会调用View的onDetachedFromWindow以及onDetachedFromWindowInternal()。</li>\n<li>调用WindowManagerGlobal的doRemoveView方法刷新数据，包括mRoots、mParams以及mDyingViews，需要将当前Window锁关联的这三类对象从列表中删除。<h4 id=\"Window的更新过程\"><a href=\"#Window的更新过程\" class=\"headerlink\" title=\"Window的更新过程\"></a>Window的更新过程</h4><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">updateViewLayout</span><span class=\"params\">(View view, ViewGroup.LayoutParams params)</span> </span>&#123;</div><div class=\"line\">       <span class=\"keyword\">if</span> (view == <span class=\"keyword\">null</span>) &#123;</div><div class=\"line\">           <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> IllegalArgumentException(<span class=\"string\">\"view must not be null\"</span>);</div><div class=\"line\">       &#125;</div><div class=\"line\">       <span class=\"keyword\">if</span> (!(params <span class=\"keyword\">instanceof</span> WindowManager.LayoutParams)) &#123;</div><div class=\"line\">           <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> IllegalArgumentException(<span class=\"string\">\"Params must be WindowManager.LayoutParams\"</span>);</div><div class=\"line\">       &#125;</div><div class=\"line\"></div><div class=\"line\">       <span class=\"keyword\">final</span> WindowManager.LayoutParams wparams = (WindowManager.LayoutParams)params;</div><div class=\"line\"></div><div class=\"line\">       view.setLayoutParams(wparams);</div><div class=\"line\"></div><div class=\"line\">       <span class=\"keyword\">synchronized</span> (mLock) &#123;</div><div class=\"line\">           <span class=\"keyword\">int</span> index = findViewLocked(view, <span class=\"keyword\">true</span>);</div><div class=\"line\">           ViewRootImpl root = mRoots.get(index);</div><div class=\"line\">           mParams.remove(index);</div><div class=\"line\">           mParams.add(index, wparams);</div><div class=\"line\">           root.setLayoutParams(wparams, <span class=\"keyword\">false</span>);</div><div class=\"line\">       &#125;</div><div class=\"line\">   &#125;</div></pre></td></tr></table></figure>\n</li>\n</ol>\n<p>首先它需要更新View的LayoutParams并替换掉老的LayoutParams，接着再更新ViewRootImpl中的layoutParams，这一步是通过ViewRootImpl的setLayoutParams方法来实现的。在ViewRootImpl中会通过scheduleTraversals方法来对View重新布局，包括测量、布局、重绘这三个过程，除了View本身的重绘以外，ViewRootImpl还会通过WindowSession开更新Window的视图，这个过程最终是由WindowManagerService的relayoutWindow()来具体实现，它同样是一个IPC的过程。</p>\n<hr>\n<p>以上</p>"},{"title":"View的滑动","date":"2017-03-15T03:01:46.000Z","_content":"　　View的位置主要由它的四个顶点来决定，分别对应于View的四个属性：top,left,right,bottom,其中top是左上角的纵坐标，left是左上角的横坐标，right是右下角的横坐标，bottom是右下角的纵坐标。需要注意的是，这些坐标都是相当于View的父容器来说的，因此它是一种相对坐标，View的坐标和父容器的关系如下所示：\n![相对位置关系](/image/location.png)\n> width = right - left\nheight = bottom - top\nleft = getLeft()\nright = getRight()\ntop = getTop()\nbottom = getBottom()\n从Android3.0 开始，View增加了额外的几个参数：x,y,trabslationX和translationY。其中x和y是View左上角的坐标，而translationX和translationY是View左上角相对于父容器的偏移量。这几个参数也是相对于父容器的坐标，并且translationX和translationY的默认值是0，和View的四个基本的位置参数一样，View也为他们提供了get/set方法，这几个参数的换算关系如下\n`x = left + translationX`\n需要注意的是，View在平移过程中，top和left表示的是原始左上角的位置信息，其值并不会发生改变，此时发生改变的是x,y,translationX和translationY。\n\n<!--more-->\n#### 一 VelocityTracker 和 GestureDetector\n速度最终，用于追踪手指在滑动过程中的速度，包括水平和竖直方向的速度。使用方法在View的onTouchEvent方法中追踪当前单击事件的速度：\n``` java\n        VelocityTracker velocityTracker = VelocityTracker.obtain();\n        velocityTracker.addMovement(event);\n```\n接着，当我们想知道当前的滑动速度时，这个时候可以采用如下方式来获得当前速度：\n``` java\n        velocityTracker.computeCurrentVelocity(1000);\n        float xVelocity = velocityTracker.getXVelocity();\n        float yVelocity = velocityTracker.getYVelocity();\n```\n在这一步中有两点需要注意\n1. 获取速度之前必须先计算速度，即getXVelocity()和getYVelocity()之前必须调用computeCurrentVelocity(1000)\n2. 这里的速度时指一段时间内手指所划过的像素数，速度可以是负数，当手指在水平方向从左向右滑动时，速度为正，反之为负数。\n最后，当不在使用它的时候，需要调用clear方法来重置并回收内存:\n``` java\n        velocityTracker.clear();\n        velocityTracker.recycle();\n```\n----\n手势检测，用于辅助检测用户的单击、滑动、长按、双击等行为。\n首先创建GestureDetector的对象，接着接管View的onTouchEvent方法。做完下面两部，就可以有选择的实现接口中的方法了\n``` java\n\t\tGestureDetector gestureDetector = new GestureDetector(this,this);\n        gestureDetector.setIsLongpressEnabled(false);\n        return gestureDetector.onTouchEvent(event);\n```\n其中`gestureDetector.setIsLongpressEnabled(false)`是为了解决长按之后无法拖动的现象。\n#### 二 使用ScrollTo/ScrollBy\n\n调用方式 `View.scrollTo(int x, int y)`,`View.scrollBy(int x, int y)`\n方法源码：\n``` java\n/**\n     * Set the scrolled position of your view. This will cause a call to\n     * {@link #onScrollChanged(int, int, int, int)} and the view will be\n     * invalidated.\n     * @param x the x position to scroll to\n     * @param y the y position to scroll to\n     */\n    public void scrollTo(int x, int y) {\n        if (mScrollX != x || mScrollY != y) {\n            int oldX = mScrollX;\n            int oldY = mScrollY;\n            mScrollX = x;\n            mScrollY = y;\n            invalidateParentCaches();\n            onScrollChanged(mScrollX, mScrollY, oldX, oldY);\n            if (!awakenScrollBars()) {\n                postInvalidateOnAnimation();\n            }\n        }\n    }\n\n    /**\n     * Move the scrolled position of your view. This will cause a call to\n     * {@link #onScrollChanged(int, int, int, int)} and the view will be\n     * invalidated.\n     * @param x the amount of pixels to scroll by horizontally\n     * @param y the amount of pixels to scroll by vertically\n     */\n    public void scrollBy(int x, int y) {\n        scrollTo(mScrollX + x, mScrollY + y);\n    }\n```\n　　从源码中可以看出，`scrollBy`实际上也是调用`scrollBy`的方法。需要注意的是在`View`的滑动过程中，`mScrollX`和`mScrollY`的改变规则：\n在滑动过程中，`mScrollX`的值总是等于View左边缘和View内容左边缘在水平方向的距离，而mScrollY的值总是等于View上边缘和View内容上边缘在竖直方向的距离。其中`mScrollX`和`mScrollY`的单位是像素，并且当View左边缘在View内容左边缘的右边时，`mScrollX`为正值，反之为负值；当View上边缘在View内容上边缘的下边时，`mScrollY`为正值，反之为负值。换句话说：从左向右滑动，`mScrollX`为负值，反之为正值；如果从上往下滑动，`mScrollY`为负值，反之为正值。\n**意思就是说ScrollTo/ScrollBy只能滑动View的内容而不能滑动View本身，比如，只能滑动TextView的文字，而不能滑动TextView控件本身**\n#### 三 使用动画\n这个没什么好介绍的，想要兼容3.0以下的属性动画，建议使用nineoldandroids来实现\n#### 四 改变布局参数\n改变布局参数，也就是改变·LayoutParams·\n#### 五 使用Scroller进行平滑移动\n自定义一个控件，添加成员变量·Scroller·，如下：\n```java\npublic class ScrollerTextView extends TextView {\n\n    private Scroller mScroller;\n\n    public ScrollerTextView(Context context) {\n        super(context);\n        mScroller = new Scroller(context);\n    }\n\n    public ScrollerTextView(Context context, AttributeSet attrs) {\n        super(context, attrs);\n        mScroller = new Scroller(context);\n    }\n\n    public ScrollerTextView(Context context, AttributeSet attrs, int defStyleAttr) {\n        super(context, attrs, defStyleAttr);\n        mScroller = new Scroller(context);\n    }\n\n    public void smoothScrollBy(int dx,int dy){\n        mScroller.startScroll(mScroller.getFinalX(),mScroller.getFinalY(),dx,dy,2000);\n        invalidate();\n    }\n\n    public void smoothScrollTo(int fx, int fy){\n        int dx = fx - mScroller.getFinalX();\n        int dy = fy - mScroller.getFinalY();\n        smoothScrollBy(dx,dy);\n    }\n\n    @Override\n    public void computeScroll() {\n       if(mScroller.computeScrollOffset()){\n           scrollTo(mScroller.getCurrX(), mScroller.getCurrY());\n           postInvalidate();\n       }\n        super.computeScroll();\n    }\n}\n```\n其实`Scroller`也是通过`ScrollTO/ScrollBy`实现的，同样只能滑动内容，不能滑动本身。\nPS：\n在调用`startScroll`时，并没有让`View`进行滑动。而是在调用`invalidate()`进行重绘的时候，会去调用`computeScroll`方法，但是`computeScroll`在`View`只是个空实现，因此需要我们自己去实现。在`computeScroll`中进行平移。也就是说当View重绘后在`draw`方法中调用`computeScroll`,而`computeScroll`又会去向`Scroller`获取当前的`scrollX`和`scrollY`,然后通过`scrollTo`方法实现滑动，接着又调用`postInvalidate()`方法来进行第二次重绘，这一次重绘过程和第一次一样，还是会去调用`computeScroll()`方法，如此反复，直到整个滑动过程结束。\n\n----\n以上\n","source":"_posts/View的滑动.md","raw":"---\ntitle: View的滑动\ndate: 2017-03-15 11:01:46\ntags: [Android]\n---\n　　View的位置主要由它的四个顶点来决定，分别对应于View的四个属性：top,left,right,bottom,其中top是左上角的纵坐标，left是左上角的横坐标，right是右下角的横坐标，bottom是右下角的纵坐标。需要注意的是，这些坐标都是相当于View的父容器来说的，因此它是一种相对坐标，View的坐标和父容器的关系如下所示：\n![相对位置关系](/image/location.png)\n> width = right - left\nheight = bottom - top\nleft = getLeft()\nright = getRight()\ntop = getTop()\nbottom = getBottom()\n从Android3.0 开始，View增加了额外的几个参数：x,y,trabslationX和translationY。其中x和y是View左上角的坐标，而translationX和translationY是View左上角相对于父容器的偏移量。这几个参数也是相对于父容器的坐标，并且translationX和translationY的默认值是0，和View的四个基本的位置参数一样，View也为他们提供了get/set方法，这几个参数的换算关系如下\n`x = left + translationX`\n需要注意的是，View在平移过程中，top和left表示的是原始左上角的位置信息，其值并不会发生改变，此时发生改变的是x,y,translationX和translationY。\n\n<!--more-->\n#### 一 VelocityTracker 和 GestureDetector\n速度最终，用于追踪手指在滑动过程中的速度，包括水平和竖直方向的速度。使用方法在View的onTouchEvent方法中追踪当前单击事件的速度：\n``` java\n        VelocityTracker velocityTracker = VelocityTracker.obtain();\n        velocityTracker.addMovement(event);\n```\n接着，当我们想知道当前的滑动速度时，这个时候可以采用如下方式来获得当前速度：\n``` java\n        velocityTracker.computeCurrentVelocity(1000);\n        float xVelocity = velocityTracker.getXVelocity();\n        float yVelocity = velocityTracker.getYVelocity();\n```\n在这一步中有两点需要注意\n1. 获取速度之前必须先计算速度，即getXVelocity()和getYVelocity()之前必须调用computeCurrentVelocity(1000)\n2. 这里的速度时指一段时间内手指所划过的像素数，速度可以是负数，当手指在水平方向从左向右滑动时，速度为正，反之为负数。\n最后，当不在使用它的时候，需要调用clear方法来重置并回收内存:\n``` java\n        velocityTracker.clear();\n        velocityTracker.recycle();\n```\n----\n手势检测，用于辅助检测用户的单击、滑动、长按、双击等行为。\n首先创建GestureDetector的对象，接着接管View的onTouchEvent方法。做完下面两部，就可以有选择的实现接口中的方法了\n``` java\n\t\tGestureDetector gestureDetector = new GestureDetector(this,this);\n        gestureDetector.setIsLongpressEnabled(false);\n        return gestureDetector.onTouchEvent(event);\n```\n其中`gestureDetector.setIsLongpressEnabled(false)`是为了解决长按之后无法拖动的现象。\n#### 二 使用ScrollTo/ScrollBy\n\n调用方式 `View.scrollTo(int x, int y)`,`View.scrollBy(int x, int y)`\n方法源码：\n``` java\n/**\n     * Set the scrolled position of your view. This will cause a call to\n     * {@link #onScrollChanged(int, int, int, int)} and the view will be\n     * invalidated.\n     * @param x the x position to scroll to\n     * @param y the y position to scroll to\n     */\n    public void scrollTo(int x, int y) {\n        if (mScrollX != x || mScrollY != y) {\n            int oldX = mScrollX;\n            int oldY = mScrollY;\n            mScrollX = x;\n            mScrollY = y;\n            invalidateParentCaches();\n            onScrollChanged(mScrollX, mScrollY, oldX, oldY);\n            if (!awakenScrollBars()) {\n                postInvalidateOnAnimation();\n            }\n        }\n    }\n\n    /**\n     * Move the scrolled position of your view. This will cause a call to\n     * {@link #onScrollChanged(int, int, int, int)} and the view will be\n     * invalidated.\n     * @param x the amount of pixels to scroll by horizontally\n     * @param y the amount of pixels to scroll by vertically\n     */\n    public void scrollBy(int x, int y) {\n        scrollTo(mScrollX + x, mScrollY + y);\n    }\n```\n　　从源码中可以看出，`scrollBy`实际上也是调用`scrollBy`的方法。需要注意的是在`View`的滑动过程中，`mScrollX`和`mScrollY`的改变规则：\n在滑动过程中，`mScrollX`的值总是等于View左边缘和View内容左边缘在水平方向的距离，而mScrollY的值总是等于View上边缘和View内容上边缘在竖直方向的距离。其中`mScrollX`和`mScrollY`的单位是像素，并且当View左边缘在View内容左边缘的右边时，`mScrollX`为正值，反之为负值；当View上边缘在View内容上边缘的下边时，`mScrollY`为正值，反之为负值。换句话说：从左向右滑动，`mScrollX`为负值，反之为正值；如果从上往下滑动，`mScrollY`为负值，反之为正值。\n**意思就是说ScrollTo/ScrollBy只能滑动View的内容而不能滑动View本身，比如，只能滑动TextView的文字，而不能滑动TextView控件本身**\n#### 三 使用动画\n这个没什么好介绍的，想要兼容3.0以下的属性动画，建议使用nineoldandroids来实现\n#### 四 改变布局参数\n改变布局参数，也就是改变·LayoutParams·\n#### 五 使用Scroller进行平滑移动\n自定义一个控件，添加成员变量·Scroller·，如下：\n```java\npublic class ScrollerTextView extends TextView {\n\n    private Scroller mScroller;\n\n    public ScrollerTextView(Context context) {\n        super(context);\n        mScroller = new Scroller(context);\n    }\n\n    public ScrollerTextView(Context context, AttributeSet attrs) {\n        super(context, attrs);\n        mScroller = new Scroller(context);\n    }\n\n    public ScrollerTextView(Context context, AttributeSet attrs, int defStyleAttr) {\n        super(context, attrs, defStyleAttr);\n        mScroller = new Scroller(context);\n    }\n\n    public void smoothScrollBy(int dx,int dy){\n        mScroller.startScroll(mScroller.getFinalX(),mScroller.getFinalY(),dx,dy,2000);\n        invalidate();\n    }\n\n    public void smoothScrollTo(int fx, int fy){\n        int dx = fx - mScroller.getFinalX();\n        int dy = fy - mScroller.getFinalY();\n        smoothScrollBy(dx,dy);\n    }\n\n    @Override\n    public void computeScroll() {\n       if(mScroller.computeScrollOffset()){\n           scrollTo(mScroller.getCurrX(), mScroller.getCurrY());\n           postInvalidate();\n       }\n        super.computeScroll();\n    }\n}\n```\n其实`Scroller`也是通过`ScrollTO/ScrollBy`实现的，同样只能滑动内容，不能滑动本身。\nPS：\n在调用`startScroll`时，并没有让`View`进行滑动。而是在调用`invalidate()`进行重绘的时候，会去调用`computeScroll`方法，但是`computeScroll`在`View`只是个空实现，因此需要我们自己去实现。在`computeScroll`中进行平移。也就是说当View重绘后在`draw`方法中调用`computeScroll`,而`computeScroll`又会去向`Scroller`获取当前的`scrollX`和`scrollY`,然后通过`scrollTo`方法实现滑动，接着又调用`postInvalidate()`方法来进行第二次重绘，这一次重绘过程和第一次一样，还是会去调用`computeScroll()`方法，如此反复，直到整个滑动过程结束。\n\n----\n以上\n","slug":"View的滑动","published":1,"updated":"2017-12-30T13:13:07.226Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjbvyt3ut000oscdgflfx6ixj","content":"<p>　　View的位置主要由它的四个顶点来决定，分别对应于View的四个属性：top,left,right,bottom,其中top是左上角的纵坐标，left是左上角的横坐标，right是右下角的横坐标，bottom是右下角的纵坐标。需要注意的是，这些坐标都是相当于View的父容器来说的，因此它是一种相对坐标，View的坐标和父容器的关系如下所示：<br><img src=\"/image/location.png\" alt=\"相对位置关系\"></p>\n<blockquote>\n<p>width = right - left<br>height = bottom - top<br>left = getLeft()<br>right = getRight()<br>top = getTop()<br>bottom = getBottom()<br>从Android3.0 开始，View增加了额外的几个参数：x,y,trabslationX和translationY。其中x和y是View左上角的坐标，而translationX和translationY是View左上角相对于父容器的偏移量。这几个参数也是相对于父容器的坐标，并且translationX和translationY的默认值是0，和View的四个基本的位置参数一样，View也为他们提供了get/set方法，这几个参数的换算关系如下<br><code>x = left + translationX</code><br>需要注意的是，View在平移过程中，top和left表示的是原始左上角的位置信息，其值并不会发生改变，此时发生改变的是x,y,translationX和translationY。</p>\n</blockquote>\n<a id=\"more\"></a>\n<h4 id=\"一-VelocityTracker-和-GestureDetector\"><a href=\"#一-VelocityTracker-和-GestureDetector\" class=\"headerlink\" title=\"一 VelocityTracker 和 GestureDetector\"></a>一 VelocityTracker 和 GestureDetector</h4><p>速度最终，用于追踪手指在滑动过程中的速度，包括水平和竖直方向的速度。使用方法在View的onTouchEvent方法中追踪当前单击事件的速度：<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">VelocityTracker velocityTracker = VelocityTracker.obtain();</div><div class=\"line\">velocityTracker.addMovement(event);</div></pre></td></tr></table></figure></p>\n<p>接着，当我们想知道当前的滑动速度时，这个时候可以采用如下方式来获得当前速度：<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">velocityTracker.computeCurrentVelocity(<span class=\"number\">1000</span>);</div><div class=\"line\"><span class=\"keyword\">float</span> xVelocity = velocityTracker.getXVelocity();</div><div class=\"line\"><span class=\"keyword\">float</span> yVelocity = velocityTracker.getYVelocity();</div></pre></td></tr></table></figure></p>\n<p>在这一步中有两点需要注意</p>\n<ol>\n<li>获取速度之前必须先计算速度，即getXVelocity()和getYVelocity()之前必须调用computeCurrentVelocity(1000)</li>\n<li>这里的速度时指一段时间内手指所划过的像素数，速度可以是负数，当手指在水平方向从左向右滑动时，速度为正，反之为负数。<br>最后，当不在使用它的时候，需要调用clear方法来重置并回收内存:<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">velocityTracker.clear();</div><div class=\"line\">velocityTracker.recycle();</div></pre></td></tr></table></figure>\n</li>\n</ol>\n<hr>\n<p>手势检测，用于辅助检测用户的单击、滑动、长按、双击等行为。<br>首先创建GestureDetector的对象，接着接管View的onTouchEvent方法。做完下面两部，就可以有选择的实现接口中的方法了<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">GestureDetector gestureDetector = <span class=\"keyword\">new</span> GestureDetector(<span class=\"keyword\">this</span>,<span class=\"keyword\">this</span>);</div><div class=\"line\">      gestureDetector.setIsLongpressEnabled(<span class=\"keyword\">false</span>);</div><div class=\"line\">      <span class=\"keyword\">return</span> gestureDetector.onTouchEvent(event);</div></pre></td></tr></table></figure></p>\n<p>其中<code>gestureDetector.setIsLongpressEnabled(false)</code>是为了解决长按之后无法拖动的现象。</p>\n<h4 id=\"二-使用ScrollTo-ScrollBy\"><a href=\"#二-使用ScrollTo-ScrollBy\" class=\"headerlink\" title=\"二 使用ScrollTo/ScrollBy\"></a>二 使用ScrollTo/ScrollBy</h4><p>调用方式 <code>View.scrollTo(int x, int y)</code>,<code>View.scrollBy(int x, int y)</code><br>方法源码：<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">/**</span></div><div class=\"line\">     * Set the scrolled position of your view. This will cause a call to</div><div class=\"line\">     * &#123;<span class=\"doctag\">@link</span> #onScrollChanged(int, int, int, int)&#125; and the view will be</div><div class=\"line\">     * invalidated.</div><div class=\"line\">     * <span class=\"doctag\">@param</span> x the x position to scroll to</div><div class=\"line\">     * <span class=\"doctag\">@param</span> y the y position to scroll to</div><div class=\"line\">     */</div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">scrollTo</span><span class=\"params\">(<span class=\"keyword\">int</span> x, <span class=\"keyword\">int</span> y)</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">if</span> (mScrollX != x || mScrollY != y) &#123;</div><div class=\"line\">            <span class=\"keyword\">int</span> oldX = mScrollX;</div><div class=\"line\">            <span class=\"keyword\">int</span> oldY = mScrollY;</div><div class=\"line\">            mScrollX = x;</div><div class=\"line\">            mScrollY = y;</div><div class=\"line\">            invalidateParentCaches();</div><div class=\"line\">            onScrollChanged(mScrollX, mScrollY, oldX, oldY);</div><div class=\"line\">            <span class=\"keyword\">if</span> (!awakenScrollBars()) &#123;</div><div class=\"line\">                postInvalidateOnAnimation();</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">/**</span></div><div class=\"line\">     * Move the scrolled position of your view. This will cause a call to</div><div class=\"line\">     * &#123;<span class=\"doctag\">@link</span> #onScrollChanged(int, int, int, int)&#125; and the view will be</div><div class=\"line\">     * invalidated.</div><div class=\"line\">     * <span class=\"doctag\">@param</span> x the amount of pixels to scroll by horizontally</div><div class=\"line\">     * <span class=\"doctag\">@param</span> y the amount of pixels to scroll by vertically</div><div class=\"line\">     */</div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">scrollBy</span><span class=\"params\">(<span class=\"keyword\">int</span> x, <span class=\"keyword\">int</span> y)</span> </span>&#123;</div><div class=\"line\">        scrollTo(mScrollX + x, mScrollY + y);</div><div class=\"line\">    &#125;</div></pre></td></tr></table></figure></p>\n<p>　　从源码中可以看出，<code>scrollBy</code>实际上也是调用<code>scrollBy</code>的方法。需要注意的是在<code>View</code>的滑动过程中，<code>mScrollX</code>和<code>mScrollY</code>的改变规则：<br>在滑动过程中，<code>mScrollX</code>的值总是等于View左边缘和View内容左边缘在水平方向的距离，而mScrollY的值总是等于View上边缘和View内容上边缘在竖直方向的距离。其中<code>mScrollX</code>和<code>mScrollY</code>的单位是像素，并且当View左边缘在View内容左边缘的右边时，<code>mScrollX</code>为正值，反之为负值；当View上边缘在View内容上边缘的下边时，<code>mScrollY</code>为正值，反之为负值。换句话说：从左向右滑动，<code>mScrollX</code>为负值，反之为正值；如果从上往下滑动，<code>mScrollY</code>为负值，反之为正值。<br><strong>意思就是说ScrollTo/ScrollBy只能滑动View的内容而不能滑动View本身，比如，只能滑动TextView的文字，而不能滑动TextView控件本身</strong></p>\n<h4 id=\"三-使用动画\"><a href=\"#三-使用动画\" class=\"headerlink\" title=\"三 使用动画\"></a>三 使用动画</h4><p>这个没什么好介绍的，想要兼容3.0以下的属性动画，建议使用nineoldandroids来实现</p>\n<h4 id=\"四-改变布局参数\"><a href=\"#四-改变布局参数\" class=\"headerlink\" title=\"四 改变布局参数\"></a>四 改变布局参数</h4><p>改变布局参数，也就是改变·LayoutParams·</p>\n<h4 id=\"五-使用Scroller进行平滑移动\"><a href=\"#五-使用Scroller进行平滑移动\" class=\"headerlink\" title=\"五 使用Scroller进行平滑移动\"></a>五 使用Scroller进行平滑移动</h4><p>自定义一个控件，添加成员变量·Scroller·，如下：<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ScrollerTextView</span> <span class=\"keyword\">extends</span> <span class=\"title\">TextView</span> </span>&#123;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">private</span> Scroller mScroller;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">ScrollerTextView</span><span class=\"params\">(Context context)</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">super</span>(context);</div><div class=\"line\">        mScroller = <span class=\"keyword\">new</span> Scroller(context);</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">ScrollerTextView</span><span class=\"params\">(Context context, AttributeSet attrs)</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">super</span>(context, attrs);</div><div class=\"line\">        mScroller = <span class=\"keyword\">new</span> Scroller(context);</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">ScrollerTextView</span><span class=\"params\">(Context context, AttributeSet attrs, <span class=\"keyword\">int</span> defStyleAttr)</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">super</span>(context, attrs, defStyleAttr);</div><div class=\"line\">        mScroller = <span class=\"keyword\">new</span> Scroller(context);</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">smoothScrollBy</span><span class=\"params\">(<span class=\"keyword\">int</span> dx,<span class=\"keyword\">int</span> dy)</span></span>&#123;</div><div class=\"line\">        mScroller.startScroll(mScroller.getFinalX(),mScroller.getFinalY(),dx,dy,<span class=\"number\">2000</span>);</div><div class=\"line\">        invalidate();</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">smoothScrollTo</span><span class=\"params\">(<span class=\"keyword\">int</span> fx, <span class=\"keyword\">int</span> fy)</span></span>&#123;</div><div class=\"line\">        <span class=\"keyword\">int</span> dx = fx - mScroller.getFinalX();</div><div class=\"line\">        <span class=\"keyword\">int</span> dy = fy - mScroller.getFinalY();</div><div class=\"line\">        smoothScrollBy(dx,dy);</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"meta\">@Override</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">computeScroll</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">       <span class=\"keyword\">if</span>(mScroller.computeScrollOffset())&#123;</div><div class=\"line\">           scrollTo(mScroller.getCurrX(), mScroller.getCurrY());</div><div class=\"line\">           postInvalidate();</div><div class=\"line\">       &#125;</div><div class=\"line\">        <span class=\"keyword\">super</span>.computeScroll();</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>其实<code>Scroller</code>也是通过<code>ScrollTO/ScrollBy</code>实现的，同样只能滑动内容，不能滑动本身。<br>PS：<br>在调用<code>startScroll</code>时，并没有让<code>View</code>进行滑动。而是在调用<code>invalidate()</code>进行重绘的时候，会去调用<code>computeScroll</code>方法，但是<code>computeScroll</code>在<code>View</code>只是个空实现，因此需要我们自己去实现。在<code>computeScroll</code>中进行平移。也就是说当View重绘后在<code>draw</code>方法中调用<code>computeScroll</code>,而<code>computeScroll</code>又会去向<code>Scroller</code>获取当前的<code>scrollX</code>和<code>scrollY</code>,然后通过<code>scrollTo</code>方法实现滑动，接着又调用<code>postInvalidate()</code>方法来进行第二次重绘，这一次重绘过程和第一次一样，还是会去调用<code>computeScroll()</code>方法，如此反复，直到整个滑动过程结束。</p>\n<hr>\n<p>以上</p>\n","excerpt":"<p>　　View的位置主要由它的四个顶点来决定，分别对应于View的四个属性：top,left,right,bottom,其中top是左上角的纵坐标，left是左上角的横坐标，right是右下角的横坐标，bottom是右下角的纵坐标。需要注意的是，这些坐标都是相当于View的父容器来说的，因此它是一种相对坐标，View的坐标和父容器的关系如下所示：<br><img src=\"/image/location.png\" alt=\"相对位置关系\"></p>\n<blockquote>\n<p>width = right - left<br>height = bottom - top<br>left = getLeft()<br>right = getRight()<br>top = getTop()<br>bottom = getBottom()<br>从Android3.0 开始，View增加了额外的几个参数：x,y,trabslationX和translationY。其中x和y是View左上角的坐标，而translationX和translationY是View左上角相对于父容器的偏移量。这几个参数也是相对于父容器的坐标，并且translationX和translationY的默认值是0，和View的四个基本的位置参数一样，View也为他们提供了get/set方法，这几个参数的换算关系如下<br><code>x = left + translationX</code><br>需要注意的是，View在平移过程中，top和left表示的是原始左上角的位置信息，其值并不会发生改变，此时发生改变的是x,y,translationX和translationY。</p>\n</blockquote>","more":"<h4 id=\"一-VelocityTracker-和-GestureDetector\"><a href=\"#一-VelocityTracker-和-GestureDetector\" class=\"headerlink\" title=\"一 VelocityTracker 和 GestureDetector\"></a>一 VelocityTracker 和 GestureDetector</h4><p>速度最终，用于追踪手指在滑动过程中的速度，包括水平和竖直方向的速度。使用方法在View的onTouchEvent方法中追踪当前单击事件的速度：<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">VelocityTracker velocityTracker = VelocityTracker.obtain();</div><div class=\"line\">velocityTracker.addMovement(event);</div></pre></td></tr></table></figure></p>\n<p>接着，当我们想知道当前的滑动速度时，这个时候可以采用如下方式来获得当前速度：<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">velocityTracker.computeCurrentVelocity(<span class=\"number\">1000</span>);</div><div class=\"line\"><span class=\"keyword\">float</span> xVelocity = velocityTracker.getXVelocity();</div><div class=\"line\"><span class=\"keyword\">float</span> yVelocity = velocityTracker.getYVelocity();</div></pre></td></tr></table></figure></p>\n<p>在这一步中有两点需要注意</p>\n<ol>\n<li>获取速度之前必须先计算速度，即getXVelocity()和getYVelocity()之前必须调用computeCurrentVelocity(1000)</li>\n<li>这里的速度时指一段时间内手指所划过的像素数，速度可以是负数，当手指在水平方向从左向右滑动时，速度为正，反之为负数。<br>最后，当不在使用它的时候，需要调用clear方法来重置并回收内存:<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">velocityTracker.clear();</div><div class=\"line\">velocityTracker.recycle();</div></pre></td></tr></table></figure>\n</li>\n</ol>\n<hr>\n<p>手势检测，用于辅助检测用户的单击、滑动、长按、双击等行为。<br>首先创建GestureDetector的对象，接着接管View的onTouchEvent方法。做完下面两部，就可以有选择的实现接口中的方法了<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">GestureDetector gestureDetector = <span class=\"keyword\">new</span> GestureDetector(<span class=\"keyword\">this</span>,<span class=\"keyword\">this</span>);</div><div class=\"line\">      gestureDetector.setIsLongpressEnabled(<span class=\"keyword\">false</span>);</div><div class=\"line\">      <span class=\"keyword\">return</span> gestureDetector.onTouchEvent(event);</div></pre></td></tr></table></figure></p>\n<p>其中<code>gestureDetector.setIsLongpressEnabled(false)</code>是为了解决长按之后无法拖动的现象。</p>\n<h4 id=\"二-使用ScrollTo-ScrollBy\"><a href=\"#二-使用ScrollTo-ScrollBy\" class=\"headerlink\" title=\"二 使用ScrollTo/ScrollBy\"></a>二 使用ScrollTo/ScrollBy</h4><p>调用方式 <code>View.scrollTo(int x, int y)</code>,<code>View.scrollBy(int x, int y)</code><br>方法源码：<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">/**</div><div class=\"line\">     * Set the scrolled position of your view. This will cause a call to</div><div class=\"line\">     * &#123;<span class=\"doctag\">@link</span> #onScrollChanged(int, int, int, int)&#125; and the view will be</div><div class=\"line\">     * invalidated.</div><div class=\"line\">     * <span class=\"doctag\">@param</span> x the x position to scroll to</div><div class=\"line\">     * <span class=\"doctag\">@param</span> y the y position to scroll to</div><div class=\"line\">     */</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">scrollTo</span><span class=\"params\">(<span class=\"keyword\">int</span> x, <span class=\"keyword\">int</span> y)</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">if</span> (mScrollX != x || mScrollY != y) &#123;</div><div class=\"line\">            <span class=\"keyword\">int</span> oldX = mScrollX;</div><div class=\"line\">            <span class=\"keyword\">int</span> oldY = mScrollY;</div><div class=\"line\">            mScrollX = x;</div><div class=\"line\">            mScrollY = y;</div><div class=\"line\">            invalidateParentCaches();</div><div class=\"line\">            onScrollChanged(mScrollX, mScrollY, oldX, oldY);</div><div class=\"line\">            <span class=\"keyword\">if</span> (!awakenScrollBars()) &#123;</div><div class=\"line\">                postInvalidateOnAnimation();</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">/**</div><div class=\"line\">     * Move the scrolled position of your view. This will cause a call to</div><div class=\"line\">     * &#123;<span class=\"doctag\">@link</span> #onScrollChanged(int, int, int, int)&#125; and the view will be</div><div class=\"line\">     * invalidated.</div><div class=\"line\">     * <span class=\"doctag\">@param</span> x the amount of pixels to scroll by horizontally</div><div class=\"line\">     * <span class=\"doctag\">@param</span> y the amount of pixels to scroll by vertically</div><div class=\"line\">     */</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">scrollBy</span><span class=\"params\">(<span class=\"keyword\">int</span> x, <span class=\"keyword\">int</span> y)</span> </span>&#123;</div><div class=\"line\">        scrollTo(mScrollX + x, mScrollY + y);</div><div class=\"line\">    &#125;</div></pre></td></tr></table></figure></p>\n<p>　　从源码中可以看出，<code>scrollBy</code>实际上也是调用<code>scrollBy</code>的方法。需要注意的是在<code>View</code>的滑动过程中，<code>mScrollX</code>和<code>mScrollY</code>的改变规则：<br>在滑动过程中，<code>mScrollX</code>的值总是等于View左边缘和View内容左边缘在水平方向的距离，而mScrollY的值总是等于View上边缘和View内容上边缘在竖直方向的距离。其中<code>mScrollX</code>和<code>mScrollY</code>的单位是像素，并且当View左边缘在View内容左边缘的右边时，<code>mScrollX</code>为正值，反之为负值；当View上边缘在View内容上边缘的下边时，<code>mScrollY</code>为正值，反之为负值。换句话说：从左向右滑动，<code>mScrollX</code>为负值，反之为正值；如果从上往下滑动，<code>mScrollY</code>为负值，反之为正值。<br><strong>意思就是说ScrollTo/ScrollBy只能滑动View的内容而不能滑动View本身，比如，只能滑动TextView的文字，而不能滑动TextView控件本身</strong></p>\n<h4 id=\"三-使用动画\"><a href=\"#三-使用动画\" class=\"headerlink\" title=\"三 使用动画\"></a>三 使用动画</h4><p>这个没什么好介绍的，想要兼容3.0以下的属性动画，建议使用nineoldandroids来实现</p>\n<h4 id=\"四-改变布局参数\"><a href=\"#四-改变布局参数\" class=\"headerlink\" title=\"四 改变布局参数\"></a>四 改变布局参数</h4><p>改变布局参数，也就是改变·LayoutParams·</p>\n<h4 id=\"五-使用Scroller进行平滑移动\"><a href=\"#五-使用Scroller进行平滑移动\" class=\"headerlink\" title=\"五 使用Scroller进行平滑移动\"></a>五 使用Scroller进行平滑移动</h4><p>自定义一个控件，添加成员变量·Scroller·，如下：<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ScrollerTextView</span> <span class=\"keyword\">extends</span> <span class=\"title\">TextView</span> </span>&#123;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">private</span> Scroller mScroller;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">ScrollerTextView</span><span class=\"params\">(Context context)</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">super</span>(context);</div><div class=\"line\">        mScroller = <span class=\"keyword\">new</span> Scroller(context);</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">ScrollerTextView</span><span class=\"params\">(Context context, AttributeSet attrs)</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">super</span>(context, attrs);</div><div class=\"line\">        mScroller = <span class=\"keyword\">new</span> Scroller(context);</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">ScrollerTextView</span><span class=\"params\">(Context context, AttributeSet attrs, <span class=\"keyword\">int</span> defStyleAttr)</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">super</span>(context, attrs, defStyleAttr);</div><div class=\"line\">        mScroller = <span class=\"keyword\">new</span> Scroller(context);</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">smoothScrollBy</span><span class=\"params\">(<span class=\"keyword\">int</span> dx,<span class=\"keyword\">int</span> dy)</span></span>&#123;</div><div class=\"line\">        mScroller.startScroll(mScroller.getFinalX(),mScroller.getFinalY(),dx,dy,<span class=\"number\">2000</span>);</div><div class=\"line\">        invalidate();</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">smoothScrollTo</span><span class=\"params\">(<span class=\"keyword\">int</span> fx, <span class=\"keyword\">int</span> fy)</span></span>&#123;</div><div class=\"line\">        <span class=\"keyword\">int</span> dx = fx - mScroller.getFinalX();</div><div class=\"line\">        <span class=\"keyword\">int</span> dy = fy - mScroller.getFinalY();</div><div class=\"line\">        smoothScrollBy(dx,dy);</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"meta\">@Override</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">computeScroll</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">       <span class=\"keyword\">if</span>(mScroller.computeScrollOffset())&#123;</div><div class=\"line\">           scrollTo(mScroller.getCurrX(), mScroller.getCurrY());</div><div class=\"line\">           postInvalidate();</div><div class=\"line\">       &#125;</div><div class=\"line\">        <span class=\"keyword\">super</span>.computeScroll();</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>其实<code>Scroller</code>也是通过<code>ScrollTO/ScrollBy</code>实现的，同样只能滑动内容，不能滑动本身。<br>PS：<br>在调用<code>startScroll</code>时，并没有让<code>View</code>进行滑动。而是在调用<code>invalidate()</code>进行重绘的时候，会去调用<code>computeScroll</code>方法，但是<code>computeScroll</code>在<code>View</code>只是个空实现，因此需要我们自己去实现。在<code>computeScroll</code>中进行平移。也就是说当View重绘后在<code>draw</code>方法中调用<code>computeScroll</code>,而<code>computeScroll</code>又会去向<code>Scroller</code>获取当前的<code>scrollX</code>和<code>scrollY</code>,然后通过<code>scrollTo</code>方法实现滑动，接着又调用<code>postInvalidate()</code>方法来进行第二次重绘，这一次重绘过程和第一次一样，还是会去调用<code>computeScroll()</code>方法，如此反复，直到整个滑动过程结束。</p>\n<hr>\n<p>以上</p>"},{"title":"git工具","date":"2017-05-10T08:51:11.000Z","_content":"公司代码版本管理系统由svn迁到了git，对于AndroidStudio来讲，内置的GUI工具足以应付日常开发，但在请求失败的情况下，对失败原因的提示不够清晰。个人习惯上用命令行，但是对于命令行中比较两个文件差异以及合并来说，个人还是不大习惯，于是就配置成了使用其他软件进行合并。可以使用`$ git difftool --tool-help`查看对比文件差异支持的软件，用`$ git mergetool --tool-help`查看合并代码支持的软件，个人只试过两种:`codecompare`和`beyond compare`。不习惯`bc`的界面，最后决定使用`codecompare`。\n<!--more-->\n#### 配置codecompare为diff和merge工具\n1. 安装codecompare软件\n2. 配置codecompare为diff工具\n\t`git config --global diff.tool codecompare`\n3. 配置codecompare的路径`path 后面是软件的安装路径`\n\t`git config --global difftool.codecompare.path D://CodeCompare//CodeCompare.exe`\n4. 配置codecompare为merge工具\n\t`git config --global merge.tool codecompare`\n5. 配置codecompare的路径`path 后面是软件的安装路径`\n\t`git config --global mergetool.codecompare.path D://CodeCompare//CodeMerge.exe`\n\t\n在比较本地修改后的文件与本地仓库中的文件差异时，执行 `git difftool <filename>`即可。\n![codecompare实例](/image/git/git_diff_tool_codecompare.png)\n当更新代码自动合并失败的时候，执行 `git mergetool`即可。\n![codecompare实例](/image/git/git_merge_tool_codecompare.png)\n\n#### 配置beyond compare为diff和merge工具\n配置方式和codecompare一样，需要注意的是：\n1. 如果`beyond compare`软件是4.X\n  1) 如果git的版本低于2.2.0,配置的时候用`bc3`\n  2) 如果git的版本大于等于2.2.0,配置的时候用`bc`\n这个如何配置<a href=\"http://www.scootersoftware.com/support.php?zz=kb_vcs#gitwindows\">官网</a>有说明，就不再赘述\n在比较本地修改后的文件与本地仓库中的文件差异时，执行 `git difftool <filename>`即可。\n![bc实例](/image/git/git_diff_tool_bc.png)\n当更新代码自动合并失败的时候，执行 `git mergetool`即可。\n![bc实例](/image/git/git_merge_tool_bc.png)\n有人不习惯git自动merge成功后填写merge信息的编辑器，说明一下，默认的编辑器是`vim`,不习惯用的话可以使用 `git config --global core.edit <软件路径>`来修改。需要注意的是，git命令行似乎读不到windows系统的path，需要写软件的绝对路径。\n----\n以上","source":"_posts/git工具.md","raw":"---\ntitle: git工具\ndate: 2017-05-10 16:51:11\ntags: [git,git工具]\n---\n公司代码版本管理系统由svn迁到了git，对于AndroidStudio来讲，内置的GUI工具足以应付日常开发，但在请求失败的情况下，对失败原因的提示不够清晰。个人习惯上用命令行，但是对于命令行中比较两个文件差异以及合并来说，个人还是不大习惯，于是就配置成了使用其他软件进行合并。可以使用`$ git difftool --tool-help`查看对比文件差异支持的软件，用`$ git mergetool --tool-help`查看合并代码支持的软件，个人只试过两种:`codecompare`和`beyond compare`。不习惯`bc`的界面，最后决定使用`codecompare`。\n<!--more-->\n#### 配置codecompare为diff和merge工具\n1. 安装codecompare软件\n2. 配置codecompare为diff工具\n\t`git config --global diff.tool codecompare`\n3. 配置codecompare的路径`path 后面是软件的安装路径`\n\t`git config --global difftool.codecompare.path D://CodeCompare//CodeCompare.exe`\n4. 配置codecompare为merge工具\n\t`git config --global merge.tool codecompare`\n5. 配置codecompare的路径`path 后面是软件的安装路径`\n\t`git config --global mergetool.codecompare.path D://CodeCompare//CodeMerge.exe`\n\t\n在比较本地修改后的文件与本地仓库中的文件差异时，执行 `git difftool <filename>`即可。\n![codecompare实例](/image/git/git_diff_tool_codecompare.png)\n当更新代码自动合并失败的时候，执行 `git mergetool`即可。\n![codecompare实例](/image/git/git_merge_tool_codecompare.png)\n\n#### 配置beyond compare为diff和merge工具\n配置方式和codecompare一样，需要注意的是：\n1. 如果`beyond compare`软件是4.X\n  1) 如果git的版本低于2.2.0,配置的时候用`bc3`\n  2) 如果git的版本大于等于2.2.0,配置的时候用`bc`\n这个如何配置<a href=\"http://www.scootersoftware.com/support.php?zz=kb_vcs#gitwindows\">官网</a>有说明，就不再赘述\n在比较本地修改后的文件与本地仓库中的文件差异时，执行 `git difftool <filename>`即可。\n![bc实例](/image/git/git_diff_tool_bc.png)\n当更新代码自动合并失败的时候，执行 `git mergetool`即可。\n![bc实例](/image/git/git_merge_tool_bc.png)\n有人不习惯git自动merge成功后填写merge信息的编辑器，说明一下，默认的编辑器是`vim`,不习惯用的话可以使用 `git config --global core.edit <软件路径>`来修改。需要注意的是，git命令行似乎读不到windows系统的path，需要写软件的绝对路径。\n----\n以上","slug":"git工具","published":1,"updated":"2017-12-30T13:13:07.228Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjbvyt3uv000qscdghnymm1uu","content":"<p>公司代码版本管理系统由svn迁到了git，对于AndroidStudio来讲，内置的GUI工具足以应付日常开发，但在请求失败的情况下，对失败原因的提示不够清晰。个人习惯上用命令行，但是对于命令行中比较两个文件差异以及合并来说，个人还是不大习惯，于是就配置成了使用其他软件进行合并。可以使用<code>$ git difftool --tool-help</code>查看对比文件差异支持的软件，用<code>$ git mergetool --tool-help</code>查看合并代码支持的软件，个人只试过两种:<code>codecompare</code>和<code>beyond compare</code>。不习惯<code>bc</code>的界面，最后决定使用<code>codecompare</code>。<br><a id=\"more\"></a></p>\n<h4 id=\"配置codecompare为diff和merge工具\"><a href=\"#配置codecompare为diff和merge工具\" class=\"headerlink\" title=\"配置codecompare为diff和merge工具\"></a>配置codecompare为diff和merge工具</h4><ol>\n<li>安装codecompare软件</li>\n<li>配置codecompare为diff工具<br> <code>git config --global diff.tool codecompare</code></li>\n<li>配置codecompare的路径<code>path 后面是软件的安装路径</code><br> <code>git config --global difftool.codecompare.path D://CodeCompare//CodeCompare.exe</code></li>\n<li>配置codecompare为merge工具<br> <code>git config --global merge.tool codecompare</code></li>\n<li>配置codecompare的路径<code>path 后面是软件的安装路径</code><br> <code>git config --global mergetool.codecompare.path D://CodeCompare//CodeMerge.exe</code></li>\n</ol>\n<p>在比较本地修改后的文件与本地仓库中的文件差异时，执行 <code>git difftool &lt;filename&gt;</code>即可。<br><img src=\"/image/git/git_diff_tool_codecompare.png\" alt=\"codecompare实例\"><br>当更新代码自动合并失败的时候，执行 <code>git mergetool</code>即可。<br><img src=\"/image/git/git_merge_tool_codecompare.png\" alt=\"codecompare实例\"></p>\n<h4 id=\"配置beyond-compare为diff和merge工具\"><a href=\"#配置beyond-compare为diff和merge工具\" class=\"headerlink\" title=\"配置beyond compare为diff和merge工具\"></a>配置beyond compare为diff和merge工具</h4><p>配置方式和codecompare一样，需要注意的是：</p>\n<ol>\n<li>如果<code>beyond compare</code>软件是4.X<br>1) 如果git的版本低于2.2.0,配置的时候用<code>bc3</code><br>2) 如果git的版本大于等于2.2.0,配置的时候用<code>bc</code><br>这个如何配置<a href=\"http://www.scootersoftware.com/support.php?zz=kb_vcs#gitwindows\" target=\"_blank\" rel=\"external\">官网</a>有说明，就不再赘述<br>在比较本地修改后的文件与本地仓库中的文件差异时，执行 <code>git difftool &lt;filename&gt;</code>即可。<br><img src=\"/image/git/git_diff_tool_bc.png\" alt=\"bc实例\"><br>当更新代码自动合并失败的时候，执行 <code>git mergetool</code>即可。<br><img src=\"/image/git/git_merge_tool_bc.png\" alt=\"bc实例\"><br>有人不习惯git自动merge成功后填写merge信息的编辑器，说明一下，默认的编辑器是<code>vim</code>,不习惯用的话可以使用 <code>git config --global core.edit &lt;软件路径&gt;</code>来修改。需要注意的是，git命令行似乎读不到windows系统的path，需要写软件的绝对路径。</li>\n</ol>\n<hr>\n<p>以上</p>\n","excerpt":"<p>公司代码版本管理系统由svn迁到了git，对于AndroidStudio来讲，内置的GUI工具足以应付日常开发，但在请求失败的情况下，对失败原因的提示不够清晰。个人习惯上用命令行，但是对于命令行中比较两个文件差异以及合并来说，个人还是不大习惯，于是就配置成了使用其他软件进行合并。可以使用<code>$ git difftool --tool-help</code>查看对比文件差异支持的软件，用<code>$ git mergetool --tool-help</code>查看合并代码支持的软件，个人只试过两种:<code>codecompare</code>和<code>beyond compare</code>。不习惯<code>bc</code>的界面，最后决定使用<code>codecompare</code>。<br>","more":"</p>\n<h4 id=\"配置codecompare为diff和merge工具\"><a href=\"#配置codecompare为diff和merge工具\" class=\"headerlink\" title=\"配置codecompare为diff和merge工具\"></a>配置codecompare为diff和merge工具</h4><ol>\n<li>安装codecompare软件</li>\n<li>配置codecompare为diff工具<br> <code>git config --global diff.tool codecompare</code></li>\n<li>配置codecompare的路径<code>path 后面是软件的安装路径</code><br> <code>git config --global difftool.codecompare.path D://CodeCompare//CodeCompare.exe</code></li>\n<li>配置codecompare为merge工具<br> <code>git config --global merge.tool codecompare</code></li>\n<li>配置codecompare的路径<code>path 后面是软件的安装路径</code><br> <code>git config --global mergetool.codecompare.path D://CodeCompare//CodeMerge.exe</code></li>\n</ol>\n<p>在比较本地修改后的文件与本地仓库中的文件差异时，执行 <code>git difftool &lt;filename&gt;</code>即可。<br><img src=\"/image/git/git_diff_tool_codecompare.png\" alt=\"codecompare实例\"><br>当更新代码自动合并失败的时候，执行 <code>git mergetool</code>即可。<br><img src=\"/image/git/git_merge_tool_codecompare.png\" alt=\"codecompare实例\"></p>\n<h4 id=\"配置beyond-compare为diff和merge工具\"><a href=\"#配置beyond-compare为diff和merge工具\" class=\"headerlink\" title=\"配置beyond compare为diff和merge工具\"></a>配置beyond compare为diff和merge工具</h4><p>配置方式和codecompare一样，需要注意的是：</p>\n<ol>\n<li>如果<code>beyond compare</code>软件是4.X<br>1) 如果git的版本低于2.2.0,配置的时候用<code>bc3</code><br>2) 如果git的版本大于等于2.2.0,配置的时候用<code>bc</code><br>这个如何配置<a href=\"http://www.scootersoftware.com/support.php?zz=kb_vcs#gitwindows\">官网</a>有说明，就不再赘述<br>在比较本地修改后的文件与本地仓库中的文件差异时，执行 <code>git difftool &lt;filename&gt;</code>即可。<br><img src=\"/image/git/git_diff_tool_bc.png\" alt=\"bc实例\"><br>当更新代码自动合并失败的时候，执行 <code>git mergetool</code>即可。<br><img src=\"/image/git/git_merge_tool_bc.png\" alt=\"bc实例\"><br>有人不习惯git自动merge成功后填写merge信息的编辑器，说明一下，默认的编辑器是<code>vim</code>,不习惯用的话可以使用 <code>git config --global core.edit &lt;软件路径&gt;</code>来修改。需要注意的是，git命令行似乎读不到windows系统的path，需要写软件的绝对路径。</li>\n</ol>\n<hr>\n<p>以上</p>"},{"title":"elk简单环境搭建 for linux","date":"2017-06-13T11:39:30.000Z","_content":"环境：ubuntu 16.06虚拟机：4核8G内存\n在官网下载的`tag.gz`包，官网地址[https://www.elastic.co/webinars/introduction-elk-stack](https://www.elastic.co/webinars/introduction-elk-stack)\n安装版本是**5.4.1**，本文只安装了`Elasticsearch`、`Logstash`、`Kibana`\n<!--more-->\n#### Elasticsearch\n1. 下载压缩包并解压\n2. 在es的根目录下`config/elasticsearch.yml`文件，内容如下\n``` yml\n# Use a descriptive name for the node:\nnode.name: xuannode  ##不要有'-'、'_'、'+'\n# Path to directory where to store the data (separate multiple locations by comma):\n#\npath.data: /home/huangyuan/elk/elasticsearch/data\n#\n# Path to log files:\n#\npath.logs: /home/huangyuan/elk/elasticsearch/logs/*\n#\n# Set the bind address to a specific IP (IPv4 or IPv6):\n#\nnetwork.host: 0.0.0.0\n#\n# Set a custom port for HTTP:\n#\nhttp.port: 9200\ndiscovery.zen.ping.unicast.hosts: [\"0.0.0.0\"]\nhttp.cors.enabled: true\nhttp.cors.allow-origin: \"*\"\n```\n#### logstash\n1. 下载压缩包并解压\n2. 创建一个`logstash.conf`文件，输入以下内容并保存:\n```conf\ninput{\n\tfile {\n\t\tpath => \"/home/huangyuan/elkdata/*.log\"\n\t}\n}\noutput {\n\telasticsearch {\n\t\thosts => \"http://192.168.1.179:9200\"\n\t\tindex => \"logstash-%{+YYYY.MM.dd}\"\n\t}\n    stdout {}\n}\n```\n3. 启动时执行 `bin/logstash -f logstash.conf`\n#### kibana\n1. 下载压缩包并解压缩\n2. 编辑`config/kibana.yml`\n``` yml\n# Kibana is served by a back end server. This setting specifies the port to use.\nserver.port: 5601\n# Specifies the address to which the Kibana server will bind. IP addresses and host names are both valid values.\n# The default is 'localhost', which usually means remote machines will not be able to connect.\n# To allow connections from remote users, set this parameter to a non-loopback address.\nserver.host: \"192.168.1.179\"\n# The Kibana server's name.  This is used for display purposes.\nserver.name: \"xuankibina\"\n# The URL of the Elasticsearch instance to use for all your queries.\nelasticsearch.url: \"http://192.168.1.179:9200\"\n```\n----\n启动的时候依次启动 es、logstash、kibana就可以了\nPS:\n1.在LogStash的配置文件`logstash.conf`中,`input`配置的就是logstash要监听的文件路径，启动之后，先在监听的文件夹中创建一个log文件并输入随意内容。\n2. `elasticsearch`不能用`root`用户启动\n3. 启动es报错`max virtual memory areas vm.max_map_count [65530]is too low, increase to at least [262144]`:解决方法是修改`/etc/sysctl.conf`配置文件，添加`vm.max_map_count=262144`，重启机器才起作用.\n<hr>\n以上","source":"_posts/elk简单环境搭建-for-linux.md","raw":"---\ntitle: elk简单环境搭建 for linux\ndate: 2017-06-13 19:39:30\ntags: [elk,运维,服务器]\n---\n环境：ubuntu 16.06虚拟机：4核8G内存\n在官网下载的`tag.gz`包，官网地址[https://www.elastic.co/webinars/introduction-elk-stack](https://www.elastic.co/webinars/introduction-elk-stack)\n安装版本是**5.4.1**，本文只安装了`Elasticsearch`、`Logstash`、`Kibana`\n<!--more-->\n#### Elasticsearch\n1. 下载压缩包并解压\n2. 在es的根目录下`config/elasticsearch.yml`文件，内容如下\n``` yml\n# Use a descriptive name for the node:\nnode.name: xuannode  ##不要有'-'、'_'、'+'\n# Path to directory where to store the data (separate multiple locations by comma):\n#\npath.data: /home/huangyuan/elk/elasticsearch/data\n#\n# Path to log files:\n#\npath.logs: /home/huangyuan/elk/elasticsearch/logs/*\n#\n# Set the bind address to a specific IP (IPv4 or IPv6):\n#\nnetwork.host: 0.0.0.0\n#\n# Set a custom port for HTTP:\n#\nhttp.port: 9200\ndiscovery.zen.ping.unicast.hosts: [\"0.0.0.0\"]\nhttp.cors.enabled: true\nhttp.cors.allow-origin: \"*\"\n```\n#### logstash\n1. 下载压缩包并解压\n2. 创建一个`logstash.conf`文件，输入以下内容并保存:\n```conf\ninput{\n\tfile {\n\t\tpath => \"/home/huangyuan/elkdata/*.log\"\n\t}\n}\noutput {\n\telasticsearch {\n\t\thosts => \"http://192.168.1.179:9200\"\n\t\tindex => \"logstash-%{+YYYY.MM.dd}\"\n\t}\n    stdout {}\n}\n```\n3. 启动时执行 `bin/logstash -f logstash.conf`\n#### kibana\n1. 下载压缩包并解压缩\n2. 编辑`config/kibana.yml`\n``` yml\n# Kibana is served by a back end server. This setting specifies the port to use.\nserver.port: 5601\n# Specifies the address to which the Kibana server will bind. IP addresses and host names are both valid values.\n# The default is 'localhost', which usually means remote machines will not be able to connect.\n# To allow connections from remote users, set this parameter to a non-loopback address.\nserver.host: \"192.168.1.179\"\n# The Kibana server's name.  This is used for display purposes.\nserver.name: \"xuankibina\"\n# The URL of the Elasticsearch instance to use for all your queries.\nelasticsearch.url: \"http://192.168.1.179:9200\"\n```\n----\n启动的时候依次启动 es、logstash、kibana就可以了\nPS:\n1.在LogStash的配置文件`logstash.conf`中,`input`配置的就是logstash要监听的文件路径，启动之后，先在监听的文件夹中创建一个log文件并输入随意内容。\n2. `elasticsearch`不能用`root`用户启动\n3. 启动es报错`max virtual memory areas vm.max_map_count [65530]is too low, increase to at least [262144]`:解决方法是修改`/etc/sysctl.conf`配置文件，添加`vm.max_map_count=262144`，重启机器才起作用.\n<hr>\n以上","slug":"elk简单环境搭建-for-linux","published":1,"updated":"2017-07-02T08:48:57.268Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjbvyt3ux000tscdghpsxpowp","content":"<p>环境：ubuntu 16.06虚拟机：4核8G内存<br>在官网下载的<code>tag.gz</code>包，官网地址<a href=\"https://www.elastic.co/webinars/introduction-elk-stack\" target=\"_blank\" rel=\"external\">https://www.elastic.co/webinars/introduction-elk-stack</a><br>安装版本是<strong>5.4.1</strong>，本文只安装了<code>Elasticsearch</code>、<code>Logstash</code>、<code>Kibana</code><br><a id=\"more\"></a></p>\n<h4 id=\"Elasticsearch\"><a href=\"#Elasticsearch\" class=\"headerlink\" title=\"Elasticsearch\"></a>Elasticsearch</h4><ol>\n<li>下载压缩包并解压</li>\n<li>在es的根目录下<code>config/elasticsearch.yml</code>文件，内容如下<figure class=\"highlight yml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\"># Use a descriptive name for the node:</span></div><div class=\"line\">node.name: xuannode  <span class=\"comment\">##不要有'-'、'_'、'+'</span></div><div class=\"line\"><span class=\"comment\"># Path to directory where to store the data (separate multiple locations by comma):</span></div><div class=\"line\"><span class=\"comment\">#</span></div><div class=\"line\">path.data: /home/huangyuan/elk/elasticsearch/data</div><div class=\"line\"><span class=\"comment\">#</span></div><div class=\"line\"><span class=\"comment\"># Path to log files:</span></div><div class=\"line\"><span class=\"comment\">#</span></div><div class=\"line\">path.logs: /home/huangyuan/elk/elasticsearch/logs/*</div><div class=\"line\"><span class=\"comment\">#</span></div><div class=\"line\"><span class=\"comment\"># Set the bind address to a specific IP (IPv4 or IPv6):</span></div><div class=\"line\"><span class=\"comment\">#</span></div><div class=\"line\">network.host: <span class=\"number\">0.0</span><span class=\"number\">.0</span><span class=\"number\">.0</span></div><div class=\"line\"><span class=\"comment\">#</span></div><div class=\"line\"><span class=\"comment\"># Set a custom port for HTTP:</span></div><div class=\"line\"><span class=\"comment\">#</span></div><div class=\"line\">http.port: <span class=\"number\">9200</span></div><div class=\"line\">discovery.zen.ping.unicast.hosts: [<span class=\"string\">\"0.0.0.0\"</span>]</div><div class=\"line\">http.cors.enabled: <span class=\"literal\">true</span></div><div class=\"line\">http.cors.allow-origin: <span class=\"string\">\"*\"</span></div></pre></td></tr></table></figure>\n</li>\n</ol>\n<h4 id=\"logstash\"><a href=\"#logstash\" class=\"headerlink\" title=\"logstash\"></a>logstash</h4><ol>\n<li>下载压缩包并解压</li>\n<li><p>创建一个<code>logstash.conf</code>文件，输入以下内容并保存:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div></pre></td><td class=\"code\"><pre><div class=\"line\">input&#123;</div><div class=\"line\">\tfile &#123;</div><div class=\"line\">\t\tpath =&gt; &quot;/home/huangyuan/elkdata/*.log&quot;</div><div class=\"line\">\t&#125;</div><div class=\"line\">&#125;</div><div class=\"line\">output &#123;</div><div class=\"line\">\telasticsearch &#123;</div><div class=\"line\">\t\thosts =&gt; &quot;http://192.168.1.179:9200&quot;</div><div class=\"line\">\t\tindex =&gt; &quot;logstash-%&#123;+YYYY.MM.dd&#125;&quot;</div><div class=\"line\">\t&#125;</div><div class=\"line\">    stdout &#123;&#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n</li>\n<li><p>启动时执行 <code>bin/logstash -f logstash.conf</code></p>\n<h4 id=\"kibana\"><a href=\"#kibana\" class=\"headerlink\" title=\"kibana\"></a>kibana</h4></li>\n<li>下载压缩包并解压缩</li>\n<li>编辑<code>config/kibana.yml</code><figure class=\"highlight yml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\"># Kibana is served by a back end server. This setting specifies the port to use.</span></div><div class=\"line\">server.port: <span class=\"number\">5601</span></div><div class=\"line\"><span class=\"comment\"># Specifies the address to which the Kibana server will bind. IP addresses and host names are both valid values.</span></div><div class=\"line\"><span class=\"comment\"># The default is 'localhost', which usually means remote machines will not be able to connect.</span></div><div class=\"line\"><span class=\"comment\"># To allow connections from remote users, set this parameter to a non-loopback address.</span></div><div class=\"line\">server.host: <span class=\"string\">\"192.168.1.179\"</span></div><div class=\"line\"><span class=\"comment\"># The Kibana server's name.  This is used for display purposes.</span></div><div class=\"line\">server.name: <span class=\"string\">\"xuankibina\"</span></div><div class=\"line\"><span class=\"comment\"># The URL of the Elasticsearch instance to use for all your queries.</span></div><div class=\"line\">elasticsearch.url: <span class=\"string\">\"http://192.168.1.179:9200\"</span></div></pre></td></tr></table></figure>\n</li>\n</ol>\n<hr>\n<p>启动的时候依次启动 es、logstash、kibana就可以了<br>PS:<br>1.在LogStash的配置文件<code>logstash.conf</code>中,<code>input</code>配置的就是logstash要监听的文件路径，启动之后，先在监听的文件夹中创建一个log文件并输入随意内容。</p>\n<ol>\n<li><code>elasticsearch</code>不能用<code>root</code>用户启动</li>\n<li>启动es报错<code>max virtual memory areas vm.max_map_count [65530]is too low, increase to at least [262144]</code>:解决方法是修改<code>/etc/sysctl.conf</code>配置文件，添加<code>vm.max_map_count=262144</code>，重启机器才起作用.<br><hr><br>以上</li>\n</ol>\n","excerpt":"<p>环境：ubuntu 16.06虚拟机：4核8G内存<br>在官网下载的<code>tag.gz</code>包，官网地址<a href=\"https://www.elastic.co/webinars/introduction-elk-stack\">https://www.elastic.co/webinars/introduction-elk-stack</a><br>安装版本是<strong>5.4.1</strong>，本文只安装了<code>Elasticsearch</code>、<code>Logstash</code>、<code>Kibana</code><br>","more":"</p>\n<h4 id=\"Elasticsearch\"><a href=\"#Elasticsearch\" class=\"headerlink\" title=\"Elasticsearch\"></a>Elasticsearch</h4><ol>\n<li>下载压缩包并解压</li>\n<li>在es的根目录下<code>config/elasticsearch.yml</code>文件，内容如下<figure class=\"highlight yml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\"># Use a descriptive name for the node:</span></div><div class=\"line\">node.name: xuannode  <span class=\"comment\">##不要有'-'、'_'、'+'</span></div><div class=\"line\"><span class=\"comment\"># Path to directory where to store the data (separate multiple locations by comma):</span></div><div class=\"line\"><span class=\"comment\">#</span></div><div class=\"line\">path.data: /home/huangyuan/elk/elasticsearch/data</div><div class=\"line\"><span class=\"comment\">#</span></div><div class=\"line\"><span class=\"comment\"># Path to log files:</span></div><div class=\"line\"><span class=\"comment\">#</span></div><div class=\"line\">path.logs: /home/huangyuan/elk/elasticsearch/logs/*</div><div class=\"line\"><span class=\"comment\">#</span></div><div class=\"line\"><span class=\"comment\"># Set the bind address to a specific IP (IPv4 or IPv6):</span></div><div class=\"line\"><span class=\"comment\">#</span></div><div class=\"line\">network.host: <span class=\"number\">0.0</span><span class=\"number\">.0</span><span class=\"number\">.0</span></div><div class=\"line\"><span class=\"comment\">#</span></div><div class=\"line\"><span class=\"comment\"># Set a custom port for HTTP:</span></div><div class=\"line\"><span class=\"comment\">#</span></div><div class=\"line\">http.port: <span class=\"number\">9200</span></div><div class=\"line\">discovery.zen.ping.unicast.hosts: [<span class=\"string\">\"0.0.0.0\"</span>]</div><div class=\"line\">http.cors.enabled: <span class=\"literal\">true</span></div><div class=\"line\">http.cors.allow-origin: <span class=\"string\">\"*\"</span></div></pre></td></tr></table></figure>\n</li>\n</ol>\n<h4 id=\"logstash\"><a href=\"#logstash\" class=\"headerlink\" title=\"logstash\"></a>logstash</h4><ol>\n<li>下载压缩包并解压</li>\n<li><p>创建一个<code>logstash.conf</code>文件，输入以下内容并保存:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div></pre></td><td class=\"code\"><pre><div class=\"line\">input&#123;</div><div class=\"line\">\tfile &#123;</div><div class=\"line\">\t\tpath =&gt; &quot;/home/huangyuan/elkdata/*.log&quot;</div><div class=\"line\">\t&#125;</div><div class=\"line\">&#125;</div><div class=\"line\">output &#123;</div><div class=\"line\">\telasticsearch &#123;</div><div class=\"line\">\t\thosts =&gt; &quot;http://192.168.1.179:9200&quot;</div><div class=\"line\">\t\tindex =&gt; &quot;logstash-%&#123;+YYYY.MM.dd&#125;&quot;</div><div class=\"line\">\t&#125;</div><div class=\"line\">    stdout &#123;&#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n</li>\n<li><p>启动时执行 <code>bin/logstash -f logstash.conf</code></p>\n<h4 id=\"kibana\"><a href=\"#kibana\" class=\"headerlink\" title=\"kibana\"></a>kibana</h4></li>\n<li>下载压缩包并解压缩</li>\n<li>编辑<code>config/kibana.yml</code><figure class=\"highlight yml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\"># Kibana is served by a back end server. This setting specifies the port to use.</span></div><div class=\"line\">server.port: <span class=\"number\">5601</span></div><div class=\"line\"><span class=\"comment\"># Specifies the address to which the Kibana server will bind. IP addresses and host names are both valid values.</span></div><div class=\"line\"><span class=\"comment\"># The default is 'localhost', which usually means remote machines will not be able to connect.</span></div><div class=\"line\"><span class=\"comment\"># To allow connections from remote users, set this parameter to a non-loopback address.</span></div><div class=\"line\">server.host: <span class=\"string\">\"192.168.1.179\"</span></div><div class=\"line\"><span class=\"comment\"># The Kibana server's name.  This is used for display purposes.</span></div><div class=\"line\">server.name: <span class=\"string\">\"xuankibina\"</span></div><div class=\"line\"><span class=\"comment\"># The URL of the Elasticsearch instance to use for all your queries.</span></div><div class=\"line\">elasticsearch.url: <span class=\"string\">\"http://192.168.1.179:9200\"</span></div></pre></td></tr></table></figure>\n</li>\n</ol>\n<hr>\n<p>启动的时候依次启动 es、logstash、kibana就可以了<br>PS:<br>1.在LogStash的配置文件<code>logstash.conf</code>中,<code>input</code>配置的就是logstash要监听的文件路径，启动之后，先在监听的文件夹中创建一个log文件并输入随意内容。</p>\n<ol>\n<li><code>elasticsearch</code>不能用<code>root</code>用户启动</li>\n<li>启动es报错<code>max virtual memory areas vm.max_map_count [65530]is too low, increase to at least [262144]</code>:解决方法是修改<code>/etc/sysctl.conf</code>配置文件，添加<code>vm.max_map_count=262144</code>，重启机器才起作用.<br><hr><br>以上</li>\n</ol>"},{"title":"hexo+gitpage搭建自己的博客(二)","date":"2016-10-25T13:11:53.000Z","_content":"\n之前我们已经安装好了`hexo`，接下来就是初始化了。\n```shell\n    hexo init <dir>\n    cd <dir>\n    npm install\n```\n<!-- more -->\n![hexo_install](/image/hexo/hexo_init.png )\n![hexo_install](/image/hexo/npm_install.png)\n现在hexo就安装完成了，在存放hexo的文件夹目录下执行 `hexo s`，就可以启动hexo的服务，启动之后有提示，在浏览器中输入`127.0.0.1:4000`就可以看到最初的效果了，如下\n![hello_world](/image/hexo/hexo_hello.png)\n***\n　　对了，还要发布到github。前提准备是在上一篇中已经创建好了github的仓库。接下来在存放hexo资源的文件夹下(以下用 heox_blog这个文件夹代替)执行\n`npm install hexo-deployer-git --save`\n修改hexo_blog文件夹下的`_config.yml`文件\n在末尾添加\n```shell\ndeploy:\n  type: git\n  repository: git@github.com:your name/your name.github.io.git\n  branch: master\n```\n注意，type，repository，branch冒号后面都有一个空格。保存后执行\n```hexo\n    hexo clean\n    hexo g\n    hexo d\n```\n就可以将写好的博客部署到github上了。（部署到github时建议按照顺序执行以上命令）\n***\n```hexo\nhexo generate == hexo g    -->将md文件解析成静态的html文件\nhexo deploy == hexo d      --> 将文件部署到github\nhexo server == hexo s      --> 启动本地hexo服务\nhexo clean\t\t\t\t   --> 清除缓存\nhexo new \"title\" \t\t\t--> 创建新的文章，文件在`hexo_blog/source/_posts`文件夹下\n```\n***\n以上\n","source":"_posts/hexo-gitpage搭建自己的博客-二.md","raw":"---\ntitle: hexo+gitpage搭建自己的博客(二)\ndate: 2016-10-25 21:11:53\ntags: [hexo,gitpage,blog]\n---\n\n之前我们已经安装好了`hexo`，接下来就是初始化了。\n```shell\n    hexo init <dir>\n    cd <dir>\n    npm install\n```\n<!-- more -->\n![hexo_install](/image/hexo/hexo_init.png )\n![hexo_install](/image/hexo/npm_install.png)\n现在hexo就安装完成了，在存放hexo的文件夹目录下执行 `hexo s`，就可以启动hexo的服务，启动之后有提示，在浏览器中输入`127.0.0.1:4000`就可以看到最初的效果了，如下\n![hello_world](/image/hexo/hexo_hello.png)\n***\n　　对了，还要发布到github。前提准备是在上一篇中已经创建好了github的仓库。接下来在存放hexo资源的文件夹下(以下用 heox_blog这个文件夹代替)执行\n`npm install hexo-deployer-git --save`\n修改hexo_blog文件夹下的`_config.yml`文件\n在末尾添加\n```shell\ndeploy:\n  type: git\n  repository: git@github.com:your name/your name.github.io.git\n  branch: master\n```\n注意，type，repository，branch冒号后面都有一个空格。保存后执行\n```hexo\n    hexo clean\n    hexo g\n    hexo d\n```\n就可以将写好的博客部署到github上了。（部署到github时建议按照顺序执行以上命令）\n***\n```hexo\nhexo generate == hexo g    -->将md文件解析成静态的html文件\nhexo deploy == hexo d      --> 将文件部署到github\nhexo server == hexo s      --> 启动本地hexo服务\nhexo clean\t\t\t\t   --> 清除缓存\nhexo new \"title\" \t\t\t--> 创建新的文章，文件在`hexo_blog/source/_posts`文件夹下\n```\n***\n以上\n","slug":"hexo-gitpage搭建自己的博客-二","published":1,"updated":"2017-12-30T13:13:07.229Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjbvyt3uy000vscdg5ijclney","content":"<p>之前我们已经安装好了<code>hexo</code>，接下来就是初始化了。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">hexo init &lt;dir&gt;</div><div class=\"line\">cd &lt;dir&gt;</div><div class=\"line\">npm install</div></pre></td></tr></table></figure></p>\n<a id=\"more\"></a>\n<p><img src=\"/image/hexo/hexo_init.png\" alt=\"hexo_install\"><br><img src=\"/image/hexo/npm_install.png\" alt=\"hexo_install\"><br>现在hexo就安装完成了，在存放hexo的文件夹目录下执行 <code>hexo s</code>，就可以启动hexo的服务，启动之后有提示，在浏览器中输入<code>127.0.0.1:4000</code>就可以看到最初的效果了，如下<br><img src=\"/image/hexo/hexo_hello.png\" alt=\"hello_world\"></p>\n<hr>\n<p>　　对了，还要发布到github。前提准备是在上一篇中已经创建好了github的仓库。接下来在存放hexo资源的文件夹下(以下用 heox_blog这个文件夹代替)执行<br><code>npm install hexo-deployer-git --save</code><br>修改hexo_blog文件夹下的<code>_config.yml</code>文件<br>在末尾添加<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">deploy:</div><div class=\"line\">  type: git</div><div class=\"line\">  repository: git@github.com:your name/your name.github.io.git</div><div class=\"line\">  branch: master</div></pre></td></tr></table></figure></p>\n<p>注意，type，repository，branch冒号后面都有一个空格。保存后执行<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">hexo clean</div><div class=\"line\">hexo g</div><div class=\"line\">hexo d</div></pre></td></tr></table></figure></p>\n<p>就可以将写好的博客部署到github上了。（部署到github时建议按照顺序执行以上命令）</p>\n<hr>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">hexo generate == hexo g    --&gt;将md文件解析成静态的html文件</div><div class=\"line\">hexo deploy == hexo d      --&gt; 将文件部署到github</div><div class=\"line\">hexo server == hexo s      --&gt; 启动本地hexo服务</div><div class=\"line\">hexo clean\t\t\t\t   --&gt; 清除缓存</div><div class=\"line\">hexo new &quot;title&quot; \t\t\t--&gt; 创建新的文章，文件在`hexo_blog/source/_posts`文件夹下</div></pre></td></tr></table></figure>\n<hr>\n<p>以上</p>\n","excerpt":"<p>之前我们已经安装好了<code>hexo</code>，接下来就是初始化了。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">hexo init &lt;dir&gt;</div><div class=\"line\">cd &lt;dir&gt;</div><div class=\"line\">npm install</div></pre></td></tr></table></figure></p>","more":"<p><img src=\"/image/hexo/hexo_init.png\" alt=\"hexo_install\"><br><img src=\"/image/hexo/npm_install.png\" alt=\"hexo_install\"><br>现在hexo就安装完成了，在存放hexo的文件夹目录下执行 <code>hexo s</code>，就可以启动hexo的服务，启动之后有提示，在浏览器中输入<code>127.0.0.1:4000</code>就可以看到最初的效果了，如下<br><img src=\"/image/hexo/hexo_hello.png\" alt=\"hello_world\"></p>\n<hr>\n<p>　　对了，还要发布到github。前提准备是在上一篇中已经创建好了github的仓库。接下来在存放hexo资源的文件夹下(以下用 heox_blog这个文件夹代替)执行<br><code>npm install hexo-deployer-git --save</code><br>修改hexo_blog文件夹下的<code>_config.yml</code>文件<br>在末尾添加<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">deploy:</div><div class=\"line\">  type: git</div><div class=\"line\">  repository: git@github.com:your name/your name.github.io.git</div><div class=\"line\">  branch: master</div></pre></td></tr></table></figure></p>\n<p>注意，type，repository，branch冒号后面都有一个空格。保存后执行<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">hexo clean</div><div class=\"line\">hexo g</div><div class=\"line\">hexo d</div></pre></td></tr></table></figure></p>\n<p>就可以将写好的博客部署到github上了。（部署到github时建议按照顺序执行以上命令）</p>\n<hr>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">hexo generate == hexo g    --&gt;将md文件解析成静态的html文件</div><div class=\"line\">hexo deploy == hexo d      --&gt; 将文件部署到github</div><div class=\"line\">hexo server == hexo s      --&gt; 启动本地hexo服务</div><div class=\"line\">hexo clean\t\t\t\t   --&gt; 清除缓存</div><div class=\"line\">hexo new &quot;title&quot; \t\t\t--&gt; 创建新的文章，文件在`hexo_blog/source/_posts`文件夹下</div></pre></td></tr></table></figure>\n<hr>\n<p>以上</p>"},{"title":"《我的安卓爬坑之旅》--融云IM遇到的坑","date":"2016-12-01T07:20:47.000Z","_content":"这篇博客是关于融云IM使用中遇到的问题，不算是坑，只能说是注意事项吧\n<!--more-->\n#### 后端向\n  在自己的应用\"OurStories\"中打算接入IM即时通讯功能，就使用了融云提供的sdk，需要自己写后台获取Token，这个比较简单，官方给出了Demo，按照自己的习惯，把demo里面的方法封装一下就可以使用了。\n#### Token向\n1. 获取Token时可以在融云后台（登录自己帐号，控制台）可以设置Token有效期。\n2. 在初始情况下开发环境下最多只能有100个测试用户，当达到上限后可以点击添加用户的按钮，每次添加20人上限，生产环境没有上限。\n3. 开发环境和生产环境在融云后台是两套独立的环境，拥有不同的`App Key`和`App Secret`，当产品上线时不要忘记切换自己服务器和app的配置，另外，app的`App Key`和服务器端的`App Key`要一致。\n#### 前端 Android向\n1. 由于集成融云的聊天界面个会话列表界面都是Fragment形式，在集成的过程中，包含该Fragment的Activity要继承自**FragmentActivity**，否则在开启聊天界面的时候会报如下异常：\n```java\nCaused by: android.view.InflateException: Binary XML file line #6: Binary XML file line #6: Error inflating class fragment \nCaused by: android.view.InflateException: Binary XML file line #6: Error inflating class fragment \nCaused by: android.app.Fragment$InstantiationException: Trying to instantiate a class io.rong.imkit.fragment.ConversationFragment that is not a Fragment \nCaused by: java.lang.ClassCastException \n```\n2. 融云在初始化的时候建议放在Applicatuon中进行，但是融云会开启3个进程，每个进程都会执行Application的OnCreate方法，建议在初始化自己的配置时检测以下进程，在自己的主进程中初始化自己的配置.\n3. 千万不要忘记配置包含融云Fragment的Activity的`<intent-filter>`\n4. 融云不同步也不会保存应用下的好友关系，需要自己的服务器保存\n5. 注意阅读融云的开发文档，注意每一个细节\n6. 有问题先去搜知识库，然后提工单。提工单的时候尽可能详细的描述自己的开发环境，遇到的问题以及异常日志。\n7. 非必要情况下，不要自己去反编译出融云的sdk，然后自己使用用其中的代码。\n\n","source":"_posts/《我的安卓爬坑之旅》-融云IM遇到的坑.md","raw":"---\ntitle: 《我的安卓爬坑之旅》--融云IM遇到的坑\ndate: 2016-12-01 15:20:47\ntags: [Android爬坑之旅,Android,融云IM]\n---\n这篇博客是关于融云IM使用中遇到的问题，不算是坑，只能说是注意事项吧\n<!--more-->\n#### 后端向\n  在自己的应用\"OurStories\"中打算接入IM即时通讯功能，就使用了融云提供的sdk，需要自己写后台获取Token，这个比较简单，官方给出了Demo，按照自己的习惯，把demo里面的方法封装一下就可以使用了。\n#### Token向\n1. 获取Token时可以在融云后台（登录自己帐号，控制台）可以设置Token有效期。\n2. 在初始情况下开发环境下最多只能有100个测试用户，当达到上限后可以点击添加用户的按钮，每次添加20人上限，生产环境没有上限。\n3. 开发环境和生产环境在融云后台是两套独立的环境，拥有不同的`App Key`和`App Secret`，当产品上线时不要忘记切换自己服务器和app的配置，另外，app的`App Key`和服务器端的`App Key`要一致。\n#### 前端 Android向\n1. 由于集成融云的聊天界面个会话列表界面都是Fragment形式，在集成的过程中，包含该Fragment的Activity要继承自**FragmentActivity**，否则在开启聊天界面的时候会报如下异常：\n```java\nCaused by: android.view.InflateException: Binary XML file line #6: Binary XML file line #6: Error inflating class fragment \nCaused by: android.view.InflateException: Binary XML file line #6: Error inflating class fragment \nCaused by: android.app.Fragment$InstantiationException: Trying to instantiate a class io.rong.imkit.fragment.ConversationFragment that is not a Fragment \nCaused by: java.lang.ClassCastException \n```\n2. 融云在初始化的时候建议放在Applicatuon中进行，但是融云会开启3个进程，每个进程都会执行Application的OnCreate方法，建议在初始化自己的配置时检测以下进程，在自己的主进程中初始化自己的配置.\n3. 千万不要忘记配置包含融云Fragment的Activity的`<intent-filter>`\n4. 融云不同步也不会保存应用下的好友关系，需要自己的服务器保存\n5. 注意阅读融云的开发文档，注意每一个细节\n6. 有问题先去搜知识库，然后提工单。提工单的时候尽可能详细的描述自己的开发环境，遇到的问题以及异常日志。\n7. 非必要情况下，不要自己去反编译出融云的sdk，然后自己使用用其中的代码。\n\n","slug":"《我的安卓爬坑之旅》-融云IM遇到的坑","published":1,"updated":"2017-12-30T13:13:07.230Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjbvyt3v0000xscdgs1h1rrv3","content":"<p>这篇博客是关于融云IM使用中遇到的问题，不算是坑，只能说是注意事项吧<br><a id=\"more\"></a></p>\n<h4 id=\"后端向\"><a href=\"#后端向\" class=\"headerlink\" title=\"后端向\"></a>后端向</h4><p>  在自己的应用”OurStories”中打算接入IM即时通讯功能，就使用了融云提供的sdk，需要自己写后台获取Token，这个比较简单，官方给出了Demo，按照自己的习惯，把demo里面的方法封装一下就可以使用了。</p>\n<h4 id=\"Token向\"><a href=\"#Token向\" class=\"headerlink\" title=\"Token向\"></a>Token向</h4><ol>\n<li>获取Token时可以在融云后台（登录自己帐号，控制台）可以设置Token有效期。</li>\n<li>在初始情况下开发环境下最多只能有100个测试用户，当达到上限后可以点击添加用户的按钮，每次添加20人上限，生产环境没有上限。</li>\n<li>开发环境和生产环境在融云后台是两套独立的环境，拥有不同的<code>App Key</code>和<code>App Secret</code>，当产品上线时不要忘记切换自己服务器和app的配置，另外，app的<code>App Key</code>和服务器端的<code>App Key</code>要一致。<h4 id=\"前端-Android向\"><a href=\"#前端-Android向\" class=\"headerlink\" title=\"前端 Android向\"></a>前端 Android向</h4></li>\n<li><p>由于集成融云的聊天界面个会话列表界面都是Fragment形式，在集成的过程中，包含该Fragment的Activity要继承自<strong>FragmentActivity</strong>，否则在开启聊天界面的时候会报如下异常：</p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">Caused by: android.view.InflateException: Binary XML file line #6: Binary XML file line #6: Error inflating class fragment </div><div class=\"line\">Caused by: android.view.InflateException: Binary XML file line #6: Error inflating class fragment </div><div class=\"line\">Caused by: android.app.Fragment$InstantiationException: Trying to instantiate a class io.rong.imkit.fragment.ConversationFragment that is not a Fragment </div><div class=\"line\">Caused by: java.lang.ClassCastException</div></pre></td></tr></table></figure>\n</li>\n<li><p>融云在初始化的时候建议放在Applicatuon中进行，但是融云会开启3个进程，每个进程都会执行Application的OnCreate方法，建议在初始化自己的配置时检测以下进程，在自己的主进程中初始化自己的配置.</p>\n</li>\n<li>千万不要忘记配置包含融云Fragment的Activity的<code>&lt;intent-filter&gt;</code></li>\n<li>融云不同步也不会保存应用下的好友关系，需要自己的服务器保存</li>\n<li>注意阅读融云的开发文档，注意每一个细节</li>\n<li>有问题先去搜知识库，然后提工单。提工单的时候尽可能详细的描述自己的开发环境，遇到的问题以及异常日志。</li>\n<li>非必要情况下，不要自己去反编译出融云的sdk，然后自己使用用其中的代码。</li>\n</ol>\n","excerpt":"<p>这篇博客是关于融云IM使用中遇到的问题，不算是坑，只能说是注意事项吧<br>","more":"</p>\n<h4 id=\"后端向\"><a href=\"#后端向\" class=\"headerlink\" title=\"后端向\"></a>后端向</h4><p>  在自己的应用”OurStories”中打算接入IM即时通讯功能，就使用了融云提供的sdk，需要自己写后台获取Token，这个比较简单，官方给出了Demo，按照自己的习惯，把demo里面的方法封装一下就可以使用了。</p>\n<h4 id=\"Token向\"><a href=\"#Token向\" class=\"headerlink\" title=\"Token向\"></a>Token向</h4><ol>\n<li>获取Token时可以在融云后台（登录自己帐号，控制台）可以设置Token有效期。</li>\n<li>在初始情况下开发环境下最多只能有100个测试用户，当达到上限后可以点击添加用户的按钮，每次添加20人上限，生产环境没有上限。</li>\n<li>开发环境和生产环境在融云后台是两套独立的环境，拥有不同的<code>App Key</code>和<code>App Secret</code>，当产品上线时不要忘记切换自己服务器和app的配置，另外，app的<code>App Key</code>和服务器端的<code>App Key</code>要一致。<h4 id=\"前端-Android向\"><a href=\"#前端-Android向\" class=\"headerlink\" title=\"前端 Android向\"></a>前端 Android向</h4></li>\n<li><p>由于集成融云的聊天界面个会话列表界面都是Fragment形式，在集成的过程中，包含该Fragment的Activity要继承自<strong>FragmentActivity</strong>，否则在开启聊天界面的时候会报如下异常：</p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">Caused by: android.view.InflateException: Binary XML file line #6: Binary XML file line #6: Error inflating class fragment </div><div class=\"line\">Caused by: android.view.InflateException: Binary XML file line #6: Error inflating class fragment </div><div class=\"line\">Caused by: android.app.Fragment$InstantiationException: Trying to instantiate a class io.rong.imkit.fragment.ConversationFragment that is not a Fragment </div><div class=\"line\">Caused by: java.lang.ClassCastException</div></pre></td></tr></table></figure>\n</li>\n<li><p>融云在初始化的时候建议放在Applicatuon中进行，但是融云会开启3个进程，每个进程都会执行Application的OnCreate方法，建议在初始化自己的配置时检测以下进程，在自己的主进程中初始化自己的配置.</p>\n</li>\n<li>千万不要忘记配置包含融云Fragment的Activity的<code>&lt;intent-filter&gt;</code></li>\n<li>融云不同步也不会保存应用下的好友关系，需要自己的服务器保存</li>\n<li>注意阅读融云的开发文档，注意每一个细节</li>\n<li>有问题先去搜知识库，然后提工单。提工单的时候尽可能详细的描述自己的开发环境，遇到的问题以及异常日志。</li>\n<li>非必要情况下，不要自己去反编译出融云的sdk，然后自己使用用其中的代码。</li>\n</ol>"},{"title":"hexo+gitpage搭建自己的博客(三)","date":"2016-10-30T13:05:54.000Z","toc":true,"_content":"前两篇介绍了怎么用gitpage+github搭建自己的博客，这次主要介绍怎么更换主题和加入评论、统计等。\n***\n<!-- more -->\n**更换主题**\n首先将 `yilia`主题从github克隆到本地`thems`文件夹里面\n```git\ngit clone https://github.com/litten/hexo-theme-yilia.git themes/yilia\n```\n看一下当前博客目录的结构\n![目录结构](/image/hexo/Catalog.png)\n\n其中`_config.yml`文件就是整个`hexo`系统的主配置文件\n另外刚才克隆的`yilia`主题就在`thems`文件夹下面\n首先修改根目录下的`_config.yml`文件，切换到`yilia`主题\n大概在文件的63-65行左右的位置\n```yml\n# Extensions\n## Plugins: https://hexo.io/plugins/\n## Themes: https://hexo.io/themes/\ntheme: yilia\n```\n将原来的`theme`后面的 `landscape`主题改成`yilia`\n重启服务后主题就切换到`yilia`了，下面是`thems/yilia`文件夹下的`_config.yml`文件的配置.\n\n```yml\n\n# Header\nmenu:\n  主页: /\n  简历: \"\"\n\n# SubNav\nsubnav:\n  github: \"https://github.com/huangyuanlove\"\n  #weibo: \"#\"\n  #rss: \"#\"\n  zhihu: \"https://www.zhihu.com/people/huangyuan_xuan\"\n  #douban: \"#\"\n  #mail: \"#\"\n  #facebook: \"#\"\n  #google: \"#\"\n  #twitter: \"#\"\n  #linkedin: \"#\"\n\nrss: /atom.xml\n\n# 是否需要修改 root 路径\n# 如果您的网站存放在子目录中，例如 http://yoursite.com/blog，\n# 请将您的 url 设为 http://yoursite.com/blog 并把 root 设为 /blog/。\nroot:\n\n# Content\nexcerpt_link: more\nfancybox: true\nmathjax: false\n\n# 是否开启动画效果\nanimate: true\n\n# 是否在新窗口打开链接\nopen_in_new: false\n\n# 自己添加的百度统计\nbaidu_tongji: true\n\n# 网站icon\nfavicon: favicon.ico\n\n#你的头像url\navatar: \"\"\n\n#是否开启分享\nshare_jia: false\nshare_addthis: false\n\n#多说评论\nduoshuo:\n\n# 如不需要，将该项置为false\n# 比如\n#smart_menu:\n#  friends: false\n\nsmart_menu:\n  innerArchive: '所有文章'\n  tagcloud: '标签'\n  #friends: '友链'\n  aboutme: '关于我'\n\nfriends:\naboutme: <a href=\"http://www.huangyuanlove.com\">什么懂都点的Android攻城狮</a>\n```\n***\n以上是`yilia`主题的配置说明\n**接入百度统计**\n首先到[百度统计平台](http://tongji.baidu.com/web/welcome/login) 申请一个帐号，按照提示填写完自己网站的信息，在网站中心左边栏点击代码获取，得到统计访问量的代码。\n新建`themes/yilia/layout/_partial/baidu_tongji.ejs`文件，内容如下：\n```JavaScript\n<% if (theme.baidu_tongji) { %>\n<script>\n  统计访问量的代码\n</script>\n<% } %>\n```\n然后编辑`themes/yilia/_config.yml`文件，添加一行`baidu_tongji: true`，注意冒号后面有空格。\n编辑`themes/yilia/layout/_partial/head.ejs` 在 `</head>` 前添加\n`<%- partial(\"baidu_tongji\") %>`\n重启部署代码即可。\n安装完成20分钟后就可以在后台看到统计的信息了，如果看不到统计信息，请检查是否配置正确，检测方式点[这里](http://tieba.baidu.com/p/3775626020) http://tieba.baidu.com/p/3775626020\n以上是添加百度统计的方式\n**添加多说评论**\n到[多说](http://duoshuo.com) 申请帐号\n使用三方登录完成后，点击`我要安装`，根据提示填写完信息\n![多说](/image/hexo/duoshuo.png)\n记住站点名称，将站点名称填入 `thems/yilia/_config.yml`文件里面多说评论之后，注意冒号后面有空格。\n保存重新部署就可以看到评论框了。\n至于评论样式，可以在后台管理页面中的设置选项中设置。后台管理中还可以管理评论内容，添加敏感词汇过滤等。\n以上是添加多说评论的过程。\n***\n以上\n","source":"_posts/hexo-gitpage搭建自己的博客-三.md","raw":"---\ntitle: hexo+gitpage搭建自己的博客(三)\ndate: 2016-10-30 21:05:54\ntags: [blog,gitpage,hexo]\ntoc: true\n---\n前两篇介绍了怎么用gitpage+github搭建自己的博客，这次主要介绍怎么更换主题和加入评论、统计等。\n***\n<!-- more -->\n**更换主题**\n首先将 `yilia`主题从github克隆到本地`thems`文件夹里面\n```git\ngit clone https://github.com/litten/hexo-theme-yilia.git themes/yilia\n```\n看一下当前博客目录的结构\n![目录结构](/image/hexo/Catalog.png)\n\n其中`_config.yml`文件就是整个`hexo`系统的主配置文件\n另外刚才克隆的`yilia`主题就在`thems`文件夹下面\n首先修改根目录下的`_config.yml`文件，切换到`yilia`主题\n大概在文件的63-65行左右的位置\n```yml\n# Extensions\n## Plugins: https://hexo.io/plugins/\n## Themes: https://hexo.io/themes/\ntheme: yilia\n```\n将原来的`theme`后面的 `landscape`主题改成`yilia`\n重启服务后主题就切换到`yilia`了，下面是`thems/yilia`文件夹下的`_config.yml`文件的配置.\n\n```yml\n\n# Header\nmenu:\n  主页: /\n  简历: \"\"\n\n# SubNav\nsubnav:\n  github: \"https://github.com/huangyuanlove\"\n  #weibo: \"#\"\n  #rss: \"#\"\n  zhihu: \"https://www.zhihu.com/people/huangyuan_xuan\"\n  #douban: \"#\"\n  #mail: \"#\"\n  #facebook: \"#\"\n  #google: \"#\"\n  #twitter: \"#\"\n  #linkedin: \"#\"\n\nrss: /atom.xml\n\n# 是否需要修改 root 路径\n# 如果您的网站存放在子目录中，例如 http://yoursite.com/blog，\n# 请将您的 url 设为 http://yoursite.com/blog 并把 root 设为 /blog/。\nroot:\n\n# Content\nexcerpt_link: more\nfancybox: true\nmathjax: false\n\n# 是否开启动画效果\nanimate: true\n\n# 是否在新窗口打开链接\nopen_in_new: false\n\n# 自己添加的百度统计\nbaidu_tongji: true\n\n# 网站icon\nfavicon: favicon.ico\n\n#你的头像url\navatar: \"\"\n\n#是否开启分享\nshare_jia: false\nshare_addthis: false\n\n#多说评论\nduoshuo:\n\n# 如不需要，将该项置为false\n# 比如\n#smart_menu:\n#  friends: false\n\nsmart_menu:\n  innerArchive: '所有文章'\n  tagcloud: '标签'\n  #friends: '友链'\n  aboutme: '关于我'\n\nfriends:\naboutme: <a href=\"http://www.huangyuanlove.com\">什么懂都点的Android攻城狮</a>\n```\n***\n以上是`yilia`主题的配置说明\n**接入百度统计**\n首先到[百度统计平台](http://tongji.baidu.com/web/welcome/login) 申请一个帐号，按照提示填写完自己网站的信息，在网站中心左边栏点击代码获取，得到统计访问量的代码。\n新建`themes/yilia/layout/_partial/baidu_tongji.ejs`文件，内容如下：\n```JavaScript\n<% if (theme.baidu_tongji) { %>\n<script>\n  统计访问量的代码\n</script>\n<% } %>\n```\n然后编辑`themes/yilia/_config.yml`文件，添加一行`baidu_tongji: true`，注意冒号后面有空格。\n编辑`themes/yilia/layout/_partial/head.ejs` 在 `</head>` 前添加\n`<%- partial(\"baidu_tongji\") %>`\n重启部署代码即可。\n安装完成20分钟后就可以在后台看到统计的信息了，如果看不到统计信息，请检查是否配置正确，检测方式点[这里](http://tieba.baidu.com/p/3775626020) http://tieba.baidu.com/p/3775626020\n以上是添加百度统计的方式\n**添加多说评论**\n到[多说](http://duoshuo.com) 申请帐号\n使用三方登录完成后，点击`我要安装`，根据提示填写完信息\n![多说](/image/hexo/duoshuo.png)\n记住站点名称，将站点名称填入 `thems/yilia/_config.yml`文件里面多说评论之后，注意冒号后面有空格。\n保存重新部署就可以看到评论框了。\n至于评论样式，可以在后台管理页面中的设置选项中设置。后台管理中还可以管理评论内容，添加敏感词汇过滤等。\n以上是添加多说评论的过程。\n***\n以上\n","slug":"hexo-gitpage搭建自己的博客-三","published":1,"updated":"2017-07-02T08:48:57.270Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjbvyt3v1000yscdg4fiiasu5","content":"<p>前两篇介绍了怎么用gitpage+github搭建自己的博客，这次主要介绍怎么更换主题和加入评论、统计等。</p>\n<hr>\n<a id=\"more\"></a>\n<p><strong>更换主题</strong><br>首先将 <code>yilia</code>主题从github克隆到本地<code>thems</code>文件夹里面<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">git clone https://github.com/litten/hexo-theme-yilia.git themes/yilia</div></pre></td></tr></table></figure></p>\n<p>看一下当前博客目录的结构<br><img src=\"/image/hexo/Catalog.png\" alt=\"目录结构\"></p>\n<p>其中<code>_config.yml</code>文件就是整个<code>hexo</code>系统的主配置文件<br>另外刚才克隆的<code>yilia</code>主题就在<code>thems</code>文件夹下面<br>首先修改根目录下的<code>_config.yml</code>文件，切换到<code>yilia</code>主题<br>大概在文件的63-65行左右的位置<br><figure class=\"highlight yml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\"># Extensions</span></div><div class=\"line\"><span class=\"comment\">## Plugins: https://hexo.io/plugins/</span></div><div class=\"line\"><span class=\"comment\">## Themes: https://hexo.io/themes/</span></div><div class=\"line\"><span class=\"attr\">theme:</span> yilia</div></pre></td></tr></table></figure></p>\n<p>将原来的<code>theme</code>后面的 <code>landscape</code>主题改成<code>yilia</code><br>重启服务后主题就切换到<code>yilia</code>了，下面是<code>thems/yilia</code>文件夹下的<code>_config.yml</code>文件的配置.</p>\n<figure class=\"highlight yml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\"><span class=\"comment\"># Header</span></div><div class=\"line\"><span class=\"attr\">menu:</span></div><div class=\"line\">  主页: /</div><div class=\"line\">  简历: <span class=\"string\">\"\"</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\"># SubNav</span></div><div class=\"line\"><span class=\"attr\">subnav:</span></div><div class=\"line\"><span class=\"attr\">  github:</span> <span class=\"string\">\"https://github.com/huangyuanlove\"</span></div><div class=\"line\">  <span class=\"comment\">#weibo: \"#\"</span></div><div class=\"line\">  <span class=\"comment\">#rss: \"#\"</span></div><div class=\"line\"><span class=\"attr\">  zhihu:</span> <span class=\"string\">\"https://www.zhihu.com/people/huangyuan_xuan\"</span></div><div class=\"line\">  <span class=\"comment\">#douban: \"#\"</span></div><div class=\"line\">  <span class=\"comment\">#mail: \"#\"</span></div><div class=\"line\">  <span class=\"comment\">#facebook: \"#\"</span></div><div class=\"line\">  <span class=\"comment\">#google: \"#\"</span></div><div class=\"line\">  <span class=\"comment\">#twitter: \"#\"</span></div><div class=\"line\">  <span class=\"comment\">#linkedin: \"#\"</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"attr\">rss:</span> /atom.xml</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\"># 是否需要修改 root 路径</span></div><div class=\"line\"><span class=\"comment\"># 如果您的网站存放在子目录中，例如 http://yoursite.com/blog，</span></div><div class=\"line\"><span class=\"comment\"># 请将您的 url 设为 http://yoursite.com/blog 并把 root 设为 /blog/。</span></div><div class=\"line\"><span class=\"attr\">root:</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\"># Content</span></div><div class=\"line\"><span class=\"attr\">excerpt_link:</span> more</div><div class=\"line\"><span class=\"attr\">fancybox:</span> <span class=\"literal\">true</span></div><div class=\"line\"><span class=\"attr\">mathjax:</span> <span class=\"literal\">false</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\"># 是否开启动画效果</span></div><div class=\"line\"><span class=\"attr\">animate:</span> <span class=\"literal\">true</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\"># 是否在新窗口打开链接</span></div><div class=\"line\"><span class=\"attr\">open_in_new:</span> <span class=\"literal\">false</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\"># 自己添加的百度统计</span></div><div class=\"line\"><span class=\"attr\">baidu_tongji:</span> <span class=\"literal\">true</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\"># 网站icon</span></div><div class=\"line\"><span class=\"attr\">favicon:</span> favicon.ico</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">#你的头像url</span></div><div class=\"line\"><span class=\"attr\">avatar:</span> <span class=\"string\">\"\"</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">#是否开启分享</span></div><div class=\"line\"><span class=\"attr\">share_jia:</span> <span class=\"literal\">false</span></div><div class=\"line\"><span class=\"attr\">share_addthis:</span> <span class=\"literal\">false</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">#多说评论</span></div><div class=\"line\"><span class=\"attr\">duoshuo:</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\"># 如不需要，将该项置为false</span></div><div class=\"line\"><span class=\"comment\"># 比如</span></div><div class=\"line\"><span class=\"comment\">#smart_menu:</span></div><div class=\"line\"><span class=\"comment\">#  friends: false</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"attr\">smart_menu:</span></div><div class=\"line\"><span class=\"attr\">  innerArchive:</span> <span class=\"string\">'所有文章'</span></div><div class=\"line\"><span class=\"attr\">  tagcloud:</span> <span class=\"string\">'标签'</span></div><div class=\"line\">  <span class=\"comment\">#friends: '友链'</span></div><div class=\"line\"><span class=\"attr\">  aboutme:</span> <span class=\"string\">'关于我'</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"attr\">friends:</span></div><div class=\"line\"><span class=\"attr\">aboutme:</span> &lt;a href=<span class=\"string\">\"http://www.huangyuanlove.com\"</span>&gt;什么懂都点的Android攻城狮&lt;/a<span class=\"string\">&gt;</span></div></pre></td></tr></table></figure>\n<hr>\n<p>以上是<code>yilia</code>主题的配置说明<br><strong>接入百度统计</strong><br>首先到<a href=\"http://tongji.baidu.com/web/welcome/login\" target=\"_blank\" rel=\"external\">百度统计平台</a> 申请一个帐号，按照提示填写完自己网站的信息，在网站中心左边栏点击代码获取，得到统计访问量的代码。<br>新建<code>themes/yilia/layout/_partial/baidu_tongji.ejs</code>文件，内容如下：<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;% <span class=\"keyword\">if</span> (theme.baidu_tongji) &#123; %&gt;</div><div class=\"line\"><span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span><span class=\"undefined\"></span></span></div><div class=\"line\">  统计访问量的代码</div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></div><div class=\"line\">&lt;% &#125; %&gt;</div></pre></td></tr></table></figure></p>\n<p>然后编辑<code>themes/yilia/_config.yml</code>文件，添加一行<code>baidu_tongji: true</code>，注意冒号后面有空格。<br>编辑<code>themes/yilia/layout/_partial/head.ejs</code> 在 <code>&lt;/head&gt;</code> 前添加<br><code>&lt;%- partial(&quot;baidu_tongji&quot;) %&gt;</code><br>重启部署代码即可。<br>安装完成20分钟后就可以在后台看到统计的信息了，如果看不到统计信息，请检查是否配置正确，检测方式点<a href=\"http://tieba.baidu.com/p/3775626020\" target=\"_blank\" rel=\"external\">这里</a> <a href=\"http://tieba.baidu.com/p/3775626020\" target=\"_blank\" rel=\"external\">http://tieba.baidu.com/p/3775626020</a><br>以上是添加百度统计的方式<br><strong>添加多说评论</strong><br>到<a href=\"http://duoshuo.com\" target=\"_blank\" rel=\"external\">多说</a> 申请帐号<br>使用三方登录完成后，点击<code>我要安装</code>，根据提示填写完信息<br><img src=\"/image/hexo/duoshuo.png\" alt=\"多说\"><br>记住站点名称，将站点名称填入 <code>thems/yilia/_config.yml</code>文件里面多说评论之后，注意冒号后面有空格。<br>保存重新部署就可以看到评论框了。<br>至于评论样式，可以在后台管理页面中的设置选项中设置。后台管理中还可以管理评论内容，添加敏感词汇过滤等。<br>以上是添加多说评论的过程。</p>\n<hr>\n<p>以上</p>\n","excerpt":"<p>前两篇介绍了怎么用gitpage+github搭建自己的博客，这次主要介绍怎么更换主题和加入评论、统计等。</p>\n<hr>","more":"<p><strong>更换主题</strong><br>首先将 <code>yilia</code>主题从github克隆到本地<code>thems</code>文件夹里面<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">git clone https://github.com/litten/hexo-theme-yilia.git themes/yilia</div></pre></td></tr></table></figure></p>\n<p>看一下当前博客目录的结构<br><img src=\"/image/hexo/Catalog.png\" alt=\"目录结构\"></p>\n<p>其中<code>_config.yml</code>文件就是整个<code>hexo</code>系统的主配置文件<br>另外刚才克隆的<code>yilia</code>主题就在<code>thems</code>文件夹下面<br>首先修改根目录下的<code>_config.yml</code>文件，切换到<code>yilia</code>主题<br>大概在文件的63-65行左右的位置<br><figure class=\"highlight yml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\"># Extensions</span></div><div class=\"line\"><span class=\"comment\">## Plugins: https://hexo.io/plugins/</span></div><div class=\"line\"><span class=\"comment\">## Themes: https://hexo.io/themes/</span></div><div class=\"line\"><span class=\"attr\">theme:</span> yilia</div></pre></td></tr></table></figure></p>\n<p>将原来的<code>theme</code>后面的 <code>landscape</code>主题改成<code>yilia</code><br>重启服务后主题就切换到<code>yilia</code>了，下面是<code>thems/yilia</code>文件夹下的<code>_config.yml</code>文件的配置.</p>\n<figure class=\"highlight yml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\"><span class=\"comment\"># Header</span></div><div class=\"line\"><span class=\"attr\">menu:</span></div><div class=\"line\">  主页: /</div><div class=\"line\">  简历: <span class=\"string\">\"\"</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\"># SubNav</span></div><div class=\"line\"><span class=\"attr\">subnav:</span></div><div class=\"line\"><span class=\"attr\">  github:</span> <span class=\"string\">\"https://github.com/huangyuanlove\"</span></div><div class=\"line\">  <span class=\"comment\">#weibo: \"#\"</span></div><div class=\"line\">  <span class=\"comment\">#rss: \"#\"</span></div><div class=\"line\"><span class=\"attr\">  zhihu:</span> <span class=\"string\">\"https://www.zhihu.com/people/huangyuan_xuan\"</span></div><div class=\"line\">  <span class=\"comment\">#douban: \"#\"</span></div><div class=\"line\">  <span class=\"comment\">#mail: \"#\"</span></div><div class=\"line\">  <span class=\"comment\">#facebook: \"#\"</span></div><div class=\"line\">  <span class=\"comment\">#google: \"#\"</span></div><div class=\"line\">  <span class=\"comment\">#twitter: \"#\"</span></div><div class=\"line\">  <span class=\"comment\">#linkedin: \"#\"</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"attr\">rss:</span> /atom.xml</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\"># 是否需要修改 root 路径</span></div><div class=\"line\"><span class=\"comment\"># 如果您的网站存放在子目录中，例如 http://yoursite.com/blog，</span></div><div class=\"line\"><span class=\"comment\"># 请将您的 url 设为 http://yoursite.com/blog 并把 root 设为 /blog/。</span></div><div class=\"line\"><span class=\"attr\">root:</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\"># Content</span></div><div class=\"line\"><span class=\"attr\">excerpt_link:</span> more</div><div class=\"line\"><span class=\"attr\">fancybox:</span> <span class=\"literal\">true</span></div><div class=\"line\"><span class=\"attr\">mathjax:</span> <span class=\"literal\">false</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\"># 是否开启动画效果</span></div><div class=\"line\"><span class=\"attr\">animate:</span> <span class=\"literal\">true</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\"># 是否在新窗口打开链接</span></div><div class=\"line\"><span class=\"attr\">open_in_new:</span> <span class=\"literal\">false</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\"># 自己添加的百度统计</span></div><div class=\"line\"><span class=\"attr\">baidu_tongji:</span> <span class=\"literal\">true</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\"># 网站icon</span></div><div class=\"line\"><span class=\"attr\">favicon:</span> favicon.ico</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">#你的头像url</span></div><div class=\"line\"><span class=\"attr\">avatar:</span> <span class=\"string\">\"\"</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">#是否开启分享</span></div><div class=\"line\"><span class=\"attr\">share_jia:</span> <span class=\"literal\">false</span></div><div class=\"line\"><span class=\"attr\">share_addthis:</span> <span class=\"literal\">false</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">#多说评论</span></div><div class=\"line\"><span class=\"attr\">duoshuo:</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\"># 如不需要，将该项置为false</span></div><div class=\"line\"><span class=\"comment\"># 比如</span></div><div class=\"line\"><span class=\"comment\">#smart_menu:</span></div><div class=\"line\"><span class=\"comment\">#  friends: false</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"attr\">smart_menu:</span></div><div class=\"line\"><span class=\"attr\">  innerArchive:</span> <span class=\"string\">'所有文章'</span></div><div class=\"line\"><span class=\"attr\">  tagcloud:</span> <span class=\"string\">'标签'</span></div><div class=\"line\">  <span class=\"comment\">#friends: '友链'</span></div><div class=\"line\"><span class=\"attr\">  aboutme:</span> <span class=\"string\">'关于我'</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"attr\">friends:</span></div><div class=\"line\"><span class=\"attr\">aboutme:</span> &lt;a href=<span class=\"string\">\"http://www.huangyuanlove.com\"</span>&gt;什么懂都点的Android攻城狮&lt;/a<span class=\"string\">&gt;</span></div></pre></td></tr></table></figure>\n<hr>\n<p>以上是<code>yilia</code>主题的配置说明<br><strong>接入百度统计</strong><br>首先到<a href=\"http://tongji.baidu.com/web/welcome/login\">百度统计平台</a> 申请一个帐号，按照提示填写完自己网站的信息，在网站中心左边栏点击代码获取，得到统计访问量的代码。<br>新建<code>themes/yilia/layout/_partial/baidu_tongji.ejs</code>文件，内容如下：<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;% <span class=\"keyword\">if</span> (theme.baidu_tongji) &#123; %&gt;</div><div class=\"line\"><span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span><span class=\"undefined\"></div><div class=\"line\">  统计访问量的代码</div><div class=\"line\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span></div><div class=\"line\">&lt;% &#125; %&gt;</div></pre></td></tr></table></figure></p>\n<p>然后编辑<code>themes/yilia/_config.yml</code>文件，添加一行<code>baidu_tongji: true</code>，注意冒号后面有空格。<br>编辑<code>themes/yilia/layout/_partial/head.ejs</code> 在 <code>&lt;/head&gt;</code> 前添加<br><code>&lt;%- partial(&quot;baidu_tongji&quot;) %&gt;</code><br>重启部署代码即可。<br>安装完成20分钟后就可以在后台看到统计的信息了，如果看不到统计信息，请检查是否配置正确，检测方式点<a href=\"http://tieba.baidu.com/p/3775626020\">这里</a> <a href=\"http://tieba.baidu.com/p/3775626020\">http://tieba.baidu.com/p/3775626020</a><br>以上是添加百度统计的方式<br><strong>添加多说评论</strong><br>到<a href=\"http://duoshuo.com\">多说</a> 申请帐号<br>使用三方登录完成后，点击<code>我要安装</code>，根据提示填写完信息<br><img src=\"/image/hexo/duoshuo.png\" alt=\"多说\"><br>记住站点名称，将站点名称填入 <code>thems/yilia/_config.yml</code>文件里面多说评论之后，注意冒号后面有空格。<br>保存重新部署就可以看到评论框了。<br>至于评论样式，可以在后台管理页面中的设置选项中设置。后台管理中还可以管理评论内容，添加敏感词汇过滤等。<br>以上是添加多说评论的过程。</p>\n<hr>\n<p>以上</p>"},{"title":"《我的安卓爬坑之旅》-高德地图遇到的坑(2)","date":"2017-02-25T03:57:23.000Z","_content":"这篇博客是关于高德使用中遇到的问题，或许是因为开发文档中没有说明，或许是因为自己段位不够，反正就是遇到坑了。\n<!--more-->\n#### 关于定位点和覆盖物\n　　有这么一个业务需求：定位手机所在位置成功后，请求服务器数据，服务器返回手机所在地点指定范围内的的点，然后把这些点添加到地图上。\n刚开始还没有什么问题，按照官网的demo来做的，到后来数据量多的时候就出现了marker重叠的问题。当然，marker点多的话，重叠也是无法避免的，但是，把定位的标记也给覆盖掉了，这就有点不好了。也没有查到相关的api，demo上添加定位点也是用的marker，估计都是同一级别，按照添加的先后顺序覆盖叠加。\n后来找到了一个方法 `mLocMarker.setToTop();`这样可以把某个marker设置到最高的层级显示。还有一个方法是\n``` java\n    public void setDisplayLevel(int var1) {\n        IMarkerAction var2 = this.a.getIMarkerAction();\n        if(var2 != null) {\n            var2.setDisplayLevel(var1);\n        }\n    }\n```\n这个是Marker对象中的一个方法，但是从官方下载下来的文档中并没有提到这个方法，自己也没有去使用。了解过的朋友可以在评论区回复我一下，谢谢。\n#### AndroidStudio第二次编译之后地图不显示\n　　AS2.2版本加了 `Instant Run` 模式，通常情况下这回节省我们很多时间，比如当我们修改了界面布局，想要在手机上看一下效果，没有必要重启整个应用，这个时候就可以使用 `Instant Run` 模式了，ide内部会进行判断是否需要重启整个应用，如果不需要，只会热重启当前页面。为这个功能点赞啊，有的时候页面藏的比较深，需要多步操作才能打开，这个功能可以节省很多时间。\n![Install Run](/image/gaode/install_run.png)\n但是啊但是。。。我在Fragment中使用高德地图的时候，使用这个功能会出现地图加载不出来（一片空白），但是定位成功的问题。刚开始的是吓尿了，以为代码出了什么问题，直到我提了工单，看到回复后放心了：\n![高德工单](/image/gaode/install_run_bug.png)\n>您好，Instant Run 确实是不支持这种，目前他们也没有给出解决方案，这里有详细的解释http://stackoverflow.com/questions/33902467/android-studio-2-0-why-does-instant-run-not-work-when-modifying-xml-layout-reso\n感谢您的致信，欢迎持续关注高德开放平台！\n\n#### 地图加载完成的回调函数\n因为业务上的原因，需要在地图加载完成后做一些操作，当时官网的开发者文档上没有啊，于是又提了工单，接到回复后又放心了\n>您好，AMap 提供了地图加载完成的方法， 可详见：\n``` java\naMap.setOnMapLoadedListener(new AMap.OnMapLoadedListener() {\n\t\t\t@Override\n\t\t\tpublic void onMapLoaded() {\n\t\t\t}\n\t\t});\n```\n感谢您的致信，欢迎持续关注高德开放平台！\n\n#### 步行路径规划当距离比较短时路线不在地图中间位置\n　　由于业务上的原因，自己的位置和目的地的距离较短，需要步行路径规划，但是啊但是，路径可以规划成功，但是把路径添加到地图上的时候，路径没有显示在屏幕中间位置啊，而是诡异的飘到了一边。反复检查了N边代码，没有问题啊，和官网demo一样啊，把坐标点抠出来，改一下官网demo的起始点(就是两个坐标值),然后，也出现了路径飘到一边的情况，于是又去提了万能的工单，看到工单的回复后，我又放心了\n![高德工单](/image/gaode/walk_route_bug.png)\n> 我：Demo是从官网的demo上改的，就在`om.amap.map3d.demo.route`包下的`WalkRouteActivity`这个类里面，改了一下mStartPoint，和 mEndPoint 的值，附件图片是我修改之后的值\n `private LatLonPoint mStartPoint = new LatLonPoint(39.990145, 116.481194);`\n`private LatLonPoint mEndPoint = new LatLonPoint(39.99026006391499, 116.4813472288069);`\n从官网下载回来后只改了这两个地方，把key换成了自己的，其他地方的代码没有动。\n如果可以的话，你们可以试一下，找两个距离非常近的点。\n>答复：\n您好，这个问题确实是由SDK内部处理不当引起的bug，我们会在下个版本中修复，给您带来不便深表歉意\n感谢您的致信，欢迎持续关注高德开放平台！\n\n解决方法：\n判断两个点的距离，小于500米的时候，取起始点位置连线的中间位置作为地图中间点，强制将地图上的此位置拉到屏幕中间。\n***\n以上","source":"_posts/《我的安卓爬坑之旅》-高德地图遇到的坑-2.md","raw":"---\ntitle: 《我的安卓爬坑之旅》-高德地图遇到的坑(2)\ndate: 2017-02-25 11:57:23\ntags: [Android爬坑之旅,Android,高德地图]\n---\n这篇博客是关于高德使用中遇到的问题，或许是因为开发文档中没有说明，或许是因为自己段位不够，反正就是遇到坑了。\n<!--more-->\n#### 关于定位点和覆盖物\n　　有这么一个业务需求：定位手机所在位置成功后，请求服务器数据，服务器返回手机所在地点指定范围内的的点，然后把这些点添加到地图上。\n刚开始还没有什么问题，按照官网的demo来做的，到后来数据量多的时候就出现了marker重叠的问题。当然，marker点多的话，重叠也是无法避免的，但是，把定位的标记也给覆盖掉了，这就有点不好了。也没有查到相关的api，demo上添加定位点也是用的marker，估计都是同一级别，按照添加的先后顺序覆盖叠加。\n后来找到了一个方法 `mLocMarker.setToTop();`这样可以把某个marker设置到最高的层级显示。还有一个方法是\n``` java\n    public void setDisplayLevel(int var1) {\n        IMarkerAction var2 = this.a.getIMarkerAction();\n        if(var2 != null) {\n            var2.setDisplayLevel(var1);\n        }\n    }\n```\n这个是Marker对象中的一个方法，但是从官方下载下来的文档中并没有提到这个方法，自己也没有去使用。了解过的朋友可以在评论区回复我一下，谢谢。\n#### AndroidStudio第二次编译之后地图不显示\n　　AS2.2版本加了 `Instant Run` 模式，通常情况下这回节省我们很多时间，比如当我们修改了界面布局，想要在手机上看一下效果，没有必要重启整个应用，这个时候就可以使用 `Instant Run` 模式了，ide内部会进行判断是否需要重启整个应用，如果不需要，只会热重启当前页面。为这个功能点赞啊，有的时候页面藏的比较深，需要多步操作才能打开，这个功能可以节省很多时间。\n![Install Run](/image/gaode/install_run.png)\n但是啊但是。。。我在Fragment中使用高德地图的时候，使用这个功能会出现地图加载不出来（一片空白），但是定位成功的问题。刚开始的是吓尿了，以为代码出了什么问题，直到我提了工单，看到回复后放心了：\n![高德工单](/image/gaode/install_run_bug.png)\n>您好，Instant Run 确实是不支持这种，目前他们也没有给出解决方案，这里有详细的解释http://stackoverflow.com/questions/33902467/android-studio-2-0-why-does-instant-run-not-work-when-modifying-xml-layout-reso\n感谢您的致信，欢迎持续关注高德开放平台！\n\n#### 地图加载完成的回调函数\n因为业务上的原因，需要在地图加载完成后做一些操作，当时官网的开发者文档上没有啊，于是又提了工单，接到回复后又放心了\n>您好，AMap 提供了地图加载完成的方法， 可详见：\n``` java\naMap.setOnMapLoadedListener(new AMap.OnMapLoadedListener() {\n\t\t\t@Override\n\t\t\tpublic void onMapLoaded() {\n\t\t\t}\n\t\t});\n```\n感谢您的致信，欢迎持续关注高德开放平台！\n\n#### 步行路径规划当距离比较短时路线不在地图中间位置\n　　由于业务上的原因，自己的位置和目的地的距离较短，需要步行路径规划，但是啊但是，路径可以规划成功，但是把路径添加到地图上的时候，路径没有显示在屏幕中间位置啊，而是诡异的飘到了一边。反复检查了N边代码，没有问题啊，和官网demo一样啊，把坐标点抠出来，改一下官网demo的起始点(就是两个坐标值),然后，也出现了路径飘到一边的情况，于是又去提了万能的工单，看到工单的回复后，我又放心了\n![高德工单](/image/gaode/walk_route_bug.png)\n> 我：Demo是从官网的demo上改的，就在`om.amap.map3d.demo.route`包下的`WalkRouteActivity`这个类里面，改了一下mStartPoint，和 mEndPoint 的值，附件图片是我修改之后的值\n `private LatLonPoint mStartPoint = new LatLonPoint(39.990145, 116.481194);`\n`private LatLonPoint mEndPoint = new LatLonPoint(39.99026006391499, 116.4813472288069);`\n从官网下载回来后只改了这两个地方，把key换成了自己的，其他地方的代码没有动。\n如果可以的话，你们可以试一下，找两个距离非常近的点。\n>答复：\n您好，这个问题确实是由SDK内部处理不当引起的bug，我们会在下个版本中修复，给您带来不便深表歉意\n感谢您的致信，欢迎持续关注高德开放平台！\n\n解决方法：\n判断两个点的距离，小于500米的时候，取起始点位置连线的中间位置作为地图中间点，强制将地图上的此位置拉到屏幕中间。\n***\n以上","slug":"《我的安卓爬坑之旅》-高德地图遇到的坑-2","published":1,"updated":"2017-12-30T13:13:07.231Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjbvyt3v30010scdgxdi2vhn3","content":"<p>这篇博客是关于高德使用中遇到的问题，或许是因为开发文档中没有说明，或许是因为自己段位不够，反正就是遇到坑了。<br><a id=\"more\"></a></p>\n<h4 id=\"关于定位点和覆盖物\"><a href=\"#关于定位点和覆盖物\" class=\"headerlink\" title=\"关于定位点和覆盖物\"></a>关于定位点和覆盖物</h4><p>　　有这么一个业务需求：定位手机所在位置成功后，请求服务器数据，服务器返回手机所在地点指定范围内的的点，然后把这些点添加到地图上。<br>刚开始还没有什么问题，按照官网的demo来做的，到后来数据量多的时候就出现了marker重叠的问题。当然，marker点多的话，重叠也是无法避免的，但是，把定位的标记也给覆盖掉了，这就有点不好了。也没有查到相关的api，demo上添加定位点也是用的marker，估计都是同一级别，按照添加的先后顺序覆盖叠加。<br>后来找到了一个方法 <code>mLocMarker.setToTop();</code>这样可以把某个marker设置到最高的层级显示。还有一个方法是<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">setDisplayLevel</span><span class=\"params\">(<span class=\"keyword\">int</span> var1)</span> </span>&#123;</div><div class=\"line\">    IMarkerAction var2 = <span class=\"keyword\">this</span>.a.getIMarkerAction();</div><div class=\"line\">    <span class=\"keyword\">if</span>(var2 != <span class=\"keyword\">null</span>) &#123;</div><div class=\"line\">        var2.setDisplayLevel(var1);</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>这个是Marker对象中的一个方法，但是从官方下载下来的文档中并没有提到这个方法，自己也没有去使用。了解过的朋友可以在评论区回复我一下，谢谢。</p>\n<h4 id=\"AndroidStudio第二次编译之后地图不显示\"><a href=\"#AndroidStudio第二次编译之后地图不显示\" class=\"headerlink\" title=\"AndroidStudio第二次编译之后地图不显示\"></a>AndroidStudio第二次编译之后地图不显示</h4><p>　　AS2.2版本加了 <code>Instant Run</code> 模式，通常情况下这回节省我们很多时间，比如当我们修改了界面布局，想要在手机上看一下效果，没有必要重启整个应用，这个时候就可以使用 <code>Instant Run</code> 模式了，ide内部会进行判断是否需要重启整个应用，如果不需要，只会热重启当前页面。为这个功能点赞啊，有的时候页面藏的比较深，需要多步操作才能打开，这个功能可以节省很多时间。<br><img src=\"/image/gaode/install_run.png\" alt=\"Install Run\"><br>但是啊但是。。。我在Fragment中使用高德地图的时候，使用这个功能会出现地图加载不出来（一片空白），但是定位成功的问题。刚开始的是吓尿了，以为代码出了什么问题，直到我提了工单，看到回复后放心了：<br><img src=\"/image/gaode/install_run_bug.png\" alt=\"高德工单\"></p>\n<blockquote>\n<p>您好，Instant Run 确实是不支持这种，目前他们也没有给出解决方案，这里有详细的解释<a href=\"http://stackoverflow.com/questions/33902467/android-studio-2-0-why-does-instant-run-not-work-when-modifying-xml-layout-reso\" target=\"_blank\" rel=\"external\">http://stackoverflow.com/questions/33902467/android-studio-2-0-why-does-instant-run-not-work-when-modifying-xml-layout-reso</a><br>感谢您的致信，欢迎持续关注高德开放平台！</p>\n</blockquote>\n<h4 id=\"地图加载完成的回调函数\"><a href=\"#地图加载完成的回调函数\" class=\"headerlink\" title=\"地图加载完成的回调函数\"></a>地图加载完成的回调函数</h4><p>因为业务上的原因，需要在地图加载完成后做一些操作，当时官网的开发者文档上没有啊，于是又提了工单，接到回复后又放心了</p>\n<blockquote>\n<p>您好，AMap 提供了地图加载完成的方法， 可详见：<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">aMap.setOnMapLoadedListener(<span class=\"keyword\">new</span> AMap.OnMapLoadedListener() &#123;</div><div class=\"line\">\t\t\t<span class=\"meta\">@Override</span></div><div class=\"line\">\t\t\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onMapLoaded</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">\t\t\t&#125;</div><div class=\"line\">\t\t&#125;);</div></pre></td></tr></table></figure></p>\n</blockquote>\n<p>感谢您的致信，欢迎持续关注高德开放平台！</p>\n<h4 id=\"步行路径规划当距离比较短时路线不在地图中间位置\"><a href=\"#步行路径规划当距离比较短时路线不在地图中间位置\" class=\"headerlink\" title=\"步行路径规划当距离比较短时路线不在地图中间位置\"></a>步行路径规划当距离比较短时路线不在地图中间位置</h4><p>　　由于业务上的原因，自己的位置和目的地的距离较短，需要步行路径规划，但是啊但是，路径可以规划成功，但是把路径添加到地图上的时候，路径没有显示在屏幕中间位置啊，而是诡异的飘到了一边。反复检查了N边代码，没有问题啊，和官网demo一样啊，把坐标点抠出来，改一下官网demo的起始点(就是两个坐标值),然后，也出现了路径飘到一边的情况，于是又去提了万能的工单，看到工单的回复后，我又放心了<br><img src=\"/image/gaode/walk_route_bug.png\" alt=\"高德工单\"></p>\n<blockquote>\n<p>我：Demo是从官网的demo上改的，就在<code>om.amap.map3d.demo.route</code>包下的<code>WalkRouteActivity</code>这个类里面，改了一下mStartPoint，和 mEndPoint 的值，附件图片是我修改之后的值<br> <code>private LatLonPoint mStartPoint = new LatLonPoint(39.990145, 116.481194);</code><br><code>private LatLonPoint mEndPoint = new LatLonPoint(39.99026006391499, 116.4813472288069);</code><br>从官网下载回来后只改了这两个地方，把key换成了自己的，其他地方的代码没有动。<br>如果可以的话，你们可以试一下，找两个距离非常近的点。<br>答复：<br>您好，这个问题确实是由SDK内部处理不当引起的bug，我们会在下个版本中修复，给您带来不便深表歉意<br>感谢您的致信，欢迎持续关注高德开放平台！</p>\n</blockquote>\n<p>解决方法：<br>判断两个点的距离，小于500米的时候，取起始点位置连线的中间位置作为地图中间点，强制将地图上的此位置拉到屏幕中间。</p>\n<hr>\n<p>以上</p>\n","excerpt":"<p>这篇博客是关于高德使用中遇到的问题，或许是因为开发文档中没有说明，或许是因为自己段位不够，反正就是遇到坑了。<br>","more":"</p>\n<h4 id=\"关于定位点和覆盖物\"><a href=\"#关于定位点和覆盖物\" class=\"headerlink\" title=\"关于定位点和覆盖物\"></a>关于定位点和覆盖物</h4><p>　　有这么一个业务需求：定位手机所在位置成功后，请求服务器数据，服务器返回手机所在地点指定范围内的的点，然后把这些点添加到地图上。<br>刚开始还没有什么问题，按照官网的demo来做的，到后来数据量多的时候就出现了marker重叠的问题。当然，marker点多的话，重叠也是无法避免的，但是，把定位的标记也给覆盖掉了，这就有点不好了。也没有查到相关的api，demo上添加定位点也是用的marker，估计都是同一级别，按照添加的先后顺序覆盖叠加。<br>后来找到了一个方法 <code>mLocMarker.setToTop();</code>这样可以把某个marker设置到最高的层级显示。还有一个方法是<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">setDisplayLevel</span><span class=\"params\">(<span class=\"keyword\">int</span> var1)</span> </span>&#123;</div><div class=\"line\">    IMarkerAction var2 = <span class=\"keyword\">this</span>.a.getIMarkerAction();</div><div class=\"line\">    <span class=\"keyword\">if</span>(var2 != <span class=\"keyword\">null</span>) &#123;</div><div class=\"line\">        var2.setDisplayLevel(var1);</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>这个是Marker对象中的一个方法，但是从官方下载下来的文档中并没有提到这个方法，自己也没有去使用。了解过的朋友可以在评论区回复我一下，谢谢。</p>\n<h4 id=\"AndroidStudio第二次编译之后地图不显示\"><a href=\"#AndroidStudio第二次编译之后地图不显示\" class=\"headerlink\" title=\"AndroidStudio第二次编译之后地图不显示\"></a>AndroidStudio第二次编译之后地图不显示</h4><p>　　AS2.2版本加了 <code>Instant Run</code> 模式，通常情况下这回节省我们很多时间，比如当我们修改了界面布局，想要在手机上看一下效果，没有必要重启整个应用，这个时候就可以使用 <code>Instant Run</code> 模式了，ide内部会进行判断是否需要重启整个应用，如果不需要，只会热重启当前页面。为这个功能点赞啊，有的时候页面藏的比较深，需要多步操作才能打开，这个功能可以节省很多时间。<br><img src=\"/image/gaode/install_run.png\" alt=\"Install Run\"><br>但是啊但是。。。我在Fragment中使用高德地图的时候，使用这个功能会出现地图加载不出来（一片空白），但是定位成功的问题。刚开始的是吓尿了，以为代码出了什么问题，直到我提了工单，看到回复后放心了：<br><img src=\"/image/gaode/install_run_bug.png\" alt=\"高德工单\"></p>\n<blockquote>\n<p>您好，Instant Run 确实是不支持这种，目前他们也没有给出解决方案，这里有详细的解释<a href=\"http://stackoverflow.com/questions/33902467/android-studio-2-0-why-does-instant-run-not-work-when-modifying-xml-layout-reso\">http://stackoverflow.com/questions/33902467/android-studio-2-0-why-does-instant-run-not-work-when-modifying-xml-layout-reso</a><br>感谢您的致信，欢迎持续关注高德开放平台！</p>\n</blockquote>\n<h4 id=\"地图加载完成的回调函数\"><a href=\"#地图加载完成的回调函数\" class=\"headerlink\" title=\"地图加载完成的回调函数\"></a>地图加载完成的回调函数</h4><p>因为业务上的原因，需要在地图加载完成后做一些操作，当时官网的开发者文档上没有啊，于是又提了工单，接到回复后又放心了</p>\n<blockquote>\n<p>您好，AMap 提供了地图加载完成的方法， 可详见：<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">aMap.setOnMapLoadedListener(<span class=\"keyword\">new</span> AMap.OnMapLoadedListener() &#123;</div><div class=\"line\">\t\t\t<span class=\"meta\">@Override</span></div><div class=\"line\">\t\t\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onMapLoaded</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">\t\t\t&#125;</div><div class=\"line\">\t\t&#125;);</div></pre></td></tr></table></figure></p>\n</blockquote>\n<p>感谢您的致信，欢迎持续关注高德开放平台！</p>\n<h4 id=\"步行路径规划当距离比较短时路线不在地图中间位置\"><a href=\"#步行路径规划当距离比较短时路线不在地图中间位置\" class=\"headerlink\" title=\"步行路径规划当距离比较短时路线不在地图中间位置\"></a>步行路径规划当距离比较短时路线不在地图中间位置</h4><p>　　由于业务上的原因，自己的位置和目的地的距离较短，需要步行路径规划，但是啊但是，路径可以规划成功，但是把路径添加到地图上的时候，路径没有显示在屏幕中间位置啊，而是诡异的飘到了一边。反复检查了N边代码，没有问题啊，和官网demo一样啊，把坐标点抠出来，改一下官网demo的起始点(就是两个坐标值),然后，也出现了路径飘到一边的情况，于是又去提了万能的工单，看到工单的回复后，我又放心了<br><img src=\"/image/gaode/walk_route_bug.png\" alt=\"高德工单\"></p>\n<blockquote>\n<p>我：Demo是从官网的demo上改的，就在<code>om.amap.map3d.demo.route</code>包下的<code>WalkRouteActivity</code>这个类里面，改了一下mStartPoint，和 mEndPoint 的值，附件图片是我修改之后的值<br> <code>private LatLonPoint mStartPoint = new LatLonPoint(39.990145, 116.481194);</code><br><code>private LatLonPoint mEndPoint = new LatLonPoint(39.99026006391499, 116.4813472288069);</code><br>从官网下载回来后只改了这两个地方，把key换成了自己的，其他地方的代码没有动。<br>如果可以的话，你们可以试一下，找两个距离非常近的点。<br>答复：<br>您好，这个问题确实是由SDK内部处理不当引起的bug，我们会在下个版本中修复，给您带来不便深表歉意<br>感谢您的致信，欢迎持续关注高德开放平台！</p>\n</blockquote>\n<p>解决方法：<br>判断两个点的距离，小于500米的时候，取起始点位置连线的中间位置作为地图中间点，强制将地图上的此位置拉到屏幕中间。</p>\n<hr>\n<p>以上</p>"},{"title":"《我的安卓爬坑之旅》-高德地图遇到的坑-3","date":"2017-12-19T06:49:49.000Z","_content":"这次是逆地理位置编码出现的坑，在提交工单后，官方回复是badcase，已经收录，后续着手优化。\nSDK版本号：`com.amap.api:location:3.6.1`、`com.amap.api:map3d:4.1.3`、`com.amap.api:map3d-native:4.1.3`、`com.amap.api:search:5.5.0`。\n<!--more-->\n过程如下：\n2017年12月5号接到用户反馈，定位位置准确，但是显示的中文具体位置不准确，误差大概在千米级别。当时就麻爪了，这可不是误差，这是错误。\n1. 首先排除网络以及信号问题：\n根据用户反馈，得知用户所在位置信号良好，周围不存在遮盖物，也不在地下室之类的信号差的地方，不存在定位偏差问题(app上显示的定位和手机位置一致)。\n网络状况良好，浏览器可以打开网页、app可以进行其他操作。\n先排除用户使用情况的原因是：接到过多次反馈，是因为用户没有看app提示，或者直接忽略掉提示导致的误报。\n2. 排除代码问题\n* 在测试服上进行同样操作，得到的坐标值正确(手机拿到坐标值在app上显示，然后把坐标拿到高德坐标拾取系统进行定位，显示位置一致)，定位以及展示代码没问题。\n* 拿到坐标值在客户端进行逆地理位置编码(`RegeocodeQuery query = new RegeocodeQuery(new LatLonPoint(lat, lon), 200,GeocodeSearch.AMAP);\ngeocoderSearch.getFromLocationAsyn(query);`)，得到的地理位置正确，误差在所传参数以内，改变逆地理位置编码的经确定，改变定位位置(北京市内随机取点)，多次操作，定位及展示以及逆地理位置编码均正确。\n到这，就有点抓狂了，这TM什么问题，到底哪里出问题了。。\n* 全国范围内取点，代码参数和生产环境保持一致，祈祷着或许是因为在新疆这种空旷、建筑物少的地方，误差可能会大些(好几公里没有建筑物，没有明显地标，总不能展示第几课白杨树下吧，23333)。抓到了偏远地区的坐标以及十分空旷地区的坐标，展示以及你地理位置编码均正确。\n* 这时候也冷静下来了，出了问题不一定是自己代码问题吗，有可能是二方、三方代码的锅，只是习惯上养成了出了问题先找自己的原因，找不到再找其他的。找高德，提工单，详细描述问题：\n> 具体情况这样：\n我把(119.564298,31.995402)这个坐标用客户端调用逆地理位置编码接口:\nRegeocodeQuery query = new RegeocodeQuery(new LatLonPoint(lat, lon), 200,GeocodeSearch.AMAP);\ngeocoderSearch.getFromLocationAsyn(query);\n在回调函数public void onRegeocodeSearched(RegeocodeResult result, int rCode)中取得结果：result.getRegeocodeAddress().getFormatAddress() 是**江苏省镇江市丹阳市云阳镇北环路6号**。\n但实际上**江苏省镇江市丹阳市云阳镇北环路6号**这个地址与上述坐标点距离很远(这个是在高德坐标拾取器 http://lbs.amap.com/console/show/picker 上看到的)。\n3. 高德回复\n第二天高德给了回复：\n> 您好，感谢反馈，目前这块的算法确实有一些问题，您的badcase我们已经收录，后续会针对这块做优化。给您造成不便敬请谅解。\n感谢您的致信，欢迎持续关注高德开放平台！\n\n![geocoderSearch](/image/gaode/geocoderSearch_bug.png)\n----\n以上","source":"_posts/《我的安卓爬坑之旅》-高德地图遇到的坑-3.md","raw":"---\ntitle: 《我的安卓爬坑之旅》-高德地图遇到的坑-3\ndate: 2017-12-19 14:49:49\ntags: [Android爬坑之旅,Android,高德地图]\n---\n这次是逆地理位置编码出现的坑，在提交工单后，官方回复是badcase，已经收录，后续着手优化。\nSDK版本号：`com.amap.api:location:3.6.1`、`com.amap.api:map3d:4.1.3`、`com.amap.api:map3d-native:4.1.3`、`com.amap.api:search:5.5.0`。\n<!--more-->\n过程如下：\n2017年12月5号接到用户反馈，定位位置准确，但是显示的中文具体位置不准确，误差大概在千米级别。当时就麻爪了，这可不是误差，这是错误。\n1. 首先排除网络以及信号问题：\n根据用户反馈，得知用户所在位置信号良好，周围不存在遮盖物，也不在地下室之类的信号差的地方，不存在定位偏差问题(app上显示的定位和手机位置一致)。\n网络状况良好，浏览器可以打开网页、app可以进行其他操作。\n先排除用户使用情况的原因是：接到过多次反馈，是因为用户没有看app提示，或者直接忽略掉提示导致的误报。\n2. 排除代码问题\n* 在测试服上进行同样操作，得到的坐标值正确(手机拿到坐标值在app上显示，然后把坐标拿到高德坐标拾取系统进行定位，显示位置一致)，定位以及展示代码没问题。\n* 拿到坐标值在客户端进行逆地理位置编码(`RegeocodeQuery query = new RegeocodeQuery(new LatLonPoint(lat, lon), 200,GeocodeSearch.AMAP);\ngeocoderSearch.getFromLocationAsyn(query);`)，得到的地理位置正确，误差在所传参数以内，改变逆地理位置编码的经确定，改变定位位置(北京市内随机取点)，多次操作，定位及展示以及逆地理位置编码均正确。\n到这，就有点抓狂了，这TM什么问题，到底哪里出问题了。。\n* 全国范围内取点，代码参数和生产环境保持一致，祈祷着或许是因为在新疆这种空旷、建筑物少的地方，误差可能会大些(好几公里没有建筑物，没有明显地标，总不能展示第几课白杨树下吧，23333)。抓到了偏远地区的坐标以及十分空旷地区的坐标，展示以及你地理位置编码均正确。\n* 这时候也冷静下来了，出了问题不一定是自己代码问题吗，有可能是二方、三方代码的锅，只是习惯上养成了出了问题先找自己的原因，找不到再找其他的。找高德，提工单，详细描述问题：\n> 具体情况这样：\n我把(119.564298,31.995402)这个坐标用客户端调用逆地理位置编码接口:\nRegeocodeQuery query = new RegeocodeQuery(new LatLonPoint(lat, lon), 200,GeocodeSearch.AMAP);\ngeocoderSearch.getFromLocationAsyn(query);\n在回调函数public void onRegeocodeSearched(RegeocodeResult result, int rCode)中取得结果：result.getRegeocodeAddress().getFormatAddress() 是**江苏省镇江市丹阳市云阳镇北环路6号**。\n但实际上**江苏省镇江市丹阳市云阳镇北环路6号**这个地址与上述坐标点距离很远(这个是在高德坐标拾取器 http://lbs.amap.com/console/show/picker 上看到的)。\n3. 高德回复\n第二天高德给了回复：\n> 您好，感谢反馈，目前这块的算法确实有一些问题，您的badcase我们已经收录，后续会针对这块做优化。给您造成不便敬请谅解。\n感谢您的致信，欢迎持续关注高德开放平台！\n\n![geocoderSearch](/image/gaode/geocoderSearch_bug.png)\n----\n以上","slug":"《我的安卓爬坑之旅》-高德地图遇到的坑-3","published":1,"updated":"2017-12-30T13:13:07.231Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjbvyt3v50012scdg9l4t24ta","content":"<p>这次是逆地理位置编码出现的坑，在提交工单后，官方回复是badcase，已经收录，后续着手优化。<br>SDK版本号：<code>com.amap.api:location:3.6.1</code>、<code>com.amap.api:map3d:4.1.3</code>、<code>com.amap.api:map3d-native:4.1.3</code>、<code>com.amap.api:search:5.5.0</code>。<br><a id=\"more\"></a><br>过程如下：<br>2017年12月5号接到用户反馈，定位位置准确，但是显示的中文具体位置不准确，误差大概在千米级别。当时就麻爪了，这可不是误差，这是错误。</p>\n<ol>\n<li>首先排除网络以及信号问题：<br>根据用户反馈，得知用户所在位置信号良好，周围不存在遮盖物，也不在地下室之类的信号差的地方，不存在定位偏差问题(app上显示的定位和手机位置一致)。<br>网络状况良好，浏览器可以打开网页、app可以进行其他操作。<br>先排除用户使用情况的原因是：接到过多次反馈，是因为用户没有看app提示，或者直接忽略掉提示导致的误报。</li>\n<li>排除代码问题</li>\n</ol>\n<ul>\n<li>在测试服上进行同样操作，得到的坐标值正确(手机拿到坐标值在app上显示，然后把坐标拿到高德坐标拾取系统进行定位，显示位置一致)，定位以及展示代码没问题。</li>\n<li>拿到坐标值在客户端进行逆地理位置编码(<code>RegeocodeQuery query = new RegeocodeQuery(new LatLonPoint(lat, lon), 200,GeocodeSearch.AMAP);\ngeocoderSearch.getFromLocationAsyn(query);</code>)，得到的地理位置正确，误差在所传参数以内，改变逆地理位置编码的经确定，改变定位位置(北京市内随机取点)，多次操作，定位及展示以及逆地理位置编码均正确。<br>到这，就有点抓狂了，这TM什么问题，到底哪里出问题了。。</li>\n<li>全国范围内取点，代码参数和生产环境保持一致，祈祷着或许是因为在新疆这种空旷、建筑物少的地方，误差可能会大些(好几公里没有建筑物，没有明显地标，总不能展示第几课白杨树下吧，23333)。抓到了偏远地区的坐标以及十分空旷地区的坐标，展示以及你地理位置编码均正确。</li>\n<li>这时候也冷静下来了，出了问题不一定是自己代码问题吗，有可能是二方、三方代码的锅，只是习惯上养成了出了问题先找自己的原因，找不到再找其他的。找高德，提工单，详细描述问题：<blockquote>\n<p>具体情况这样：<br>我把(119.564298,31.995402)这个坐标用客户端调用逆地理位置编码接口:<br>RegeocodeQuery query = new RegeocodeQuery(new LatLonPoint(lat, lon), 200,GeocodeSearch.AMAP);<br>geocoderSearch.getFromLocationAsyn(query);<br>在回调函数public void onRegeocodeSearched(RegeocodeResult result, int rCode)中取得结果：result.getRegeocodeAddress().getFormatAddress() 是<strong>江苏省镇江市丹阳市云阳镇北环路6号</strong>。<br>但实际上<strong>江苏省镇江市丹阳市云阳镇北环路6号</strong>这个地址与上述坐标点距离很远(这个是在高德坐标拾取器 <a href=\"http://lbs.amap.com/console/show/picker\" target=\"_blank\" rel=\"external\">http://lbs.amap.com/console/show/picker</a> 上看到的)。</p>\n</blockquote>\n</li>\n</ul>\n<ol>\n<li>高德回复<br>第二天高德给了回复：<blockquote>\n<p>您好，感谢反馈，目前这块的算法确实有一些问题，您的badcase我们已经收录，后续会针对这块做优化。给您造成不便敬请谅解。<br>感谢您的致信，欢迎持续关注高德开放平台！</p>\n</blockquote>\n</li>\n</ol>\n<h2 id=\"\"><a href=\"#\" class=\"headerlink\" title=\"\"></a><img src=\"/image/gaode/geocoderSearch_bug.png\" alt=\"geocoderSearch\"></h2><p>以上</p>\n","excerpt":"<p>这次是逆地理位置编码出现的坑，在提交工单后，官方回复是badcase，已经收录，后续着手优化。<br>SDK版本号：<code>com.amap.api:location:3.6.1</code>、<code>com.amap.api:map3d:4.1.3</code>、<code>com.amap.api:map3d-native:4.1.3</code>、<code>com.amap.api:search:5.5.0</code>。<br>","more":"<br>过程如下：<br>2017年12月5号接到用户反馈，定位位置准确，但是显示的中文具体位置不准确，误差大概在千米级别。当时就麻爪了，这可不是误差，这是错误。</p>\n<ol>\n<li>首先排除网络以及信号问题：<br>根据用户反馈，得知用户所在位置信号良好，周围不存在遮盖物，也不在地下室之类的信号差的地方，不存在定位偏差问题(app上显示的定位和手机位置一致)。<br>网络状况良好，浏览器可以打开网页、app可以进行其他操作。<br>先排除用户使用情况的原因是：接到过多次反馈，是因为用户没有看app提示，或者直接忽略掉提示导致的误报。</li>\n<li>排除代码问题</li>\n</ol>\n<ul>\n<li>在测试服上进行同样操作，得到的坐标值正确(手机拿到坐标值在app上显示，然后把坐标拿到高德坐标拾取系统进行定位，显示位置一致)，定位以及展示代码没问题。</li>\n<li>拿到坐标值在客户端进行逆地理位置编码(<code>RegeocodeQuery query = new RegeocodeQuery(new LatLonPoint(lat, lon), 200,GeocodeSearch.AMAP);\ngeocoderSearch.getFromLocationAsyn(query);</code>)，得到的地理位置正确，误差在所传参数以内，改变逆地理位置编码的经确定，改变定位位置(北京市内随机取点)，多次操作，定位及展示以及逆地理位置编码均正确。<br>到这，就有点抓狂了，这TM什么问题，到底哪里出问题了。。</li>\n<li>全国范围内取点，代码参数和生产环境保持一致，祈祷着或许是因为在新疆这种空旷、建筑物少的地方，误差可能会大些(好几公里没有建筑物，没有明显地标，总不能展示第几课白杨树下吧，23333)。抓到了偏远地区的坐标以及十分空旷地区的坐标，展示以及你地理位置编码均正确。</li>\n<li>这时候也冷静下来了，出了问题不一定是自己代码问题吗，有可能是二方、三方代码的锅，只是习惯上养成了出了问题先找自己的原因，找不到再找其他的。找高德，提工单，详细描述问题：<blockquote>\n<p>具体情况这样：<br>我把(119.564298,31.995402)这个坐标用客户端调用逆地理位置编码接口:<br>RegeocodeQuery query = new RegeocodeQuery(new LatLonPoint(lat, lon), 200,GeocodeSearch.AMAP);<br>geocoderSearch.getFromLocationAsyn(query);<br>在回调函数public void onRegeocodeSearched(RegeocodeResult result, int rCode)中取得结果：result.getRegeocodeAddress().getFormatAddress() 是<strong>江苏省镇江市丹阳市云阳镇北环路6号</strong>。<br>但实际上<strong>江苏省镇江市丹阳市云阳镇北环路6号</strong>这个地址与上述坐标点距离很远(这个是在高德坐标拾取器 <a href=\"http://lbs.amap.com/console/show/picker\">http://lbs.amap.com/console/show/picker</a> 上看到的)。</p>\n</blockquote>\n</li>\n</ul>\n<ol>\n<li>高德回复<br>第二天高德给了回复：<blockquote>\n<p>您好，感谢反馈，目前这块的算法确实有一些问题，您的badcase我们已经收录，后续会针对这块做优化。给您造成不便敬请谅解。<br>感谢您的致信，欢迎持续关注高德开放平台！</p>\n</blockquote>\n</li>\n</ol>\n<h2 id=\"\"><a href=\"#\" class=\"headerlink\" title=\"\"></a><img src=\"/image/gaode/geocoderSearch_bug.png\" alt=\"geocoderSearch\"></h2><p>以上</p>"},{"title":"《我的安卓爬坑之旅》--高德地图遇到的坑","date":"2016-12-18T15:58:39.000Z","_content":"这篇博客是关于高德使用中遇到的问题，或许是因为开发文档中没有说明，或许是因为自己段位不够，反正就是遇到坑了。\n<!--more-->\n####生成key\n1. 生成key的时候，同一个app下，可以填入相同的包名、key名称等。注意不要用错了key\n2. 由于高德地图升级的原因，需要将原来没有整理过的key先整理，使其属于某个应用，才可以继续创建其他的key。\n\n####文档\n1. 仅在入门指南中提到了需要加入 **`<service android:name=\"com.amap.api.location.APSService\"></service>`**\n开发注意事项里面居然没有提到。最关键的是，没有加入这个service时，定位有时还能成功，只是不能连续定位。我看的时候时从开发注意事项开始看的，完全没有注意到这一点，后来在demo中看到了需要加入这个配置，才能生效。\n2. 文档里面只给出了部分关键代码和部分关键类，完全不知道这个类怎么实例化，怎么去调用方法，调用方法的时候需要传入哪种类型的参数。\n<hr>就我个人看来，看官方api文档还不如去看他们的demo，文档写的真心不算好。\n官方部分demo地址[官方demo地址](http://lbs.amap.com/dev/demo) \n官方sdk以及开发文档、demo等相关下载[官方sdk、开发文档以及demo](http://lbs.amap.com/api/android-sdk/download/) \n以后遇到坑再补充吧，估计遇到的都是文档中没有标明但在demo中有示例的那种。","source":"_posts/《我的安卓爬坑之旅》-高德地图遇到的坑-1.md","raw":"---\ntitle: 《我的安卓爬坑之旅》--高德地图遇到的坑\ndate: 2016-12-18 23:58:39\ntags: [Android爬坑之旅,Android,高德地图]\n---\n这篇博客是关于高德使用中遇到的问题，或许是因为开发文档中没有说明，或许是因为自己段位不够，反正就是遇到坑了。\n<!--more-->\n####生成key\n1. 生成key的时候，同一个app下，可以填入相同的包名、key名称等。注意不要用错了key\n2. 由于高德地图升级的原因，需要将原来没有整理过的key先整理，使其属于某个应用，才可以继续创建其他的key。\n\n####文档\n1. 仅在入门指南中提到了需要加入 **`<service android:name=\"com.amap.api.location.APSService\"></service>`**\n开发注意事项里面居然没有提到。最关键的是，没有加入这个service时，定位有时还能成功，只是不能连续定位。我看的时候时从开发注意事项开始看的，完全没有注意到这一点，后来在demo中看到了需要加入这个配置，才能生效。\n2. 文档里面只给出了部分关键代码和部分关键类，完全不知道这个类怎么实例化，怎么去调用方法，调用方法的时候需要传入哪种类型的参数。\n<hr>就我个人看来，看官方api文档还不如去看他们的demo，文档写的真心不算好。\n官方部分demo地址[官方demo地址](http://lbs.amap.com/dev/demo) \n官方sdk以及开发文档、demo等相关下载[官方sdk、开发文档以及demo](http://lbs.amap.com/api/android-sdk/download/) \n以后遇到坑再补充吧，估计遇到的都是文档中没有标明但在demo中有示例的那种。","slug":"《我的安卓爬坑之旅》-高德地图遇到的坑-1","published":1,"updated":"2017-07-02T08:48:57.272Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjbvyt3v60015scdgyw7oahqg","content":"<p>这篇博客是关于高德使用中遇到的问题，或许是因为开发文档中没有说明，或许是因为自己段位不够，反正就是遇到坑了。<br><a id=\"more\"></a></p>\n<p>####生成key</p>\n<ol>\n<li>生成key的时候，同一个app下，可以填入相同的包名、key名称等。注意不要用错了key</li>\n<li>由于高德地图升级的原因，需要将原来没有整理过的key先整理，使其属于某个应用，才可以继续创建其他的key。</li>\n</ol>\n<p>####文档</p>\n<ol>\n<li>仅在入门指南中提到了需要加入 <strong><code>&lt;service android:name=&quot;com.amap.api.location.APSService&quot;&gt;&lt;/service&gt;</code></strong><br>开发注意事项里面居然没有提到。最关键的是，没有加入这个service时，定位有时还能成功，只是不能连续定位。我看的时候时从开发注意事项开始看的，完全没有注意到这一点，后来在demo中看到了需要加入这个配置，才能生效。</li>\n<li>文档里面只给出了部分关键代码和部分关键类，完全不知道这个类怎么实例化，怎么去调用方法，调用方法的时候需要传入哪种类型的参数。<br><hr>就我个人看来，看官方api文档还不如去看他们的demo，文档写的真心不算好。<br>官方部分demo地址<a href=\"http://lbs.amap.com/dev/demo\" target=\"_blank\" rel=\"external\">官方demo地址</a><br>官方sdk以及开发文档、demo等相关下载<a href=\"http://lbs.amap.com/api/android-sdk/download/\" target=\"_blank\" rel=\"external\">官方sdk、开发文档以及demo</a><br>以后遇到坑再补充吧，估计遇到的都是文档中没有标明但在demo中有示例的那种。</li>\n</ol>\n","excerpt":"<p>这篇博客是关于高德使用中遇到的问题，或许是因为开发文档中没有说明，或许是因为自己段位不够，反正就是遇到坑了。<br>","more":"</p>\n<p>####生成key</p>\n<ol>\n<li>生成key的时候，同一个app下，可以填入相同的包名、key名称等。注意不要用错了key</li>\n<li>由于高德地图升级的原因，需要将原来没有整理过的key先整理，使其属于某个应用，才可以继续创建其他的key。</li>\n</ol>\n<p>####文档</p>\n<ol>\n<li>仅在入门指南中提到了需要加入 <strong><code>&lt;service android:name=&quot;com.amap.api.location.APSService&quot;&gt;&lt;/service&gt;</code></strong><br>开发注意事项里面居然没有提到。最关键的是，没有加入这个service时，定位有时还能成功，只是不能连续定位。我看的时候时从开发注意事项开始看的，完全没有注意到这一点，后来在demo中看到了需要加入这个配置，才能生效。</li>\n<li>文档里面只给出了部分关键代码和部分关键类，完全不知道这个类怎么实例化，怎么去调用方法，调用方法的时候需要传入哪种类型的参数。<br><hr>就我个人看来，看官方api文档还不如去看他们的demo，文档写的真心不算好。<br>官方部分demo地址<a href=\"http://lbs.amap.com/dev/demo\">官方demo地址</a><br>官方sdk以及开发文档、demo等相关下载<a href=\"http://lbs.amap.com/api/android-sdk/download/\">官方sdk、开发文档以及demo</a><br>以后遇到坑再补充吧，估计遇到的都是文档中没有标明但在demo中有示例的那种。</li>\n</ol>"},{"title":"写在2016年末","date":"2016-12-31T15:29:04.000Z","_content":"2016年的最后一天的最后半个小时了，写写这一年的收获总结和2017的计划吧。\n一个字总结了一下2016年：穷。\n当然这是开玩笑式的总结，但也是最接近事实的了。\n<!--more-->\n#### 2016总结\n技术方面：\n&nbsp;&nbsp;&nbsp;&nbsp;自从踏上IT这条不归路开始，就打算做一个全栈攻城狮，从敲下第一行`hello world`到自己独立用java写一个完整的大作业再到写出实际可用的程序到现在的工作，仔细想想已经五年多了吧。但是这仅仅是个开始，我对自己现在的定位是全栈攻城狮的道路刚刚慢出第一步，现在也就算是个全栈学徒吧。\n<table><tr><th>编程技能</th><th>自定级别</th></tr><tr><td>python</td><td>入门</td></tr><tr><td>HTML</td><td>初级</td></tr><tr><td>J2EE</td><td>初级</td></tr><tr><td>JAVA</td><td>中级</td></tr><tr><td>Android</td><td>中级</td></tr><tr><td>Linux</td><td>中级</td></tr></table>\n\n* 在工作中也踩过、填过、挖过很多坑，万幸的是一直坚持了下来，没有放弃，也没有想过要转行的事，就想一直在这个行业发展，努力提高自己的技术。\n* 15年双十二和今年的十二月四号，都参加了`开源中国`举办的`源创汇`年终盛典，接触到了很多大牛(虽然他们不曾记得我)，接触到很多以前没有见识过也没有想象过的东西，对自己的成长有很大帮助。\n* 开通了自己的博客(gitpage),把博客从csdn迁移到github上，租用了腾讯云主机，备案了自己的域名，有了自己的简单的网站，可以写一些自己感兴趣的东西(自由的感觉真好，法无禁止皆可为)。\n* 也感谢这一年来小伙伴的帮助，幸好有你们，帮我解决了困难。\n* 当然，在这一年中也有很多事情不是那么顺利，从上家公司离职，从10月到12月，中间休息了两个月，回了一次家，跑去深圳和妹子玩了四五天的样子(几乎是全部时间都泡在图书馆了，沉迷学习无法自拔)，其余时间也就是看看书，打打游戏之类的，总之这两个月的时间大部分都被浪费掉了，没有任何收获。\n\n生活上也没啥好说的，业余时间就是宅在家里，看看书，敲敲代码，打打游戏，不喜欢出去逛，貌似好像是在6、7月份的样子，二哥来北京玩，爬了一次八达岭长城，除此之外，就是去了三次漫展，其他的就没有什么了。\n#### 2017计划\n首先，最重要的就是提升自己的技术能力：\n\n* python达到初级水平;html方面学习一下h5;\n* J2EE方面学习一下ssm框架、nginx;\n* JAVA和Android方面尽可能的提升自己，尽量在两年内能初步达到高级水平;\n* Linux方面，熟悉一下vim，了解以下服务器方向的相关知识，毕竟自己只是拿linux做开发，没有把精力放在服务器假设方向。\n\n生活方面就尽量改变一下自己宅的属性,尽量多出去走走吧(这个有点难，比提升技术实力还要难)\n\n----\n借用一本小说中的一段话吧：\n\n><pre>  “其实所有的智慧生物都在饮鸩止渴。所有的智慧生物都在通过不断的科技进步，不断的探索未知来满足着自己的探索欲望。这些科技，以及理论还有知识，不是好东西，它们是毒药，它们会让文明形成强烈的依赖症，当所有的未知都被探索完毕的时候，这种鸩毒就会最终发作，并且让这个文明最终陷入到毒发身亡的境地之中。可是最可笑的是，虽然这个道理十分明显，可是包括我在内的所有文明，都无法逃脱这个怪圈。”\n    “我……我怎么可以停止呢？就算它们明明是毒药，可是我也要不断的去吃啊。”萧宇喃喃自语着，“如果我的科技不能进步，如果现在就斩断我进步的道路，我现在就会发疯的。这一点是天生注定的，当我还在地球上的时候，当我拿起笔，拿起书本，学习到第一个数学公式，学习到第一个物理定理的时候，这种鸩毒就已经在我的灵魂深处深深的扎下了根，让我终其一生不得解脱。我的毒瘾会越来越大，我所需要的鸩毒分量会越来越多，我只能继续这样维持下去。以后再毒发，总比现在就毒发要好。”\n    这个死在旅途之中的文明，让萧宇想到了很多很多，对萧宇的灵魂造成了很深的触动。可是萧宇已经无法停下自己的脚步了。浩瀚广阔的星空，无边无际的宇宙，就像是美丽异常的罂粟花，明知道危险，可是还是有不计其数的文明，包括萧宇在内都踏了进去，并且一个个踊跃异常，生怕自己吸食毒品的速度要比其余的文明慢了一点。\n\n</pre>\n----\n以上。\n","source":"_posts/写在2016年末.md","raw":"---\ntitle: 写在2016年末\ndate: 2016-12-31 23:29:04\ntags: [乱七八糟]\n---\n2016年的最后一天的最后半个小时了，写写这一年的收获总结和2017的计划吧。\n一个字总结了一下2016年：穷。\n当然这是开玩笑式的总结，但也是最接近事实的了。\n<!--more-->\n#### 2016总结\n技术方面：\n&nbsp;&nbsp;&nbsp;&nbsp;自从踏上IT这条不归路开始，就打算做一个全栈攻城狮，从敲下第一行`hello world`到自己独立用java写一个完整的大作业再到写出实际可用的程序到现在的工作，仔细想想已经五年多了吧。但是这仅仅是个开始，我对自己现在的定位是全栈攻城狮的道路刚刚慢出第一步，现在也就算是个全栈学徒吧。\n<table><tr><th>编程技能</th><th>自定级别</th></tr><tr><td>python</td><td>入门</td></tr><tr><td>HTML</td><td>初级</td></tr><tr><td>J2EE</td><td>初级</td></tr><tr><td>JAVA</td><td>中级</td></tr><tr><td>Android</td><td>中级</td></tr><tr><td>Linux</td><td>中级</td></tr></table>\n\n* 在工作中也踩过、填过、挖过很多坑，万幸的是一直坚持了下来，没有放弃，也没有想过要转行的事，就想一直在这个行业发展，努力提高自己的技术。\n* 15年双十二和今年的十二月四号，都参加了`开源中国`举办的`源创汇`年终盛典，接触到了很多大牛(虽然他们不曾记得我)，接触到很多以前没有见识过也没有想象过的东西，对自己的成长有很大帮助。\n* 开通了自己的博客(gitpage),把博客从csdn迁移到github上，租用了腾讯云主机，备案了自己的域名，有了自己的简单的网站，可以写一些自己感兴趣的东西(自由的感觉真好，法无禁止皆可为)。\n* 也感谢这一年来小伙伴的帮助，幸好有你们，帮我解决了困难。\n* 当然，在这一年中也有很多事情不是那么顺利，从上家公司离职，从10月到12月，中间休息了两个月，回了一次家，跑去深圳和妹子玩了四五天的样子(几乎是全部时间都泡在图书馆了，沉迷学习无法自拔)，其余时间也就是看看书，打打游戏之类的，总之这两个月的时间大部分都被浪费掉了，没有任何收获。\n\n生活上也没啥好说的，业余时间就是宅在家里，看看书，敲敲代码，打打游戏，不喜欢出去逛，貌似好像是在6、7月份的样子，二哥来北京玩，爬了一次八达岭长城，除此之外，就是去了三次漫展，其他的就没有什么了。\n#### 2017计划\n首先，最重要的就是提升自己的技术能力：\n\n* python达到初级水平;html方面学习一下h5;\n* J2EE方面学习一下ssm框架、nginx;\n* JAVA和Android方面尽可能的提升自己，尽量在两年内能初步达到高级水平;\n* Linux方面，熟悉一下vim，了解以下服务器方向的相关知识，毕竟自己只是拿linux做开发，没有把精力放在服务器假设方向。\n\n生活方面就尽量改变一下自己宅的属性,尽量多出去走走吧(这个有点难，比提升技术实力还要难)\n\n----\n借用一本小说中的一段话吧：\n\n><pre>  “其实所有的智慧生物都在饮鸩止渴。所有的智慧生物都在通过不断的科技进步，不断的探索未知来满足着自己的探索欲望。这些科技，以及理论还有知识，不是好东西，它们是毒药，它们会让文明形成强烈的依赖症，当所有的未知都被探索完毕的时候，这种鸩毒就会最终发作，并且让这个文明最终陷入到毒发身亡的境地之中。可是最可笑的是，虽然这个道理十分明显，可是包括我在内的所有文明，都无法逃脱这个怪圈。”\n    “我……我怎么可以停止呢？就算它们明明是毒药，可是我也要不断的去吃啊。”萧宇喃喃自语着，“如果我的科技不能进步，如果现在就斩断我进步的道路，我现在就会发疯的。这一点是天生注定的，当我还在地球上的时候，当我拿起笔，拿起书本，学习到第一个数学公式，学习到第一个物理定理的时候，这种鸩毒就已经在我的灵魂深处深深的扎下了根，让我终其一生不得解脱。我的毒瘾会越来越大，我所需要的鸩毒分量会越来越多，我只能继续这样维持下去。以后再毒发，总比现在就毒发要好。”\n    这个死在旅途之中的文明，让萧宇想到了很多很多，对萧宇的灵魂造成了很深的触动。可是萧宇已经无法停下自己的脚步了。浩瀚广阔的星空，无边无际的宇宙，就像是美丽异常的罂粟花，明知道危险，可是还是有不计其数的文明，包括萧宇在内都踏了进去，并且一个个踊跃异常，生怕自己吸食毒品的速度要比其余的文明慢了一点。\n\n</pre>\n----\n以上。\n","slug":"写在2016年末","published":1,"updated":"2018-01-01T07:14:36.209Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjbvyt3v70016scdgnvg7znbh","content":"<p>2016年的最后一天的最后半个小时了，写写这一年的收获总结和2017的计划吧。<br>一个字总结了一下2016年：穷。<br>当然这是开玩笑式的总结，但也是最接近事实的了。<br><a id=\"more\"></a></p>\n<h4 id=\"2016总结\"><a href=\"#2016总结\" class=\"headerlink\" title=\"2016总结\"></a>2016总结</h4><p>技术方面：<br>&nbsp;&nbsp;&nbsp;&nbsp;自从踏上IT这条不归路开始，就打算做一个全栈攻城狮，从敲下第一行<code>hello world</code>到自己独立用java写一个完整的大作业再到写出实际可用的程序到现在的工作，仔细想想已经五年多了吧。但是这仅仅是个开始，我对自己现在的定位是全栈攻城狮的道路刚刚慢出第一步，现在也就算是个全栈学徒吧。</p>\n<table><tr><th>编程技能</th><th>自定级别</th></tr><tr><td>python</td><td>入门</td></tr><tr><td>HTML</td><td>初级</td></tr><tr><td>J2EE</td><td>初级</td></tr><tr><td>JAVA</td><td>中级</td></tr><tr><td>Android</td><td>中级</td></tr><tr><td>Linux</td><td>中级</td></tr></table>\n\n<ul>\n<li>在工作中也踩过、填过、挖过很多坑，万幸的是一直坚持了下来，没有放弃，也没有想过要转行的事，就想一直在这个行业发展，努力提高自己的技术。</li>\n<li>15年双十二和今年的十二月四号，都参加了<code>开源中国</code>举办的<code>源创汇</code>年终盛典，接触到了很多大牛(虽然他们不曾记得我)，接触到很多以前没有见识过也没有想象过的东西，对自己的成长有很大帮助。</li>\n<li>开通了自己的博客(gitpage),把博客从csdn迁移到github上，租用了腾讯云主机，备案了自己的域名，有了自己的简单的网站，可以写一些自己感兴趣的东西(自由的感觉真好，法无禁止皆可为)。</li>\n<li>也感谢这一年来小伙伴的帮助，幸好有你们，帮我解决了困难。</li>\n<li>当然，在这一年中也有很多事情不是那么顺利，从上家公司离职，从10月到12月，中间休息了两个月，回了一次家，跑去深圳和妹子玩了四五天的样子(几乎是全部时间都泡在图书馆了，沉迷学习无法自拔)，其余时间也就是看看书，打打游戏之类的，总之这两个月的时间大部分都被浪费掉了，没有任何收获。</li>\n</ul>\n<p>生活上也没啥好说的，业余时间就是宅在家里，看看书，敲敲代码，打打游戏，不喜欢出去逛，貌似好像是在6、7月份的样子，二哥来北京玩，爬了一次八达岭长城，除此之外，就是去了三次漫展，其他的就没有什么了。</p>\n<h4 id=\"2017计划\"><a href=\"#2017计划\" class=\"headerlink\" title=\"2017计划\"></a>2017计划</h4><p>首先，最重要的就是提升自己的技术能力：</p>\n<ul>\n<li>python达到初级水平;html方面学习一下h5;</li>\n<li>J2EE方面学习一下ssm框架、nginx;</li>\n<li>JAVA和Android方面尽可能的提升自己，尽量在两年内能初步达到高级水平;</li>\n<li>Linux方面，熟悉一下vim，了解以下服务器方向的相关知识，毕竟自己只是拿linux做开发，没有把精力放在服务器假设方向。</li>\n</ul>\n<p>生活方面就尽量改变一下自己宅的属性,尽量多出去走走吧(这个有点难，比提升技术实力还要难)</p>\n<hr>\n<p>借用一本小说中的一段话吧：</p>\n<blockquote>\n<p><pre>  “其实所有的智慧生物都在饮鸩止渴。所有的智慧生物都在通过不断的科技进步，不断的探索未知来满足着自己的探索欲望。这些科技，以及理论还有知识，不是好东西，它们是毒药，它们会让文明形成强烈的依赖症，当所有的未知都被探索完毕的时候，这种鸩毒就会最终发作，并且让这个文明最终陷入到毒发身亡的境地之中。可是最可笑的是，虽然这个道理十分明显，可是包括我在内的所有文明，都无法逃脱这个怪圈。”<br>    “我……我怎么可以停止呢？就算它们明明是毒药，可是我也要不断的去吃啊。”萧宇喃喃自语着，“如果我的科技不能进步，如果现在就斩断我进步的道路，我现在就会发疯的。这一点是天生注定的，当我还在地球上的时候，当我拿起笔，拿起书本，学习到第一个数学公式，学习到第一个物理定理的时候，这种鸩毒就已经在我的灵魂深处深深的扎下了根，让我终其一生不得解脱。我的毒瘾会越来越大，我所需要的鸩毒分量会越来越多，我只能继续这样维持下去。以后再毒发，总比现在就毒发要好。”<br>    这个死在旅途之中的文明，让萧宇想到了很多很多，对萧宇的灵魂造成了很深的触动。可是萧宇已经无法停下自己的脚步了。浩瀚广阔的星空，无边无际的宇宙，就像是美丽异常的罂粟花，明知道危险，可是还是有不计其数的文明，包括萧宇在内都踏了进去，并且一个个踊跃异常，生怕自己吸食毒品的速度要比其余的文明慢了一点。</pre></p>\n</blockquote>\n<h2 id=\"\"><a href=\"#\" class=\"headerlink\" title=\"\"></a></h2><p>以上。</p>\n","excerpt":"<p>2016年的最后一天的最后半个小时了，写写这一年的收获总结和2017的计划吧。<br>一个字总结了一下2016年：穷。<br>当然这是开玩笑式的总结，但也是最接近事实的了。<br>","more":"</p>\n<h4 id=\"2016总结\"><a href=\"#2016总结\" class=\"headerlink\" title=\"2016总结\"></a>2016总结</h4><p>技术方面：<br>&nbsp;&nbsp;&nbsp;&nbsp;自从踏上IT这条不归路开始，就打算做一个全栈攻城狮，从敲下第一行<code>hello world</code>到自己独立用java写一个完整的大作业再到写出实际可用的程序到现在的工作，仔细想想已经五年多了吧。但是这仅仅是个开始，我对自己现在的定位是全栈攻城狮的道路刚刚慢出第一步，现在也就算是个全栈学徒吧。</p>\n<table><tr><th>编程技能</th><th>自定级别</th></tr><tr><td>python</td><td>入门</td></tr><tr><td>HTML</td><td>初级</td></tr><tr><td>J2EE</td><td>初级</td></tr><tr><td>JAVA</td><td>中级</td></tr><tr><td>Android</td><td>中级</td></tr><tr><td>Linux</td><td>中级</td></tr></table>\n\n<ul>\n<li>在工作中也踩过、填过、挖过很多坑，万幸的是一直坚持了下来，没有放弃，也没有想过要转行的事，就想一直在这个行业发展，努力提高自己的技术。</li>\n<li>15年双十二和今年的十二月四号，都参加了<code>开源中国</code>举办的<code>源创汇</code>年终盛典，接触到了很多大牛(虽然他们不曾记得我)，接触到很多以前没有见识过也没有想象过的东西，对自己的成长有很大帮助。</li>\n<li>开通了自己的博客(gitpage),把博客从csdn迁移到github上，租用了腾讯云主机，备案了自己的域名，有了自己的简单的网站，可以写一些自己感兴趣的东西(自由的感觉真好，法无禁止皆可为)。</li>\n<li>也感谢这一年来小伙伴的帮助，幸好有你们，帮我解决了困难。</li>\n<li>当然，在这一年中也有很多事情不是那么顺利，从上家公司离职，从10月到12月，中间休息了两个月，回了一次家，跑去深圳和妹子玩了四五天的样子(几乎是全部时间都泡在图书馆了，沉迷学习无法自拔)，其余时间也就是看看书，打打游戏之类的，总之这两个月的时间大部分都被浪费掉了，没有任何收获。</li>\n</ul>\n<p>生活上也没啥好说的，业余时间就是宅在家里，看看书，敲敲代码，打打游戏，不喜欢出去逛，貌似好像是在6、7月份的样子，二哥来北京玩，爬了一次八达岭长城，除此之外，就是去了三次漫展，其他的就没有什么了。</p>\n<h4 id=\"2017计划\"><a href=\"#2017计划\" class=\"headerlink\" title=\"2017计划\"></a>2017计划</h4><p>首先，最重要的就是提升自己的技术能力：</p>\n<ul>\n<li>python达到初级水平;html方面学习一下h5;</li>\n<li>J2EE方面学习一下ssm框架、nginx;</li>\n<li>JAVA和Android方面尽可能的提升自己，尽量在两年内能初步达到高级水平;</li>\n<li>Linux方面，熟悉一下vim，了解以下服务器方向的相关知识，毕竟自己只是拿linux做开发，没有把精力放在服务器假设方向。</li>\n</ul>\n<p>生活方面就尽量改变一下自己宅的属性,尽量多出去走走吧(这个有点难，比提升技术实力还要难)</p>\n<hr>\n<p>借用一本小说中的一段话吧：</p>\n<blockquote>\n<p><pre>  “其实所有的智慧生物都在饮鸩止渴。所有的智慧生物都在通过不断的科技进步，不断的探索未知来满足着自己的探索欲望。这些科技，以及理论还有知识，不是好东西，它们是毒药，它们会让文明形成强烈的依赖症，当所有的未知都被探索完毕的时候，这种鸩毒就会最终发作，并且让这个文明最终陷入到毒发身亡的境地之中。可是最可笑的是，虽然这个道理十分明显，可是包括我在内的所有文明，都无法逃脱这个怪圈。”<br>    “我……我怎么可以停止呢？就算它们明明是毒药，可是我也要不断的去吃啊。”萧宇喃喃自语着，“如果我的科技不能进步，如果现在就斩断我进步的道路，我现在就会发疯的。这一点是天生注定的，当我还在地球上的时候，当我拿起笔，拿起书本，学习到第一个数学公式，学习到第一个物理定理的时候，这种鸩毒就已经在我的灵魂深处深深的扎下了根，让我终其一生不得解脱。我的毒瘾会越来越大，我所需要的鸩毒分量会越来越多，我只能继续这样维持下去。以后再毒发，总比现在就毒发要好。”<br>    这个死在旅途之中的文明，让萧宇想到了很多很多，对萧宇的灵魂造成了很深的触动。可是萧宇已经无法停下自己的脚步了。浩瀚广阔的星空，无边无际的宇宙，就像是美丽异常的罂粟花，明知道危险，可是还是有不计其数的文明，包括萧宇在内都踏了进去，并且一个个踊跃异常，生怕自己吸食毒品的速度要比其余的文明慢了一点。</p>\n</blockquote>\n<h2 id=\"\"><a href=\"#\" class=\"headerlink\" title=\"\"></a></pre></h2><p>以上。</p>"},{"title":"《我的安卓爬坑之旅》","date":"2016-11-21T08:07:25.000Z","_content":"准备记录一下自己在工作学习中遇到的bug以及解决方案。不定期更新。\n内容包括但不限于android，J2EE，HTML，以及各种各样的需求。\n<!-- more -->\n形式如下：\nbug：\n①出现bug的场景\n②尽可能放上代码\n③分析原因：源码及原理\n④解决方案：思路及尽可能的放上代码\n需求：\n①产品需求：尽可能详细描述产品需求，尽量能放上UI\n②分析可能的解决方案：思路\n③解决过程：自己的思路及解决方案和踩到的坑\n④解决方法：尽可能放上关键代码或者伪代码\n⑤其他：一些意想不到的事。\n<hr>\n大家也可以发邮件到我的邮箱，把自己遇到的问题和大家分享一下\nemail: huangyuan@huangyuanlove.com\n","source":"_posts/《我的安卓爬坑之旅》.md","raw":"---\ntitle: 《我的安卓爬坑之旅》\ndate: 2016-11-21 16:07:25\ntags: [android,bug,Android爬坑之旅]\n---\n准备记录一下自己在工作学习中遇到的bug以及解决方案。不定期更新。\n内容包括但不限于android，J2EE，HTML，以及各种各样的需求。\n<!-- more -->\n形式如下：\nbug：\n①出现bug的场景\n②尽可能放上代码\n③分析原因：源码及原理\n④解决方案：思路及尽可能的放上代码\n需求：\n①产品需求：尽可能详细描述产品需求，尽量能放上UI\n②分析可能的解决方案：思路\n③解决过程：自己的思路及解决方案和踩到的坑\n④解决方法：尽可能放上关键代码或者伪代码\n⑤其他：一些意想不到的事。\n<hr>\n大家也可以发邮件到我的邮箱，把自己遇到的问题和大家分享一下\nemail: huangyuan@huangyuanlove.com\n","slug":"《我的安卓爬坑之旅》","published":1,"updated":"2017-07-02T08:48:57.274Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjbvyt3v80018scdgok6w12vm","content":"<p>准备记录一下自己在工作学习中遇到的bug以及解决方案。不定期更新。<br>内容包括但不限于android，J2EE，HTML，以及各种各样的需求。<br><a id=\"more\"></a><br>形式如下：<br>bug：<br>①出现bug的场景<br>②尽可能放上代码<br>③分析原因：源码及原理<br>④解决方案：思路及尽可能的放上代码<br>需求：<br>①产品需求：尽可能详细描述产品需求，尽量能放上UI<br>②分析可能的解决方案：思路<br>③解决过程：自己的思路及解决方案和踩到的坑<br>④解决方法：尽可能放上关键代码或者伪代码<br>⑤其他：一些意想不到的事。</p>\n<p><hr><br>大家也可以发邮件到我的邮箱，把自己遇到的问题和大家分享一下<br>email: huangyuan@huangyuanlove.com</p>\n","excerpt":"<p>准备记录一下自己在工作学习中遇到的bug以及解决方案。不定期更新。<br>内容包括但不限于android，J2EE，HTML，以及各种各样的需求。<br>","more":"<br>形式如下：<br>bug：<br>①出现bug的场景<br>②尽可能放上代码<br>③分析原因：源码及原理<br>④解决方案：思路及尽可能的放上代码<br>需求：<br>①产品需求：尽可能详细描述产品需求，尽量能放上UI<br>②分析可能的解决方案：思路<br>③解决过程：自己的思路及解决方案和踩到的坑<br>④解决方法：尽可能放上关键代码或者伪代码<br>⑤其他：一些意想不到的事。</p>\n<p><hr><br>大家也可以发邮件到我的邮箱，把自己遇到的问题和大家分享一下<br>email: huangyuan@huangyuanlove.com</p>"},{"title":"搭建git服务","date":"2017-04-15T02:25:31.000Z","_content":"公司的版本控制要从SVN迁移到git，正式的开发环境还没有搭建好，于是自己做了一个简单git服务。\n环境：\n本机: win10，服务器：ubuntu 16.04 LTS,ip:192.168.1.103\n<!--more-->\n本地安装git环境，配置用户名和邮箱之类的信息，然后生成秘钥，生成方式见 http://blog.csdn.net/huangyuan_xuan/article/details/49125597。\n服务器：\n1. 安装git,ssh服务\n`sudo apt install git ssh`\n2. 新增用户，用户名为git\n`adduser git`\n3. 初始化git仓库，我放在/home/git/repository\n`cd /home/git/repository`\n`git init --bare test.git`\n`--base`参数是初始化裸仓库。\n执行`tree`命令可以查看目录结构如下：\n![git_init_tree](/image/git/git_init_tree.png) \n4. 添加秘钥\n将本地生成的`id_rsa.pub`文件里面的内容追加到`/home/git/.ssh/authorized_keys`文件中。\n可以先将秘钥文件上传到服务器，然后在服务器上操作文件，添加内容。\n5. 修改权限\n将 /home/git 所有者更改为git用户\n`chown -R git:git /home/git`\n用户home目录755权限\n`chmod 755 /home/git`\n.ssh目录700权限\n`chmod 700 .ssh`\nauthorized_keys 600权限\n`chmod 600 .ssh/authorized_keys`\n6. 修改ssh配置文件\n配置文件是`/etc/ssh/sshd_config`，取消这行 `AuthorizedKeysFile    %h/.ssh/authorized_keys` 前面的注释\n7. 重启`ssh`服务\n`sudo service ssh restart`\n8. 可选项：为了安全 禁止git用户shell登录，需要修改/etc/passwd\n将 git:x:1001:1001:,,,:/home/git:/bin/bash\n改为 git:x:1001:1001:,,,:/home/git:/usr/bin/git-shell\n\n回到本地，进行克隆\n`git clone git@192.168.1.103:/home/git/code/test.git`\n或者\n`git clone git@192.168.1.103:code/test.git`\n如果ssh不是默认的22端口，则在ip后添加端口。","source":"_posts/搭建git服务.md","raw":"---\ntitle: 搭建git服务\ndate: 2017-04-15 10:25:31\ntags: [git,运维,服务器]\n---\n公司的版本控制要从SVN迁移到git，正式的开发环境还没有搭建好，于是自己做了一个简单git服务。\n环境：\n本机: win10，服务器：ubuntu 16.04 LTS,ip:192.168.1.103\n<!--more-->\n本地安装git环境，配置用户名和邮箱之类的信息，然后生成秘钥，生成方式见 http://blog.csdn.net/huangyuan_xuan/article/details/49125597。\n服务器：\n1. 安装git,ssh服务\n`sudo apt install git ssh`\n2. 新增用户，用户名为git\n`adduser git`\n3. 初始化git仓库，我放在/home/git/repository\n`cd /home/git/repository`\n`git init --bare test.git`\n`--base`参数是初始化裸仓库。\n执行`tree`命令可以查看目录结构如下：\n![git_init_tree](/image/git/git_init_tree.png) \n4. 添加秘钥\n将本地生成的`id_rsa.pub`文件里面的内容追加到`/home/git/.ssh/authorized_keys`文件中。\n可以先将秘钥文件上传到服务器，然后在服务器上操作文件，添加内容。\n5. 修改权限\n将 /home/git 所有者更改为git用户\n`chown -R git:git /home/git`\n用户home目录755权限\n`chmod 755 /home/git`\n.ssh目录700权限\n`chmod 700 .ssh`\nauthorized_keys 600权限\n`chmod 600 .ssh/authorized_keys`\n6. 修改ssh配置文件\n配置文件是`/etc/ssh/sshd_config`，取消这行 `AuthorizedKeysFile    %h/.ssh/authorized_keys` 前面的注释\n7. 重启`ssh`服务\n`sudo service ssh restart`\n8. 可选项：为了安全 禁止git用户shell登录，需要修改/etc/passwd\n将 git:x:1001:1001:,,,:/home/git:/bin/bash\n改为 git:x:1001:1001:,,,:/home/git:/usr/bin/git-shell\n\n回到本地，进行克隆\n`git clone git@192.168.1.103:/home/git/code/test.git`\n或者\n`git clone git@192.168.1.103:code/test.git`\n如果ssh不是默认的22端口，则在ip后添加端口。","slug":"搭建git服务","published":1,"updated":"2017-12-30T13:13:07.233Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjbvyt3va001ascdgwtyb1y9f","content":"<p>公司的版本控制要从SVN迁移到git，正式的开发环境还没有搭建好，于是自己做了一个简单git服务。<br>环境：<br>本机: win10，服务器：ubuntu 16.04 LTS,ip:192.168.1.103<br><a id=\"more\"></a><br>本地安装git环境，配置用户名和邮箱之类的信息，然后生成秘钥，生成方式见 <a href=\"http://blog.csdn.net/huangyuan_xuan/article/details/49125597。\" target=\"_blank\" rel=\"external\">http://blog.csdn.net/huangyuan_xuan/article/details/49125597。</a><br>服务器：</p>\n<ol>\n<li>安装git,ssh服务<br><code>sudo apt install git ssh</code></li>\n<li>新增用户，用户名为git<br><code>adduser git</code></li>\n<li>初始化git仓库，我放在/home/git/repository<br><code>cd /home/git/repository</code><br><code>git init --bare test.git</code><br><code>--base</code>参数是初始化裸仓库。<br>执行<code>tree</code>命令可以查看目录结构如下：<br><img src=\"/image/git/git_init_tree.png\" alt=\"git_init_tree\"> </li>\n<li>添加秘钥<br>将本地生成的<code>id_rsa.pub</code>文件里面的内容追加到<code>/home/git/.ssh/authorized_keys</code>文件中。<br>可以先将秘钥文件上传到服务器，然后在服务器上操作文件，添加内容。</li>\n<li>修改权限<br>将 /home/git 所有者更改为git用户<br><code>chown -R git:git /home/git</code><br>用户home目录755权限<br><code>chmod 755 /home/git</code><br>.ssh目录700权限<br><code>chmod 700 .ssh</code><br>authorized_keys 600权限<br><code>chmod 600 .ssh/authorized_keys</code></li>\n<li>修改ssh配置文件<br>配置文件是<code>/etc/ssh/sshd_config</code>，取消这行 <code>AuthorizedKeysFile    %h/.ssh/authorized_keys</code> 前面的注释</li>\n<li>重启<code>ssh</code>服务<br><code>sudo service ssh restart</code></li>\n<li>可选项：为了安全 禁止git用户shell登录，需要修改/etc/passwd<br>将 git:x:1001:1001:,,,:/home/git:/bin/bash<br>改为 git:x:1001:1001:,,,:/home/git:/usr/bin/git-shell</li>\n</ol>\n<p>回到本地，进行克隆<br><code>git clone git@192.168.1.103:/home/git/code/test.git</code><br>或者<br><code>git clone git@192.168.1.103:code/test.git</code><br>如果ssh不是默认的22端口，则在ip后添加端口。</p>\n","excerpt":"<p>公司的版本控制要从SVN迁移到git，正式的开发环境还没有搭建好，于是自己做了一个简单git服务。<br>环境：<br>本机: win10，服务器：ubuntu 16.04 LTS,ip:192.168.1.103<br>","more":"<br>本地安装git环境，配置用户名和邮箱之类的信息，然后生成秘钥，生成方式见 <a href=\"http://blog.csdn.net/huangyuan_xuan/article/details/49125597。\">http://blog.csdn.net/huangyuan_xuan/article/details/49125597。</a><br>服务器：</p>\n<ol>\n<li>安装git,ssh服务<br><code>sudo apt install git ssh</code></li>\n<li>新增用户，用户名为git<br><code>adduser git</code></li>\n<li>初始化git仓库，我放在/home/git/repository<br><code>cd /home/git/repository</code><br><code>git init --bare test.git</code><br><code>--base</code>参数是初始化裸仓库。<br>执行<code>tree</code>命令可以查看目录结构如下：<br><img src=\"/image/git/git_init_tree.png\" alt=\"git_init_tree\"> </li>\n<li>添加秘钥<br>将本地生成的<code>id_rsa.pub</code>文件里面的内容追加到<code>/home/git/.ssh/authorized_keys</code>文件中。<br>可以先将秘钥文件上传到服务器，然后在服务器上操作文件，添加内容。</li>\n<li>修改权限<br>将 /home/git 所有者更改为git用户<br><code>chown -R git:git /home/git</code><br>用户home目录755权限<br><code>chmod 755 /home/git</code><br>.ssh目录700权限<br><code>chmod 700 .ssh</code><br>authorized_keys 600权限<br><code>chmod 600 .ssh/authorized_keys</code></li>\n<li>修改ssh配置文件<br>配置文件是<code>/etc/ssh/sshd_config</code>，取消这行 <code>AuthorizedKeysFile    %h/.ssh/authorized_keys</code> 前面的注释</li>\n<li>重启<code>ssh</code>服务<br><code>sudo service ssh restart</code></li>\n<li>可选项：为了安全 禁止git用户shell登录，需要修改/etc/passwd<br>将 git:x:1001:1001:,,,:/home/git:/bin/bash<br>改为 git:x:1001:1001:,,,:/home/git:/usr/bin/git-shell</li>\n</ol>\n<p>回到本地，进行克隆<br><code>git clone git@192.168.1.103:/home/git/code/test.git</code><br>或者<br><code>git clone git@192.168.1.103:code/test.git</code><br>如果ssh不是默认的22端口，则在ip后添加端口。</p>"},{"title":"写在2018元旦之前:2017的总结","date":"2017-12-30T13:13:55.000Z","_content":"2017年已经过去了，现在已经是2018年1月1号了，写写这一年的收获总结和2018的计划吧。\n一个字总结了一下2018年：穷。我也不知道钱花到哪里去了【无奈、摊手】。\n当然这是开玩笑式的总结，但也是最接近事实的了。\n刚刚翻了翻2016年年末写了总结个2017的计划，我先捂会脸。\n<!--more-->\n先看看完成了哪些吧：\n* python达到初级水平:这个勉勉强强算是达到了吧。\n* J2EE学习ssm和nginx:这个就很惭愧了，一直没看，不是没时间，就是平时大概了解了一下，根本就没有系统的学习过。\n* Java和Android：这个一直没停下过，毕竟是饭碗，在别人看来差不多已经是高级工程师了，可我觉得我刚刚到中级水平吧(标准不一样嘛)。\n* Linux：这个也没怎么深入，能在linux平台下做开发、了解常见配置，除了问题能找到解决方案就好。公司开发坏境是windows,就算我想用linux，这个也不大好，只能平时自己玩玩。\n\n想想自己2017年都学到了啥，其实我也不知道自己又学到了啥，有些东西都是基础性、底层的东西，表面上看起来没什么提高，实际上现在我也没觉得有啥用户，或许是因为自己还没有到那个层次吧。表面上学到的东西如下：\n* 记录了一下在使用高德地图踩的坑(写到博客上了)。\n* 大致看了一下tcp协议，就当是复习了，当时学ccna的时候也没怎么在意。\n* 大致看了一遍《Android开发艺术探索》，可惜IPC还是没学会。\n* 大致看了一下python编程，了解了一下flask和Django。\n* 又大致看了一遍《深入理解JVM虚拟机》，感觉不出来有什么提高，只是聊天吹水的时候又多了点东西。\n* 大致看了一下C++，没深入学习，坚持不下去了。\n* 动手搭建了一下elk，并没有什么卵用，毕竟公司有专门的运维。\n* 动手搭建了一下Jenkins，并没有什么卵用，毕竟公司有专门的运维。\n* 动手搭建了一下git服务，并没有什么卵用，毕竟公司有专门的运维。\n* 写了两个IDEA的插件，写完之后才发现有人写过了，而且还是已经发布了的。\n* 用不同的方式方法、框架、语言把《煎蛋》写了好几遍。\n* 大致学习了一下kotlin。\n* 其他的就是读了几本书、认识了几个朋友。\n\n遗憾的事\n* 和妹子异地，没有多陪陪妹子。\n* 没有锻炼，身体素质差的不要不要的，手无缚鸡之力。\n* 自己一直念念不忘的热修复没有动手实践过。\n* 自己一直念念不忘的微信小程序也没有去试试。\n* 自己一直念念不忘的日语也放弃了。\n* 脾气似乎暴躁了许多，竟然喜欢《死亡笔记》中所描述的世界。\n\n2018计划\n* 有时间多陪陪妹子。\n* 坚持锻炼。\n* 至少读3本书，要有总结和读后感的那种。\n* 有时间的话，至少参与一次开源翻译计划(Apche-CN)\\\n* 人工智能和机器学习挺火的，妹子研究生也是这个方向，学学这一块的东西，至少不要拖妹子后腿吧。\n* Java和Android方向继续努力，撸源码，多学习。\n* 坚持写博客，不能偷懒了。\n* 修身养性，别这么大脾气了，一点就爆(抱个被子，泡点枸杞挺不错的)。\n\n![2018](/image/2018_01_01.png)\n----\n以上\n","source":"_posts/写在2018元旦之前-2017的总结.md","raw":"---\ntitle: '写在2018元旦之前:2017的总结'\ndate: 2017-12-30 21:13:55\ntags: [乱七八糟]\n---\n2017年已经过去了，现在已经是2018年1月1号了，写写这一年的收获总结和2018的计划吧。\n一个字总结了一下2018年：穷。我也不知道钱花到哪里去了【无奈、摊手】。\n当然这是开玩笑式的总结，但也是最接近事实的了。\n刚刚翻了翻2016年年末写了总结个2017的计划，我先捂会脸。\n<!--more-->\n先看看完成了哪些吧：\n* python达到初级水平:这个勉勉强强算是达到了吧。\n* J2EE学习ssm和nginx:这个就很惭愧了，一直没看，不是没时间，就是平时大概了解了一下，根本就没有系统的学习过。\n* Java和Android：这个一直没停下过，毕竟是饭碗，在别人看来差不多已经是高级工程师了，可我觉得我刚刚到中级水平吧(标准不一样嘛)。\n* Linux：这个也没怎么深入，能在linux平台下做开发、了解常见配置，除了问题能找到解决方案就好。公司开发坏境是windows,就算我想用linux，这个也不大好，只能平时自己玩玩。\n\n想想自己2017年都学到了啥，其实我也不知道自己又学到了啥，有些东西都是基础性、底层的东西，表面上看起来没什么提高，实际上现在我也没觉得有啥用户，或许是因为自己还没有到那个层次吧。表面上学到的东西如下：\n* 记录了一下在使用高德地图踩的坑(写到博客上了)。\n* 大致看了一下tcp协议，就当是复习了，当时学ccna的时候也没怎么在意。\n* 大致看了一遍《Android开发艺术探索》，可惜IPC还是没学会。\n* 大致看了一下python编程，了解了一下flask和Django。\n* 又大致看了一遍《深入理解JVM虚拟机》，感觉不出来有什么提高，只是聊天吹水的时候又多了点东西。\n* 大致看了一下C++，没深入学习，坚持不下去了。\n* 动手搭建了一下elk，并没有什么卵用，毕竟公司有专门的运维。\n* 动手搭建了一下Jenkins，并没有什么卵用，毕竟公司有专门的运维。\n* 动手搭建了一下git服务，并没有什么卵用，毕竟公司有专门的运维。\n* 写了两个IDEA的插件，写完之后才发现有人写过了，而且还是已经发布了的。\n* 用不同的方式方法、框架、语言把《煎蛋》写了好几遍。\n* 大致学习了一下kotlin。\n* 其他的就是读了几本书、认识了几个朋友。\n\n遗憾的事\n* 和妹子异地，没有多陪陪妹子。\n* 没有锻炼，身体素质差的不要不要的，手无缚鸡之力。\n* 自己一直念念不忘的热修复没有动手实践过。\n* 自己一直念念不忘的微信小程序也没有去试试。\n* 自己一直念念不忘的日语也放弃了。\n* 脾气似乎暴躁了许多，竟然喜欢《死亡笔记》中所描述的世界。\n\n2018计划\n* 有时间多陪陪妹子。\n* 坚持锻炼。\n* 至少读3本书，要有总结和读后感的那种。\n* 有时间的话，至少参与一次开源翻译计划(Apche-CN)\\\n* 人工智能和机器学习挺火的，妹子研究生也是这个方向，学学这一块的东西，至少不要拖妹子后腿吧。\n* Java和Android方向继续努力，撸源码，多学习。\n* 坚持写博客，不能偷懒了。\n* 修身养性，别这么大脾气了，一点就爆(抱个被子，泡点枸杞挺不错的)。\n\n![2018](/image/2018_01_01.png)\n----\n以上\n","slug":"写在2018元旦之前-2017的总结","published":1,"updated":"2018-01-01T08:28:49.006Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjbvyt3vb001dscdgnpc1wwwl","content":"<p>2017年已经过去了，现在已经是2018年1月1号了，写写这一年的收获总结和2018的计划吧。<br>一个字总结了一下2018年：穷。我也不知道钱花到哪里去了【无奈、摊手】。<br>当然这是开玩笑式的总结，但也是最接近事实的了。<br>刚刚翻了翻2016年年末写了总结个2017的计划，我先捂会脸。<br><a id=\"more\"></a><br>先看看完成了哪些吧：</p>\n<ul>\n<li>python达到初级水平:这个勉勉强强算是达到了吧。</li>\n<li>J2EE学习ssm和nginx:这个就很惭愧了，一直没看，不是没时间，就是平时大概了解了一下，根本就没有系统的学习过。</li>\n<li>Java和Android：这个一直没停下过，毕竟是饭碗，在别人看来差不多已经是高级工程师了，可我觉得我刚刚到中级水平吧(标准不一样嘛)。</li>\n<li>Linux：这个也没怎么深入，能在linux平台下做开发、了解常见配置，除了问题能找到解决方案就好。公司开发坏境是windows,就算我想用linux，这个也不大好，只能平时自己玩玩。</li>\n</ul>\n<p>想想自己2017年都学到了啥，其实我也不知道自己又学到了啥，有些东西都是基础性、底层的东西，表面上看起来没什么提高，实际上现在我也没觉得有啥用户，或许是因为自己还没有到那个层次吧。表面上学到的东西如下：</p>\n<ul>\n<li>记录了一下在使用高德地图踩的坑(写到博客上了)。</li>\n<li>大致看了一下tcp协议，就当是复习了，当时学ccna的时候也没怎么在意。</li>\n<li>大致看了一遍《Android开发艺术探索》，可惜IPC还是没学会。</li>\n<li>大致看了一下python编程，了解了一下flask和Django。</li>\n<li>又大致看了一遍《深入理解JVM虚拟机》，感觉不出来有什么提高，只是聊天吹水的时候又多了点东西。</li>\n<li>大致看了一下C++，没深入学习，坚持不下去了。</li>\n<li>动手搭建了一下elk，并没有什么卵用，毕竟公司有专门的运维。</li>\n<li>动手搭建了一下Jenkins，并没有什么卵用，毕竟公司有专门的运维。</li>\n<li>动手搭建了一下git服务，并没有什么卵用，毕竟公司有专门的运维。</li>\n<li>写了两个IDEA的插件，写完之后才发现有人写过了，而且还是已经发布了的。</li>\n<li>用不同的方式方法、框架、语言把《煎蛋》写了好几遍。</li>\n<li>大致学习了一下kotlin。</li>\n<li>其他的就是读了几本书、认识了几个朋友。</li>\n</ul>\n<p>遗憾的事</p>\n<ul>\n<li>和妹子异地，没有多陪陪妹子。</li>\n<li>没有锻炼，身体素质差的不要不要的，手无缚鸡之力。</li>\n<li>自己一直念念不忘的热修复没有动手实践过。</li>\n<li>自己一直念念不忘的微信小程序也没有去试试。</li>\n<li>自己一直念念不忘的日语也放弃了。</li>\n<li>脾气似乎暴躁了许多，竟然喜欢《死亡笔记》中所描述的世界。</li>\n</ul>\n<p>2018计划</p>\n<ul>\n<li>有时间多陪陪妹子。</li>\n<li>坚持锻炼。</li>\n<li>至少读3本书，要有总结和读后感的那种。</li>\n<li>有时间的话，至少参与一次开源翻译计划(Apche-CN)\\</li>\n<li>人工智能和机器学习挺火的，妹子研究生也是这个方向，学学这一块的东西，至少不要拖妹子后腿吧。</li>\n<li>Java和Android方向继续努力，撸源码，多学习。</li>\n<li>坚持写博客，不能偷懒了。</li>\n<li>修身养性，别这么大脾气了，一点就爆(抱个被子，泡点枸杞挺不错的)。</li>\n</ul>\n<h2 id=\"\"><a href=\"#\" class=\"headerlink\" title=\"\"></a><img src=\"/image/2018_01_01.png\" alt=\"2018\"></h2><p>以上</p>\n","excerpt":"<p>2017年已经过去了，现在已经是2018年1月1号了，写写这一年的收获总结和2018的计划吧。<br>一个字总结了一下2018年：穷。我也不知道钱花到哪里去了【无奈、摊手】。<br>当然这是开玩笑式的总结，但也是最接近事实的了。<br>刚刚翻了翻2016年年末写了总结个2017的计划，我先捂会脸。<br>","more":"<br>先看看完成了哪些吧：</p>\n<ul>\n<li>python达到初级水平:这个勉勉强强算是达到了吧。</li>\n<li>J2EE学习ssm和nginx:这个就很惭愧了，一直没看，不是没时间，就是平时大概了解了一下，根本就没有系统的学习过。</li>\n<li>Java和Android：这个一直没停下过，毕竟是饭碗，在别人看来差不多已经是高级工程师了，可我觉得我刚刚到中级水平吧(标准不一样嘛)。</li>\n<li>Linux：这个也没怎么深入，能在linux平台下做开发、了解常见配置，除了问题能找到解决方案就好。公司开发坏境是windows,就算我想用linux，这个也不大好，只能平时自己玩玩。</li>\n</ul>\n<p>想想自己2017年都学到了啥，其实我也不知道自己又学到了啥，有些东西都是基础性、底层的东西，表面上看起来没什么提高，实际上现在我也没觉得有啥用户，或许是因为自己还没有到那个层次吧。表面上学到的东西如下：</p>\n<ul>\n<li>记录了一下在使用高德地图踩的坑(写到博客上了)。</li>\n<li>大致看了一下tcp协议，就当是复习了，当时学ccna的时候也没怎么在意。</li>\n<li>大致看了一遍《Android开发艺术探索》，可惜IPC还是没学会。</li>\n<li>大致看了一下python编程，了解了一下flask和Django。</li>\n<li>又大致看了一遍《深入理解JVM虚拟机》，感觉不出来有什么提高，只是聊天吹水的时候又多了点东西。</li>\n<li>大致看了一下C++，没深入学习，坚持不下去了。</li>\n<li>动手搭建了一下elk，并没有什么卵用，毕竟公司有专门的运维。</li>\n<li>动手搭建了一下Jenkins，并没有什么卵用，毕竟公司有专门的运维。</li>\n<li>动手搭建了一下git服务，并没有什么卵用，毕竟公司有专门的运维。</li>\n<li>写了两个IDEA的插件，写完之后才发现有人写过了，而且还是已经发布了的。</li>\n<li>用不同的方式方法、框架、语言把《煎蛋》写了好几遍。</li>\n<li>大致学习了一下kotlin。</li>\n<li>其他的就是读了几本书、认识了几个朋友。</li>\n</ul>\n<p>遗憾的事</p>\n<ul>\n<li>和妹子异地，没有多陪陪妹子。</li>\n<li>没有锻炼，身体素质差的不要不要的，手无缚鸡之力。</li>\n<li>自己一直念念不忘的热修复没有动手实践过。</li>\n<li>自己一直念念不忘的微信小程序也没有去试试。</li>\n<li>自己一直念念不忘的日语也放弃了。</li>\n<li>脾气似乎暴躁了许多，竟然喜欢《死亡笔记》中所描述的世界。</li>\n</ul>\n<p>2018计划</p>\n<ul>\n<li>有时间多陪陪妹子。</li>\n<li>坚持锻炼。</li>\n<li>至少读3本书，要有总结和读后感的那种。</li>\n<li>有时间的话，至少参与一次开源翻译计划(Apche-CN)\\</li>\n<li>人工智能和机器学习挺火的，妹子研究生也是这个方向，学学这一块的东西，至少不要拖妹子后腿吧。</li>\n<li>Java和Android方向继续努力，撸源码，多学习。</li>\n<li>坚持写博客，不能偷懒了。</li>\n<li>修身养性，别这么大脾气了，一点就爆(抱个被子，泡点枸杞挺不错的)。</li>\n</ul>\n<h2 id=\"\"><a href=\"#\" class=\"headerlink\" title=\"\"></a><img src=\"/image/2018_01_01.png\" alt=\"2018\"></h2><p>以上</p>"},{"title":"如何获取csdn中个人所有文章标题及链接","date":"2016-10-19T14:32:42.000Z","_content":"小伙伴问如何把自己csdn上的文章标题和超链接都扒下来,问我是不是一个个点开之后抄过去的...当然不是,做为一个爱(sha)好(dou)广(dong)泛(dian)的程序员,怎么会用这么麻烦的方法.\n<!-- more -->\n　　本来打算写java模拟登录之后获取网页源码,然后再用jsoup去解析,得到自己需要的数据.原来就这么干过,好像是写学校的绩点计算器来着吧,就是输入帐号密码就能查到自己的成绩和绩点的那种.\n翻出来代码看了看太麻烦了,想到自己最近在看python,就想着用python来解决,但是问题又来了,python不熟啊,就算写出来了也得看网页源码,找到规律才行,讲道理的说挺烦这东西的.\n最后,还是用js来解决,毕竟这种事也干过,也不是多麻烦.\n登录自己的帐号,找到文章列表,打开控制台窗口,忘了说一下自己的环境了`ubuntu`,`chrom`,找到文章标题和超链接的部分,如下图:\n![csdn个人博客列表](/image/csdn_home.png)\n发现所有的文章标题和超链接结构如下:\n```HTML\n <span class=\"link_title\">\n \t<a href=\"/huangyuan_xuan/article/details/51935666\">\n        初步编写IDEA\\AndroidStudio翻译插件            \n        </a>\n</span>\n```\n另外,界面中还引入了jQuery这个三方库,这就更简单了:\n找到开发者工具的控制台(console),写入下面两行代码\n```JavaScript\nvar aTags = $(\".link_title > a\")\nfor(var i = 0;i<50;i++)\n{\n\tconsole.log(\"[\" + aTags[i].text.trim() + \"](\" + aTags[i].href +\") \"+ aTags[i].href) +\"<br/>\"\n\t}\n```\nok,执行结果如下\n![csdn个人博客标题和超链接](/image/csdn_blog_title.png)\n　　在控制台写的代码第一行是使用jQuery库找到所有文章的超链接集合,第二行是按照`markdown`超链接的语法打印出来文章标题和超链接,至于循环中的`50`这个数字,一页最多只有50篇文章,我偷懒了,建议使用`aTags.length`\n<hr>\n以上\n","source":"_posts/如何获取csdn中个人所有文章标题及链接.md","raw":"---\ntitle: 如何获取csdn中个人所有文章标题及链接\ndate: 2016-10-19 22:32:42\ntags: csdn\n---\n小伙伴问如何把自己csdn上的文章标题和超链接都扒下来,问我是不是一个个点开之后抄过去的...当然不是,做为一个爱(sha)好(dou)广(dong)泛(dian)的程序员,怎么会用这么麻烦的方法.\n<!-- more -->\n　　本来打算写java模拟登录之后获取网页源码,然后再用jsoup去解析,得到自己需要的数据.原来就这么干过,好像是写学校的绩点计算器来着吧,就是输入帐号密码就能查到自己的成绩和绩点的那种.\n翻出来代码看了看太麻烦了,想到自己最近在看python,就想着用python来解决,但是问题又来了,python不熟啊,就算写出来了也得看网页源码,找到规律才行,讲道理的说挺烦这东西的.\n最后,还是用js来解决,毕竟这种事也干过,也不是多麻烦.\n登录自己的帐号,找到文章列表,打开控制台窗口,忘了说一下自己的环境了`ubuntu`,`chrom`,找到文章标题和超链接的部分,如下图:\n![csdn个人博客列表](/image/csdn_home.png)\n发现所有的文章标题和超链接结构如下:\n```HTML\n <span class=\"link_title\">\n \t<a href=\"/huangyuan_xuan/article/details/51935666\">\n        初步编写IDEA\\AndroidStudio翻译插件            \n        </a>\n</span>\n```\n另外,界面中还引入了jQuery这个三方库,这就更简单了:\n找到开发者工具的控制台(console),写入下面两行代码\n```JavaScript\nvar aTags = $(\".link_title > a\")\nfor(var i = 0;i<50;i++)\n{\n\tconsole.log(\"[\" + aTags[i].text.trim() + \"](\" + aTags[i].href +\") \"+ aTags[i].href) +\"<br/>\"\n\t}\n```\nok,执行结果如下\n![csdn个人博客标题和超链接](/image/csdn_blog_title.png)\n　　在控制台写的代码第一行是使用jQuery库找到所有文章的超链接集合,第二行是按照`markdown`超链接的语法打印出来文章标题和超链接,至于循环中的`50`这个数字,一页最多只有50篇文章,我偷懒了,建议使用`aTags.length`\n<hr>\n以上\n","slug":"如何获取csdn中个人所有文章标题及链接","published":1,"updated":"2017-12-30T13:13:07.232Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjbvyt3wc003pscdgx59ul3wt","content":"<p>小伙伴问如何把自己csdn上的文章标题和超链接都扒下来,问我是不是一个个点开之后抄过去的…当然不是,做为一个爱(sha)好(dou)广(dong)泛(dian)的程序员,怎么会用这么麻烦的方法.<br><a id=\"more\"></a><br>　　本来打算写java模拟登录之后获取网页源码,然后再用jsoup去解析,得到自己需要的数据.原来就这么干过,好像是写学校的绩点计算器来着吧,就是输入帐号密码就能查到自己的成绩和绩点的那种.<br>翻出来代码看了看太麻烦了,想到自己最近在看python,就想着用python来解决,但是问题又来了,python不熟啊,就算写出来了也得看网页源码,找到规律才行,讲道理的说挺烦这东西的.<br>最后,还是用js来解决,毕竟这种事也干过,也不是多麻烦.<br>登录自己的帐号,找到文章列表,打开控制台窗口,忘了说一下自己的环境了<code>ubuntu</code>,<code>chrom</code>,找到文章标题和超链接的部分,如下图:<br><img src=\"/image/csdn_home.png\" alt=\"csdn个人博客列表\"><br>发现所有的文章标题和超链接结构如下:<br><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"> <span class=\"tag\">&lt;<span class=\"name\">span</span> <span class=\"attr\">class</span>=<span class=\"string\">\"link_title\"</span>&gt;</span></div><div class=\"line\"> \t<span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">href</span>=<span class=\"string\">\"/huangyuan_xuan/article/details/51935666\"</span>&gt;</span></div><div class=\"line\">        初步编写IDEA\\AndroidStudio翻译插件            </div><div class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">span</span>&gt;</span></div></pre></td></tr></table></figure></p>\n<p>另外,界面中还引入了jQuery这个三方库,这就更简单了:<br>找到开发者工具的控制台(console),写入下面两行代码<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> aTags = $(<span class=\"string\">\".link_title &gt; a\"</span>)</div><div class=\"line\"><span class=\"keyword\">for</span>(<span class=\"keyword\">var</span> i = <span class=\"number\">0</span>;i&lt;<span class=\"number\">50</span>;i++)</div><div class=\"line\">&#123;</div><div class=\"line\">\t<span class=\"built_in\">console</span>.log(<span class=\"string\">\"[\"</span> + aTags[i].text.trim() + <span class=\"string\">\"](\"</span> + aTags[i].href +<span class=\"string\">\") \"</span>+ aTags[i].href) +<span class=\"string\">\"&lt;br/&gt;\"</span></div><div class=\"line\">\t&#125;</div></pre></td></tr></table></figure></p>\n<p>ok,执行结果如下<br><img src=\"/image/csdn_blog_title.png\" alt=\"csdn个人博客标题和超链接\"><br>　　在控制台写的代码第一行是使用jQuery库找到所有文章的超链接集合,第二行是按照<code>markdown</code>超链接的语法打印出来文章标题和超链接,至于循环中的<code>50</code>这个数字,一页最多只有50篇文章,我偷懒了,建议使用<code>aTags.length</code></p>\n<p><hr><br>以上</p>\n","excerpt":"<p>小伙伴问如何把自己csdn上的文章标题和超链接都扒下来,问我是不是一个个点开之后抄过去的…当然不是,做为一个爱(sha)好(dou)广(dong)泛(dian)的程序员,怎么会用这么麻烦的方法.<br>","more":"<br>　　本来打算写java模拟登录之后获取网页源码,然后再用jsoup去解析,得到自己需要的数据.原来就这么干过,好像是写学校的绩点计算器来着吧,就是输入帐号密码就能查到自己的成绩和绩点的那种.<br>翻出来代码看了看太麻烦了,想到自己最近在看python,就想着用python来解决,但是问题又来了,python不熟啊,就算写出来了也得看网页源码,找到规律才行,讲道理的说挺烦这东西的.<br>最后,还是用js来解决,毕竟这种事也干过,也不是多麻烦.<br>登录自己的帐号,找到文章列表,打开控制台窗口,忘了说一下自己的环境了<code>ubuntu</code>,<code>chrom</code>,找到文章标题和超链接的部分,如下图:<br><img src=\"/image/csdn_home.png\" alt=\"csdn个人博客列表\"><br>发现所有的文章标题和超链接结构如下:<br><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"> <span class=\"tag\">&lt;<span class=\"name\">span</span> <span class=\"attr\">class</span>=<span class=\"string\">\"link_title\"</span>&gt;</span></div><div class=\"line\"> \t<span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">href</span>=<span class=\"string\">\"/huangyuan_xuan/article/details/51935666\"</span>&gt;</span></div><div class=\"line\">        初步编写IDEA\\AndroidStudio翻译插件            </div><div class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">span</span>&gt;</span></div></pre></td></tr></table></figure></p>\n<p>另外,界面中还引入了jQuery这个三方库,这就更简单了:<br>找到开发者工具的控制台(console),写入下面两行代码<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> aTags = $(<span class=\"string\">\".link_title &gt; a\"</span>)</div><div class=\"line\"><span class=\"keyword\">for</span>(<span class=\"keyword\">var</span> i = <span class=\"number\">0</span>;i&lt;<span class=\"number\">50</span>;i++)</div><div class=\"line\">&#123;</div><div class=\"line\">\t<span class=\"built_in\">console</span>.log(<span class=\"string\">\"[\"</span> + aTags[i].text.trim() + <span class=\"string\">\"](\"</span> + aTags[i].href +<span class=\"string\">\") \"</span>+ aTags[i].href) +<span class=\"string\">\"&lt;br/&gt;\"</span></div><div class=\"line\">\t&#125;</div></pre></td></tr></table></figure></p>\n<p>ok,执行结果如下<br><img src=\"/image/csdn_blog_title.png\" alt=\"csdn个人博客标题和超链接\"><br>　　在控制台写的代码第一行是使用jQuery库找到所有文章的超链接集合,第二行是按照<code>markdown</code>超链接的语法打印出来文章标题和超链接,至于循环中的<code>50</code>这个数字,一页最多只有50篇文章,我偷懒了,建议使用<code>aTags.length</code></p>\n<p><hr><br>以上</p>"},{"title":"原CSDN博客","date":"2016-10-16T14:39:41.000Z","_content":"不打算在csdn上面写博客了,转到gitpage上面,自己用hexo搭建了博客系统.\n现在把原csdn的博客链接抄在下面\n\n<!-- more -->\n[使用openfire搭建IM聊天系统(一)](http://blog.csdn.net/huangyuan_xuan/article/details/52549416) http://blog.csdn.net/huangyuan_xuan/article/details/52549416<br>\n [浅谈使用单元素的枚举类型实现单例模式](http://blog.csdn.net/huangyuan_xuan/article/details/52193006) http://blog.csdn.net/huangyuan_xuan/article/details/52193006<br>\n [初步编写IDEA\\AndroidStudio翻译插件](http://blog.csdn.net/huangyuan_xuan/article/details/51935666) http://blog.csdn.net/huangyuan_xuan/article/details/51935666<br>\n [多线程 的理解（一）](http://blog.csdn.net/huangyuan_xuan/article/details/50881452) http://blog.csdn.net/huangyuan_xuan/article/details/50881452<br>\n [运行时数据区域](http://blog.csdn.net/huangyuan_xuan/article/details/50570461) http://blog.csdn.net/huangyuan_xuan/article/details/50570461<br>\n [虚拟机字节码执行引擎](http://blog.csdn.net/huangyuan_xuan/article/details/50569443) http://blog.csdn.net/huangyuan_xuan/article/details/50569443<br>\n [虚拟机类加载机制](http://blog.csdn.net/huangyuan_xuan/article/details/50550725) http://blog.csdn.net/huangyuan_xuan/article/details/50550725<br>\n [垃圾收集器与内存分配策略](http://blog.csdn.net/huangyuan_xuan/article/details/50513881) http://blog.csdn.net/huangyuan_xuan/article/details/50513881<br>\n [JDK的一些命令行工具](http://blog.csdn.net/huangyuan_xuan/article/details/50513861) http://blog.csdn.net/huangyuan_xuan/article/details/50513861<br>\n [MongoDB基础](http://blog.csdn.net/huangyuan_xuan/article/details/50155345) http://blog.csdn.net/huangyuan_xuan/article/details/50155345<br>\n [tomcat图形化界面管理及数据源配置](http://blog.csdn.net/huangyuan_xuan/article/details/49859151) http://blog.csdn.net/huangyuan_xuan/article/details/49859151<br>\n [android 四大图片缓存原理、特性对比](http://blog.csdn.net/huangyuan_xuan/article/details/49362701) http://blog.csdn.net/huangyuan_xuan/article/details/49362701<br>\n [github分支管理](http://blog.csdn.net/huangyuan_xuan/article/details/49356523) http://blog.csdn.net/huangyuan_xuan/article/details/49356523<br>\n [github 远程仓库](http://blog.csdn.net/huangyuan_xuan/article/details/49356505) http://blog.csdn.net/huangyuan_xuan/article/details/49356505<br>\n [github建立本地与远程仓库的连接](http://blog.csdn.net/huangyuan_xuan/article/details/49336403) http://blog.csdn.net/huangyuan_xuan/article/details/49336403<br>\n [Git 本地版本控制](http://blog.csdn.net/huangyuan_xuan/article/details/49162309) http://blog.csdn.net/huangyuan_xuan/article/details/49162309<br>\n [安装github](http://blog.csdn.net/huangyuan_xuan/article/details/49125597) http://blog.csdn.net/huangyuan_xuan/article/details/49125597<br>\n [ubuntu 14.04 apt-get install 不能自动补全解决办法](http://blog.csdn.net/huangyuan_xuan/article/details/48915299) http://blog.csdn.net/huangyuan_xuan/article/details/48915299<br>\n [String的一点小东西](http://blog.csdn.net/huangyuan_xuan/article/details/48116365) http://blog.csdn.net/huangyuan_xuan/article/details/48116365<br>\n [wireshark error: There are no interfaces on which a capture can be done.](http://blog.csdn.net/huangyuan_xuan/article/details/46632395) http://blog.csdn.net/huangyuan_xuan/article/details/46632395<br>\n [windows下使用cmd（命令行）发送邮件](http://blog.csdn.net/huangyuan_xuan/article/details/46564319) http://blog.csdn.net/huangyuan_xuan/article/details/46564319<br>\n [Notepad++ 搭建java编译环境](http://blog.csdn.net/huangyuan_xuan/article/details/45936413) http://blog.csdn.net/huangyuan_xuan/article/details/45936413<br>\n [JVM虚拟机](http://blog.csdn.net/huangyuan_xuan/article/details/44537233) http://blog.csdn.net/huangyuan_xuan/article/details/44537233<br>\n [servlet向浏览器输出验证码图片](http://blog.csdn.net/huangyuan_xuan/article/details/43817631) http://blog.csdn.net/huangyuan_xuan/article/details/43817631<br>\n [ubuntu14.04开热点共享网络](http://blog.csdn.net/huangyuan_xuan/article/details/43759585) http://blog.csdn.net/huangyuan_xuan/article/details/43759585<br>\n [UNIX/linux的find命令细节](http://blog.csdn.net/huangyuan_xuan/article/details/43739353) http://blog.csdn.net/huangyuan_xuan/article/details/43739353<br>\n [编写shell时，提示let：not found](http://blog.csdn.net/huangyuan_xuan/article/details/43490373) http://blog.csdn.net/huangyuan_xuan/article/details/43490373<br>\n [cmd命令大全](http://blog.csdn.net/huangyuan_xuan/article/details/42804537) http://blog.csdn.net/huangyuan_xuan/article/details/42804537<br>\n [华为 ap ac设备配置命令](http://blog.csdn.net/huangyuan_xuan/article/details/41647447) http://blog.csdn.net/huangyuan_xuan/article/details/41647447<br>\n [更改SQLserver的登录方式](http://blog.csdn.net/huangyuan_xuan/article/details/41085629) http://blog.csdn.net/huangyuan_xuan/article/details/41085629<br>\n [汇编FLAG寄存器简介](http://blog.csdn.net/huangyuan_xuan/article/details/40949147) http://blog.csdn.net/huangyuan_xuan/article/details/40949147<br>\n [汇编指令——转移指令](http://blog.csdn.net/huangyuan_xuan/article/details/40949119) http://blog.csdn.net/huangyuan_xuan/article/details/40949119<br>\n [汇编指令](http://blog.csdn.net/huangyuan_xuan/article/details/40949109) http://blog.csdn.net/huangyuan_xuan/article/details/40949109<br>\n [汇编寻址方式](http://blog.csdn.net/huangyuan_xuan/article/details/40949087) http://blog.csdn.net/huangyuan_xuan/article/details/40949087<br>\n [一段汇编小程序及说明——将数据，代码，栈放入不同的段](http://blog.csdn.net/huangyuan_xuan/article/details/40949075) http://blog.csdn.net/huangyuan_xuan/article/details/40949075<br>\n [一段简单汇编语言程序及说明](http://blog.csdn.net/huangyuan_xuan/article/details/40949069) http://blog.csdn.net/huangyuan_xuan/article/details/40949069<br>\n [8086寄存器](http://blog.csdn.net/huangyuan_xuan/article/details/40949063) http://blog.csdn.net/huangyuan_xuan/article/details/40949063<br>\n [oracle创建实例化数据库或者连接别的远程主机数据库提示“无监听程序”的解决办法](http://blog.csdn.net/huangyuan_xuan/article/details/40857207) http://blog.csdn.net/huangyuan_xuan/article/details/40857207<br>\n [安装tomcat提示Faild to install Tomcat7 service 解决办法](http://blog.csdn.net/huangyuan_xuan/article/details/40821859) http://blog.csdn.net/huangyuan_xuan/article/details/40821859<br>\n [mysql事物处理和管理配置](http://blog.csdn.net/huangyuan_xuan/article/details/40821521) http://blog.csdn.net/huangyuan_xuan/article/details/40821521<br>\n [mysql 连接查询](http://blog.csdn.net/huangyuan_xuan/article/details/40783341) http://blog.csdn.net/huangyuan_xuan/article/details/40783341<br>\n [MySQL常用命令](http://blog.csdn.net/huangyuan_xuan/article/details/40783331) http://blog.csdn.net/huangyuan_xuan/article/details/40783331<br>\n [ubuntu下MySQL键值不支持中文解决办法](http://blog.csdn.net/huangyuan_xuan/article/details/40783317) http://blog.csdn.net/huangyuan_xuan/article/details/40783317<br>\n [Myeclipse新建webservice客户端](http://blog.csdn.net/huangyuan_xuan/article/details/39992799) http://blog.csdn.net/huangyuan_xuan/article/details/39992799<br>\n [MyEclips新建webservice](http://blog.csdn.net/huangyuan_xuan/article/details/39992723) http://blog.csdn.net/huangyuan_xuan/article/details/39992723<br>\n [intellij IDEA更换主题为Darcula后中文项目名称变口（方框）的解决办法](http://blog.csdn.net/huangyuan_xuan/article/details/39896009) http://blog.csdn.net/huangyuan_xuan/article/details/39896009<br>\n [java模拟登录校内成绩查询网站，将获得的HTML代码用jsoup解析](http://blog.csdn.net/huangyuan_xuan/article/details/39723251) http://blog.csdn.net/huangyuan_xuan/article/details/39723251<br>\n [Ubuntu14.04 LTS更新源](http://blog.csdn.net/huangyuan_xuan/article/details/39119797) http://blog.csdn.net/huangyuan_xuan/article/details/39119797<br>\n [ubuntu14.04开机自动挂载windows磁盘的配置方法](http://blog.csdn.net/huangyuan_xuan/article/details/39118723) http://blog.csdn.net/huangyuan_xuan/article/details/39118723<br>\n [java实现MD5和sha1加密](http://blog.csdn.net/huangyuan_xuan/article/details/39081435) http://blog.csdn.net/huangyuan_xuan/article/details/39081435<br>\n [22 PPP协议](http://blog.csdn.net/huangyuan_xuan/article/details/38427607) http://blog.csdn.net/huangyuan_xuan/article/details/38427607<br>\n [21 串行接口封装](http://blog.csdn.net/huangyuan_xuan/article/details/38427547) http://blog.csdn.net/huangyuan_xuan/article/details/38427547<br>\n [20 internet connection](http://blog.csdn.net/huangyuan_xuan/article/details/38427527) http://blog.csdn.net/huangyuan_xuan/article/details/38427527<br>\n [19 广域网 WAN](http://blog.csdn.net/huangyuan_xuan/article/details/38423675) http://blog.csdn.net/huangyuan_xuan/article/details/38423675<br>\n [java的JDK的安装配置图文详解](http://blog.csdn.net/huangyuan_xuan/article/details/38405103) http://blog.csdn.net/huangyuan_xuan/article/details/38405103<br>\n [18 ACL访问控制列表（access control list）](http://blog.csdn.net/huangyuan_xuan/article/details/38387045) http://blog.csdn.net/huangyuan_xuan/article/details/38387045<br>\n [17 NAT转换](http://blog.csdn.net/huangyuan_xuan/article/details/38342675) http://blog.csdn.net/huangyuan_xuan/article/details/38342675<br>\n [16 DHCP](http://blog.csdn.net/huangyuan_xuan/article/details/38278825) http://blog.csdn.net/huangyuan_xuan/article/details/38278825<br>\n [Java常见错误列表](http://blog.csdn.net/huangyuan_xuan/article/details/37957229) http://blog.csdn.net/huangyuan_xuan/article/details/37957229<br>\n [LXLE Linux取代Windows XP的11个大招](http://blog.csdn.net/huangyuan_xuan/article/details/37937957) http://blog.csdn.net/huangyuan_xuan/article/details/37937957<br>\n [jQuery语法简介](http://blog.csdn.net/huangyuan_xuan/article/details/37738127) http://blog.csdn.net/huangyuan_xuan/article/details/37738127<br>\n [cookie简介](http://blog.csdn.net/huangyuan_xuan/article/details/37728211) http://blog.csdn.net/huangyuan_xuan/article/details/37728211<br>\n [DOM 简介](http://blog.csdn.net/huangyuan_xuan/article/details/37699891) http://blog.csdn.net/huangyuan_xuan/article/details/37699891<br>\n [vim 命令](http://blog.csdn.net/huangyuan_xuan/article/details/28880287) http://blog.csdn.net/huangyuan_xuan/article/details/28880287<br>\n [我们大神都这样——提问的智慧](http://blog.csdn.net/huangyuan_xuan/article/details/28276437) http://blog.csdn.net/huangyuan_xuan/article/details/28276437<br>\n [初学C语言的人看不懂的关机代码](http://blog.csdn.net/huangyuan_xuan/article/details/27972015) http://blog.csdn.net/huangyuan_xuan/article/details/27972015<br>\n [ubuntu连接路由器无线网络，却不能上网](http://blog.csdn.net/huangyuan_xuan/article/details/27792089) http://blog.csdn.net/huangyuan_xuan/article/details/27792089<br>\n [sublime-text2的中英文对照表（附带个人的配置习惯）](http://blog.csdn.net/huangyuan_xuan/article/details/26969041) http://blog.csdn.net/huangyuan_xuan/article/details/26969041<br>\n [电脑蓝屏代码大全](http://blog.csdn.net/huangyuan_xuan/article/details/26246709) http://blog.csdn.net/huangyuan_xuan/article/details/26246709<br>\n [VC6.0 快捷键整理](http://blog.csdn.net/huangyuan_xuan/article/details/26245513) http://blog.csdn.net/huangyuan_xuan/article/details/26245513<br>\n [玩游戏无法全屏](http://blog.csdn.net/huangyuan_xuan/article/details/26245135) http://blog.csdn.net/huangyuan_xuan/article/details/26245135<br>\n [15 Ospf](http://blog.csdn.net/huangyuan_xuan/article/details/26244991) http://blog.csdn.net/huangyuan_xuan/article/details/26244991<br>\n [14 EIGRP 配置](http://blog.csdn.net/huangyuan_xuan/article/details/26244541) http://blog.csdn.net/huangyuan_xuan/article/details/26244541<br>\n [13 ERGIP](http://blog.csdn.net/huangyuan_xuan/article/details/26244439) http://blog.csdn.net/huangyuan_xuan/article/details/26244439<br>\n [12    rip-2  配置命令](http://blog.csdn.net/huangyuan_xuan/article/details/26244201) http://blog.csdn.net/huangyuan_xuan/article/details/26244201<br>\n [11    rip -1](http://blog.csdn.net/huangyuan_xuan/article/details/26244031) http://blog.csdn.net/huangyuan_xuan/article/details/26244031<br>\n [10动态路由](http://blog.csdn.net/huangyuan_xuan/article/details/26243735) http://blog.csdn.net/huangyuan_xuan/article/details/26243735<br>\n [9静态路由](http://blog.csdn.net/huangyuan_xuan/article/details/26243487) http://blog.csdn.net/huangyuan_xuan/article/details/26243487<br>\n [8网络拓扑结构](http://blog.csdn.net/huangyuan_xuan/article/details/26243293) http://blog.csdn.net/huangyuan_xuan/article/details/26243293<br>\n [7VLSM子网划分](http://blog.csdn.net/huangyuan_xuan/article/details/26243041) http://blog.csdn.net/huangyuan_xuan/article/details/26243041<br>\n [6常用网络相关命令](http://blog.csdn.net/huangyuan_xuan/article/details/26242799) http://blog.csdn.net/huangyuan_xuan/article/details/26242799<br>\n [5数据包发送流程](http://blog.csdn.net/huangyuan_xuan/article/details/26242589) http://blog.csdn.net/huangyuan_xuan/article/details/26242589<br>\n [网线](http://blog.csdn.net/huangyuan_xuan/article/details/26242183) http://blog.csdn.net/huangyuan_xuan/article/details/26242183<br>\n [osi七层网络模型4](http://blog.csdn.net/huangyuan_xuan/article/details/26242101) http://blog.csdn.net/huangyuan_xuan/article/details/26242101<br>\n [osi七层网络模型3](http://blog.csdn.net/huangyuan_xuan/article/details/26242015) http://blog.csdn.net/huangyuan_xuan/article/details/26242015<br>\n [osi七层网络模型2](http://blog.csdn.net/huangyuan_xuan/article/details/26241831) http://blog.csdn.net/huangyuan_xuan/article/details/26241831<br>\n [OSI七层网络模型1](http://blog.csdn.net/huangyuan_xuan/article/details/26241631) http://blog.csdn.net/huangyuan_xuan/article/details/26241631<br>\n [sublime-text2 编译java出错 Decode error - output not utf-8的解决办法](http://blog.csdn.net/huangyuan_xuan/article/details/26164349) http://blog.csdn.net/huangyuan_xuan/article/details/26164349<br>\n [安装虚拟机报错解决办法 TheVMware Authorization Service is not running](http://blog.csdn.net/huangyuan_xuan/article/details/26162201) http://blog.csdn.net/huangyuan_xuan/article/details/26162201<br>\n [我的vim配置](http://blog.csdn.net/huangyuan_xuan/article/details/26162083) http://blog.csdn.net/huangyuan_xuan/article/details/26162083<br>\n [sublime text 2 搭建java运行环境](http://blog.csdn.net/huangyuan_xuan/article/details/26161983) http://blog.csdn.net/huangyuan_xuan/article/details/26161983<br>\n [ubuntu的一点命令](http://blog.csdn.net/huangyuan_xuan/article/details/26160973) http://blog.csdn.net/huangyuan_xuan/article/details/26160973<br>\n 以后主要就在gitpage上写博客了.\n 以上\n","source":"_posts/原CSDN博客.md","raw":"---\ntitle: 原CSDN博客\ndate: 2016-10-16 22:39:41\ntags: csdn\n---\n不打算在csdn上面写博客了,转到gitpage上面,自己用hexo搭建了博客系统.\n现在把原csdn的博客链接抄在下面\n\n<!-- more -->\n[使用openfire搭建IM聊天系统(一)](http://blog.csdn.net/huangyuan_xuan/article/details/52549416) http://blog.csdn.net/huangyuan_xuan/article/details/52549416<br>\n [浅谈使用单元素的枚举类型实现单例模式](http://blog.csdn.net/huangyuan_xuan/article/details/52193006) http://blog.csdn.net/huangyuan_xuan/article/details/52193006<br>\n [初步编写IDEA\\AndroidStudio翻译插件](http://blog.csdn.net/huangyuan_xuan/article/details/51935666) http://blog.csdn.net/huangyuan_xuan/article/details/51935666<br>\n [多线程 的理解（一）](http://blog.csdn.net/huangyuan_xuan/article/details/50881452) http://blog.csdn.net/huangyuan_xuan/article/details/50881452<br>\n [运行时数据区域](http://blog.csdn.net/huangyuan_xuan/article/details/50570461) http://blog.csdn.net/huangyuan_xuan/article/details/50570461<br>\n [虚拟机字节码执行引擎](http://blog.csdn.net/huangyuan_xuan/article/details/50569443) http://blog.csdn.net/huangyuan_xuan/article/details/50569443<br>\n [虚拟机类加载机制](http://blog.csdn.net/huangyuan_xuan/article/details/50550725) http://blog.csdn.net/huangyuan_xuan/article/details/50550725<br>\n [垃圾收集器与内存分配策略](http://blog.csdn.net/huangyuan_xuan/article/details/50513881) http://blog.csdn.net/huangyuan_xuan/article/details/50513881<br>\n [JDK的一些命令行工具](http://blog.csdn.net/huangyuan_xuan/article/details/50513861) http://blog.csdn.net/huangyuan_xuan/article/details/50513861<br>\n [MongoDB基础](http://blog.csdn.net/huangyuan_xuan/article/details/50155345) http://blog.csdn.net/huangyuan_xuan/article/details/50155345<br>\n [tomcat图形化界面管理及数据源配置](http://blog.csdn.net/huangyuan_xuan/article/details/49859151) http://blog.csdn.net/huangyuan_xuan/article/details/49859151<br>\n [android 四大图片缓存原理、特性对比](http://blog.csdn.net/huangyuan_xuan/article/details/49362701) http://blog.csdn.net/huangyuan_xuan/article/details/49362701<br>\n [github分支管理](http://blog.csdn.net/huangyuan_xuan/article/details/49356523) http://blog.csdn.net/huangyuan_xuan/article/details/49356523<br>\n [github 远程仓库](http://blog.csdn.net/huangyuan_xuan/article/details/49356505) http://blog.csdn.net/huangyuan_xuan/article/details/49356505<br>\n [github建立本地与远程仓库的连接](http://blog.csdn.net/huangyuan_xuan/article/details/49336403) http://blog.csdn.net/huangyuan_xuan/article/details/49336403<br>\n [Git 本地版本控制](http://blog.csdn.net/huangyuan_xuan/article/details/49162309) http://blog.csdn.net/huangyuan_xuan/article/details/49162309<br>\n [安装github](http://blog.csdn.net/huangyuan_xuan/article/details/49125597) http://blog.csdn.net/huangyuan_xuan/article/details/49125597<br>\n [ubuntu 14.04 apt-get install 不能自动补全解决办法](http://blog.csdn.net/huangyuan_xuan/article/details/48915299) http://blog.csdn.net/huangyuan_xuan/article/details/48915299<br>\n [String的一点小东西](http://blog.csdn.net/huangyuan_xuan/article/details/48116365) http://blog.csdn.net/huangyuan_xuan/article/details/48116365<br>\n [wireshark error: There are no interfaces on which a capture can be done.](http://blog.csdn.net/huangyuan_xuan/article/details/46632395) http://blog.csdn.net/huangyuan_xuan/article/details/46632395<br>\n [windows下使用cmd（命令行）发送邮件](http://blog.csdn.net/huangyuan_xuan/article/details/46564319) http://blog.csdn.net/huangyuan_xuan/article/details/46564319<br>\n [Notepad++ 搭建java编译环境](http://blog.csdn.net/huangyuan_xuan/article/details/45936413) http://blog.csdn.net/huangyuan_xuan/article/details/45936413<br>\n [JVM虚拟机](http://blog.csdn.net/huangyuan_xuan/article/details/44537233) http://blog.csdn.net/huangyuan_xuan/article/details/44537233<br>\n [servlet向浏览器输出验证码图片](http://blog.csdn.net/huangyuan_xuan/article/details/43817631) http://blog.csdn.net/huangyuan_xuan/article/details/43817631<br>\n [ubuntu14.04开热点共享网络](http://blog.csdn.net/huangyuan_xuan/article/details/43759585) http://blog.csdn.net/huangyuan_xuan/article/details/43759585<br>\n [UNIX/linux的find命令细节](http://blog.csdn.net/huangyuan_xuan/article/details/43739353) http://blog.csdn.net/huangyuan_xuan/article/details/43739353<br>\n [编写shell时，提示let：not found](http://blog.csdn.net/huangyuan_xuan/article/details/43490373) http://blog.csdn.net/huangyuan_xuan/article/details/43490373<br>\n [cmd命令大全](http://blog.csdn.net/huangyuan_xuan/article/details/42804537) http://blog.csdn.net/huangyuan_xuan/article/details/42804537<br>\n [华为 ap ac设备配置命令](http://blog.csdn.net/huangyuan_xuan/article/details/41647447) http://blog.csdn.net/huangyuan_xuan/article/details/41647447<br>\n [更改SQLserver的登录方式](http://blog.csdn.net/huangyuan_xuan/article/details/41085629) http://blog.csdn.net/huangyuan_xuan/article/details/41085629<br>\n [汇编FLAG寄存器简介](http://blog.csdn.net/huangyuan_xuan/article/details/40949147) http://blog.csdn.net/huangyuan_xuan/article/details/40949147<br>\n [汇编指令——转移指令](http://blog.csdn.net/huangyuan_xuan/article/details/40949119) http://blog.csdn.net/huangyuan_xuan/article/details/40949119<br>\n [汇编指令](http://blog.csdn.net/huangyuan_xuan/article/details/40949109) http://blog.csdn.net/huangyuan_xuan/article/details/40949109<br>\n [汇编寻址方式](http://blog.csdn.net/huangyuan_xuan/article/details/40949087) http://blog.csdn.net/huangyuan_xuan/article/details/40949087<br>\n [一段汇编小程序及说明——将数据，代码，栈放入不同的段](http://blog.csdn.net/huangyuan_xuan/article/details/40949075) http://blog.csdn.net/huangyuan_xuan/article/details/40949075<br>\n [一段简单汇编语言程序及说明](http://blog.csdn.net/huangyuan_xuan/article/details/40949069) http://blog.csdn.net/huangyuan_xuan/article/details/40949069<br>\n [8086寄存器](http://blog.csdn.net/huangyuan_xuan/article/details/40949063) http://blog.csdn.net/huangyuan_xuan/article/details/40949063<br>\n [oracle创建实例化数据库或者连接别的远程主机数据库提示“无监听程序”的解决办法](http://blog.csdn.net/huangyuan_xuan/article/details/40857207) http://blog.csdn.net/huangyuan_xuan/article/details/40857207<br>\n [安装tomcat提示Faild to install Tomcat7 service 解决办法](http://blog.csdn.net/huangyuan_xuan/article/details/40821859) http://blog.csdn.net/huangyuan_xuan/article/details/40821859<br>\n [mysql事物处理和管理配置](http://blog.csdn.net/huangyuan_xuan/article/details/40821521) http://blog.csdn.net/huangyuan_xuan/article/details/40821521<br>\n [mysql 连接查询](http://blog.csdn.net/huangyuan_xuan/article/details/40783341) http://blog.csdn.net/huangyuan_xuan/article/details/40783341<br>\n [MySQL常用命令](http://blog.csdn.net/huangyuan_xuan/article/details/40783331) http://blog.csdn.net/huangyuan_xuan/article/details/40783331<br>\n [ubuntu下MySQL键值不支持中文解决办法](http://blog.csdn.net/huangyuan_xuan/article/details/40783317) http://blog.csdn.net/huangyuan_xuan/article/details/40783317<br>\n [Myeclipse新建webservice客户端](http://blog.csdn.net/huangyuan_xuan/article/details/39992799) http://blog.csdn.net/huangyuan_xuan/article/details/39992799<br>\n [MyEclips新建webservice](http://blog.csdn.net/huangyuan_xuan/article/details/39992723) http://blog.csdn.net/huangyuan_xuan/article/details/39992723<br>\n [intellij IDEA更换主题为Darcula后中文项目名称变口（方框）的解决办法](http://blog.csdn.net/huangyuan_xuan/article/details/39896009) http://blog.csdn.net/huangyuan_xuan/article/details/39896009<br>\n [java模拟登录校内成绩查询网站，将获得的HTML代码用jsoup解析](http://blog.csdn.net/huangyuan_xuan/article/details/39723251) http://blog.csdn.net/huangyuan_xuan/article/details/39723251<br>\n [Ubuntu14.04 LTS更新源](http://blog.csdn.net/huangyuan_xuan/article/details/39119797) http://blog.csdn.net/huangyuan_xuan/article/details/39119797<br>\n [ubuntu14.04开机自动挂载windows磁盘的配置方法](http://blog.csdn.net/huangyuan_xuan/article/details/39118723) http://blog.csdn.net/huangyuan_xuan/article/details/39118723<br>\n [java实现MD5和sha1加密](http://blog.csdn.net/huangyuan_xuan/article/details/39081435) http://blog.csdn.net/huangyuan_xuan/article/details/39081435<br>\n [22 PPP协议](http://blog.csdn.net/huangyuan_xuan/article/details/38427607) http://blog.csdn.net/huangyuan_xuan/article/details/38427607<br>\n [21 串行接口封装](http://blog.csdn.net/huangyuan_xuan/article/details/38427547) http://blog.csdn.net/huangyuan_xuan/article/details/38427547<br>\n [20 internet connection](http://blog.csdn.net/huangyuan_xuan/article/details/38427527) http://blog.csdn.net/huangyuan_xuan/article/details/38427527<br>\n [19 广域网 WAN](http://blog.csdn.net/huangyuan_xuan/article/details/38423675) http://blog.csdn.net/huangyuan_xuan/article/details/38423675<br>\n [java的JDK的安装配置图文详解](http://blog.csdn.net/huangyuan_xuan/article/details/38405103) http://blog.csdn.net/huangyuan_xuan/article/details/38405103<br>\n [18 ACL访问控制列表（access control list）](http://blog.csdn.net/huangyuan_xuan/article/details/38387045) http://blog.csdn.net/huangyuan_xuan/article/details/38387045<br>\n [17 NAT转换](http://blog.csdn.net/huangyuan_xuan/article/details/38342675) http://blog.csdn.net/huangyuan_xuan/article/details/38342675<br>\n [16 DHCP](http://blog.csdn.net/huangyuan_xuan/article/details/38278825) http://blog.csdn.net/huangyuan_xuan/article/details/38278825<br>\n [Java常见错误列表](http://blog.csdn.net/huangyuan_xuan/article/details/37957229) http://blog.csdn.net/huangyuan_xuan/article/details/37957229<br>\n [LXLE Linux取代Windows XP的11个大招](http://blog.csdn.net/huangyuan_xuan/article/details/37937957) http://blog.csdn.net/huangyuan_xuan/article/details/37937957<br>\n [jQuery语法简介](http://blog.csdn.net/huangyuan_xuan/article/details/37738127) http://blog.csdn.net/huangyuan_xuan/article/details/37738127<br>\n [cookie简介](http://blog.csdn.net/huangyuan_xuan/article/details/37728211) http://blog.csdn.net/huangyuan_xuan/article/details/37728211<br>\n [DOM 简介](http://blog.csdn.net/huangyuan_xuan/article/details/37699891) http://blog.csdn.net/huangyuan_xuan/article/details/37699891<br>\n [vim 命令](http://blog.csdn.net/huangyuan_xuan/article/details/28880287) http://blog.csdn.net/huangyuan_xuan/article/details/28880287<br>\n [我们大神都这样——提问的智慧](http://blog.csdn.net/huangyuan_xuan/article/details/28276437) http://blog.csdn.net/huangyuan_xuan/article/details/28276437<br>\n [初学C语言的人看不懂的关机代码](http://blog.csdn.net/huangyuan_xuan/article/details/27972015) http://blog.csdn.net/huangyuan_xuan/article/details/27972015<br>\n [ubuntu连接路由器无线网络，却不能上网](http://blog.csdn.net/huangyuan_xuan/article/details/27792089) http://blog.csdn.net/huangyuan_xuan/article/details/27792089<br>\n [sublime-text2的中英文对照表（附带个人的配置习惯）](http://blog.csdn.net/huangyuan_xuan/article/details/26969041) http://blog.csdn.net/huangyuan_xuan/article/details/26969041<br>\n [电脑蓝屏代码大全](http://blog.csdn.net/huangyuan_xuan/article/details/26246709) http://blog.csdn.net/huangyuan_xuan/article/details/26246709<br>\n [VC6.0 快捷键整理](http://blog.csdn.net/huangyuan_xuan/article/details/26245513) http://blog.csdn.net/huangyuan_xuan/article/details/26245513<br>\n [玩游戏无法全屏](http://blog.csdn.net/huangyuan_xuan/article/details/26245135) http://blog.csdn.net/huangyuan_xuan/article/details/26245135<br>\n [15 Ospf](http://blog.csdn.net/huangyuan_xuan/article/details/26244991) http://blog.csdn.net/huangyuan_xuan/article/details/26244991<br>\n [14 EIGRP 配置](http://blog.csdn.net/huangyuan_xuan/article/details/26244541) http://blog.csdn.net/huangyuan_xuan/article/details/26244541<br>\n [13 ERGIP](http://blog.csdn.net/huangyuan_xuan/article/details/26244439) http://blog.csdn.net/huangyuan_xuan/article/details/26244439<br>\n [12    rip-2  配置命令](http://blog.csdn.net/huangyuan_xuan/article/details/26244201) http://blog.csdn.net/huangyuan_xuan/article/details/26244201<br>\n [11    rip -1](http://blog.csdn.net/huangyuan_xuan/article/details/26244031) http://blog.csdn.net/huangyuan_xuan/article/details/26244031<br>\n [10动态路由](http://blog.csdn.net/huangyuan_xuan/article/details/26243735) http://blog.csdn.net/huangyuan_xuan/article/details/26243735<br>\n [9静态路由](http://blog.csdn.net/huangyuan_xuan/article/details/26243487) http://blog.csdn.net/huangyuan_xuan/article/details/26243487<br>\n [8网络拓扑结构](http://blog.csdn.net/huangyuan_xuan/article/details/26243293) http://blog.csdn.net/huangyuan_xuan/article/details/26243293<br>\n [7VLSM子网划分](http://blog.csdn.net/huangyuan_xuan/article/details/26243041) http://blog.csdn.net/huangyuan_xuan/article/details/26243041<br>\n [6常用网络相关命令](http://blog.csdn.net/huangyuan_xuan/article/details/26242799) http://blog.csdn.net/huangyuan_xuan/article/details/26242799<br>\n [5数据包发送流程](http://blog.csdn.net/huangyuan_xuan/article/details/26242589) http://blog.csdn.net/huangyuan_xuan/article/details/26242589<br>\n [网线](http://blog.csdn.net/huangyuan_xuan/article/details/26242183) http://blog.csdn.net/huangyuan_xuan/article/details/26242183<br>\n [osi七层网络模型4](http://blog.csdn.net/huangyuan_xuan/article/details/26242101) http://blog.csdn.net/huangyuan_xuan/article/details/26242101<br>\n [osi七层网络模型3](http://blog.csdn.net/huangyuan_xuan/article/details/26242015) http://blog.csdn.net/huangyuan_xuan/article/details/26242015<br>\n [osi七层网络模型2](http://blog.csdn.net/huangyuan_xuan/article/details/26241831) http://blog.csdn.net/huangyuan_xuan/article/details/26241831<br>\n [OSI七层网络模型1](http://blog.csdn.net/huangyuan_xuan/article/details/26241631) http://blog.csdn.net/huangyuan_xuan/article/details/26241631<br>\n [sublime-text2 编译java出错 Decode error - output not utf-8的解决办法](http://blog.csdn.net/huangyuan_xuan/article/details/26164349) http://blog.csdn.net/huangyuan_xuan/article/details/26164349<br>\n [安装虚拟机报错解决办法 TheVMware Authorization Service is not running](http://blog.csdn.net/huangyuan_xuan/article/details/26162201) http://blog.csdn.net/huangyuan_xuan/article/details/26162201<br>\n [我的vim配置](http://blog.csdn.net/huangyuan_xuan/article/details/26162083) http://blog.csdn.net/huangyuan_xuan/article/details/26162083<br>\n [sublime text 2 搭建java运行环境](http://blog.csdn.net/huangyuan_xuan/article/details/26161983) http://blog.csdn.net/huangyuan_xuan/article/details/26161983<br>\n [ubuntu的一点命令](http://blog.csdn.net/huangyuan_xuan/article/details/26160973) http://blog.csdn.net/huangyuan_xuan/article/details/26160973<br>\n 以后主要就在gitpage上写博客了.\n 以上\n","slug":"原CSDN博客","published":1,"updated":"2017-07-02T08:48:57.275Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjbvyt3wd003qscdgy8ra3lkz","content":"<p>不打算在csdn上面写博客了,转到gitpage上面,自己用hexo搭建了博客系统.<br>现在把原csdn的博客链接抄在下面</p>\n<a id=\"more\"></a>\n<p><a href=\"http://blog.csdn.net/huangyuan_xuan/article/details/52549416\" target=\"_blank\" rel=\"external\">使用openfire搭建IM聊天系统(一)</a> <a href=\"http://blog.csdn.net/huangyuan_xuan/article/details/52549416\" target=\"_blank\" rel=\"external\">http://blog.csdn.net/huangyuan_xuan/article/details/52549416</a><br><br> <a href=\"http://blog.csdn.net/huangyuan_xuan/article/details/52193006\" target=\"_blank\" rel=\"external\">浅谈使用单元素的枚举类型实现单例模式</a> <a href=\"http://blog.csdn.net/huangyuan_xuan/article/details/52193006\" target=\"_blank\" rel=\"external\">http://blog.csdn.net/huangyuan_xuan/article/details/52193006</a><br><br> <a href=\"http://blog.csdn.net/huangyuan_xuan/article/details/51935666\" target=\"_blank\" rel=\"external\">初步编写IDEA\\AndroidStudio翻译插件</a> <a href=\"http://blog.csdn.net/huangyuan_xuan/article/details/51935666\" target=\"_blank\" rel=\"external\">http://blog.csdn.net/huangyuan_xuan/article/details/51935666</a><br><br> <a href=\"http://blog.csdn.net/huangyuan_xuan/article/details/50881452\" target=\"_blank\" rel=\"external\">多线程 的理解（一）</a> <a href=\"http://blog.csdn.net/huangyuan_xuan/article/details/50881452\" target=\"_blank\" rel=\"external\">http://blog.csdn.net/huangyuan_xuan/article/details/50881452</a><br><br> <a href=\"http://blog.csdn.net/huangyuan_xuan/article/details/50570461\" target=\"_blank\" rel=\"external\">运行时数据区域</a> <a href=\"http://blog.csdn.net/huangyuan_xuan/article/details/50570461\" target=\"_blank\" rel=\"external\">http://blog.csdn.net/huangyuan_xuan/article/details/50570461</a><br><br> <a href=\"http://blog.csdn.net/huangyuan_xuan/article/details/50569443\" target=\"_blank\" rel=\"external\">虚拟机字节码执行引擎</a> <a href=\"http://blog.csdn.net/huangyuan_xuan/article/details/50569443\" target=\"_blank\" rel=\"external\">http://blog.csdn.net/huangyuan_xuan/article/details/50569443</a><br><br> <a href=\"http://blog.csdn.net/huangyuan_xuan/article/details/50550725\" target=\"_blank\" rel=\"external\">虚拟机类加载机制</a> <a href=\"http://blog.csdn.net/huangyuan_xuan/article/details/50550725\" target=\"_blank\" rel=\"external\">http://blog.csdn.net/huangyuan_xuan/article/details/50550725</a><br><br> <a href=\"http://blog.csdn.net/huangyuan_xuan/article/details/50513881\" target=\"_blank\" rel=\"external\">垃圾收集器与内存分配策略</a> <a href=\"http://blog.csdn.net/huangyuan_xuan/article/details/50513881\" target=\"_blank\" rel=\"external\">http://blog.csdn.net/huangyuan_xuan/article/details/50513881</a><br><br> <a href=\"http://blog.csdn.net/huangyuan_xuan/article/details/50513861\" target=\"_blank\" rel=\"external\">JDK的一些命令行工具</a> <a href=\"http://blog.csdn.net/huangyuan_xuan/article/details/50513861\" target=\"_blank\" rel=\"external\">http://blog.csdn.net/huangyuan_xuan/article/details/50513861</a><br><br> <a href=\"http://blog.csdn.net/huangyuan_xuan/article/details/50155345\" target=\"_blank\" rel=\"external\">MongoDB基础</a> <a href=\"http://blog.csdn.net/huangyuan_xuan/article/details/50155345\" target=\"_blank\" rel=\"external\">http://blog.csdn.net/huangyuan_xuan/article/details/50155345</a><br><br> <a href=\"http://blog.csdn.net/huangyuan_xuan/article/details/49859151\" target=\"_blank\" rel=\"external\">tomcat图形化界面管理及数据源配置</a> <a href=\"http://blog.csdn.net/huangyuan_xuan/article/details/49859151\" target=\"_blank\" rel=\"external\">http://blog.csdn.net/huangyuan_xuan/article/details/49859151</a><br><br> <a href=\"http://blog.csdn.net/huangyuan_xuan/article/details/49362701\" target=\"_blank\" rel=\"external\">android 四大图片缓存原理、特性对比</a> <a href=\"http://blog.csdn.net/huangyuan_xuan/article/details/49362701\" target=\"_blank\" rel=\"external\">http://blog.csdn.net/huangyuan_xuan/article/details/49362701</a><br><br> <a href=\"http://blog.csdn.net/huangyuan_xuan/article/details/49356523\" target=\"_blank\" rel=\"external\">github分支管理</a> <a href=\"http://blog.csdn.net/huangyuan_xuan/article/details/49356523\" target=\"_blank\" rel=\"external\">http://blog.csdn.net/huangyuan_xuan/article/details/49356523</a><br><br> <a href=\"http://blog.csdn.net/huangyuan_xuan/article/details/49356505\" target=\"_blank\" rel=\"external\">github 远程仓库</a> <a href=\"http://blog.csdn.net/huangyuan_xuan/article/details/49356505\" target=\"_blank\" rel=\"external\">http://blog.csdn.net/huangyuan_xuan/article/details/49356505</a><br><br> <a href=\"http://blog.csdn.net/huangyuan_xuan/article/details/49336403\" target=\"_blank\" rel=\"external\">github建立本地与远程仓库的连接</a> <a href=\"http://blog.csdn.net/huangyuan_xuan/article/details/49336403\" target=\"_blank\" rel=\"external\">http://blog.csdn.net/huangyuan_xuan/article/details/49336403</a><br><br> <a href=\"http://blog.csdn.net/huangyuan_xuan/article/details/49162309\" target=\"_blank\" rel=\"external\">Git 本地版本控制</a> <a href=\"http://blog.csdn.net/huangyuan_xuan/article/details/49162309\" target=\"_blank\" rel=\"external\">http://blog.csdn.net/huangyuan_xuan/article/details/49162309</a><br><br> <a href=\"http://blog.csdn.net/huangyuan_xuan/article/details/49125597\" target=\"_blank\" rel=\"external\">安装github</a> <a href=\"http://blog.csdn.net/huangyuan_xuan/article/details/49125597\" target=\"_blank\" rel=\"external\">http://blog.csdn.net/huangyuan_xuan/article/details/49125597</a><br><br> <a href=\"http://blog.csdn.net/huangyuan_xuan/article/details/48915299\" target=\"_blank\" rel=\"external\">ubuntu 14.04 apt-get install 不能自动补全解决办法</a> <a href=\"http://blog.csdn.net/huangyuan_xuan/article/details/48915299\" target=\"_blank\" rel=\"external\">http://blog.csdn.net/huangyuan_xuan/article/details/48915299</a><br><br> <a href=\"http://blog.csdn.net/huangyuan_xuan/article/details/48116365\" target=\"_blank\" rel=\"external\">String的一点小东西</a> <a href=\"http://blog.csdn.net/huangyuan_xuan/article/details/48116365\" target=\"_blank\" rel=\"external\">http://blog.csdn.net/huangyuan_xuan/article/details/48116365</a><br><br> <a href=\"http://blog.csdn.net/huangyuan_xuan/article/details/46632395\" target=\"_blank\" rel=\"external\">wireshark error: There are no interfaces on which a capture can be done.</a> <a href=\"http://blog.csdn.net/huangyuan_xuan/article/details/46632395\" target=\"_blank\" rel=\"external\">http://blog.csdn.net/huangyuan_xuan/article/details/46632395</a><br><br> <a href=\"http://blog.csdn.net/huangyuan_xuan/article/details/46564319\" target=\"_blank\" rel=\"external\">windows下使用cmd（命令行）发送邮件</a> <a href=\"http://blog.csdn.net/huangyuan_xuan/article/details/46564319\" target=\"_blank\" rel=\"external\">http://blog.csdn.net/huangyuan_xuan/article/details/46564319</a><br><br> <a href=\"http://blog.csdn.net/huangyuan_xuan/article/details/45936413\" target=\"_blank\" rel=\"external\">Notepad++ 搭建java编译环境</a> <a href=\"http://blog.csdn.net/huangyuan_xuan/article/details/45936413\" target=\"_blank\" rel=\"external\">http://blog.csdn.net/huangyuan_xuan/article/details/45936413</a><br><br> <a href=\"http://blog.csdn.net/huangyuan_xuan/article/details/44537233\" target=\"_blank\" rel=\"external\">JVM虚拟机</a> <a href=\"http://blog.csdn.net/huangyuan_xuan/article/details/44537233\" target=\"_blank\" rel=\"external\">http://blog.csdn.net/huangyuan_xuan/article/details/44537233</a><br><br> <a href=\"http://blog.csdn.net/huangyuan_xuan/article/details/43817631\" target=\"_blank\" rel=\"external\">servlet向浏览器输出验证码图片</a> <a href=\"http://blog.csdn.net/huangyuan_xuan/article/details/43817631\" target=\"_blank\" rel=\"external\">http://blog.csdn.net/huangyuan_xuan/article/details/43817631</a><br><br> <a href=\"http://blog.csdn.net/huangyuan_xuan/article/details/43759585\" target=\"_blank\" rel=\"external\">ubuntu14.04开热点共享网络</a> <a href=\"http://blog.csdn.net/huangyuan_xuan/article/details/43759585\" target=\"_blank\" rel=\"external\">http://blog.csdn.net/huangyuan_xuan/article/details/43759585</a><br><br> <a href=\"http://blog.csdn.net/huangyuan_xuan/article/details/43739353\" target=\"_blank\" rel=\"external\">UNIX/linux的find命令细节</a> <a href=\"http://blog.csdn.net/huangyuan_xuan/article/details/43739353\" target=\"_blank\" rel=\"external\">http://blog.csdn.net/huangyuan_xuan/article/details/43739353</a><br><br> <a href=\"http://blog.csdn.net/huangyuan_xuan/article/details/43490373\" target=\"_blank\" rel=\"external\">编写shell时，提示let：not found</a> <a href=\"http://blog.csdn.net/huangyuan_xuan/article/details/43490373\" target=\"_blank\" rel=\"external\">http://blog.csdn.net/huangyuan_xuan/article/details/43490373</a><br><br> <a href=\"http://blog.csdn.net/huangyuan_xuan/article/details/42804537\" target=\"_blank\" rel=\"external\">cmd命令大全</a> <a href=\"http://blog.csdn.net/huangyuan_xuan/article/details/42804537\" target=\"_blank\" rel=\"external\">http://blog.csdn.net/huangyuan_xuan/article/details/42804537</a><br><br> <a href=\"http://blog.csdn.net/huangyuan_xuan/article/details/41647447\" target=\"_blank\" rel=\"external\">华为 ap ac设备配置命令</a> <a href=\"http://blog.csdn.net/huangyuan_xuan/article/details/41647447\" target=\"_blank\" rel=\"external\">http://blog.csdn.net/huangyuan_xuan/article/details/41647447</a><br><br> <a href=\"http://blog.csdn.net/huangyuan_xuan/article/details/41085629\" target=\"_blank\" rel=\"external\">更改SQLserver的登录方式</a> <a href=\"http://blog.csdn.net/huangyuan_xuan/article/details/41085629\" target=\"_blank\" rel=\"external\">http://blog.csdn.net/huangyuan_xuan/article/details/41085629</a><br><br> <a href=\"http://blog.csdn.net/huangyuan_xuan/article/details/40949147\" target=\"_blank\" rel=\"external\">汇编FLAG寄存器简介</a> <a href=\"http://blog.csdn.net/huangyuan_xuan/article/details/40949147\" target=\"_blank\" rel=\"external\">http://blog.csdn.net/huangyuan_xuan/article/details/40949147</a><br><br> <a href=\"http://blog.csdn.net/huangyuan_xuan/article/details/40949119\" target=\"_blank\" rel=\"external\">汇编指令——转移指令</a> <a href=\"http://blog.csdn.net/huangyuan_xuan/article/details/40949119\" target=\"_blank\" rel=\"external\">http://blog.csdn.net/huangyuan_xuan/article/details/40949119</a><br><br> <a href=\"http://blog.csdn.net/huangyuan_xuan/article/details/40949109\" target=\"_blank\" rel=\"external\">汇编指令</a> <a href=\"http://blog.csdn.net/huangyuan_xuan/article/details/40949109\" target=\"_blank\" rel=\"external\">http://blog.csdn.net/huangyuan_xuan/article/details/40949109</a><br><br> <a href=\"http://blog.csdn.net/huangyuan_xuan/article/details/40949087\" target=\"_blank\" rel=\"external\">汇编寻址方式</a> <a href=\"http://blog.csdn.net/huangyuan_xuan/article/details/40949087\" target=\"_blank\" rel=\"external\">http://blog.csdn.net/huangyuan_xuan/article/details/40949087</a><br><br> <a href=\"http://blog.csdn.net/huangyuan_xuan/article/details/40949075\" target=\"_blank\" rel=\"external\">一段汇编小程序及说明——将数据，代码，栈放入不同的段</a> <a href=\"http://blog.csdn.net/huangyuan_xuan/article/details/40949075\" target=\"_blank\" rel=\"external\">http://blog.csdn.net/huangyuan_xuan/article/details/40949075</a><br><br> <a href=\"http://blog.csdn.net/huangyuan_xuan/article/details/40949069\" target=\"_blank\" rel=\"external\">一段简单汇编语言程序及说明</a> <a href=\"http://blog.csdn.net/huangyuan_xuan/article/details/40949069\" target=\"_blank\" rel=\"external\">http://blog.csdn.net/huangyuan_xuan/article/details/40949069</a><br><br> <a href=\"http://blog.csdn.net/huangyuan_xuan/article/details/40949063\" target=\"_blank\" rel=\"external\">8086寄存器</a> <a href=\"http://blog.csdn.net/huangyuan_xuan/article/details/40949063\" target=\"_blank\" rel=\"external\">http://blog.csdn.net/huangyuan_xuan/article/details/40949063</a><br><br> <a href=\"http://blog.csdn.net/huangyuan_xuan/article/details/40857207\" target=\"_blank\" rel=\"external\">oracle创建实例化数据库或者连接别的远程主机数据库提示“无监听程序”的解决办法</a> <a href=\"http://blog.csdn.net/huangyuan_xuan/article/details/40857207\" target=\"_blank\" rel=\"external\">http://blog.csdn.net/huangyuan_xuan/article/details/40857207</a><br><br> <a href=\"http://blog.csdn.net/huangyuan_xuan/article/details/40821859\" target=\"_blank\" rel=\"external\">安装tomcat提示Faild to install Tomcat7 service 解决办法</a> <a href=\"http://blog.csdn.net/huangyuan_xuan/article/details/40821859\" target=\"_blank\" rel=\"external\">http://blog.csdn.net/huangyuan_xuan/article/details/40821859</a><br><br> <a href=\"http://blog.csdn.net/huangyuan_xuan/article/details/40821521\" target=\"_blank\" rel=\"external\">mysql事物处理和管理配置</a> <a href=\"http://blog.csdn.net/huangyuan_xuan/article/details/40821521\" target=\"_blank\" rel=\"external\">http://blog.csdn.net/huangyuan_xuan/article/details/40821521</a><br><br> <a href=\"http://blog.csdn.net/huangyuan_xuan/article/details/40783341\" target=\"_blank\" rel=\"external\">mysql 连接查询</a> <a href=\"http://blog.csdn.net/huangyuan_xuan/article/details/40783341\" target=\"_blank\" rel=\"external\">http://blog.csdn.net/huangyuan_xuan/article/details/40783341</a><br><br> <a href=\"http://blog.csdn.net/huangyuan_xuan/article/details/40783331\" target=\"_blank\" rel=\"external\">MySQL常用命令</a> <a href=\"http://blog.csdn.net/huangyuan_xuan/article/details/40783331\" target=\"_blank\" rel=\"external\">http://blog.csdn.net/huangyuan_xuan/article/details/40783331</a><br><br> <a href=\"http://blog.csdn.net/huangyuan_xuan/article/details/40783317\" target=\"_blank\" rel=\"external\">ubuntu下MySQL键值不支持中文解决办法</a> <a href=\"http://blog.csdn.net/huangyuan_xuan/article/details/40783317\" target=\"_blank\" rel=\"external\">http://blog.csdn.net/huangyuan_xuan/article/details/40783317</a><br><br> <a href=\"http://blog.csdn.net/huangyuan_xuan/article/details/39992799\" target=\"_blank\" rel=\"external\">Myeclipse新建webservice客户端</a> <a href=\"http://blog.csdn.net/huangyuan_xuan/article/details/39992799\" target=\"_blank\" rel=\"external\">http://blog.csdn.net/huangyuan_xuan/article/details/39992799</a><br><br> <a href=\"http://blog.csdn.net/huangyuan_xuan/article/details/39992723\" target=\"_blank\" rel=\"external\">MyEclips新建webservice</a> <a href=\"http://blog.csdn.net/huangyuan_xuan/article/details/39992723\" target=\"_blank\" rel=\"external\">http://blog.csdn.net/huangyuan_xuan/article/details/39992723</a><br><br> <a href=\"http://blog.csdn.net/huangyuan_xuan/article/details/39896009\" target=\"_blank\" rel=\"external\">intellij IDEA更换主题为Darcula后中文项目名称变口（方框）的解决办法</a> <a href=\"http://blog.csdn.net/huangyuan_xuan/article/details/39896009\" target=\"_blank\" rel=\"external\">http://blog.csdn.net/huangyuan_xuan/article/details/39896009</a><br><br> <a href=\"http://blog.csdn.net/huangyuan_xuan/article/details/39723251\" target=\"_blank\" rel=\"external\">java模拟登录校内成绩查询网站，将获得的HTML代码用jsoup解析</a> <a href=\"http://blog.csdn.net/huangyuan_xuan/article/details/39723251\" target=\"_blank\" rel=\"external\">http://blog.csdn.net/huangyuan_xuan/article/details/39723251</a><br><br> <a href=\"http://blog.csdn.net/huangyuan_xuan/article/details/39119797\" target=\"_blank\" rel=\"external\">Ubuntu14.04 LTS更新源</a> <a href=\"http://blog.csdn.net/huangyuan_xuan/article/details/39119797\" target=\"_blank\" rel=\"external\">http://blog.csdn.net/huangyuan_xuan/article/details/39119797</a><br><br> <a href=\"http://blog.csdn.net/huangyuan_xuan/article/details/39118723\" target=\"_blank\" rel=\"external\">ubuntu14.04开机自动挂载windows磁盘的配置方法</a> <a href=\"http://blog.csdn.net/huangyuan_xuan/article/details/39118723\" target=\"_blank\" rel=\"external\">http://blog.csdn.net/huangyuan_xuan/article/details/39118723</a><br><br> <a href=\"http://blog.csdn.net/huangyuan_xuan/article/details/39081435\" target=\"_blank\" rel=\"external\">java实现MD5和sha1加密</a> <a href=\"http://blog.csdn.net/huangyuan_xuan/article/details/39081435\" target=\"_blank\" rel=\"external\">http://blog.csdn.net/huangyuan_xuan/article/details/39081435</a><br><br> <a href=\"http://blog.csdn.net/huangyuan_xuan/article/details/38427607\" target=\"_blank\" rel=\"external\">22 PPP协议</a> <a href=\"http://blog.csdn.net/huangyuan_xuan/article/details/38427607\" target=\"_blank\" rel=\"external\">http://blog.csdn.net/huangyuan_xuan/article/details/38427607</a><br><br> <a href=\"http://blog.csdn.net/huangyuan_xuan/article/details/38427547\" target=\"_blank\" rel=\"external\">21 串行接口封装</a> <a href=\"http://blog.csdn.net/huangyuan_xuan/article/details/38427547\" target=\"_blank\" rel=\"external\">http://blog.csdn.net/huangyuan_xuan/article/details/38427547</a><br><br> <a href=\"http://blog.csdn.net/huangyuan_xuan/article/details/38427527\" target=\"_blank\" rel=\"external\">20 internet connection</a> <a href=\"http://blog.csdn.net/huangyuan_xuan/article/details/38427527\" target=\"_blank\" rel=\"external\">http://blog.csdn.net/huangyuan_xuan/article/details/38427527</a><br><br> <a href=\"http://blog.csdn.net/huangyuan_xuan/article/details/38423675\" target=\"_blank\" rel=\"external\">19 广域网 WAN</a> <a href=\"http://blog.csdn.net/huangyuan_xuan/article/details/38423675\" target=\"_blank\" rel=\"external\">http://blog.csdn.net/huangyuan_xuan/article/details/38423675</a><br><br> <a href=\"http://blog.csdn.net/huangyuan_xuan/article/details/38405103\" target=\"_blank\" rel=\"external\">java的JDK的安装配置图文详解</a> <a href=\"http://blog.csdn.net/huangyuan_xuan/article/details/38405103\" target=\"_blank\" rel=\"external\">http://blog.csdn.net/huangyuan_xuan/article/details/38405103</a><br><br> <a href=\"http://blog.csdn.net/huangyuan_xuan/article/details/38387045\" target=\"_blank\" rel=\"external\">18 ACL访问控制列表（access control list）</a> <a href=\"http://blog.csdn.net/huangyuan_xuan/article/details/38387045\" target=\"_blank\" rel=\"external\">http://blog.csdn.net/huangyuan_xuan/article/details/38387045</a><br><br> <a href=\"http://blog.csdn.net/huangyuan_xuan/article/details/38342675\" target=\"_blank\" rel=\"external\">17 NAT转换</a> <a href=\"http://blog.csdn.net/huangyuan_xuan/article/details/38342675\" target=\"_blank\" rel=\"external\">http://blog.csdn.net/huangyuan_xuan/article/details/38342675</a><br><br> <a href=\"http://blog.csdn.net/huangyuan_xuan/article/details/38278825\" target=\"_blank\" rel=\"external\">16 DHCP</a> <a href=\"http://blog.csdn.net/huangyuan_xuan/article/details/38278825\" target=\"_blank\" rel=\"external\">http://blog.csdn.net/huangyuan_xuan/article/details/38278825</a><br><br> <a href=\"http://blog.csdn.net/huangyuan_xuan/article/details/37957229\" target=\"_blank\" rel=\"external\">Java常见错误列表</a> <a href=\"http://blog.csdn.net/huangyuan_xuan/article/details/37957229\" target=\"_blank\" rel=\"external\">http://blog.csdn.net/huangyuan_xuan/article/details/37957229</a><br><br> <a href=\"http://blog.csdn.net/huangyuan_xuan/article/details/37937957\" target=\"_blank\" rel=\"external\">LXLE Linux取代Windows XP的11个大招</a> <a href=\"http://blog.csdn.net/huangyuan_xuan/article/details/37937957\" target=\"_blank\" rel=\"external\">http://blog.csdn.net/huangyuan_xuan/article/details/37937957</a><br><br> <a href=\"http://blog.csdn.net/huangyuan_xuan/article/details/37738127\" target=\"_blank\" rel=\"external\">jQuery语法简介</a> <a href=\"http://blog.csdn.net/huangyuan_xuan/article/details/37738127\" target=\"_blank\" rel=\"external\">http://blog.csdn.net/huangyuan_xuan/article/details/37738127</a><br><br> <a href=\"http://blog.csdn.net/huangyuan_xuan/article/details/37728211\" target=\"_blank\" rel=\"external\">cookie简介</a> <a href=\"http://blog.csdn.net/huangyuan_xuan/article/details/37728211\" target=\"_blank\" rel=\"external\">http://blog.csdn.net/huangyuan_xuan/article/details/37728211</a><br><br> <a href=\"http://blog.csdn.net/huangyuan_xuan/article/details/37699891\" target=\"_blank\" rel=\"external\">DOM 简介</a> <a href=\"http://blog.csdn.net/huangyuan_xuan/article/details/37699891\" target=\"_blank\" rel=\"external\">http://blog.csdn.net/huangyuan_xuan/article/details/37699891</a><br><br> <a href=\"http://blog.csdn.net/huangyuan_xuan/article/details/28880287\" target=\"_blank\" rel=\"external\">vim 命令</a> <a href=\"http://blog.csdn.net/huangyuan_xuan/article/details/28880287\" target=\"_blank\" rel=\"external\">http://blog.csdn.net/huangyuan_xuan/article/details/28880287</a><br><br> <a href=\"http://blog.csdn.net/huangyuan_xuan/article/details/28276437\" target=\"_blank\" rel=\"external\">我们大神都这样——提问的智慧</a> <a href=\"http://blog.csdn.net/huangyuan_xuan/article/details/28276437\" target=\"_blank\" rel=\"external\">http://blog.csdn.net/huangyuan_xuan/article/details/28276437</a><br><br> <a href=\"http://blog.csdn.net/huangyuan_xuan/article/details/27972015\" target=\"_blank\" rel=\"external\">初学C语言的人看不懂的关机代码</a> <a href=\"http://blog.csdn.net/huangyuan_xuan/article/details/27972015\" target=\"_blank\" rel=\"external\">http://blog.csdn.net/huangyuan_xuan/article/details/27972015</a><br><br> <a href=\"http://blog.csdn.net/huangyuan_xuan/article/details/27792089\" target=\"_blank\" rel=\"external\">ubuntu连接路由器无线网络，却不能上网</a> <a href=\"http://blog.csdn.net/huangyuan_xuan/article/details/27792089\" target=\"_blank\" rel=\"external\">http://blog.csdn.net/huangyuan_xuan/article/details/27792089</a><br><br> <a href=\"http://blog.csdn.net/huangyuan_xuan/article/details/26969041\" target=\"_blank\" rel=\"external\">sublime-text2的中英文对照表（附带个人的配置习惯）</a> <a href=\"http://blog.csdn.net/huangyuan_xuan/article/details/26969041\" target=\"_blank\" rel=\"external\">http://blog.csdn.net/huangyuan_xuan/article/details/26969041</a><br><br> <a href=\"http://blog.csdn.net/huangyuan_xuan/article/details/26246709\" target=\"_blank\" rel=\"external\">电脑蓝屏代码大全</a> <a href=\"http://blog.csdn.net/huangyuan_xuan/article/details/26246709\" target=\"_blank\" rel=\"external\">http://blog.csdn.net/huangyuan_xuan/article/details/26246709</a><br><br> <a href=\"http://blog.csdn.net/huangyuan_xuan/article/details/26245513\" target=\"_blank\" rel=\"external\">VC6.0 快捷键整理</a> <a href=\"http://blog.csdn.net/huangyuan_xuan/article/details/26245513\" target=\"_blank\" rel=\"external\">http://blog.csdn.net/huangyuan_xuan/article/details/26245513</a><br><br> <a href=\"http://blog.csdn.net/huangyuan_xuan/article/details/26245135\" target=\"_blank\" rel=\"external\">玩游戏无法全屏</a> <a href=\"http://blog.csdn.net/huangyuan_xuan/article/details/26245135\" target=\"_blank\" rel=\"external\">http://blog.csdn.net/huangyuan_xuan/article/details/26245135</a><br><br> <a href=\"http://blog.csdn.net/huangyuan_xuan/article/details/26244991\" target=\"_blank\" rel=\"external\">15 Ospf</a> <a href=\"http://blog.csdn.net/huangyuan_xuan/article/details/26244991\" target=\"_blank\" rel=\"external\">http://blog.csdn.net/huangyuan_xuan/article/details/26244991</a><br><br> <a href=\"http://blog.csdn.net/huangyuan_xuan/article/details/26244541\" target=\"_blank\" rel=\"external\">14 EIGRP 配置</a> <a href=\"http://blog.csdn.net/huangyuan_xuan/article/details/26244541\" target=\"_blank\" rel=\"external\">http://blog.csdn.net/huangyuan_xuan/article/details/26244541</a><br><br> <a href=\"http://blog.csdn.net/huangyuan_xuan/article/details/26244439\" target=\"_blank\" rel=\"external\">13 ERGIP</a> <a href=\"http://blog.csdn.net/huangyuan_xuan/article/details/26244439\" target=\"_blank\" rel=\"external\">http://blog.csdn.net/huangyuan_xuan/article/details/26244439</a><br><br> <a href=\"http://blog.csdn.net/huangyuan_xuan/article/details/26244201\" target=\"_blank\" rel=\"external\">12    rip-2  配置命令</a> <a href=\"http://blog.csdn.net/huangyuan_xuan/article/details/26244201\" target=\"_blank\" rel=\"external\">http://blog.csdn.net/huangyuan_xuan/article/details/26244201</a><br><br> <a href=\"http://blog.csdn.net/huangyuan_xuan/article/details/26244031\" target=\"_blank\" rel=\"external\">11    rip -1</a> <a href=\"http://blog.csdn.net/huangyuan_xuan/article/details/26244031\" target=\"_blank\" rel=\"external\">http://blog.csdn.net/huangyuan_xuan/article/details/26244031</a><br><br> <a href=\"http://blog.csdn.net/huangyuan_xuan/article/details/26243735\" target=\"_blank\" rel=\"external\">10动态路由</a> <a href=\"http://blog.csdn.net/huangyuan_xuan/article/details/26243735\" target=\"_blank\" rel=\"external\">http://blog.csdn.net/huangyuan_xuan/article/details/26243735</a><br><br> <a href=\"http://blog.csdn.net/huangyuan_xuan/article/details/26243487\" target=\"_blank\" rel=\"external\">9静态路由</a> <a href=\"http://blog.csdn.net/huangyuan_xuan/article/details/26243487\" target=\"_blank\" rel=\"external\">http://blog.csdn.net/huangyuan_xuan/article/details/26243487</a><br><br> <a href=\"http://blog.csdn.net/huangyuan_xuan/article/details/26243293\" target=\"_blank\" rel=\"external\">8网络拓扑结构</a> <a href=\"http://blog.csdn.net/huangyuan_xuan/article/details/26243293\" target=\"_blank\" rel=\"external\">http://blog.csdn.net/huangyuan_xuan/article/details/26243293</a><br><br> <a href=\"http://blog.csdn.net/huangyuan_xuan/article/details/26243041\" target=\"_blank\" rel=\"external\">7VLSM子网划分</a> <a href=\"http://blog.csdn.net/huangyuan_xuan/article/details/26243041\" target=\"_blank\" rel=\"external\">http://blog.csdn.net/huangyuan_xuan/article/details/26243041</a><br><br> <a href=\"http://blog.csdn.net/huangyuan_xuan/article/details/26242799\" target=\"_blank\" rel=\"external\">6常用网络相关命令</a> <a href=\"http://blog.csdn.net/huangyuan_xuan/article/details/26242799\" target=\"_blank\" rel=\"external\">http://blog.csdn.net/huangyuan_xuan/article/details/26242799</a><br><br> <a href=\"http://blog.csdn.net/huangyuan_xuan/article/details/26242589\" target=\"_blank\" rel=\"external\">5数据包发送流程</a> <a href=\"http://blog.csdn.net/huangyuan_xuan/article/details/26242589\" target=\"_blank\" rel=\"external\">http://blog.csdn.net/huangyuan_xuan/article/details/26242589</a><br><br> <a href=\"http://blog.csdn.net/huangyuan_xuan/article/details/26242183\" target=\"_blank\" rel=\"external\">网线</a> <a href=\"http://blog.csdn.net/huangyuan_xuan/article/details/26242183\" target=\"_blank\" rel=\"external\">http://blog.csdn.net/huangyuan_xuan/article/details/26242183</a><br><br> <a href=\"http://blog.csdn.net/huangyuan_xuan/article/details/26242101\" target=\"_blank\" rel=\"external\">osi七层网络模型4</a> <a href=\"http://blog.csdn.net/huangyuan_xuan/article/details/26242101\" target=\"_blank\" rel=\"external\">http://blog.csdn.net/huangyuan_xuan/article/details/26242101</a><br><br> <a href=\"http://blog.csdn.net/huangyuan_xuan/article/details/26242015\" target=\"_blank\" rel=\"external\">osi七层网络模型3</a> <a href=\"http://blog.csdn.net/huangyuan_xuan/article/details/26242015\" target=\"_blank\" rel=\"external\">http://blog.csdn.net/huangyuan_xuan/article/details/26242015</a><br><br> <a href=\"http://blog.csdn.net/huangyuan_xuan/article/details/26241831\" target=\"_blank\" rel=\"external\">osi七层网络模型2</a> <a href=\"http://blog.csdn.net/huangyuan_xuan/article/details/26241831\" target=\"_blank\" rel=\"external\">http://blog.csdn.net/huangyuan_xuan/article/details/26241831</a><br><br> <a href=\"http://blog.csdn.net/huangyuan_xuan/article/details/26241631\" target=\"_blank\" rel=\"external\">OSI七层网络模型1</a> <a href=\"http://blog.csdn.net/huangyuan_xuan/article/details/26241631\" target=\"_blank\" rel=\"external\">http://blog.csdn.net/huangyuan_xuan/article/details/26241631</a><br><br> <a href=\"http://blog.csdn.net/huangyuan_xuan/article/details/26164349\" target=\"_blank\" rel=\"external\">sublime-text2 编译java出错 Decode error - output not utf-8的解决办法</a> <a href=\"http://blog.csdn.net/huangyuan_xuan/article/details/26164349\" target=\"_blank\" rel=\"external\">http://blog.csdn.net/huangyuan_xuan/article/details/26164349</a><br><br> <a href=\"http://blog.csdn.net/huangyuan_xuan/article/details/26162201\" target=\"_blank\" rel=\"external\">安装虚拟机报错解决办法 TheVMware Authorization Service is not running</a> <a href=\"http://blog.csdn.net/huangyuan_xuan/article/details/26162201\" target=\"_blank\" rel=\"external\">http://blog.csdn.net/huangyuan_xuan/article/details/26162201</a><br><br> <a href=\"http://blog.csdn.net/huangyuan_xuan/article/details/26162083\" target=\"_blank\" rel=\"external\">我的vim配置</a> <a href=\"http://blog.csdn.net/huangyuan_xuan/article/details/26162083\" target=\"_blank\" rel=\"external\">http://blog.csdn.net/huangyuan_xuan/article/details/26162083</a><br><br> <a href=\"http://blog.csdn.net/huangyuan_xuan/article/details/26161983\" target=\"_blank\" rel=\"external\">sublime text 2 搭建java运行环境</a> <a href=\"http://blog.csdn.net/huangyuan_xuan/article/details/26161983\" target=\"_blank\" rel=\"external\">http://blog.csdn.net/huangyuan_xuan/article/details/26161983</a><br><br> <a href=\"http://blog.csdn.net/huangyuan_xuan/article/details/26160973\" target=\"_blank\" rel=\"external\">ubuntu的一点命令</a> <a href=\"http://blog.csdn.net/huangyuan_xuan/article/details/26160973\" target=\"_blank\" rel=\"external\">http://blog.csdn.net/huangyuan_xuan/article/details/26160973</a><br><br> 以后主要就在gitpage上写博客了.<br> 以上</p>\n","excerpt":"<p>不打算在csdn上面写博客了,转到gitpage上面,自己用hexo搭建了博客系统.<br>现在把原csdn的博客链接抄在下面</p>","more":"<p><a href=\"http://blog.csdn.net/huangyuan_xuan/article/details/52549416\">使用openfire搭建IM聊天系统(一)</a> <a href=\"http://blog.csdn.net/huangyuan_xuan/article/details/52549416\">http://blog.csdn.net/huangyuan_xuan/article/details/52549416</a><br><br> <a href=\"http://blog.csdn.net/huangyuan_xuan/article/details/52193006\">浅谈使用单元素的枚举类型实现单例模式</a> <a href=\"http://blog.csdn.net/huangyuan_xuan/article/details/52193006\">http://blog.csdn.net/huangyuan_xuan/article/details/52193006</a><br><br> <a href=\"http://blog.csdn.net/huangyuan_xuan/article/details/51935666\">初步编写IDEA\\AndroidStudio翻译插件</a> <a href=\"http://blog.csdn.net/huangyuan_xuan/article/details/51935666\">http://blog.csdn.net/huangyuan_xuan/article/details/51935666</a><br><br> <a href=\"http://blog.csdn.net/huangyuan_xuan/article/details/50881452\">多线程 的理解（一）</a> <a href=\"http://blog.csdn.net/huangyuan_xuan/article/details/50881452\">http://blog.csdn.net/huangyuan_xuan/article/details/50881452</a><br><br> <a href=\"http://blog.csdn.net/huangyuan_xuan/article/details/50570461\">运行时数据区域</a> <a href=\"http://blog.csdn.net/huangyuan_xuan/article/details/50570461\">http://blog.csdn.net/huangyuan_xuan/article/details/50570461</a><br><br> <a href=\"http://blog.csdn.net/huangyuan_xuan/article/details/50569443\">虚拟机字节码执行引擎</a> <a href=\"http://blog.csdn.net/huangyuan_xuan/article/details/50569443\">http://blog.csdn.net/huangyuan_xuan/article/details/50569443</a><br><br> <a href=\"http://blog.csdn.net/huangyuan_xuan/article/details/50550725\">虚拟机类加载机制</a> <a href=\"http://blog.csdn.net/huangyuan_xuan/article/details/50550725\">http://blog.csdn.net/huangyuan_xuan/article/details/50550725</a><br><br> <a href=\"http://blog.csdn.net/huangyuan_xuan/article/details/50513881\">垃圾收集器与内存分配策略</a> <a href=\"http://blog.csdn.net/huangyuan_xuan/article/details/50513881\">http://blog.csdn.net/huangyuan_xuan/article/details/50513881</a><br><br> <a href=\"http://blog.csdn.net/huangyuan_xuan/article/details/50513861\">JDK的一些命令行工具</a> <a href=\"http://blog.csdn.net/huangyuan_xuan/article/details/50513861\">http://blog.csdn.net/huangyuan_xuan/article/details/50513861</a><br><br> <a href=\"http://blog.csdn.net/huangyuan_xuan/article/details/50155345\">MongoDB基础</a> <a href=\"http://blog.csdn.net/huangyuan_xuan/article/details/50155345\">http://blog.csdn.net/huangyuan_xuan/article/details/50155345</a><br><br> <a href=\"http://blog.csdn.net/huangyuan_xuan/article/details/49859151\">tomcat图形化界面管理及数据源配置</a> <a href=\"http://blog.csdn.net/huangyuan_xuan/article/details/49859151\">http://blog.csdn.net/huangyuan_xuan/article/details/49859151</a><br><br> <a href=\"http://blog.csdn.net/huangyuan_xuan/article/details/49362701\">android 四大图片缓存原理、特性对比</a> <a href=\"http://blog.csdn.net/huangyuan_xuan/article/details/49362701\">http://blog.csdn.net/huangyuan_xuan/article/details/49362701</a><br><br> <a href=\"http://blog.csdn.net/huangyuan_xuan/article/details/49356523\">github分支管理</a> <a href=\"http://blog.csdn.net/huangyuan_xuan/article/details/49356523\">http://blog.csdn.net/huangyuan_xuan/article/details/49356523</a><br><br> <a href=\"http://blog.csdn.net/huangyuan_xuan/article/details/49356505\">github 远程仓库</a> <a href=\"http://blog.csdn.net/huangyuan_xuan/article/details/49356505\">http://blog.csdn.net/huangyuan_xuan/article/details/49356505</a><br><br> <a href=\"http://blog.csdn.net/huangyuan_xuan/article/details/49336403\">github建立本地与远程仓库的连接</a> <a href=\"http://blog.csdn.net/huangyuan_xuan/article/details/49336403\">http://blog.csdn.net/huangyuan_xuan/article/details/49336403</a><br><br> <a href=\"http://blog.csdn.net/huangyuan_xuan/article/details/49162309\">Git 本地版本控制</a> <a href=\"http://blog.csdn.net/huangyuan_xuan/article/details/49162309\">http://blog.csdn.net/huangyuan_xuan/article/details/49162309</a><br><br> <a href=\"http://blog.csdn.net/huangyuan_xuan/article/details/49125597\">安装github</a> <a href=\"http://blog.csdn.net/huangyuan_xuan/article/details/49125597\">http://blog.csdn.net/huangyuan_xuan/article/details/49125597</a><br><br> <a href=\"http://blog.csdn.net/huangyuan_xuan/article/details/48915299\">ubuntu 14.04 apt-get install 不能自动补全解决办法</a> <a href=\"http://blog.csdn.net/huangyuan_xuan/article/details/48915299\">http://blog.csdn.net/huangyuan_xuan/article/details/48915299</a><br><br> <a href=\"http://blog.csdn.net/huangyuan_xuan/article/details/48116365\">String的一点小东西</a> <a href=\"http://blog.csdn.net/huangyuan_xuan/article/details/48116365\">http://blog.csdn.net/huangyuan_xuan/article/details/48116365</a><br><br> <a href=\"http://blog.csdn.net/huangyuan_xuan/article/details/46632395\">wireshark error: There are no interfaces on which a capture can be done.</a> <a href=\"http://blog.csdn.net/huangyuan_xuan/article/details/46632395\">http://blog.csdn.net/huangyuan_xuan/article/details/46632395</a><br><br> <a href=\"http://blog.csdn.net/huangyuan_xuan/article/details/46564319\">windows下使用cmd（命令行）发送邮件</a> <a href=\"http://blog.csdn.net/huangyuan_xuan/article/details/46564319\">http://blog.csdn.net/huangyuan_xuan/article/details/46564319</a><br><br> <a href=\"http://blog.csdn.net/huangyuan_xuan/article/details/45936413\">Notepad++ 搭建java编译环境</a> <a href=\"http://blog.csdn.net/huangyuan_xuan/article/details/45936413\">http://blog.csdn.net/huangyuan_xuan/article/details/45936413</a><br><br> <a href=\"http://blog.csdn.net/huangyuan_xuan/article/details/44537233\">JVM虚拟机</a> <a href=\"http://blog.csdn.net/huangyuan_xuan/article/details/44537233\">http://blog.csdn.net/huangyuan_xuan/article/details/44537233</a><br><br> <a href=\"http://blog.csdn.net/huangyuan_xuan/article/details/43817631\">servlet向浏览器输出验证码图片</a> <a href=\"http://blog.csdn.net/huangyuan_xuan/article/details/43817631\">http://blog.csdn.net/huangyuan_xuan/article/details/43817631</a><br><br> <a href=\"http://blog.csdn.net/huangyuan_xuan/article/details/43759585\">ubuntu14.04开热点共享网络</a> <a href=\"http://blog.csdn.net/huangyuan_xuan/article/details/43759585\">http://blog.csdn.net/huangyuan_xuan/article/details/43759585</a><br><br> <a href=\"http://blog.csdn.net/huangyuan_xuan/article/details/43739353\">UNIX/linux的find命令细节</a> <a href=\"http://blog.csdn.net/huangyuan_xuan/article/details/43739353\">http://blog.csdn.net/huangyuan_xuan/article/details/43739353</a><br><br> <a href=\"http://blog.csdn.net/huangyuan_xuan/article/details/43490373\">编写shell时，提示let：not found</a> <a href=\"http://blog.csdn.net/huangyuan_xuan/article/details/43490373\">http://blog.csdn.net/huangyuan_xuan/article/details/43490373</a><br><br> <a href=\"http://blog.csdn.net/huangyuan_xuan/article/details/42804537\">cmd命令大全</a> <a href=\"http://blog.csdn.net/huangyuan_xuan/article/details/42804537\">http://blog.csdn.net/huangyuan_xuan/article/details/42804537</a><br><br> <a href=\"http://blog.csdn.net/huangyuan_xuan/article/details/41647447\">华为 ap ac设备配置命令</a> <a href=\"http://blog.csdn.net/huangyuan_xuan/article/details/41647447\">http://blog.csdn.net/huangyuan_xuan/article/details/41647447</a><br><br> <a href=\"http://blog.csdn.net/huangyuan_xuan/article/details/41085629\">更改SQLserver的登录方式</a> <a href=\"http://blog.csdn.net/huangyuan_xuan/article/details/41085629\">http://blog.csdn.net/huangyuan_xuan/article/details/41085629</a><br><br> <a href=\"http://blog.csdn.net/huangyuan_xuan/article/details/40949147\">汇编FLAG寄存器简介</a> <a href=\"http://blog.csdn.net/huangyuan_xuan/article/details/40949147\">http://blog.csdn.net/huangyuan_xuan/article/details/40949147</a><br><br> <a href=\"http://blog.csdn.net/huangyuan_xuan/article/details/40949119\">汇编指令——转移指令</a> <a href=\"http://blog.csdn.net/huangyuan_xuan/article/details/40949119\">http://blog.csdn.net/huangyuan_xuan/article/details/40949119</a><br><br> <a href=\"http://blog.csdn.net/huangyuan_xuan/article/details/40949109\">汇编指令</a> <a href=\"http://blog.csdn.net/huangyuan_xuan/article/details/40949109\">http://blog.csdn.net/huangyuan_xuan/article/details/40949109</a><br><br> <a href=\"http://blog.csdn.net/huangyuan_xuan/article/details/40949087\">汇编寻址方式</a> <a href=\"http://blog.csdn.net/huangyuan_xuan/article/details/40949087\">http://blog.csdn.net/huangyuan_xuan/article/details/40949087</a><br><br> <a href=\"http://blog.csdn.net/huangyuan_xuan/article/details/40949075\">一段汇编小程序及说明——将数据，代码，栈放入不同的段</a> <a href=\"http://blog.csdn.net/huangyuan_xuan/article/details/40949075\">http://blog.csdn.net/huangyuan_xuan/article/details/40949075</a><br><br> <a href=\"http://blog.csdn.net/huangyuan_xuan/article/details/40949069\">一段简单汇编语言程序及说明</a> <a href=\"http://blog.csdn.net/huangyuan_xuan/article/details/40949069\">http://blog.csdn.net/huangyuan_xuan/article/details/40949069</a><br><br> <a href=\"http://blog.csdn.net/huangyuan_xuan/article/details/40949063\">8086寄存器</a> <a href=\"http://blog.csdn.net/huangyuan_xuan/article/details/40949063\">http://blog.csdn.net/huangyuan_xuan/article/details/40949063</a><br><br> <a href=\"http://blog.csdn.net/huangyuan_xuan/article/details/40857207\">oracle创建实例化数据库或者连接别的远程主机数据库提示“无监听程序”的解决办法</a> <a href=\"http://blog.csdn.net/huangyuan_xuan/article/details/40857207\">http://blog.csdn.net/huangyuan_xuan/article/details/40857207</a><br><br> <a href=\"http://blog.csdn.net/huangyuan_xuan/article/details/40821859\">安装tomcat提示Faild to install Tomcat7 service 解决办法</a> <a href=\"http://blog.csdn.net/huangyuan_xuan/article/details/40821859\">http://blog.csdn.net/huangyuan_xuan/article/details/40821859</a><br><br> <a href=\"http://blog.csdn.net/huangyuan_xuan/article/details/40821521\">mysql事物处理和管理配置</a> <a href=\"http://blog.csdn.net/huangyuan_xuan/article/details/40821521\">http://blog.csdn.net/huangyuan_xuan/article/details/40821521</a><br><br> <a href=\"http://blog.csdn.net/huangyuan_xuan/article/details/40783341\">mysql 连接查询</a> <a href=\"http://blog.csdn.net/huangyuan_xuan/article/details/40783341\">http://blog.csdn.net/huangyuan_xuan/article/details/40783341</a><br><br> <a href=\"http://blog.csdn.net/huangyuan_xuan/article/details/40783331\">MySQL常用命令</a> <a href=\"http://blog.csdn.net/huangyuan_xuan/article/details/40783331\">http://blog.csdn.net/huangyuan_xuan/article/details/40783331</a><br><br> <a href=\"http://blog.csdn.net/huangyuan_xuan/article/details/40783317\">ubuntu下MySQL键值不支持中文解决办法</a> <a href=\"http://blog.csdn.net/huangyuan_xuan/article/details/40783317\">http://blog.csdn.net/huangyuan_xuan/article/details/40783317</a><br><br> <a href=\"http://blog.csdn.net/huangyuan_xuan/article/details/39992799\">Myeclipse新建webservice客户端</a> <a href=\"http://blog.csdn.net/huangyuan_xuan/article/details/39992799\">http://blog.csdn.net/huangyuan_xuan/article/details/39992799</a><br><br> <a href=\"http://blog.csdn.net/huangyuan_xuan/article/details/39992723\">MyEclips新建webservice</a> <a href=\"http://blog.csdn.net/huangyuan_xuan/article/details/39992723\">http://blog.csdn.net/huangyuan_xuan/article/details/39992723</a><br><br> <a href=\"http://blog.csdn.net/huangyuan_xuan/article/details/39896009\">intellij IDEA更换主题为Darcula后中文项目名称变口（方框）的解决办法</a> <a href=\"http://blog.csdn.net/huangyuan_xuan/article/details/39896009\">http://blog.csdn.net/huangyuan_xuan/article/details/39896009</a><br><br> <a href=\"http://blog.csdn.net/huangyuan_xuan/article/details/39723251\">java模拟登录校内成绩查询网站，将获得的HTML代码用jsoup解析</a> <a href=\"http://blog.csdn.net/huangyuan_xuan/article/details/39723251\">http://blog.csdn.net/huangyuan_xuan/article/details/39723251</a><br><br> <a href=\"http://blog.csdn.net/huangyuan_xuan/article/details/39119797\">Ubuntu14.04 LTS更新源</a> <a href=\"http://blog.csdn.net/huangyuan_xuan/article/details/39119797\">http://blog.csdn.net/huangyuan_xuan/article/details/39119797</a><br><br> <a href=\"http://blog.csdn.net/huangyuan_xuan/article/details/39118723\">ubuntu14.04开机自动挂载windows磁盘的配置方法</a> <a href=\"http://blog.csdn.net/huangyuan_xuan/article/details/39118723\">http://blog.csdn.net/huangyuan_xuan/article/details/39118723</a><br><br> <a href=\"http://blog.csdn.net/huangyuan_xuan/article/details/39081435\">java实现MD5和sha1加密</a> <a href=\"http://blog.csdn.net/huangyuan_xuan/article/details/39081435\">http://blog.csdn.net/huangyuan_xuan/article/details/39081435</a><br><br> <a href=\"http://blog.csdn.net/huangyuan_xuan/article/details/38427607\">22 PPP协议</a> <a href=\"http://blog.csdn.net/huangyuan_xuan/article/details/38427607\">http://blog.csdn.net/huangyuan_xuan/article/details/38427607</a><br><br> <a href=\"http://blog.csdn.net/huangyuan_xuan/article/details/38427547\">21 串行接口封装</a> <a href=\"http://blog.csdn.net/huangyuan_xuan/article/details/38427547\">http://blog.csdn.net/huangyuan_xuan/article/details/38427547</a><br><br> <a href=\"http://blog.csdn.net/huangyuan_xuan/article/details/38427527\">20 internet connection</a> <a href=\"http://blog.csdn.net/huangyuan_xuan/article/details/38427527\">http://blog.csdn.net/huangyuan_xuan/article/details/38427527</a><br><br> <a href=\"http://blog.csdn.net/huangyuan_xuan/article/details/38423675\">19 广域网 WAN</a> <a href=\"http://blog.csdn.net/huangyuan_xuan/article/details/38423675\">http://blog.csdn.net/huangyuan_xuan/article/details/38423675</a><br><br> <a href=\"http://blog.csdn.net/huangyuan_xuan/article/details/38405103\">java的JDK的安装配置图文详解</a> <a href=\"http://blog.csdn.net/huangyuan_xuan/article/details/38405103\">http://blog.csdn.net/huangyuan_xuan/article/details/38405103</a><br><br> <a href=\"http://blog.csdn.net/huangyuan_xuan/article/details/38387045\">18 ACL访问控制列表（access control list）</a> <a href=\"http://blog.csdn.net/huangyuan_xuan/article/details/38387045\">http://blog.csdn.net/huangyuan_xuan/article/details/38387045</a><br><br> <a href=\"http://blog.csdn.net/huangyuan_xuan/article/details/38342675\">17 NAT转换</a> <a href=\"http://blog.csdn.net/huangyuan_xuan/article/details/38342675\">http://blog.csdn.net/huangyuan_xuan/article/details/38342675</a><br><br> <a href=\"http://blog.csdn.net/huangyuan_xuan/article/details/38278825\">16 DHCP</a> <a href=\"http://blog.csdn.net/huangyuan_xuan/article/details/38278825\">http://blog.csdn.net/huangyuan_xuan/article/details/38278825</a><br><br> <a href=\"http://blog.csdn.net/huangyuan_xuan/article/details/37957229\">Java常见错误列表</a> <a href=\"http://blog.csdn.net/huangyuan_xuan/article/details/37957229\">http://blog.csdn.net/huangyuan_xuan/article/details/37957229</a><br><br> <a href=\"http://blog.csdn.net/huangyuan_xuan/article/details/37937957\">LXLE Linux取代Windows XP的11个大招</a> <a href=\"http://blog.csdn.net/huangyuan_xuan/article/details/37937957\">http://blog.csdn.net/huangyuan_xuan/article/details/37937957</a><br><br> <a href=\"http://blog.csdn.net/huangyuan_xuan/article/details/37738127\">jQuery语法简介</a> <a href=\"http://blog.csdn.net/huangyuan_xuan/article/details/37738127\">http://blog.csdn.net/huangyuan_xuan/article/details/37738127</a><br><br> <a href=\"http://blog.csdn.net/huangyuan_xuan/article/details/37728211\">cookie简介</a> <a href=\"http://blog.csdn.net/huangyuan_xuan/article/details/37728211\">http://blog.csdn.net/huangyuan_xuan/article/details/37728211</a><br><br> <a href=\"http://blog.csdn.net/huangyuan_xuan/article/details/37699891\">DOM 简介</a> <a href=\"http://blog.csdn.net/huangyuan_xuan/article/details/37699891\">http://blog.csdn.net/huangyuan_xuan/article/details/37699891</a><br><br> <a href=\"http://blog.csdn.net/huangyuan_xuan/article/details/28880287\">vim 命令</a> <a href=\"http://blog.csdn.net/huangyuan_xuan/article/details/28880287\">http://blog.csdn.net/huangyuan_xuan/article/details/28880287</a><br><br> <a href=\"http://blog.csdn.net/huangyuan_xuan/article/details/28276437\">我们大神都这样——提问的智慧</a> <a href=\"http://blog.csdn.net/huangyuan_xuan/article/details/28276437\">http://blog.csdn.net/huangyuan_xuan/article/details/28276437</a><br><br> <a href=\"http://blog.csdn.net/huangyuan_xuan/article/details/27972015\">初学C语言的人看不懂的关机代码</a> <a href=\"http://blog.csdn.net/huangyuan_xuan/article/details/27972015\">http://blog.csdn.net/huangyuan_xuan/article/details/27972015</a><br><br> <a href=\"http://blog.csdn.net/huangyuan_xuan/article/details/27792089\">ubuntu连接路由器无线网络，却不能上网</a> <a href=\"http://blog.csdn.net/huangyuan_xuan/article/details/27792089\">http://blog.csdn.net/huangyuan_xuan/article/details/27792089</a><br><br> <a href=\"http://blog.csdn.net/huangyuan_xuan/article/details/26969041\">sublime-text2的中英文对照表（附带个人的配置习惯）</a> <a href=\"http://blog.csdn.net/huangyuan_xuan/article/details/26969041\">http://blog.csdn.net/huangyuan_xuan/article/details/26969041</a><br><br> <a href=\"http://blog.csdn.net/huangyuan_xuan/article/details/26246709\">电脑蓝屏代码大全</a> <a href=\"http://blog.csdn.net/huangyuan_xuan/article/details/26246709\">http://blog.csdn.net/huangyuan_xuan/article/details/26246709</a><br><br> <a href=\"http://blog.csdn.net/huangyuan_xuan/article/details/26245513\">VC6.0 快捷键整理</a> <a href=\"http://blog.csdn.net/huangyuan_xuan/article/details/26245513\">http://blog.csdn.net/huangyuan_xuan/article/details/26245513</a><br><br> <a href=\"http://blog.csdn.net/huangyuan_xuan/article/details/26245135\">玩游戏无法全屏</a> <a href=\"http://blog.csdn.net/huangyuan_xuan/article/details/26245135\">http://blog.csdn.net/huangyuan_xuan/article/details/26245135</a><br><br> <a href=\"http://blog.csdn.net/huangyuan_xuan/article/details/26244991\">15 Ospf</a> <a href=\"http://blog.csdn.net/huangyuan_xuan/article/details/26244991\">http://blog.csdn.net/huangyuan_xuan/article/details/26244991</a><br><br> <a href=\"http://blog.csdn.net/huangyuan_xuan/article/details/26244541\">14 EIGRP 配置</a> <a href=\"http://blog.csdn.net/huangyuan_xuan/article/details/26244541\">http://blog.csdn.net/huangyuan_xuan/article/details/26244541</a><br><br> <a href=\"http://blog.csdn.net/huangyuan_xuan/article/details/26244439\">13 ERGIP</a> <a href=\"http://blog.csdn.net/huangyuan_xuan/article/details/26244439\">http://blog.csdn.net/huangyuan_xuan/article/details/26244439</a><br><br> <a href=\"http://blog.csdn.net/huangyuan_xuan/article/details/26244201\">12    rip-2  配置命令</a> <a href=\"http://blog.csdn.net/huangyuan_xuan/article/details/26244201\">http://blog.csdn.net/huangyuan_xuan/article/details/26244201</a><br><br> <a href=\"http://blog.csdn.net/huangyuan_xuan/article/details/26244031\">11    rip -1</a> <a href=\"http://blog.csdn.net/huangyuan_xuan/article/details/26244031\">http://blog.csdn.net/huangyuan_xuan/article/details/26244031</a><br><br> <a href=\"http://blog.csdn.net/huangyuan_xuan/article/details/26243735\">10动态路由</a> <a href=\"http://blog.csdn.net/huangyuan_xuan/article/details/26243735\">http://blog.csdn.net/huangyuan_xuan/article/details/26243735</a><br><br> <a href=\"http://blog.csdn.net/huangyuan_xuan/article/details/26243487\">9静态路由</a> <a href=\"http://blog.csdn.net/huangyuan_xuan/article/details/26243487\">http://blog.csdn.net/huangyuan_xuan/article/details/26243487</a><br><br> <a href=\"http://blog.csdn.net/huangyuan_xuan/article/details/26243293\">8网络拓扑结构</a> <a href=\"http://blog.csdn.net/huangyuan_xuan/article/details/26243293\">http://blog.csdn.net/huangyuan_xuan/article/details/26243293</a><br><br> <a href=\"http://blog.csdn.net/huangyuan_xuan/article/details/26243041\">7VLSM子网划分</a> <a href=\"http://blog.csdn.net/huangyuan_xuan/article/details/26243041\">http://blog.csdn.net/huangyuan_xuan/article/details/26243041</a><br><br> <a href=\"http://blog.csdn.net/huangyuan_xuan/article/details/26242799\">6常用网络相关命令</a> <a href=\"http://blog.csdn.net/huangyuan_xuan/article/details/26242799\">http://blog.csdn.net/huangyuan_xuan/article/details/26242799</a><br><br> <a href=\"http://blog.csdn.net/huangyuan_xuan/article/details/26242589\">5数据包发送流程</a> <a href=\"http://blog.csdn.net/huangyuan_xuan/article/details/26242589\">http://blog.csdn.net/huangyuan_xuan/article/details/26242589</a><br><br> <a href=\"http://blog.csdn.net/huangyuan_xuan/article/details/26242183\">网线</a> <a href=\"http://blog.csdn.net/huangyuan_xuan/article/details/26242183\">http://blog.csdn.net/huangyuan_xuan/article/details/26242183</a><br><br> <a href=\"http://blog.csdn.net/huangyuan_xuan/article/details/26242101\">osi七层网络模型4</a> <a href=\"http://blog.csdn.net/huangyuan_xuan/article/details/26242101\">http://blog.csdn.net/huangyuan_xuan/article/details/26242101</a><br><br> <a href=\"http://blog.csdn.net/huangyuan_xuan/article/details/26242015\">osi七层网络模型3</a> <a href=\"http://blog.csdn.net/huangyuan_xuan/article/details/26242015\">http://blog.csdn.net/huangyuan_xuan/article/details/26242015</a><br><br> <a href=\"http://blog.csdn.net/huangyuan_xuan/article/details/26241831\">osi七层网络模型2</a> <a href=\"http://blog.csdn.net/huangyuan_xuan/article/details/26241831\">http://blog.csdn.net/huangyuan_xuan/article/details/26241831</a><br><br> <a href=\"http://blog.csdn.net/huangyuan_xuan/article/details/26241631\">OSI七层网络模型1</a> <a href=\"http://blog.csdn.net/huangyuan_xuan/article/details/26241631\">http://blog.csdn.net/huangyuan_xuan/article/details/26241631</a><br><br> <a href=\"http://blog.csdn.net/huangyuan_xuan/article/details/26164349\">sublime-text2 编译java出错 Decode error - output not utf-8的解决办法</a> <a href=\"http://blog.csdn.net/huangyuan_xuan/article/details/26164349\">http://blog.csdn.net/huangyuan_xuan/article/details/26164349</a><br><br> <a href=\"http://blog.csdn.net/huangyuan_xuan/article/details/26162201\">安装虚拟机报错解决办法 TheVMware Authorization Service is not running</a> <a href=\"http://blog.csdn.net/huangyuan_xuan/article/details/26162201\">http://blog.csdn.net/huangyuan_xuan/article/details/26162201</a><br><br> <a href=\"http://blog.csdn.net/huangyuan_xuan/article/details/26162083\">我的vim配置</a> <a href=\"http://blog.csdn.net/huangyuan_xuan/article/details/26162083\">http://blog.csdn.net/huangyuan_xuan/article/details/26162083</a><br><br> <a href=\"http://blog.csdn.net/huangyuan_xuan/article/details/26161983\">sublime text 2 搭建java运行环境</a> <a href=\"http://blog.csdn.net/huangyuan_xuan/article/details/26161983\">http://blog.csdn.net/huangyuan_xuan/article/details/26161983</a><br><br> <a href=\"http://blog.csdn.net/huangyuan_xuan/article/details/26160973\">ubuntu的一点命令</a> <a href=\"http://blog.csdn.net/huangyuan_xuan/article/details/26160973\">http://blog.csdn.net/huangyuan_xuan/article/details/26160973</a><br><br> 以后主要就在gitpage上写博客了.<br> 以上</p>"},{"title":"简单的桌面小部件","date":"2017-03-20T03:51:11.000Z","_content":"实现一个简单的桌面小部件，响应点击事件，更新等功能。\n1. 定义小部件界面\n2. 定义小部件配置信息\n3. 定义小部件的实现类\n4. 声明小部件\n在AndroidStudio中只需要在`main\\java`下新建一个`widget`,就可以了，IDE会自动在`res\\layout`添加布局文件，在`res\\xml`下新建配置信息文件。然后就可以进行具体实现了。\n\n<!--more-->\n\n![AS下新建widget](/image/new_widget.png)\n\n\n\n### 定义小部件界面\nRemoteView目前并不能支持所有的View，现在支持的类型如下：\n* Layout\n\t* FrameLayout\n\t* LinearLayout\n\t* RelativeLayout\n\t* GridLayout\n* View\n\t* AnalogClock\n\t* Button\n\t* Chronometer\n\t* ImageButton\n\t* ImageView\n\t* ProgressBar\n\t* TextView\n\t* ViewFlipper\n\t* ListView\n\t* GridView\n\t* StackView\n\t* AdapterViewFlipper\n\t* ViewStub\n\t\n这个没什么好说的，按照写界面布局的方式写就好了，但是不建议写过于复杂的布局。\n### 定义小部件配置信息\n下面的代码就是IDE自动成的配置信息文件，不喜欢IDE代劳的同学可以自己创建。\n``` xml\n<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<appwidget-provider xmlns:android=\"http://schemas.android.com/apk/res/android\"\n    android:initialKeyguardLayout=\"@layout/test_remote_view_widget\"\n    android:initialLayout=\"@layout/test_remote_view_widget\"\n    android:minHeight=\"40dp\"\n    android:minWidth=\"40dp\"\n    android:previewImage=\"@drawable/example_appwidget_preview\"\n    android:resizeMode=\"horizontal|vertical\"\n    android:updatePeriodMillis=\"86400000\"\n    android:widgetCategory=\"home_screen\"></appwidget-provider> \n```\n \n`initialLayout`：布局文件\n`previewImage`： 预览的图片\n`updatePeriodMillis`：刷新周期，单位毫秒\n\n###  定义小部件的实现类\n实现的功能是当点击这个小部件的时候改变文字内容\n``` java\npublic class TestRemoteViewWidget extends AppWidgetProvider {\n\n    private static final String CLICK_ACTION = \"com.huangyuan.testwidget.TAP_CLICK_ACTION\";\n    @Override\n    public void onReceive(Context context, Intent intent) {\n        super.onReceive(context, intent);\n        Toast.makeText(context,\"onReceive:\" + intent.getAction(),Toast.LENGTH_SHORT).show();\n        if(intent.getAction().equals(CLICK_ACTION)){\n            AppWidgetManager appWidgetManager = AppWidgetManager.getInstance(context);\n            RemoteViews remoteViews = new RemoteViews(context.getPackageName(),R.layout.test_remote_view_widget);\n            remoteViews.setTextViewText(R.id.appwidget_text,\"点击\");\n            appWidgetManager.updateAppWidget(new ComponentName(context,TestRemoteViewWidget.class),remoteViews);\n        }\n    }\n    @Override\n    public void onUpdate(Context context, AppWidgetManager appWidgetManager, int[] appWidgetIds) {\n        Toast.makeText(context,\"onUpdate\" ,Toast.LENGTH_SHORT).show();\n        RemoteViews remoteViews = new RemoteViews(context.getPackageName(),R.layout.test_remote_view_widget);\n        Intent clickIntent = new Intent();\n        clickIntent.setAction(CLICK_ACTION);\n        PendingIntent pendingIntent = PendingIntent.getBroadcast(context,0,clickIntent,0);\n        remoteViews.setOnClickPendingIntent(R.id.appwidget_text,pendingIntent);\n        appWidgetManager.updateAppWidget(appWidgetIds,remoteViews);\n    }\n}\n```\n\n其中还有其他方法：\n* onEnabled:当该窗口小部件第一次添加到桌面时调用该方法，可添加多次，但只在第一次调用\n* onUpdate:小部件被添加时或者每次小部件更新时都会调用一次该方法，小部件的更新时机由`updatePeriodMillis`指定。\n* onDeleted:每删除一次桌面小部件就调用一次。\n* onDisabled:当最后一个该类型的桌面小部件被删除时调用该方法，追时最后一个。\n需要注意的是，更新remoteView时，不能直接访问里面的View,需要通过RemoteView所提供的一系列方法更新View。\n* 更新文本： remoteViews.setTextViewText();\n* 更新图片： remoteViews.setImageViewResource();remoteViews.setImageViewBitmap();\n* 添加单击事件：remoteViews.setOnClickPendingIntent();\n***\n\n","source":"_posts/简单的桌面小部件.md","raw":"---\ntitle: 简单的桌面小部件\ndate: 2017-03-20 11:51:11\ntags: [Android]\n---\n实现一个简单的桌面小部件，响应点击事件，更新等功能。\n1. 定义小部件界面\n2. 定义小部件配置信息\n3. 定义小部件的实现类\n4. 声明小部件\n在AndroidStudio中只需要在`main\\java`下新建一个`widget`,就可以了，IDE会自动在`res\\layout`添加布局文件，在`res\\xml`下新建配置信息文件。然后就可以进行具体实现了。\n\n<!--more-->\n\n![AS下新建widget](/image/new_widget.png)\n\n\n\n### 定义小部件界面\nRemoteView目前并不能支持所有的View，现在支持的类型如下：\n* Layout\n\t* FrameLayout\n\t* LinearLayout\n\t* RelativeLayout\n\t* GridLayout\n* View\n\t* AnalogClock\n\t* Button\n\t* Chronometer\n\t* ImageButton\n\t* ImageView\n\t* ProgressBar\n\t* TextView\n\t* ViewFlipper\n\t* ListView\n\t* GridView\n\t* StackView\n\t* AdapterViewFlipper\n\t* ViewStub\n\t\n这个没什么好说的，按照写界面布局的方式写就好了，但是不建议写过于复杂的布局。\n### 定义小部件配置信息\n下面的代码就是IDE自动成的配置信息文件，不喜欢IDE代劳的同学可以自己创建。\n``` xml\n<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<appwidget-provider xmlns:android=\"http://schemas.android.com/apk/res/android\"\n    android:initialKeyguardLayout=\"@layout/test_remote_view_widget\"\n    android:initialLayout=\"@layout/test_remote_view_widget\"\n    android:minHeight=\"40dp\"\n    android:minWidth=\"40dp\"\n    android:previewImage=\"@drawable/example_appwidget_preview\"\n    android:resizeMode=\"horizontal|vertical\"\n    android:updatePeriodMillis=\"86400000\"\n    android:widgetCategory=\"home_screen\"></appwidget-provider> \n```\n \n`initialLayout`：布局文件\n`previewImage`： 预览的图片\n`updatePeriodMillis`：刷新周期，单位毫秒\n\n###  定义小部件的实现类\n实现的功能是当点击这个小部件的时候改变文字内容\n``` java\npublic class TestRemoteViewWidget extends AppWidgetProvider {\n\n    private static final String CLICK_ACTION = \"com.huangyuan.testwidget.TAP_CLICK_ACTION\";\n    @Override\n    public void onReceive(Context context, Intent intent) {\n        super.onReceive(context, intent);\n        Toast.makeText(context,\"onReceive:\" + intent.getAction(),Toast.LENGTH_SHORT).show();\n        if(intent.getAction().equals(CLICK_ACTION)){\n            AppWidgetManager appWidgetManager = AppWidgetManager.getInstance(context);\n            RemoteViews remoteViews = new RemoteViews(context.getPackageName(),R.layout.test_remote_view_widget);\n            remoteViews.setTextViewText(R.id.appwidget_text,\"点击\");\n            appWidgetManager.updateAppWidget(new ComponentName(context,TestRemoteViewWidget.class),remoteViews);\n        }\n    }\n    @Override\n    public void onUpdate(Context context, AppWidgetManager appWidgetManager, int[] appWidgetIds) {\n        Toast.makeText(context,\"onUpdate\" ,Toast.LENGTH_SHORT).show();\n        RemoteViews remoteViews = new RemoteViews(context.getPackageName(),R.layout.test_remote_view_widget);\n        Intent clickIntent = new Intent();\n        clickIntent.setAction(CLICK_ACTION);\n        PendingIntent pendingIntent = PendingIntent.getBroadcast(context,0,clickIntent,0);\n        remoteViews.setOnClickPendingIntent(R.id.appwidget_text,pendingIntent);\n        appWidgetManager.updateAppWidget(appWidgetIds,remoteViews);\n    }\n}\n```\n\n其中还有其他方法：\n* onEnabled:当该窗口小部件第一次添加到桌面时调用该方法，可添加多次，但只在第一次调用\n* onUpdate:小部件被添加时或者每次小部件更新时都会调用一次该方法，小部件的更新时机由`updatePeriodMillis`指定。\n* onDeleted:每删除一次桌面小部件就调用一次。\n* onDisabled:当最后一个该类型的桌面小部件被删除时调用该方法，追时最后一个。\n需要注意的是，更新remoteView时，不能直接访问里面的View,需要通过RemoteView所提供的一系列方法更新View。\n* 更新文本： remoteViews.setTextViewText();\n* 更新图片： remoteViews.setImageViewResource();remoteViews.setImageViewBitmap();\n* 添加单击事件：remoteViews.setOnClickPendingIntent();\n***\n\n","slug":"简单的桌面小部件","published":1,"updated":"2017-07-02T08:48:57.277Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjbvyt3wf003sscdg7y9gqo71","content":"<p>实现一个简单的桌面小部件，响应点击事件，更新等功能。</p>\n<ol>\n<li>定义小部件界面</li>\n<li>定义小部件配置信息</li>\n<li>定义小部件的实现类</li>\n<li>声明小部件<br>在AndroidStudio中只需要在<code>main\\java</code>下新建一个<code>widget</code>,就可以了，IDE会自动在<code>res\\layout</code>添加布局文件，在<code>res\\xml</code>下新建配置信息文件。然后就可以进行具体实现了。</li>\n</ol>\n<a id=\"more\"></a>\n<p><img src=\"/image/new_widget.png\" alt=\"AS下新建widget\"></p>\n<h3 id=\"定义小部件界面\"><a href=\"#定义小部件界面\" class=\"headerlink\" title=\"定义小部件界面\"></a>定义小部件界面</h3><p>RemoteView目前并不能支持所有的View，现在支持的类型如下：</p>\n<ul>\n<li>Layout<ul>\n<li>FrameLayout</li>\n<li>LinearLayout</li>\n<li>RelativeLayout</li>\n<li>GridLayout</li>\n</ul>\n</li>\n<li>View<ul>\n<li>AnalogClock</li>\n<li>Button</li>\n<li>Chronometer</li>\n<li>ImageButton</li>\n<li>ImageView</li>\n<li>ProgressBar</li>\n<li>TextView</li>\n<li>ViewFlipper</li>\n<li>ListView</li>\n<li>GridView</li>\n<li>StackView</li>\n<li>AdapterViewFlipper</li>\n<li>ViewStub</li>\n</ul>\n</li>\n</ul>\n<p>这个没什么好说的，按照写界面布局的方式写就好了，但是不建议写过于复杂的布局。</p>\n<h3 id=\"定义小部件配置信息\"><a href=\"#定义小部件配置信息\" class=\"headerlink\" title=\"定义小部件配置信息\"></a>定义小部件配置信息</h3><p>下面的代码就是IDE自动成的配置信息文件，不喜欢IDE代劳的同学可以自己创建。<br><figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;?xml version=\"1.0\" encoding=\"utf-8\"?&gt;</div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">appwidget-provider</span> <span class=\"attr\">xmlns:android</span>=<span class=\"string\">\"http://schemas.android.com/apk/res/android\"</span></span></div><div class=\"line\">    <span class=\"attr\">android:initialKeyguardLayout</span>=<span class=\"string\">\"@layout/test_remote_view_widget\"</span></div><div class=\"line\">    <span class=\"attr\">android:initialLayout</span>=<span class=\"string\">\"@layout/test_remote_view_widget\"</span></div><div class=\"line\">    <span class=\"attr\">android:minHeight</span>=<span class=\"string\">\"40dp\"</span></div><div class=\"line\">    <span class=\"attr\">android:minWidth</span>=<span class=\"string\">\"40dp\"</span></div><div class=\"line\">    <span class=\"attr\">android:previewImage</span>=<span class=\"string\">\"@drawable/example_appwidget_preview\"</span></div><div class=\"line\">    <span class=\"attr\">android:resizeMode</span>=<span class=\"string\">\"horizontal|vertical\"</span></div><div class=\"line\">    <span class=\"attr\">android:updatePeriodMillis</span>=<span class=\"string\">\"86400000\"</span></div><div class=\"line\">    <span class=\"attr\">android:widgetCategory</span>=<span class=\"string\">\"home_screen\"</span>&gt;<span class=\"tag\">&lt;/<span class=\"name\">appwidget-provider</span>&gt;</span></div></pre></td></tr></table></figure></p>\n<p><code>initialLayout</code>：布局文件<br><code>previewImage</code>： 预览的图片<br><code>updatePeriodMillis</code>：刷新周期，单位毫秒</p>\n<h3 id=\"定义小部件的实现类\"><a href=\"#定义小部件的实现类\" class=\"headerlink\" title=\"定义小部件的实现类\"></a>定义小部件的实现类</h3><p>实现的功能是当点击这个小部件的时候改变文字内容<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">TestRemoteViewWidget</span> <span class=\"keyword\">extends</span> <span class=\"title\">AppWidgetProvider</span> </span>&#123;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> String CLICK_ACTION = <span class=\"string\">\"com.huangyuan.testwidget.TAP_CLICK_ACTION\"</span>;</div><div class=\"line\">    <span class=\"meta\">@Override</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onReceive</span><span class=\"params\">(Context context, Intent intent)</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">super</span>.onReceive(context, intent);</div><div class=\"line\">        Toast.makeText(context,<span class=\"string\">\"onReceive:\"</span> + intent.getAction(),Toast.LENGTH_SHORT).show();</div><div class=\"line\">        <span class=\"keyword\">if</span>(intent.getAction().equals(CLICK_ACTION))&#123;</div><div class=\"line\">            AppWidgetManager appWidgetManager = AppWidgetManager.getInstance(context);</div><div class=\"line\">            RemoteViews remoteViews = <span class=\"keyword\">new</span> RemoteViews(context.getPackageName(),R.layout.test_remote_view_widget);</div><div class=\"line\">            remoteViews.setTextViewText(R.id.appwidget_text,<span class=\"string\">\"点击\"</span>);</div><div class=\"line\">            appWidgetManager.updateAppWidget(<span class=\"keyword\">new</span> ComponentName(context,TestRemoteViewWidget.class),remoteViews);</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"meta\">@Override</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onUpdate</span><span class=\"params\">(Context context, AppWidgetManager appWidgetManager, <span class=\"keyword\">int</span>[] appWidgetIds)</span> </span>&#123;</div><div class=\"line\">        Toast.makeText(context,<span class=\"string\">\"onUpdate\"</span> ,Toast.LENGTH_SHORT).show();</div><div class=\"line\">        RemoteViews remoteViews = <span class=\"keyword\">new</span> RemoteViews(context.getPackageName(),R.layout.test_remote_view_widget);</div><div class=\"line\">        Intent clickIntent = <span class=\"keyword\">new</span> Intent();</div><div class=\"line\">        clickIntent.setAction(CLICK_ACTION);</div><div class=\"line\">        PendingIntent pendingIntent = PendingIntent.getBroadcast(context,<span class=\"number\">0</span>,clickIntent,<span class=\"number\">0</span>);</div><div class=\"line\">        remoteViews.setOnClickPendingIntent(R.id.appwidget_text,pendingIntent);</div><div class=\"line\">        appWidgetManager.updateAppWidget(appWidgetIds,remoteViews);</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>其中还有其他方法：</p>\n<ul>\n<li>onEnabled:当该窗口小部件第一次添加到桌面时调用该方法，可添加多次，但只在第一次调用</li>\n<li>onUpdate:小部件被添加时或者每次小部件更新时都会调用一次该方法，小部件的更新时机由<code>updatePeriodMillis</code>指定。</li>\n<li>onDeleted:每删除一次桌面小部件就调用一次。</li>\n<li>onDisabled:当最后一个该类型的桌面小部件被删除时调用该方法，追时最后一个。<br>需要注意的是，更新remoteView时，不能直接访问里面的View,需要通过RemoteView所提供的一系列方法更新View。</li>\n<li>更新文本： remoteViews.setTextViewText();</li>\n<li>更新图片： remoteViews.setImageViewResource();remoteViews.setImageViewBitmap();</li>\n<li>添加单击事件：remoteViews.setOnClickPendingIntent();</li>\n</ul>\n<hr>\n","excerpt":"<p>实现一个简单的桌面小部件，响应点击事件，更新等功能。</p>\n<ol>\n<li>定义小部件界面</li>\n<li>定义小部件配置信息</li>\n<li>定义小部件的实现类</li>\n<li>声明小部件<br>在AndroidStudio中只需要在<code>main\\java</code>下新建一个<code>widget</code>,就可以了，IDE会自动在<code>res\\layout</code>添加布局文件，在<code>res\\xml</code>下新建配置信息文件。然后就可以进行具体实现了。</li>\n</ol>","more":"<p><img src=\"/image/new_widget.png\" alt=\"AS下新建widget\"></p>\n<h3 id=\"定义小部件界面\"><a href=\"#定义小部件界面\" class=\"headerlink\" title=\"定义小部件界面\"></a>定义小部件界面</h3><p>RemoteView目前并不能支持所有的View，现在支持的类型如下：</p>\n<ul>\n<li>Layout<ul>\n<li>FrameLayout</li>\n<li>LinearLayout</li>\n<li>RelativeLayout</li>\n<li>GridLayout</li>\n</ul>\n</li>\n<li>View<ul>\n<li>AnalogClock</li>\n<li>Button</li>\n<li>Chronometer</li>\n<li>ImageButton</li>\n<li>ImageView</li>\n<li>ProgressBar</li>\n<li>TextView</li>\n<li>ViewFlipper</li>\n<li>ListView</li>\n<li>GridView</li>\n<li>StackView</li>\n<li>AdapterViewFlipper</li>\n<li>ViewStub</li>\n</ul>\n</li>\n</ul>\n<p>这个没什么好说的，按照写界面布局的方式写就好了，但是不建议写过于复杂的布局。</p>\n<h3 id=\"定义小部件配置信息\"><a href=\"#定义小部件配置信息\" class=\"headerlink\" title=\"定义小部件配置信息\"></a>定义小部件配置信息</h3><p>下面的代码就是IDE自动成的配置信息文件，不喜欢IDE代劳的同学可以自己创建。<br><figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;?xml version=\"1.0\" encoding=\"utf-8\"?&gt;</div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">appwidget-provider</span> <span class=\"attr\">xmlns:android</span>=<span class=\"string\">\"http://schemas.android.com/apk/res/android\"</span></div><div class=\"line\">    <span class=\"attr\">android:initialKeyguardLayout</span>=<span class=\"string\">\"@layout/test_remote_view_widget\"</span></div><div class=\"line\">    <span class=\"attr\">android:initialLayout</span>=<span class=\"string\">\"@layout/test_remote_view_widget\"</span></div><div class=\"line\">    <span class=\"attr\">android:minHeight</span>=<span class=\"string\">\"40dp\"</span></div><div class=\"line\">    <span class=\"attr\">android:minWidth</span>=<span class=\"string\">\"40dp\"</span></div><div class=\"line\">    <span class=\"attr\">android:previewImage</span>=<span class=\"string\">\"@drawable/example_appwidget_preview\"</span></div><div class=\"line\">    <span class=\"attr\">android:resizeMode</span>=<span class=\"string\">\"horizontal|vertical\"</span></div><div class=\"line\">    <span class=\"attr\">android:updatePeriodMillis</span>=<span class=\"string\">\"86400000\"</span></div><div class=\"line\">    <span class=\"attr\">android:widgetCategory</span>=<span class=\"string\">\"home_screen\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">appwidget-provider</span>&gt;</span></div></pre></td></tr></table></figure></p>\n<p><code>initialLayout</code>：布局文件<br><code>previewImage</code>： 预览的图片<br><code>updatePeriodMillis</code>：刷新周期，单位毫秒</p>\n<h3 id=\"定义小部件的实现类\"><a href=\"#定义小部件的实现类\" class=\"headerlink\" title=\"定义小部件的实现类\"></a>定义小部件的实现类</h3><p>实现的功能是当点击这个小部件的时候改变文字内容<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">TestRemoteViewWidget</span> <span class=\"keyword\">extends</span> <span class=\"title\">AppWidgetProvider</span> </span>&#123;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> String CLICK_ACTION = <span class=\"string\">\"com.huangyuan.testwidget.TAP_CLICK_ACTION\"</span>;</div><div class=\"line\">    <span class=\"meta\">@Override</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onReceive</span><span class=\"params\">(Context context, Intent intent)</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">super</span>.onReceive(context, intent);</div><div class=\"line\">        Toast.makeText(context,<span class=\"string\">\"onReceive:\"</span> + intent.getAction(),Toast.LENGTH_SHORT).show();</div><div class=\"line\">        <span class=\"keyword\">if</span>(intent.getAction().equals(CLICK_ACTION))&#123;</div><div class=\"line\">            AppWidgetManager appWidgetManager = AppWidgetManager.getInstance(context);</div><div class=\"line\">            RemoteViews remoteViews = <span class=\"keyword\">new</span> RemoteViews(context.getPackageName(),R.layout.test_remote_view_widget);</div><div class=\"line\">            remoteViews.setTextViewText(R.id.appwidget_text,<span class=\"string\">\"点击\"</span>);</div><div class=\"line\">            appWidgetManager.updateAppWidget(<span class=\"keyword\">new</span> ComponentName(context,TestRemoteViewWidget.class),remoteViews);</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"meta\">@Override</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onUpdate</span><span class=\"params\">(Context context, AppWidgetManager appWidgetManager, <span class=\"keyword\">int</span>[] appWidgetIds)</span> </span>&#123;</div><div class=\"line\">        Toast.makeText(context,<span class=\"string\">\"onUpdate\"</span> ,Toast.LENGTH_SHORT).show();</div><div class=\"line\">        RemoteViews remoteViews = <span class=\"keyword\">new</span> RemoteViews(context.getPackageName(),R.layout.test_remote_view_widget);</div><div class=\"line\">        Intent clickIntent = <span class=\"keyword\">new</span> Intent();</div><div class=\"line\">        clickIntent.setAction(CLICK_ACTION);</div><div class=\"line\">        PendingIntent pendingIntent = PendingIntent.getBroadcast(context,<span class=\"number\">0</span>,clickIntent,<span class=\"number\">0</span>);</div><div class=\"line\">        remoteViews.setOnClickPendingIntent(R.id.appwidget_text,pendingIntent);</div><div class=\"line\">        appWidgetManager.updateAppWidget(appWidgetIds,remoteViews);</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>其中还有其他方法：</p>\n<ul>\n<li>onEnabled:当该窗口小部件第一次添加到桌面时调用该方法，可添加多次，但只在第一次调用</li>\n<li>onUpdate:小部件被添加时或者每次小部件更新时都会调用一次该方法，小部件的更新时机由<code>updatePeriodMillis</code>指定。</li>\n<li>onDeleted:每删除一次桌面小部件就调用一次。</li>\n<li>onDisabled:当最后一个该类型的桌面小部件被删除时调用该方法，追时最后一个。<br>需要注意的是，更新remoteView时，不能直接访问里面的View,需要通过RemoteView所提供的一系列方法更新View。</li>\n<li>更新文本： remoteViews.setTextViewText();</li>\n<li>更新图片： remoteViews.setImageViewResource();remoteViews.setImageViewBitmap();</li>\n<li>添加单击事件：remoteViews.setOnClickPendingIntent();</li>\n</ul>\n<hr>"},{"title":"通过简单的自定义view来看View的工作流程","date":"2017-03-18T06:54:01.000Z","_content":"\n通过简单的自定义View(画个圆)，来了解一下View的工作流程以及自定义View应该注意的地方。\n<!--more-->\n### 一、自定义View的分类\n#### 1.1 继承View重写onDraw方法\n这种方法主要用于实现一些不规则的效果，比如动态或者静态显示一些不规则的图形，采用这种方式需要自己支持`wrap_content`,并且`padding`需要自己处理.\n#### 1.2 继承ViewGroup派生特殊的Layout\n这种方式主要用于实现自定义布局，如流式布局。采用这种方式需要合适的处理ViewGroup的测量、布局这两个过程，并同时处理子元素的测量和布局过程。\n#### 1.3 继承特定的View(如TextView)\n这种方法一般用于扩展某种已有的`View`的功能，比如`TextView`，这种方法比较容易实现，不需要自己支持`wrap_content`和`padding`。\n#### 1.4 继承特定的ViewGroup\n采用这种方式不需要自己处理`ViewGroup`的测量和布局这两个过程。\n### 二、值得注意的地方\n#### 2.1 让View支持wrap_content\n这是因为直接继承View或者ViewGroup的控件，如果不在`onMeasure`中对`wrap_content`做特殊处理，那么当外界在适用`wrap_content`时就无法达到预期的效果。\n#### 2.2 如果有必要，让View支持padding\n这是因为如果直接继承View，如果不在draw方法中处理padding，那么padding属性是无法起作用的。另外，直接继承自ViewGroup的控件需要在`onMeasure`和`onLayout`中考虑padding和子元素的margin对其造成的影响，不然将导致padding和子元素的margin失效。\n#### 2.3 尽量不要在View中使用Handler，没必要\n因为View内部本身就提供了post系列的方法， 完全可以替代Handler的作用，当然除非你很明确要使用Handler来发送消息\n#### 2.4 及时停止动画和线程\n如果需要停止线程或者动画，可以在`onDetachedFromWindow`方法中处理，当包含此View的Activity退出或者当前View被remove时，View的`onDetachedFromWindow`方法会被调用，和此方法对应的是`onAttachedToWindow`，当包含此View的Activity启动时，View的`onAttachedToWindow`方法会被调用。\n#### 2.5 View带有滑动嵌套情形时，需要处理好滑动冲突\n如果有滑动冲突的话，那么要合适的处理滑动冲突，否则将会严重影响View的效果。\n### 三、自定义View\n#### 3.1 继承View重写onDraw方法\n首先来看一下代码\n``` java\npublic class TestCustomCircleView extends View {\n\n    private int color = Color.RED;\n    private Paint paint;\n    public TestCustomCircleView(Context context) {\n        super(context);\n        init();\n    }\n\n    public TestCustomCircleView(Context context, AttributeSet attrs) {\n        super(context, attrs);\n        init();\n    }\n\n    public TestCustomCircleView(Context context, AttributeSet attrs, int defStyleAttr) {\n        super(context, attrs, defStyleAttr);\n        init();\n    }\n    private void init(){\n        paint = new Paint();\n        paint.setColor(color);\n    }\n\n    @Override\n    protected void onDraw(Canvas canvas) {\n        super.onDraw(canvas);\n        int width = getWidth();\n        int height = getHeight();\n        int radius = Math.min(width,height)/2;\n        canvas.drawCircle(width/2,height/2,radius,paint);\n    }\n}\n```\n上面的代码只是一种初级的实现，当我们进行使用的时候，只支持margin属性，并不支持padding属性。对`onDraw`方法进行修改，只要在绘制的时候考虑一下padding即可。\n```java\n @Override\n    protected void onDraw(Canvas canvas) {\n        super.onDraw(canvas);\n        int paddingLeft = getPaddingLeft();\n        int paddingRight = getPaddingRight();\n        int paddingTop = getPaddingTop();\n        int paddingBottom = getPaddingBottom();\n        int width = getWidth() - paddingLeft - paddingRight;\n        int height = getHeight() - paddingBottom - paddingTop;\n        int radius = Math.min(width, height) / 2;\n        canvas.drawCircle(paddingLeft + width / 2, paddingTop + height / 2, radius, paint);\n    }\n```\n但是现在还不能支持`warp_content`属性，现在使用`wrap_content`和使用`match_parent`没有任何区别：对于直接继承自View的控件，如果不对`wrap_content`做特殊处理，那么使用`wrap_content`就相当于使用`match_parent`.这里就需要我们重写`onMeasure`方法，当宽高属性为`wrap_content`时，取一个默认值。\n```java\n    @Override\n    protected void onMeasure(int widthMeasureSpec, int heightMeasureSpec) {\n        int desiredWidth = 100;\n        int desiredHeight = 100;\n        int widthMode = MeasureSpec.getMode(widthMeasureSpec);\n        int widthSize = MeasureSpec.getSize(widthMeasureSpec);\n        int heightMode = MeasureSpec.getMode(heightMeasureSpec);\n        int heightSize = MeasureSpec.getSize(heightMeasureSpec);\n\n        int width;\n        int height;\n\n        //宽度\n        if (widthMode == MeasureSpec.AT_MOST) {\n            width = Math.min(desiredWidth, widthSize);\n        } else if (widthMode == MeasureSpec.EXACTLY) {\n            width = widthSize;\n        } else {\n            width = desiredWidth;\n        }\n        //高度\n        if (heightMode == MeasureSpec.AT_MOST) {\n            height = Math.min(desiredHeight, heightSize);\n        } else if (heightMode == MeasureSpec.EXACTLY) {\n            height = heightSize;\n        } else {\n            height = desiredHeight;\n        }\n        setMeasuredDimension(width, height);\n    }\n```\n这样，当我们使用wrap_content时，就是使用默认的100px的值。\n### 四、使用自定义属性\n\n#### 4.1 创建自定义的配置文件\n在values目录下面创建自定义属性的XML，比如attrs.xml，也可以选择类似于attrs_circle_view.xml等这种以attrs_开头的文件名，当然这个文件名并没有什么限制，可以随便取名字。我们选择创建attrs.xml文件。\n``` xml\n<resources>\n    <declare-styleable name=\"TestCustomCircleView\">\n        <attr name=\"circle_color\" format=\"color\"/>\n    </declare-styleable>\n</resources>\n```\n#### 4.2 在构造方法中解析自定义的属性值并做相应的处理\n``` java\n    public TestCustomCircleView(Context context, AttributeSet attrs, int defStyleAttr) {\n        super(context, attrs, defStyleAttr);\n        TypedArray typedArray = context.obtainStyledAttributes(attrs, R.styleable.TestCustomCircleView);\n        color = typedArray.getColor(R.styleable.TestCustomCircleView_circle_color,Color.RED);\n        typedArray.recycle();\n        init();\n    }\n```\n首先加载自定义属性集合，接着解析属性集合中`TestCustomCircleView_circle_color`，如果没有指定属性值，则使用`Color.RED`作为默认值。\n#### 4.3 在布局文件中使用自定义属性\n``` xml\n    <com.example.huangyuan.custom.TestCustomCircleView\n        android:layout_width=\"wrap_content\"\n        android:layout_height=\"wrap_content\"\n        android:layout_gravity=\"center_horizontal\"\n        app:circle_color=\"@color/grey\"\n        />\n``` \n","source":"_posts/通过简单的自定义view来看View的工作流程.md","raw":"---\ntitle: 通过简单的自定义view来看View的工作流程\ndate: 2017-03-18 14:54:01\ntags: [Android]\n---\n\n通过简单的自定义View(画个圆)，来了解一下View的工作流程以及自定义View应该注意的地方。\n<!--more-->\n### 一、自定义View的分类\n#### 1.1 继承View重写onDraw方法\n这种方法主要用于实现一些不规则的效果，比如动态或者静态显示一些不规则的图形，采用这种方式需要自己支持`wrap_content`,并且`padding`需要自己处理.\n#### 1.2 继承ViewGroup派生特殊的Layout\n这种方式主要用于实现自定义布局，如流式布局。采用这种方式需要合适的处理ViewGroup的测量、布局这两个过程，并同时处理子元素的测量和布局过程。\n#### 1.3 继承特定的View(如TextView)\n这种方法一般用于扩展某种已有的`View`的功能，比如`TextView`，这种方法比较容易实现，不需要自己支持`wrap_content`和`padding`。\n#### 1.4 继承特定的ViewGroup\n采用这种方式不需要自己处理`ViewGroup`的测量和布局这两个过程。\n### 二、值得注意的地方\n#### 2.1 让View支持wrap_content\n这是因为直接继承View或者ViewGroup的控件，如果不在`onMeasure`中对`wrap_content`做特殊处理，那么当外界在适用`wrap_content`时就无法达到预期的效果。\n#### 2.2 如果有必要，让View支持padding\n这是因为如果直接继承View，如果不在draw方法中处理padding，那么padding属性是无法起作用的。另外，直接继承自ViewGroup的控件需要在`onMeasure`和`onLayout`中考虑padding和子元素的margin对其造成的影响，不然将导致padding和子元素的margin失效。\n#### 2.3 尽量不要在View中使用Handler，没必要\n因为View内部本身就提供了post系列的方法， 完全可以替代Handler的作用，当然除非你很明确要使用Handler来发送消息\n#### 2.4 及时停止动画和线程\n如果需要停止线程或者动画，可以在`onDetachedFromWindow`方法中处理，当包含此View的Activity退出或者当前View被remove时，View的`onDetachedFromWindow`方法会被调用，和此方法对应的是`onAttachedToWindow`，当包含此View的Activity启动时，View的`onAttachedToWindow`方法会被调用。\n#### 2.5 View带有滑动嵌套情形时，需要处理好滑动冲突\n如果有滑动冲突的话，那么要合适的处理滑动冲突，否则将会严重影响View的效果。\n### 三、自定义View\n#### 3.1 继承View重写onDraw方法\n首先来看一下代码\n``` java\npublic class TestCustomCircleView extends View {\n\n    private int color = Color.RED;\n    private Paint paint;\n    public TestCustomCircleView(Context context) {\n        super(context);\n        init();\n    }\n\n    public TestCustomCircleView(Context context, AttributeSet attrs) {\n        super(context, attrs);\n        init();\n    }\n\n    public TestCustomCircleView(Context context, AttributeSet attrs, int defStyleAttr) {\n        super(context, attrs, defStyleAttr);\n        init();\n    }\n    private void init(){\n        paint = new Paint();\n        paint.setColor(color);\n    }\n\n    @Override\n    protected void onDraw(Canvas canvas) {\n        super.onDraw(canvas);\n        int width = getWidth();\n        int height = getHeight();\n        int radius = Math.min(width,height)/2;\n        canvas.drawCircle(width/2,height/2,radius,paint);\n    }\n}\n```\n上面的代码只是一种初级的实现，当我们进行使用的时候，只支持margin属性，并不支持padding属性。对`onDraw`方法进行修改，只要在绘制的时候考虑一下padding即可。\n```java\n @Override\n    protected void onDraw(Canvas canvas) {\n        super.onDraw(canvas);\n        int paddingLeft = getPaddingLeft();\n        int paddingRight = getPaddingRight();\n        int paddingTop = getPaddingTop();\n        int paddingBottom = getPaddingBottom();\n        int width = getWidth() - paddingLeft - paddingRight;\n        int height = getHeight() - paddingBottom - paddingTop;\n        int radius = Math.min(width, height) / 2;\n        canvas.drawCircle(paddingLeft + width / 2, paddingTop + height / 2, radius, paint);\n    }\n```\n但是现在还不能支持`warp_content`属性，现在使用`wrap_content`和使用`match_parent`没有任何区别：对于直接继承自View的控件，如果不对`wrap_content`做特殊处理，那么使用`wrap_content`就相当于使用`match_parent`.这里就需要我们重写`onMeasure`方法，当宽高属性为`wrap_content`时，取一个默认值。\n```java\n    @Override\n    protected void onMeasure(int widthMeasureSpec, int heightMeasureSpec) {\n        int desiredWidth = 100;\n        int desiredHeight = 100;\n        int widthMode = MeasureSpec.getMode(widthMeasureSpec);\n        int widthSize = MeasureSpec.getSize(widthMeasureSpec);\n        int heightMode = MeasureSpec.getMode(heightMeasureSpec);\n        int heightSize = MeasureSpec.getSize(heightMeasureSpec);\n\n        int width;\n        int height;\n\n        //宽度\n        if (widthMode == MeasureSpec.AT_MOST) {\n            width = Math.min(desiredWidth, widthSize);\n        } else if (widthMode == MeasureSpec.EXACTLY) {\n            width = widthSize;\n        } else {\n            width = desiredWidth;\n        }\n        //高度\n        if (heightMode == MeasureSpec.AT_MOST) {\n            height = Math.min(desiredHeight, heightSize);\n        } else if (heightMode == MeasureSpec.EXACTLY) {\n            height = heightSize;\n        } else {\n            height = desiredHeight;\n        }\n        setMeasuredDimension(width, height);\n    }\n```\n这样，当我们使用wrap_content时，就是使用默认的100px的值。\n### 四、使用自定义属性\n\n#### 4.1 创建自定义的配置文件\n在values目录下面创建自定义属性的XML，比如attrs.xml，也可以选择类似于attrs_circle_view.xml等这种以attrs_开头的文件名，当然这个文件名并没有什么限制，可以随便取名字。我们选择创建attrs.xml文件。\n``` xml\n<resources>\n    <declare-styleable name=\"TestCustomCircleView\">\n        <attr name=\"circle_color\" format=\"color\"/>\n    </declare-styleable>\n</resources>\n```\n#### 4.2 在构造方法中解析自定义的属性值并做相应的处理\n``` java\n    public TestCustomCircleView(Context context, AttributeSet attrs, int defStyleAttr) {\n        super(context, attrs, defStyleAttr);\n        TypedArray typedArray = context.obtainStyledAttributes(attrs, R.styleable.TestCustomCircleView);\n        color = typedArray.getColor(R.styleable.TestCustomCircleView_circle_color,Color.RED);\n        typedArray.recycle();\n        init();\n    }\n```\n首先加载自定义属性集合，接着解析属性集合中`TestCustomCircleView_circle_color`，如果没有指定属性值，则使用`Color.RED`作为默认值。\n#### 4.3 在布局文件中使用自定义属性\n``` xml\n    <com.example.huangyuan.custom.TestCustomCircleView\n        android:layout_width=\"wrap_content\"\n        android:layout_height=\"wrap_content\"\n        android:layout_gravity=\"center_horizontal\"\n        app:circle_color=\"@color/grey\"\n        />\n``` \n","slug":"通过简单的自定义view来看View的工作流程","published":1,"updated":"2017-07-02T08:48:57.279Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjbvyt3wg003tscdgwvbakyz7","content":"<p>通过简单的自定义View(画个圆)，来了解一下View的工作流程以及自定义View应该注意的地方。<br><a id=\"more\"></a></p>\n<h3 id=\"一、自定义View的分类\"><a href=\"#一、自定义View的分类\" class=\"headerlink\" title=\"一、自定义View的分类\"></a>一、自定义View的分类</h3><h4 id=\"1-1-继承View重写onDraw方法\"><a href=\"#1-1-继承View重写onDraw方法\" class=\"headerlink\" title=\"1.1 继承View重写onDraw方法\"></a>1.1 继承View重写onDraw方法</h4><p>这种方法主要用于实现一些不规则的效果，比如动态或者静态显示一些不规则的图形，采用这种方式需要自己支持<code>wrap_content</code>,并且<code>padding</code>需要自己处理.</p>\n<h4 id=\"1-2-继承ViewGroup派生特殊的Layout\"><a href=\"#1-2-继承ViewGroup派生特殊的Layout\" class=\"headerlink\" title=\"1.2 继承ViewGroup派生特殊的Layout\"></a>1.2 继承ViewGroup派生特殊的Layout</h4><p>这种方式主要用于实现自定义布局，如流式布局。采用这种方式需要合适的处理ViewGroup的测量、布局这两个过程，并同时处理子元素的测量和布局过程。</p>\n<h4 id=\"1-3-继承特定的View-如TextView\"><a href=\"#1-3-继承特定的View-如TextView\" class=\"headerlink\" title=\"1.3 继承特定的View(如TextView)\"></a>1.3 继承特定的View(如TextView)</h4><p>这种方法一般用于扩展某种已有的<code>View</code>的功能，比如<code>TextView</code>，这种方法比较容易实现，不需要自己支持<code>wrap_content</code>和<code>padding</code>。</p>\n<h4 id=\"1-4-继承特定的ViewGroup\"><a href=\"#1-4-继承特定的ViewGroup\" class=\"headerlink\" title=\"1.4 继承特定的ViewGroup\"></a>1.4 继承特定的ViewGroup</h4><p>采用这种方式不需要自己处理<code>ViewGroup</code>的测量和布局这两个过程。</p>\n<h3 id=\"二、值得注意的地方\"><a href=\"#二、值得注意的地方\" class=\"headerlink\" title=\"二、值得注意的地方\"></a>二、值得注意的地方</h3><h4 id=\"2-1-让View支持wrap-content\"><a href=\"#2-1-让View支持wrap-content\" class=\"headerlink\" title=\"2.1 让View支持wrap_content\"></a>2.1 让View支持wrap_content</h4><p>这是因为直接继承View或者ViewGroup的控件，如果不在<code>onMeasure</code>中对<code>wrap_content</code>做特殊处理，那么当外界在适用<code>wrap_content</code>时就无法达到预期的效果。</p>\n<h4 id=\"2-2-如果有必要，让View支持padding\"><a href=\"#2-2-如果有必要，让View支持padding\" class=\"headerlink\" title=\"2.2 如果有必要，让View支持padding\"></a>2.2 如果有必要，让View支持padding</h4><p>这是因为如果直接继承View，如果不在draw方法中处理padding，那么padding属性是无法起作用的。另外，直接继承自ViewGroup的控件需要在<code>onMeasure</code>和<code>onLayout</code>中考虑padding和子元素的margin对其造成的影响，不然将导致padding和子元素的margin失效。</p>\n<h4 id=\"2-3-尽量不要在View中使用Handler，没必要\"><a href=\"#2-3-尽量不要在View中使用Handler，没必要\" class=\"headerlink\" title=\"2.3 尽量不要在View中使用Handler，没必要\"></a>2.3 尽量不要在View中使用Handler，没必要</h4><p>因为View内部本身就提供了post系列的方法， 完全可以替代Handler的作用，当然除非你很明确要使用Handler来发送消息</p>\n<h4 id=\"2-4-及时停止动画和线程\"><a href=\"#2-4-及时停止动画和线程\" class=\"headerlink\" title=\"2.4 及时停止动画和线程\"></a>2.4 及时停止动画和线程</h4><p>如果需要停止线程或者动画，可以在<code>onDetachedFromWindow</code>方法中处理，当包含此View的Activity退出或者当前View被remove时，View的<code>onDetachedFromWindow</code>方法会被调用，和此方法对应的是<code>onAttachedToWindow</code>，当包含此View的Activity启动时，View的<code>onAttachedToWindow</code>方法会被调用。</p>\n<h4 id=\"2-5-View带有滑动嵌套情形时，需要处理好滑动冲突\"><a href=\"#2-5-View带有滑动嵌套情形时，需要处理好滑动冲突\" class=\"headerlink\" title=\"2.5 View带有滑动嵌套情形时，需要处理好滑动冲突\"></a>2.5 View带有滑动嵌套情形时，需要处理好滑动冲突</h4><p>如果有滑动冲突的话，那么要合适的处理滑动冲突，否则将会严重影响View的效果。</p>\n<h3 id=\"三、自定义View\"><a href=\"#三、自定义View\" class=\"headerlink\" title=\"三、自定义View\"></a>三、自定义View</h3><h4 id=\"3-1-继承View重写onDraw方法\"><a href=\"#3-1-继承View重写onDraw方法\" class=\"headerlink\" title=\"3.1 继承View重写onDraw方法\"></a>3.1 继承View重写onDraw方法</h4><p>首先来看一下代码<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">TestCustomCircleView</span> <span class=\"keyword\">extends</span> <span class=\"title\">View</span> </span>&#123;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">int</span> color = Color.RED;</div><div class=\"line\">    <span class=\"keyword\">private</span> Paint paint;</div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">TestCustomCircleView</span><span class=\"params\">(Context context)</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">super</span>(context);</div><div class=\"line\">        init();</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">TestCustomCircleView</span><span class=\"params\">(Context context, AttributeSet attrs)</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">super</span>(context, attrs);</div><div class=\"line\">        init();</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">TestCustomCircleView</span><span class=\"params\">(Context context, AttributeSet attrs, <span class=\"keyword\">int</span> defStyleAttr)</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">super</span>(context, attrs, defStyleAttr);</div><div class=\"line\">        init();</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">init</span><span class=\"params\">()</span></span>&#123;</div><div class=\"line\">        paint = <span class=\"keyword\">new</span> Paint();</div><div class=\"line\">        paint.setColor(color);</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"meta\">@Override</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title\">onDraw</span><span class=\"params\">(Canvas canvas)</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">super</span>.onDraw(canvas);</div><div class=\"line\">        <span class=\"keyword\">int</span> width = getWidth();</div><div class=\"line\">        <span class=\"keyword\">int</span> height = getHeight();</div><div class=\"line\">        <span class=\"keyword\">int</span> radius = Math.min(width,height)/<span class=\"number\">2</span>;</div><div class=\"line\">        canvas.drawCircle(width/<span class=\"number\">2</span>,height/<span class=\"number\">2</span>,radius,paint);</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>上面的代码只是一种初级的实现，当我们进行使用的时候，只支持margin属性，并不支持padding属性。对<code>onDraw</code>方法进行修改，只要在绘制的时候考虑一下padding即可。<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">@Override</span></div><div class=\"line\">   <span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title\">onDraw</span><span class=\"params\">(Canvas canvas)</span> </span>&#123;</div><div class=\"line\">       <span class=\"keyword\">super</span>.onDraw(canvas);</div><div class=\"line\">       <span class=\"keyword\">int</span> paddingLeft = getPaddingLeft();</div><div class=\"line\">       <span class=\"keyword\">int</span> paddingRight = getPaddingRight();</div><div class=\"line\">       <span class=\"keyword\">int</span> paddingTop = getPaddingTop();</div><div class=\"line\">       <span class=\"keyword\">int</span> paddingBottom = getPaddingBottom();</div><div class=\"line\">       <span class=\"keyword\">int</span> width = getWidth() - paddingLeft - paddingRight;</div><div class=\"line\">       <span class=\"keyword\">int</span> height = getHeight() - paddingBottom - paddingTop;</div><div class=\"line\">       <span class=\"keyword\">int</span> radius = Math.min(width, height) / <span class=\"number\">2</span>;</div><div class=\"line\">       canvas.drawCircle(paddingLeft + width / <span class=\"number\">2</span>, paddingTop + height / <span class=\"number\">2</span>, radius, paint);</div><div class=\"line\">   &#125;</div></pre></td></tr></table></figure></p>\n<p>但是现在还不能支持<code>warp_content</code>属性，现在使用<code>wrap_content</code>和使用<code>match_parent</code>没有任何区别：对于直接继承自View的控件，如果不对<code>wrap_content</code>做特殊处理，那么使用<code>wrap_content</code>就相当于使用<code>match_parent</code>.这里就需要我们重写<code>onMeasure</code>方法，当宽高属性为<code>wrap_content</code>时，取一个默认值。<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">@Override</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title\">onMeasure</span><span class=\"params\">(<span class=\"keyword\">int</span> widthMeasureSpec, <span class=\"keyword\">int</span> heightMeasureSpec)</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">int</span> desiredWidth = <span class=\"number\">100</span>;</div><div class=\"line\">    <span class=\"keyword\">int</span> desiredHeight = <span class=\"number\">100</span>;</div><div class=\"line\">    <span class=\"keyword\">int</span> widthMode = MeasureSpec.getMode(widthMeasureSpec);</div><div class=\"line\">    <span class=\"keyword\">int</span> widthSize = MeasureSpec.getSize(widthMeasureSpec);</div><div class=\"line\">    <span class=\"keyword\">int</span> heightMode = MeasureSpec.getMode(heightMeasureSpec);</div><div class=\"line\">    <span class=\"keyword\">int</span> heightSize = MeasureSpec.getSize(heightMeasureSpec);</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">int</span> width;</div><div class=\"line\">    <span class=\"keyword\">int</span> height;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">//宽度</span></div><div class=\"line\">    <span class=\"keyword\">if</span> (widthMode == MeasureSpec.AT_MOST) &#123;</div><div class=\"line\">        width = Math.min(desiredWidth, widthSize);</div><div class=\"line\">    &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (widthMode == MeasureSpec.EXACTLY) &#123;</div><div class=\"line\">        width = widthSize;</div><div class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">        width = desiredWidth;</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"comment\">//高度</span></div><div class=\"line\">    <span class=\"keyword\">if</span> (heightMode == MeasureSpec.AT_MOST) &#123;</div><div class=\"line\">        height = Math.min(desiredHeight, heightSize);</div><div class=\"line\">    &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (heightMode == MeasureSpec.EXACTLY) &#123;</div><div class=\"line\">        height = heightSize;</div><div class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">        height = desiredHeight;</div><div class=\"line\">    &#125;</div><div class=\"line\">    setMeasuredDimension(width, height);</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>这样，当我们使用wrap_content时，就是使用默认的100px的值。</p>\n<h3 id=\"四、使用自定义属性\"><a href=\"#四、使用自定义属性\" class=\"headerlink\" title=\"四、使用自定义属性\"></a>四、使用自定义属性</h3><h4 id=\"4-1-创建自定义的配置文件\"><a href=\"#4-1-创建自定义的配置文件\" class=\"headerlink\" title=\"4.1 创建自定义的配置文件\"></a>4.1 创建自定义的配置文件</h4><p>在values目录下面创建自定义属性的XML，比如attrs.xml，也可以选择类似于attrs_circle<em>view.xml等这种以attrs</em>开头的文件名，当然这个文件名并没有什么限制，可以随便取名字。我们选择创建attrs.xml文件。<br><figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">resources</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">declare-styleable</span> <span class=\"attr\">name</span>=<span class=\"string\">\"TestCustomCircleView\"</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">attr</span> <span class=\"attr\">name</span>=<span class=\"string\">\"circle_color\"</span> <span class=\"attr\">format</span>=<span class=\"string\">\"color\"</span>/&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">declare-styleable</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">resources</span>&gt;</span></div></pre></td></tr></table></figure></p>\n<h4 id=\"4-2-在构造方法中解析自定义的属性值并做相应的处理\"><a href=\"#4-2-在构造方法中解析自定义的属性值并做相应的处理\" class=\"headerlink\" title=\"4.2 在构造方法中解析自定义的属性值并做相应的处理\"></a>4.2 在构造方法中解析自定义的属性值并做相应的处理</h4><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">TestCustomCircleView</span><span class=\"params\">(Context context, AttributeSet attrs, <span class=\"keyword\">int</span> defStyleAttr)</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">super</span>(context, attrs, defStyleAttr);</div><div class=\"line\">    TypedArray typedArray = context.obtainStyledAttributes(attrs, R.styleable.TestCustomCircleView);</div><div class=\"line\">    color = typedArray.getColor(R.styleable.TestCustomCircleView_circle_color,Color.RED);</div><div class=\"line\">    typedArray.recycle();</div><div class=\"line\">    init();</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>首先加载自定义属性集合，接着解析属性集合中<code>TestCustomCircleView_circle_color</code>，如果没有指定属性值，则使用<code>Color.RED</code>作为默认值。</p>\n<h4 id=\"4-3-在布局文件中使用自定义属性\"><a href=\"#4-3-在布局文件中使用自定义属性\" class=\"headerlink\" title=\"4.3 在布局文件中使用自定义属性\"></a>4.3 在布局文件中使用自定义属性</h4><pre><code class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">com.example.huangyuan.custom.TestCustomCircleView</span>\n    <span class=\"attr\">android:layout_width</span>=<span class=\"string\">\"wrap_content\"</span>\n    <span class=\"attr\">android:layout_height</span>=<span class=\"string\">\"wrap_content\"</span>\n    <span class=\"attr\">android:layout_gravity</span>=<span class=\"string\">\"center_horizontal\"</span>\n    <span class=\"attr\">app:circle_color</span>=<span class=\"string\">\"@color/grey\"</span>\n    /&gt;</span>\n</code></pre>\n","excerpt":"<p>通过简单的自定义View(画个圆)，来了解一下View的工作流程以及自定义View应该注意的地方。<br>","more":"</p>\n<h3 id=\"一、自定义View的分类\"><a href=\"#一、自定义View的分类\" class=\"headerlink\" title=\"一、自定义View的分类\"></a>一、自定义View的分类</h3><h4 id=\"1-1-继承View重写onDraw方法\"><a href=\"#1-1-继承View重写onDraw方法\" class=\"headerlink\" title=\"1.1 继承View重写onDraw方法\"></a>1.1 继承View重写onDraw方法</h4><p>这种方法主要用于实现一些不规则的效果，比如动态或者静态显示一些不规则的图形，采用这种方式需要自己支持<code>wrap_content</code>,并且<code>padding</code>需要自己处理.</p>\n<h4 id=\"1-2-继承ViewGroup派生特殊的Layout\"><a href=\"#1-2-继承ViewGroup派生特殊的Layout\" class=\"headerlink\" title=\"1.2 继承ViewGroup派生特殊的Layout\"></a>1.2 继承ViewGroup派生特殊的Layout</h4><p>这种方式主要用于实现自定义布局，如流式布局。采用这种方式需要合适的处理ViewGroup的测量、布局这两个过程，并同时处理子元素的测量和布局过程。</p>\n<h4 id=\"1-3-继承特定的View-如TextView\"><a href=\"#1-3-继承特定的View-如TextView\" class=\"headerlink\" title=\"1.3 继承特定的View(如TextView)\"></a>1.3 继承特定的View(如TextView)</h4><p>这种方法一般用于扩展某种已有的<code>View</code>的功能，比如<code>TextView</code>，这种方法比较容易实现，不需要自己支持<code>wrap_content</code>和<code>padding</code>。</p>\n<h4 id=\"1-4-继承特定的ViewGroup\"><a href=\"#1-4-继承特定的ViewGroup\" class=\"headerlink\" title=\"1.4 继承特定的ViewGroup\"></a>1.4 继承特定的ViewGroup</h4><p>采用这种方式不需要自己处理<code>ViewGroup</code>的测量和布局这两个过程。</p>\n<h3 id=\"二、值得注意的地方\"><a href=\"#二、值得注意的地方\" class=\"headerlink\" title=\"二、值得注意的地方\"></a>二、值得注意的地方</h3><h4 id=\"2-1-让View支持wrap-content\"><a href=\"#2-1-让View支持wrap-content\" class=\"headerlink\" title=\"2.1 让View支持wrap_content\"></a>2.1 让View支持wrap_content</h4><p>这是因为直接继承View或者ViewGroup的控件，如果不在<code>onMeasure</code>中对<code>wrap_content</code>做特殊处理，那么当外界在适用<code>wrap_content</code>时就无法达到预期的效果。</p>\n<h4 id=\"2-2-如果有必要，让View支持padding\"><a href=\"#2-2-如果有必要，让View支持padding\" class=\"headerlink\" title=\"2.2 如果有必要，让View支持padding\"></a>2.2 如果有必要，让View支持padding</h4><p>这是因为如果直接继承View，如果不在draw方法中处理padding，那么padding属性是无法起作用的。另外，直接继承自ViewGroup的控件需要在<code>onMeasure</code>和<code>onLayout</code>中考虑padding和子元素的margin对其造成的影响，不然将导致padding和子元素的margin失效。</p>\n<h4 id=\"2-3-尽量不要在View中使用Handler，没必要\"><a href=\"#2-3-尽量不要在View中使用Handler，没必要\" class=\"headerlink\" title=\"2.3 尽量不要在View中使用Handler，没必要\"></a>2.3 尽量不要在View中使用Handler，没必要</h4><p>因为View内部本身就提供了post系列的方法， 完全可以替代Handler的作用，当然除非你很明确要使用Handler来发送消息</p>\n<h4 id=\"2-4-及时停止动画和线程\"><a href=\"#2-4-及时停止动画和线程\" class=\"headerlink\" title=\"2.4 及时停止动画和线程\"></a>2.4 及时停止动画和线程</h4><p>如果需要停止线程或者动画，可以在<code>onDetachedFromWindow</code>方法中处理，当包含此View的Activity退出或者当前View被remove时，View的<code>onDetachedFromWindow</code>方法会被调用，和此方法对应的是<code>onAttachedToWindow</code>，当包含此View的Activity启动时，View的<code>onAttachedToWindow</code>方法会被调用。</p>\n<h4 id=\"2-5-View带有滑动嵌套情形时，需要处理好滑动冲突\"><a href=\"#2-5-View带有滑动嵌套情形时，需要处理好滑动冲突\" class=\"headerlink\" title=\"2.5 View带有滑动嵌套情形时，需要处理好滑动冲突\"></a>2.5 View带有滑动嵌套情形时，需要处理好滑动冲突</h4><p>如果有滑动冲突的话，那么要合适的处理滑动冲突，否则将会严重影响View的效果。</p>\n<h3 id=\"三、自定义View\"><a href=\"#三、自定义View\" class=\"headerlink\" title=\"三、自定义View\"></a>三、自定义View</h3><h4 id=\"3-1-继承View重写onDraw方法\"><a href=\"#3-1-继承View重写onDraw方法\" class=\"headerlink\" title=\"3.1 继承View重写onDraw方法\"></a>3.1 继承View重写onDraw方法</h4><p>首先来看一下代码<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">TestCustomCircleView</span> <span class=\"keyword\">extends</span> <span class=\"title\">View</span> </span>&#123;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">int</span> color = Color.RED;</div><div class=\"line\">    <span class=\"keyword\">private</span> Paint paint;</div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">TestCustomCircleView</span><span class=\"params\">(Context context)</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">super</span>(context);</div><div class=\"line\">        init();</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">TestCustomCircleView</span><span class=\"params\">(Context context, AttributeSet attrs)</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">super</span>(context, attrs);</div><div class=\"line\">        init();</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">TestCustomCircleView</span><span class=\"params\">(Context context, AttributeSet attrs, <span class=\"keyword\">int</span> defStyleAttr)</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">super</span>(context, attrs, defStyleAttr);</div><div class=\"line\">        init();</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">init</span><span class=\"params\">()</span></span>&#123;</div><div class=\"line\">        paint = <span class=\"keyword\">new</span> Paint();</div><div class=\"line\">        paint.setColor(color);</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"meta\">@Override</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title\">onDraw</span><span class=\"params\">(Canvas canvas)</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">super</span>.onDraw(canvas);</div><div class=\"line\">        <span class=\"keyword\">int</span> width = getWidth();</div><div class=\"line\">        <span class=\"keyword\">int</span> height = getHeight();</div><div class=\"line\">        <span class=\"keyword\">int</span> radius = Math.min(width,height)/<span class=\"number\">2</span>;</div><div class=\"line\">        canvas.drawCircle(width/<span class=\"number\">2</span>,height/<span class=\"number\">2</span>,radius,paint);</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>上面的代码只是一种初级的实现，当我们进行使用的时候，只支持margin属性，并不支持padding属性。对<code>onDraw</code>方法进行修改，只要在绘制的时候考虑一下padding即可。<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">@Override</span></div><div class=\"line\">   <span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title\">onDraw</span><span class=\"params\">(Canvas canvas)</span> </span>&#123;</div><div class=\"line\">       <span class=\"keyword\">super</span>.onDraw(canvas);</div><div class=\"line\">       <span class=\"keyword\">int</span> paddingLeft = getPaddingLeft();</div><div class=\"line\">       <span class=\"keyword\">int</span> paddingRight = getPaddingRight();</div><div class=\"line\">       <span class=\"keyword\">int</span> paddingTop = getPaddingTop();</div><div class=\"line\">       <span class=\"keyword\">int</span> paddingBottom = getPaddingBottom();</div><div class=\"line\">       <span class=\"keyword\">int</span> width = getWidth() - paddingLeft - paddingRight;</div><div class=\"line\">       <span class=\"keyword\">int</span> height = getHeight() - paddingBottom - paddingTop;</div><div class=\"line\">       <span class=\"keyword\">int</span> radius = Math.min(width, height) / <span class=\"number\">2</span>;</div><div class=\"line\">       canvas.drawCircle(paddingLeft + width / <span class=\"number\">2</span>, paddingTop + height / <span class=\"number\">2</span>, radius, paint);</div><div class=\"line\">   &#125;</div></pre></td></tr></table></figure></p>\n<p>但是现在还不能支持<code>warp_content</code>属性，现在使用<code>wrap_content</code>和使用<code>match_parent</code>没有任何区别：对于直接继承自View的控件，如果不对<code>wrap_content</code>做特殊处理，那么使用<code>wrap_content</code>就相当于使用<code>match_parent</code>.这里就需要我们重写<code>onMeasure</code>方法，当宽高属性为<code>wrap_content</code>时，取一个默认值。<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">@Override</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title\">onMeasure</span><span class=\"params\">(<span class=\"keyword\">int</span> widthMeasureSpec, <span class=\"keyword\">int</span> heightMeasureSpec)</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">int</span> desiredWidth = <span class=\"number\">100</span>;</div><div class=\"line\">    <span class=\"keyword\">int</span> desiredHeight = <span class=\"number\">100</span>;</div><div class=\"line\">    <span class=\"keyword\">int</span> widthMode = MeasureSpec.getMode(widthMeasureSpec);</div><div class=\"line\">    <span class=\"keyword\">int</span> widthSize = MeasureSpec.getSize(widthMeasureSpec);</div><div class=\"line\">    <span class=\"keyword\">int</span> heightMode = MeasureSpec.getMode(heightMeasureSpec);</div><div class=\"line\">    <span class=\"keyword\">int</span> heightSize = MeasureSpec.getSize(heightMeasureSpec);</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">int</span> width;</div><div class=\"line\">    <span class=\"keyword\">int</span> height;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">//宽度</span></div><div class=\"line\">    <span class=\"keyword\">if</span> (widthMode == MeasureSpec.AT_MOST) &#123;</div><div class=\"line\">        width = Math.min(desiredWidth, widthSize);</div><div class=\"line\">    &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (widthMode == MeasureSpec.EXACTLY) &#123;</div><div class=\"line\">        width = widthSize;</div><div class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">        width = desiredWidth;</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"comment\">//高度</span></div><div class=\"line\">    <span class=\"keyword\">if</span> (heightMode == MeasureSpec.AT_MOST) &#123;</div><div class=\"line\">        height = Math.min(desiredHeight, heightSize);</div><div class=\"line\">    &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (heightMode == MeasureSpec.EXACTLY) &#123;</div><div class=\"line\">        height = heightSize;</div><div class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">        height = desiredHeight;</div><div class=\"line\">    &#125;</div><div class=\"line\">    setMeasuredDimension(width, height);</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>这样，当我们使用wrap_content时，就是使用默认的100px的值。</p>\n<h3 id=\"四、使用自定义属性\"><a href=\"#四、使用自定义属性\" class=\"headerlink\" title=\"四、使用自定义属性\"></a>四、使用自定义属性</h3><h4 id=\"4-1-创建自定义的配置文件\"><a href=\"#4-1-创建自定义的配置文件\" class=\"headerlink\" title=\"4.1 创建自定义的配置文件\"></a>4.1 创建自定义的配置文件</h4><p>在values目录下面创建自定义属性的XML，比如attrs.xml，也可以选择类似于attrs_circle<em>view.xml等这种以attrs</em>开头的文件名，当然这个文件名并没有什么限制，可以随便取名字。我们选择创建attrs.xml文件。<br><figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">resources</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">declare-styleable</span> <span class=\"attr\">name</span>=<span class=\"string\">\"TestCustomCircleView\"</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">attr</span> <span class=\"attr\">name</span>=<span class=\"string\">\"circle_color\"</span> <span class=\"attr\">format</span>=<span class=\"string\">\"color\"</span>/&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">declare-styleable</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">resources</span>&gt;</span></div></pre></td></tr></table></figure></p>\n<h4 id=\"4-2-在构造方法中解析自定义的属性值并做相应的处理\"><a href=\"#4-2-在构造方法中解析自定义的属性值并做相应的处理\" class=\"headerlink\" title=\"4.2 在构造方法中解析自定义的属性值并做相应的处理\"></a>4.2 在构造方法中解析自定义的属性值并做相应的处理</h4><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">TestCustomCircleView</span><span class=\"params\">(Context context, AttributeSet attrs, <span class=\"keyword\">int</span> defStyleAttr)</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">super</span>(context, attrs, defStyleAttr);</div><div class=\"line\">    TypedArray typedArray = context.obtainStyledAttributes(attrs, R.styleable.TestCustomCircleView);</div><div class=\"line\">    color = typedArray.getColor(R.styleable.TestCustomCircleView_circle_color,Color.RED);</div><div class=\"line\">    typedArray.recycle();</div><div class=\"line\">    init();</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>首先加载自定义属性集合，接着解析属性集合中<code>TestCustomCircleView_circle_color</code>，如果没有指定属性值，则使用<code>Color.RED</code>作为默认值。</p>\n<h4 id=\"4-3-在布局文件中使用自定义属性\"><a href=\"#4-3-在布局文件中使用自定义属性\" class=\"headerlink\" title=\"4.3 在布局文件中使用自定义属性\"></a>4.3 在布局文件中使用自定义属性</h4><pre><code class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">com.example.huangyuan.custom.TestCustomCircleView</span>\n    <span class=\"attr\">android:layout_width</span>=<span class=\"string\">\"wrap_content\"</span>\n    <span class=\"attr\">android:layout_height</span>=<span class=\"string\">\"wrap_content\"</span>\n    <span class=\"attr\">android:layout_gravity</span>=<span class=\"string\">\"center_horizontal\"</span>\n    <span class=\"attr\">app:circle_color</span>=<span class=\"string\">\"@color/grey\"</span>\n    /&gt;</span>\n</code></pre>"}],"PostAsset":[],"PostCategory":[],"PostTag":[{"post_id":"cjbvyt3u40000scdgvdob8214","tag_id":"cjbvyt3u90002scdg91o7ls93","_id":"cjbvyt3uj000bscdg2286fat5"},{"post_id":"cjbvyt3u40000scdgvdob8214","tag_id":"cjbvyt3ue0006scdgjhxmq60x","_id":"cjbvyt3ul000dscdgtiigfixl"},{"post_id":"cjbvyt3u70001scdgwnfzt7xn","tag_id":"cjbvyt3ui0009scdg8qsur8l3","_id":"cjbvyt3uo000gscdgh426a3vl"},{"post_id":"cjbvyt3ub0003scdga9iovuz0","tag_id":"cjbvyt3um000escdgrqen1uig","_id":"cjbvyt3ut000nscdgc9twgw6m"},{"post_id":"cjbvyt3ub0003scdga9iovuz0","tag_id":"cjbvyt3up000iscdgm0dh432f","_id":"cjbvyt3uv000pscdg809qcssm"},{"post_id":"cjbvyt3ut000oscdgflfx6ixj","tag_id":"cjbvyt3us000mscdgrwj5y8z0","_id":"cjbvyt3ux000sscdgmvljcz7p"},{"post_id":"cjbvyt3uc0004scdgdcph7zyc","tag_id":"cjbvyt3us000mscdgrwj5y8z0","_id":"cjbvyt3uy000uscdgmuzop3r1"},{"post_id":"cjbvyt3ud0005scdgzo516m1i","tag_id":"cjbvyt3um000escdgrqen1uig","_id":"cjbvyt3v40011scdgift0p8nh"},{"post_id":"cjbvyt3ud0005scdgzo516m1i","tag_id":"cjbvyt3up000iscdgm0dh432f","_id":"cjbvyt3v50013scdgj211uu6k"},{"post_id":"cjbvyt3uf0007scdgsaa07z01","tag_id":"cjbvyt3v2000zscdg8gt2cxle","_id":"cjbvyt3v90019scdg7un0kpny"},{"post_id":"cjbvyt3uf0007scdgsaa07z01","tag_id":"cjbvyt3v60014scdgcugaoezb","_id":"cjbvyt3va001bscdgb5gk0abs"},{"post_id":"cjbvyt3v70016scdgnvg7znbh","tag_id":"cjbvyt3ui0009scdg8qsur8l3","_id":"cjbvyt3vd001escdg7g8minb3"},{"post_id":"cjbvyt3vb001dscdgnpc1wwwl","tag_id":"cjbvyt3ui0009scdg8qsur8l3","_id":"cjbvyt3vd001fscdghhvrh74i"},{"post_id":"cjbvyt3ug0008scdgl4z30rea","tag_id":"cjbvyt3v2000zscdg8gt2cxle","_id":"cjbvyt3vf001hscdg2if7ukji"},{"post_id":"cjbvyt3ug0008scdgl4z30rea","tag_id":"cjbvyt3v60014scdgcugaoezb","_id":"cjbvyt3vf001iscdg6dx6honf"},{"post_id":"cjbvyt3uj000ascdg79zob0d0","tag_id":"cjbvyt3ve001gscdgifecy9p4","_id":"cjbvyt3vg001lscdgobzncqv7"},{"post_id":"cjbvyt3uj000ascdg79zob0d0","tag_id":"cjbvyt3v60014scdgcugaoezb","_id":"cjbvyt3vg001mscdgqvycjaf9"},{"post_id":"cjbvyt3uk000cscdgya8kdq2e","tag_id":"cjbvyt3vf001kscdg5enrh6kp","_id":"cjbvyt3vi001qscdgc2ca12dg"},{"post_id":"cjbvyt3uk000cscdgya8kdq2e","tag_id":"cjbvyt3vh001nscdg3gnbzwin","_id":"cjbvyt3vi001rscdgg70xa9s0"},{"post_id":"cjbvyt3uk000cscdgya8kdq2e","tag_id":"cjbvyt3vh001oscdgt50mv0jr","_id":"cjbvyt3vj001tscdgtwo1bewr"},{"post_id":"cjbvyt3um000fscdges93pnsi","tag_id":"cjbvyt3v2000zscdg8gt2cxle","_id":"cjbvyt3vk001vscdgsw5buxdm"},{"post_id":"cjbvyt3um000fscdges93pnsi","tag_id":"cjbvyt3v60014scdgcugaoezb","_id":"cjbvyt3vk001wscdg7vlk5pol"},{"post_id":"cjbvyt3uo000hscdgyziprl5k","tag_id":"cjbvyt3vk001uscdgp23cr030","_id":"cjbvyt3vl001zscdglxiqy80m"},{"post_id":"cjbvyt3uo000hscdgyziprl5k","tag_id":"cjbvyt3vk001xscdg2z35kxca","_id":"cjbvyt3vl0020scdg7vi4a3tc"},{"post_id":"cjbvyt3uq000jscdgp2a81ls9","tag_id":"cjbvyt3vl001yscdg1e7yuihf","_id":"cjbvyt3vm0023scdg7ij5ujwx"},{"post_id":"cjbvyt3uq000jscdgp2a81ls9","tag_id":"cjbvyt3vm0021scdggq4xezb4","_id":"cjbvyt3vm0024scdgzapn2w1s"},{"post_id":"cjbvyt3ur000kscdgx1boet3h","tag_id":"cjbvyt3vm0022scdge4gziszg","_id":"cjbvyt3vo0028scdghf5q8z5n"},{"post_id":"cjbvyt3ur000kscdgx1boet3h","tag_id":"cjbvyt3vn0025scdgo9679ipb","_id":"cjbvyt3vo0029scdgio6s2luc"},{"post_id":"cjbvyt3ur000kscdgx1boet3h","tag_id":"cjbvyt3vn0026scdg810zdg93","_id":"cjbvyt3vp002bscdgve7t2bp9"},{"post_id":"cjbvyt3ur000lscdgj0oh7abb","tag_id":"cjbvyt3us000mscdgrwj5y8z0","_id":"cjbvyt3vp002cscdg90htyu57"},{"post_id":"cjbvyt3uv000qscdghnymm1uu","tag_id":"cjbvyt3vo002ascdgfjuhro7u","_id":"cjbvyt3vq002fscdgnr91vm2t"},{"post_id":"cjbvyt3uv000qscdghnymm1uu","tag_id":"cjbvyt3vp002dscdg4pwf88zv","_id":"cjbvyt3vq002gscdgujbxwpto"},{"post_id":"cjbvyt3ux000tscdghpsxpowp","tag_id":"cjbvyt3vp002escdgdsctx39b","_id":"cjbvyt3vr002kscdg7w5eodnr"},{"post_id":"cjbvyt3ux000tscdghpsxpowp","tag_id":"cjbvyt3vh001nscdg3gnbzwin","_id":"cjbvyt3vs002lscdggwk25q6h"},{"post_id":"cjbvyt3ux000tscdghpsxpowp","tag_id":"cjbvyt3vh001oscdgt50mv0jr","_id":"cjbvyt3vs002nscdgh6ewavir"},{"post_id":"cjbvyt3uy000vscdg5ijclney","tag_id":"cjbvyt3vm0022scdge4gziszg","_id":"cjbvyt3vu002qscdgn72ssopm"},{"post_id":"cjbvyt3uy000vscdg5ijclney","tag_id":"cjbvyt3vn0025scdgo9679ipb","_id":"cjbvyt3vu002rscdgir6pruzg"},{"post_id":"cjbvyt3uy000vscdg5ijclney","tag_id":"cjbvyt3vn0026scdg810zdg93","_id":"cjbvyt3vv002tscdgkiwaroju"},{"post_id":"cjbvyt3v0000xscdgs1h1rrv3","tag_id":"cjbvyt3u90002scdg91o7ls93","_id":"cjbvyt3vv002uscdgyn313bwm"},{"post_id":"cjbvyt3v0000xscdgs1h1rrv3","tag_id":"cjbvyt3us000mscdgrwj5y8z0","_id":"cjbvyt3vw002wscdgcxteh71x"},{"post_id":"cjbvyt3v0000xscdgs1h1rrv3","tag_id":"cjbvyt3vt002pscdg6qk5ar3o","_id":"cjbvyt3vw002xscdgt12y98cr"},{"post_id":"cjbvyt3v1000yscdg4fiiasu5","tag_id":"cjbvyt3vn0026scdg810zdg93","_id":"cjbvyt3vx0030scdge3jg7cky"},{"post_id":"cjbvyt3v1000yscdg4fiiasu5","tag_id":"cjbvyt3vn0025scdgo9679ipb","_id":"cjbvyt3vx0031scdgy2ylgfzy"},{"post_id":"cjbvyt3v1000yscdg4fiiasu5","tag_id":"cjbvyt3vm0022scdge4gziszg","_id":"cjbvyt3vy0033scdgw510oz6f"},{"post_id":"cjbvyt3v30010scdgxdi2vhn3","tag_id":"cjbvyt3u90002scdg91o7ls93","_id":"cjbvyt3vy0034scdgmta0rmac"},{"post_id":"cjbvyt3v30010scdgxdi2vhn3","tag_id":"cjbvyt3us000mscdgrwj5y8z0","_id":"cjbvyt3vz0036scdg2czedeuj"},{"post_id":"cjbvyt3v30010scdgxdi2vhn3","tag_id":"cjbvyt3vx002zscdgj4gqc228","_id":"cjbvyt3vz0037scdgv6f81rrm"},{"post_id":"cjbvyt3v50012scdg9l4t24ta","tag_id":"cjbvyt3u90002scdg91o7ls93","_id":"cjbvyt3w00039scdg4gzfbfp4"},{"post_id":"cjbvyt3v50012scdg9l4t24ta","tag_id":"cjbvyt3us000mscdgrwj5y8z0","_id":"cjbvyt3w0003ascdgxok1ax7p"},{"post_id":"cjbvyt3v50012scdg9l4t24ta","tag_id":"cjbvyt3vx002zscdgj4gqc228","_id":"cjbvyt3w1003cscdgb4nmivts"},{"post_id":"cjbvyt3v60015scdgyw7oahqg","tag_id":"cjbvyt3u90002scdg91o7ls93","_id":"cjbvyt3w1003dscdgkd06qjbu"},{"post_id":"cjbvyt3v60015scdgyw7oahqg","tag_id":"cjbvyt3us000mscdgrwj5y8z0","_id":"cjbvyt3w1003fscdgde7shrrh"},{"post_id":"cjbvyt3v60015scdgyw7oahqg","tag_id":"cjbvyt3vx002zscdgj4gqc228","_id":"cjbvyt3w2003gscdgarf0ssxg"},{"post_id":"cjbvyt3v80018scdgok6w12vm","tag_id":"cjbvyt3w00038scdg2d3yamvr","_id":"cjbvyt3w2003iscdg70h8ynw9"},{"post_id":"cjbvyt3v80018scdgok6w12vm","tag_id":"cjbvyt3w0003bscdg669xu228","_id":"cjbvyt3w3003jscdg820y0zt3"},{"post_id":"cjbvyt3v80018scdgok6w12vm","tag_id":"cjbvyt3u90002scdg91o7ls93","_id":"cjbvyt3w3003lscdg0msn4aba"},{"post_id":"cjbvyt3va001ascdgwtyb1y9f","tag_id":"cjbvyt3vo002ascdgfjuhro7u","_id":"cjbvyt3w4003mscdgktq5js93"},{"post_id":"cjbvyt3va001ascdgwtyb1y9f","tag_id":"cjbvyt3vh001nscdg3gnbzwin","_id":"cjbvyt3w4003nscdg9xwvbe4a"},{"post_id":"cjbvyt3va001ascdgwtyb1y9f","tag_id":"cjbvyt3vh001oscdgt50mv0jr","_id":"cjbvyt3w5003oscdght1rr64p"},{"post_id":"cjbvyt3wf003sscdg7y9gqo71","tag_id":"cjbvyt3us000mscdgrwj5y8z0","_id":"cjbvyt3wh003uscdg9603okvo"},{"post_id":"cjbvyt3wg003tscdgwvbakyz7","tag_id":"cjbvyt3us000mscdgrwj5y8z0","_id":"cjbvyt3wi003wscdg0mmatqd3"},{"post_id":"cjbvyt3wc003pscdgx59ul3wt","tag_id":"cjbvyt3wf003rscdguwoip8zx","_id":"cjbvyt3wi003xscdgqqv7ngev"},{"post_id":"cjbvyt3wd003qscdgy8ra3lkz","tag_id":"cjbvyt3wf003rscdguwoip8zx","_id":"cjbvyt3wj003yscdg94b6zhda"}],"Tag":[{"name":"Android爬坑之旅","_id":"cjbvyt3u90002scdg91o7ls93"},{"name":"Android N","_id":"cjbvyt3ue0006scdgjhxmq60x"},{"name":"乱七八糟","_id":"cjbvyt3ui0009scdg8qsur8l3"},{"name":"Andorid","_id":"cjbvyt3um000escdgrqen1uig"},{"name":"WebSocket","_id":"cjbvyt3up000iscdgm0dh432f"},{"name":"Android","_id":"cjbvyt3us000mscdgrwj5y8z0"},{"name":"Java","_id":"cjbvyt3v2000zscdg8gt2cxle"},{"name":"JVM","_id":"cjbvyt3v60014scdgcugaoezb"},{"name":"java","_id":"cjbvyt3ve001gscdgifecy9p4"},{"name":"jenkins","_id":"cjbvyt3vf001kscdg5enrh6kp"},{"name":"运维","_id":"cjbvyt3vh001nscdg3gnbzwin"},{"name":"服务器","_id":"cjbvyt3vh001oscdgt50mv0jr"},{"name":"python","_id":"cjbvyt3vk001uscdgp23cr030"},{"name":"flask","_id":"cjbvyt3vk001xscdg2z35kxca"},{"name":"tcp协议","_id":"cjbvyt3vl001yscdg1e7yuihf"},{"name":"tcp/ip协议族","_id":"cjbvyt3vm0021scdggq4xezb4"},{"name":"hexo","_id":"cjbvyt3vm0022scdge4gziszg"},{"name":"gitpage","_id":"cjbvyt3vn0025scdgo9679ipb"},{"name":"blog","_id":"cjbvyt3vn0026scdg810zdg93"},{"name":"git","_id":"cjbvyt3vo002ascdgfjuhro7u"},{"name":"git工具","_id":"cjbvyt3vp002dscdg4pwf88zv"},{"name":"elk","_id":"cjbvyt3vp002escdgdsctx39b"},{"name":"融云IM","_id":"cjbvyt3vt002pscdg6qk5ar3o"},{"name":"高德地图","_id":"cjbvyt3vx002zscdgj4gqc228"},{"name":"android","_id":"cjbvyt3w00038scdg2d3yamvr"},{"name":"bug","_id":"cjbvyt3w0003bscdg669xu228"},{"name":"csdn","_id":"cjbvyt3wf003rscdguwoip8zx"}]}}